{
    "repository": "xlcnd/isbnlib",
    "clone_url": "https://github.com/xlcnd/isbnlib.git",
    "timestamp": "2023-05-29T15:30:57.555231Z",
    "clone_success": true,
    "number of actions": 4,
    "number_of_test_actions": 1,
    "actions_successful": false,
    "actions_stdout": "[tests/basic-tests-windows] \ud83d\ude80  Start image=crawlergpt:latest\n[tests/basic-tests-macos  ] \ud83d\ude80  Start image=crawlergpt:latest\n[tests/basic-tests-linux  ] \ud83d\ude80  Start image=crawlergpt:latest\n[tests/basic-tests-macos  ]   \ud83d\udc33  docker pull image=crawlergpt:latest platform= username= forcePull=false\n[tests/basic-tests-windows]   \ud83d\udc33  docker pull image=crawlergpt:latest platform= username= forcePull=false\n[tests/basic-tests-linux  ]   \ud83d\udc33  docker pull image=crawlergpt:latest platform= username= forcePull=false\n[tests/basic-tests-windows]   \ud83d\udc33  docker create image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[tests/basic-tests-linux  ]   \ud83d\udc33  docker create image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[tests/basic-tests-macos  ]   \ud83d\udc33  docker create image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[tests/basic-tests-windows]   \ud83d\udc33  docker run image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[tests/basic-tests-macos  ]   \ud83d\udc33  docker run image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[tests/basic-tests-linux  ]   \ud83d\udc33  docker run image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[tests/basic-tests-windows]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/xlcnd-isbnlib] user=0 workdir=\n[tests/basic-tests-linux  ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/xlcnd-isbnlib] user=0 workdir=\n[tests/basic-tests-macos  ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/xlcnd-isbnlib] user=0 workdir=\n[tests/basic-tests-windows]   \u2601  git clone 'https://github.com/actions/setup-python' # ref=v4\n[tests/basic-tests-macos  ]   \u2601  git clone 'https://github.com/actions/setup-python' # ref=v4\n[tests/basic-tests-linux  ]   \u2601  git clone 'https://github.com/actions/setup-python' # ref=v4\n[tests/basic-tests-windows] \ud83e\uddea  Matrix: map[python-version:3.x]\n[tests/basic-tests-windows] \u2b50 Run Main actions/checkout@v3\n[tests/basic-tests-macos  ] \ud83e\uddea  Matrix: map[python-version:3.8]\n[tests/basic-tests-windows]   \u2705  Success - Main actions/checkout@v3\n[tests/basic-tests-linux  ] \ud83e\uddea  Matrix: map[python-version:3.9]\n[tests/basic-tests-macos  ] \u2b50 Run Main actions/checkout@v3\n[tests/basic-tests-windows] \u2b50 Run Main Set up Python 3.x\n[tests/basic-tests-linux  ] \u2b50 Run Main actions/checkout@v3\n[tests/basic-tests-macos  ]   \u2705  Success - Main actions/checkout@v3\n[tests/basic-tests-linux  ]   \u2705  Success - Main actions/checkout@v3\n[tests/basic-tests-windows]   \ud83d\udc33  docker cp src=/home/andre-silva/.cache/act/actions-setup-python@v4/ dst=/var/run/act/actions/actions-setup-python@v4/\n[tests/basic-tests-windows]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /var/run/act/actions/actions-setup-python@v4/] user=0 workdir=\n[tests/basic-tests-macos  ] \u2b50 Run Main Set up Python 3.8\n[tests/basic-tests-linux  ] \u2b50 Run Main Set up Python 3.9\n[tests/basic-tests-linux  ]   \ud83d\udc33  docker cp src=/home/andre-silva/.cache/act/actions-setup-python@v4/ dst=/var/run/act/actions/actions-setup-python@v4/\n[tests/basic-tests-macos  ]   \ud83d\udc33  docker cp src=/home/andre-silva/.cache/act/actions-setup-python@v4/ dst=/var/run/act/actions/actions-setup-python@v4/\n[tests/basic-tests-linux  ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /var/run/act/actions/actions-setup-python@v4/] user=0 workdir=\n[tests/basic-tests-macos  ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /var/run/act/actions/actions-setup-python@v4/] user=0 workdir=\n[tests/basic-tests-windows]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/actions-setup-python@v4/dist/setup/index.js] user= workdir=\n[tests/basic-tests-macos  ]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/actions-setup-python@v4/dist/setup/index.js] user= workdir=\n[tests/basic-tests-linux  ]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/actions-setup-python@v4/dist/setup/index.js] user= workdir=\n[tests/basic-tests-windows]   \ud83d\udcac  ::debug::Python is expected to be installed into /opt/hostedtoolcache\n[tests/basic-tests-windows]   \u2753  ::group::Installed versions\n[tests/basic-tests-windows]   \ud83d\udcac  ::debug::Semantic version spec of 3.x is 3.x\n[tests/basic-tests-windows]   \ud83d\udcac  ::debug::isExplicit: \n[tests/basic-tests-windows]   \ud83d\udcac  ::debug::explicit? false\n[tests/basic-tests-windows]   \ud83d\udcac  ::debug::isExplicit: 2.7.18\n[tests/basic-tests-windows]   \ud83d\udcac  ::debug::explicit? true\n[tests/basic-tests-windows]   \ud83d\udcac  ::debug::isExplicit: 3.5.10\n[tests/basic-tests-windows]   \ud83d\udcac  ::debug::explicit? true\n[tests/basic-tests-windows]   \ud83d\udcac  ::debug::isExplicit: 3.6.14\n[tests/basic-tests-windows]   \ud83d\udcac  ::debug::explicit? true\n[tests/basic-tests-windows]   \ud83d\udcac  ::debug::isExplicit: 3.7.11\n[tests/basic-tests-windows]   \ud83d\udcac  ::debug::explicit? true\n[tests/basic-tests-windows]   \ud83d\udcac  ::debug::isExplicit: 3.8.11\n[tests/basic-tests-windows]   \ud83d\udcac  ::debug::explicit? true\n[tests/basic-tests-windows]   \ud83d\udcac  ::debug::isExplicit: 3.9.6\n[tests/basic-tests-windows]   \ud83d\udcac  ::debug::explicit? true\n[tests/basic-tests-windows]   \ud83d\udcac  ::debug::evaluating 6 versions\n[tests/basic-tests-windows]   \ud83d\udcac  ::debug::matched: 3.9.6\n[tests/basic-tests-windows]   \ud83d\udcac  ::debug::checking cache: /opt/hostedtoolcache/Python/3.9.6/x64\n[tests/basic-tests-windows]   \ud83d\udcac  ::debug::Found tool in cache Python 3.9.6 x64\n[tests/basic-tests-windows]   | Successfully set up CPython (3.9.6)\n[tests/basic-tests-windows]   \u2753  ::endgroup::\n[tests/basic-tests-windows]   \u2753 add-matcher /run/act/actions/actions-setup-python@v4/.github/python.json\n[tests/basic-tests-linux  ]   \ud83d\udcac  ::debug::Python is expected to be installed into /opt/hostedtoolcache\n[tests/basic-tests-linux  ]   \u2753  ::group::Installed versions\n[tests/basic-tests-linux  ]   \ud83d\udcac  ::debug::Semantic version spec of 3.9 is 3.9\n[tests/basic-tests-linux  ]   \ud83d\udcac  ::debug::isExplicit: \n[tests/basic-tests-linux  ]   \ud83d\udcac  ::debug::explicit? false\n[tests/basic-tests-linux  ]   \ud83d\udcac  ::debug::isExplicit: 2.7.18\n[tests/basic-tests-linux  ]   \ud83d\udcac  ::debug::explicit? true\n[tests/basic-tests-linux  ]   \ud83d\udcac  ::debug::isExplicit: 3.5.10\n[tests/basic-tests-linux  ]   \ud83d\udcac  ::debug::explicit? true\n[tests/basic-tests-linux  ]   \ud83d\udcac  ::debug::isExplicit: 3.6.14\n[tests/basic-tests-linux  ]   \ud83d\udcac  ::debug::explicit? true\n[tests/basic-tests-linux  ]   \ud83d\udcac  ::debug::isExplicit: 3.7.11\n[tests/basic-tests-linux  ]   \ud83d\udcac  ::debug::explicit? true\n[tests/basic-tests-linux  ]   \ud83d\udcac  ::debug::isExplicit: 3.8.11\n[tests/basic-tests-linux  ]   \ud83d\udcac  ::debug::explicit? true\n[tests/basic-tests-linux  ]   \ud83d\udcac  ::debug::isExplicit: 3.9.6\n[tests/basic-tests-linux  ]   \ud83d\udcac  ::debug::explicit? true\n[tests/basic-tests-linux  ]   \ud83d\udcac  ::debug::evaluating 6 versions\n[tests/basic-tests-linux  ]   \ud83d\udcac  ::debug::matched: 3.9.6\n[tests/basic-tests-linux  ]   \ud83d\udcac  ::debug::checking cache: /opt/hostedtoolcache/Python/3.9.6/x64\n[tests/basic-tests-linux  ]   \ud83d\udcac  ::debug::Found tool in cache Python 3.9.6 x64\n[tests/basic-tests-macos  ]   \ud83d\udcac  ::debug::Python is expected to be installed into /opt/hostedtoolcache\n[tests/basic-tests-macos  ]   \u2753  ::group::Installed versions\n[tests/basic-tests-macos  ]   \ud83d\udcac  ::debug::Semantic version spec of 3.8 is 3.8\n[tests/basic-tests-macos  ]   \ud83d\udcac  ::debug::isExplicit: \n[tests/basic-tests-macos  ]   \ud83d\udcac  ::debug::explicit? false\n[tests/basic-tests-macos  ]   \ud83d\udcac  ::debug::isExplicit: 2.7.18\n[tests/basic-tests-macos  ]   \ud83d\udcac  ::debug::explicit? true\n[tests/basic-tests-linux  ]   | Successfully set up CPython (3.9.6)\n[tests/basic-tests-linux  ]   \u2753  ::endgroup::\n[tests/basic-tests-linux  ]   \u2753 add-matcher /run/act/actions/actions-setup-python@v4/.github/python.json\n[tests/basic-tests-macos  ]   \ud83d\udcac  ::debug::isExplicit: 3.5.10\n[tests/basic-tests-macos  ]   \ud83d\udcac  ::debug::explicit? true\n[tests/basic-tests-macos  ]   \ud83d\udcac  ::debug::isExplicit: 3.6.14\n[tests/basic-tests-macos  ]   \ud83d\udcac  ::debug::explicit? true\n[tests/basic-tests-macos  ]   \ud83d\udcac  ::debug::isExplicit: 3.7.11\n[tests/basic-tests-macos  ]   \ud83d\udcac  ::debug::explicit? true\n[tests/basic-tests-macos  ]   \ud83d\udcac  ::debug::isExplicit: 3.8.11\n[tests/basic-tests-macos  ]   \ud83d\udcac  ::debug::explicit? true\n[tests/basic-tests-macos  ]   \ud83d\udcac  ::debug::isExplicit: 3.9.6\n[tests/basic-tests-macos  ]   \ud83d\udcac  ::debug::explicit? true\n[tests/basic-tests-macos  ]   \ud83d\udcac  ::debug::evaluating 6 versions\n[tests/basic-tests-macos  ]   \ud83d\udcac  ::debug::matched: 3.8.11\n[tests/basic-tests-macos  ]   \ud83d\udcac  ::debug::checking cache: /opt/hostedtoolcache/Python/3.8.11/x64\n[tests/basic-tests-macos  ]   \ud83d\udcac  ::debug::Found tool in cache Python 3.8.11 x64\n[tests/basic-tests-macos  ]   | Successfully set up CPython (3.8.11)\n[tests/basic-tests-macos  ]   \u2753  ::endgroup::\n[tests/basic-tests-macos  ]   \u2753 add-matcher /run/act/actions/actions-setup-python@v4/.github/python.json\n[tests/basic-tests-windows]   \u2705  Success - Main Set up Python 3.x\n[tests/basic-tests-linux  ]   \u2705  Success - Main Set up Python 3.9\n[tests/basic-tests-macos  ]   \u2705  Success - Main Set up Python 3.8\n[tests/basic-tests-linux  ]   \u2699  ::set-env:: Python_ROOT_DIR=/opt/hostedtoolcache/Python/3.9.6/x64\n[tests/basic-tests-linux  ]   \u2699  ::set-env:: Python2_ROOT_DIR=/opt/hostedtoolcache/Python/3.9.6/x64\n[tests/basic-tests-linux  ]   \u2699  ::set-env:: Python3_ROOT_DIR=/opt/hostedtoolcache/Python/3.9.6/x64\n[tests/basic-tests-windows]   \u2699  ::set-env:: pythonLocation=/opt/hostedtoolcache/Python/3.9.6/x64\n[tests/basic-tests-windows]   \u2699  ::set-env:: PKG_CONFIG_PATH=/opt/hostedtoolcache/Python/3.9.6/x64/lib/pkgconfig\n[tests/basic-tests-windows]   \u2699  ::set-env:: Python_ROOT_DIR=/opt/hostedtoolcache/Python/3.9.6/x64\n[tests/basic-tests-windows]   \u2699  ::set-env:: Python2_ROOT_DIR=/opt/hostedtoolcache/Python/3.9.6/x64\n[tests/basic-tests-windows]   \u2699  ::set-env:: Python3_ROOT_DIR=/opt/hostedtoolcache/Python/3.9.6/x64\n[tests/basic-tests-windows]   \u2699  ::set-env:: LD_LIBRARY_PATH=/opt/hostedtoolcache/Python/3.9.6/x64/lib\n[tests/basic-tests-linux  ]   \u2699  ::set-env:: LD_LIBRARY_PATH=/opt/hostedtoolcache/Python/3.9.6/x64/lib\n[tests/basic-tests-linux  ]   \u2699  ::set-env:: pythonLocation=/opt/hostedtoolcache/Python/3.9.6/x64\n[tests/basic-tests-linux  ]   \u2699  ::set-env:: PKG_CONFIG_PATH=/opt/hostedtoolcache/Python/3.9.6/x64/lib/pkgconfig\n[tests/basic-tests-macos  ]   \u2699  ::set-env:: PKG_CONFIG_PATH=/opt/hostedtoolcache/Python/3.8.11/x64/lib/pkgconfig\n[tests/basic-tests-macos  ]   \u2699  ::set-env:: Python_ROOT_DIR=/opt/hostedtoolcache/Python/3.8.11/x64\n[tests/basic-tests-macos  ]   \u2699  ::set-env:: Python2_ROOT_DIR=/opt/hostedtoolcache/Python/3.8.11/x64\n[tests/basic-tests-macos  ]   \u2699  ::set-env:: Python3_ROOT_DIR=/opt/hostedtoolcache/Python/3.8.11/x64\n[tests/basic-tests-macos  ]   \u2699  ::set-env:: LD_LIBRARY_PATH=/opt/hostedtoolcache/Python/3.8.11/x64/lib\n[tests/basic-tests-macos  ]   \u2699  ::set-env:: pythonLocation=/opt/hostedtoolcache/Python/3.8.11/x64\n[tests/basic-tests-macos  ]   \u2699  ::set-output:: python-version=3.8.11\n[tests/basic-tests-macos  ]   \u2699  ::set-output:: python-path=/opt/hostedtoolcache/Python/3.8.11/x64/bin/python\n[tests/basic-tests-linux  ]   \u2699  ::set-output:: python-version=3.9.6\n[tests/basic-tests-linux  ]   \u2699  ::set-output:: python-path=/opt/hostedtoolcache/Python/3.9.6/x64/bin/python\n[tests/basic-tests-windows]   \u2699  ::set-output:: python-version=3.9.6\n[tests/basic-tests-windows]   \u2699  ::set-output:: python-path=/opt/hostedtoolcache/Python/3.9.6/x64/bin/python\n[tests/basic-tests-linux  ]   \u2699  ::add-path:: /opt/hostedtoolcache/Python/3.9.6/x64\n[tests/basic-tests-linux  ]   \u2699  ::add-path:: /opt/hostedtoolcache/Python/3.9.6/x64/bin\n[tests/basic-tests-windows]   \u2699  ::add-path:: /opt/hostedtoolcache/Python/3.9.6/x64\n[tests/basic-tests-windows]   \u2699  ::add-path:: /opt/hostedtoolcache/Python/3.9.6/x64/bin\n[tests/basic-tests-macos  ]   \u2699  ::add-path:: /opt/hostedtoolcache/Python/3.8.11/x64\n[tests/basic-tests-macos  ]   \u2699  ::add-path:: /opt/hostedtoolcache/Python/3.8.11/x64/bin\n[tests/basic-tests-macos  ] \u2b50 Run Main Update pip\n[tests/basic-tests-windows] \u2b50 Run Main Update pip\n[tests/basic-tests-linux  ] \u2b50 Run Main Update pip & setuptools\n[tests/basic-tests-macos  ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/2] user= workdir=\n[tests/basic-tests-windows]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/2] user= workdir=\n[tests/basic-tests-linux  ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/2] user= workdir=\n[tests/basic-tests-linux  ]   | Requirement already satisfied: pip in /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages (21.2.4)\n[tests/basic-tests-macos  ]   | Requirement already satisfied: pip in /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages (21.2.4)\n[tests/basic-tests-windows]   | Requirement already satisfied: pip in /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages (21.2.4)\n[tests/basic-tests-linux  ]   | Collecting pip\n[tests/basic-tests-linux  ]   |   Downloading pip-23.1.2-py3-none-any.whl (2.1 MB)\n[tests/basic-tests-macos  ]   | Collecting pip\n[tests/basic-tests-windows]   | Collecting pip\n[tests/basic-tests-macos  ]   |   Downloading pip-23.1.2-py3-none-any.whl (2.1 MB)\n[tests/basic-tests-linux  ]   | Requirement already satisfied: setuptools in /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages (56.0.0)\n[tests/basic-tests-windows]   |   Downloading pip-23.1.2-py3-none-any.whl (2.1 MB)\n[tests/basic-tests-macos  ]   | Installing collected packages: pip\n[tests/basic-tests-macos  ]   |   Attempting uninstall: pip\n[tests/basic-tests-macos  ]   |     Found existing installation: pip 21.2.4\n[tests/basic-tests-windows]   | Installing collected packages: pip\n[tests/basic-tests-windows]   |   Attempting uninstall: pip\n[tests/basic-tests-windows]   |     Found existing installation: pip 21.2.4\n[tests/basic-tests-windows]   |     Uninstalling pip-21.2.4:\n[tests/basic-tests-macos  ]   |     Uninstalling pip-21.2.4:\n[tests/basic-tests-linux  ]   | Collecting setuptools\n[tests/basic-tests-linux  ]   |   Downloading setuptools-67.8.0-py3-none-any.whl (1.1 MB)\n[tests/basic-tests-linux  ]   | Collecting wheel\n[tests/basic-tests-linux  ]   |   Downloading wheel-0.40.0-py3-none-any.whl (64 kB)\n[tests/basic-tests-linux  ]   | Installing collected packages: wheel, setuptools, pip\n[tests/basic-tests-linux  ]   |   Attempting uninstall: setuptools\n[tests/basic-tests-linux  ]   |     Found existing installation: setuptools 56.0.0\n[tests/basic-tests-linux  ]   |     Uninstalling setuptools-56.0.0:\n[tests/basic-tests-windows]   |       Successfully uninstalled pip-21.2.4\n[tests/basic-tests-linux  ]   |       Successfully uninstalled setuptools-56.0.0\n[tests/basic-tests-macos  ]   |       Successfully uninstalled pip-21.2.4\n[tests/basic-tests-linux  ]   |   Attempting uninstall: pip\n[tests/basic-tests-linux  ]   |     Found existing installation: pip 21.2.4\n[tests/basic-tests-linux  ]   |     Uninstalling pip-21.2.4:\n[tests/basic-tests-linux  ]   |       Successfully uninstalled pip-21.2.4\n[tests/basic-tests-windows]   | Successfully installed pip-23.1.2\n[tests/basic-tests-macos  ]   | Successfully installed pip-23.1.2\n[tests/basic-tests-windows]   \u2705  Success - Main Update pip\n[tests/basic-tests-macos  ]   \u2705  Success - Main Update pip\n[tests/basic-tests-windows] \u2b50 Run Main Test with pytest\n[tests/basic-tests-macos  ] \u2b50 Run Main Test with pytest\n[tests/basic-tests-windows]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/3] user= workdir=\n[tests/basic-tests-macos  ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/3] user= workdir=\n[tests/basic-tests-linux  ]   | Successfully installed pip-23.1.2 setuptools-67.8.0 wheel-0.40.0\n[tests/basic-tests-linux  ]   \u2705  Success - Main Update pip & setuptools\n[tests/basic-tests-linux  ] \u2b50 Run Main Lint the code with flake8\n[tests/basic-tests-linux  ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/3] user= workdir=\n[tests/basic-tests-linux  ]   | Collecting flake8\n[tests/basic-tests-windows]   | Collecting wheel\n[tests/basic-tests-macos  ]   | Collecting wheel\n[tests/basic-tests-linux  ]   |   Downloading flake8-6.0.0-py2.py3-none-any.whl (57 kB)\n[tests/basic-tests-macos  ]   |   Downloading wheel-0.40.0-py3-none-any.whl (64 kB)\n[tests/basic-tests-windows]   |   Downloading wheel-0.40.0-py3-none-any.whl (64 kB)\n[tests/basic-tests-linux  ]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 57.8/57.8 kB 1.0 MB/s eta 0:00:00\n[tests/basic-tests-macos  ]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 64.5/64.5 kB 1.2 MB/s eta 0:00:00\n[tests/basic-tests-windows]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 64.5/64.5 kB 4.7 MB/s eta 0:00:00\n[tests/basic-tests-linux  ]   | Collecting mccabe<0.8.0,>=0.7.0 (from flake8)\n[tests/basic-tests-linux  ]   |   Downloading mccabe-0.7.0-py2.py3-none-any.whl (7.3 kB)\n[tests/basic-tests-linux  ]   | Collecting pycodestyle<2.11.0,>=2.10.0 (from flake8)\n[tests/basic-tests-macos  ]   | Collecting pytest\n[tests/basic-tests-macos  ]   |   Downloading pytest-7.3.1-py3-none-any.whl (320 kB)\n[tests/basic-tests-windows]   | Collecting pytest\n[tests/basic-tests-linux  ]   |   Downloading pycodestyle-2.10.0-py2.py3-none-any.whl (41 kB)\n[tests/basic-tests-windows]   |   Downloading pytest-7.3.1-py3-none-any.whl (320 kB)\n[tests/basic-tests-linux  ]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 41.3/41.3 kB 840.7 kB/s eta 0:00:00\n[tests/basic-tests-macos  ]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 320.5/320.5 kB 6.3 MB/s eta 0:00:00\n[tests/basic-tests-windows]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 320.5/320.5 kB 22.0 MB/s eta 0:00:00\n[tests/basic-tests-linux  ]   | Collecting pyflakes<3.1.0,>=3.0.0 (from flake8)\n[tests/basic-tests-linux  ]   |   Downloading pyflakes-3.0.1-py2.py3-none-any.whl (62 kB)\n[tests/basic-tests-linux  ]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 62.8/62.8 kB 411.5 kB/s eta 0:00:00\n[tests/basic-tests-linux  ]   | Installing collected packages: pyflakes, pycodestyle, mccabe, flake8\n[tests/basic-tests-linux  ]   | Successfully installed flake8-6.0.0 mccabe-0.7.0 pycodestyle-2.10.0 pyflakes-3.0.1\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | [notice] A new release of pip is available: 21.1.3 -> 23.1.2\n[tests/basic-tests-linux  ]   | [notice] To update, run: pip install --upgrade pip\n[tests/basic-tests-macos  ]   | Collecting coverage\n[tests/basic-tests-macos  ]   |   Downloading coverage-7.2.6-cp38-cp38-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl (229 kB)\n[tests/basic-tests-windows]   | Collecting coverage\n[tests/basic-tests-windows]   |   Downloading coverage-7.2.6-cp39-cp39-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl (228 kB)\n[tests/basic-tests-macos  ]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 229.8/229.8 kB 6.9 MB/s eta 0:00:00\n[tests/basic-tests-windows]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 228.2/228.2 kB 23.3 MB/s eta 0:00:00\n[tests/basic-tests-macos  ]   | Collecting pytest-cov\n[tests/basic-tests-macos  ]   |   Downloading pytest_cov-4.1.0-py3-none-any.whl (21 kB)\n[tests/basic-tests-windows]   | Collecting pytest-cov\n[tests/basic-tests-windows]   |   Downloading pytest_cov-4.1.0-py3-none-any.whl (21 kB)\n[tests/basic-tests-macos  ]   | Collecting iniconfig (from pytest)\n[tests/basic-tests-windows]   | Collecting iniconfig (from pytest)\n[tests/basic-tests-macos  ]   |   Downloading iniconfig-2.0.0-py3-none-any.whl (5.9 kB)\n[tests/basic-tests-windows]   |   Downloading iniconfig-2.0.0-py3-none-any.whl (5.9 kB)\n[tests/basic-tests-macos  ]   | Collecting packaging (from pytest)\n[tests/basic-tests-macos  ]   |   Downloading packaging-23.1-py3-none-any.whl (48 kB)\n[tests/basic-tests-windows]   | Collecting packaging (from pytest)\n[tests/basic-tests-windows]   |   Downloading packaging-23.1-py3-none-any.whl (48 kB)\n[tests/basic-tests-macos  ]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 48.9/48.9 kB 1.2 MB/s eta 0:00:00\n[tests/basic-tests-windows]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 48.9/48.9 kB 1.9 MB/s eta 0:00:00\n[tests/basic-tests-linux  ]   | 0\n[tests/basic-tests-macos  ]   | Collecting pluggy<2.0,>=0.12 (from pytest)\n[tests/basic-tests-windows]   | Collecting pluggy<2.0,>=0.12 (from pytest)\n[tests/basic-tests-macos  ]   |   Downloading pluggy-1.0.0-py2.py3-none-any.whl (13 kB)\n[tests/basic-tests-windows]   |   Downloading pluggy-1.0.0-py2.py3-none-any.whl (13 kB)\n[tests/basic-tests-macos  ]   | Collecting exceptiongroup>=1.0.0rc8 (from pytest)\n[tests/basic-tests-windows]   | Collecting exceptiongroup>=1.0.0rc8 (from pytest)\n[tests/basic-tests-macos  ]   |   Downloading exceptiongroup-1.1.1-py3-none-any.whl (14 kB)\n[tests/basic-tests-windows]   |   Downloading exceptiongroup-1.1.1-py3-none-any.whl (14 kB)\n[tests/basic-tests-macos  ]   | Collecting tomli>=1.0.0 (from pytest)\n[tests/basic-tests-windows]   | Collecting tomli>=1.0.0 (from pytest)\n[tests/basic-tests-windows]   |   Downloading tomli-2.0.1-py3-none-any.whl (12 kB)\n[tests/basic-tests-macos  ]   |   Downloading tomli-2.0.1-py3-none-any.whl (12 kB)\n[tests/basic-tests-macos  ]   | Installing collected packages: wheel, tomli, pluggy, packaging, iniconfig, exceptiongroup, coverage, pytest, pytest-cov\n[tests/basic-tests-windows]   | Installing collected packages: wheel, tomli, pluggy, packaging, iniconfig, exceptiongroup, coverage, pytest, pytest-cov\n[tests/basic-tests-linux  ]   | 0\n[tests/basic-tests-linux  ]   \u2705  Success - Main Lint the code with flake8\n[tests/basic-tests-linux  ] \u2b50 Run Main Sleep for 1-30 seconds\n[tests/basic-tests-linux  ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/4.sh] user= workdir=\n[tests/basic-tests-macos  ]   | Successfully installed coverage-7.2.6 exceptiongroup-1.1.1 iniconfig-2.0.0 packaging-23.1 pluggy-1.0.0 pytest-7.3.1 pytest-cov-4.1.0 tomli-2.0.1 wheel-0.40.0\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | [notice] A new release of pip is available: 21.1.1 -> 23.1.2\n[tests/basic-tests-macos  ]   | [notice] To update, run: pip install --upgrade pip\n[tests/basic-tests-windows]   | Successfully installed coverage-7.2.6 exceptiongroup-1.1.1 iniconfig-2.0.0 packaging-23.1 pluggy-1.0.0 pytest-7.3.1 pytest-cov-4.1.0 tomli-2.0.1 wheel-0.40.0\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | [notice] A new release of pip is available: 21.1.3 -> 23.1.2\n[tests/basic-tests-windows]   | [notice] To update, run: pip install --upgrade pip\n[tests/basic-tests-windows]   | ============================= test session starts ==============================\n[tests/basic-tests-windows]   | platform linux -- Python 3.9.6, pytest-7.3.1, pluggy-1.0.0 -- /opt/hostedtoolcache/Python/3.9.6/x64/bin/python\n[tests/basic-tests-windows]   | cachedir: .pytest_cache\n[tests/basic-tests-windows]   | rootdir: /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/xlcnd-isbnlib\n[tests/basic-tests-windows]   | configfile: setup.cfg\n[tests/basic-tests-windows]   | plugins: cov-4.1.0\n[tests/basic-tests-macos  ]   | ============================= test session starts ==============================\n[tests/basic-tests-macos  ]   | platform linux -- Python 3.8.11, pytest-7.3.1, pluggy-1.0.0 -- /opt/hostedtoolcache/Python/3.8.11/x64/bin/python\n[tests/basic-tests-macos  ]   | cachedir: .pytest_cache\n[tests/basic-tests-macos  ]   | rootdir: /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/xlcnd-isbnlib\n[tests/basic-tests-macos  ]   | configfile: setup.cfg\n[tests/basic-tests-macos  ]   | plugins: cov-4.1.0\n[tests/basic-tests-macos  ]   | collecting ... collected 64 items\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-windows]   | collecting ... collected 64 items\n[tests/basic-tests-windows]   | \n[tests/basic-tests-macos  ]   | isbnlib/test/test_cache.py::test_cache_set PASSED                        [  1%]\n[tests/basic-tests-windows]   | isbnlib/test/test_cache.py::test_cache_set PASSED                        [  1%]\n[tests/basic-tests-macos  ]   | isbnlib/test/test_cache.py::test_cache_get PASSED                        [  3%]\n[tests/basic-tests-windows]   | isbnlib/test/test_cache.py::test_cache_get PASSED                        [  3%]\n[tests/basic-tests-macos  ]   | isbnlib/test/test_cache.py::test_cache_contains PASSED                   [  4%]\n[tests/basic-tests-windows]   | isbnlib/test/test_cache.py::test_cache_contains PASSED                   [  4%]\n[tests/basic-tests-macos  ]   | isbnlib/test/test_cache.py::test_cache_del PASSED                        [  6%]\n[tests/basic-tests-windows]   | isbnlib/test/test_cache.py::test_cache_del PASSED                        [  6%]\n[tests/basic-tests-macos  ]   | isbnlib/test/test_cache_decorator.py::test_cache_meta ERROR              [  7%]\n[tests/basic-tests-macos  ]   | isbnlib/test/test_core.py::test_check_digit10 PASSED                     [  9%]\n[tests/basic-tests-macos  ]   | isbnlib/test/test_core.py::test_check_digit13 PASSED                     [ 10%]\n[tests/basic-tests-macos  ]   | isbnlib/test/test_core.py::test__check_structure10 PASSED                [ 12%]\n[tests/basic-tests-macos  ]   | isbnlib/test/test_core.py::test__check_structure13 PASSED                [ 14%]\n[tests/basic-tests-macos  ]   | isbnlib/test/test_core.py::test_is_isbn10 PASSED                         [ 15%]\n[tests/basic-tests-macos  ]   | isbnlib/test/test_core.py::test_is_isbn13 PASSED                         [ 17%]\n[tests/basic-tests-macos  ]   | isbnlib/test/test_core.py::test_to_isbn10 PASSED                         [ 18%]\n[tests/basic-tests-macos  ]   | isbnlib/test/test_core.py::test_to_isbn13 PASSED                         [ 20%]\n[tests/basic-tests-macos  ]   | isbnlib/test/test_core.py::test_clean PASSED                             [ 21%]\n[tests/basic-tests-macos  ]   | isbnlib/test/test_core.py::test_notisbn PASSED                           [ 23%]\n[tests/basic-tests-macos  ]   | isbnlib/test/test_core.py::test_get_isbnlike PASSED                      [ 25%]\n[tests/basic-tests-macos  ]   | isbnlib/test/test_core.py::test_get_canonical_isbn PASSED                [ 26%]\n[tests/basic-tests-macos  ]   | isbnlib/test/test_core.py::test_canonical PASSED                         [ 28%]\n[tests/basic-tests-macos  ]   | isbnlib/test/test_core.py::test_ean13 PASSED                             [ 29%]\n[tests/basic-tests-macos  ]   | isbnlib/test/test_data.py::test_stdmeta PASSED                           [ 31%]\n[tests/basic-tests-macos  ]   | isbnlib/test/test_data.py::test_metaclass PASSED                         [ 32%]\n[tests/basic-tests-macos  ]   | isbnlib/test/test_data.py::test_metrge PASSED                            [ 34%]\n[tests/basic-tests-macos  ]   | isbnlib/test/test_exceptions.py::test_catchall PASSED                    [ 35%]\n[tests/basic-tests-macos  ]   | isbnlib/test/test_ext.py::test_mask PASSED                               [ 37%]\n[tests/basic-tests-windows]   | isbnlib/test/test_cache_decorator.py::test_cache_meta ERROR              [  7%]\n[tests/basic-tests-windows]   | isbnlib/test/test_core.py::test_check_digit10 PASSED                     [  9%]\n[tests/basic-tests-windows]   | isbnlib/test/test_core.py::test_check_digit13 PASSED                     [ 10%]\n[tests/basic-tests-windows]   | isbnlib/test/test_core.py::test__check_structure10 PASSED                [ 12%]\n[tests/basic-tests-windows]   | isbnlib/test/test_core.py::test__check_structure13 PASSED                [ 14%]\n[tests/basic-tests-windows]   | isbnlib/test/test_core.py::test_is_isbn10 PASSED                         [ 15%]\n[tests/basic-tests-windows]   | isbnlib/test/test_core.py::test_is_isbn13 PASSED                         [ 17%]\n[tests/basic-tests-windows]   | isbnlib/test/test_core.py::test_to_isbn10 PASSED                         [ 18%]\n[tests/basic-tests-windows]   | isbnlib/test/test_core.py::test_to_isbn13 PASSED                         [ 20%]\n[tests/basic-tests-windows]   | isbnlib/test/test_core.py::test_clean PASSED                             [ 21%]\n[tests/basic-tests-windows]   | isbnlib/test/test_core.py::test_notisbn PASSED                           [ 23%]\n[tests/basic-tests-windows]   | isbnlib/test/test_core.py::test_get_isbnlike PASSED                      [ 25%]\n[tests/basic-tests-windows]   | isbnlib/test/test_core.py::test_get_canonical_isbn PASSED                [ 26%]\n[tests/basic-tests-windows]   | isbnlib/test/test_core.py::test_canonical PASSED                         [ 28%]\n[tests/basic-tests-windows]   | isbnlib/test/test_core.py::test_ean13 PASSED                             [ 29%]\n[tests/basic-tests-windows]   | isbnlib/test/test_data.py::test_stdmeta PASSED                           [ 31%]\n[tests/basic-tests-windows]   | isbnlib/test/test_data.py::test_metaclass PASSED                         [ 32%]\n[tests/basic-tests-windows]   | isbnlib/test/test_data.py::test_metrge PASSED                            [ 34%]\n[tests/basic-tests-windows]   | isbnlib/test/test_exceptions.py::test_catchall PASSED                    [ 35%]\n[tests/basic-tests-windows]   | isbnlib/test/test_ext.py::test_mask PASSED                               [ 37%]\n[tests/basic-tests-windows]   | isbnlib/test/test_ext.py::test_isbn_from_words PASSED                    [ 39%]\n[tests/basic-tests-windows]   | isbnlib/test/test_ext.py::test_doi PASSED                                [ 40%]\n[tests/basic-tests-macos  ]   | isbnlib/test/test_ext.py::test_isbn_from_words PASSED                    [ 39%]\n[tests/basic-tests-macos  ]   | isbnlib/test/test_ext.py::test_doi PASSED                                [ 40%]\n[tests/basic-tests-windows]   | isbnlib/test/test_ext.py::test_desc FAILED                               [ 42%]\n[tests/basic-tests-linux  ]   | 3\n[tests/basic-tests-macos  ]   | isbnlib/test/test_ext.py::test_desc FAILED                               [ 42%]\n[tests/basic-tests-windows]   | isbnlib/test/test_ext.py::test_cover FAILED                              [ 43%]\n[tests/basic-tests-windows]   | isbnlib/test/test_files.py::test_isfile PASSED                           [ 45%]\n[tests/basic-tests-windows]   | isbnlib/test/test_files.py::test_exists PASSED                           [ 46%]\n[tests/basic-tests-windows]   | isbnlib/test/test_files.py::test_validate PASSED                         [ 48%]\n[tests/basic-tests-windows]   | isbnlib/test/test_files.py::test_mkwinsafe PASSED                        [ 50%]\n[tests/basic-tests-windows]   | isbnlib/test/test_files.py::test_baserename PASSED                       [ 51%]\n[tests/basic-tests-windows]   | isbnlib/test/test_files.py::test_cwdfiles PASSED                         [ 53%]\n[tests/basic-tests-windows]   | isbnlib/test/test_fmt.py::test_fmtbib PASSED                             [ 54%]\n[tests/basic-tests-macos  ]   | isbnlib/test/test_ext.py::test_cover FAILED                              [ 43%]\n[tests/basic-tests-macos  ]   | isbnlib/test/test_files.py::test_isfile PASSED                           [ 45%]\n[tests/basic-tests-macos  ]   | isbnlib/test/test_files.py::test_exists PASSED                           [ 46%]\n[tests/basic-tests-macos  ]   | isbnlib/test/test_files.py::test_validate PASSED                         [ 48%]\n[tests/basic-tests-macos  ]   | isbnlib/test/test_files.py::test_mkwinsafe PASSED                        [ 50%]\n[tests/basic-tests-macos  ]   | isbnlib/test/test_files.py::test_baserename PASSED                       [ 51%]\n[tests/basic-tests-macos  ]   | isbnlib/test/test_files.py::test_cwdfiles PASSED                         [ 53%]\n[tests/basic-tests-macos  ]   | isbnlib/test/test_fmt.py::test_fmtbib PASSED                             [ 54%]\n[tests/basic-tests-windows]   | isbnlib/test/test_goom.py::test_goom FAILED                              [ 56%]\n[tests/basic-tests-windows]   | isbnlib/test/test_helpers.py::test_last_first PASSED                     [ 57%]\n[tests/basic-tests-windows]   | isbnlib/test/test_helpers.py::test_cutoff_tokens PASSED                  [ 59%]\n[tests/basic-tests-windows]   | isbnlib/test/test_helpers.py::test_parse_placeholders PASSED             [ 60%]\n[tests/basic-tests-windows]   | isbnlib/test/test_helpers.py::test_fake_isbn PASSED                      [ 62%]\n[tests/basic-tests-windows]   | isbnlib/test/test_info.py::test_infogroup PASSED                         [ 64%]\n[tests/basic-tests-windows]   | isbnlib/test/test_info.py::test_ext_info PASSED                          [ 65%]\n[tests/basic-tests-windows]   | isbnlib/test/test_isbn.py::test_ean13 PASSED                             [ 67%]\n[tests/basic-tests-windows]   | isbnlib/test/test_isbn.py::test_isbn13 PASSED                            [ 68%]\n[tests/basic-tests-windows]   | isbnlib/test/test_isbn.py::test_isbn10 PASSED                            [ 70%]\n[tests/basic-tests-windows]   | isbnlib/test/test_isbn.py::test_doi PASSED                               [ 71%]\n[tests/basic-tests-windows]   | isbnlib/test/test_isbn.py::test_issued PASSED                            [ 73%]\n[tests/basic-tests-windows]   | isbnlib/test/test_isbn.py::test_info PASSED                              [ 75%]\n[tests/basic-tests-windows]   | isbnlib/test/test_isbn.py::test_errors PASSED                            [ 76%]\n[tests/basic-tests-windows]   | isbnlib/test/test_isbn.py::test_str PASSED                               [ 78%]\n[tests/basic-tests-windows]   | isbnlib/test/test_isbn.py::test_repr PASSED                              [ 79%]\n[tests/basic-tests-macos  ]   | isbnlib/test/test_goom.py::test_goom FAILED                              [ 56%]\n[tests/basic-tests-macos  ]   | isbnlib/test/test_helpers.py::test_last_first PASSED                     [ 57%]\n[tests/basic-tests-macos  ]   | isbnlib/test/test_helpers.py::test_cutoff_tokens PASSED                  [ 59%]\n[tests/basic-tests-macos  ]   | isbnlib/test/test_helpers.py::test_parse_placeholders PASSED             [ 60%]\n[tests/basic-tests-macos  ]   | isbnlib/test/test_helpers.py::test_fake_isbn PASSED                      [ 62%]\n[tests/basic-tests-macos  ]   | isbnlib/test/test_info.py::test_infogroup PASSED                         [ 64%]\n[tests/basic-tests-macos  ]   | isbnlib/test/test_info.py::test_ext_info PASSED                          [ 65%]\n[tests/basic-tests-macos  ]   | isbnlib/test/test_isbn.py::test_ean13 PASSED                             [ 67%]\n[tests/basic-tests-macos  ]   | isbnlib/test/test_isbn.py::test_isbn13 PASSED                            [ 68%]\n[tests/basic-tests-macos  ]   | isbnlib/test/test_isbn.py::test_isbn10 PASSED                            [ 70%]\n[tests/basic-tests-macos  ]   | isbnlib/test/test_isbn.py::test_doi PASSED                               [ 71%]\n[tests/basic-tests-macos  ]   | isbnlib/test/test_isbn.py::test_issued PASSED                            [ 73%]\n[tests/basic-tests-macos  ]   | isbnlib/test/test_isbn.py::test_info PASSED                              [ 75%]\n[tests/basic-tests-macos  ]   | isbnlib/test/test_isbn.py::test_errors PASSED                            [ 76%]\n[tests/basic-tests-macos  ]   | isbnlib/test/test_isbn.py::test_str PASSED                               [ 78%]\n[tests/basic-tests-macos  ]   | isbnlib/test/test_isbn.py::test_repr PASSED                              [ 79%]\n[tests/basic-tests-windows]   | isbnlib/test/test_metadata.py::test_query FAILED                         [ 81%]\n[tests/basic-tests-macos  ]   | isbnlib/test/test_metadata.py::test_query FAILED                         [ 81%]\n[tests/basic-tests-windows]   | isbnlib/test/test_metadata.py::test_ext_meta FAILED                      [ 82%]\n[tests/basic-tests-macos  ]   | isbnlib/test/test_metadata.py::test_ext_meta FAILED                      [ 82%]\n[tests/basic-tests-linux  ]   \u2705  Success - Main Sleep for 1-30 seconds\n[tests/basic-tests-linux  ] \u2b50 Run Main Test with pytest\n[tests/basic-tests-linux  ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/5] user= workdir=\n[tests/basic-tests-macos  ]   | isbnlib/test/test_openl.py::test_query PASSED                            [ 84%]\n[tests/basic-tests-macos  ]   | isbnlib/test/test_registry.py::test_setdefaultbibformatter PASSED        [ 85%]\n[tests/basic-tests-macos  ]   | isbnlib/test/test_registry.py::test_setdefaultservice PASSED             [ 87%]\n[tests/basic-tests-windows]   | isbnlib/test/test_openl.py::test_query FAILED                            [ 84%]\n[tests/basic-tests-windows]   | isbnlib/test/test_registry.py::test_setdefaultbibformatter PASSED        [ 85%]\n[tests/basic-tests-windows]   | isbnlib/test/test_registry.py::test_setdefaultservice PASSED             [ 87%]\n[tests/basic-tests-macos  ]   | isbnlib/test/test_rename.py::test_ren FAILED                             [ 89%]\n[tests/basic-tests-macos  ]   | isbnlib/test/test_speed.py::test_speed_isbnlib PASSED                    [ 90%]\n[tests/basic-tests-macos  ]   | isbnlib/test/test_speed.py::test_speed_registry PASSED                   [ 92%]\n[tests/basic-tests-macos  ]   | isbnlib/test/test_vias.py::test_vias_serial PASSED                       [ 93%]\n[tests/basic-tests-macos  ]   | isbnlib/test/test_vias.py::test_vias_parallel PASSED                     [ 95%]\n[tests/basic-tests-macos  ]   | isbnlib/test/test_vias.py::test_vias_multi PASSED                        [ 96%]\n[tests/basic-tests-windows]   | isbnlib/test/test_rename.py::test_ren FAILED                             [ 89%]\n[tests/basic-tests-windows]   | isbnlib/test/test_speed.py::test_speed_isbnlib PASSED                    [ 90%]\n[tests/basic-tests-windows]   | isbnlib/test/test_speed.py::test_speed_registry PASSED                   [ 92%]\n[tests/basic-tests-windows]   | isbnlib/test/test_vias.py::test_vias_serial PASSED                       [ 93%]\n[tests/basic-tests-windows]   | isbnlib/test/test_vias.py::test_vias_parallel PASSED                     [ 95%]\n[tests/basic-tests-windows]   | isbnlib/test/test_vias.py::test_vias_multi PASSED                        [ 96%]\n[tests/basic-tests-macos  ]   | isbnlib/test/test_webservice.py::test_webservice PASSED                  [ 98%]\n[tests/basic-tests-windows]   | isbnlib/test/test_webservice.py::test_webservice PASSED                  [ 98%]\n[tests/basic-tests-windows]   | isbnlib/test/test_words.py::test_words PASSED                            [100%]\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | ==================================== ERRORS ====================================\n[tests/basic-tests-windows]   | ______________________ ERROR at setup of test_cache_meta _______________________\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | self = <isbnlib.dev.webservice.WEBService object at 0x7fda36e83e80>\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   |     def response(self):\n[tests/basic-tests-windows]   |         \"\"\"Check errors on response.\"\"\"\n[tests/basic-tests-windows]   |         # TODO(http 102)\n[tests/basic-tests-windows]   |         # How to handle \"102 http's code\"?\n[tests/basic-tests-windows]   |         # - urlopen doesn't catch a 102 code!\n[tests/basic-tests-windows]   |         #   https://docs.python.org/3/howto/urllib2.html#error-codes\n[tests/basic-tests-windows]   |         try:\n[tests/basic-tests-windows]   | >           response = urlopen(\n[tests/basic-tests-windows]   |                 self._request,\n[tests/basic-tests-windows]   |                 timeout=options.get('URLOPEN_TIMEOUT'),\n[tests/basic-tests-windows]   |             )\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | isbnlib/dev/webservice.py:50: \n[tests/basic-tests-windows]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | url = <urllib.request.Request object at 0x7fda36e83dc0>, data = None\n[tests/basic-tests-windows]   | timeout = 10\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   |     def urlopen(url, data=None, timeout=socket._GLOBAL_DEFAULT_TIMEOUT,\n[tests/basic-tests-windows]   |                 *, cafile=None, capath=None, cadefault=False, context=None):\n[tests/basic-tests-windows]   |         '''Open the URL url, which can be either a string or a Request object.\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         *data* must be an object specifying additional data to be sent to\n[tests/basic-tests-windows]   |         the server, or None if no such data is needed.  See Request for\n[tests/basic-tests-windows]   |         details.\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         urllib.request module uses HTTP/1.1 and includes a \"Connection:close\"\n[tests/basic-tests-windows]   |         header in its HTTP requests.\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         The optional *timeout* parameter specifies a timeout in seconds for\n[tests/basic-tests-windows]   |         blocking operations like the connection attempt (if not specified, the\n[tests/basic-tests-windows]   |         global default timeout setting will be used). This only works for HTTP,\n[tests/basic-tests-windows]   |         HTTPS and FTP connections.\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         If *context* is specified, it must be a ssl.SSLContext instance describing\n[tests/basic-tests-windows]   |         the various SSL options. See HTTPSConnection for more details.\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         The optional *cafile* and *capath* parameters specify a set of trusted CA\n[tests/basic-tests-windows]   |         certificates for HTTPS requests. cafile should point to a single file\n[tests/basic-tests-windows]   |         containing a bundle of CA certificates, whereas capath should point to a\n[tests/basic-tests-windows]   |         directory of hashed certificate files. More information can be found in\n[tests/basic-tests-windows]   |         ssl.SSLContext.load_verify_locations().\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         The *cadefault* parameter is ignored.\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         This function always returns an object which can work as a\n[tests/basic-tests-windows]   |         context manager and has the properties url, headers, and status.\n[tests/basic-tests-windows]   |         See urllib.response.addinfourl for more detail on these properties.\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         For HTTP and HTTPS URLs, this function returns a http.client.HTTPResponse\n[tests/basic-tests-windows]   |         object slightly modified. In addition to the three new methods above, the\n[tests/basic-tests-windows]   |         msg attribute contains the same information as the reason attribute ---\n[tests/basic-tests-windows]   |         the reason phrase returned by the server --- instead of the response\n[tests/basic-tests-windows]   |         headers as it is specified in the documentation for HTTPResponse.\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         For FTP, file, and data URLs and requests explicitly handled by legacy\n[tests/basic-tests-windows]   |         URLopener and FancyURLopener classes, this function returns a\n[tests/basic-tests-windows]   |         urllib.response.addinfourl object.\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         Note that None may be returned if no handler handles the request (though\n[tests/basic-tests-windows]   |         the default installed global OpenerDirector uses UnknownHandler to ensure\n[tests/basic-tests-windows]   |         this never happens).\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         In addition, if proxy settings are detected (for example, when a *_proxy\n[tests/basic-tests-windows]   |         environment variable like http_proxy is set), ProxyHandler is default\n[tests/basic-tests-windows]   |         installed and makes sure the requests are handled through the proxy.\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         '''\n[tests/basic-tests-windows]   |         global _opener\n[tests/basic-tests-windows]   |         if cafile or capath or cadefault:\n[tests/basic-tests-windows]   |             import warnings\n[tests/basic-tests-windows]   |             warnings.warn(\"cafile, capath and cadefault are deprecated, use a \"\n[tests/basic-tests-windows]   |                           \"custom context instead.\", DeprecationWarning, 2)\n[tests/basic-tests-windows]   |             if context is not None:\n[tests/basic-tests-windows]   |                 raise ValueError(\n[tests/basic-tests-windows]   |                     \"You can't pass both context and any of cafile, capath, and \"\n[tests/basic-tests-windows]   |                     \"cadefault\"\n[tests/basic-tests-windows]   |                 )\n[tests/basic-tests-windows]   |             if not _have_ssl:\n[tests/basic-tests-windows]   |                 raise ValueError('SSL support not available')\n[tests/basic-tests-windows]   |             context = ssl.create_default_context(ssl.Purpose.SERVER_AUTH,\n[tests/basic-tests-windows]   |                                                  cafile=cafile,\n[tests/basic-tests-windows]   |                                                  capath=capath)\n[tests/basic-tests-windows]   |             https_handler = HTTPSHandler(context=context)\n[tests/basic-tests-windows]   |             opener = build_opener(https_handler)\n[tests/basic-tests-windows]   |         elif context:\n[tests/basic-tests-windows]   |             https_handler = HTTPSHandler(context=context)\n[tests/basic-tests-windows]   |             opener = build_opener(https_handler)\n[tests/basic-tests-windows]   |         elif _opener is None:\n[tests/basic-tests-windows]   |             _opener = opener = build_opener()\n[tests/basic-tests-windows]   |         else:\n[tests/basic-tests-windows]   |             opener = _opener\n[tests/basic-tests-windows]   | >       return opener.open(url, data, timeout)\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/urllib/request.py:214: \n[tests/basic-tests-windows]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | self = <urllib.request.OpenerDirector object at 0x7fda36e83b20>\n[tests/basic-tests-windows]   | fullurl = <urllib.request.Request object at 0x7fda36e83dc0>, data = None\n[tests/basic-tests-windows]   | timeout = 10\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   |     def open(self, fullurl, data=None, timeout=socket._GLOBAL_DEFAULT_TIMEOUT):\n[tests/basic-tests-windows]   |         # accept a URL or a Request object\n[tests/basic-tests-windows]   |         if isinstance(fullurl, str):\n[tests/basic-tests-windows]   |             req = Request(fullurl, data)\n[tests/basic-tests-windows]   |         else:\n[tests/basic-tests-windows]   |             req = fullurl\n[tests/basic-tests-windows]   |             if data is not None:\n[tests/basic-tests-windows]   |                 req.data = data\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         req.timeout = timeout\n[tests/basic-tests-windows]   |         protocol = req.type\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         # pre-process request\n[tests/basic-tests-windows]   |         meth_name = protocol+\"_request\"\n[tests/basic-tests-windows]   |         for processor in self.process_request.get(protocol, []):\n[tests/basic-tests-windows]   |             meth = getattr(processor, meth_name)\n[tests/basic-tests-windows]   |             req = meth(req)\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         sys.audit('urllib.Request', req.full_url, req.data, req.headers, req.get_method())\n[tests/basic-tests-windows]   |         response = self._open(req, data)\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         # post-process response\n[tests/basic-tests-windows]   |         meth_name = protocol+\"_response\"\n[tests/basic-tests-windows]   |         for processor in self.process_response.get(protocol, []):\n[tests/basic-tests-windows]   |             meth = getattr(processor, meth_name)\n[tests/basic-tests-windows]   | >           response = meth(req, response)\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/urllib/request.py:523: \n[tests/basic-tests-windows]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | self = <urllib.request.HTTPErrorProcessor object at 0x7fda371a6d60>\n[tests/basic-tests-windows]   | request = <urllib.request.Request object at 0x7fda36e83dc0>\n[tests/basic-tests-windows]   | response = <http.client.HTTPResponse object at 0x7fda371adca0>\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   |     def http_response(self, request, response):\n[tests/basic-tests-windows]   |         code, msg, hdrs = response.code, response.msg, response.info()\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         # According to RFC 2616, \"2xx\" code indicates that the client's\n[tests/basic-tests-windows]   |         # request was successfully received, understood, and accepted.\n[tests/basic-tests-windows]   |         if not (200 <= code < 300):\n[tests/basic-tests-windows]   | >           response = self.parent.error(\n[tests/basic-tests-windows]   |                 'http', request, response, code, msg, hdrs)\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/urllib/request.py:632: \n[tests/basic-tests-windows]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | self = <urllib.request.OpenerDirector object at 0x7fda36e83b20>, proto = 403\n[tests/basic-tests-windows]   | args = ({'default': [<urllib.request.HTTPDefaultErrorHandler object at 0x7fda36e83eb0>], 301: [<urllib.request.HTTPRedirectHa...ult', <urllib.request.Request object at 0x7fda36e83dc0>, <http.client.HTTPResponse object at 0x7fda371adca0>, 403, ...)\n[tests/basic-tests-windows]   | dict = {'default': [<urllib.request.HTTPDefaultErrorHandler object at 0x7fda36e83eb0>], 301: [<urllib.request.HTTPRedirectHan...PRedirectHandler object at 0x7fda3720ef10>], 303: [<urllib.request.HTTPRedirectHandler object at 0x7fda3720ef10>], ...}\n[tests/basic-tests-windows]   | meth_name = 'http_error_403', http_err = 1\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   |     def error(self, proto, *args):\n[tests/basic-tests-windows]   |         if proto in ('http', 'https'):\n[tests/basic-tests-windows]   |             # XXX http[s] protocols are special-cased\n[tests/basic-tests-windows]   |             dict = self.handle_error['http'] # https is not different than http\n[tests/basic-tests-windows]   |             proto = args[2]  # YUCK!\n[tests/basic-tests-windows]   |             meth_name = 'http_error_%s' % proto\n[tests/basic-tests-windows]   |             http_err = 1\n[tests/basic-tests-windows]   |             orig_args = args\n[tests/basic-tests-windows]   |         else:\n[tests/basic-tests-windows]   |             dict = self.handle_error\n[tests/basic-tests-windows]   |             meth_name = proto + '_error'\n[tests/basic-tests-windows]   |             http_err = 0\n[tests/basic-tests-windows]   |         args = (dict, proto, meth_name) + args\n[tests/basic-tests-windows]   |         result = self._call_chain(*args)\n[tests/basic-tests-windows]   |         if result:\n[tests/basic-tests-windows]   |             return result\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         if http_err:\n[tests/basic-tests-windows]   |             args = (dict, 'default', 'http_error_default') + orig_args\n[tests/basic-tests-windows]   | >           return self._call_chain(*args)\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/urllib/request.py:561: \n[tests/basic-tests-windows]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | self = <urllib.request.OpenerDirector object at 0x7fda36e83b20>\n[tests/basic-tests-windows]   | chain = {'default': [<urllib.request.HTTPDefaultErrorHandler object at 0x7fda36e83eb0>], 301: [<urllib.request.HTTPRedirectHan...PRedirectHandler object at 0x7fda3720ef10>], 303: [<urllib.request.HTTPRedirectHandler object at 0x7fda3720ef10>], ...}\n[tests/basic-tests-windows]   | kind = 'default', meth_name = 'http_error_default'\n[tests/basic-tests-windows]   | args = (<urllib.request.Request object at 0x7fda36e83dc0>, <http.client.HTTPResponse object at 0x7fda371adca0>, 403, 'Forbidden', <http.client.HTTPMessage object at 0x7fda371a60d0>)\n[tests/basic-tests-windows]   | handlers = [<urllib.request.HTTPDefaultErrorHandler object at 0x7fda36e83eb0>]\n[tests/basic-tests-windows]   | handler = <urllib.request.HTTPDefaultErrorHandler object at 0x7fda36e83eb0>\n[tests/basic-tests-windows]   | func = <bound method HTTPDefaultErrorHandler.http_error_default of <urllib.request.HTTPDefaultErrorHandler object at 0x7fda36e83eb0>>\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   |     def _call_chain(self, chain, kind, meth_name, *args):\n[tests/basic-tests-windows]   |         # Handlers raise an exception if no one else should try to handle\n[tests/basic-tests-windows]   |         # the request, or return None if they can't but another handler\n[tests/basic-tests-windows]   |         # could.  Otherwise, they return the response.\n[tests/basic-tests-windows]   |         handlers = chain.get(kind, ())\n[tests/basic-tests-windows]   |         for handler in handlers:\n[tests/basic-tests-windows]   |             func = getattr(handler, meth_name)\n[tests/basic-tests-windows]   | >           result = func(*args)\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/urllib/request.py:494: \n[tests/basic-tests-windows]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | self = <urllib.request.HTTPDefaultErrorHandler object at 0x7fda36e83eb0>\n[tests/basic-tests-windows]   | req = <urllib.request.Request object at 0x7fda36e83dc0>\n[tests/basic-tests-windows]   | fp = <http.client.HTTPResponse object at 0x7fda371adca0>, code = 403\n[tests/basic-tests-windows]   | msg = 'Forbidden', hdrs = <http.client.HTTPMessage object at 0x7fda371a60d0>\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   |     def http_error_default(self, req, fp, code, msg, hdrs):\n[tests/basic-tests-windows]   | >       raise HTTPError(req.full_url, code, msg, hdrs, fp)\n[tests/basic-tests-windows]   | E       urllib.error.HTTPError: HTTP Error 403: Forbidden\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/urllib/request.py:641: HTTPError\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | During handling of the above exception, another exception occurred:\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   |     def setup_module():\n[tests/basic-tests-windows]   | >       meta('9780375869020')  #  <-- set\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | isbnlib/test/test_cache_decorator.py:17: \n[tests/basic-tests-windows]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-windows]   | isbnlib/_ext.py:24: in meta\n[tests/basic-tests-windows]   |     return query(isbn, service) if isbn else {}\n[tests/basic-tests-windows]   | isbnlib/dev/_decorators.py:27: in memoized_func\n[tests/basic-tests-windows]   |     value = func(*args, **kwargs)\n[tests/basic-tests-windows]   | isbnlib/_metadata.py:33: in query\n[tests/basic-tests-windows]   |     meta = services[service](isbn)\n[tests/basic-tests-windows]   | isbnlib/_goob.py:70: in query\n[tests/basic-tests-windows]   |     data = wquery(SERVICE_URL.format(isbn='isbn:' + isbn), user_agent=UA)\n[tests/basic-tests-windows]   | isbnlib/dev/webquery.py:65: in query\n[tests/basic-tests-windows]   |     wq = WEBQuery(url, user_agent, throttling)\n[tests/basic-tests-windows]   | isbnlib/dev/webquery.py:32: in __init__\n[tests/basic-tests-windows]   |     self.data = webservice.query(service_url, ua)\n[tests/basic-tests-windows]   | isbnlib/dev/_decorators.py:47: in memoized_func\n[tests/basic-tests-windows]   |     value = func(*args, **kwargs)\n[tests/basic-tests-windows]   | isbnlib/dev/webservice.py:107: in query\n[tests/basic-tests-windows]   |     data = service.data()\n[tests/basic-tests-windows]   | isbnlib/dev/webservice.py:87: in data\n[tests/basic-tests-windows]   |     res = self.response()\n[tests/basic-tests-windows]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | self = <isbnlib.dev.webservice.WEBService object at 0x7fda36e83e80>\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   |     def response(self):\n[tests/basic-tests-windows]   |         \"\"\"Check errors on response.\"\"\"\n[tests/basic-tests-windows]   |         # TODO(http 102)\n[tests/basic-tests-windows]   |         # How to handle \"102 http's code\"?\n[tests/basic-tests-windows]   |         # - urlopen doesn't catch a 102 code!\n[tests/basic-tests-windows]   |         #   https://docs.python.org/3/howto/urllib2.html#error-codes\n[tests/basic-tests-windows]   |         try:\n[tests/basic-tests-windows]   |             response = urlopen(\n[tests/basic-tests-windows]   |                 self._request,\n[tests/basic-tests-windows]   |                 timeout=options.get('URLOPEN_TIMEOUT'),\n[tests/basic-tests-windows]   |             )\n[tests/basic-tests-windows]   |             LOGGER.debug('Request headers:\\n%s', self._request.header_items())\n[tests/basic-tests-windows]   |         except HTTPError as e:  # pragma: no cover\n[tests/basic-tests-windows]   |             LOGGER.critical(\n[tests/basic-tests-windows]   |                 'ISBNLibHTTPError for %s with code %s [%s]',\n[tests/basic-tests-windows]   |                 self._url,\n[tests/basic-tests-windows]   |                 e.code,\n[tests/basic-tests-windows]   |                 e.msg,\n[tests/basic-tests-windows]   |             )\n[tests/basic-tests-windows]   |             if e.code in (401, 403, 429):\n[tests/basic-tests-windows]   | >               raise ISBNLibHTTPError('%s Are you making many requests?' %\n[tests/basic-tests-windows]   |                                        e.code)\n[tests/basic-tests-windows]   | E               isbnlib.dev._exceptions.ISBNLibHTTPError: an HTTP error has ocurred (403 Are you making many requests?)\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | isbnlib/dev/webservice.py:63: ISBNLibHTTPError\n[tests/basic-tests-windows]   | ------------------------------ Captured log setup ------------------------------\n[tests/basic-tests-windows]   | CRITICAL isbnlib.dev.webservice:webservice.py:56 ISBNLibHTTPError for https://www.googleapis.com/books/v1/volumes?q=isbn:9780375869020&fields=items/volumeInfo(title,subtitle,authors,publisher,publishedDate,language,industryIdentifiers,description,imageLinks)&maxResults=1 with code 403 [Forbidden]\n[tests/basic-tests-windows]   | =================================== FAILURES ===================================\n[tests/basic-tests-windows]   | __________________________________ test_desc ___________________________________\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | self = <isbnlib.dev.webservice.WEBService object at 0x7fda371d8fa0>\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   |     def response(self):\n[tests/basic-tests-windows]   |         \"\"\"Check errors on response.\"\"\"\n[tests/basic-tests-windows]   |         # TODO(http 102)\n[tests/basic-tests-windows]   |         # How to handle \"102 http's code\"?\n[tests/basic-tests-windows]   |         # - urlopen doesn't catch a 102 code!\n[tests/basic-tests-windows]   |         #   https://docs.python.org/3/howto/urllib2.html#error-codes\n[tests/basic-tests-windows]   |         try:\n[tests/basic-tests-windows]   | >           response = urlopen(\n[tests/basic-tests-windows]   |                 self._request,\n[tests/basic-tests-windows]   |                 timeout=options.get('URLOPEN_TIMEOUT'),\n[tests/basic-tests-windows]   |             )\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | isbnlib/dev/webservice.py:50: \n[tests/basic-tests-windows]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | url = <urllib.request.Request object at 0x7fda371d8eb0>, data = None\n[tests/basic-tests-windows]   | timeout = 10\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   |     def urlopen(url, data=None, timeout=socket._GLOBAL_DEFAULT_TIMEOUT,\n[tests/basic-tests-windows]   |                 *, cafile=None, capath=None, cadefault=False, context=None):\n[tests/basic-tests-windows]   |         '''Open the URL url, which can be either a string or a Request object.\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         *data* must be an object specifying additional data to be sent to\n[tests/basic-tests-windows]   |         the server, or None if no such data is needed.  See Request for\n[tests/basic-tests-windows]   |         details.\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         urllib.request module uses HTTP/1.1 and includes a \"Connection:close\"\n[tests/basic-tests-windows]   |         header in its HTTP requests.\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         The optional *timeout* parameter specifies a timeout in seconds for\n[tests/basic-tests-windows]   |         blocking operations like the connection attempt (if not specified, the\n[tests/basic-tests-windows]   |         global default timeout setting will be used). This only works for HTTP,\n[tests/basic-tests-windows]   |         HTTPS and FTP connections.\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         If *context* is specified, it must be a ssl.SSLContext instance describing\n[tests/basic-tests-windows]   |         the various SSL options. See HTTPSConnection for more details.\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         The optional *cafile* and *capath* parameters specify a set of trusted CA\n[tests/basic-tests-windows]   |         certificates for HTTPS requests. cafile should point to a single file\n[tests/basic-tests-windows]   |         containing a bundle of CA certificates, whereas capath should point to a\n[tests/basic-tests-windows]   |         directory of hashed certificate files. More information can be found in\n[tests/basic-tests-windows]   |         ssl.SSLContext.load_verify_locations().\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         The *cadefault* parameter is ignored.\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         This function always returns an object which can work as a\n[tests/basic-tests-windows]   |         context manager and has the properties url, headers, and status.\n[tests/basic-tests-windows]   |         See urllib.response.addinfourl for more detail on these properties.\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         For HTTP and HTTPS URLs, this function returns a http.client.HTTPResponse\n[tests/basic-tests-windows]   |         object slightly modified. In addition to the three new methods above, the\n[tests/basic-tests-windows]   |         msg attribute contains the same information as the reason attribute ---\n[tests/basic-tests-windows]   |         the reason phrase returned by the server --- instead of the response\n[tests/basic-tests-windows]   |         headers as it is specified in the documentation for HTTPResponse.\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         For FTP, file, and data URLs and requests explicitly handled by legacy\n[tests/basic-tests-windows]   |         URLopener and FancyURLopener classes, this function returns a\n[tests/basic-tests-windows]   |         urllib.response.addinfourl object.\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         Note that None may be returned if no handler handles the request (though\n[tests/basic-tests-windows]   |         the default installed global OpenerDirector uses UnknownHandler to ensure\n[tests/basic-tests-windows]   |         this never happens).\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         In addition, if proxy settings are detected (for example, when a *_proxy\n[tests/basic-tests-windows]   |         environment variable like http_proxy is set), ProxyHandler is default\n[tests/basic-tests-windows]   |         installed and makes sure the requests are handled through the proxy.\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         '''\n[tests/basic-tests-windows]   |         global _opener\n[tests/basic-tests-windows]   |         if cafile or capath or cadefault:\n[tests/basic-tests-windows]   |             import warnings\n[tests/basic-tests-windows]   |             warnings.warn(\"cafile, capath and cadefault are deprecated, use a \"\n[tests/basic-tests-windows]   |                           \"custom context instead.\", DeprecationWarning, 2)\n[tests/basic-tests-windows]   |             if context is not None:\n[tests/basic-tests-windows]   |                 raise ValueError(\n[tests/basic-tests-windows]   |                     \"You can't pass both context and any of cafile, capath, and \"\n[tests/basic-tests-windows]   |                     \"cadefault\"\n[tests/basic-tests-windows]   |                 )\n[tests/basic-tests-windows]   |             if not _have_ssl:\n[tests/basic-tests-windows]   |                 raise ValueError('SSL support not available')\n[tests/basic-tests-windows]   |             context = ssl.create_default_context(ssl.Purpose.SERVER_AUTH,\n[tests/basic-tests-windows]   |                                                  cafile=cafile,\n[tests/basic-tests-windows]   |                                                  capath=capath)\n[tests/basic-tests-windows]   |             https_handler = HTTPSHandler(context=context)\n[tests/basic-tests-windows]   |             opener = build_opener(https_handler)\n[tests/basic-tests-windows]   |         elif context:\n[tests/basic-tests-windows]   |             https_handler = HTTPSHandler(context=context)\n[tests/basic-tests-windows]   |             opener = build_opener(https_handler)\n[tests/basic-tests-windows]   |         elif _opener is None:\n[tests/basic-tests-windows]   |             _opener = opener = build_opener()\n[tests/basic-tests-windows]   |         else:\n[tests/basic-tests-windows]   |             opener = _opener\n[tests/basic-tests-windows]   | >       return opener.open(url, data, timeout)\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/urllib/request.py:214: \n[tests/basic-tests-windows]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | self = <urllib.request.OpenerDirector object at 0x7fda36e83b20>\n[tests/basic-tests-windows]   | fullurl = <urllib.request.Request object at 0x7fda371d8eb0>, data = None\n[tests/basic-tests-windows]   | timeout = 10\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   |     def open(self, fullurl, data=None, timeout=socket._GLOBAL_DEFAULT_TIMEOUT):\n[tests/basic-tests-windows]   |         # accept a URL or a Request object\n[tests/basic-tests-windows]   |         if isinstance(fullurl, str):\n[tests/basic-tests-windows]   |             req = Request(fullurl, data)\n[tests/basic-tests-windows]   |         else:\n[tests/basic-tests-windows]   |             req = fullurl\n[tests/basic-tests-windows]   |             if data is not None:\n[tests/basic-tests-windows]   |                 req.data = data\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         req.timeout = timeout\n[tests/basic-tests-windows]   |         protocol = req.type\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         # pre-process request\n[tests/basic-tests-windows]   |         meth_name = protocol+\"_request\"\n[tests/basic-tests-windows]   |         for processor in self.process_request.get(protocol, []):\n[tests/basic-tests-windows]   |             meth = getattr(processor, meth_name)\n[tests/basic-tests-windows]   |             req = meth(req)\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         sys.audit('urllib.Request', req.full_url, req.data, req.headers, req.get_method())\n[tests/basic-tests-windows]   |         response = self._open(req, data)\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         # post-process response\n[tests/basic-tests-windows]   |         meth_name = protocol+\"_response\"\n[tests/basic-tests-windows]   |         for processor in self.process_response.get(protocol, []):\n[tests/basic-tests-windows]   |             meth = getattr(processor, meth_name)\n[tests/basic-tests-windows]   | >           response = meth(req, response)\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/urllib/request.py:523: \n[tests/basic-tests-windows]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | self = <urllib.request.HTTPErrorProcessor object at 0x7fda371a6d60>\n[tests/basic-tests-windows]   | request = <urllib.request.Request object at 0x7fda371d8eb0>\n[tests/basic-tests-windows]   | response = <http.client.HTTPResponse object at 0x7fda371d8d90>\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   |     def http_response(self, request, response):\n[tests/basic-tests-windows]   |         code, msg, hdrs = response.code, response.msg, response.info()\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         # According to RFC 2616, \"2xx\" code indicates that the client's\n[tests/basic-tests-windows]   |         # request was successfully received, understood, and accepted.\n[tests/basic-tests-windows]   |         if not (200 <= code < 300):\n[tests/basic-tests-windows]   | >           response = self.parent.error(\n[tests/basic-tests-windows]   |                 'http', request, response, code, msg, hdrs)\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/urllib/request.py:632: \n[tests/basic-tests-windows]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | self = <urllib.request.OpenerDirector object at 0x7fda36e83b20>, proto = 403\n[tests/basic-tests-windows]   | args = ({'default': [<urllib.request.HTTPDefaultErrorHandler object at 0x7fda36e83eb0>], 301: [<urllib.request.HTTPRedirectHa...ult', <urllib.request.Request object at 0x7fda371d8eb0>, <http.client.HTTPResponse object at 0x7fda371d8d90>, 403, ...)\n[tests/basic-tests-windows]   | dict = {'default': [<urllib.request.HTTPDefaultErrorHandler object at 0x7fda36e83eb0>], 301: [<urllib.request.HTTPRedirectHan...PRedirectHandler object at 0x7fda3720ef10>], 303: [<urllib.request.HTTPRedirectHandler object at 0x7fda3720ef10>], ...}\n[tests/basic-tests-windows]   | meth_name = 'http_error_403', http_err = 1\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   |     def error(self, proto, *args):\n[tests/basic-tests-windows]   |         if proto in ('http', 'https'):\n[tests/basic-tests-windows]   |             # XXX http[s] protocols are special-cased\n[tests/basic-tests-windows]   |             dict = self.handle_error['http'] # https is not different than http\n[tests/basic-tests-windows]   |             proto = args[2]  # YUCK!\n[tests/basic-tests-windows]   |             meth_name = 'http_error_%s' % proto\n[tests/basic-tests-windows]   |             http_err = 1\n[tests/basic-tests-windows]   |             orig_args = args\n[tests/basic-tests-windows]   |         else:\n[tests/basic-tests-windows]   |             dict = self.handle_error\n[tests/basic-tests-windows]   |             meth_name = proto + '_error'\n[tests/basic-tests-windows]   |             http_err = 0\n[tests/basic-tests-windows]   |         args = (dict, proto, meth_name) + args\n[tests/basic-tests-windows]   |         result = self._call_chain(*args)\n[tests/basic-tests-windows]   |         if result:\n[tests/basic-tests-windows]   |             return result\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         if http_err:\n[tests/basic-tests-windows]   |             args = (dict, 'default', 'http_error_default') + orig_args\n[tests/basic-tests-windows]   | >           return self._call_chain(*args)\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/urllib/request.py:561: \n[tests/basic-tests-windows]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | self = <urllib.request.OpenerDirector object at 0x7fda36e83b20>\n[tests/basic-tests-windows]   | chain = {'default': [<urllib.request.HTTPDefaultErrorHandler object at 0x7fda36e83eb0>], 301: [<urllib.request.HTTPRedirectHan...PRedirectHandler object at 0x7fda3720ef10>], 303: [<urllib.request.HTTPRedirectHandler object at 0x7fda3720ef10>], ...}\n[tests/basic-tests-windows]   | kind = 'default', meth_name = 'http_error_default'\n[tests/basic-tests-windows]   | args = (<urllib.request.Request object at 0x7fda371d8eb0>, <http.client.HTTPResponse object at 0x7fda371d8d90>, 403, 'Forbidden', <http.client.HTTPMessage object at 0x7fda371d8af0>)\n[tests/basic-tests-windows]   | handlers = [<urllib.request.HTTPDefaultErrorHandler object at 0x7fda36e83eb0>]\n[tests/basic-tests-windows]   | handler = <urllib.request.HTTPDefaultErrorHandler object at 0x7fda36e83eb0>\n[tests/basic-tests-windows]   | func = <bound method HTTPDefaultErrorHandler.http_error_default of <urllib.request.HTTPDefaultErrorHandler object at 0x7fda36e83eb0>>\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   |     def _call_chain(self, chain, kind, meth_name, *args):\n[tests/basic-tests-windows]   |         # Handlers raise an exception if no one else should try to handle\n[tests/basic-tests-windows]   |         # the request, or return None if they can't but another handler\n[tests/basic-tests-windows]   |         # could.  Otherwise, they return the response.\n[tests/basic-tests-windows]   |         handlers = chain.get(kind, ())\n[tests/basic-tests-windows]   |         for handler in handlers:\n[tests/basic-tests-windows]   |             func = getattr(handler, meth_name)\n[tests/basic-tests-windows]   | >           result = func(*args)\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/urllib/request.py:494: \n[tests/basic-tests-windows]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | self = <urllib.request.HTTPDefaultErrorHandler object at 0x7fda36e83eb0>\n[tests/basic-tests-windows]   | req = <urllib.request.Request object at 0x7fda371d8eb0>\n[tests/basic-tests-windows]   | fp = <http.client.HTTPResponse object at 0x7fda371d8d90>, code = 403\n[tests/basic-tests-windows]   | msg = 'Forbidden', hdrs = <http.client.HTTPMessage object at 0x7fda371d8af0>\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   |     def http_error_default(self, req, fp, code, msg, hdrs):\n[tests/basic-tests-windows]   | >       raise HTTPError(req.full_url, code, msg, hdrs, fp)\n[tests/basic-tests-windows]   | E       urllib.error.HTTPError: HTTP Error 403: Forbidden\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/urllib/request.py:641: HTTPError\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | During handling of the above exception, another exception occurred:\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   |     @pytest.mark.network\n[tests/basic-tests-windows]   |     def test_desc():\n[tests/basic-tests-windows]   |         \"\"\"Test 'desc' command.\"\"\"\n[tests/basic-tests-windows]   | >       assert (len(desc('9780156001311')) > 10) == True\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | isbnlib/test/test_ext.py:57: \n[tests/basic-tests-windows]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-windows]   | isbnlib/_ext.py:94: in desc\n[tests/basic-tests-windows]   |     return goo_desc(isbn) if isbn else ''\n[tests/basic-tests-windows]   | isbnlib/dev/_decorators.py:27: in memoized_func\n[tests/basic-tests-windows]   |     value = func(*args, **kwargs)\n[tests/basic-tests-windows]   | isbnlib/_desc.py:25: in goo_desc\n[tests/basic-tests-windows]   |     content = wsquery(url, user_agent=UA)\n[tests/basic-tests-windows]   | isbnlib/dev/_decorators.py:47: in memoized_func\n[tests/basic-tests-windows]   |     value = func(*args, **kwargs)\n[tests/basic-tests-windows]   | isbnlib/dev/webservice.py:107: in query\n[tests/basic-tests-windows]   |     data = service.data()\n[tests/basic-tests-windows]   | isbnlib/dev/webservice.py:87: in data\n[tests/basic-tests-windows]   |     res = self.response()\n[tests/basic-tests-windows]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | self = <isbnlib.dev.webservice.WEBService object at 0x7fda371d8fa0>\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   |     def response(self):\n[tests/basic-tests-windows]   |         \"\"\"Check errors on response.\"\"\"\n[tests/basic-tests-windows]   |         # TODO(http 102)\n[tests/basic-tests-windows]   |         # How to handle \"102 http's code\"?\n[tests/basic-tests-windows]   |         # - urlopen doesn't catch a 102 code!\n[tests/basic-tests-windows]   |         #   https://docs.python.org/3/howto/urllib2.html#error-codes\n[tests/basic-tests-windows]   |         try:\n[tests/basic-tests-windows]   |             response = urlopen(\n[tests/basic-tests-windows]   |                 self._request,\n[tests/basic-tests-windows]   |                 timeout=options.get('URLOPEN_TIMEOUT'),\n[tests/basic-tests-windows]   |             )\n[tests/basic-tests-windows]   |             LOGGER.debug('Request headers:\\n%s', self._request.header_items())\n[tests/basic-tests-windows]   |         except HTTPError as e:  # pragma: no cover\n[tests/basic-tests-windows]   |             LOGGER.critical(\n[tests/basic-tests-windows]   |                 'ISBNLibHTTPError for %s with code %s [%s]',\n[tests/basic-tests-windows]   |                 self._url,\n[tests/basic-tests-windows]   |                 e.code,\n[tests/basic-tests-windows]   |                 e.msg,\n[tests/basic-tests-windows]   |             )\n[tests/basic-tests-windows]   |             if e.code in (401, 403, 429):\n[tests/basic-tests-windows]   | >               raise ISBNLibHTTPError('%s Are you making many requests?' %\n[tests/basic-tests-windows]   |                                        e.code)\n[tests/basic-tests-windows]   | E               isbnlib.dev._exceptions.ISBNLibHTTPError: an HTTP error has ocurred (403 Are you making many requests?)\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | isbnlib/dev/webservice.py:63: ISBNLibHTTPError\n[tests/basic-tests-windows]   | ------------------------------ Captured log call -------------------------------\n[tests/basic-tests-windows]   | CRITICAL isbnlib.dev.webservice:webservice.py:56 ISBNLibHTTPError for https://www.googleapis.com/books/v1/volumes?q=isbn:9780156001311&fields=items/volumeInfo(title,subtitle,authors,publisher,publishedDate,language,industryIdentifiers,description,imageLinks)&maxResults=1 with code 403 [Forbidden]\n[tests/basic-tests-windows]   | __________________________________ test_cover __________________________________\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | self = <isbnlib.dev.webservice.WEBService object at 0x7fda36e82e20>\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   |     def response(self):\n[tests/basic-tests-windows]   |         \"\"\"Check errors on response.\"\"\"\n[tests/basic-tests-windows]   |         # TODO(http 102)\n[tests/basic-tests-windows]   |         # How to handle \"102 http's code\"?\n[tests/basic-tests-windows]   |         # - urlopen doesn't catch a 102 code!\n[tests/basic-tests-windows]   |         #   https://docs.python.org/3/howto/urllib2.html#error-codes\n[tests/basic-tests-windows]   |         try:\n[tests/basic-tests-windows]   | >           response = urlopen(\n[tests/basic-tests-windows]   |                 self._request,\n[tests/basic-tests-windows]   |                 timeout=options.get('URLOPEN_TIMEOUT'),\n[tests/basic-tests-windows]   |             )\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | isbnlib/dev/webservice.py:50: \n[tests/basic-tests-windows]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | url = <urllib.request.Request object at 0x7fda36e82c40>, data = None\n[tests/basic-tests-windows]   | timeout = 10\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   |     def urlopen(url, data=None, timeout=socket._GLOBAL_DEFAULT_TIMEOUT,\n[tests/basic-tests-windows]   |                 *, cafile=None, capath=None, cadefault=False, context=None):\n[tests/basic-tests-windows]   |         '''Open the URL url, which can be either a string or a Request object.\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         *data* must be an object specifying additional data to be sent to\n[tests/basic-tests-windows]   |         the server, or None if no such data is needed.  See Request for\n[tests/basic-tests-windows]   |         details.\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         urllib.request module uses HTTP/1.1 and includes a \"Connection:close\"\n[tests/basic-tests-windows]   |         header in its HTTP requests.\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         The optional *timeout* parameter specifies a timeout in seconds for\n[tests/basic-tests-windows]   |         blocking operations like the connection attempt (if not specified, the\n[tests/basic-tests-windows]   |         global default timeout setting will be used). This only works for HTTP,\n[tests/basic-tests-windows]   |         HTTPS and FTP connections.\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         If *context* is specified, it must be a ssl.SSLContext instance describing\n[tests/basic-tests-windows]   |         the various SSL options. See HTTPSConnection for more details.\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         The optional *cafile* and *capath* parameters specify a set of trusted CA\n[tests/basic-tests-windows]   |         certificates for HTTPS requests. cafile should point to a single file\n[tests/basic-tests-windows]   |         containing a bundle of CA certificates, whereas capath should point to a\n[tests/basic-tests-windows]   |         directory of hashed certificate files. More information can be found in\n[tests/basic-tests-windows]   |         ssl.SSLContext.load_verify_locations().\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         The *cadefault* parameter is ignored.\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         This function always returns an object which can work as a\n[tests/basic-tests-windows]   |         context manager and has the properties url, headers, and status.\n[tests/basic-tests-windows]   |         See urllib.response.addinfourl for more detail on these properties.\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         For HTTP and HTTPS URLs, this function returns a http.client.HTTPResponse\n[tests/basic-tests-windows]   |         object slightly modified. In addition to the three new methods above, the\n[tests/basic-tests-windows]   |         msg attribute contains the same information as the reason attribute ---\n[tests/basic-tests-windows]   |         the reason phrase returned by the server --- instead of the response\n[tests/basic-tests-windows]   |         headers as it is specified in the documentation for HTTPResponse.\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         For FTP, file, and data URLs and requests explicitly handled by legacy\n[tests/basic-tests-windows]   |         URLopener and FancyURLopener classes, this function returns a\n[tests/basic-tests-windows]   |         urllib.response.addinfourl object.\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         Note that None may be returned if no handler handles the request (though\n[tests/basic-tests-windows]   |         the default installed global OpenerDirector uses UnknownHandler to ensure\n[tests/basic-tests-windows]   |         this never happens).\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         In addition, if proxy settings are detected (for example, when a *_proxy\n[tests/basic-tests-windows]   |         environment variable like http_proxy is set), ProxyHandler is default\n[tests/basic-tests-windows]   |         installed and makes sure the requests are handled through the proxy.\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         '''\n[tests/basic-tests-windows]   |         global _opener\n[tests/basic-tests-windows]   |         if cafile or capath or cadefault:\n[tests/basic-tests-windows]   |             import warnings\n[tests/basic-tests-windows]   |             warnings.warn(\"cafile, capath and cadefault are deprecated, use a \"\n[tests/basic-tests-windows]   |                           \"custom context instead.\", DeprecationWarning, 2)\n[tests/basic-tests-windows]   |             if context is not None:\n[tests/basic-tests-windows]   |                 raise ValueError(\n[tests/basic-tests-windows]   |                     \"You can't pass both context and any of cafile, capath, and \"\n[tests/basic-tests-windows]   |                     \"cadefault\"\n[tests/basic-tests-windows]   |                 )\n[tests/basic-tests-windows]   |             if not _have_ssl:\n[tests/basic-tests-windows]   |                 raise ValueError('SSL support not available')\n[tests/basic-tests-windows]   |             context = ssl.create_default_context(ssl.Purpose.SERVER_AUTH,\n[tests/basic-tests-windows]   |                                                  cafile=cafile,\n[tests/basic-tests-windows]   |                                                  capath=capath)\n[tests/basic-tests-windows]   |             https_handler = HTTPSHandler(context=context)\n[tests/basic-tests-windows]   |             opener = build_opener(https_handler)\n[tests/basic-tests-windows]   |         elif context:\n[tests/basic-tests-windows]   |             https_handler = HTTPSHandler(context=context)\n[tests/basic-tests-windows]   |             opener = build_opener(https_handler)\n[tests/basic-tests-windows]   |         elif _opener is None:\n[tests/basic-tests-windows]   |             _opener = opener = build_opener()\n[tests/basic-tests-windows]   |         else:\n[tests/basic-tests-windows]   |             opener = _opener\n[tests/basic-tests-windows]   | >       return opener.open(url, data, timeout)\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/urllib/request.py:214: \n[tests/basic-tests-windows]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | self = <urllib.request.OpenerDirector object at 0x7fda36e83b20>\n[tests/basic-tests-windows]   | fullurl = <urllib.request.Request object at 0x7fda36e82c40>, data = None\n[tests/basic-tests-windows]   | timeout = 10\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   |     def open(self, fullurl, data=None, timeout=socket._GLOBAL_DEFAULT_TIMEOUT):\n[tests/basic-tests-windows]   |         # accept a URL or a Request object\n[tests/basic-tests-windows]   |         if isinstance(fullurl, str):\n[tests/basic-tests-windows]   |             req = Request(fullurl, data)\n[tests/basic-tests-windows]   |         else:\n[tests/basic-tests-windows]   |             req = fullurl\n[tests/basic-tests-windows]   |             if data is not None:\n[tests/basic-tests-windows]   |                 req.data = data\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         req.timeout = timeout\n[tests/basic-tests-windows]   |         protocol = req.type\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         # pre-process request\n[tests/basic-tests-windows]   |         meth_name = protocol+\"_request\"\n[tests/basic-tests-windows]   |         for processor in self.process_request.get(protocol, []):\n[tests/basic-tests-windows]   |             meth = getattr(processor, meth_name)\n[tests/basic-tests-windows]   |             req = meth(req)\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         sys.audit('urllib.Request', req.full_url, req.data, req.headers, req.get_method())\n[tests/basic-tests-windows]   |         response = self._open(req, data)\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         # post-process response\n[tests/basic-tests-windows]   |         meth_name = protocol+\"_response\"\n[tests/basic-tests-windows]   |         for processor in self.process_response.get(protocol, []):\n[tests/basic-tests-windows]   |             meth = getattr(processor, meth_name)\n[tests/basic-tests-windows]   | >           response = meth(req, response)\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/urllib/request.py:523: \n[tests/basic-tests-windows]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | self = <urllib.request.HTTPErrorProcessor object at 0x7fda371a6d60>\n[tests/basic-tests-windows]   | request = <urllib.request.Request object at 0x7fda36e82c40>\n[tests/basic-tests-windows]   | response = <http.client.HTTPResponse object at 0x7fda36e82cd0>\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   |     def http_response(self, request, response):\n[tests/basic-tests-windows]   |         code, msg, hdrs = response.code, response.msg, response.info()\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         # According to RFC 2616, \"2xx\" code indicates that the client's\n[tests/basic-tests-windows]   |         # request was successfully received, understood, and accepted.\n[tests/basic-tests-windows]   |         if not (200 <= code < 300):\n[tests/basic-tests-windows]   | >           response = self.parent.error(\n[tests/basic-tests-windows]   |                 'http', request, response, code, msg, hdrs)\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/urllib/request.py:632: \n[tests/basic-tests-windows]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | self = <urllib.request.OpenerDirector object at 0x7fda36e83b20>, proto = 403\n[tests/basic-tests-windows]   | args = ({'default': [<urllib.request.HTTPDefaultErrorHandler object at 0x7fda36e83eb0>], 301: [<urllib.request.HTTPRedirectHa...ult', <urllib.request.Request object at 0x7fda36e82c40>, <http.client.HTTPResponse object at 0x7fda36e82cd0>, 403, ...)\n[tests/basic-tests-windows]   | dict = {'default': [<urllib.request.HTTPDefaultErrorHandler object at 0x7fda36e83eb0>], 301: [<urllib.request.HTTPRedirectHan...PRedirectHandler object at 0x7fda3720ef10>], 303: [<urllib.request.HTTPRedirectHandler object at 0x7fda3720ef10>], ...}\n[tests/basic-tests-windows]   | meth_name = 'http_error_403', http_err = 1\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   |     def error(self, proto, *args):\n[tests/basic-tests-windows]   |         if proto in ('http', 'https'):\n[tests/basic-tests-windows]   |             # XXX http[s] protocols are special-cased\n[tests/basic-tests-windows]   |             dict = self.handle_error['http'] # https is not different than http\n[tests/basic-tests-windows]   |             proto = args[2]  # YUCK!\n[tests/basic-tests-windows]   |             meth_name = 'http_error_%s' % proto\n[tests/basic-tests-windows]   |             http_err = 1\n[tests/basic-tests-windows]   |             orig_args = args\n[tests/basic-tests-windows]   |         else:\n[tests/basic-tests-windows]   |             dict = self.handle_error\n[tests/basic-tests-windows]   |             meth_name = proto + '_error'\n[tests/basic-tests-windows]   |             http_err = 0\n[tests/basic-tests-windows]   |         args = (dict, proto, meth_name) + args\n[tests/basic-tests-windows]   |         result = self._call_chain(*args)\n[tests/basic-tests-windows]   |         if result:\n[tests/basic-tests-windows]   |             return result\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         if http_err:\n[tests/basic-tests-windows]   |             args = (dict, 'default', 'http_error_default') + orig_args\n[tests/basic-tests-windows]   | >           return self._call_chain(*args)\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/urllib/request.py:561: \n[tests/basic-tests-windows]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | self = <urllib.request.OpenerDirector object at 0x7fda36e83b20>\n[tests/basic-tests-windows]   | chain = {'default': [<urllib.request.HTTPDefaultErrorHandler object at 0x7fda36e83eb0>], 301: [<urllib.request.HTTPRedirectHan...PRedirectHandler object at 0x7fda3720ef10>], 303: [<urllib.request.HTTPRedirectHandler object at 0x7fda3720ef10>], ...}\n[tests/basic-tests-windows]   | kind = 'default', meth_name = 'http_error_default'\n[tests/basic-tests-windows]   | args = (<urllib.request.Request object at 0x7fda36e82c40>, <http.client.HTTPResponse object at 0x7fda36e82cd0>, 403, 'Forbidden', <http.client.HTTPMessage object at 0x7fda36e82910>)\n[tests/basic-tests-windows]   | handlers = [<urllib.request.HTTPDefaultErrorHandler object at 0x7fda36e83eb0>]\n[tests/basic-tests-windows]   | handler = <urllib.request.HTTPDefaultErrorHandler object at 0x7fda36e83eb0>\n[tests/basic-tests-windows]   | func = <bound method HTTPDefaultErrorHandler.http_error_default of <urllib.request.HTTPDefaultErrorHandler object at 0x7fda36e83eb0>>\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   |     def _call_chain(self, chain, kind, meth_name, *args):\n[tests/basic-tests-windows]   |         # Handlers raise an exception if no one else should try to handle\n[tests/basic-tests-windows]   |         # the request, or return None if they can't but another handler\n[tests/basic-tests-windows]   |         # could.  Otherwise, they return the response.\n[tests/basic-tests-windows]   |         handlers = chain.get(kind, ())\n[tests/basic-tests-windows]   |         for handler in handlers:\n[tests/basic-tests-windows]   |             func = getattr(handler, meth_name)\n[tests/basic-tests-windows]   | >           result = func(*args)\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/urllib/request.py:494: \n[tests/basic-tests-windows]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | self = <urllib.request.HTTPDefaultErrorHandler object at 0x7fda36e83eb0>\n[tests/basic-tests-windows]   | req = <urllib.request.Request object at 0x7fda36e82c40>\n[tests/basic-tests-windows]   | fp = <http.client.HTTPResponse object at 0x7fda36e82cd0>, code = 403\n[tests/basic-tests-windows]   | msg = 'Forbidden', hdrs = <http.client.HTTPMessage object at 0x7fda36e82910>\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   |     def http_error_default(self, req, fp, code, msg, hdrs):\n[tests/basic-tests-windows]   | >       raise HTTPError(req.full_url, code, msg, hdrs, fp)\n[tests/basic-tests-windows]   | E       urllib.error.HTTPError: HTTP Error 403: Forbidden\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/urllib/request.py:641: HTTPError\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | During handling of the above exception, another exception occurred:\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   |     @pytest.mark.network\n[tests/basic-tests-windows]   |     def test_cover():\n[tests/basic-tests-windows]   |         \"\"\"Test 'cover' command.\"\"\"\n[tests/basic-tests-windows]   | >       assert (len(repr(cover('9780156001311'))) > 50) == True\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | isbnlib/test/test_ext.py:64: \n[tests/basic-tests-windows]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-windows]   | isbnlib/_ext.py:88: in cover\n[tests/basic-tests-windows]   |     return gcover(isbn) if isbn else {}\n[tests/basic-tests-windows]   | isbnlib/dev/_decorators.py:27: in memoized_func\n[tests/basic-tests-windows]   |     value = func(*args, **kwargs)\n[tests/basic-tests-windows]   | isbnlib/_cover.py:21: in cover\n[tests/basic-tests-windows]   |     data = wquery(SERVICE_URL.format(isbn=isbn), user_agent=UA)\n[tests/basic-tests-windows]   | isbnlib/dev/webquery.py:65: in query\n[tests/basic-tests-windows]   |     wq = WEBQuery(url, user_agent, throttling)\n[tests/basic-tests-windows]   | isbnlib/dev/webquery.py:32: in __init__\n[tests/basic-tests-windows]   |     self.data = webservice.query(service_url, ua)\n[tests/basic-tests-windows]   | isbnlib/dev/_decorators.py:47: in memoized_func\n[tests/basic-tests-windows]   |     value = func(*args, **kwargs)\n[tests/basic-tests-windows]   | isbnlib/dev/webservice.py:107: in query\n[tests/basic-tests-windows]   |     data = service.data()\n[tests/basic-tests-windows]   | isbnlib/dev/webservice.py:87: in data\n[tests/basic-tests-windows]   |     res = self.response()\n[tests/basic-tests-windows]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | self = <isbnlib.dev.webservice.WEBService object at 0x7fda36e82e20>\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   |     def response(self):\n[tests/basic-tests-windows]   |         \"\"\"Check errors on response.\"\"\"\n[tests/basic-tests-windows]   |         # TODO(http 102)\n[tests/basic-tests-windows]   |         # How to handle \"102 http's code\"?\n[tests/basic-tests-windows]   |         # - urlopen doesn't catch a 102 code!\n[tests/basic-tests-windows]   |         #   https://docs.python.org/3/howto/urllib2.html#error-codes\n[tests/basic-tests-windows]   |         try:\n[tests/basic-tests-windows]   |             response = urlopen(\n[tests/basic-tests-windows]   |                 self._request,\n[tests/basic-tests-windows]   |                 timeout=options.get('URLOPEN_TIMEOUT'),\n[tests/basic-tests-windows]   |             )\n[tests/basic-tests-windows]   |             LOGGER.debug('Request headers:\\n%s', self._request.header_items())\n[tests/basic-tests-windows]   |         except HTTPError as e:  # pragma: no cover\n[tests/basic-tests-windows]   |             LOGGER.critical(\n[tests/basic-tests-windows]   |                 'ISBNLibHTTPError for %s with code %s [%s]',\n[tests/basic-tests-windows]   |                 self._url,\n[tests/basic-tests-windows]   |                 e.code,\n[tests/basic-tests-windows]   |                 e.msg,\n[tests/basic-tests-windows]   |             )\n[tests/basic-tests-windows]   |             if e.code in (401, 403, 429):\n[tests/basic-tests-windows]   | >               raise ISBNLibHTTPError('%s Are you making many requests?' %\n[tests/basic-tests-windows]   |                                        e.code)\n[tests/basic-tests-windows]   | E               isbnlib.dev._exceptions.ISBNLibHTTPError: an HTTP error has ocurred (403 Are you making many requests?)\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | isbnlib/dev/webservice.py:63: ISBNLibHTTPError\n[tests/basic-tests-windows]   | ------------------------------ Captured log call -------------------------------\n[tests/basic-tests-windows]   | CRITICAL isbnlib.dev.webservice:webservice.py:56 ISBNLibHTTPError for https://www.googleapis.com/books/v1/volumes?q=isbn:9780156001311&fields=items/volumeInfo(title,subtitle,authors,publisher,publishedDate,language,industryIdentifiers,description,imageLinks)&maxResults=1 with code 403 [Forbidden]\n[tests/basic-tests-windows]   | __________________________________ test_goom ___________________________________\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | self = <isbnlib.dev.webservice.WEBService object at 0x7fda37086be0>\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   |     def response(self):\n[tests/basic-tests-windows]   |         \"\"\"Check errors on response.\"\"\"\n[tests/basic-tests-windows]   |         # TODO(http 102)\n[tests/basic-tests-windows]   |         # How to handle \"102 http's code\"?\n[tests/basic-tests-windows]   |         # - urlopen doesn't catch a 102 code!\n[tests/basic-tests-windows]   |         #   https://docs.python.org/3/howto/urllib2.html#error-codes\n[tests/basic-tests-windows]   |         try:\n[tests/basic-tests-windows]   | >           response = urlopen(\n[tests/basic-tests-windows]   |                 self._request,\n[tests/basic-tests-windows]   |                 timeout=options.get('URLOPEN_TIMEOUT'),\n[tests/basic-tests-windows]   |             )\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/xlcnd-isbnlib/isbnlib/dev/webservice.py:50: \n[tests/basic-tests-windows]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | url = <urllib.request.Request object at 0x7fda37086af0>, data = None\n[tests/basic-tests-windows]   | timeout = 10\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   |     def urlopen(url, data=None, timeout=socket._GLOBAL_DEFAULT_TIMEOUT,\n[tests/basic-tests-windows]   |                 *, cafile=None, capath=None, cadefault=False, context=None):\n[tests/basic-tests-windows]   |         '''Open the URL url, which can be either a string or a Request object.\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         *data* must be an object specifying additional data to be sent to\n[tests/basic-tests-windows]   |         the server, or None if no such data is needed.  See Request for\n[tests/basic-tests-windows]   |         details.\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         urllib.request module uses HTTP/1.1 and includes a \"Connection:close\"\n[tests/basic-tests-windows]   |         header in its HTTP requests.\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         The optional *timeout* parameter specifies a timeout in seconds for\n[tests/basic-tests-windows]   |         blocking operations like the connection attempt (if not specified, the\n[tests/basic-tests-windows]   |         global default timeout setting will be used). This only works for HTTP,\n[tests/basic-tests-windows]   |         HTTPS and FTP connections.\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         If *context* is specified, it must be a ssl.SSLContext instance describing\n[tests/basic-tests-windows]   |         the various SSL options. See HTTPSConnection for more details.\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         The optional *cafile* and *capath* parameters specify a set of trusted CA\n[tests/basic-tests-windows]   |         certificates for HTTPS requests. cafile should point to a single file\n[tests/basic-tests-windows]   |         containing a bundle of CA certificates, whereas capath should point to a\n[tests/basic-tests-windows]   |         directory of hashed certificate files. More information can be found in\n[tests/basic-tests-windows]   |         ssl.SSLContext.load_verify_locations().\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         The *cadefault* parameter is ignored.\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         This function always returns an object which can work as a\n[tests/basic-tests-windows]   |         context manager and has the properties url, headers, and status.\n[tests/basic-tests-windows]   |         See urllib.response.addinfourl for more detail on these properties.\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         For HTTP and HTTPS URLs, this function returns a http.client.HTTPResponse\n[tests/basic-tests-windows]   |         object slightly modified. In addition to the three new methods above, the\n[tests/basic-tests-windows]   |         msg attribute contains the same information as the reason attribute ---\n[tests/basic-tests-windows]   |         the reason phrase returned by the server --- instead of the response\n[tests/basic-tests-windows]   |         headers as it is specified in the documentation for HTTPResponse.\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         For FTP, file, and data URLs and requests explicitly handled by legacy\n[tests/basic-tests-windows]   |         URLopener and FancyURLopener classes, this function returns a\n[tests/basic-tests-windows]   |         urllib.response.addinfourl object.\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         Note that None may be returned if no handler handles the request (though\n[tests/basic-tests-windows]   |         the default installed global OpenerDirector uses UnknownHandler to ensure\n[tests/basic-tests-windows]   |         this never happens).\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         In addition, if proxy settings are detected (for example, when a *_proxy\n[tests/basic-tests-windows]   |         environment variable like http_proxy is set), ProxyHandler is default\n[tests/basic-tests-windows]   |         installed and makes sure the requests are handled through the proxy.\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         '''\n[tests/basic-tests-windows]   |         global _opener\n[tests/basic-tests-windows]   |         if cafile or capath or cadefault:\n[tests/basic-tests-windows]   |             import warnings\n[tests/basic-tests-windows]   |             warnings.warn(\"cafile, capath and cadefault are deprecated, use a \"\n[tests/basic-tests-windows]   |                           \"custom context instead.\", DeprecationWarning, 2)\n[tests/basic-tests-windows]   |             if context is not None:\n[tests/basic-tests-windows]   |                 raise ValueError(\n[tests/basic-tests-windows]   |                     \"You can't pass both context and any of cafile, capath, and \"\n[tests/basic-tests-windows]   |                     \"cadefault\"\n[tests/basic-tests-windows]   |                 )\n[tests/basic-tests-windows]   |             if not _have_ssl:\n[tests/basic-tests-windows]   |                 raise ValueError('SSL support not available')\n[tests/basic-tests-windows]   |             context = ssl.create_default_context(ssl.Purpose.SERVER_AUTH,\n[tests/basic-tests-windows]   |                                                  cafile=cafile,\n[tests/basic-tests-windows]   |                                                  capath=capath)\n[tests/basic-tests-windows]   |             https_handler = HTTPSHandler(context=context)\n[tests/basic-tests-windows]   |             opener = build_opener(https_handler)\n[tests/basic-tests-windows]   |         elif context:\n[tests/basic-tests-windows]   |             https_handler = HTTPSHandler(context=context)\n[tests/basic-tests-windows]   |             opener = build_opener(https_handler)\n[tests/basic-tests-windows]   |         elif _opener is None:\n[tests/basic-tests-windows]   |             _opener = opener = build_opener()\n[tests/basic-tests-windows]   |         else:\n[tests/basic-tests-windows]   |             opener = _opener\n[tests/basic-tests-windows]   | >       return opener.open(url, data, timeout)\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/urllib/request.py:214: \n[tests/basic-tests-windows]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | self = <urllib.request.OpenerDirector object at 0x7fda36e83b20>\n[tests/basic-tests-windows]   | fullurl = <urllib.request.Request object at 0x7fda37086af0>, data = None\n[tests/basic-tests-windows]   | timeout = 10\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   |     def open(self, fullurl, data=None, timeout=socket._GLOBAL_DEFAULT_TIMEOUT):\n[tests/basic-tests-windows]   |         # accept a URL or a Request object\n[tests/basic-tests-windows]   |         if isinstance(fullurl, str):\n[tests/basic-tests-windows]   |             req = Request(fullurl, data)\n[tests/basic-tests-windows]   |         else:\n[tests/basic-tests-windows]   |             req = fullurl\n[tests/basic-tests-windows]   |             if data is not None:\n[tests/basic-tests-windows]   |                 req.data = data\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         req.timeout = timeout\n[tests/basic-tests-windows]   |         protocol = req.type\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         # pre-process request\n[tests/basic-tests-windows]   |         meth_name = protocol+\"_request\"\n[tests/basic-tests-windows]   |         for processor in self.process_request.get(protocol, []):\n[tests/basic-tests-windows]   |             meth = getattr(processor, meth_name)\n[tests/basic-tests-windows]   |             req = meth(req)\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         sys.audit('urllib.Request', req.full_url, req.data, req.headers, req.get_method())\n[tests/basic-tests-windows]   |         response = self._open(req, data)\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         # post-process response\n[tests/basic-tests-windows]   |         meth_name = protocol+\"_response\"\n[tests/basic-tests-windows]   |         for processor in self.process_response.get(protocol, []):\n[tests/basic-tests-windows]   |             meth = getattr(processor, meth_name)\n[tests/basic-tests-windows]   | >           response = meth(req, response)\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/urllib/request.py:523: \n[tests/basic-tests-windows]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | self = <urllib.request.HTTPErrorProcessor object at 0x7fda371a6d60>\n[tests/basic-tests-windows]   | request = <urllib.request.Request object at 0x7fda37086af0>\n[tests/basic-tests-windows]   | response = <http.client.HTTPResponse object at 0x7fda37086fa0>\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   |     def http_response(self, request, response):\n[tests/basic-tests-windows]   |         code, msg, hdrs = response.code, response.msg, response.info()\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         # According to RFC 2616, \"2xx\" code indicates that the client's\n[tests/basic-tests-windows]   |         # request was successfully received, understood, and accepted.\n[tests/basic-tests-windows]   |         if not (200 <= code < 300):\n[tests/basic-tests-windows]   | >           response = self.parent.error(\n[tests/basic-tests-windows]   |                 'http', request, response, code, msg, hdrs)\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/urllib/request.py:632: \n[tests/basic-tests-windows]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | self = <urllib.request.OpenerDirector object at 0x7fda36e83b20>, proto = 403\n[tests/basic-tests-windows]   | args = ({'default': [<urllib.request.HTTPDefaultErrorHandler object at 0x7fda36e83eb0>], 301: [<urllib.request.HTTPRedirectHa...ult', <urllib.request.Request object at 0x7fda37086af0>, <http.client.HTTPResponse object at 0x7fda37086fa0>, 403, ...)\n[tests/basic-tests-windows]   | dict = {'default': [<urllib.request.HTTPDefaultErrorHandler object at 0x7fda36e83eb0>], 301: [<urllib.request.HTTPRedirectHan...PRedirectHandler object at 0x7fda3720ef10>], 303: [<urllib.request.HTTPRedirectHandler object at 0x7fda3720ef10>], ...}\n[tests/basic-tests-windows]   | meth_name = 'http_error_403', http_err = 1\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   |     def error(self, proto, *args):\n[tests/basic-tests-windows]   |         if proto in ('http', 'https'):\n[tests/basic-tests-windows]   |             # XXX http[s] protocols are special-cased\n[tests/basic-tests-windows]   |             dict = self.handle_error['http'] # https is not different than http\n[tests/basic-tests-windows]   |             proto = args[2]  # YUCK!\n[tests/basic-tests-windows]   |             meth_name = 'http_error_%s' % proto\n[tests/basic-tests-windows]   |             http_err = 1\n[tests/basic-tests-windows]   |             orig_args = args\n[tests/basic-tests-windows]   |         else:\n[tests/basic-tests-windows]   |             dict = self.handle_error\n[tests/basic-tests-windows]   |             meth_name = proto + '_error'\n[tests/basic-tests-windows]   |             http_err = 0\n[tests/basic-tests-windows]   |         args = (dict, proto, meth_name) + args\n[tests/basic-tests-windows]   |         result = self._call_chain(*args)\n[tests/basic-tests-windows]   |         if result:\n[tests/basic-tests-windows]   |             return result\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         if http_err:\n[tests/basic-tests-windows]   |             args = (dict, 'default', 'http_error_default') + orig_args\n[tests/basic-tests-windows]   | >           return self._call_chain(*args)\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/urllib/request.py:561: \n[tests/basic-tests-windows]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | self = <urllib.request.OpenerDirector object at 0x7fda36e83b20>\n[tests/basic-tests-windows]   | chain = {'default': [<urllib.request.HTTPDefaultErrorHandler object at 0x7fda36e83eb0>], 301: [<urllib.request.HTTPRedirectHan...PRedirectHandler object at 0x7fda3720ef10>], 303: [<urllib.request.HTTPRedirectHandler object at 0x7fda3720ef10>], ...}\n[tests/basic-tests-windows]   | kind = 'default', meth_name = 'http_error_default'\n[tests/basic-tests-windows]   | args = (<urllib.request.Request object at 0x7fda37086af0>, <http.client.HTTPResponse object at 0x7fda37086fa0>, 403, 'Forbidden', <http.client.HTTPMessage object at 0x7fda371d8430>)\n[tests/basic-tests-windows]   | handlers = [<urllib.request.HTTPDefaultErrorHandler object at 0x7fda36e83eb0>]\n[tests/basic-tests-windows]   | handler = <urllib.request.HTTPDefaultErrorHandler object at 0x7fda36e83eb0>\n[tests/basic-tests-windows]   | func = <bound method HTTPDefaultErrorHandler.http_error_default of <urllib.request.HTTPDefaultErrorHandler object at 0x7fda36e83eb0>>\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   |     def _call_chain(self, chain, kind, meth_name, *args):\n[tests/basic-tests-windows]   |         # Handlers raise an exception if no one else should try to handle\n[tests/basic-tests-windows]   |         # the request, or return None if they can't but another handler\n[tests/basic-tests-windows]   |         # could.  Otherwise, they return the response.\n[tests/basic-tests-windows]   |         handlers = chain.get(kind, ())\n[tests/basic-tests-windows]   |         for handler in handlers:\n[tests/basic-tests-windows]   |             func = getattr(handler, meth_name)\n[tests/basic-tests-windows]   | >           result = func(*args)\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/urllib/request.py:494: \n[tests/basic-tests-windows]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | self = <urllib.request.HTTPDefaultErrorHandler object at 0x7fda36e83eb0>\n[tests/basic-tests-windows]   | req = <urllib.request.Request object at 0x7fda37086af0>\n[tests/basic-tests-windows]   | fp = <http.client.HTTPResponse object at 0x7fda37086fa0>, code = 403\n[tests/basic-tests-windows]   | msg = 'Forbidden', hdrs = <http.client.HTTPMessage object at 0x7fda371d8430>\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   |     def http_error_default(self, req, fp, code, msg, hdrs):\n[tests/basic-tests-windows]   | >       raise HTTPError(req.full_url, code, msg, hdrs, fp)\n[tests/basic-tests-windows]   | E       urllib.error.HTTPError: HTTP Error 403: Forbidden\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/urllib/request.py:641: HTTPError\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | During handling of the above exception, another exception occurred:\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   |     def test_goom():\n[tests/basic-tests-windows]   |         \"\"\"Test the Google's Multiple Books service.\"\"\"\n[tests/basic-tests-windows]   | >       assert (len(repr(goom.query('the old man and the sea'))) > 500) == True\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/xlcnd-isbnlib/isbnlib/test/test_goom.py:15: \n[tests/basic-tests-windows]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-windows]   | /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/xlcnd-isbnlib/isbnlib/dev/_decorators.py:27: in memoized_func\n[tests/basic-tests-windows]   |     value = func(*args, **kwargs)\n[tests/basic-tests-windows]   | /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/xlcnd-isbnlib/isbnlib/_goom.py:73: in query\n[tests/basic-tests-windows]   |     data = wquery(SERVICE_URL.format(words=words), UA)\n[tests/basic-tests-windows]   | /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/xlcnd-isbnlib/isbnlib/dev/webquery.py:65: in query\n[tests/basic-tests-windows]   |     wq = WEBQuery(url, user_agent, throttling)\n[tests/basic-tests-windows]   | /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/xlcnd-isbnlib/isbnlib/dev/webquery.py:32: in __init__\n[tests/basic-tests-windows]   |     self.data = webservice.query(service_url, ua)\n[tests/basic-tests-windows]   | /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/xlcnd-isbnlib/isbnlib/dev/_decorators.py:47: in memoized_func\n[tests/basic-tests-windows]   |     value = func(*args, **kwargs)\n[tests/basic-tests-windows]   | /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/xlcnd-isbnlib/isbnlib/dev/webservice.py:107: in query\n[tests/basic-tests-windows]   |     data = service.data()\n[tests/basic-tests-windows]   | /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/xlcnd-isbnlib/isbnlib/dev/webservice.py:87: in data\n[tests/basic-tests-windows]   |     res = self.response()\n[tests/basic-tests-windows]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | self = <isbnlib.dev.webservice.WEBService object at 0x7fda37086be0>\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   |     def response(self):\n[tests/basic-tests-windows]   |         \"\"\"Check errors on response.\"\"\"\n[tests/basic-tests-windows]   |         # TODO(http 102)\n[tests/basic-tests-windows]   |         # How to handle \"102 http's code\"?\n[tests/basic-tests-windows]   |         # - urlopen doesn't catch a 102 code!\n[tests/basic-tests-windows]   |         #   https://docs.python.org/3/howto/urllib2.html#error-codes\n[tests/basic-tests-windows]   |         try:\n[tests/basic-tests-windows]   |             response = urlopen(\n[tests/basic-tests-windows]   |                 self._request,\n[tests/basic-tests-windows]   |                 timeout=options.get('URLOPEN_TIMEOUT'),\n[tests/basic-tests-windows]   |             )\n[tests/basic-tests-windows]   |             LOGGER.debug('Request headers:\\n%s', self._request.header_items())\n[tests/basic-tests-windows]   |         except HTTPError as e:  # pragma: no cover\n[tests/basic-tests-windows]   |             LOGGER.critical(\n[tests/basic-tests-windows]   |                 'ISBNLibHTTPError for %s with code %s [%s]',\n[tests/basic-tests-windows]   |                 self._url,\n[tests/basic-tests-windows]   |                 e.code,\n[tests/basic-tests-windows]   |                 e.msg,\n[tests/basic-tests-windows]   |             )\n[tests/basic-tests-windows]   |             if e.code in (401, 403, 429):\n[tests/basic-tests-windows]   | >               raise ISBNLibHTTPError('%s Are you making many requests?' %\n[tests/basic-tests-windows]   |                                        e.code)\n[tests/basic-tests-windows]   | E               isbnlib.dev._exceptions.ISBNLibHTTPError: an HTTP error has ocurred (403 Are you making many requests?)\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/xlcnd-isbnlib/isbnlib/dev/webservice.py:63: ISBNLibHTTPError\n[tests/basic-tests-windows]   | ------------------------------ Captured log call -------------------------------\n[tests/basic-tests-windows]   | CRITICAL isbnlib.dev.webservice:webservice.py:56 ISBNLibHTTPError for https://www.googleapis.com/books/v1/volumes?q=the%20old%20man%20and%20the%20sea&fields=items/volumeInfo(title,authors,publisher,publishedDate,language,industryIdentifiers)&maxResults=10 with code 403 [Forbidden]\n[tests/basic-tests-windows]   | __________________________________ test_query __________________________________\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | self = <isbnlib.dev.webservice.WEBService object at 0x7fda371faee0>\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   |     def response(self):\n[tests/basic-tests-windows]   |         \"\"\"Check errors on response.\"\"\"\n[tests/basic-tests-windows]   |         # TODO(http 102)\n[tests/basic-tests-windows]   |         # How to handle \"102 http's code\"?\n[tests/basic-tests-windows]   |         # - urlopen doesn't catch a 102 code!\n[tests/basic-tests-windows]   |         #   https://docs.python.org/3/howto/urllib2.html#error-codes\n[tests/basic-tests-windows]   |         try:\n[tests/basic-tests-windows]   | >           response = urlopen(\n[tests/basic-tests-windows]   |                 self._request,\n[tests/basic-tests-windows]   |                 timeout=options.get('URLOPEN_TIMEOUT'),\n[tests/basic-tests-windows]   |             )\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/xlcnd-isbnlib/isbnlib/dev/webservice.py:50: \n[tests/basic-tests-windows]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | url = <urllib.request.Request object at 0x7fda371fa9d0>, data = None\n[tests/basic-tests-windows]   | timeout = 10\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   |     def urlopen(url, data=None, timeout=socket._GLOBAL_DEFAULT_TIMEOUT,\n[tests/basic-tests-windows]   |                 *, cafile=None, capath=None, cadefault=False, context=None):\n[tests/basic-tests-windows]   |         '''Open the URL url, which can be either a string or a Request object.\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         *data* must be an object specifying additional data to be sent to\n[tests/basic-tests-windows]   |         the server, or None if no such data is needed.  See Request for\n[tests/basic-tests-windows]   |         details.\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         urllib.request module uses HTTP/1.1 and includes a \"Connection:close\"\n[tests/basic-tests-windows]   |         header in its HTTP requests.\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         The optional *timeout* parameter specifies a timeout in seconds for\n[tests/basic-tests-windows]   |         blocking operations like the connection attempt (if not specified, the\n[tests/basic-tests-windows]   |         global default timeout setting will be used). This only works for HTTP,\n[tests/basic-tests-windows]   |         HTTPS and FTP connections.\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         If *context* is specified, it must be a ssl.SSLContext instance describing\n[tests/basic-tests-windows]   |         the various SSL options. See HTTPSConnection for more details.\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         The optional *cafile* and *capath* parameters specify a set of trusted CA\n[tests/basic-tests-windows]   |         certificates for HTTPS requests. cafile should point to a single file\n[tests/basic-tests-windows]   |         containing a bundle of CA certificates, whereas capath should point to a\n[tests/basic-tests-windows]   |         directory of hashed certificate files. More information can be found in\n[tests/basic-tests-windows]   |         ssl.SSLContext.load_verify_locations().\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         The *cadefault* parameter is ignored.\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         This function always returns an object which can work as a\n[tests/basic-tests-windows]   |         context manager and has the properties url, headers, and status.\n[tests/basic-tests-windows]   |         See urllib.response.addinfourl for more detail on these properties.\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         For HTTP and HTTPS URLs, this function returns a http.client.HTTPResponse\n[tests/basic-tests-windows]   |         object slightly modified. In addition to the three new methods above, the\n[tests/basic-tests-windows]   |         msg attribute contains the same information as the reason attribute ---\n[tests/basic-tests-windows]   |         the reason phrase returned by the server --- instead of the response\n[tests/basic-tests-windows]   |         headers as it is specified in the documentation for HTTPResponse.\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         For FTP, file, and data URLs and requests explicitly handled by legacy\n[tests/basic-tests-windows]   |         URLopener and FancyURLopener classes, this function returns a\n[tests/basic-tests-windows]   |         urllib.response.addinfourl object.\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         Note that None may be returned if no handler handles the request (though\n[tests/basic-tests-windows]   |         the default installed global OpenerDirector uses UnknownHandler to ensure\n[tests/basic-tests-windows]   |         this never happens).\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         In addition, if proxy settings are detected (for example, when a *_proxy\n[tests/basic-tests-windows]   |         environment variable like http_proxy is set), ProxyHandler is default\n[tests/basic-tests-windows]   |         installed and makes sure the requests are handled through the proxy.\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         '''\n[tests/basic-tests-windows]   |         global _opener\n[tests/basic-tests-windows]   |         if cafile or capath or cadefault:\n[tests/basic-tests-windows]   |             import warnings\n[tests/basic-tests-windows]   |             warnings.warn(\"cafile, capath and cadefault are deprecated, use a \"\n[tests/basic-tests-windows]   |                           \"custom context instead.\", DeprecationWarning, 2)\n[tests/basic-tests-windows]   |             if context is not None:\n[tests/basic-tests-windows]   |                 raise ValueError(\n[tests/basic-tests-windows]   |                     \"You can't pass both context and any of cafile, capath, and \"\n[tests/basic-tests-windows]   |                     \"cadefault\"\n[tests/basic-tests-windows]   |                 )\n[tests/basic-tests-windows]   |             if not _have_ssl:\n[tests/basic-tests-windows]   |                 raise ValueError('SSL support not available')\n[tests/basic-tests-windows]   |             context = ssl.create_default_context(ssl.Purpose.SERVER_AUTH,\n[tests/basic-tests-windows]   |                                                  cafile=cafile,\n[tests/basic-tests-windows]   |                                                  capath=capath)\n[tests/basic-tests-windows]   |             https_handler = HTTPSHandler(context=context)\n[tests/basic-tests-windows]   |             opener = build_opener(https_handler)\n[tests/basic-tests-windows]   |         elif context:\n[tests/basic-tests-windows]   |             https_handler = HTTPSHandler(context=context)\n[tests/basic-tests-windows]   |             opener = build_opener(https_handler)\n[tests/basic-tests-windows]   |         elif _opener is None:\n[tests/basic-tests-windows]   |             _opener = opener = build_opener()\n[tests/basic-tests-windows]   |         else:\n[tests/basic-tests-windows]   |             opener = _opener\n[tests/basic-tests-windows]   | >       return opener.open(url, data, timeout)\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/urllib/request.py:214: \n[tests/basic-tests-windows]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | self = <urllib.request.OpenerDirector object at 0x7fda36e83b20>\n[tests/basic-tests-windows]   | fullurl = <urllib.request.Request object at 0x7fda371fa9d0>, data = None\n[tests/basic-tests-windows]   | timeout = 10\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   |     def open(self, fullurl, data=None, timeout=socket._GLOBAL_DEFAULT_TIMEOUT):\n[tests/basic-tests-windows]   |         # accept a URL or a Request object\n[tests/basic-tests-windows]   |         if isinstance(fullurl, str):\n[tests/basic-tests-windows]   |             req = Request(fullurl, data)\n[tests/basic-tests-windows]   |         else:\n[tests/basic-tests-windows]   |             req = fullurl\n[tests/basic-tests-windows]   |             if data is not None:\n[tests/basic-tests-windows]   |                 req.data = data\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         req.timeout = timeout\n[tests/basic-tests-windows]   |         protocol = req.type\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         # pre-process request\n[tests/basic-tests-windows]   |         meth_name = protocol+\"_request\"\n[tests/basic-tests-windows]   |         for processor in self.process_request.get(protocol, []):\n[tests/basic-tests-windows]   |             meth = getattr(processor, meth_name)\n[tests/basic-tests-windows]   |             req = meth(req)\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         sys.audit('urllib.Request', req.full_url, req.data, req.headers, req.get_method())\n[tests/basic-tests-windows]   |         response = self._open(req, data)\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         # post-process response\n[tests/basic-tests-windows]   |         meth_name = protocol+\"_response\"\n[tests/basic-tests-windows]   |         for processor in self.process_response.get(protocol, []):\n[tests/basic-tests-windows]   |             meth = getattr(processor, meth_name)\n[tests/basic-tests-windows]   | >           response = meth(req, response)\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/urllib/request.py:523: \n[tests/basic-tests-windows]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | self = <urllib.request.HTTPErrorProcessor object at 0x7fda371a6d60>\n[tests/basic-tests-windows]   | request = <urllib.request.Request object at 0x7fda371fa9d0>\n[tests/basic-tests-windows]   | response = <http.client.HTTPResponse object at 0x7fda371faaf0>\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   |     def http_response(self, request, response):\n[tests/basic-tests-windows]   |         code, msg, hdrs = response.code, response.msg, response.info()\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         # According to RFC 2616, \"2xx\" code indicates that the client's\n[tests/basic-tests-windows]   |         # request was successfully received, understood, and accepted.\n[tests/basic-tests-windows]   |         if not (200 <= code < 300):\n[tests/basic-tests-windows]   | >           response = self.parent.error(\n[tests/basic-tests-windows]   |                 'http', request, response, code, msg, hdrs)\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/urllib/request.py:632: \n[tests/basic-tests-windows]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | self = <urllib.request.OpenerDirector object at 0x7fda36e83b20>, proto = 403\n[tests/basic-tests-windows]   | args = ({'default': [<urllib.request.HTTPDefaultErrorHandler object at 0x7fda36e83eb0>], 301: [<urllib.request.HTTPRedirectHa...ult', <urllib.request.Request object at 0x7fda371fa9d0>, <http.client.HTTPResponse object at 0x7fda371faaf0>, 403, ...)\n[tests/basic-tests-windows]   | dict = {'default': [<urllib.request.HTTPDefaultErrorHandler object at 0x7fda36e83eb0>], 301: [<urllib.request.HTTPRedirectHan...PRedirectHandler object at 0x7fda3720ef10>], 303: [<urllib.request.HTTPRedirectHandler object at 0x7fda3720ef10>], ...}\n[tests/basic-tests-windows]   | meth_name = 'http_error_403', http_err = 1\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   |     def error(self, proto, *args):\n[tests/basic-tests-windows]   |         if proto in ('http', 'https'):\n[tests/basic-tests-windows]   |             # XXX http[s] protocols are special-cased\n[tests/basic-tests-windows]   |             dict = self.handle_error['http'] # https is not different than http\n[tests/basic-tests-windows]   |             proto = args[2]  # YUCK!\n[tests/basic-tests-windows]   |             meth_name = 'http_error_%s' % proto\n[tests/basic-tests-windows]   |             http_err = 1\n[tests/basic-tests-windows]   |             orig_args = args\n[tests/basic-tests-windows]   |         else:\n[tests/basic-tests-windows]   |             dict = self.handle_error\n[tests/basic-tests-windows]   |             meth_name = proto + '_error'\n[tests/basic-tests-windows]   |             http_err = 0\n[tests/basic-tests-windows]   |         args = (dict, proto, meth_name) + args\n[tests/basic-tests-windows]   |         result = self._call_chain(*args)\n[tests/basic-tests-windows]   |         if result:\n[tests/basic-tests-windows]   |             return result\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         if http_err:\n[tests/basic-tests-windows]   |             args = (dict, 'default', 'http_error_default') + orig_args\n[tests/basic-tests-windows]   | >           return self._call_chain(*args)\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/urllib/request.py:561: \n[tests/basic-tests-windows]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | self = <urllib.request.OpenerDirector object at 0x7fda36e83b20>\n[tests/basic-tests-windows]   | chain = {'default': [<urllib.request.HTTPDefaultErrorHandler object at 0x7fda36e83eb0>], 301: [<urllib.request.HTTPRedirectHan...PRedirectHandler object at 0x7fda3720ef10>], 303: [<urllib.request.HTTPRedirectHandler object at 0x7fda3720ef10>], ...}\n[tests/basic-tests-windows]   | kind = 'default', meth_name = 'http_error_default'\n[tests/basic-tests-windows]   | args = (<urllib.request.Request object at 0x7fda371fa9d0>, <http.client.HTTPResponse object at 0x7fda371faaf0>, 403, 'Forbidden', <http.client.HTTPMessage object at 0x7fda3707bb50>)\n[tests/basic-tests-windows]   | handlers = [<urllib.request.HTTPDefaultErrorHandler object at 0x7fda36e83eb0>]\n[tests/basic-tests-windows]   | handler = <urllib.request.HTTPDefaultErrorHandler object at 0x7fda36e83eb0>\n[tests/basic-tests-windows]   | func = <bound method HTTPDefaultErrorHandler.http_error_default of <urllib.request.HTTPDefaultErrorHandler object at 0x7fda36e83eb0>>\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   |     def _call_chain(self, chain, kind, meth_name, *args):\n[tests/basic-tests-windows]   |         # Handlers raise an exception if no one else should try to handle\n[tests/basic-tests-windows]   |         # the request, or return None if they can't but another handler\n[tests/basic-tests-windows]   |         # could.  Otherwise, they return the response.\n[tests/basic-tests-windows]   |         handlers = chain.get(kind, ())\n[tests/basic-tests-windows]   |         for handler in handlers:\n[tests/basic-tests-windows]   |             func = getattr(handler, meth_name)\n[tests/basic-tests-windows]   | >           result = func(*args)\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/urllib/request.py:494: \n[tests/basic-tests-windows]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | self = <urllib.request.HTTPDefaultErrorHandler object at 0x7fda36e83eb0>\n[tests/basic-tests-windows]   | req = <urllib.request.Request object at 0x7fda371fa9d0>\n[tests/basic-tests-windows]   | fp = <http.client.HTTPResponse object at 0x7fda371faaf0>, code = 403\n[tests/basic-tests-windows]   | msg = 'Forbidden', hdrs = <http.client.HTTPMessage object at 0x7fda3707bb50>\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   |     def http_error_default(self, req, fp, code, msg, hdrs):\n[tests/basic-tests-windows]   | >       raise HTTPError(req.full_url, code, msg, hdrs, fp)\n[tests/basic-tests-windows]   | E       urllib.error.HTTPError: HTTP Error 403: Forbidden\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/urllib/request.py:641: HTTPError\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | During handling of the above exception, another exception occurred:\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   |     def test_query():\n[tests/basic-tests-windows]   |         \"\"\"Test the query of metadata with 'low level' queries.\"\"\"\n[tests/basic-tests-windows]   |         # test query from metadata\n[tests/basic-tests-windows]   |         with pytest.raises(Exception):\n[tests/basic-tests-windows]   |             query('9781849692341', 'goob')\n[tests/basic-tests-windows]   |         with pytest.raises(Exception):\n[tests/basic-tests-windows]   |             query('9781849692343', 'goob')\n[tests/basic-tests-windows]   |         # assert_equals(query('9789934015960', 'goob'), {})\n[tests/basic-tests-windows]   | >       assert (len(repr(query('9780321534965'))) > 100) == True\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/xlcnd-isbnlib/isbnlib/test/test_metadata.py:23: \n[tests/basic-tests-windows]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-windows]   | /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/xlcnd-isbnlib/isbnlib/dev/_decorators.py:27: in memoized_func\n[tests/basic-tests-windows]   |     value = func(*args, **kwargs)\n[tests/basic-tests-windows]   | /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/xlcnd-isbnlib/isbnlib/_metadata.py:33: in query\n[tests/basic-tests-windows]   |     meta = services[service](isbn)\n[tests/basic-tests-windows]   | /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/xlcnd-isbnlib/isbnlib/_goob.py:70: in query\n[tests/basic-tests-windows]   |     data = wquery(SERVICE_URL.format(isbn='isbn:' + isbn), user_agent=UA)\n[tests/basic-tests-windows]   | /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/xlcnd-isbnlib/isbnlib/dev/webquery.py:65: in query\n[tests/basic-tests-windows]   |     wq = WEBQuery(url, user_agent, throttling)\n[tests/basic-tests-windows]   | /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/xlcnd-isbnlib/isbnlib/dev/webquery.py:32: in __init__\n[tests/basic-tests-windows]   |     self.data = webservice.query(service_url, ua)\n[tests/basic-tests-windows]   | /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/xlcnd-isbnlib/isbnlib/dev/_decorators.py:47: in memoized_func\n[tests/basic-tests-windows]   |     value = func(*args, **kwargs)\n[tests/basic-tests-windows]   | /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/xlcnd-isbnlib/isbnlib/dev/webservice.py:107: in query\n[tests/basic-tests-windows]   |     data = service.data()\n[tests/basic-tests-windows]   | /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/xlcnd-isbnlib/isbnlib/dev/webservice.py:87: in data\n[tests/basic-tests-windows]   |     res = self.response()\n[tests/basic-tests-windows]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | self = <isbnlib.dev.webservice.WEBService object at 0x7fda371faee0>\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   |     def response(self):\n[tests/basic-tests-windows]   |         \"\"\"Check errors on response.\"\"\"\n[tests/basic-tests-windows]   |         # TODO(http 102)\n[tests/basic-tests-windows]   |         # How to handle \"102 http's code\"?\n[tests/basic-tests-windows]   |         # - urlopen doesn't catch a 102 code!\n[tests/basic-tests-windows]   |         #   https://docs.python.org/3/howto/urllib2.html#error-codes\n[tests/basic-tests-windows]   |         try:\n[tests/basic-tests-windows]   |             response = urlopen(\n[tests/basic-tests-windows]   |                 self._request,\n[tests/basic-tests-windows]   |                 timeout=options.get('URLOPEN_TIMEOUT'),\n[tests/basic-tests-windows]   |             )\n[tests/basic-tests-windows]   |             LOGGER.debug('Request headers:\\n%s', self._request.header_items())\n[tests/basic-tests-windows]   |         except HTTPError as e:  # pragma: no cover\n[tests/basic-tests-windows]   |             LOGGER.critical(\n[tests/basic-tests-windows]   |                 'ISBNLibHTTPError for %s with code %s [%s]',\n[tests/basic-tests-windows]   |                 self._url,\n[tests/basic-tests-windows]   |                 e.code,\n[tests/basic-tests-windows]   |                 e.msg,\n[tests/basic-tests-windows]   |             )\n[tests/basic-tests-windows]   |             if e.code in (401, 403, 429):\n[tests/basic-tests-windows]   | >               raise ISBNLibHTTPError('%s Are you making many requests?' %\n[tests/basic-tests-windows]   |                                        e.code)\n[tests/basic-tests-windows]   | E               isbnlib.dev._exceptions.ISBNLibHTTPError: an HTTP error has ocurred (403 Are you making many requests?)\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/xlcnd-isbnlib/isbnlib/dev/webservice.py:63: ISBNLibHTTPError\n[tests/basic-tests-windows]   | ------------------------------ Captured log call -------------------------------\n[tests/basic-tests-windows]   | CRITICAL isbnlib._metadata:_metadata.py:25 9781849692341 is not a valid ISBN\n[tests/basic-tests-windows]   | CRITICAL isbnlib._metadata:_metadata.py:25 9781849692343 is not a valid ISBN\n[tests/basic-tests-windows]   | CRITICAL isbnlib.dev.webservice:webservice.py:56 ISBNLibHTTPError for https://www.googleapis.com/books/v1/volumes?q=isbn:9780321534965&fields=items/volumeInfo(title,subtitle,authors,publisher,publishedDate,language,industryIdentifiers,description,imageLinks)&maxResults=1 with code 403 [Forbidden]\n[tests/basic-tests-windows]   | ________________________________ test_ext_meta _________________________________\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | self = <isbnlib.dev.webservice.WEBService object at 0x7fda3714f340>\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   |     def response(self):\n[tests/basic-tests-windows]   |         \"\"\"Check errors on response.\"\"\"\n[tests/basic-tests-windows]   |         # TODO(http 102)\n[tests/basic-tests-windows]   |         # How to handle \"102 http's code\"?\n[tests/basic-tests-windows]   |         # - urlopen doesn't catch a 102 code!\n[tests/basic-tests-windows]   |         #   https://docs.python.org/3/howto/urllib2.html#error-codes\n[tests/basic-tests-windows]   |         try:\n[tests/basic-tests-windows]   | >           response = urlopen(\n[tests/basic-tests-windows]   |                 self._request,\n[tests/basic-tests-windows]   |                 timeout=options.get('URLOPEN_TIMEOUT'),\n[tests/basic-tests-windows]   |             )\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/xlcnd-isbnlib/isbnlib/dev/webservice.py:50: \n[tests/basic-tests-windows]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | url = <urllib.request.Request object at 0x7fda3714fa30>, data = None\n[tests/basic-tests-windows]   | timeout = 10\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   |     def urlopen(url, data=None, timeout=socket._GLOBAL_DEFAULT_TIMEOUT,\n[tests/basic-tests-windows]   |                 *, cafile=None, capath=None, cadefault=False, context=None):\n[tests/basic-tests-windows]   |         '''Open the URL url, which can be either a string or a Request object.\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         *data* must be an object specifying additional data to be sent to\n[tests/basic-tests-windows]   |         the server, or None if no such data is needed.  See Request for\n[tests/basic-tests-windows]   |         details.\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         urllib.request module uses HTTP/1.1 and includes a \"Connection:close\"\n[tests/basic-tests-windows]   |         header in its HTTP requests.\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         The optional *timeout* parameter specifies a timeout in seconds for\n[tests/basic-tests-windows]   |         blocking operations like the connection attempt (if not specified, the\n[tests/basic-tests-windows]   |         global default timeout setting will be used). This only works for HTTP,\n[tests/basic-tests-windows]   |         HTTPS and FTP connections.\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         If *context* is specified, it must be a ssl.SSLContext instance describing\n[tests/basic-tests-windows]   |         the various SSL options. See HTTPSConnection for more details.\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         The optional *cafile* and *capath* parameters specify a set of trusted CA\n[tests/basic-tests-windows]   |         certificates for HTTPS requests. cafile should point to a single file\n[tests/basic-tests-windows]   |         containing a bundle of CA certificates, whereas capath should point to a\n[tests/basic-tests-windows]   |         directory of hashed certificate files. More information can be found in\n[tests/basic-tests-windows]   |         ssl.SSLContext.load_verify_locations().\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         The *cadefault* parameter is ignored.\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         This function always returns an object which can work as a\n[tests/basic-tests-windows]   |         context manager and has the properties url, headers, and status.\n[tests/basic-tests-windows]   |         See urllib.response.addinfourl for more detail on these properties.\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         For HTTP and HTTPS URLs, this function returns a http.client.HTTPResponse\n[tests/basic-tests-windows]   |         object slightly modified. In addition to the three new methods above, the\n[tests/basic-tests-windows]   |         msg attribute contains the same information as the reason attribute ---\n[tests/basic-tests-windows]   |         the reason phrase returned by the server --- instead of the response\n[tests/basic-tests-windows]   |         headers as it is specified in the documentation for HTTPResponse.\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         For FTP, file, and data URLs and requests explicitly handled by legacy\n[tests/basic-tests-windows]   |         URLopener and FancyURLopener classes, this function returns a\n[tests/basic-tests-windows]   |         urllib.response.addinfourl object.\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         Note that None may be returned if no handler handles the request (though\n[tests/basic-tests-windows]   |         the default installed global OpenerDirector uses UnknownHandler to ensure\n[tests/basic-tests-windows]   |         this never happens).\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         In addition, if proxy settings are detected (for example, when a *_proxy\n[tests/basic-tests-windows]   |         environment variable like http_proxy is set), ProxyHandler is default\n[tests/basic-tests-windows]   |         installed and makes sure the requests are handled through the proxy.\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         '''\n[tests/basic-tests-windows]   |         global _opener\n[tests/basic-tests-windows]   |         if cafile or capath or cadefault:\n[tests/basic-tests-windows]   |             import warnings\n[tests/basic-tests-windows]   |             warnings.warn(\"cafile, capath and cadefault are deprecated, use a \"\n[tests/basic-tests-windows]   |                           \"custom context instead.\", DeprecationWarning, 2)\n[tests/basic-tests-windows]   |             if context is not None:\n[tests/basic-tests-windows]   |                 raise ValueError(\n[tests/basic-tests-windows]   |                     \"You can't pass both context and any of cafile, capath, and \"\n[tests/basic-tests-windows]   |                     \"cadefault\"\n[tests/basic-tests-windows]   |                 )\n[tests/basic-tests-windows]   |             if not _have_ssl:\n[tests/basic-tests-windows]   |                 raise ValueError('SSL support not available')\n[tests/basic-tests-windows]   |             context = ssl.create_default_context(ssl.Purpose.SERVER_AUTH,\n[tests/basic-tests-windows]   |                                                  cafile=cafile,\n[tests/basic-tests-windows]   |                                                  capath=capath)\n[tests/basic-tests-windows]   |             https_handler = HTTPSHandler(context=context)\n[tests/basic-tests-windows]   |             opener = build_opener(https_handler)\n[tests/basic-tests-windows]   |         elif context:\n[tests/basic-tests-windows]   |             https_handler = HTTPSHandler(context=context)\n[tests/basic-tests-windows]   |             opener = build_opener(https_handler)\n[tests/basic-tests-windows]   |         elif _opener is None:\n[tests/basic-tests-windows]   |             _opener = opener = build_opener()\n[tests/basic-tests-windows]   |         else:\n[tests/basic-tests-windows]   |             opener = _opener\n[tests/basic-tests-windows]   | >       return opener.open(url, data, timeout)\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/urllib/request.py:214: \n[tests/basic-tests-windows]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | self = <urllib.request.OpenerDirector object at 0x7fda36e83b20>\n[tests/basic-tests-windows]   | fullurl = <urllib.request.Request object at 0x7fda3714fa30>, data = None\n[tests/basic-tests-windows]   | timeout = 10\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   |     def open(self, fullurl, data=None, timeout=socket._GLOBAL_DEFAULT_TIMEOUT):\n[tests/basic-tests-windows]   |         # accept a URL or a Request object\n[tests/basic-tests-windows]   |         if isinstance(fullurl, str):\n[tests/basic-tests-windows]   |             req = Request(fullurl, data)\n[tests/basic-tests-windows]   |         else:\n[tests/basic-tests-windows]   |             req = fullurl\n[tests/basic-tests-windows]   |             if data is not None:\n[tests/basic-tests-windows]   |                 req.data = data\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         req.timeout = timeout\n[tests/basic-tests-windows]   |         protocol = req.type\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         # pre-process request\n[tests/basic-tests-windows]   |         meth_name = protocol+\"_request\"\n[tests/basic-tests-windows]   |         for processor in self.process_request.get(protocol, []):\n[tests/basic-tests-windows]   |             meth = getattr(processor, meth_name)\n[tests/basic-tests-windows]   |             req = meth(req)\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         sys.audit('urllib.Request', req.full_url, req.data, req.headers, req.get_method())\n[tests/basic-tests-windows]   |         response = self._open(req, data)\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         # post-process response\n[tests/basic-tests-windows]   |         meth_name = protocol+\"_response\"\n[tests/basic-tests-windows]   |         for processor in self.process_response.get(protocol, []):\n[tests/basic-tests-windows]   |             meth = getattr(processor, meth_name)\n[tests/basic-tests-windows]   | >           response = meth(req, response)\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/urllib/request.py:523: \n[tests/basic-tests-windows]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | self = <urllib.request.HTTPErrorProcessor object at 0x7fda371a6d60>\n[tests/basic-tests-windows]   | request = <urllib.request.Request object at 0x7fda3714fa30>\n[tests/basic-tests-windows]   | response = <http.client.HTTPResponse object at 0x7fda3714ffa0>\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   |     def http_response(self, request, response):\n[tests/basic-tests-windows]   |         code, msg, hdrs = response.code, response.msg, response.info()\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         # According to RFC 2616, \"2xx\" code indicates that the client's\n[tests/basic-tests-windows]   |         # request was successfully received, understood, and accepted.\n[tests/basic-tests-windows]   |         if not (200 <= code < 300):\n[tests/basic-tests-windows]   | >           response = self.parent.error(\n[tests/basic-tests-windows]   |                 'http', request, response, code, msg, hdrs)\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/urllib/request.py:632: \n[tests/basic-tests-windows]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | self = <urllib.request.OpenerDirector object at 0x7fda36e83b20>, proto = 403\n[tests/basic-tests-windows]   | args = ({'default': [<urllib.request.HTTPDefaultErrorHandler object at 0x7fda36e83eb0>], 301: [<urllib.request.HTTPRedirectHa...ult', <urllib.request.Request object at 0x7fda3714fa30>, <http.client.HTTPResponse object at 0x7fda3714ffa0>, 403, ...)\n[tests/basic-tests-windows]   | dict = {'default': [<urllib.request.HTTPDefaultErrorHandler object at 0x7fda36e83eb0>], 301: [<urllib.request.HTTPRedirectHan...PRedirectHandler object at 0x7fda3720ef10>], 303: [<urllib.request.HTTPRedirectHandler object at 0x7fda3720ef10>], ...}\n[tests/basic-tests-windows]   | meth_name = 'http_error_403', http_err = 1\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   |     def error(self, proto, *args):\n[tests/basic-tests-windows]   |         if proto in ('http', 'https'):\n[tests/basic-tests-windows]   |             # XXX http[s] protocols are special-cased\n[tests/basic-tests-windows]   |             dict = self.handle_error['http'] # https is not different than http\n[tests/basic-tests-windows]   |             proto = args[2]  # YUCK!\n[tests/basic-tests-windows]   |             meth_name = 'http_error_%s' % proto\n[tests/basic-tests-windows]   |             http_err = 1\n[tests/basic-tests-windows]   |             orig_args = args\n[tests/basic-tests-windows]   |         else:\n[tests/basic-tests-windows]   |             dict = self.handle_error\n[tests/basic-tests-windows]   |             meth_name = proto + '_error'\n[tests/basic-tests-windows]   |             http_err = 0\n[tests/basic-tests-windows]   |         args = (dict, proto, meth_name) + args\n[tests/basic-tests-windows]   |         result = self._call_chain(*args)\n[tests/basic-tests-windows]   |         if result:\n[tests/basic-tests-windows]   |             return result\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         if http_err:\n[tests/basic-tests-windows]   |             args = (dict, 'default', 'http_error_default') + orig_args\n[tests/basic-tests-windows]   | >           return self._call_chain(*args)\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/urllib/request.py:561: \n[tests/basic-tests-windows]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | self = <urllib.request.OpenerDirector object at 0x7fda36e83b20>\n[tests/basic-tests-windows]   | chain = {'default': [<urllib.request.HTTPDefaultErrorHandler object at 0x7fda36e83eb0>], 301: [<urllib.request.HTTPRedirectHan...PRedirectHandler object at 0x7fda3720ef10>], 303: [<urllib.request.HTTPRedirectHandler object at 0x7fda3720ef10>], ...}\n[tests/basic-tests-windows]   | kind = 'default', meth_name = 'http_error_default'\n[tests/basic-tests-windows]   | args = (<urllib.request.Request object at 0x7fda3714fa30>, <http.client.HTTPResponse object at 0x7fda3714ffa0>, 403, 'Forbidden', <http.client.HTTPMessage object at 0x7fda3714f310>)\n[tests/basic-tests-windows]   | handlers = [<urllib.request.HTTPDefaultErrorHandler object at 0x7fda36e83eb0>]\n[tests/basic-tests-windows]   | handler = <urllib.request.HTTPDefaultErrorHandler object at 0x7fda36e83eb0>\n[tests/basic-tests-windows]   | func = <bound method HTTPDefaultErrorHandler.http_error_default of <urllib.request.HTTPDefaultErrorHandler object at 0x7fda36e83eb0>>\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   |     def _call_chain(self, chain, kind, meth_name, *args):\n[tests/basic-tests-windows]   |         # Handlers raise an exception if no one else should try to handle\n[tests/basic-tests-windows]   |         # the request, or return None if they can't but another handler\n[tests/basic-tests-windows]   |         # could.  Otherwise, they return the response.\n[tests/basic-tests-windows]   |         handlers = chain.get(kind, ())\n[tests/basic-tests-windows]   |         for handler in handlers:\n[tests/basic-tests-windows]   |             func = getattr(handler, meth_name)\n[tests/basic-tests-windows]   | >           result = func(*args)\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/urllib/request.py:494: \n[tests/basic-tests-windows]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | self = <urllib.request.HTTPDefaultErrorHandler object at 0x7fda36e83eb0>\n[tests/basic-tests-windows]   | req = <urllib.request.Request object at 0x7fda3714fa30>\n[tests/basic-tests-windows]   | fp = <http.client.HTTPResponse object at 0x7fda3714ffa0>, code = 403\n[tests/basic-tests-windows]   | msg = 'Forbidden', hdrs = <http.client.HTTPMessage object at 0x7fda3714f310>\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   |     def http_error_default(self, req, fp, code, msg, hdrs):\n[tests/basic-tests-windows]   | >       raise HTTPError(req.full_url, code, msg, hdrs, fp)\n[tests/basic-tests-windows]   | E       urllib.error.HTTPError: HTTP Error 403: Forbidden\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/urllib/request.py:641: HTTPError\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | During handling of the above exception, another exception occurred:\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   |     def test_ext_meta():\n[tests/basic-tests-windows]   |         \"\"\"Test the query of metadata with 'high level' meta function.\"\"\"\n[tests/basic-tests-windows]   |         # test meta from core\n[tests/basic-tests-windows]   | >       assert (len(repr(meta('9780321534965', 'goob'))) > 100) == True\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/xlcnd-isbnlib/isbnlib/test/test_metadata.py:36: \n[tests/basic-tests-windows]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-windows]   | /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/xlcnd-isbnlib/isbnlib/_ext.py:24: in meta\n[tests/basic-tests-windows]   |     return query(isbn, service) if isbn else {}\n[tests/basic-tests-windows]   | /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/xlcnd-isbnlib/isbnlib/dev/_decorators.py:27: in memoized_func\n[tests/basic-tests-windows]   |     value = func(*args, **kwargs)\n[tests/basic-tests-windows]   | /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/xlcnd-isbnlib/isbnlib/_metadata.py:33: in query\n[tests/basic-tests-windows]   |     meta = services[service](isbn)\n[tests/basic-tests-windows]   | /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/xlcnd-isbnlib/isbnlib/_goob.py:70: in query\n[tests/basic-tests-windows]   |     data = wquery(SERVICE_URL.format(isbn='isbn:' + isbn), user_agent=UA)\n[tests/basic-tests-windows]   | /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/xlcnd-isbnlib/isbnlib/dev/webquery.py:65: in query\n[tests/basic-tests-windows]   |     wq = WEBQuery(url, user_agent, throttling)\n[tests/basic-tests-windows]   | /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/xlcnd-isbnlib/isbnlib/dev/webquery.py:32: in __init__\n[tests/basic-tests-windows]   |     self.data = webservice.query(service_url, ua)\n[tests/basic-tests-windows]   | /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/xlcnd-isbnlib/isbnlib/dev/_decorators.py:47: in memoized_func\n[tests/basic-tests-windows]   |     value = func(*args, **kwargs)\n[tests/basic-tests-windows]   | /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/xlcnd-isbnlib/isbnlib/dev/webservice.py:107: in query\n[tests/basic-tests-windows]   |     data = service.data()\n[tests/basic-tests-windows]   | /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/xlcnd-isbnlib/isbnlib/dev/webservice.py:87: in data\n[tests/basic-tests-windows]   |     res = self.response()\n[tests/basic-tests-windows]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | self = <isbnlib.dev.webservice.WEBService object at 0x7fda3714f340>\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   |     def response(self):\n[tests/basic-tests-windows]   |         \"\"\"Check errors on response.\"\"\"\n[tests/basic-tests-windows]   |         # TODO(http 102)\n[tests/basic-tests-windows]   |         # How to handle \"102 http's code\"?\n[tests/basic-tests-windows]   |         # - urlopen doesn't catch a 102 code!\n[tests/basic-tests-windows]   |         #   https://docs.python.org/3/howto/urllib2.html#error-codes\n[tests/basic-tests-windows]   |         try:\n[tests/basic-tests-windows]   |             response = urlopen(\n[tests/basic-tests-windows]   |                 self._request,\n[tests/basic-tests-windows]   |                 timeout=options.get('URLOPEN_TIMEOUT'),\n[tests/basic-tests-windows]   |             )\n[tests/basic-tests-windows]   |             LOGGER.debug('Request headers:\\n%s', self._request.header_items())\n[tests/basic-tests-windows]   |         except HTTPError as e:  # pragma: no cover\n[tests/basic-tests-windows]   |             LOGGER.critical(\n[tests/basic-tests-windows]   |                 'ISBNLibHTTPError for %s with code %s [%s]',\n[tests/basic-tests-windows]   |                 self._url,\n[tests/basic-tests-windows]   |                 e.code,\n[tests/basic-tests-windows]   |                 e.msg,\n[tests/basic-tests-windows]   |             )\n[tests/basic-tests-windows]   |             if e.code in (401, 403, 429):\n[tests/basic-tests-windows]   | >               raise ISBNLibHTTPError('%s Are you making many requests?' %\n[tests/basic-tests-windows]   |                                        e.code)\n[tests/basic-tests-windows]   | E               isbnlib.dev._exceptions.ISBNLibHTTPError: an HTTP error has ocurred (403 Are you making many requests?)\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/xlcnd-isbnlib/isbnlib/dev/webservice.py:63: ISBNLibHTTPError\n[tests/basic-tests-windows]   | ------------------------------ Captured log call -------------------------------\n[tests/basic-tests-windows]   | CRITICAL isbnlib.dev.webservice:webservice.py:56 ISBNLibHTTPError for https://www.googleapis.com/books/v1/volumes?q=isbn:9780321534965&fields=items/volumeInfo(title,subtitle,authors,publisher,publishedDate,language,industryIdentifiers,description,imageLinks)&maxResults=1 with code 403 [Forbidden]\n[tests/basic-tests-windows]   | __________________________________ test_query __________________________________\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | self = <isbnlib.dev.webservice.WEBService object at 0x7fda370c3250>\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   |     def response(self):\n[tests/basic-tests-windows]   |         \"\"\"Check errors on response.\"\"\"\n[tests/basic-tests-windows]   |         # TODO(http 102)\n[tests/basic-tests-windows]   |         # How to handle \"102 http's code\"?\n[tests/basic-tests-windows]   |         # - urlopen doesn't catch a 102 code!\n[tests/basic-tests-windows]   |         #   https://docs.python.org/3/howto/urllib2.html#error-codes\n[tests/basic-tests-windows]   |         try:\n[tests/basic-tests-windows]   | >           response = urlopen(\n[tests/basic-tests-windows]   |                 self._request,\n[tests/basic-tests-windows]   |                 timeout=options.get('URLOPEN_TIMEOUT'),\n[tests/basic-tests-windows]   |             )\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/xlcnd-isbnlib/isbnlib/dev/webservice.py:50: \n[tests/basic-tests-windows]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | url = <urllib.request.Request object at 0x7fda370c3b80>, data = None\n[tests/basic-tests-windows]   | timeout = 10\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   |     def urlopen(url, data=None, timeout=socket._GLOBAL_DEFAULT_TIMEOUT,\n[tests/basic-tests-windows]   |                 *, cafile=None, capath=None, cadefault=False, context=None):\n[tests/basic-tests-windows]   |         '''Open the URL url, which can be either a string or a Request object.\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         *data* must be an object specifying additional data to be sent to\n[tests/basic-tests-windows]   |         the server, or None if no such data is needed.  See Request for\n[tests/basic-tests-windows]   |         details.\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         urllib.request module uses HTTP/1.1 and includes a \"Connection:close\"\n[tests/basic-tests-windows]   |         header in its HTTP requests.\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         The optional *timeout* parameter specifies a timeout in seconds for\n[tests/basic-tests-windows]   |         blocking operations like the connection attempt (if not specified, the\n[tests/basic-tests-windows]   |         global default timeout setting will be used). This only works for HTTP,\n[tests/basic-tests-windows]   |         HTTPS and FTP connections.\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         If *context* is specified, it must be a ssl.SSLContext instance describing\n[tests/basic-tests-windows]   |         the various SSL options. See HTTPSConnection for more details.\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         The optional *cafile* and *capath* parameters specify a set of trusted CA\n[tests/basic-tests-windows]   |         certificates for HTTPS requests. cafile should point to a single file\n[tests/basic-tests-windows]   |         containing a bundle of CA certificates, whereas capath should point to a\n[tests/basic-tests-windows]   |         directory of hashed certificate files. More information can be found in\n[tests/basic-tests-windows]   |         ssl.SSLContext.load_verify_locations().\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         The *cadefault* parameter is ignored.\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         This function always returns an object which can work as a\n[tests/basic-tests-windows]   |         context manager and has the properties url, headers, and status.\n[tests/basic-tests-windows]   |         See urllib.response.addinfourl for more detail on these properties.\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         For HTTP and HTTPS URLs, this function returns a http.client.HTTPResponse\n[tests/basic-tests-windows]   |         object slightly modified. In addition to the three new methods above, the\n[tests/basic-tests-windows]   |         msg attribute contains the same information as the reason attribute ---\n[tests/basic-tests-windows]   |         the reason phrase returned by the server --- instead of the response\n[tests/basic-tests-windows]   |         headers as it is specified in the documentation for HTTPResponse.\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         For FTP, file, and data URLs and requests explicitly handled by legacy\n[tests/basic-tests-windows]   |         URLopener and FancyURLopener classes, this function returns a\n[tests/basic-tests-windows]   |         urllib.response.addinfourl object.\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         Note that None may be returned if no handler handles the request (though\n[tests/basic-tests-windows]   |         the default installed global OpenerDirector uses UnknownHandler to ensure\n[tests/basic-tests-windows]   |         this never happens).\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         In addition, if proxy settings are detected (for example, when a *_proxy\n[tests/basic-tests-windows]   |         environment variable like http_proxy is set), ProxyHandler is default\n[tests/basic-tests-windows]   |         installed and makes sure the requests are handled through the proxy.\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         '''\n[tests/basic-tests-windows]   |         global _opener\n[tests/basic-tests-windows]   |         if cafile or capath or cadefault:\n[tests/basic-tests-windows]   |             import warnings\n[tests/basic-tests-windows]   |             warnings.warn(\"cafile, capath and cadefault are deprecated, use a \"\n[tests/basic-tests-windows]   |                           \"custom context instead.\", DeprecationWarning, 2)\n[tests/basic-tests-windows]   |             if context is not None:\n[tests/basic-tests-windows]   |                 raise ValueError(\n[tests/basic-tests-windows]   |                     \"You can't pass both context and any of cafile, capath, and \"\n[tests/basic-tests-windows]   |                     \"cadefault\"\n[tests/basic-tests-windows]   |                 )\n[tests/basic-tests-windows]   |             if not _have_ssl:\n[tests/basic-tests-windows]   |                 raise ValueError('SSL support not available')\n[tests/basic-tests-windows]   |             context = ssl.create_default_context(ssl.Purpose.SERVER_AUTH,\n[tests/basic-tests-windows]   |                                                  cafile=cafile,\n[tests/basic-tests-windows]   |                                                  capath=capath)\n[tests/basic-tests-windows]   |             https_handler = HTTPSHandler(context=context)\n[tests/basic-tests-windows]   |             opener = build_opener(https_handler)\n[tests/basic-tests-windows]   |         elif context:\n[tests/basic-tests-windows]   |             https_handler = HTTPSHandler(context=context)\n[tests/basic-tests-windows]   |             opener = build_opener(https_handler)\n[tests/basic-tests-windows]   |         elif _opener is None:\n[tests/basic-tests-windows]   |             _opener = opener = build_opener()\n[tests/basic-tests-windows]   |         else:\n[tests/basic-tests-windows]   |             opener = _opener\n[tests/basic-tests-windows]   | >       return opener.open(url, data, timeout)\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/urllib/request.py:214: \n[tests/basic-tests-windows]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | self = <urllib.request.OpenerDirector object at 0x7fda36e83b20>\n[tests/basic-tests-windows]   | fullurl = <urllib.request.Request object at 0x7fda370c3b80>, data = None\n[tests/basic-tests-windows]   | timeout = 10\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   |     def open(self, fullurl, data=None, timeout=socket._GLOBAL_DEFAULT_TIMEOUT):\n[tests/basic-tests-windows]   |         # accept a URL or a Request object\n[tests/basic-tests-windows]   |         if isinstance(fullurl, str):\n[tests/basic-tests-windows]   |             req = Request(fullurl, data)\n[tests/basic-tests-windows]   |         else:\n[tests/basic-tests-windows]   |             req = fullurl\n[tests/basic-tests-windows]   |             if data is not None:\n[tests/basic-tests-windows]   |                 req.data = data\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         req.timeout = timeout\n[tests/basic-tests-windows]   |         protocol = req.type\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         # pre-process request\n[tests/basic-tests-windows]   |         meth_name = protocol+\"_request\"\n[tests/basic-tests-windows]   |         for processor in self.process_request.get(protocol, []):\n[tests/basic-tests-windows]   |             meth = getattr(processor, meth_name)\n[tests/basic-tests-windows]   |             req = meth(req)\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         sys.audit('urllib.Request', req.full_url, req.data, req.headers, req.get_method())\n[tests/basic-tests-windows]   |         response = self._open(req, data)\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         # post-process response\n[tests/basic-tests-windows]   |         meth_name = protocol+\"_response\"\n[tests/basic-tests-windows]   |         for processor in self.process_response.get(protocol, []):\n[tests/basic-tests-windows]   |             meth = getattr(processor, meth_name)\n[tests/basic-tests-windows]   | >           response = meth(req, response)\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/urllib/request.py:523: \n[tests/basic-tests-windows]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | self = <urllib.request.HTTPErrorProcessor object at 0x7fda371a6d60>\n[tests/basic-tests-windows]   | request = <urllib.request.Request object at 0x7fda370c3b80>\n[tests/basic-tests-windows]   | response = <http.client.HTTPResponse object at 0x7fda370c34f0>\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   |     def http_response(self, request, response):\n[tests/basic-tests-windows]   |         code, msg, hdrs = response.code, response.msg, response.info()\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         # According to RFC 2616, \"2xx\" code indicates that the client's\n[tests/basic-tests-windows]   |         # request was successfully received, understood, and accepted.\n[tests/basic-tests-windows]   |         if not (200 <= code < 300):\n[tests/basic-tests-windows]   | >           response = self.parent.error(\n[tests/basic-tests-windows]   |                 'http', request, response, code, msg, hdrs)\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/urllib/request.py:632: \n[tests/basic-tests-windows]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | self = <urllib.request.OpenerDirector object at 0x7fda36e83b20>, proto = 503\n[tests/basic-tests-windows]   | args = ({'default': [<urllib.request.HTTPDefaultErrorHandler object at 0x7fda36e83eb0>], 301: [<urllib.request.HTTPRedirectHa...ult', <urllib.request.Request object at 0x7fda370c3b80>, <http.client.HTTPResponse object at 0x7fda370c34f0>, 503, ...)\n[tests/basic-tests-windows]   | dict = {'default': [<urllib.request.HTTPDefaultErrorHandler object at 0x7fda36e83eb0>], 301: [<urllib.request.HTTPRedirectHan...PRedirectHandler object at 0x7fda3720ef10>], 303: [<urllib.request.HTTPRedirectHandler object at 0x7fda3720ef10>], ...}\n[tests/basic-tests-windows]   | meth_name = 'http_error_503', http_err = 1\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   |     def error(self, proto, *args):\n[tests/basic-tests-windows]   |         if proto in ('http', 'https'):\n[tests/basic-tests-windows]   |             # XXX http[s] protocols are special-cased\n[tests/basic-tests-windows]   |             dict = self.handle_error['http'] # https is not different than http\n[tests/basic-tests-windows]   |             proto = args[2]  # YUCK!\n[tests/basic-tests-windows]   |             meth_name = 'http_error_%s' % proto\n[tests/basic-tests-windows]   |             http_err = 1\n[tests/basic-tests-windows]   |             orig_args = args\n[tests/basic-tests-windows]   |         else:\n[tests/basic-tests-windows]   |             dict = self.handle_error\n[tests/basic-tests-windows]   |             meth_name = proto + '_error'\n[tests/basic-tests-windows]   |             http_err = 0\n[tests/basic-tests-windows]   |         args = (dict, proto, meth_name) + args\n[tests/basic-tests-windows]   |         result = self._call_chain(*args)\n[tests/basic-tests-windows]   |         if result:\n[tests/basic-tests-windows]   |             return result\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         if http_err:\n[tests/basic-tests-windows]   |             args = (dict, 'default', 'http_error_default') + orig_args\n[tests/basic-tests-windows]   | >           return self._call_chain(*args)\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/urllib/request.py:561: \n[tests/basic-tests-windows]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | self = <urllib.request.OpenerDirector object at 0x7fda36e83b20>\n[tests/basic-tests-windows]   | chain = {'default': [<urllib.request.HTTPDefaultErrorHandler object at 0x7fda36e83eb0>], 301: [<urllib.request.HTTPRedirectHan...PRedirectHandler object at 0x7fda3720ef10>], 303: [<urllib.request.HTTPRedirectHandler object at 0x7fda3720ef10>], ...}\n[tests/basic-tests-windows]   | kind = 'default', meth_name = 'http_error_default'\n[tests/basic-tests-windows]   | args = (<urllib.request.Request object at 0x7fda370c3b80>, <http.client.HTTPResponse object at 0x7fda370c34f0>, 503, 'Service Unavailable', <http.client.HTTPMessage object at 0x7fda370c3220>)\n[tests/basic-tests-windows]   | handlers = [<urllib.request.HTTPDefaultErrorHandler object at 0x7fda36e83eb0>]\n[tests/basic-tests-windows]   | handler = <urllib.request.HTTPDefaultErrorHandler object at 0x7fda36e83eb0>\n[tests/basic-tests-windows]   | func = <bound method HTTPDefaultErrorHandler.http_error_default of <urllib.request.HTTPDefaultErrorHandler object at 0x7fda36e83eb0>>\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   |     def _call_chain(self, chain, kind, meth_name, *args):\n[tests/basic-tests-windows]   |         # Handlers raise an exception if no one else should try to handle\n[tests/basic-tests-windows]   |         # the request, or return None if they can't but another handler\n[tests/basic-tests-windows]   |         # could.  Otherwise, they return the response.\n[tests/basic-tests-windows]   |         handlers = chain.get(kind, ())\n[tests/basic-tests-windows]   |         for handler in handlers:\n[tests/basic-tests-windows]   |             func = getattr(handler, meth_name)\n[tests/basic-tests-windows]   | >           result = func(*args)\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/urllib/request.py:494: \n[tests/basic-tests-windows]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | self = <urllib.request.HTTPDefaultErrorHandler object at 0x7fda36e83eb0>\n[tests/basic-tests-windows]   | req = <urllib.request.Request object at 0x7fda370c3b80>\n[tests/basic-tests-windows]   | fp = <http.client.HTTPResponse object at 0x7fda370c34f0>, code = 503\n[tests/basic-tests-windows]   | msg = 'Service Unavailable'\n[tests/basic-tests-windows]   | hdrs = <http.client.HTTPMessage object at 0x7fda370c3220>\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   |     def http_error_default(self, req, fp, code, msg, hdrs):\n[tests/basic-tests-windows]   | >       raise HTTPError(req.full_url, code, msg, hdrs, fp)\n[tests/basic-tests-windows]   | E       urllib.error.HTTPError: HTTP Error 503: Service Unavailable\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/urllib/request.py:641: HTTPError\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | During handling of the above exception, another exception occurred:\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   |     def test_query():\n[tests/basic-tests-windows]   |         \"\"\"Test 'openl' metadata service.\"\"\"\n[tests/basic-tests-windows]   |         # test query from metadata\n[tests/basic-tests-windows]   |         assert (len(repr(query('9780195132861', 'openl'))) > 140) == True\n[tests/basic-tests-windows]   | >       assert (len(repr(query('9780156001311', 'openl'))) > 140) == True\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/xlcnd-isbnlib/isbnlib/test/test_openl.py:18: \n[tests/basic-tests-windows]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-windows]   | /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/xlcnd-isbnlib/isbnlib/dev/_decorators.py:27: in memoized_func\n[tests/basic-tests-windows]   |     value = func(*args, **kwargs)\n[tests/basic-tests-windows]   | /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/xlcnd-isbnlib/isbnlib/_metadata.py:33: in query\n[tests/basic-tests-windows]   |     meta = services[service](isbn)\n[tests/basic-tests-windows]   | /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/xlcnd-isbnlib/isbnlib/_openl.py:77: in query\n[tests/basic-tests-windows]   |     data = wquery(SERVICE_URL.format(isbn=isbn), user_agent=UA)\n[tests/basic-tests-windows]   | /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/xlcnd-isbnlib/isbnlib/dev/webquery.py:65: in query\n[tests/basic-tests-windows]   |     wq = WEBQuery(url, user_agent, throttling)\n[tests/basic-tests-windows]   | /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/xlcnd-isbnlib/isbnlib/dev/webquery.py:32: in __init__\n[tests/basic-tests-windows]   |     self.data = webservice.query(service_url, ua)\n[tests/basic-tests-windows]   | /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/xlcnd-isbnlib/isbnlib/dev/_decorators.py:47: in memoized_func\n[tests/basic-tests-windows]   |     value = func(*args, **kwargs)\n[tests/basic-tests-windows]   | /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/xlcnd-isbnlib/isbnlib/dev/webservice.py:107: in query\n[tests/basic-tests-windows]   |     data = service.data()\n[tests/basic-tests-windows]   | /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/xlcnd-isbnlib/isbnlib/dev/webservice.py:87: in data\n[tests/basic-tests-windows]   |     res = self.response()\n[tests/basic-tests-windows]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | self = <isbnlib.dev.webservice.WEBService object at 0x7fda370c3250>\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   |     def response(self):\n[tests/basic-tests-windows]   |         \"\"\"Check errors on response.\"\"\"\n[tests/basic-tests-windows]   |         # TODO(http 102)\n[tests/basic-tests-windows]   |         # How to handle \"102 http's code\"?\n[tests/basic-tests-windows]   |         # - urlopen doesn't catch a 102 code!\n[tests/basic-tests-windows]   |         #   https://docs.python.org/3/howto/urllib2.html#error-codes\n[tests/basic-tests-windows]   |         try:\n[tests/basic-tests-windows]   |             response = urlopen(\n[tests/basic-tests-windows]   |                 self._request,\n[tests/basic-tests-windows]   |                 timeout=options.get('URLOPEN_TIMEOUT'),\n[tests/basic-tests-windows]   |             )\n[tests/basic-tests-windows]   |             LOGGER.debug('Request headers:\\n%s', self._request.header_items())\n[tests/basic-tests-windows]   |         except HTTPError as e:  # pragma: no cover\n[tests/basic-tests-windows]   |             LOGGER.critical(\n[tests/basic-tests-windows]   |                 'ISBNLibHTTPError for %s with code %s [%s]',\n[tests/basic-tests-windows]   |                 self._url,\n[tests/basic-tests-windows]   |                 e.code,\n[tests/basic-tests-windows]   |                 e.msg,\n[tests/basic-tests-windows]   |             )\n[tests/basic-tests-windows]   |             if e.code in (401, 403, 429):\n[tests/basic-tests-windows]   |                 raise ISBNLibHTTPError('%s Are you making many requests?' %\n[tests/basic-tests-windows]   |                                        e.code)\n[tests/basic-tests-windows]   |             if e.code in (502, 504):\n[tests/basic-tests-windows]   |                 raise ISBNLibHTTPError('%s Service temporarily unavailable!' %\n[tests/basic-tests-windows]   |                                        e.code)\n[tests/basic-tests-windows]   | >           raise ISBNLibHTTPError('(%s) %s' % (e.code, e.msg))\n[tests/basic-tests-windows]   | E           isbnlib.dev._exceptions.ISBNLibHTTPError: an HTTP error has ocurred ((503) Service Unavailable)\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/xlcnd-isbnlib/isbnlib/dev/webservice.py:68: ISBNLibHTTPError\n[tests/basic-tests-windows]   | ------------------------------ Captured log call -------------------------------\n[tests/basic-tests-windows]   | CRITICAL isbnlib.dev.webservice:webservice.py:56 ISBNLibHTTPError for http://openlibrary.org/api/books?bibkeys=ISBN:9780156001311&format=json&jscmd=data with code 503 [Service Unavailable]\n[tests/basic-tests-windows]   | ___________________________________ test_ren ___________________________________\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | self = <isbnlib.dev.webservice.WEBService object at 0x7fda37090430>\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   |     def response(self):\n[tests/basic-tests-windows]   |         \"\"\"Check errors on response.\"\"\"\n[tests/basic-tests-windows]   |         # TODO(http 102)\n[tests/basic-tests-windows]   |         # How to handle \"102 http's code\"?\n[tests/basic-tests-windows]   |         # - urlopen doesn't catch a 102 code!\n[tests/basic-tests-windows]   |         #   https://docs.python.org/3/howto/urllib2.html#error-codes\n[tests/basic-tests-windows]   |         try:\n[tests/basic-tests-windows]   | >           response = urlopen(\n[tests/basic-tests-windows]   |                 self._request,\n[tests/basic-tests-windows]   |                 timeout=options.get('URLOPEN_TIMEOUT'),\n[tests/basic-tests-windows]   |             )\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/xlcnd-isbnlib/isbnlib/dev/webservice.py:50: \n[tests/basic-tests-windows]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | url = <urllib.request.Request object at 0x7fda37090b80>, data = None\n[tests/basic-tests-windows]   | timeout = 10\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   |     def urlopen(url, data=None, timeout=socket._GLOBAL_DEFAULT_TIMEOUT,\n[tests/basic-tests-windows]   |                 *, cafile=None, capath=None, cadefault=False, context=None):\n[tests/basic-tests-windows]   |         '''Open the URL url, which can be either a string or a Request object.\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         *data* must be an object specifying additional data to be sent to\n[tests/basic-tests-windows]   |         the server, or None if no such data is needed.  See Request for\n[tests/basic-tests-windows]   |         details.\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         urllib.request module uses HTTP/1.1 and includes a \"Connection:close\"\n[tests/basic-tests-windows]   |         header in its HTTP requests.\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         The optional *timeout* parameter specifies a timeout in seconds for\n[tests/basic-tests-windows]   |         blocking operations like the connection attempt (if not specified, the\n[tests/basic-tests-windows]   |         global default timeout setting will be used). This only works for HTTP,\n[tests/basic-tests-windows]   |         HTTPS and FTP connections.\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         If *context* is specified, it must be a ssl.SSLContext instance describing\n[tests/basic-tests-windows]   |         the various SSL options. See HTTPSConnection for more details.\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         The optional *cafile* and *capath* parameters specify a set of trusted CA\n[tests/basic-tests-windows]   |         certificates for HTTPS requests. cafile should point to a single file\n[tests/basic-tests-windows]   |         containing a bundle of CA certificates, whereas capath should point to a\n[tests/basic-tests-windows]   |         directory of hashed certificate files. More information can be found in\n[tests/basic-tests-windows]   |         ssl.SSLContext.load_verify_locations().\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         The *cadefault* parameter is ignored.\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         This function always returns an object which can work as a\n[tests/basic-tests-windows]   |         context manager and has the properties url, headers, and status.\n[tests/basic-tests-windows]   |         See urllib.response.addinfourl for more detail on these properties.\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         For HTTP and HTTPS URLs, this function returns a http.client.HTTPResponse\n[tests/basic-tests-windows]   |         object slightly modified. In addition to the three new methods above, the\n[tests/basic-tests-windows]   |         msg attribute contains the same information as the reason attribute ---\n[tests/basic-tests-windows]   |         the reason phrase returned by the server --- instead of the response\n[tests/basic-tests-windows]   |         headers as it is specified in the documentation for HTTPResponse.\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         For FTP, file, and data URLs and requests explicitly handled by legacy\n[tests/basic-tests-windows]   |         URLopener and FancyURLopener classes, this function returns a\n[tests/basic-tests-windows]   |         urllib.response.addinfourl object.\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         Note that None may be returned if no handler handles the request (though\n[tests/basic-tests-windows]   |         the default installed global OpenerDirector uses UnknownHandler to ensure\n[tests/basic-tests-windows]   |         this never happens).\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         In addition, if proxy settings are detected (for example, when a *_proxy\n[tests/basic-tests-windows]   |         environment variable like http_proxy is set), ProxyHandler is default\n[tests/basic-tests-windows]   |         installed and makes sure the requests are handled through the proxy.\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         '''\n[tests/basic-tests-windows]   |         global _opener\n[tests/basic-tests-windows]   |         if cafile or capath or cadefault:\n[tests/basic-tests-windows]   |             import warnings\n[tests/basic-tests-windows]   |             warnings.warn(\"cafile, capath and cadefault are deprecated, use a \"\n[tests/basic-tests-windows]   |                           \"custom context instead.\", DeprecationWarning, 2)\n[tests/basic-tests-windows]   |             if context is not None:\n[tests/basic-tests-windows]   |                 raise ValueError(\n[tests/basic-tests-windows]   |                     \"You can't pass both context and any of cafile, capath, and \"\n[tests/basic-tests-windows]   |                     \"cadefault\"\n[tests/basic-tests-windows]   |                 )\n[tests/basic-tests-windows]   |             if not _have_ssl:\n[tests/basic-tests-windows]   |                 raise ValueError('SSL support not available')\n[tests/basic-tests-windows]   |             context = ssl.create_default_context(ssl.Purpose.SERVER_AUTH,\n[tests/basic-tests-windows]   |                                                  cafile=cafile,\n[tests/basic-tests-windows]   |                                                  capath=capath)\n[tests/basic-tests-windows]   |             https_handler = HTTPSHandler(context=context)\n[tests/basic-tests-windows]   |             opener = build_opener(https_handler)\n[tests/basic-tests-windows]   |         elif context:\n[tests/basic-tests-windows]   |             https_handler = HTTPSHandler(context=context)\n[tests/basic-tests-windows]   |             opener = build_opener(https_handler)\n[tests/basic-tests-windows]   |         elif _opener is None:\n[tests/basic-tests-windows]   |             _opener = opener = build_opener()\n[tests/basic-tests-windows]   |         else:\n[tests/basic-tests-windows]   |             opener = _opener\n[tests/basic-tests-windows]   | >       return opener.open(url, data, timeout)\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/urllib/request.py:214: \n[tests/basic-tests-windows]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | self = <urllib.request.OpenerDirector object at 0x7fda36e83b20>\n[tests/basic-tests-windows]   | fullurl = <urllib.request.Request object at 0x7fda37090b80>, data = None\n[tests/basic-tests-windows]   | timeout = 10\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   |     def open(self, fullurl, data=None, timeout=socket._GLOBAL_DEFAULT_TIMEOUT):\n[tests/basic-tests-windows]   |         # accept a URL or a Request object\n[tests/basic-tests-windows]   |         if isinstance(fullurl, str):\n[tests/basic-tests-windows]   |             req = Request(fullurl, data)\n[tests/basic-tests-windows]   |         else:\n[tests/basic-tests-windows]   |             req = fullurl\n[tests/basic-tests-windows]   |             if data is not None:\n[tests/basic-tests-windows]   |                 req.data = data\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         req.timeout = timeout\n[tests/basic-tests-windows]   |         protocol = req.type\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         # pre-process request\n[tests/basic-tests-windows]   |         meth_name = protocol+\"_request\"\n[tests/basic-tests-windows]   |         for processor in self.process_request.get(protocol, []):\n[tests/basic-tests-windows]   |             meth = getattr(processor, meth_name)\n[tests/basic-tests-windows]   |             req = meth(req)\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         sys.audit('urllib.Request', req.full_url, req.data, req.headers, req.get_method())\n[tests/basic-tests-windows]   |         response = self._open(req, data)\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         # post-process response\n[tests/basic-tests-windows]   |         meth_name = protocol+\"_response\"\n[tests/basic-tests-windows]   |         for processor in self.process_response.get(protocol, []):\n[tests/basic-tests-windows]   |             meth = getattr(processor, meth_name)\n[tests/basic-tests-windows]   | >           response = meth(req, response)\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/urllib/request.py:523: \n[tests/basic-tests-windows]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | self = <urllib.request.HTTPErrorProcessor object at 0x7fda371a6d60>\n[tests/basic-tests-windows]   | request = <urllib.request.Request object at 0x7fda37090b80>\n[tests/basic-tests-windows]   | response = <http.client.HTTPResponse object at 0x7fda37090ac0>\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   |     def http_response(self, request, response):\n[tests/basic-tests-windows]   |         code, msg, hdrs = response.code, response.msg, response.info()\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         # According to RFC 2616, \"2xx\" code indicates that the client's\n[tests/basic-tests-windows]   |         # request was successfully received, understood, and accepted.\n[tests/basic-tests-windows]   |         if not (200 <= code < 300):\n[tests/basic-tests-windows]   | >           response = self.parent.error(\n[tests/basic-tests-windows]   |                 'http', request, response, code, msg, hdrs)\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/urllib/request.py:632: \n[tests/basic-tests-windows]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | self = <urllib.request.OpenerDirector object at 0x7fda36e83b20>, proto = 403\n[tests/basic-tests-windows]   | args = ({'default': [<urllib.request.HTTPDefaultErrorHandler object at 0x7fda36e83eb0>], 301: [<urllib.request.HTTPRedirectHa...ult', <urllib.request.Request object at 0x7fda37090b80>, <http.client.HTTPResponse object at 0x7fda37090ac0>, 403, ...)\n[tests/basic-tests-windows]   | dict = {'default': [<urllib.request.HTTPDefaultErrorHandler object at 0x7fda36e83eb0>], 301: [<urllib.request.HTTPRedirectHan...PRedirectHandler object at 0x7fda3720ef10>], 303: [<urllib.request.HTTPRedirectHandler object at 0x7fda3720ef10>], ...}\n[tests/basic-tests-windows]   | meth_name = 'http_error_403', http_err = 1\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   |     def error(self, proto, *args):\n[tests/basic-tests-windows]   |         if proto in ('http', 'https'):\n[tests/basic-tests-windows]   |             # XXX http[s] protocols are special-cased\n[tests/basic-tests-windows]   |             dict = self.handle_error['http'] # https is not different than http\n[tests/basic-tests-windows]   |             proto = args[2]  # YUCK!\n[tests/basic-tests-windows]   |             meth_name = 'http_error_%s' % proto\n[tests/basic-tests-windows]   |             http_err = 1\n[tests/basic-tests-windows]   |             orig_args = args\n[tests/basic-tests-windows]   |         else:\n[tests/basic-tests-windows]   |             dict = self.handle_error\n[tests/basic-tests-windows]   |             meth_name = proto + '_error'\n[tests/basic-tests-windows]   |             http_err = 0\n[tests/basic-tests-windows]   |         args = (dict, proto, meth_name) + args\n[tests/basic-tests-windows]   |         result = self._call_chain(*args)\n[tests/basic-tests-windows]   |         if result:\n[tests/basic-tests-windows]   |             return result\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         if http_err:\n[tests/basic-tests-windows]   |             args = (dict, 'default', 'http_error_default') + orig_args\n[tests/basic-tests-windows]   | >           return self._call_chain(*args)\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/urllib/request.py:561: \n[tests/basic-tests-windows]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | self = <urllib.request.OpenerDirector object at 0x7fda36e83b20>\n[tests/basic-tests-windows]   | chain = {'default': [<urllib.request.HTTPDefaultErrorHandler object at 0x7fda36e83eb0>], 301: [<urllib.request.HTTPRedirectHan...PRedirectHandler object at 0x7fda3720ef10>], 303: [<urllib.request.HTTPRedirectHandler object at 0x7fda3720ef10>], ...}\n[tests/basic-tests-windows]   | kind = 'default', meth_name = 'http_error_default'\n[tests/basic-tests-windows]   | args = (<urllib.request.Request object at 0x7fda37090b80>, <http.client.HTTPResponse object at 0x7fda37090ac0>, 403, 'Forbidden', <http.client.HTTPMessage object at 0x7fda37090f70>)\n[tests/basic-tests-windows]   | handlers = [<urllib.request.HTTPDefaultErrorHandler object at 0x7fda36e83eb0>]\n[tests/basic-tests-windows]   | handler = <urllib.request.HTTPDefaultErrorHandler object at 0x7fda36e83eb0>\n[tests/basic-tests-windows]   | func = <bound method HTTPDefaultErrorHandler.http_error_default of <urllib.request.HTTPDefaultErrorHandler object at 0x7fda36e83eb0>>\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   |     def _call_chain(self, chain, kind, meth_name, *args):\n[tests/basic-tests-windows]   |         # Handlers raise an exception if no one else should try to handle\n[tests/basic-tests-windows]   |         # the request, or return None if they can't but another handler\n[tests/basic-tests-windows]   |         # could.  Otherwise, they return the response.\n[tests/basic-tests-windows]   |         handlers = chain.get(kind, ())\n[tests/basic-tests-windows]   |         for handler in handlers:\n[tests/basic-tests-windows]   |             func = getattr(handler, meth_name)\n[tests/basic-tests-windows]   | >           result = func(*args)\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/urllib/request.py:494: \n[tests/basic-tests-windows]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | self = <urllib.request.HTTPDefaultErrorHandler object at 0x7fda36e83eb0>\n[tests/basic-tests-windows]   | req = <urllib.request.Request object at 0x7fda37090b80>\n[tests/basic-tests-windows]   | fp = <http.client.HTTPResponse object at 0x7fda37090ac0>, code = 403\n[tests/basic-tests-windows]   | msg = 'Forbidden', hdrs = <http.client.HTTPMessage object at 0x7fda37090f70>\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   |     def http_error_default(self, req, fp, code, msg, hdrs):\n[tests/basic-tests-windows]   | >       raise HTTPError(req.full_url, code, msg, hdrs, fp)\n[tests/basic-tests-windows]   | E       urllib.error.HTTPError: HTTP Error 403: Forbidden\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/urllib/request.py:641: HTTPError\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | During handling of the above exception, another exception occurred:\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   |     def test_ren():\n[tests/basic-tests-windows]   |         \"\"\"Test 'high level' ren function.\"\"\"\n[tests/basic-tests-windows]   | >       ren(F1)\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/xlcnd-isbnlib/isbnlib/test/test_rename.py:86: \n[tests/basic-tests-windows]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-windows]   | /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/xlcnd-isbnlib/isbnlib/_ext.py:61: in ren\n[tests/basic-tests-windows]   |     data = meta(isbn)\n[tests/basic-tests-windows]   | /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/xlcnd-isbnlib/isbnlib/_ext.py:24: in meta\n[tests/basic-tests-windows]   |     return query(isbn, service) if isbn else {}\n[tests/basic-tests-windows]   | /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/xlcnd-isbnlib/isbnlib/dev/_decorators.py:27: in memoized_func\n[tests/basic-tests-windows]   |     value = func(*args, **kwargs)\n[tests/basic-tests-windows]   | /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/xlcnd-isbnlib/isbnlib/_metadata.py:33: in query\n[tests/basic-tests-windows]   |     meta = services[service](isbn)\n[tests/basic-tests-windows]   | /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/xlcnd-isbnlib/isbnlib/_goob.py:70: in query\n[tests/basic-tests-windows]   |     data = wquery(SERVICE_URL.format(isbn='isbn:' + isbn), user_agent=UA)\n[tests/basic-tests-windows]   | /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/xlcnd-isbnlib/isbnlib/dev/webquery.py:65: in query\n[tests/basic-tests-windows]   |     wq = WEBQuery(url, user_agent, throttling)\n[tests/basic-tests-windows]   | /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/xlcnd-isbnlib/isbnlib/dev/webquery.py:32: in __init__\n[tests/basic-tests-windows]   |     self.data = webservice.query(service_url, ua)\n[tests/basic-tests-windows]   | /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/xlcnd-isbnlib/isbnlib/dev/_decorators.py:47: in memoized_func\n[tests/basic-tests-windows]   |     value = func(*args, **kwargs)\n[tests/basic-tests-windows]   | /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/xlcnd-isbnlib/isbnlib/dev/webservice.py:107: in query\n[tests/basic-tests-windows]   |     data = service.data()\n[tests/basic-tests-windows]   | /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/xlcnd-isbnlib/isbnlib/dev/webservice.py:87: in data\n[tests/basic-tests-windows]   |     res = self.response()\n[tests/basic-tests-windows]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | self = <isbnlib.dev.webservice.WEBService object at 0x7fda37090430>\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   |     def response(self):\n[tests/basic-tests-windows]   |         \"\"\"Check errors on response.\"\"\"\n[tests/basic-tests-windows]   |         # TODO(http 102)\n[tests/basic-tests-windows]   |         # How to handle \"102 http's code\"?\n[tests/basic-tests-windows]   |         # - urlopen doesn't catch a 102 code!\n[tests/basic-tests-windows]   |         #   https://docs.python.org/3/howto/urllib2.html#error-codes\n[tests/basic-tests-windows]   |         try:\n[tests/basic-tests-windows]   |             response = urlopen(\n[tests/basic-tests-windows]   |                 self._request,\n[tests/basic-tests-windows]   |                 timeout=options.get('URLOPEN_TIMEOUT'),\n[tests/basic-tests-windows]   |             )\n[tests/basic-tests-windows]   |             LOGGER.debug('Request headers:\\n%s', self._request.header_items())\n[tests/basic-tests-windows]   |         except HTTPError as e:  # pragma: no cover\n[tests/basic-tests-windows]   |             LOGGER.critical(\n[tests/basic-tests-windows]   |                 'ISBNLibHTTPError for %s with code %s [%s]',\n[tests/basic-tests-windows]   |                 self._url,\n[tests/basic-tests-windows]   |                 e.code,\n[tests/basic-tests-windows]   |                 e.msg,\n[tests/basic-tests-windows]   |             )\n[tests/basic-tests-windows]   |             if e.code in (401, 403, 429):\n[tests/basic-tests-windows]   | >               raise ISBNLibHTTPError('%s Are you making many requests?' %\n[tests/basic-tests-windows]   |                                        e.code)\n[tests/basic-tests-windows]   | E               isbnlib.dev._exceptions.ISBNLibHTTPError: an HTTP error has ocurred (403 Are you making many requests?)\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/xlcnd-isbnlib/isbnlib/dev/webservice.py:63: ISBNLibHTTPError\n[tests/basic-tests-windows]   | ------------------------------ Captured log call -------------------------------\n[tests/basic-tests-windows]   | CRITICAL isbnlib.dev.webservice:webservice.py:56 ISBNLibHTTPError for https://www.googleapis.com/books/v1/volumes?q=isbn:9780198520115&fields=items/volumeInfo(title,subtitle,authors,publisher,publishedDate,language,industryIdentifiers,description,imageLinks)&maxResults=1 with code 403 [Forbidden]\n[tests/basic-tests-windows]   | =========================== short test summary info ============================\n[tests/basic-tests-windows]   | FAILED isbnlib/test/test_ext.py::test_desc - isbnlib.dev._exceptions.ISBNLibHTTPError: an HTTP error has ocurred (403 Are you making many requests?)\n[tests/basic-tests-windows]   | FAILED isbnlib/test/test_ext.py::test_cover - isbnlib.dev._exceptions.ISBNLibHTTPError: an HTTP error has ocurred (403 Are you making many requests?)\n[tests/basic-tests-windows]   | FAILED isbnlib/test/test_goom.py::test_goom - isbnlib.dev._exceptions.ISBNLibHTTPError: an HTTP error has ocurred (403 Are you making many requests?)\n[tests/basic-tests-windows]   | FAILED isbnlib/test/test_metadata.py::test_query - isbnlib.dev._exceptions.ISBNLibHTTPError: an HTTP error has ocurred (403 Are you making many requests?)\n[tests/basic-tests-windows]   | FAILED isbnlib/test/test_metadata.py::test_ext_meta - isbnlib.dev._exceptions.ISBNLibHTTPError: an HTTP error has ocurred (403 Are you making many requests?)\n[tests/basic-tests-windows]   | FAILED isbnlib/test/test_openl.py::test_query - isbnlib.dev._exceptions.ISBNLibHTTPError: an HTTP error has ocurred ((503) Service Unavailable)\n[tests/basic-tests-windows]   | FAILED isbnlib/test/test_rename.py::test_ren - isbnlib.dev._exceptions.ISBNLibHTTPError: an HTTP error has ocurred (403 Are you making many requests?)\n[tests/basic-tests-windows]   | ERROR isbnlib/test/test_cache_decorator.py::test_cache_meta - isbnlib.dev._exceptions.ISBNLibHTTPError: an HTTP error has ocurred (403 Are you making many requests?)\n[tests/basic-tests-windows]   | ==================== 7 failed, 56 passed, 1 error in 23.30s ====================\n[tests/basic-tests-macos  ]   | isbnlib/test/test_words.py::test_words PASSED                            [100%]\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | ==================================== ERRORS ====================================\n[tests/basic-tests-macos  ]   | ______________________ ERROR at setup of test_cache_meta _______________________\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | self = <isbnlib.dev.webservice.WEBService object at 0x7effb44920d0>\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   |     def response(self):\n[tests/basic-tests-macos  ]   |         \"\"\"Check errors on response.\"\"\"\n[tests/basic-tests-macos  ]   |         # TODO(http 102)\n[tests/basic-tests-macos  ]   |         # How to handle \"102 http's code\"?\n[tests/basic-tests-macos  ]   |         # - urlopen doesn't catch a 102 code!\n[tests/basic-tests-macos  ]   |         #   https://docs.python.org/3/howto/urllib2.html#error-codes\n[tests/basic-tests-macos  ]   |         try:\n[tests/basic-tests-macos  ]   | >           response = urlopen(\n[tests/basic-tests-macos  ]   |                 self._request,\n[tests/basic-tests-macos  ]   |                 timeout=options.get('URLOPEN_TIMEOUT'),\n[tests/basic-tests-macos  ]   |             )\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | isbnlib/dev/webservice.py:50: \n[tests/basic-tests-macos  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | url = <urllib.request.Request object at 0x7effb4492d30>, data = None\n[tests/basic-tests-macos  ]   | timeout = 10\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   |     def urlopen(url, data=None, timeout=socket._GLOBAL_DEFAULT_TIMEOUT,\n[tests/basic-tests-macos  ]   |                 *, cafile=None, capath=None, cadefault=False, context=None):\n[tests/basic-tests-macos  ]   |         '''Open the URL url, which can be either a string or a Request object.\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         *data* must be an object specifying additional data to be sent to\n[tests/basic-tests-macos  ]   |         the server, or None if no such data is needed.  See Request for\n[tests/basic-tests-macos  ]   |         details.\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         urllib.request module uses HTTP/1.1 and includes a \"Connection:close\"\n[tests/basic-tests-macos  ]   |         header in its HTTP requests.\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         The optional *timeout* parameter specifies a timeout in seconds for\n[tests/basic-tests-macos  ]   |         blocking operations like the connection attempt (if not specified, the\n[tests/basic-tests-macos  ]   |         global default timeout setting will be used). This only works for HTTP,\n[tests/basic-tests-macos  ]   |         HTTPS and FTP connections.\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         If *context* is specified, it must be a ssl.SSLContext instance describing\n[tests/basic-tests-macos  ]   |         the various SSL options. See HTTPSConnection for more details.\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         The optional *cafile* and *capath* parameters specify a set of trusted CA\n[tests/basic-tests-macos  ]   |         certificates for HTTPS requests. cafile should point to a single file\n[tests/basic-tests-macos  ]   |         containing a bundle of CA certificates, whereas capath should point to a\n[tests/basic-tests-macos  ]   |         directory of hashed certificate files. More information can be found in\n[tests/basic-tests-macos  ]   |         ssl.SSLContext.load_verify_locations().\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         The *cadefault* parameter is ignored.\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         This function always returns an object which can work as a context\n[tests/basic-tests-macos  ]   |         manager and has methods such as\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         * geturl() - return the URL of the resource retrieved, commonly used to\n[tests/basic-tests-macos  ]   |           determine if a redirect was followed\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         * info() - return the meta-information of the page, such as headers, in the\n[tests/basic-tests-macos  ]   |           form of an email.message_from_string() instance (see Quick Reference to\n[tests/basic-tests-macos  ]   |           HTTP Headers)\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         * getcode() - return the HTTP status code of the response.  Raises URLError\n[tests/basic-tests-macos  ]   |           on errors.\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         For HTTP and HTTPS URLs, this function returns a http.client.HTTPResponse\n[tests/basic-tests-macos  ]   |         object slightly modified. In addition to the three new methods above, the\n[tests/basic-tests-macos  ]   |         msg attribute contains the same information as the reason attribute ---\n[tests/basic-tests-macos  ]   |         the reason phrase returned by the server --- instead of the response\n[tests/basic-tests-macos  ]   |         headers as it is specified in the documentation for HTTPResponse.\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         For FTP, file, and data URLs and requests explicitly handled by legacy\n[tests/basic-tests-macos  ]   |         URLopener and FancyURLopener classes, this function returns a\n[tests/basic-tests-macos  ]   |         urllib.response.addinfourl object.\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         Note that None may be returned if no handler handles the request (though\n[tests/basic-tests-macos  ]   |         the default installed global OpenerDirector uses UnknownHandler to ensure\n[tests/basic-tests-macos  ]   |         this never happens).\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         In addition, if proxy settings are detected (for example, when a *_proxy\n[tests/basic-tests-macos  ]   |         environment variable like http_proxy is set), ProxyHandler is default\n[tests/basic-tests-macos  ]   |         installed and makes sure the requests are handled through the proxy.\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         '''\n[tests/basic-tests-macos  ]   |         global _opener\n[tests/basic-tests-macos  ]   |         if cafile or capath or cadefault:\n[tests/basic-tests-macos  ]   |             import warnings\n[tests/basic-tests-macos  ]   |             warnings.warn(\"cafile, capath and cadefault are deprecated, use a \"\n[tests/basic-tests-macos  ]   |                           \"custom context instead.\", DeprecationWarning, 2)\n[tests/basic-tests-macos  ]   |             if context is not None:\n[tests/basic-tests-macos  ]   |                 raise ValueError(\n[tests/basic-tests-macos  ]   |                     \"You can't pass both context and any of cafile, capath, and \"\n[tests/basic-tests-macos  ]   |                     \"cadefault\"\n[tests/basic-tests-macos  ]   |                 )\n[tests/basic-tests-macos  ]   |             if not _have_ssl:\n[tests/basic-tests-macos  ]   |                 raise ValueError('SSL support not available')\n[tests/basic-tests-macos  ]   |             context = ssl.create_default_context(ssl.Purpose.SERVER_AUTH,\n[tests/basic-tests-macos  ]   |                                                  cafile=cafile,\n[tests/basic-tests-macos  ]   |                                                  capath=capath)\n[tests/basic-tests-macos  ]   |             https_handler = HTTPSHandler(context=context)\n[tests/basic-tests-macos  ]   |             opener = build_opener(https_handler)\n[tests/basic-tests-macos  ]   |         elif context:\n[tests/basic-tests-macos  ]   |             https_handler = HTTPSHandler(context=context)\n[tests/basic-tests-macos  ]   |             opener = build_opener(https_handler)\n[tests/basic-tests-macos  ]   |         elif _opener is None:\n[tests/basic-tests-macos  ]   |             _opener = opener = build_opener()\n[tests/basic-tests-macos  ]   |         else:\n[tests/basic-tests-macos  ]   |             opener = _opener\n[tests/basic-tests-macos  ]   | >       return opener.open(url, data, timeout)\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/urllib/request.py:222: \n[tests/basic-tests-macos  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | self = <urllib.request.OpenerDirector object at 0x7effb4492730>\n[tests/basic-tests-macos  ]   | fullurl = <urllib.request.Request object at 0x7effb4492d30>, data = None\n[tests/basic-tests-macos  ]   | timeout = 10\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   |     def open(self, fullurl, data=None, timeout=socket._GLOBAL_DEFAULT_TIMEOUT):\n[tests/basic-tests-macos  ]   |         # accept a URL or a Request object\n[tests/basic-tests-macos  ]   |         if isinstance(fullurl, str):\n[tests/basic-tests-macos  ]   |             req = Request(fullurl, data)\n[tests/basic-tests-macos  ]   |         else:\n[tests/basic-tests-macos  ]   |             req = fullurl\n[tests/basic-tests-macos  ]   |             if data is not None:\n[tests/basic-tests-macos  ]   |                 req.data = data\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         req.timeout = timeout\n[tests/basic-tests-macos  ]   |         protocol = req.type\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         # pre-process request\n[tests/basic-tests-macos  ]   |         meth_name = protocol+\"_request\"\n[tests/basic-tests-macos  ]   |         for processor in self.process_request.get(protocol, []):\n[tests/basic-tests-macos  ]   |             meth = getattr(processor, meth_name)\n[tests/basic-tests-macos  ]   |             req = meth(req)\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         sys.audit('urllib.Request', req.full_url, req.data, req.headers, req.get_method())\n[tests/basic-tests-macos  ]   |         response = self._open(req, data)\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         # post-process response\n[tests/basic-tests-macos  ]   |         meth_name = protocol+\"_response\"\n[tests/basic-tests-macos  ]   |         for processor in self.process_response.get(protocol, []):\n[tests/basic-tests-macos  ]   |             meth = getattr(processor, meth_name)\n[tests/basic-tests-macos  ]   | >           response = meth(req, response)\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/urllib/request.py:531: \n[tests/basic-tests-macos  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | self = <urllib.request.HTTPErrorProcessor object at 0x7effb4492640>\n[tests/basic-tests-macos  ]   | request = <urllib.request.Request object at 0x7effb4492d30>\n[tests/basic-tests-macos  ]   | response = <http.client.HTTPResponse object at 0x7effb44927c0>\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   |     def http_response(self, request, response):\n[tests/basic-tests-macos  ]   |         code, msg, hdrs = response.code, response.msg, response.info()\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         # According to RFC 2616, \"2xx\" code indicates that the client's\n[tests/basic-tests-macos  ]   |         # request was successfully received, understood, and accepted.\n[tests/basic-tests-macos  ]   |         if not (200 <= code < 300):\n[tests/basic-tests-macos  ]   | >           response = self.parent.error(\n[tests/basic-tests-macos  ]   |                 'http', request, response, code, msg, hdrs)\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/urllib/request.py:640: \n[tests/basic-tests-macos  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | self = <urllib.request.OpenerDirector object at 0x7effb4492730>, proto = 403\n[tests/basic-tests-macos  ]   | args = ({'default': [<urllib.request.HTTPDefaultErrorHandler object at 0x7effb4492e80>], 301: [<urllib.request.HTTPRedirectHa...ult', <urllib.request.Request object at 0x7effb4492d30>, <http.client.HTTPResponse object at 0x7effb44927c0>, 403, ...)\n[tests/basic-tests-macos  ]   | dict = {'default': [<urllib.request.HTTPDefaultErrorHandler object at 0x7effb4492e80>], 301: [<urllib.request.HTTPRedirectHan...PRedirectHandler object at 0x7effb4492760>], 303: [<urllib.request.HTTPRedirectHandler object at 0x7effb4492760>], ...}\n[tests/basic-tests-macos  ]   | meth_name = 'http_error_403', http_err = 1\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   |     def error(self, proto, *args):\n[tests/basic-tests-macos  ]   |         if proto in ('http', 'https'):\n[tests/basic-tests-macos  ]   |             # XXX http[s] protocols are special-cased\n[tests/basic-tests-macos  ]   |             dict = self.handle_error['http'] # https is not different than http\n[tests/basic-tests-macos  ]   |             proto = args[2]  # YUCK!\n[tests/basic-tests-macos  ]   |             meth_name = 'http_error_%s' % proto\n[tests/basic-tests-macos  ]   |             http_err = 1\n[tests/basic-tests-macos  ]   |             orig_args = args\n[tests/basic-tests-macos  ]   |         else:\n[tests/basic-tests-macos  ]   |             dict = self.handle_error\n[tests/basic-tests-macos  ]   |             meth_name = proto + '_error'\n[tests/basic-tests-macos  ]   |             http_err = 0\n[tests/basic-tests-macos  ]   |         args = (dict, proto, meth_name) + args\n[tests/basic-tests-macos  ]   |         result = self._call_chain(*args)\n[tests/basic-tests-macos  ]   |         if result:\n[tests/basic-tests-macos  ]   |             return result\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         if http_err:\n[tests/basic-tests-macos  ]   |             args = (dict, 'default', 'http_error_default') + orig_args\n[tests/basic-tests-macos  ]   | >           return self._call_chain(*args)\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/urllib/request.py:569: \n[tests/basic-tests-macos  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | self = <urllib.request.OpenerDirector object at 0x7effb4492730>\n[tests/basic-tests-macos  ]   | chain = {'default': [<urllib.request.HTTPDefaultErrorHandler object at 0x7effb4492e80>], 301: [<urllib.request.HTTPRedirectHan...PRedirectHandler object at 0x7effb4492760>], 303: [<urllib.request.HTTPRedirectHandler object at 0x7effb4492760>], ...}\n[tests/basic-tests-macos  ]   | kind = 'default', meth_name = 'http_error_default'\n[tests/basic-tests-macos  ]   | args = (<urllib.request.Request object at 0x7effb4492d30>, <http.client.HTTPResponse object at 0x7effb44927c0>, 403, 'Forbidden', <http.client.HTTPMessage object at 0x7effb3ef6fa0>)\n[tests/basic-tests-macos  ]   | handlers = [<urllib.request.HTTPDefaultErrorHandler object at 0x7effb4492e80>]\n[tests/basic-tests-macos  ]   | handler = <urllib.request.HTTPDefaultErrorHandler object at 0x7effb4492e80>\n[tests/basic-tests-macos  ]   | func = <bound method HTTPDefaultErrorHandler.http_error_default of <urllib.request.HTTPDefaultErrorHandler object at 0x7effb4492e80>>\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   |     def _call_chain(self, chain, kind, meth_name, *args):\n[tests/basic-tests-macos  ]   |         # Handlers raise an exception if no one else should try to handle\n[tests/basic-tests-macos  ]   |         # the request, or return None if they can't but another handler\n[tests/basic-tests-macos  ]   |         # could.  Otherwise, they return the response.\n[tests/basic-tests-macos  ]   |         handlers = chain.get(kind, ())\n[tests/basic-tests-macos  ]   |         for handler in handlers:\n[tests/basic-tests-macos  ]   |             func = getattr(handler, meth_name)\n[tests/basic-tests-macos  ]   | >           result = func(*args)\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/urllib/request.py:502: \n[tests/basic-tests-macos  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | self = <urllib.request.HTTPDefaultErrorHandler object at 0x7effb4492e80>\n[tests/basic-tests-macos  ]   | req = <urllib.request.Request object at 0x7effb4492d30>\n[tests/basic-tests-macos  ]   | fp = <http.client.HTTPResponse object at 0x7effb44927c0>, code = 403\n[tests/basic-tests-macos  ]   | msg = 'Forbidden', hdrs = <http.client.HTTPMessage object at 0x7effb3ef6fa0>\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   |     def http_error_default(self, req, fp, code, msg, hdrs):\n[tests/basic-tests-macos  ]   | >       raise HTTPError(req.full_url, code, msg, hdrs, fp)\n[tests/basic-tests-macos  ]   | E       urllib.error.HTTPError: HTTP Error 403: Forbidden\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/urllib/request.py:649: HTTPError\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | During handling of the above exception, another exception occurred:\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   |     def setup_module():\n[tests/basic-tests-macos  ]   | >       meta('9780375869020')  #  <-- set\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | isbnlib/test/test_cache_decorator.py:17: \n[tests/basic-tests-macos  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-macos  ]   | isbnlib/_ext.py:24: in meta\n[tests/basic-tests-macos  ]   |     return query(isbn, service) if isbn else {}\n[tests/basic-tests-macos  ]   | isbnlib/dev/_decorators.py:27: in memoized_func\n[tests/basic-tests-macos  ]   |     value = func(*args, **kwargs)\n[tests/basic-tests-macos  ]   | isbnlib/_metadata.py:33: in query\n[tests/basic-tests-macos  ]   |     meta = services[service](isbn)\n[tests/basic-tests-macos  ]   | isbnlib/_goob.py:70: in query\n[tests/basic-tests-macos  ]   |     data = wquery(SERVICE_URL.format(isbn='isbn:' + isbn), user_agent=UA)\n[tests/basic-tests-macos  ]   | isbnlib/dev/webquery.py:65: in query\n[tests/basic-tests-macos  ]   |     wq = WEBQuery(url, user_agent, throttling)\n[tests/basic-tests-macos  ]   | isbnlib/dev/webquery.py:32: in __init__\n[tests/basic-tests-macos  ]   |     self.data = webservice.query(service_url, ua)\n[tests/basic-tests-macos  ]   | isbnlib/dev/_decorators.py:47: in memoized_func\n[tests/basic-tests-macos  ]   |     value = func(*args, **kwargs)\n[tests/basic-tests-macos  ]   | isbnlib/dev/webservice.py:107: in query\n[tests/basic-tests-macos  ]   |     data = service.data()\n[tests/basic-tests-macos  ]   | isbnlib/dev/webservice.py:87: in data\n[tests/basic-tests-macos  ]   |     res = self.response()\n[tests/basic-tests-macos  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | self = <isbnlib.dev.webservice.WEBService object at 0x7effb44920d0>\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   |     def response(self):\n[tests/basic-tests-macos  ]   |         \"\"\"Check errors on response.\"\"\"\n[tests/basic-tests-macos  ]   |         # TODO(http 102)\n[tests/basic-tests-macos  ]   |         # How to handle \"102 http's code\"?\n[tests/basic-tests-macos  ]   |         # - urlopen doesn't catch a 102 code!\n[tests/basic-tests-macos  ]   |         #   https://docs.python.org/3/howto/urllib2.html#error-codes\n[tests/basic-tests-macos  ]   |         try:\n[tests/basic-tests-macos  ]   |             response = urlopen(\n[tests/basic-tests-macos  ]   |                 self._request,\n[tests/basic-tests-macos  ]   |                 timeout=options.get('URLOPEN_TIMEOUT'),\n[tests/basic-tests-macos  ]   |             )\n[tests/basic-tests-macos  ]   |             LOGGER.debug('Request headers:\\n%s', self._request.header_items())\n[tests/basic-tests-macos  ]   |         except HTTPError as e:  # pragma: no cover\n[tests/basic-tests-macos  ]   |             LOGGER.critical(\n[tests/basic-tests-macos  ]   |                 'ISBNLibHTTPError for %s with code %s [%s]',\n[tests/basic-tests-macos  ]   |                 self._url,\n[tests/basic-tests-macos  ]   |                 e.code,\n[tests/basic-tests-macos  ]   |                 e.msg,\n[tests/basic-tests-macos  ]   |             )\n[tests/basic-tests-macos  ]   |             if e.code in (401, 403, 429):\n[tests/basic-tests-macos  ]   | >               raise ISBNLibHTTPError('%s Are you making many requests?' %\n[tests/basic-tests-macos  ]   |                                        e.code)\n[tests/basic-tests-macos  ]   | E               isbnlib.dev._exceptions.ISBNLibHTTPError: an HTTP error has ocurred (403 Are you making many requests?)\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | isbnlib/dev/webservice.py:63: ISBNLibHTTPError\n[tests/basic-tests-macos  ]   | ------------------------------ Captured log setup ------------------------------\n[tests/basic-tests-macos  ]   | CRITICAL isbnlib.dev.webservice:webservice.py:56 ISBNLibHTTPError for https://www.googleapis.com/books/v1/volumes?q=isbn:9780375869020&fields=items/volumeInfo(title,subtitle,authors,publisher,publishedDate,language,industryIdentifiers,description,imageLinks)&maxResults=1 with code 403 [Forbidden]\n[tests/basic-tests-macos  ]   | =================================== FAILURES ===================================\n[tests/basic-tests-macos  ]   | __________________________________ test_desc ___________________________________\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | self = <isbnlib.dev.webservice.WEBService object at 0x7effb46a19d0>\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   |     def response(self):\n[tests/basic-tests-macos  ]   |         \"\"\"Check errors on response.\"\"\"\n[tests/basic-tests-macos  ]   |         # TODO(http 102)\n[tests/basic-tests-macos  ]   |         # How to handle \"102 http's code\"?\n[tests/basic-tests-macos  ]   |         # - urlopen doesn't catch a 102 code!\n[tests/basic-tests-macos  ]   |         #   https://docs.python.org/3/howto/urllib2.html#error-codes\n[tests/basic-tests-macos  ]   |         try:\n[tests/basic-tests-macos  ]   | >           response = urlopen(\n[tests/basic-tests-macos  ]   |                 self._request,\n[tests/basic-tests-macos  ]   |                 timeout=options.get('URLOPEN_TIMEOUT'),\n[tests/basic-tests-macos  ]   |             )\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | isbnlib/dev/webservice.py:50: \n[tests/basic-tests-macos  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | url = <urllib.request.Request object at 0x7effb46a1a60>, data = None\n[tests/basic-tests-macos  ]   | timeout = 10\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   |     def urlopen(url, data=None, timeout=socket._GLOBAL_DEFAULT_TIMEOUT,\n[tests/basic-tests-macos  ]   |                 *, cafile=None, capath=None, cadefault=False, context=None):\n[tests/basic-tests-macos  ]   |         '''Open the URL url, which can be either a string or a Request object.\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         *data* must be an object specifying additional data to be sent to\n[tests/basic-tests-macos  ]   |         the server, or None if no such data is needed.  See Request for\n[tests/basic-tests-macos  ]   |         details.\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         urllib.request module uses HTTP/1.1 and includes a \"Connection:close\"\n[tests/basic-tests-macos  ]   |         header in its HTTP requests.\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         The optional *timeout* parameter specifies a timeout in seconds for\n[tests/basic-tests-macos  ]   |         blocking operations like the connection attempt (if not specified, the\n[tests/basic-tests-macos  ]   |         global default timeout setting will be used). This only works for HTTP,\n[tests/basic-tests-macos  ]   |         HTTPS and FTP connections.\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         If *context* is specified, it must be a ssl.SSLContext instance describing\n[tests/basic-tests-macos  ]   |         the various SSL options. See HTTPSConnection for more details.\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         The optional *cafile* and *capath* parameters specify a set of trusted CA\n[tests/basic-tests-macos  ]   |         certificates for HTTPS requests. cafile should point to a single file\n[tests/basic-tests-macos  ]   |         containing a bundle of CA certificates, whereas capath should point to a\n[tests/basic-tests-macos  ]   |         directory of hashed certificate files. More information can be found in\n[tests/basic-tests-macos  ]   |         ssl.SSLContext.load_verify_locations().\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         The *cadefault* parameter is ignored.\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         This function always returns an object which can work as a context\n[tests/basic-tests-macos  ]   |         manager and has methods such as\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         * geturl() - return the URL of the resource retrieved, commonly used to\n[tests/basic-tests-macos  ]   |           determine if a redirect was followed\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         * info() - return the meta-information of the page, such as headers, in the\n[tests/basic-tests-macos  ]   |           form of an email.message_from_string() instance (see Quick Reference to\n[tests/basic-tests-macos  ]   |           HTTP Headers)\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         * getcode() - return the HTTP status code of the response.  Raises URLError\n[tests/basic-tests-macos  ]   |           on errors.\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         For HTTP and HTTPS URLs, this function returns a http.client.HTTPResponse\n[tests/basic-tests-macos  ]   |         object slightly modified. In addition to the three new methods above, the\n[tests/basic-tests-macos  ]   |         msg attribute contains the same information as the reason attribute ---\n[tests/basic-tests-macos  ]   |         the reason phrase returned by the server --- instead of the response\n[tests/basic-tests-macos  ]   |         headers as it is specified in the documentation for HTTPResponse.\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         For FTP, file, and data URLs and requests explicitly handled by legacy\n[tests/basic-tests-macos  ]   |         URLopener and FancyURLopener classes, this function returns a\n[tests/basic-tests-macos  ]   |         urllib.response.addinfourl object.\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         Note that None may be returned if no handler handles the request (though\n[tests/basic-tests-macos  ]   |         the default installed global OpenerDirector uses UnknownHandler to ensure\n[tests/basic-tests-macos  ]   |         this never happens).\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         In addition, if proxy settings are detected (for example, when a *_proxy\n[tests/basic-tests-macos  ]   |         environment variable like http_proxy is set), ProxyHandler is default\n[tests/basic-tests-macos  ]   |         installed and makes sure the requests are handled through the proxy.\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         '''\n[tests/basic-tests-macos  ]   |         global _opener\n[tests/basic-tests-macos  ]   |         if cafile or capath or cadefault:\n[tests/basic-tests-macos  ]   |             import warnings\n[tests/basic-tests-macos  ]   |             warnings.warn(\"cafile, capath and cadefault are deprecated, use a \"\n[tests/basic-tests-macos  ]   |                           \"custom context instead.\", DeprecationWarning, 2)\n[tests/basic-tests-macos  ]   |             if context is not None:\n[tests/basic-tests-macos  ]   |                 raise ValueError(\n[tests/basic-tests-macos  ]   |                     \"You can't pass both context and any of cafile, capath, and \"\n[tests/basic-tests-macos  ]   |                     \"cadefault\"\n[tests/basic-tests-macos  ]   |                 )\n[tests/basic-tests-macos  ]   |             if not _have_ssl:\n[tests/basic-tests-macos  ]   |                 raise ValueError('SSL support not available')\n[tests/basic-tests-macos  ]   |             context = ssl.create_default_context(ssl.Purpose.SERVER_AUTH,\n[tests/basic-tests-macos  ]   |                                                  cafile=cafile,\n[tests/basic-tests-macos  ]   |                                                  capath=capath)\n[tests/basic-tests-macos  ]   |             https_handler = HTTPSHandler(context=context)\n[tests/basic-tests-macos  ]   |             opener = build_opener(https_handler)\n[tests/basic-tests-macos  ]   |         elif context:\n[tests/basic-tests-macos  ]   |             https_handler = HTTPSHandler(context=context)\n[tests/basic-tests-macos  ]   |             opener = build_opener(https_handler)\n[tests/basic-tests-macos  ]   |         elif _opener is None:\n[tests/basic-tests-macos  ]   |             _opener = opener = build_opener()\n[tests/basic-tests-macos  ]   |         else:\n[tests/basic-tests-macos  ]   |             opener = _opener\n[tests/basic-tests-macos  ]   | >       return opener.open(url, data, timeout)\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/urllib/request.py:222: \n[tests/basic-tests-macos  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | self = <urllib.request.OpenerDirector object at 0x7effb4492730>\n[tests/basic-tests-macos  ]   | fullurl = <urllib.request.Request object at 0x7effb46a1a60>, data = None\n[tests/basic-tests-macos  ]   | timeout = 10\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   |     def open(self, fullurl, data=None, timeout=socket._GLOBAL_DEFAULT_TIMEOUT):\n[tests/basic-tests-macos  ]   |         # accept a URL or a Request object\n[tests/basic-tests-macos  ]   |         if isinstance(fullurl, str):\n[tests/basic-tests-macos  ]   |             req = Request(fullurl, data)\n[tests/basic-tests-macos  ]   |         else:\n[tests/basic-tests-macos  ]   |             req = fullurl\n[tests/basic-tests-macos  ]   |             if data is not None:\n[tests/basic-tests-macos  ]   |                 req.data = data\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         req.timeout = timeout\n[tests/basic-tests-macos  ]   |         protocol = req.type\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         # pre-process request\n[tests/basic-tests-macos  ]   |         meth_name = protocol+\"_request\"\n[tests/basic-tests-macos  ]   |         for processor in self.process_request.get(protocol, []):\n[tests/basic-tests-macos  ]   |             meth = getattr(processor, meth_name)\n[tests/basic-tests-macos  ]   |             req = meth(req)\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         sys.audit('urllib.Request', req.full_url, req.data, req.headers, req.get_method())\n[tests/basic-tests-macos  ]   |         response = self._open(req, data)\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         # post-process response\n[tests/basic-tests-macos  ]   |         meth_name = protocol+\"_response\"\n[tests/basic-tests-macos  ]   |         for processor in self.process_response.get(protocol, []):\n[tests/basic-tests-macos  ]   |             meth = getattr(processor, meth_name)\n[tests/basic-tests-macos  ]   | >           response = meth(req, response)\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/urllib/request.py:531: \n[tests/basic-tests-macos  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | self = <urllib.request.HTTPErrorProcessor object at 0x7effb4492640>\n[tests/basic-tests-macos  ]   | request = <urllib.request.Request object at 0x7effb46a1a60>\n[tests/basic-tests-macos  ]   | response = <http.client.HTTPResponse object at 0x7effb46a1a30>\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   |     def http_response(self, request, response):\n[tests/basic-tests-macos  ]   |         code, msg, hdrs = response.code, response.msg, response.info()\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         # According to RFC 2616, \"2xx\" code indicates that the client's\n[tests/basic-tests-macos  ]   |         # request was successfully received, understood, and accepted.\n[tests/basic-tests-macos  ]   |         if not (200 <= code < 300):\n[tests/basic-tests-macos  ]   | >           response = self.parent.error(\n[tests/basic-tests-macos  ]   |                 'http', request, response, code, msg, hdrs)\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/urllib/request.py:640: \n[tests/basic-tests-macos  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | self = <urllib.request.OpenerDirector object at 0x7effb4492730>, proto = 403\n[tests/basic-tests-macos  ]   | args = ({'default': [<urllib.request.HTTPDefaultErrorHandler object at 0x7effb4492e80>], 301: [<urllib.request.HTTPRedirectHa...ult', <urllib.request.Request object at 0x7effb46a1a60>, <http.client.HTTPResponse object at 0x7effb46a1a30>, 403, ...)\n[tests/basic-tests-macos  ]   | dict = {'default': [<urllib.request.HTTPDefaultErrorHandler object at 0x7effb4492e80>], 301: [<urllib.request.HTTPRedirectHan...PRedirectHandler object at 0x7effb4492760>], 303: [<urllib.request.HTTPRedirectHandler object at 0x7effb4492760>], ...}\n[tests/basic-tests-macos  ]   | meth_name = 'http_error_403', http_err = 1\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   |     def error(self, proto, *args):\n[tests/basic-tests-macos  ]   |         if proto in ('http', 'https'):\n[tests/basic-tests-macos  ]   |             # XXX http[s] protocols are special-cased\n[tests/basic-tests-macos  ]   |             dict = self.handle_error['http'] # https is not different than http\n[tests/basic-tests-macos  ]   |             proto = args[2]  # YUCK!\n[tests/basic-tests-macos  ]   |             meth_name = 'http_error_%s' % proto\n[tests/basic-tests-macos  ]   |             http_err = 1\n[tests/basic-tests-macos  ]   |             orig_args = args\n[tests/basic-tests-macos  ]   |         else:\n[tests/basic-tests-macos  ]   |             dict = self.handle_error\n[tests/basic-tests-macos  ]   |             meth_name = proto + '_error'\n[tests/basic-tests-macos  ]   |             http_err = 0\n[tests/basic-tests-macos  ]   |         args = (dict, proto, meth_name) + args\n[tests/basic-tests-macos  ]   |         result = self._call_chain(*args)\n[tests/basic-tests-macos  ]   |         if result:\n[tests/basic-tests-macos  ]   |             return result\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         if http_err:\n[tests/basic-tests-macos  ]   |             args = (dict, 'default', 'http_error_default') + orig_args\n[tests/basic-tests-macos  ]   | >           return self._call_chain(*args)\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/urllib/request.py:569: \n[tests/basic-tests-macos  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | self = <urllib.request.OpenerDirector object at 0x7effb4492730>\n[tests/basic-tests-macos  ]   | chain = {'default': [<urllib.request.HTTPDefaultErrorHandler object at 0x7effb4492e80>], 301: [<urllib.request.HTTPRedirectHan...PRedirectHandler object at 0x7effb4492760>], 303: [<urllib.request.HTTPRedirectHandler object at 0x7effb4492760>], ...}\n[tests/basic-tests-macos  ]   | kind = 'default', meth_name = 'http_error_default'\n[tests/basic-tests-macos  ]   | args = (<urllib.request.Request object at 0x7effb46a1a60>, <http.client.HTTPResponse object at 0x7effb46a1a30>, 403, 'Forbidden', <http.client.HTTPMessage object at 0x7effb46a1c10>)\n[tests/basic-tests-macos  ]   | handlers = [<urllib.request.HTTPDefaultErrorHandler object at 0x7effb4492e80>]\n[tests/basic-tests-macos  ]   | handler = <urllib.request.HTTPDefaultErrorHandler object at 0x7effb4492e80>\n[tests/basic-tests-macos  ]   | func = <bound method HTTPDefaultErrorHandler.http_error_default of <urllib.request.HTTPDefaultErrorHandler object at 0x7effb4492e80>>\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   |     def _call_chain(self, chain, kind, meth_name, *args):\n[tests/basic-tests-macos  ]   |         # Handlers raise an exception if no one else should try to handle\n[tests/basic-tests-macos  ]   |         # the request, or return None if they can't but another handler\n[tests/basic-tests-macos  ]   |         # could.  Otherwise, they return the response.\n[tests/basic-tests-macos  ]   |         handlers = chain.get(kind, ())\n[tests/basic-tests-macos  ]   |         for handler in handlers:\n[tests/basic-tests-macos  ]   |             func = getattr(handler, meth_name)\n[tests/basic-tests-macos  ]   | >           result = func(*args)\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/urllib/request.py:502: \n[tests/basic-tests-macos  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | self = <urllib.request.HTTPDefaultErrorHandler object at 0x7effb4492e80>\n[tests/basic-tests-macos  ]   | req = <urllib.request.Request object at 0x7effb46a1a60>\n[tests/basic-tests-macos  ]   | fp = <http.client.HTTPResponse object at 0x7effb46a1a30>, code = 403\n[tests/basic-tests-macos  ]   | msg = 'Forbidden', hdrs = <http.client.HTTPMessage object at 0x7effb46a1c10>\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   |     def http_error_default(self, req, fp, code, msg, hdrs):\n[tests/basic-tests-macos  ]   | >       raise HTTPError(req.full_url, code, msg, hdrs, fp)\n[tests/basic-tests-macos  ]   | E       urllib.error.HTTPError: HTTP Error 403: Forbidden\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/urllib/request.py:649: HTTPError\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | During handling of the above exception, another exception occurred:\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   |     @pytest.mark.network\n[tests/basic-tests-macos  ]   |     def test_desc():\n[tests/basic-tests-macos  ]   |         \"\"\"Test 'desc' command.\"\"\"\n[tests/basic-tests-macos  ]   | >       assert (len(desc('9780156001311')) > 10) == True\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | isbnlib/test/test_ext.py:57: \n[tests/basic-tests-macos  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-macos  ]   | isbnlib/_ext.py:94: in desc\n[tests/basic-tests-macos  ]   |     return goo_desc(isbn) if isbn else ''\n[tests/basic-tests-macos  ]   | isbnlib/dev/_decorators.py:27: in memoized_func\n[tests/basic-tests-macos  ]   |     value = func(*args, **kwargs)\n[tests/basic-tests-macos  ]   | isbnlib/_desc.py:25: in goo_desc\n[tests/basic-tests-macos  ]   |     content = wsquery(url, user_agent=UA)\n[tests/basic-tests-macos  ]   | isbnlib/dev/_decorators.py:47: in memoized_func\n[tests/basic-tests-macos  ]   |     value = func(*args, **kwargs)\n[tests/basic-tests-macos  ]   | isbnlib/dev/webservice.py:107: in query\n[tests/basic-tests-macos  ]   |     data = service.data()\n[tests/basic-tests-macos  ]   | isbnlib/dev/webservice.py:87: in data\n[tests/basic-tests-macos  ]   |     res = self.response()\n[tests/basic-tests-macos  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | self = <isbnlib.dev.webservice.WEBService object at 0x7effb46a19d0>\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   |     def response(self):\n[tests/basic-tests-macos  ]   |         \"\"\"Check errors on response.\"\"\"\n[tests/basic-tests-macos  ]   |         # TODO(http 102)\n[tests/basic-tests-macos  ]   |         # How to handle \"102 http's code\"?\n[tests/basic-tests-macos  ]   |         # - urlopen doesn't catch a 102 code!\n[tests/basic-tests-macos  ]   |         #   https://docs.python.org/3/howto/urllib2.html#error-codes\n[tests/basic-tests-macos  ]   |         try:\n[tests/basic-tests-macos  ]   |             response = urlopen(\n[tests/basic-tests-macos  ]   |                 self._request,\n[tests/basic-tests-macos  ]   |                 timeout=options.get('URLOPEN_TIMEOUT'),\n[tests/basic-tests-macos  ]   |             )\n[tests/basic-tests-macos  ]   |             LOGGER.debug('Request headers:\\n%s', self._request.header_items())\n[tests/basic-tests-macos  ]   |         except HTTPError as e:  # pragma: no cover\n[tests/basic-tests-macos  ]   |             LOGGER.critical(\n[tests/basic-tests-macos  ]   |                 'ISBNLibHTTPError for %s with code %s [%s]',\n[tests/basic-tests-macos  ]   |                 self._url,\n[tests/basic-tests-macos  ]   |                 e.code,\n[tests/basic-tests-macos  ]   |                 e.msg,\n[tests/basic-tests-macos  ]   |             )\n[tests/basic-tests-macos  ]   |             if e.code in (401, 403, 429):\n[tests/basic-tests-macos  ]   | >               raise ISBNLibHTTPError('%s Are you making many requests?' %\n[tests/basic-tests-macos  ]   |                                        e.code)\n[tests/basic-tests-macos  ]   | E               isbnlib.dev._exceptions.ISBNLibHTTPError: an HTTP error has ocurred (403 Are you making many requests?)\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | isbnlib/dev/webservice.py:63: ISBNLibHTTPError\n[tests/basic-tests-macos  ]   | ------------------------------ Captured log call -------------------------------\n[tests/basic-tests-macos  ]   | CRITICAL isbnlib.dev.webservice:webservice.py:56 ISBNLibHTTPError for https://www.googleapis.com/books/v1/volumes?q=isbn:9780156001311&fields=items/volumeInfo(title,subtitle,authors,publisher,publishedDate,language,industryIdentifiers,description,imageLinks)&maxResults=1 with code 403 [Forbidden]\n[tests/basic-tests-macos  ]   | __________________________________ test_cover __________________________________\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | self = <isbnlib.dev.webservice.WEBService object at 0x7effb44bf820>\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   |     def response(self):\n[tests/basic-tests-macos  ]   |         \"\"\"Check errors on response.\"\"\"\n[tests/basic-tests-macos  ]   |         # TODO(http 102)\n[tests/basic-tests-macos  ]   |         # How to handle \"102 http's code\"?\n[tests/basic-tests-macos  ]   |         # - urlopen doesn't catch a 102 code!\n[tests/basic-tests-macos  ]   |         #   https://docs.python.org/3/howto/urllib2.html#error-codes\n[tests/basic-tests-macos  ]   |         try:\n[tests/basic-tests-macos  ]   | >           response = urlopen(\n[tests/basic-tests-macos  ]   |                 self._request,\n[tests/basic-tests-macos  ]   |                 timeout=options.get('URLOPEN_TIMEOUT'),\n[tests/basic-tests-macos  ]   |             )\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | isbnlib/dev/webservice.py:50: \n[tests/basic-tests-macos  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | url = <urllib.request.Request object at 0x7effb44bfc70>, data = None\n[tests/basic-tests-macos  ]   | timeout = 10\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   |     def urlopen(url, data=None, timeout=socket._GLOBAL_DEFAULT_TIMEOUT,\n[tests/basic-tests-macos  ]   |                 *, cafile=None, capath=None, cadefault=False, context=None):\n[tests/basic-tests-macos  ]   |         '''Open the URL url, which can be either a string or a Request object.\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         *data* must be an object specifying additional data to be sent to\n[tests/basic-tests-macos  ]   |         the server, or None if no such data is needed.  See Request for\n[tests/basic-tests-macos  ]   |         details.\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         urllib.request module uses HTTP/1.1 and includes a \"Connection:close\"\n[tests/basic-tests-macos  ]   |         header in its HTTP requests.\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         The optional *timeout* parameter specifies a timeout in seconds for\n[tests/basic-tests-macos  ]   |         blocking operations like the connection attempt (if not specified, the\n[tests/basic-tests-macos  ]   |         global default timeout setting will be used). This only works for HTTP,\n[tests/basic-tests-macos  ]   |         HTTPS and FTP connections.\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         If *context* is specified, it must be a ssl.SSLContext instance describing\n[tests/basic-tests-macos  ]   |         the various SSL options. See HTTPSConnection for more details.\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         The optional *cafile* and *capath* parameters specify a set of trusted CA\n[tests/basic-tests-macos  ]   |         certificates for HTTPS requests. cafile should point to a single file\n[tests/basic-tests-macos  ]   |         containing a bundle of CA certificates, whereas capath should point to a\n[tests/basic-tests-macos  ]   |         directory of hashed certificate files. More information can be found in\n[tests/basic-tests-macos  ]   |         ssl.SSLContext.load_verify_locations().\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         The *cadefault* parameter is ignored.\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         This function always returns an object which can work as a context\n[tests/basic-tests-macos  ]   |         manager and has methods such as\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         * geturl() - return the URL of the resource retrieved, commonly used to\n[tests/basic-tests-macos  ]   |           determine if a redirect was followed\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         * info() - return the meta-information of the page, such as headers, in the\n[tests/basic-tests-macos  ]   |           form of an email.message_from_string() instance (see Quick Reference to\n[tests/basic-tests-macos  ]   |           HTTP Headers)\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         * getcode() - return the HTTP status code of the response.  Raises URLError\n[tests/basic-tests-macos  ]   |           on errors.\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         For HTTP and HTTPS URLs, this function returns a http.client.HTTPResponse\n[tests/basic-tests-macos  ]   |         object slightly modified. In addition to the three new methods above, the\n[tests/basic-tests-macos  ]   |         msg attribute contains the same information as the reason attribute ---\n[tests/basic-tests-macos  ]   |         the reason phrase returned by the server --- instead of the response\n[tests/basic-tests-macos  ]   |         headers as it is specified in the documentation for HTTPResponse.\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         For FTP, file, and data URLs and requests explicitly handled by legacy\n[tests/basic-tests-macos  ]   |         URLopener and FancyURLopener classes, this function returns a\n[tests/basic-tests-macos  ]   |         urllib.response.addinfourl object.\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         Note that None may be returned if no handler handles the request (though\n[tests/basic-tests-macos  ]   |         the default installed global OpenerDirector uses UnknownHandler to ensure\n[tests/basic-tests-macos  ]   |         this never happens).\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         In addition, if proxy settings are detected (for example, when a *_proxy\n[tests/basic-tests-macos  ]   |         environment variable like http_proxy is set), ProxyHandler is default\n[tests/basic-tests-macos  ]   |         installed and makes sure the requests are handled through the proxy.\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         '''\n[tests/basic-tests-macos  ]   |         global _opener\n[tests/basic-tests-macos  ]   |         if cafile or capath or cadefault:\n[tests/basic-tests-macos  ]   |             import warnings\n[tests/basic-tests-macos  ]   |             warnings.warn(\"cafile, capath and cadefault are deprecated, use a \"\n[tests/basic-tests-macos  ]   |                           \"custom context instead.\", DeprecationWarning, 2)\n[tests/basic-tests-macos  ]   |             if context is not None:\n[tests/basic-tests-macos  ]   |                 raise ValueError(\n[tests/basic-tests-macos  ]   |                     \"You can't pass both context and any of cafile, capath, and \"\n[tests/basic-tests-macos  ]   |                     \"cadefault\"\n[tests/basic-tests-macos  ]   |                 )\n[tests/basic-tests-macos  ]   |             if not _have_ssl:\n[tests/basic-tests-macos  ]   |                 raise ValueError('SSL support not available')\n[tests/basic-tests-macos  ]   |             context = ssl.create_default_context(ssl.Purpose.SERVER_AUTH,\n[tests/basic-tests-macos  ]   |                                                  cafile=cafile,\n[tests/basic-tests-macos  ]   |                                                  capath=capath)\n[tests/basic-tests-macos  ]   |             https_handler = HTTPSHandler(context=context)\n[tests/basic-tests-macos  ]   |             opener = build_opener(https_handler)\n[tests/basic-tests-macos  ]   |         elif context:\n[tests/basic-tests-macos  ]   |             https_handler = HTTPSHandler(context=context)\n[tests/basic-tests-macos  ]   |             opener = build_opener(https_handler)\n[tests/basic-tests-macos  ]   |         elif _opener is None:\n[tests/basic-tests-macos  ]   |             _opener = opener = build_opener()\n[tests/basic-tests-macos  ]   |         else:\n[tests/basic-tests-macos  ]   |             opener = _opener\n[tests/basic-tests-macos  ]   | >       return opener.open(url, data, timeout)\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/urllib/request.py:222: \n[tests/basic-tests-macos  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | self = <urllib.request.OpenerDirector object at 0x7effb4492730>\n[tests/basic-tests-macos  ]   | fullurl = <urllib.request.Request object at 0x7effb44bfc70>, data = None\n[tests/basic-tests-macos  ]   | timeout = 10\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   |     def open(self, fullurl, data=None, timeout=socket._GLOBAL_DEFAULT_TIMEOUT):\n[tests/basic-tests-macos  ]   |         # accept a URL or a Request object\n[tests/basic-tests-macos  ]   |         if isinstance(fullurl, str):\n[tests/basic-tests-macos  ]   |             req = Request(fullurl, data)\n[tests/basic-tests-macos  ]   |         else:\n[tests/basic-tests-macos  ]   |             req = fullurl\n[tests/basic-tests-macos  ]   |             if data is not None:\n[tests/basic-tests-macos  ]   |                 req.data = data\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         req.timeout = timeout\n[tests/basic-tests-macos  ]   |         protocol = req.type\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         # pre-process request\n[tests/basic-tests-macos  ]   |         meth_name = protocol+\"_request\"\n[tests/basic-tests-macos  ]   |         for processor in self.process_request.get(protocol, []):\n[tests/basic-tests-macos  ]   |             meth = getattr(processor, meth_name)\n[tests/basic-tests-macos  ]   |             req = meth(req)\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         sys.audit('urllib.Request', req.full_url, req.data, req.headers, req.get_method())\n[tests/basic-tests-macos  ]   |         response = self._open(req, data)\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         # post-process response\n[tests/basic-tests-macos  ]   |         meth_name = protocol+\"_response\"\n[tests/basic-tests-macos  ]   |         for processor in self.process_response.get(protocol, []):\n[tests/basic-tests-macos  ]   |             meth = getattr(processor, meth_name)\n[tests/basic-tests-macos  ]   | >           response = meth(req, response)\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/urllib/request.py:531: \n[tests/basic-tests-macos  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | self = <urllib.request.HTTPErrorProcessor object at 0x7effb4492640>\n[tests/basic-tests-macos  ]   | request = <urllib.request.Request object at 0x7effb44bfc70>\n[tests/basic-tests-macos  ]   | response = <http.client.HTTPResponse object at 0x7effb44bf730>\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   |     def http_response(self, request, response):\n[tests/basic-tests-macos  ]   |         code, msg, hdrs = response.code, response.msg, response.info()\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         # According to RFC 2616, \"2xx\" code indicates that the client's\n[tests/basic-tests-macos  ]   |         # request was successfully received, understood, and accepted.\n[tests/basic-tests-macos  ]   |         if not (200 <= code < 300):\n[tests/basic-tests-macos  ]   | >           response = self.parent.error(\n[tests/basic-tests-macos  ]   |                 'http', request, response, code, msg, hdrs)\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/urllib/request.py:640: \n[tests/basic-tests-macos  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | self = <urllib.request.OpenerDirector object at 0x7effb4492730>, proto = 403\n[tests/basic-tests-macos  ]   | args = ({'default': [<urllib.request.HTTPDefaultErrorHandler object at 0x7effb4492e80>], 301: [<urllib.request.HTTPRedirectHa...ult', <urllib.request.Request object at 0x7effb44bfc70>, <http.client.HTTPResponse object at 0x7effb44bf730>, 403, ...)\n[tests/basic-tests-macos  ]   | dict = {'default': [<urllib.request.HTTPDefaultErrorHandler object at 0x7effb4492e80>], 301: [<urllib.request.HTTPRedirectHan...PRedirectHandler object at 0x7effb4492760>], 303: [<urllib.request.HTTPRedirectHandler object at 0x7effb4492760>], ...}\n[tests/basic-tests-macos  ]   | meth_name = 'http_error_403', http_err = 1\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   |     def error(self, proto, *args):\n[tests/basic-tests-macos  ]   |         if proto in ('http', 'https'):\n[tests/basic-tests-macos  ]   |             # XXX http[s] protocols are special-cased\n[tests/basic-tests-macos  ]   |             dict = self.handle_error['http'] # https is not different than http\n[tests/basic-tests-macos  ]   |             proto = args[2]  # YUCK!\n[tests/basic-tests-macos  ]   |             meth_name = 'http_error_%s' % proto\n[tests/basic-tests-macos  ]   |             http_err = 1\n[tests/basic-tests-macos  ]   |             orig_args = args\n[tests/basic-tests-macos  ]   |         else:\n[tests/basic-tests-macos  ]   |             dict = self.handle_error\n[tests/basic-tests-macos  ]   |             meth_name = proto + '_error'\n[tests/basic-tests-macos  ]   |             http_err = 0\n[tests/basic-tests-macos  ]   |         args = (dict, proto, meth_name) + args\n[tests/basic-tests-macos  ]   |         result = self._call_chain(*args)\n[tests/basic-tests-macos  ]   |         if result:\n[tests/basic-tests-macos  ]   |             return result\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         if http_err:\n[tests/basic-tests-macos  ]   |             args = (dict, 'default', 'http_error_default') + orig_args\n[tests/basic-tests-macos  ]   | >           return self._call_chain(*args)\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/urllib/request.py:569: \n[tests/basic-tests-macos  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | self = <urllib.request.OpenerDirector object at 0x7effb4492730>\n[tests/basic-tests-macos  ]   | chain = {'default': [<urllib.request.HTTPDefaultErrorHandler object at 0x7effb4492e80>], 301: [<urllib.request.HTTPRedirectHan...PRedirectHandler object at 0x7effb4492760>], 303: [<urllib.request.HTTPRedirectHandler object at 0x7effb4492760>], ...}\n[tests/basic-tests-macos  ]   | kind = 'default', meth_name = 'http_error_default'\n[tests/basic-tests-macos  ]   | args = (<urllib.request.Request object at 0x7effb44bfc70>, <http.client.HTTPResponse object at 0x7effb44bf730>, 403, 'Forbidden', <http.client.HTTPMessage object at 0x7effb44bf580>)\n[tests/basic-tests-macos  ]   | handlers = [<urllib.request.HTTPDefaultErrorHandler object at 0x7effb4492e80>]\n[tests/basic-tests-macos  ]   | handler = <urllib.request.HTTPDefaultErrorHandler object at 0x7effb4492e80>\n[tests/basic-tests-macos  ]   | func = <bound method HTTPDefaultErrorHandler.http_error_default of <urllib.request.HTTPDefaultErrorHandler object at 0x7effb4492e80>>\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   |     def _call_chain(self, chain, kind, meth_name, *args):\n[tests/basic-tests-macos  ]   |         # Handlers raise an exception if no one else should try to handle\n[tests/basic-tests-macos  ]   |         # the request, or return None if they can't but another handler\n[tests/basic-tests-macos  ]   |         # could.  Otherwise, they return the response.\n[tests/basic-tests-macos  ]   |         handlers = chain.get(kind, ())\n[tests/basic-tests-macos  ]   |         for handler in handlers:\n[tests/basic-tests-macos  ]   |             func = getattr(handler, meth_name)\n[tests/basic-tests-macos  ]   | >           result = func(*args)\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/urllib/request.py:502: \n[tests/basic-tests-macos  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | self = <urllib.request.HTTPDefaultErrorHandler object at 0x7effb4492e80>\n[tests/basic-tests-macos  ]   | req = <urllib.request.Request object at 0x7effb44bfc70>\n[tests/basic-tests-macos  ]   | fp = <http.client.HTTPResponse object at 0x7effb44bf730>, code = 403\n[tests/basic-tests-macos  ]   | msg = 'Forbidden', hdrs = <http.client.HTTPMessage object at 0x7effb44bf580>\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   |     def http_error_default(self, req, fp, code, msg, hdrs):\n[tests/basic-tests-macos  ]   | >       raise HTTPError(req.full_url, code, msg, hdrs, fp)\n[tests/basic-tests-macos  ]   | E       urllib.error.HTTPError: HTTP Error 403: Forbidden\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/urllib/request.py:649: HTTPError\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | During handling of the above exception, another exception occurred:\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   |     @pytest.mark.network\n[tests/basic-tests-macos  ]   |     def test_cover():\n[tests/basic-tests-macos  ]   |         \"\"\"Test 'cover' command.\"\"\"\n[tests/basic-tests-macos  ]   | >       assert (len(repr(cover('9780156001311'))) > 50) == True\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | isbnlib/test/test_ext.py:64: \n[tests/basic-tests-macos  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-macos  ]   | isbnlib/_ext.py:88: in cover\n[tests/basic-tests-macos  ]   |     return gcover(isbn) if isbn else {}\n[tests/basic-tests-macos  ]   | isbnlib/dev/_decorators.py:27: in memoized_func\n[tests/basic-tests-macos  ]   |     value = func(*args, **kwargs)\n[tests/basic-tests-macos  ]   | isbnlib/_cover.py:21: in cover\n[tests/basic-tests-macos  ]   |     data = wquery(SERVICE_URL.format(isbn=isbn), user_agent=UA)\n[tests/basic-tests-macos  ]   | isbnlib/dev/webquery.py:65: in query\n[tests/basic-tests-macos  ]   |     wq = WEBQuery(url, user_agent, throttling)\n[tests/basic-tests-macos  ]   | isbnlib/dev/webquery.py:32: in __init__\n[tests/basic-tests-macos  ]   |     self.data = webservice.query(service_url, ua)\n[tests/basic-tests-macos  ]   | isbnlib/dev/_decorators.py:47: in memoized_func\n[tests/basic-tests-macos  ]   |     value = func(*args, **kwargs)\n[tests/basic-tests-macos  ]   | isbnlib/dev/webservice.py:107: in query\n[tests/basic-tests-macos  ]   |     data = service.data()\n[tests/basic-tests-macos  ]   | isbnlib/dev/webservice.py:87: in data\n[tests/basic-tests-macos  ]   |     res = self.response()\n[tests/basic-tests-macos  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | self = <isbnlib.dev.webservice.WEBService object at 0x7effb44bf820>\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   |     def response(self):\n[tests/basic-tests-macos  ]   |         \"\"\"Check errors on response.\"\"\"\n[tests/basic-tests-macos  ]   |         # TODO(http 102)\n[tests/basic-tests-macos  ]   |         # How to handle \"102 http's code\"?\n[tests/basic-tests-macos  ]   |         # - urlopen doesn't catch a 102 code!\n[tests/basic-tests-macos  ]   |         #   https://docs.python.org/3/howto/urllib2.html#error-codes\n[tests/basic-tests-macos  ]   |         try:\n[tests/basic-tests-macos  ]   |             response = urlopen(\n[tests/basic-tests-macos  ]   |                 self._request,\n[tests/basic-tests-macos  ]   |                 timeout=options.get('URLOPEN_TIMEOUT'),\n[tests/basic-tests-macos  ]   |             )\n[tests/basic-tests-macos  ]   |             LOGGER.debug('Request headers:\\n%s', self._request.header_items())\n[tests/basic-tests-macos  ]   |         except HTTPError as e:  # pragma: no cover\n[tests/basic-tests-macos  ]   |             LOGGER.critical(\n[tests/basic-tests-macos  ]   |                 'ISBNLibHTTPError for %s with code %s [%s]',\n[tests/basic-tests-macos  ]   |                 self._url,\n[tests/basic-tests-macos  ]   |                 e.code,\n[tests/basic-tests-macos  ]   |                 e.msg,\n[tests/basic-tests-macos  ]   |             )\n[tests/basic-tests-macos  ]   |             if e.code in (401, 403, 429):\n[tests/basic-tests-macos  ]   | >               raise ISBNLibHTTPError('%s Are you making many requests?' %\n[tests/basic-tests-macos  ]   |                                        e.code)\n[tests/basic-tests-macos  ]   | E               isbnlib.dev._exceptions.ISBNLibHTTPError: an HTTP error has ocurred (403 Are you making many requests?)\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | isbnlib/dev/webservice.py:63: ISBNLibHTTPError\n[tests/basic-tests-macos  ]   | ------------------------------ Captured log call -------------------------------\n[tests/basic-tests-macos  ]   | CRITICAL isbnlib.dev.webservice:webservice.py:56 ISBNLibHTTPError for https://www.googleapis.com/books/v1/volumes?q=isbn:9780156001311&fields=items/volumeInfo(title,subtitle,authors,publisher,publishedDate,language,industryIdentifiers,description,imageLinks)&maxResults=1 with code 403 [Forbidden]\n[tests/basic-tests-macos  ]   | __________________________________ test_goom ___________________________________\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | self = <isbnlib.dev.webservice.WEBService object at 0x7effb43a3940>\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   |     def response(self):\n[tests/basic-tests-macos  ]   |         \"\"\"Check errors on response.\"\"\"\n[tests/basic-tests-macos  ]   |         # TODO(http 102)\n[tests/basic-tests-macos  ]   |         # How to handle \"102 http's code\"?\n[tests/basic-tests-macos  ]   |         # - urlopen doesn't catch a 102 code!\n[tests/basic-tests-macos  ]   |         #   https://docs.python.org/3/howto/urllib2.html#error-codes\n[tests/basic-tests-macos  ]   |         try:\n[tests/basic-tests-macos  ]   | >           response = urlopen(\n[tests/basic-tests-macos  ]   |                 self._request,\n[tests/basic-tests-macos  ]   |                 timeout=options.get('URLOPEN_TIMEOUT'),\n[tests/basic-tests-macos  ]   |             )\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/xlcnd-isbnlib/isbnlib/dev/webservice.py:50: \n[tests/basic-tests-macos  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | url = <urllib.request.Request object at 0x7effb43a3f40>, data = None\n[tests/basic-tests-macos  ]   | timeout = 10\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   |     def urlopen(url, data=None, timeout=socket._GLOBAL_DEFAULT_TIMEOUT,\n[tests/basic-tests-macos  ]   |                 *, cafile=None, capath=None, cadefault=False, context=None):\n[tests/basic-tests-macos  ]   |         '''Open the URL url, which can be either a string or a Request object.\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         *data* must be an object specifying additional data to be sent to\n[tests/basic-tests-macos  ]   |         the server, or None if no such data is needed.  See Request for\n[tests/basic-tests-macos  ]   |         details.\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         urllib.request module uses HTTP/1.1 and includes a \"Connection:close\"\n[tests/basic-tests-macos  ]   |         header in its HTTP requests.\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         The optional *timeout* parameter specifies a timeout in seconds for\n[tests/basic-tests-macos  ]   |         blocking operations like the connection attempt (if not specified, the\n[tests/basic-tests-macos  ]   |         global default timeout setting will be used). This only works for HTTP,\n[tests/basic-tests-macos  ]   |         HTTPS and FTP connections.\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         If *context* is specified, it must be a ssl.SSLContext instance describing\n[tests/basic-tests-macos  ]   |         the various SSL options. See HTTPSConnection for more details.\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         The optional *cafile* and *capath* parameters specify a set of trusted CA\n[tests/basic-tests-macos  ]   |         certificates for HTTPS requests. cafile should point to a single file\n[tests/basic-tests-macos  ]   |         containing a bundle of CA certificates, whereas capath should point to a\n[tests/basic-tests-macos  ]   |         directory of hashed certificate files. More information can be found in\n[tests/basic-tests-macos  ]   |         ssl.SSLContext.load_verify_locations().\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         The *cadefault* parameter is ignored.\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         This function always returns an object which can work as a context\n[tests/basic-tests-macos  ]   |         manager and has methods such as\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         * geturl() - return the URL of the resource retrieved, commonly used to\n[tests/basic-tests-macos  ]   |           determine if a redirect was followed\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         * info() - return the meta-information of the page, such as headers, in the\n[tests/basic-tests-macos  ]   |           form of an email.message_from_string() instance (see Quick Reference to\n[tests/basic-tests-macos  ]   |           HTTP Headers)\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         * getcode() - return the HTTP status code of the response.  Raises URLError\n[tests/basic-tests-macos  ]   |           on errors.\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         For HTTP and HTTPS URLs, this function returns a http.client.HTTPResponse\n[tests/basic-tests-macos  ]   |         object slightly modified. In addition to the three new methods above, the\n[tests/basic-tests-macos  ]   |         msg attribute contains the same information as the reason attribute ---\n[tests/basic-tests-macos  ]   |         the reason phrase returned by the server --- instead of the response\n[tests/basic-tests-macos  ]   |         headers as it is specified in the documentation for HTTPResponse.\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         For FTP, file, and data URLs and requests explicitly handled by legacy\n[tests/basic-tests-macos  ]   |         URLopener and FancyURLopener classes, this function returns a\n[tests/basic-tests-macos  ]   |         urllib.response.addinfourl object.\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         Note that None may be returned if no handler handles the request (though\n[tests/basic-tests-macos  ]   |         the default installed global OpenerDirector uses UnknownHandler to ensure\n[tests/basic-tests-macos  ]   |         this never happens).\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         In addition, if proxy settings are detected (for example, when a *_proxy\n[tests/basic-tests-macos  ]   |         environment variable like http_proxy is set), ProxyHandler is default\n[tests/basic-tests-macos  ]   |         installed and makes sure the requests are handled through the proxy.\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         '''\n[tests/basic-tests-macos  ]   |         global _opener\n[tests/basic-tests-macos  ]   |         if cafile or capath or cadefault:\n[tests/basic-tests-macos  ]   |             import warnings\n[tests/basic-tests-macos  ]   |             warnings.warn(\"cafile, capath and cadefault are deprecated, use a \"\n[tests/basic-tests-macos  ]   |                           \"custom context instead.\", DeprecationWarning, 2)\n[tests/basic-tests-macos  ]   |             if context is not None:\n[tests/basic-tests-macos  ]   |                 raise ValueError(\n[tests/basic-tests-macos  ]   |                     \"You can't pass both context and any of cafile, capath, and \"\n[tests/basic-tests-macos  ]   |                     \"cadefault\"\n[tests/basic-tests-macos  ]   |                 )\n[tests/basic-tests-macos  ]   |             if not _have_ssl:\n[tests/basic-tests-macos  ]   |                 raise ValueError('SSL support not available')\n[tests/basic-tests-macos  ]   |             context = ssl.create_default_context(ssl.Purpose.SERVER_AUTH,\n[tests/basic-tests-macos  ]   |                                                  cafile=cafile,\n[tests/basic-tests-macos  ]   |                                                  capath=capath)\n[tests/basic-tests-macos  ]   |             https_handler = HTTPSHandler(context=context)\n[tests/basic-tests-macos  ]   |             opener = build_opener(https_handler)\n[tests/basic-tests-macos  ]   |         elif context:\n[tests/basic-tests-macos  ]   |             https_handler = HTTPSHandler(context=context)\n[tests/basic-tests-macos  ]   |             opener = build_opener(https_handler)\n[tests/basic-tests-macos  ]   |         elif _opener is None:\n[tests/basic-tests-macos  ]   |             _opener = opener = build_opener()\n[tests/basic-tests-macos  ]   |         else:\n[tests/basic-tests-macos  ]   |             opener = _opener\n[tests/basic-tests-macos  ]   | >       return opener.open(url, data, timeout)\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/urllib/request.py:222: \n[tests/basic-tests-macos  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | self = <urllib.request.OpenerDirector object at 0x7effb4492730>\n[tests/basic-tests-macos  ]   | fullurl = <urllib.request.Request object at 0x7effb43a3f40>, data = None\n[tests/basic-tests-macos  ]   | timeout = 10\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   |     def open(self, fullurl, data=None, timeout=socket._GLOBAL_DEFAULT_TIMEOUT):\n[tests/basic-tests-macos  ]   |         # accept a URL or a Request object\n[tests/basic-tests-macos  ]   |         if isinstance(fullurl, str):\n[tests/basic-tests-macos  ]   |             req = Request(fullurl, data)\n[tests/basic-tests-macos  ]   |         else:\n[tests/basic-tests-macos  ]   |             req = fullurl\n[tests/basic-tests-macos  ]   |             if data is not None:\n[tests/basic-tests-macos  ]   |                 req.data = data\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         req.timeout = timeout\n[tests/basic-tests-macos  ]   |         protocol = req.type\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         # pre-process request\n[tests/basic-tests-macos  ]   |         meth_name = protocol+\"_request\"\n[tests/basic-tests-macos  ]   |         for processor in self.process_request.get(protocol, []):\n[tests/basic-tests-macos  ]   |             meth = getattr(processor, meth_name)\n[tests/basic-tests-macos  ]   |             req = meth(req)\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         sys.audit('urllib.Request', req.full_url, req.data, req.headers, req.get_method())\n[tests/basic-tests-macos  ]   |         response = self._open(req, data)\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         # post-process response\n[tests/basic-tests-macos  ]   |         meth_name = protocol+\"_response\"\n[tests/basic-tests-macos  ]   |         for processor in self.process_response.get(protocol, []):\n[tests/basic-tests-macos  ]   |             meth = getattr(processor, meth_name)\n[tests/basic-tests-macos  ]   | >           response = meth(req, response)\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/urllib/request.py:531: \n[tests/basic-tests-macos  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | self = <urllib.request.HTTPErrorProcessor object at 0x7effb4492640>\n[tests/basic-tests-macos  ]   | request = <urllib.request.Request object at 0x7effb43a3f40>\n[tests/basic-tests-macos  ]   | response = <http.client.HTTPResponse object at 0x7effb43a35e0>\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   |     def http_response(self, request, response):\n[tests/basic-tests-macos  ]   |         code, msg, hdrs = response.code, response.msg, response.info()\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         # According to RFC 2616, \"2xx\" code indicates that the client's\n[tests/basic-tests-macos  ]   |         # request was successfully received, understood, and accepted.\n[tests/basic-tests-macos  ]   |         if not (200 <= code < 300):\n[tests/basic-tests-macos  ]   | >           response = self.parent.error(\n[tests/basic-tests-macos  ]   |                 'http', request, response, code, msg, hdrs)\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/urllib/request.py:640: \n[tests/basic-tests-macos  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | self = <urllib.request.OpenerDirector object at 0x7effb4492730>, proto = 403\n[tests/basic-tests-macos  ]   | args = ({'default': [<urllib.request.HTTPDefaultErrorHandler object at 0x7effb4492e80>], 301: [<urllib.request.HTTPRedirectHa...ult', <urllib.request.Request object at 0x7effb43a3f40>, <http.client.HTTPResponse object at 0x7effb43a35e0>, 403, ...)\n[tests/basic-tests-macos  ]   | dict = {'default': [<urllib.request.HTTPDefaultErrorHandler object at 0x7effb4492e80>], 301: [<urllib.request.HTTPRedirectHan...PRedirectHandler object at 0x7effb4492760>], 303: [<urllib.request.HTTPRedirectHandler object at 0x7effb4492760>], ...}\n[tests/basic-tests-macos  ]   | meth_name = 'http_error_403', http_err = 1\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   |     def error(self, proto, *args):\n[tests/basic-tests-macos  ]   |         if proto in ('http', 'https'):\n[tests/basic-tests-macos  ]   |             # XXX http[s] protocols are special-cased\n[tests/basic-tests-macos  ]   |             dict = self.handle_error['http'] # https is not different than http\n[tests/basic-tests-macos  ]   |             proto = args[2]  # YUCK!\n[tests/basic-tests-macos  ]   |             meth_name = 'http_error_%s' % proto\n[tests/basic-tests-macos  ]   |             http_err = 1\n[tests/basic-tests-macos  ]   |             orig_args = args\n[tests/basic-tests-macos  ]   |         else:\n[tests/basic-tests-macos  ]   |             dict = self.handle_error\n[tests/basic-tests-macos  ]   |             meth_name = proto + '_error'\n[tests/basic-tests-macos  ]   |             http_err = 0\n[tests/basic-tests-macos  ]   |         args = (dict, proto, meth_name) + args\n[tests/basic-tests-macos  ]   |         result = self._call_chain(*args)\n[tests/basic-tests-macos  ]   |         if result:\n[tests/basic-tests-macos  ]   |             return result\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         if http_err:\n[tests/basic-tests-macos  ]   |             args = (dict, 'default', 'http_error_default') + orig_args\n[tests/basic-tests-macos  ]   | >           return self._call_chain(*args)\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/urllib/request.py:569: \n[tests/basic-tests-macos  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | self = <urllib.request.OpenerDirector object at 0x7effb4492730>\n[tests/basic-tests-macos  ]   | chain = {'default': [<urllib.request.HTTPDefaultErrorHandler object at 0x7effb4492e80>], 301: [<urllib.request.HTTPRedirectHan...PRedirectHandler object at 0x7effb4492760>], 303: [<urllib.request.HTTPRedirectHandler object at 0x7effb4492760>], ...}\n[tests/basic-tests-macos  ]   | kind = 'default', meth_name = 'http_error_default'\n[tests/basic-tests-macos  ]   | args = (<urllib.request.Request object at 0x7effb43a3f40>, <http.client.HTTPResponse object at 0x7effb43a35e0>, 403, 'Forbidden', <http.client.HTTPMessage object at 0x7effb43a3d00>)\n[tests/basic-tests-macos  ]   | handlers = [<urllib.request.HTTPDefaultErrorHandler object at 0x7effb4492e80>]\n[tests/basic-tests-macos  ]   | handler = <urllib.request.HTTPDefaultErrorHandler object at 0x7effb4492e80>\n[tests/basic-tests-macos  ]   | func = <bound method HTTPDefaultErrorHandler.http_error_default of <urllib.request.HTTPDefaultErrorHandler object at 0x7effb4492e80>>\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   |     def _call_chain(self, chain, kind, meth_name, *args):\n[tests/basic-tests-macos  ]   |         # Handlers raise an exception if no one else should try to handle\n[tests/basic-tests-macos  ]   |         # the request, or return None if they can't but another handler\n[tests/basic-tests-macos  ]   |         # could.  Otherwise, they return the response.\n[tests/basic-tests-macos  ]   |         handlers = chain.get(kind, ())\n[tests/basic-tests-macos  ]   |         for handler in handlers:\n[tests/basic-tests-macos  ]   |             func = getattr(handler, meth_name)\n[tests/basic-tests-macos  ]   | >           result = func(*args)\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/urllib/request.py:502: \n[tests/basic-tests-macos  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | self = <urllib.request.HTTPDefaultErrorHandler object at 0x7effb4492e80>\n[tests/basic-tests-macos  ]   | req = <urllib.request.Request object at 0x7effb43a3f40>\n[tests/basic-tests-macos  ]   | fp = <http.client.HTTPResponse object at 0x7effb43a35e0>, code = 403\n[tests/basic-tests-macos  ]   | msg = 'Forbidden', hdrs = <http.client.HTTPMessage object at 0x7effb43a3d00>\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   |     def http_error_default(self, req, fp, code, msg, hdrs):\n[tests/basic-tests-macos  ]   | >       raise HTTPError(req.full_url, code, msg, hdrs, fp)\n[tests/basic-tests-macos  ]   | E       urllib.error.HTTPError: HTTP Error 403: Forbidden\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/urllib/request.py:649: HTTPError\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | During handling of the above exception, another exception occurred:\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   |     def test_goom():\n[tests/basic-tests-macos  ]   |         \"\"\"Test the Google's Multiple Books service.\"\"\"\n[tests/basic-tests-macos  ]   | >       assert (len(repr(goom.query('the old man and the sea'))) > 500) == True\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/xlcnd-isbnlib/isbnlib/test/test_goom.py:15: \n[tests/basic-tests-macos  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-macos  ]   | /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/xlcnd-isbnlib/isbnlib/dev/_decorators.py:27: in memoized_func\n[tests/basic-tests-macos  ]   |     value = func(*args, **kwargs)\n[tests/basic-tests-macos  ]   | /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/xlcnd-isbnlib/isbnlib/_goom.py:73: in query\n[tests/basic-tests-macos  ]   |     data = wquery(SERVICE_URL.format(words=words), UA)\n[tests/basic-tests-macos  ]   | /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/xlcnd-isbnlib/isbnlib/dev/webquery.py:65: in query\n[tests/basic-tests-windows]   \u274c  Failure - Main Test with pytest\n[tests/basic-tests-macos  ]   |     wq = WEBQuery(url, user_agent, throttling)\n[tests/basic-tests-macos  ]   | /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/xlcnd-isbnlib/isbnlib/dev/webquery.py:32: in __init__\n[tests/basic-tests-macos  ]   |     self.data = webservice.query(service_url, ua)\n[tests/basic-tests-macos  ]   | /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/xlcnd-isbnlib/isbnlib/dev/_decorators.py:47: in memoized_func\n[tests/basic-tests-macos  ]   |     value = func(*args, **kwargs)\n[tests/basic-tests-macos  ]   | /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/xlcnd-isbnlib/isbnlib/dev/webservice.py:107: in query\n[tests/basic-tests-macos  ]   |     data = service.data()\n[tests/basic-tests-macos  ]   | /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/xlcnd-isbnlib/isbnlib/dev/webservice.py:87: in data\n[tests/basic-tests-macos  ]   |     res = self.response()\n[tests/basic-tests-macos  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | self = <isbnlib.dev.webservice.WEBService object at 0x7effb43a3940>\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   |     def response(self):\n[tests/basic-tests-macos  ]   |         \"\"\"Check errors on response.\"\"\"\n[tests/basic-tests-macos  ]   |         # TODO(http 102)\n[tests/basic-tests-macos  ]   |         # How to handle \"102 http's code\"?\n[tests/basic-tests-macos  ]   |         # - urlopen doesn't catch a 102 code!\n[tests/basic-tests-macos  ]   |         #   https://docs.python.org/3/howto/urllib2.html#error-codes\n[tests/basic-tests-macos  ]   |         try:\n[tests/basic-tests-macos  ]   |             response = urlopen(\n[tests/basic-tests-macos  ]   |                 self._request,\n[tests/basic-tests-macos  ]   |                 timeout=options.get('URLOPEN_TIMEOUT'),\n[tests/basic-tests-macos  ]   |             )\n[tests/basic-tests-macos  ]   |             LOGGER.debug('Request headers:\\n%s', self._request.header_items())\n[tests/basic-tests-macos  ]   |         except HTTPError as e:  # pragma: no cover\n[tests/basic-tests-macos  ]   |             LOGGER.critical(\n[tests/basic-tests-macos  ]   |                 'ISBNLibHTTPError for %s with code %s [%s]',\n[tests/basic-tests-macos  ]   |                 self._url,\n[tests/basic-tests-macos  ]   |                 e.code,\n[tests/basic-tests-macos  ]   |                 e.msg,\n[tests/basic-tests-macos  ]   |             )\n[tests/basic-tests-macos  ]   |             if e.code in (401, 403, 429):\n[tests/basic-tests-macos  ]   | >               raise ISBNLibHTTPError('%s Are you making many requests?' %\n[tests/basic-tests-macos  ]   |                                        e.code)\n[tests/basic-tests-macos  ]   | E               isbnlib.dev._exceptions.ISBNLibHTTPError: an HTTP error has ocurred (403 Are you making many requests?)\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/xlcnd-isbnlib/isbnlib/dev/webservice.py:63: ISBNLibHTTPError\n[tests/basic-tests-macos  ]   | ------------------------------ Captured log call -------------------------------\n[tests/basic-tests-macos  ]   | CRITICAL isbnlib.dev.webservice:webservice.py:56 ISBNLibHTTPError for https://www.googleapis.com/books/v1/volumes?q=the%20old%20man%20and%20the%20sea&fields=items/volumeInfo(title,authors,publisher,publishedDate,language,industryIdentifiers)&maxResults=10 with code 403 [Forbidden]\n[tests/basic-tests-macos  ]   | __________________________________ test_query __________________________________\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | self = <isbnlib.dev.webservice.WEBService object at 0x7effb432b760>\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   |     def response(self):\n[tests/basic-tests-macos  ]   |         \"\"\"Check errors on response.\"\"\"\n[tests/basic-tests-macos  ]   |         # TODO(http 102)\n[tests/basic-tests-macos  ]   |         # How to handle \"102 http's code\"?\n[tests/basic-tests-macos  ]   |         # - urlopen doesn't catch a 102 code!\n[tests/basic-tests-macos  ]   |         #   https://docs.python.org/3/howto/urllib2.html#error-codes\n[tests/basic-tests-macos  ]   |         try:\n[tests/basic-tests-macos  ]   | >           response = urlopen(\n[tests/basic-tests-macos  ]   |                 self._request,\n[tests/basic-tests-macos  ]   |                 timeout=options.get('URLOPEN_TIMEOUT'),\n[tests/basic-tests-macos  ]   |             )\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/xlcnd-isbnlib/isbnlib/dev/webservice.py:50: \n[tests/basic-tests-macos  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | url = <urllib.request.Request object at 0x7effb432bc10>, data = None\n[tests/basic-tests-macos  ]   | timeout = 10\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   |     def urlopen(url, data=None, timeout=socket._GLOBAL_DEFAULT_TIMEOUT,\n[tests/basic-tests-macos  ]   |                 *, cafile=None, capath=None, cadefault=False, context=None):\n[tests/basic-tests-macos  ]   |         '''Open the URL url, which can be either a string or a Request object.\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         *data* must be an object specifying additional data to be sent to\n[tests/basic-tests-macos  ]   |         the server, or None if no such data is needed.  See Request for\n[tests/basic-tests-macos  ]   |         details.\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         urllib.request module uses HTTP/1.1 and includes a \"Connection:close\"\n[tests/basic-tests-macos  ]   |         header in its HTTP requests.\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         The optional *timeout* parameter specifies a timeout in seconds for\n[tests/basic-tests-macos  ]   |         blocking operations like the connection attempt (if not specified, the\n[tests/basic-tests-macos  ]   |         global default timeout setting will be used). This only works for HTTP,\n[tests/basic-tests-macos  ]   |         HTTPS and FTP connections.\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         If *context* is specified, it must be a ssl.SSLContext instance describing\n[tests/basic-tests-macos  ]   |         the various SSL options. See HTTPSConnection for more details.\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         The optional *cafile* and *capath* parameters specify a set of trusted CA\n[tests/basic-tests-macos  ]   |         certificates for HTTPS requests. cafile should point to a single file\n[tests/basic-tests-macos  ]   |         containing a bundle of CA certificates, whereas capath should point to a\n[tests/basic-tests-macos  ]   |         directory of hashed certificate files. More information can be found in\n[tests/basic-tests-macos  ]   |         ssl.SSLContext.load_verify_locations().\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         The *cadefault* parameter is ignored.\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         This function always returns an object which can work as a context\n[tests/basic-tests-macos  ]   |         manager and has methods such as\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         * geturl() - return the URL of the resource retrieved, commonly used to\n[tests/basic-tests-macos  ]   |           determine if a redirect was followed\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         * info() - return the meta-information of the page, such as headers, in the\n[tests/basic-tests-macos  ]   |           form of an email.message_from_string() instance (see Quick Reference to\n[tests/basic-tests-macos  ]   |           HTTP Headers)\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         * getcode() - return the HTTP status code of the response.  Raises URLError\n[tests/basic-tests-macos  ]   |           on errors.\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         For HTTP and HTTPS URLs, this function returns a http.client.HTTPResponse\n[tests/basic-tests-macos  ]   |         object slightly modified. In addition to the three new methods above, the\n[tests/basic-tests-macos  ]   |         msg attribute contains the same information as the reason attribute ---\n[tests/basic-tests-macos  ]   |         the reason phrase returned by the server --- instead of the response\n[tests/basic-tests-macos  ]   |         headers as it is specified in the documentation for HTTPResponse.\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         For FTP, file, and data URLs and requests explicitly handled by legacy\n[tests/basic-tests-macos  ]   |         URLopener and FancyURLopener classes, this function returns a\n[tests/basic-tests-macos  ]   |         urllib.response.addinfourl object.\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         Note that None may be returned if no handler handles the request (though\n[tests/basic-tests-macos  ]   |         the default installed global OpenerDirector uses UnknownHandler to ensure\n[tests/basic-tests-macos  ]   |         this never happens).\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         In addition, if proxy settings are detected (for example, when a *_proxy\n[tests/basic-tests-macos  ]   |         environment variable like http_proxy is set), ProxyHandler is default\n[tests/basic-tests-macos  ]   |         installed and makes sure the requests are handled through the proxy.\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         '''\n[tests/basic-tests-macos  ]   |         global _opener\n[tests/basic-tests-macos  ]   |         if cafile or capath or cadefault:\n[tests/basic-tests-macos  ]   |             import warnings\n[tests/basic-tests-macos  ]   |             warnings.warn(\"cafile, capath and cadefault are deprecated, use a \"\n[tests/basic-tests-macos  ]   |                           \"custom context instead.\", DeprecationWarning, 2)\n[tests/basic-tests-macos  ]   |             if context is not None:\n[tests/basic-tests-macos  ]   |                 raise ValueError(\n[tests/basic-tests-macos  ]   |                     \"You can't pass both context and any of cafile, capath, and \"\n[tests/basic-tests-macos  ]   |                     \"cadefault\"\n[tests/basic-tests-macos  ]   |                 )\n[tests/basic-tests-macos  ]   |             if not _have_ssl:\n[tests/basic-tests-macos  ]   |                 raise ValueError('SSL support not available')\n[tests/basic-tests-macos  ]   |             context = ssl.create_default_context(ssl.Purpose.SERVER_AUTH,\n[tests/basic-tests-macos  ]   |                                                  cafile=cafile,\n[tests/basic-tests-macos  ]   |                                                  capath=capath)\n[tests/basic-tests-macos  ]   |             https_handler = HTTPSHandler(context=context)\n[tests/basic-tests-macos  ]   |             opener = build_opener(https_handler)\n[tests/basic-tests-macos  ]   |         elif context:\n[tests/basic-tests-macos  ]   |             https_handler = HTTPSHandler(context=context)\n[tests/basic-tests-macos  ]   |             opener = build_opener(https_handler)\n[tests/basic-tests-macos  ]   |         elif _opener is None:\n[tests/basic-tests-macos  ]   |             _opener = opener = build_opener()\n[tests/basic-tests-macos  ]   |         else:\n[tests/basic-tests-macos  ]   |             opener = _opener\n[tests/basic-tests-macos  ]   | >       return opener.open(url, data, timeout)\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/urllib/request.py:222: \n[tests/basic-tests-macos  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | self = <urllib.request.OpenerDirector object at 0x7effb4492730>\n[tests/basic-tests-macos  ]   | fullurl = <urllib.request.Request object at 0x7effb432bc10>, data = None\n[tests/basic-tests-macos  ]   | timeout = 10\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   |     def open(self, fullurl, data=None, timeout=socket._GLOBAL_DEFAULT_TIMEOUT):\n[tests/basic-tests-macos  ]   |         # accept a URL or a Request object\n[tests/basic-tests-macos  ]   |         if isinstance(fullurl, str):\n[tests/basic-tests-macos  ]   |             req = Request(fullurl, data)\n[tests/basic-tests-macos  ]   |         else:\n[tests/basic-tests-macos  ]   |             req = fullurl\n[tests/basic-tests-macos  ]   |             if data is not None:\n[tests/basic-tests-macos  ]   |                 req.data = data\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         req.timeout = timeout\n[tests/basic-tests-macos  ]   |         protocol = req.type\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         # pre-process request\n[tests/basic-tests-macos  ]   |         meth_name = protocol+\"_request\"\n[tests/basic-tests-macos  ]   |         for processor in self.process_request.get(protocol, []):\n[tests/basic-tests-macos  ]   |             meth = getattr(processor, meth_name)\n[tests/basic-tests-macos  ]   |             req = meth(req)\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         sys.audit('urllib.Request', req.full_url, req.data, req.headers, req.get_method())\n[tests/basic-tests-macos  ]   |         response = self._open(req, data)\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         # post-process response\n[tests/basic-tests-macos  ]   |         meth_name = protocol+\"_response\"\n[tests/basic-tests-macos  ]   |         for processor in self.process_response.get(protocol, []):\n[tests/basic-tests-macos  ]   |             meth = getattr(processor, meth_name)\n[tests/basic-tests-macos  ]   | >           response = meth(req, response)\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/urllib/request.py:531: \n[tests/basic-tests-macos  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | self = <urllib.request.HTTPErrorProcessor object at 0x7effb4492640>\n[tests/basic-tests-macos  ]   | request = <urllib.request.Request object at 0x7effb432bc10>\n[tests/basic-tests-macos  ]   | response = <http.client.HTTPResponse object at 0x7effb432bb50>\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   |     def http_response(self, request, response):\n[tests/basic-tests-macos  ]   |         code, msg, hdrs = response.code, response.msg, response.info()\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         # According to RFC 2616, \"2xx\" code indicates that the client's\n[tests/basic-tests-macos  ]   |         # request was successfully received, understood, and accepted.\n[tests/basic-tests-macos  ]   |         if not (200 <= code < 300):\n[tests/basic-tests-macos  ]   | >           response = self.parent.error(\n[tests/basic-tests-macos  ]   |                 'http', request, response, code, msg, hdrs)\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/urllib/request.py:640: \n[tests/basic-tests-macos  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | self = <urllib.request.OpenerDirector object at 0x7effb4492730>, proto = 403\n[tests/basic-tests-macos  ]   | args = ({'default': [<urllib.request.HTTPDefaultErrorHandler object at 0x7effb4492e80>], 301: [<urllib.request.HTTPRedirectHa...ult', <urllib.request.Request object at 0x7effb432bc10>, <http.client.HTTPResponse object at 0x7effb432bb50>, 403, ...)\n[tests/basic-tests-macos  ]   | dict = {'default': [<urllib.request.HTTPDefaultErrorHandler object at 0x7effb4492e80>], 301: [<urllib.request.HTTPRedirectHan...PRedirectHandler object at 0x7effb4492760>], 303: [<urllib.request.HTTPRedirectHandler object at 0x7effb4492760>], ...}\n[tests/basic-tests-macos  ]   | meth_name = 'http_error_403', http_err = 1\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   |     def error(self, proto, *args):\n[tests/basic-tests-macos  ]   |         if proto in ('http', 'https'):\n[tests/basic-tests-macos  ]   |             # XXX http[s] protocols are special-cased\n[tests/basic-tests-macos  ]   |             dict = self.handle_error['http'] # https is not different than http\n[tests/basic-tests-macos  ]   |             proto = args[2]  # YUCK!\n[tests/basic-tests-macos  ]   |             meth_name = 'http_error_%s' % proto\n[tests/basic-tests-macos  ]   |             http_err = 1\n[tests/basic-tests-macos  ]   |             orig_args = args\n[tests/basic-tests-macos  ]   |         else:\n[tests/basic-tests-macos  ]   |             dict = self.handle_error\n[tests/basic-tests-macos  ]   |             meth_name = proto + '_error'\n[tests/basic-tests-macos  ]   |             http_err = 0\n[tests/basic-tests-macos  ]   |         args = (dict, proto, meth_name) + args\n[tests/basic-tests-macos  ]   |         result = self._call_chain(*args)\n[tests/basic-tests-macos  ]   |         if result:\n[tests/basic-tests-macos  ]   |             return result\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         if http_err:\n[tests/basic-tests-macos  ]   |             args = (dict, 'default', 'http_error_default') + orig_args\n[tests/basic-tests-macos  ]   | >           return self._call_chain(*args)\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/urllib/request.py:569: \n[tests/basic-tests-macos  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | self = <urllib.request.OpenerDirector object at 0x7effb4492730>\n[tests/basic-tests-macos  ]   | chain = {'default': [<urllib.request.HTTPDefaultErrorHandler object at 0x7effb4492e80>], 301: [<urllib.request.HTTPRedirectHan...PRedirectHandler object at 0x7effb4492760>], 303: [<urllib.request.HTTPRedirectHandler object at 0x7effb4492760>], ...}\n[tests/basic-tests-macos  ]   | kind = 'default', meth_name = 'http_error_default'\n[tests/basic-tests-macos  ]   | args = (<urllib.request.Request object at 0x7effb432bc10>, <http.client.HTTPResponse object at 0x7effb432bb50>, 403, 'Forbidden', <http.client.HTTPMessage object at 0x7effb432bd90>)\n[tests/basic-tests-macos  ]   | handlers = [<urllib.request.HTTPDefaultErrorHandler object at 0x7effb4492e80>]\n[tests/basic-tests-macos  ]   | handler = <urllib.request.HTTPDefaultErrorHandler object at 0x7effb4492e80>\n[tests/basic-tests-macos  ]   | func = <bound method HTTPDefaultErrorHandler.http_error_default of <urllib.request.HTTPDefaultErrorHandler object at 0x7effb4492e80>>\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   |     def _call_chain(self, chain, kind, meth_name, *args):\n[tests/basic-tests-macos  ]   |         # Handlers raise an exception if no one else should try to handle\n[tests/basic-tests-macos  ]   |         # the request, or return None if they can't but another handler\n[tests/basic-tests-macos  ]   |         # could.  Otherwise, they return the response.\n[tests/basic-tests-macos  ]   |         handlers = chain.get(kind, ())\n[tests/basic-tests-macos  ]   |         for handler in handlers:\n[tests/basic-tests-macos  ]   |             func = getattr(handler, meth_name)\n[tests/basic-tests-macos  ]   | >           result = func(*args)\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/urllib/request.py:502: \n[tests/basic-tests-macos  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | self = <urllib.request.HTTPDefaultErrorHandler object at 0x7effb4492e80>\n[tests/basic-tests-macos  ]   | req = <urllib.request.Request object at 0x7effb432bc10>\n[tests/basic-tests-macos  ]   | fp = <http.client.HTTPResponse object at 0x7effb432bb50>, code = 403\n[tests/basic-tests-macos  ]   | msg = 'Forbidden', hdrs = <http.client.HTTPMessage object at 0x7effb432bd90>\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   |     def http_error_default(self, req, fp, code, msg, hdrs):\n[tests/basic-tests-macos  ]   | >       raise HTTPError(req.full_url, code, msg, hdrs, fp)\n[tests/basic-tests-macos  ]   | E       urllib.error.HTTPError: HTTP Error 403: Forbidden\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/urllib/request.py:649: HTTPError\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | During handling of the above exception, another exception occurred:\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   |     def test_query():\n[tests/basic-tests-macos  ]   |         \"\"\"Test the query of metadata with 'low level' queries.\"\"\"\n[tests/basic-tests-macos  ]   |         # test query from metadata\n[tests/basic-tests-macos  ]   |         with pytest.raises(Exception):\n[tests/basic-tests-macos  ]   |             query('9781849692341', 'goob')\n[tests/basic-tests-macos  ]   |         with pytest.raises(Exception):\n[tests/basic-tests-macos  ]   |             query('9781849692343', 'goob')\n[tests/basic-tests-macos  ]   |         # assert_equals(query('9789934015960', 'goob'), {})\n[tests/basic-tests-macos  ]   | >       assert (len(repr(query('9780321534965'))) > 100) == True\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/xlcnd-isbnlib/isbnlib/test/test_metadata.py:23: \n[tests/basic-tests-macos  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-macos  ]   | /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/xlcnd-isbnlib/isbnlib/dev/_decorators.py:27: in memoized_func\n[tests/basic-tests-macos  ]   |     value = func(*args, **kwargs)\n[tests/basic-tests-macos  ]   | /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/xlcnd-isbnlib/isbnlib/_metadata.py:33: in query\n[tests/basic-tests-macos  ]   |     meta = services[service](isbn)\n[tests/basic-tests-macos  ]   | /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/xlcnd-isbnlib/isbnlib/_goob.py:70: in query\n[tests/basic-tests-macos  ]   |     data = wquery(SERVICE_URL.format(isbn='isbn:' + isbn), user_agent=UA)\n[tests/basic-tests-macos  ]   | /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/xlcnd-isbnlib/isbnlib/dev/webquery.py:65: in query\n[tests/basic-tests-macos  ]   |     wq = WEBQuery(url, user_agent, throttling)\n[tests/basic-tests-macos  ]   | /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/xlcnd-isbnlib/isbnlib/dev/webquery.py:32: in __init__\n[tests/basic-tests-macos  ]   |     self.data = webservice.query(service_url, ua)\n[tests/basic-tests-macos  ]   | /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/xlcnd-isbnlib/isbnlib/dev/_decorators.py:47: in memoized_func\n[tests/basic-tests-macos  ]   |     value = func(*args, **kwargs)\n[tests/basic-tests-macos  ]   | /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/xlcnd-isbnlib/isbnlib/dev/webservice.py:107: in query\n[tests/basic-tests-macos  ]   |     data = service.data()\n[tests/basic-tests-macos  ]   | /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/xlcnd-isbnlib/isbnlib/dev/webservice.py:87: in data\n[tests/basic-tests-macos  ]   |     res = self.response()\n[tests/basic-tests-macos  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | self = <isbnlib.dev.webservice.WEBService object at 0x7effb432b760>\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   |     def response(self):\n[tests/basic-tests-macos  ]   |         \"\"\"Check errors on response.\"\"\"\n[tests/basic-tests-macos  ]   |         # TODO(http 102)\n[tests/basic-tests-macos  ]   |         # How to handle \"102 http's code\"?\n[tests/basic-tests-macos  ]   |         # - urlopen doesn't catch a 102 code!\n[tests/basic-tests-macos  ]   |         #   https://docs.python.org/3/howto/urllib2.html#error-codes\n[tests/basic-tests-macos  ]   |         try:\n[tests/basic-tests-macos  ]   |             response = urlopen(\n[tests/basic-tests-macos  ]   |                 self._request,\n[tests/basic-tests-macos  ]   |                 timeout=options.get('URLOPEN_TIMEOUT'),\n[tests/basic-tests-macos  ]   |             )\n[tests/basic-tests-macos  ]   |             LOGGER.debug('Request headers:\\n%s', self._request.header_items())\n[tests/basic-tests-macos  ]   |         except HTTPError as e:  # pragma: no cover\n[tests/basic-tests-macos  ]   |             LOGGER.critical(\n[tests/basic-tests-macos  ]   |                 'ISBNLibHTTPError for %s with code %s [%s]',\n[tests/basic-tests-macos  ]   |                 self._url,\n[tests/basic-tests-macos  ]   |                 e.code,\n[tests/basic-tests-macos  ]   |                 e.msg,\n[tests/basic-tests-macos  ]   |             )\n[tests/basic-tests-macos  ]   |             if e.code in (401, 403, 429):\n[tests/basic-tests-macos  ]   | >               raise ISBNLibHTTPError('%s Are you making many requests?' %\n[tests/basic-tests-macos  ]   |                                        e.code)\n[tests/basic-tests-macos  ]   | E               isbnlib.dev._exceptions.ISBNLibHTTPError: an HTTP error has ocurred (403 Are you making many requests?)\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/xlcnd-isbnlib/isbnlib/dev/webservice.py:63: ISBNLibHTTPError\n[tests/basic-tests-macos  ]   | ------------------------------ Captured log call -------------------------------\n[tests/basic-tests-macos  ]   | CRITICAL isbnlib._metadata:_metadata.py:25 9781849692341 is not a valid ISBN\n[tests/basic-tests-macos  ]   | CRITICAL isbnlib._metadata:_metadata.py:25 9781849692343 is not a valid ISBN\n[tests/basic-tests-macos  ]   | CRITICAL isbnlib.dev.webservice:webservice.py:56 ISBNLibHTTPError for https://www.googleapis.com/books/v1/volumes?q=isbn:9780321534965&fields=items/volumeInfo(title,subtitle,authors,publisher,publishedDate,language,industryIdentifiers,description,imageLinks)&maxResults=1 with code 403 [Forbidden]\n[tests/basic-tests-macos  ]   | ________________________________ test_ext_meta _________________________________\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | self = <isbnlib.dev.webservice.WEBService object at 0x7effb43a3340>\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   |     def response(self):\n[tests/basic-tests-macos  ]   |         \"\"\"Check errors on response.\"\"\"\n[tests/basic-tests-macos  ]   |         # TODO(http 102)\n[tests/basic-tests-macos  ]   |         # How to handle \"102 http's code\"?\n[tests/basic-tests-macos  ]   |         # - urlopen doesn't catch a 102 code!\n[tests/basic-tests-macos  ]   |         #   https://docs.python.org/3/howto/urllib2.html#error-codes\n[tests/basic-tests-macos  ]   |         try:\n[tests/basic-tests-macos  ]   | >           response = urlopen(\n[tests/basic-tests-macos  ]   |                 self._request,\n[tests/basic-tests-macos  ]   |                 timeout=options.get('URLOPEN_TIMEOUT'),\n[tests/basic-tests-macos  ]   |             )\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/xlcnd-isbnlib/isbnlib/dev/webservice.py:50: \n[tests/basic-tests-macos  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | url = <urllib.request.Request object at 0x7effb43a3370>, data = None\n[tests/basic-tests-macos  ]   | timeout = 10\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   |     def urlopen(url, data=None, timeout=socket._GLOBAL_DEFAULT_TIMEOUT,\n[tests/basic-tests-macos  ]   |                 *, cafile=None, capath=None, cadefault=False, context=None):\n[tests/basic-tests-macos  ]   |         '''Open the URL url, which can be either a string or a Request object.\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         *data* must be an object specifying additional data to be sent to\n[tests/basic-tests-macos  ]   |         the server, or None if no such data is needed.  See Request for\n[tests/basic-tests-macos  ]   |         details.\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         urllib.request module uses HTTP/1.1 and includes a \"Connection:close\"\n[tests/basic-tests-macos  ]   |         header in its HTTP requests.\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         The optional *timeout* parameter specifies a timeout in seconds for\n[tests/basic-tests-macos  ]   |         blocking operations like the connection attempt (if not specified, the\n[tests/basic-tests-macos  ]   |         global default timeout setting will be used). This only works for HTTP,\n[tests/basic-tests-macos  ]   |         HTTPS and FTP connections.\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         If *context* is specified, it must be a ssl.SSLContext instance describing\n[tests/basic-tests-macos  ]   |         the various SSL options. See HTTPSConnection for more details.\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         The optional *cafile* and *capath* parameters specify a set of trusted CA\n[tests/basic-tests-macos  ]   |         certificates for HTTPS requests. cafile should point to a single file\n[tests/basic-tests-macos  ]   |         containing a bundle of CA certificates, whereas capath should point to a\n[tests/basic-tests-macos  ]   |         directory of hashed certificate files. More information can be found in\n[tests/basic-tests-macos  ]   |         ssl.SSLContext.load_verify_locations().\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         The *cadefault* parameter is ignored.\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         This function always returns an object which can work as a context\n[tests/basic-tests-macos  ]   |         manager and has methods such as\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         * geturl() - return the URL of the resource retrieved, commonly used to\n[tests/basic-tests-macos  ]   |           determine if a redirect was followed\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         * info() - return the meta-information of the page, such as headers, in the\n[tests/basic-tests-macos  ]   |           form of an email.message_from_string() instance (see Quick Reference to\n[tests/basic-tests-macos  ]   |           HTTP Headers)\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         * getcode() - return the HTTP status code of the response.  Raises URLError\n[tests/basic-tests-macos  ]   |           on errors.\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         For HTTP and HTTPS URLs, this function returns a http.client.HTTPResponse\n[tests/basic-tests-macos  ]   |         object slightly modified. In addition to the three new methods above, the\n[tests/basic-tests-macos  ]   |         msg attribute contains the same information as the reason attribute ---\n[tests/basic-tests-macos  ]   |         the reason phrase returned by the server --- instead of the response\n[tests/basic-tests-macos  ]   |         headers as it is specified in the documentation for HTTPResponse.\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         For FTP, file, and data URLs and requests explicitly handled by legacy\n[tests/basic-tests-macos  ]   |         URLopener and FancyURLopener classes, this function returns a\n[tests/basic-tests-macos  ]   |         urllib.response.addinfourl object.\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         Note that None may be returned if no handler handles the request (though\n[tests/basic-tests-macos  ]   |         the default installed global OpenerDirector uses UnknownHandler to ensure\n[tests/basic-tests-macos  ]   |         this never happens).\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         In addition, if proxy settings are detected (for example, when a *_proxy\n[tests/basic-tests-macos  ]   |         environment variable like http_proxy is set), ProxyHandler is default\n[tests/basic-tests-macos  ]   |         installed and makes sure the requests are handled through the proxy.\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         '''\n[tests/basic-tests-macos  ]   |         global _opener\n[tests/basic-tests-macos  ]   |         if cafile or capath or cadefault:\n[tests/basic-tests-macos  ]   |             import warnings\n[tests/basic-tests-macos  ]   |             warnings.warn(\"cafile, capath and cadefault are deprecated, use a \"\n[tests/basic-tests-macos  ]   |                           \"custom context instead.\", DeprecationWarning, 2)\n[tests/basic-tests-macos  ]   |             if context is not None:\n[tests/basic-tests-macos  ]   |                 raise ValueError(\n[tests/basic-tests-macos  ]   |                     \"You can't pass both context and any of cafile, capath, and \"\n[tests/basic-tests-macos  ]   |                     \"cadefault\"\n[tests/basic-tests-macos  ]   |                 )\n[tests/basic-tests-macos  ]   |             if not _have_ssl:\n[tests/basic-tests-macos  ]   |                 raise ValueError('SSL support not available')\n[tests/basic-tests-macos  ]   |             context = ssl.create_default_context(ssl.Purpose.SERVER_AUTH,\n[tests/basic-tests-macos  ]   |                                                  cafile=cafile,\n[tests/basic-tests-macos  ]   |                                                  capath=capath)\n[tests/basic-tests-macos  ]   |             https_handler = HTTPSHandler(context=context)\n[tests/basic-tests-macos  ]   |             opener = build_opener(https_handler)\n[tests/basic-tests-macos  ]   |         elif context:\n[tests/basic-tests-macos  ]   |             https_handler = HTTPSHandler(context=context)\n[tests/basic-tests-macos  ]   |             opener = build_opener(https_handler)\n[tests/basic-tests-macos  ]   |         elif _opener is None:\n[tests/basic-tests-macos  ]   |             _opener = opener = build_opener()\n[tests/basic-tests-macos  ]   |         else:\n[tests/basic-tests-macos  ]   |             opener = _opener\n[tests/basic-tests-macos  ]   | >       return opener.open(url, data, timeout)\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/urllib/request.py:222: \n[tests/basic-tests-macos  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | self = <urllib.request.OpenerDirector object at 0x7effb4492730>\n[tests/basic-tests-macos  ]   | fullurl = <urllib.request.Request object at 0x7effb43a3370>, data = None\n[tests/basic-tests-macos  ]   | timeout = 10\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   |     def open(self, fullurl, data=None, timeout=socket._GLOBAL_DEFAULT_TIMEOUT):\n[tests/basic-tests-macos  ]   |         # accept a URL or a Request object\n[tests/basic-tests-macos  ]   |         if isinstance(fullurl, str):\n[tests/basic-tests-macos  ]   |             req = Request(fullurl, data)\n[tests/basic-tests-macos  ]   |         else:\n[tests/basic-tests-macos  ]   |             req = fullurl\n[tests/basic-tests-macos  ]   |             if data is not None:\n[tests/basic-tests-macos  ]   |                 req.data = data\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         req.timeout = timeout\n[tests/basic-tests-macos  ]   |         protocol = req.type\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         # pre-process request\n[tests/basic-tests-macos  ]   |         meth_name = protocol+\"_request\"\n[tests/basic-tests-macos  ]   |         for processor in self.process_request.get(protocol, []):\n[tests/basic-tests-macos  ]   |             meth = getattr(processor, meth_name)\n[tests/basic-tests-macos  ]   |             req = meth(req)\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         sys.audit('urllib.Request', req.full_url, req.data, req.headers, req.get_method())\n[tests/basic-tests-macos  ]   |         response = self._open(req, data)\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         # post-process response\n[tests/basic-tests-macos  ]   |         meth_name = protocol+\"_response\"\n[tests/basic-tests-macos  ]   |         for processor in self.process_response.get(protocol, []):\n[tests/basic-tests-macos  ]   |             meth = getattr(processor, meth_name)\n[tests/basic-tests-macos  ]   | >           response = meth(req, response)\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/urllib/request.py:531: \n[tests/basic-tests-macos  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | self = <urllib.request.HTTPErrorProcessor object at 0x7effb4492640>\n[tests/basic-tests-macos  ]   | request = <urllib.request.Request object at 0x7effb43a3370>\n[tests/basic-tests-macos  ]   | response = <http.client.HTTPResponse object at 0x7effb43a3a00>\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   |     def http_response(self, request, response):\n[tests/basic-tests-macos  ]   |         code, msg, hdrs = response.code, response.msg, response.info()\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         # According to RFC 2616, \"2xx\" code indicates that the client's\n[tests/basic-tests-macos  ]   |         # request was successfully received, understood, and accepted.\n[tests/basic-tests-macos  ]   |         if not (200 <= code < 300):\n[tests/basic-tests-macos  ]   | >           response = self.parent.error(\n[tests/basic-tests-macos  ]   |                 'http', request, response, code, msg, hdrs)\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/urllib/request.py:640: \n[tests/basic-tests-macos  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | self = <urllib.request.OpenerDirector object at 0x7effb4492730>, proto = 403\n[tests/basic-tests-macos  ]   | args = ({'default': [<urllib.request.HTTPDefaultErrorHandler object at 0x7effb4492e80>], 301: [<urllib.request.HTTPRedirectHa...ult', <urllib.request.Request object at 0x7effb43a3370>, <http.client.HTTPResponse object at 0x7effb43a3a00>, 403, ...)\n[tests/basic-tests-macos  ]   | dict = {'default': [<urllib.request.HTTPDefaultErrorHandler object at 0x7effb4492e80>], 301: [<urllib.request.HTTPRedirectHan...PRedirectHandler object at 0x7effb4492760>], 303: [<urllib.request.HTTPRedirectHandler object at 0x7effb4492760>], ...}\n[tests/basic-tests-macos  ]   | meth_name = 'http_error_403', http_err = 1\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   |     def error(self, proto, *args):\n[tests/basic-tests-macos  ]   |         if proto in ('http', 'https'):\n[tests/basic-tests-macos  ]   |             # XXX http[s] protocols are special-cased\n[tests/basic-tests-macos  ]   |             dict = self.handle_error['http'] # https is not different than http\n[tests/basic-tests-macos  ]   |             proto = args[2]  # YUCK!\n[tests/basic-tests-macos  ]   |             meth_name = 'http_error_%s' % proto\n[tests/basic-tests-macos  ]   |             http_err = 1\n[tests/basic-tests-macos  ]   |             orig_args = args\n[tests/basic-tests-macos  ]   |         else:\n[tests/basic-tests-macos  ]   |             dict = self.handle_error\n[tests/basic-tests-macos  ]   |             meth_name = proto + '_error'\n[tests/basic-tests-macos  ]   |             http_err = 0\n[tests/basic-tests-macos  ]   |         args = (dict, proto, meth_name) + args\n[tests/basic-tests-macos  ]   |         result = self._call_chain(*args)\n[tests/basic-tests-macos  ]   |         if result:\n[tests/basic-tests-macos  ]   |             return result\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         if http_err:\n[tests/basic-tests-macos  ]   |             args = (dict, 'default', 'http_error_default') + orig_args\n[tests/basic-tests-macos  ]   | >           return self._call_chain(*args)\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/urllib/request.py:569: \n[tests/basic-tests-macos  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | self = <urllib.request.OpenerDirector object at 0x7effb4492730>\n[tests/basic-tests-macos  ]   | chain = {'default': [<urllib.request.HTTPDefaultErrorHandler object at 0x7effb4492e80>], 301: [<urllib.request.HTTPRedirectHan...PRedirectHandler object at 0x7effb4492760>], 303: [<urllib.request.HTTPRedirectHandler object at 0x7effb4492760>], ...}\n[tests/basic-tests-macos  ]   | kind = 'default', meth_name = 'http_error_default'\n[tests/basic-tests-macos  ]   | args = (<urllib.request.Request object at 0x7effb43a3370>, <http.client.HTTPResponse object at 0x7effb43a3a00>, 403, 'Forbidden', <http.client.HTTPMessage object at 0x7effb43a37c0>)\n[tests/basic-tests-macos  ]   | handlers = [<urllib.request.HTTPDefaultErrorHandler object at 0x7effb4492e80>]\n[tests/basic-tests-macos  ]   | handler = <urllib.request.HTTPDefaultErrorHandler object at 0x7effb4492e80>\n[tests/basic-tests-macos  ]   | func = <bound method HTTPDefaultErrorHandler.http_error_default of <urllib.request.HTTPDefaultErrorHandler object at 0x7effb4492e80>>\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   |     def _call_chain(self, chain, kind, meth_name, *args):\n[tests/basic-tests-macos  ]   |         # Handlers raise an exception if no one else should try to handle\n[tests/basic-tests-macos  ]   |         # the request, or return None if they can't but another handler\n[tests/basic-tests-macos  ]   |         # could.  Otherwise, they return the response.\n[tests/basic-tests-macos  ]   |         handlers = chain.get(kind, ())\n[tests/basic-tests-macos  ]   |         for handler in handlers:\n[tests/basic-tests-macos  ]   |             func = getattr(handler, meth_name)\n[tests/basic-tests-macos  ]   | >           result = func(*args)\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/urllib/request.py:502: \n[tests/basic-tests-macos  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | self = <urllib.request.HTTPDefaultErrorHandler object at 0x7effb4492e80>\n[tests/basic-tests-macos  ]   | req = <urllib.request.Request object at 0x7effb43a3370>\n[tests/basic-tests-macos  ]   | fp = <http.client.HTTPResponse object at 0x7effb43a3a00>, code = 403\n[tests/basic-tests-macos  ]   | msg = 'Forbidden', hdrs = <http.client.HTTPMessage object at 0x7effb43a37c0>\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   |     def http_error_default(self, req, fp, code, msg, hdrs):\n[tests/basic-tests-macos  ]   | >       raise HTTPError(req.full_url, code, msg, hdrs, fp)\n[tests/basic-tests-macos  ]   | E       urllib.error.HTTPError: HTTP Error 403: Forbidden\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/urllib/request.py:649: HTTPError\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | During handling of the above exception, another exception occurred:\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   |     def test_ext_meta():\n[tests/basic-tests-macos  ]   |         \"\"\"Test the query of metadata with 'high level' meta function.\"\"\"\n[tests/basic-tests-macos  ]   |         # test meta from core\n[tests/basic-tests-macos  ]   | >       assert (len(repr(meta('9780321534965', 'goob'))) > 100) == True\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/xlcnd-isbnlib/isbnlib/test/test_metadata.py:36: \n[tests/basic-tests-macos  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-macos  ]   | /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/xlcnd-isbnlib/isbnlib/_ext.py:24: in meta\n[tests/basic-tests-macos  ]   |     return query(isbn, service) if isbn else {}\n[tests/basic-tests-macos  ]   | /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/xlcnd-isbnlib/isbnlib/dev/_decorators.py:27: in memoized_func\n[tests/basic-tests-macos  ]   |     value = func(*args, **kwargs)\n[tests/basic-tests-macos  ]   | /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/xlcnd-isbnlib/isbnlib/_metadata.py:33: in query\n[tests/basic-tests-macos  ]   |     meta = services[service](isbn)\n[tests/basic-tests-macos  ]   | /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/xlcnd-isbnlib/isbnlib/_goob.py:70: in query\n[tests/basic-tests-macos  ]   |     data = wquery(SERVICE_URL.format(isbn='isbn:' + isbn), user_agent=UA)\n[tests/basic-tests-macos  ]   | /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/xlcnd-isbnlib/isbnlib/dev/webquery.py:65: in query\n[tests/basic-tests-macos  ]   |     wq = WEBQuery(url, user_agent, throttling)\n[tests/basic-tests-macos  ]   | /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/xlcnd-isbnlib/isbnlib/dev/webquery.py:32: in __init__\n[tests/basic-tests-macos  ]   |     self.data = webservice.query(service_url, ua)\n[tests/basic-tests-macos  ]   | /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/xlcnd-isbnlib/isbnlib/dev/_decorators.py:47: in memoized_func\n[tests/basic-tests-macos  ]   |     value = func(*args, **kwargs)\n[tests/basic-tests-macos  ]   | /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/xlcnd-isbnlib/isbnlib/dev/webservice.py:107: in query\n[tests/basic-tests-macos  ]   |     data = service.data()\n[tests/basic-tests-macos  ]   | /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/xlcnd-isbnlib/isbnlib/dev/webservice.py:87: in data\n[tests/basic-tests-macos  ]   |     res = self.response()\n[tests/basic-tests-macos  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | self = <isbnlib.dev.webservice.WEBService object at 0x7effb43a3340>\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   |     def response(self):\n[tests/basic-tests-macos  ]   |         \"\"\"Check errors on response.\"\"\"\n[tests/basic-tests-macos  ]   |         # TODO(http 102)\n[tests/basic-tests-macos  ]   |         # How to handle \"102 http's code\"?\n[tests/basic-tests-macos  ]   |         # - urlopen doesn't catch a 102 code!\n[tests/basic-tests-macos  ]   |         #   https://docs.python.org/3/howto/urllib2.html#error-codes\n[tests/basic-tests-macos  ]   |         try:\n[tests/basic-tests-macos  ]   |             response = urlopen(\n[tests/basic-tests-macos  ]   |                 self._request,\n[tests/basic-tests-macos  ]   |                 timeout=options.get('URLOPEN_TIMEOUT'),\n[tests/basic-tests-macos  ]   |             )\n[tests/basic-tests-macos  ]   |             LOGGER.debug('Request headers:\\n%s', self._request.header_items())\n[tests/basic-tests-macos  ]   |         except HTTPError as e:  # pragma: no cover\n[tests/basic-tests-macos  ]   |             LOGGER.critical(\n[tests/basic-tests-macos  ]   |                 'ISBNLibHTTPError for %s with code %s [%s]',\n[tests/basic-tests-macos  ]   |                 self._url,\n[tests/basic-tests-macos  ]   |                 e.code,\n[tests/basic-tests-macos  ]   |                 e.msg,\n[tests/basic-tests-macos  ]   |             )\n[tests/basic-tests-macos  ]   |             if e.code in (401, 403, 429):\n[tests/basic-tests-macos  ]   | >               raise ISBNLibHTTPError('%s Are you making many requests?' %\n[tests/basic-tests-macos  ]   |                                        e.code)\n[tests/basic-tests-macos  ]   | E               isbnlib.dev._exceptions.ISBNLibHTTPError: an HTTP error has ocurred (403 Are you making many requests?)\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/xlcnd-isbnlib/isbnlib/dev/webservice.py:63: ISBNLibHTTPError\n[tests/basic-tests-macos  ]   | ------------------------------ Captured log call -------------------------------\n[tests/basic-tests-macos  ]   | CRITICAL isbnlib.dev.webservice:webservice.py:56 ISBNLibHTTPError for https://www.googleapis.com/books/v1/volumes?q=isbn:9780321534965&fields=items/volumeInfo(title,subtitle,authors,publisher,publishedDate,language,industryIdentifiers,description,imageLinks)&maxResults=1 with code 403 [Forbidden]\n[tests/basic-tests-macos  ]   | ___________________________________ test_ren ___________________________________\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | self = <isbnlib.dev.webservice.WEBService object at 0x7effb4516730>\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   |     def response(self):\n[tests/basic-tests-macos  ]   |         \"\"\"Check errors on response.\"\"\"\n[tests/basic-tests-macos  ]   |         # TODO(http 102)\n[tests/basic-tests-macos  ]   |         # How to handle \"102 http's code\"?\n[tests/basic-tests-macos  ]   |         # - urlopen doesn't catch a 102 code!\n[tests/basic-tests-macos  ]   |         #   https://docs.python.org/3/howto/urllib2.html#error-codes\n[tests/basic-tests-macos  ]   |         try:\n[tests/basic-tests-macos  ]   | >           response = urlopen(\n[tests/basic-tests-macos  ]   |                 self._request,\n[tests/basic-tests-macos  ]   |                 timeout=options.get('URLOPEN_TIMEOUT'),\n[tests/basic-tests-macos  ]   |             )\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/xlcnd-isbnlib/isbnlib/dev/webservice.py:50: \n[tests/basic-tests-macos  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | url = <urllib.request.Request object at 0x7effb4516a90>, data = None\n[tests/basic-tests-macos  ]   | timeout = 10\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   |     def urlopen(url, data=None, timeout=socket._GLOBAL_DEFAULT_TIMEOUT,\n[tests/basic-tests-macos  ]   |                 *, cafile=None, capath=None, cadefault=False, context=None):\n[tests/basic-tests-macos  ]   |         '''Open the URL url, which can be either a string or a Request object.\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         *data* must be an object specifying additional data to be sent to\n[tests/basic-tests-macos  ]   |         the server, or None if no such data is needed.  See Request for\n[tests/basic-tests-macos  ]   |         details.\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         urllib.request module uses HTTP/1.1 and includes a \"Connection:close\"\n[tests/basic-tests-macos  ]   |         header in its HTTP requests.\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         The optional *timeout* parameter specifies a timeout in seconds for\n[tests/basic-tests-macos  ]   |         blocking operations like the connection attempt (if not specified, the\n[tests/basic-tests-macos  ]   |         global default timeout setting will be used). This only works for HTTP,\n[tests/basic-tests-macos  ]   |         HTTPS and FTP connections.\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         If *context* is specified, it must be a ssl.SSLContext instance describing\n[tests/basic-tests-macos  ]   |         the various SSL options. See HTTPSConnection for more details.\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         The optional *cafile* and *capath* parameters specify a set of trusted CA\n[tests/basic-tests-macos  ]   |         certificates for HTTPS requests. cafile should point to a single file\n[tests/basic-tests-macos  ]   |         containing a bundle of CA certificates, whereas capath should point to a\n[tests/basic-tests-macos  ]   |         directory of hashed certificate files. More information can be found in\n[tests/basic-tests-macos  ]   |         ssl.SSLContext.load_verify_locations().\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         The *cadefault* parameter is ignored.\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         This function always returns an object which can work as a context\n[tests/basic-tests-macos  ]   |         manager and has methods such as\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         * geturl() - return the URL of the resource retrieved, commonly used to\n[tests/basic-tests-macos  ]   |           determine if a redirect was followed\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         * info() - return the meta-information of the page, such as headers, in the\n[tests/basic-tests-macos  ]   |           form of an email.message_from_string() instance (see Quick Reference to\n[tests/basic-tests-macos  ]   |           HTTP Headers)\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         * getcode() - return the HTTP status code of the response.  Raises URLError\n[tests/basic-tests-macos  ]   |           on errors.\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         For HTTP and HTTPS URLs, this function returns a http.client.HTTPResponse\n[tests/basic-tests-macos  ]   |         object slightly modified. In addition to the three new methods above, the\n[tests/basic-tests-macos  ]   |         msg attribute contains the same information as the reason attribute ---\n[tests/basic-tests-macos  ]   |         the reason phrase returned by the server --- instead of the response\n[tests/basic-tests-macos  ]   |         headers as it is specified in the documentation for HTTPResponse.\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         For FTP, file, and data URLs and requests explicitly handled by legacy\n[tests/basic-tests-macos  ]   |         URLopener and FancyURLopener classes, this function returns a\n[tests/basic-tests-macos  ]   |         urllib.response.addinfourl object.\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         Note that None may be returned if no handler handles the request (though\n[tests/basic-tests-macos  ]   |         the default installed global OpenerDirector uses UnknownHandler to ensure\n[tests/basic-tests-macos  ]   |         this never happens).\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         In addition, if proxy settings are detected (for example, when a *_proxy\n[tests/basic-tests-macos  ]   |         environment variable like http_proxy is set), ProxyHandler is default\n[tests/basic-tests-macos  ]   |         installed and makes sure the requests are handled through the proxy.\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         '''\n[tests/basic-tests-macos  ]   |         global _opener\n[tests/basic-tests-macos  ]   |         if cafile or capath or cadefault:\n[tests/basic-tests-macos  ]   |             import warnings\n[tests/basic-tests-macos  ]   |             warnings.warn(\"cafile, capath and cadefault are deprecated, use a \"\n[tests/basic-tests-macos  ]   |                           \"custom context instead.\", DeprecationWarning, 2)\n[tests/basic-tests-macos  ]   |             if context is not None:\n[tests/basic-tests-macos  ]   |                 raise ValueError(\n[tests/basic-tests-macos  ]   |                     \"You can't pass both context and any of cafile, capath, and \"\n[tests/basic-tests-macos  ]   |                     \"cadefault\"\n[tests/basic-tests-macos  ]   |                 )\n[tests/basic-tests-macos  ]   |             if not _have_ssl:\n[tests/basic-tests-macos  ]   |                 raise ValueError('SSL support not available')\n[tests/basic-tests-macos  ]   |             context = ssl.create_default_context(ssl.Purpose.SERVER_AUTH,\n[tests/basic-tests-macos  ]   |                                                  cafile=cafile,\n[tests/basic-tests-macos  ]   |                                                  capath=capath)\n[tests/basic-tests-macos  ]   |             https_handler = HTTPSHandler(context=context)\n[tests/basic-tests-macos  ]   |             opener = build_opener(https_handler)\n[tests/basic-tests-macos  ]   |         elif context:\n[tests/basic-tests-macos  ]   |             https_handler = HTTPSHandler(context=context)\n[tests/basic-tests-macos  ]   |             opener = build_opener(https_handler)\n[tests/basic-tests-macos  ]   |         elif _opener is None:\n[tests/basic-tests-macos  ]   |             _opener = opener = build_opener()\n[tests/basic-tests-macos  ]   |         else:\n[tests/basic-tests-macos  ]   |             opener = _opener\n[tests/basic-tests-macos  ]   | >       return opener.open(url, data, timeout)\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/urllib/request.py:222: \n[tests/basic-tests-macos  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | self = <urllib.request.OpenerDirector object at 0x7effb4492730>\n[tests/basic-tests-macos  ]   | fullurl = <urllib.request.Request object at 0x7effb4516a90>, data = None\n[tests/basic-tests-macos  ]   | timeout = 10\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   |     def open(self, fullurl, data=None, timeout=socket._GLOBAL_DEFAULT_TIMEOUT):\n[tests/basic-tests-macos  ]   |         # accept a URL or a Request object\n[tests/basic-tests-macos  ]   |         if isinstance(fullurl, str):\n[tests/basic-tests-macos  ]   |             req = Request(fullurl, data)\n[tests/basic-tests-macos  ]   |         else:\n[tests/basic-tests-macos  ]   |             req = fullurl\n[tests/basic-tests-macos  ]   |             if data is not None:\n[tests/basic-tests-macos  ]   |                 req.data = data\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         req.timeout = timeout\n[tests/basic-tests-macos  ]   |         protocol = req.type\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         # pre-process request\n[tests/basic-tests-macos  ]   |         meth_name = protocol+\"_request\"\n[tests/basic-tests-macos  ]   |         for processor in self.process_request.get(protocol, []):\n[tests/basic-tests-macos  ]   |             meth = getattr(processor, meth_name)\n[tests/basic-tests-macos  ]   |             req = meth(req)\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         sys.audit('urllib.Request', req.full_url, req.data, req.headers, req.get_method())\n[tests/basic-tests-macos  ]   |         response = self._open(req, data)\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         # post-process response\n[tests/basic-tests-macos  ]   |         meth_name = protocol+\"_response\"\n[tests/basic-tests-macos  ]   |         for processor in self.process_response.get(protocol, []):\n[tests/basic-tests-macos  ]   |             meth = getattr(processor, meth_name)\n[tests/basic-tests-macos  ]   | >           response = meth(req, response)\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/urllib/request.py:531: \n[tests/basic-tests-macos  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | self = <urllib.request.HTTPErrorProcessor object at 0x7effb4492640>\n[tests/basic-tests-macos  ]   | request = <urllib.request.Request object at 0x7effb4516a90>\n[tests/basic-tests-macos  ]   | response = <http.client.HTTPResponse object at 0x7effb4516b80>\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   |     def http_response(self, request, response):\n[tests/basic-tests-macos  ]   |         code, msg, hdrs = response.code, response.msg, response.info()\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         # According to RFC 2616, \"2xx\" code indicates that the client's\n[tests/basic-tests-macos  ]   |         # request was successfully received, understood, and accepted.\n[tests/basic-tests-macos  ]   |         if not (200 <= code < 300):\n[tests/basic-tests-macos  ]   | >           response = self.parent.error(\n[tests/basic-tests-macos  ]   |                 'http', request, response, code, msg, hdrs)\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/urllib/request.py:640: \n[tests/basic-tests-macos  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | self = <urllib.request.OpenerDirector object at 0x7effb4492730>, proto = 403\n[tests/basic-tests-macos  ]   | args = ({'default': [<urllib.request.HTTPDefaultErrorHandler object at 0x7effb4492e80>], 301: [<urllib.request.HTTPRedirectHa...ult', <urllib.request.Request object at 0x7effb4516a90>, <http.client.HTTPResponse object at 0x7effb4516b80>, 403, ...)\n[tests/basic-tests-macos  ]   | dict = {'default': [<urllib.request.HTTPDefaultErrorHandler object at 0x7effb4492e80>], 301: [<urllib.request.HTTPRedirectHan...PRedirectHandler object at 0x7effb4492760>], 303: [<urllib.request.HTTPRedirectHandler object at 0x7effb4492760>], ...}\n[tests/basic-tests-macos  ]   | meth_name = 'http_error_403', http_err = 1\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   |     def error(self, proto, *args):\n[tests/basic-tests-macos  ]   |         if proto in ('http', 'https'):\n[tests/basic-tests-macos  ]   |             # XXX http[s] protocols are special-cased\n[tests/basic-tests-macos  ]   |             dict = self.handle_error['http'] # https is not different than http\n[tests/basic-tests-macos  ]   |             proto = args[2]  # YUCK!\n[tests/basic-tests-macos  ]   |             meth_name = 'http_error_%s' % proto\n[tests/basic-tests-macos  ]   |             http_err = 1\n[tests/basic-tests-macos  ]   |             orig_args = args\n[tests/basic-tests-macos  ]   |         else:\n[tests/basic-tests-macos  ]   |             dict = self.handle_error\n[tests/basic-tests-macos  ]   |             meth_name = proto + '_error'\n[tests/basic-tests-macos  ]   |             http_err = 0\n[tests/basic-tests-macos  ]   |         args = (dict, proto, meth_name) + args\n[tests/basic-tests-macos  ]   |         result = self._call_chain(*args)\n[tests/basic-tests-macos  ]   |         if result:\n[tests/basic-tests-macos  ]   |             return result\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         if http_err:\n[tests/basic-tests-macos  ]   |             args = (dict, 'default', 'http_error_default') + orig_args\n[tests/basic-tests-macos  ]   | >           return self._call_chain(*args)\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/urllib/request.py:569: \n[tests/basic-tests-macos  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | self = <urllib.request.OpenerDirector object at 0x7effb4492730>\n[tests/basic-tests-macos  ]   | chain = {'default': [<urllib.request.HTTPDefaultErrorHandler object at 0x7effb4492e80>], 301: [<urllib.request.HTTPRedirectHan...PRedirectHandler object at 0x7effb4492760>], 303: [<urllib.request.HTTPRedirectHandler object at 0x7effb4492760>], ...}\n[tests/basic-tests-macos  ]   | kind = 'default', meth_name = 'http_error_default'\n[tests/basic-tests-macos  ]   | args = (<urllib.request.Request object at 0x7effb4516a90>, <http.client.HTTPResponse object at 0x7effb4516b80>, 403, 'Forbidden', <http.client.HTTPMessage object at 0x7effb4516820>)\n[tests/basic-tests-macos  ]   | handlers = [<urllib.request.HTTPDefaultErrorHandler object at 0x7effb4492e80>]\n[tests/basic-tests-macos  ]   | handler = <urllib.request.HTTPDefaultErrorHandler object at 0x7effb4492e80>\n[tests/basic-tests-macos  ]   | func = <bound method HTTPDefaultErrorHandler.http_error_default of <urllib.request.HTTPDefaultErrorHandler object at 0x7effb4492e80>>\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   |     def _call_chain(self, chain, kind, meth_name, *args):\n[tests/basic-tests-macos  ]   |         # Handlers raise an exception if no one else should try to handle\n[tests/basic-tests-macos  ]   |         # the request, or return None if they can't but another handler\n[tests/basic-tests-macos  ]   |         # could.  Otherwise, they return the response.\n[tests/basic-tests-macos  ]   |         handlers = chain.get(kind, ())\n[tests/basic-tests-macos  ]   |         for handler in handlers:\n[tests/basic-tests-macos  ]   |             func = getattr(handler, meth_name)\n[tests/basic-tests-macos  ]   | >           result = func(*args)\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/urllib/request.py:502: \n[tests/basic-tests-macos  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | self = <urllib.request.HTTPDefaultErrorHandler object at 0x7effb4492e80>\n[tests/basic-tests-macos  ]   | req = <urllib.request.Request object at 0x7effb4516a90>\n[tests/basic-tests-macos  ]   | fp = <http.client.HTTPResponse object at 0x7effb4516b80>, code = 403\n[tests/basic-tests-macos  ]   | msg = 'Forbidden', hdrs = <http.client.HTTPMessage object at 0x7effb4516820>\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   |     def http_error_default(self, req, fp, code, msg, hdrs):\n[tests/basic-tests-macos  ]   | >       raise HTTPError(req.full_url, code, msg, hdrs, fp)\n[tests/basic-tests-macos  ]   | E       urllib.error.HTTPError: HTTP Error 403: Forbidden\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/urllib/request.py:649: HTTPError\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | During handling of the above exception, another exception occurred:\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   |     def test_ren():\n[tests/basic-tests-macos  ]   |         \"\"\"Test 'high level' ren function.\"\"\"\n[tests/basic-tests-macos  ]   | >       ren(F1)\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/xlcnd-isbnlib/isbnlib/test/test_rename.py:86: \n[tests/basic-tests-macos  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-macos  ]   | /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/xlcnd-isbnlib/isbnlib/_ext.py:61: in ren\n[tests/basic-tests-macos  ]   |     data = meta(isbn)\n[tests/basic-tests-macos  ]   | /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/xlcnd-isbnlib/isbnlib/_ext.py:24: in meta\n[tests/basic-tests-macos  ]   |     return query(isbn, service) if isbn else {}\n[tests/basic-tests-macos  ]   | /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/xlcnd-isbnlib/isbnlib/dev/_decorators.py:27: in memoized_func\n[tests/basic-tests-macos  ]   |     value = func(*args, **kwargs)\n[tests/basic-tests-macos  ]   | /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/xlcnd-isbnlib/isbnlib/_metadata.py:33: in query\n[tests/basic-tests-macos  ]   |     meta = services[service](isbn)\n[tests/basic-tests-macos  ]   | /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/xlcnd-isbnlib/isbnlib/_goob.py:70: in query\n[tests/basic-tests-macos  ]   |     data = wquery(SERVICE_URL.format(isbn='isbn:' + isbn), user_agent=UA)\n[tests/basic-tests-macos  ]   | /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/xlcnd-isbnlib/isbnlib/dev/webquery.py:65: in query\n[tests/basic-tests-macos  ]   |     wq = WEBQuery(url, user_agent, throttling)\n[tests/basic-tests-macos  ]   | /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/xlcnd-isbnlib/isbnlib/dev/webquery.py:32: in __init__\n[tests/basic-tests-macos  ]   |     self.data = webservice.query(service_url, ua)\n[tests/basic-tests-macos  ]   | /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/xlcnd-isbnlib/isbnlib/dev/_decorators.py:47: in memoized_func\n[tests/basic-tests-macos  ]   |     value = func(*args, **kwargs)\n[tests/basic-tests-macos  ]   | /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/xlcnd-isbnlib/isbnlib/dev/webservice.py:107: in query\n[tests/basic-tests-macos  ]   |     data = service.data()\n[tests/basic-tests-macos  ]   | /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/xlcnd-isbnlib/isbnlib/dev/webservice.py:87: in data\n[tests/basic-tests-macos  ]   |     res = self.response()\n[tests/basic-tests-macos  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | self = <isbnlib.dev.webservice.WEBService object at 0x7effb4516730>\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   |     def response(self):\n[tests/basic-tests-macos  ]   |         \"\"\"Check errors on response.\"\"\"\n[tests/basic-tests-macos  ]   |         # TODO(http 102)\n[tests/basic-tests-macos  ]   |         # How to handle \"102 http's code\"?\n[tests/basic-tests-macos  ]   |         # - urlopen doesn't catch a 102 code!\n[tests/basic-tests-macos  ]   |         #   https://docs.python.org/3/howto/urllib2.html#error-codes\n[tests/basic-tests-macos  ]   |         try:\n[tests/basic-tests-macos  ]   |             response = urlopen(\n[tests/basic-tests-macos  ]   |                 self._request,\n[tests/basic-tests-macos  ]   |                 timeout=options.get('URLOPEN_TIMEOUT'),\n[tests/basic-tests-macos  ]   |             )\n[tests/basic-tests-macos  ]   |             LOGGER.debug('Request headers:\\n%s', self._request.header_items())\n[tests/basic-tests-macos  ]   |         except HTTPError as e:  # pragma: no cover\n[tests/basic-tests-macos  ]   |             LOGGER.critical(\n[tests/basic-tests-macos  ]   |                 'ISBNLibHTTPError for %s with code %s [%s]',\n[tests/basic-tests-macos  ]   |                 self._url,\n[tests/basic-tests-macos  ]   |                 e.code,\n[tests/basic-tests-macos  ]   |                 e.msg,\n[tests/basic-tests-macos  ]   |             )\n[tests/basic-tests-macos  ]   |             if e.code in (401, 403, 429):\n[tests/basic-tests-macos  ]   | >               raise ISBNLibHTTPError('%s Are you making many requests?' %\n[tests/basic-tests-macos  ]   |                                        e.code)\n[tests/basic-tests-macos  ]   | E               isbnlib.dev._exceptions.ISBNLibHTTPError: an HTTP error has ocurred (403 Are you making many requests?)\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/xlcnd-isbnlib/isbnlib/dev/webservice.py:63: ISBNLibHTTPError\n[tests/basic-tests-macos  ]   | ------------------------------ Captured log call -------------------------------\n[tests/basic-tests-macos  ]   | CRITICAL isbnlib.dev.webservice:webservice.py:56 ISBNLibHTTPError for https://www.googleapis.com/books/v1/volumes?q=isbn:9780198520115&fields=items/volumeInfo(title,subtitle,authors,publisher,publishedDate,language,industryIdentifiers,description,imageLinks)&maxResults=1 with code 403 [Forbidden]\n[tests/basic-tests-macos  ]   | =========================== short test summary info ============================\n[tests/basic-tests-macos  ]   | FAILED isbnlib/test/test_ext.py::test_desc - isbnlib.dev._exceptions.ISBNLibHTTPError: an HTTP error has ocurred (403 Are you making many requests?)\n[tests/basic-tests-macos  ]   | FAILED isbnlib/test/test_ext.py::test_cover - isbnlib.dev._exceptions.ISBNLibHTTPError: an HTTP error has ocurred (403 Are you making many requests?)\n[tests/basic-tests-macos  ]   | FAILED isbnlib/test/test_goom.py::test_goom - isbnlib.dev._exceptions.ISBNLibHTTPError: an HTTP error has ocurred (403 Are you making many requests?)\n[tests/basic-tests-macos  ]   | FAILED isbnlib/test/test_metadata.py::test_query - isbnlib.dev._exceptions.ISBNLibHTTPError: an HTTP error has ocurred (403 Are you making many requests?)\n[tests/basic-tests-macos  ]   | FAILED isbnlib/test/test_metadata.py::test_ext_meta - isbnlib.dev._exceptions.ISBNLibHTTPError: an HTTP error has ocurred (403 Are you making many requests?)\n[tests/basic-tests-macos  ]   | FAILED isbnlib/test/test_rename.py::test_ren - isbnlib.dev._exceptions.ISBNLibHTTPError: an HTTP error has ocurred (403 Are you making many requests?)\n[tests/basic-tests-macos  ]   | ERROR isbnlib/test/test_cache_decorator.py::test_cache_meta - isbnlib.dev._exceptions.ISBNLibHTTPError: an HTTP error has ocurred (403 Are you making many requests?)\n[tests/basic-tests-macos  ]   | ==================== 6 failed, 57 passed, 1 error in 23.36s ====================\n[tests/basic-tests-macos  ]   \u274c  Failure - Main Test with pytest\n[tests/basic-tests-windows] exitcode '1': failure\n[tests/basic-tests-macos  ] exitcode '1': failure\n[tests/basic-tests-linux  ]   | Requirement already satisfied: wheel in /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages (0.40.0)\n[tests/basic-tests-linux  ]   | Collecting pytest\n[tests/basic-tests-linux  ]   |   Downloading pytest-7.3.1-py3-none-any.whl (320 kB)\n[tests/basic-tests-linux  ]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 320.5/320.5 kB 6.9 MB/s eta 0:00:00\n[tests/basic-tests-linux  ]   | Collecting coverage\n[tests/basic-tests-linux  ]   |   Downloading coverage-7.2.6-cp39-cp39-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl (228 kB)\n[tests/basic-tests-linux  ]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 228.2/228.2 kB 3.4 MB/s eta 0:00:00\n[tests/basic-tests-linux  ]   | Collecting pytest-cov\n[tests/basic-tests-linux  ]   |   Downloading pytest_cov-4.1.0-py3-none-any.whl (21 kB)\n[tests/basic-tests-linux  ]   | Collecting iniconfig (from pytest)\n[tests/basic-tests-linux  ]   |   Downloading iniconfig-2.0.0-py3-none-any.whl (5.9 kB)\n[tests/basic-tests-linux  ]   | Collecting packaging (from pytest)\n[tests/basic-tests-linux  ]   |   Downloading packaging-23.1-py3-none-any.whl (48 kB)\n[tests/basic-tests-linux  ]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 48.9/48.9 kB 1.5 MB/s eta 0:00:00\n[tests/basic-tests-linux  ]   | Collecting pluggy<2.0,>=0.12 (from pytest)\n[tests/basic-tests-linux  ]   |   Downloading pluggy-1.0.0-py2.py3-none-any.whl (13 kB)\n[tests/basic-tests-linux  ]   | Collecting exceptiongroup>=1.0.0rc8 (from pytest)\n[tests/basic-tests-linux  ]   |   Downloading exceptiongroup-1.1.1-py3-none-any.whl (14 kB)\n[tests/basic-tests-linux  ]   | Collecting tomli>=1.0.0 (from pytest)\n[tests/basic-tests-linux  ]   |   Downloading tomli-2.0.1-py3-none-any.whl (12 kB)\n[tests/basic-tests-linux  ]   | Installing collected packages: tomli, pluggy, packaging, iniconfig, exceptiongroup, coverage, pytest, pytest-cov\n[tests/basic-tests-linux  ]   | Successfully installed coverage-7.2.6 exceptiongroup-1.1.1 iniconfig-2.0.0 packaging-23.1 pluggy-1.0.0 pytest-7.3.1 pytest-cov-4.1.0 tomli-2.0.1\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | [notice] A new release of pip is available: 21.1.3 -> 23.1.2\n[tests/basic-tests-linux  ]   | [notice] To update, run: pip install --upgrade pip\n[tests/basic-tests-linux  ]   | ============================= test session starts ==============================\n[tests/basic-tests-linux  ]   | platform linux -- Python 3.9.6, pytest-7.3.1, pluggy-1.0.0\n[tests/basic-tests-linux  ]   | rootdir: /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/xlcnd-isbnlib\n[tests/basic-tests-linux  ]   | configfile: setup.cfg\n[tests/basic-tests-linux  ]   | plugins: cov-4.1.0\n[tests/basic-tests-linux  ]   | collected 64 items\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | isbnlib/test/test_cache.py ....                                          [  6%]\n[tests/basic-tests-linux  ]   | isbnlib/test/test_cache_decorator.py E                                   [  7%]\n[tests/basic-tests-linux  ]   | isbnlib/test/test_core.py ..............                                 [ 29%]\n[tests/basic-tests-linux  ]   | isbnlib/test/test_data.py ...                                            [ 34%]\n[tests/basic-tests-linux  ]   | isbnlib/test/test_exceptions.py .                                        [ 35%]\n[tests/basic-tests-linux  ]   | isbnlib/test/test_ext.py ...FF                                           [ 43%]\n[tests/basic-tests-linux  ]   | isbnlib/test/test_files.py ......                                        [ 53%]\n[tests/basic-tests-linux  ]   | isbnlib/test/test_fmt.py .                                               [ 54%]\n[tests/basic-tests-linux  ]   | isbnlib/test/test_goom.py F                                              [ 56%]\n[tests/basic-tests-linux  ]   | isbnlib/test/test_helpers.py ....                                        [ 62%]\n[tests/basic-tests-linux  ]   | isbnlib/test/test_info.py ..                                             [ 65%]\n[tests/basic-tests-linux  ]   | isbnlib/test/test_isbn.py .........                                      [ 79%]\n[tests/basic-tests-linux  ]   | isbnlib/test/test_metadata.py FF                                         [ 82%]\n[tests/basic-tests-linux  ]   | isbnlib/test/test_openl.py .                                             [ 84%]\n[tests/basic-tests-linux  ]   | isbnlib/test/test_registry.py ..                                         [ 87%]\n[tests/basic-tests-linux  ]   | isbnlib/test/test_rename.py F                                            [ 89%]\n[tests/basic-tests-linux  ]   | isbnlib/test/test_speed.py ..                                            [ 92%]\n[tests/basic-tests-linux  ]   | isbnlib/test/test_vias.py ...                                            [ 96%]\n[tests/basic-tests-linux  ]   | isbnlib/test/test_webservice.py .                                        [ 98%]\n[tests/basic-tests-linux  ]   | isbnlib/test/test_words.py .                                             [100%]\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | ==================================== ERRORS ====================================\n[tests/basic-tests-linux  ]   | ______________________ ERROR at setup of test_cache_meta _______________________\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | self = <isbnlib.dev.webservice.WEBService object at 0x7f50c4ae56d0>\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   |     def response(self):\n[tests/basic-tests-linux  ]   |         \"\"\"Check errors on response.\"\"\"\n[tests/basic-tests-linux  ]   |         # TODO(http 102)\n[tests/basic-tests-linux  ]   |         # How to handle \"102 http's code\"?\n[tests/basic-tests-linux  ]   |         # - urlopen doesn't catch a 102 code!\n[tests/basic-tests-linux  ]   |         #   https://docs.python.org/3/howto/urllib2.html#error-codes\n[tests/basic-tests-linux  ]   |         try:\n[tests/basic-tests-linux  ]   | >           response = urlopen(\n[tests/basic-tests-linux  ]   |                 self._request,\n[tests/basic-tests-linux  ]   |                 timeout=options.get('URLOPEN_TIMEOUT'),\n[tests/basic-tests-linux  ]   |             )\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | isbnlib/dev/webservice.py:50: \n[tests/basic-tests-linux  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | url = <urllib.request.Request object at 0x7f50c4ae5ac0>, data = None\n[tests/basic-tests-linux  ]   | timeout = 10\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   |     def urlopen(url, data=None, timeout=socket._GLOBAL_DEFAULT_TIMEOUT,\n[tests/basic-tests-linux  ]   |                 *, cafile=None, capath=None, cadefault=False, context=None):\n[tests/basic-tests-linux  ]   |         '''Open the URL url, which can be either a string or a Request object.\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         *data* must be an object specifying additional data to be sent to\n[tests/basic-tests-linux  ]   |         the server, or None if no such data is needed.  See Request for\n[tests/basic-tests-linux  ]   |         details.\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         urllib.request module uses HTTP/1.1 and includes a \"Connection:close\"\n[tests/basic-tests-linux  ]   |         header in its HTTP requests.\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         The optional *timeout* parameter specifies a timeout in seconds for\n[tests/basic-tests-linux  ]   |         blocking operations like the connection attempt (if not specified, the\n[tests/basic-tests-linux  ]   |         global default timeout setting will be used). This only works for HTTP,\n[tests/basic-tests-linux  ]   |         HTTPS and FTP connections.\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         If *context* is specified, it must be a ssl.SSLContext instance describing\n[tests/basic-tests-linux  ]   |         the various SSL options. See HTTPSConnection for more details.\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         The optional *cafile* and *capath* parameters specify a set of trusted CA\n[tests/basic-tests-linux  ]   |         certificates for HTTPS requests. cafile should point to a single file\n[tests/basic-tests-linux  ]   |         containing a bundle of CA certificates, whereas capath should point to a\n[tests/basic-tests-linux  ]   |         directory of hashed certificate files. More information can be found in\n[tests/basic-tests-linux  ]   |         ssl.SSLContext.load_verify_locations().\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         The *cadefault* parameter is ignored.\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         This function always returns an object which can work as a\n[tests/basic-tests-linux  ]   |         context manager and has the properties url, headers, and status.\n[tests/basic-tests-linux  ]   |         See urllib.response.addinfourl for more detail on these properties.\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         For HTTP and HTTPS URLs, this function returns a http.client.HTTPResponse\n[tests/basic-tests-linux  ]   |         object slightly modified. In addition to the three new methods above, the\n[tests/basic-tests-linux  ]   |         msg attribute contains the same information as the reason attribute ---\n[tests/basic-tests-linux  ]   |         the reason phrase returned by the server --- instead of the response\n[tests/basic-tests-linux  ]   |         headers as it is specified in the documentation for HTTPResponse.\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         For FTP, file, and data URLs and requests explicitly handled by legacy\n[tests/basic-tests-linux  ]   |         URLopener and FancyURLopener classes, this function returns a\n[tests/basic-tests-linux  ]   |         urllib.response.addinfourl object.\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         Note that None may be returned if no handler handles the request (though\n[tests/basic-tests-linux  ]   |         the default installed global OpenerDirector uses UnknownHandler to ensure\n[tests/basic-tests-linux  ]   |         this never happens).\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         In addition, if proxy settings are detected (for example, when a *_proxy\n[tests/basic-tests-linux  ]   |         environment variable like http_proxy is set), ProxyHandler is default\n[tests/basic-tests-linux  ]   |         installed and makes sure the requests are handled through the proxy.\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         '''\n[tests/basic-tests-linux  ]   |         global _opener\n[tests/basic-tests-linux  ]   |         if cafile or capath or cadefault:\n[tests/basic-tests-linux  ]   |             import warnings\n[tests/basic-tests-linux  ]   |             warnings.warn(\"cafile, capath and cadefault are deprecated, use a \"\n[tests/basic-tests-linux  ]   |                           \"custom context instead.\", DeprecationWarning, 2)\n[tests/basic-tests-linux  ]   |             if context is not None:\n[tests/basic-tests-linux  ]   |                 raise ValueError(\n[tests/basic-tests-linux  ]   |                     \"You can't pass both context and any of cafile, capath, and \"\n[tests/basic-tests-linux  ]   |                     \"cadefault\"\n[tests/basic-tests-linux  ]   |                 )\n[tests/basic-tests-linux  ]   |             if not _have_ssl:\n[tests/basic-tests-linux  ]   |                 raise ValueError('SSL support not available')\n[tests/basic-tests-linux  ]   |             context = ssl.create_default_context(ssl.Purpose.SERVER_AUTH,\n[tests/basic-tests-linux  ]   |                                                  cafile=cafile,\n[tests/basic-tests-linux  ]   |                                                  capath=capath)\n[tests/basic-tests-linux  ]   |             https_handler = HTTPSHandler(context=context)\n[tests/basic-tests-linux  ]   |             opener = build_opener(https_handler)\n[tests/basic-tests-linux  ]   |         elif context:\n[tests/basic-tests-linux  ]   |             https_handler = HTTPSHandler(context=context)\n[tests/basic-tests-linux  ]   |             opener = build_opener(https_handler)\n[tests/basic-tests-linux  ]   |         elif _opener is None:\n[tests/basic-tests-linux  ]   |             _opener = opener = build_opener()\n[tests/basic-tests-linux  ]   |         else:\n[tests/basic-tests-linux  ]   |             opener = _opener\n[tests/basic-tests-linux  ]   | >       return opener.open(url, data, timeout)\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/urllib/request.py:214: \n[tests/basic-tests-linux  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | self = <urllib.request.OpenerDirector object at 0x7f50c4ae5b80>\n[tests/basic-tests-linux  ]   | fullurl = <urllib.request.Request object at 0x7f50c4ae5ac0>, data = None\n[tests/basic-tests-linux  ]   | timeout = 10\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   |     def open(self, fullurl, data=None, timeout=socket._GLOBAL_DEFAULT_TIMEOUT):\n[tests/basic-tests-linux  ]   |         # accept a URL or a Request object\n[tests/basic-tests-linux  ]   |         if isinstance(fullurl, str):\n[tests/basic-tests-linux  ]   |             req = Request(fullurl, data)\n[tests/basic-tests-linux  ]   |         else:\n[tests/basic-tests-linux  ]   |             req = fullurl\n[tests/basic-tests-linux  ]   |             if data is not None:\n[tests/basic-tests-linux  ]   |                 req.data = data\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         req.timeout = timeout\n[tests/basic-tests-linux  ]   |         protocol = req.type\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         # pre-process request\n[tests/basic-tests-linux  ]   |         meth_name = protocol+\"_request\"\n[tests/basic-tests-linux  ]   |         for processor in self.process_request.get(protocol, []):\n[tests/basic-tests-linux  ]   |             meth = getattr(processor, meth_name)\n[tests/basic-tests-linux  ]   |             req = meth(req)\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         sys.audit('urllib.Request', req.full_url, req.data, req.headers, req.get_method())\n[tests/basic-tests-linux  ]   |         response = self._open(req, data)\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         # post-process response\n[tests/basic-tests-linux  ]   |         meth_name = protocol+\"_response\"\n[tests/basic-tests-linux  ]   |         for processor in self.process_response.get(protocol, []):\n[tests/basic-tests-linux  ]   |             meth = getattr(processor, meth_name)\n[tests/basic-tests-linux  ]   | >           response = meth(req, response)\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/urllib/request.py:523: \n[tests/basic-tests-linux  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | self = <urllib.request.HTTPErrorProcessor object at 0x7f50c4ae5df0>\n[tests/basic-tests-linux  ]   | request = <urllib.request.Request object at 0x7f50c4ae5ac0>\n[tests/basic-tests-linux  ]   | response = <http.client.HTTPResponse object at 0x7f50c4ae5fa0>\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   |     def http_response(self, request, response):\n[tests/basic-tests-linux  ]   |         code, msg, hdrs = response.code, response.msg, response.info()\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         # According to RFC 2616, \"2xx\" code indicates that the client's\n[tests/basic-tests-linux  ]   |         # request was successfully received, understood, and accepted.\n[tests/basic-tests-linux  ]   |         if not (200 <= code < 300):\n[tests/basic-tests-linux  ]   | >           response = self.parent.error(\n[tests/basic-tests-linux  ]   |                 'http', request, response, code, msg, hdrs)\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/urllib/request.py:632: \n[tests/basic-tests-linux  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | self = <urllib.request.OpenerDirector object at 0x7f50c4ae5b80>, proto = 403\n[tests/basic-tests-linux  ]   | args = ({'default': [<urllib.request.HTTPDefaultErrorHandler object at 0x7f50c4ae5e50>], 301: [<urllib.request.HTTPRedirectHa...ult', <urllib.request.Request object at 0x7f50c4ae5ac0>, <http.client.HTTPResponse object at 0x7f50c4ae5fa0>, 403, ...)\n[tests/basic-tests-linux  ]   | dict = {'default': [<urllib.request.HTTPDefaultErrorHandler object at 0x7f50c4ae5e50>], 301: [<urllib.request.HTTPRedirectHan...PRedirectHandler object at 0x7f50c4ae5d60>], 303: [<urllib.request.HTTPRedirectHandler object at 0x7f50c4ae5d60>], ...}\n[tests/basic-tests-linux  ]   | meth_name = 'http_error_403', http_err = 1\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   |     def error(self, proto, *args):\n[tests/basic-tests-linux  ]   |         if proto in ('http', 'https'):\n[tests/basic-tests-linux  ]   |             # XXX http[s] protocols are special-cased\n[tests/basic-tests-linux  ]   |             dict = self.handle_error['http'] # https is not different than http\n[tests/basic-tests-linux  ]   |             proto = args[2]  # YUCK!\n[tests/basic-tests-linux  ]   |             meth_name = 'http_error_%s' % proto\n[tests/basic-tests-linux  ]   |             http_err = 1\n[tests/basic-tests-linux  ]   |             orig_args = args\n[tests/basic-tests-linux  ]   |         else:\n[tests/basic-tests-linux  ]   |             dict = self.handle_error\n[tests/basic-tests-linux  ]   |             meth_name = proto + '_error'\n[tests/basic-tests-linux  ]   |             http_err = 0\n[tests/basic-tests-linux  ]   |         args = (dict, proto, meth_name) + args\n[tests/basic-tests-linux  ]   |         result = self._call_chain(*args)\n[tests/basic-tests-linux  ]   |         if result:\n[tests/basic-tests-linux  ]   |             return result\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         if http_err:\n[tests/basic-tests-linux  ]   |             args = (dict, 'default', 'http_error_default') + orig_args\n[tests/basic-tests-linux  ]   | >           return self._call_chain(*args)\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/urllib/request.py:561: \n[tests/basic-tests-linux  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | self = <urllib.request.OpenerDirector object at 0x7f50c4ae5b80>\n[tests/basic-tests-linux  ]   | chain = {'default': [<urllib.request.HTTPDefaultErrorHandler object at 0x7f50c4ae5e50>], 301: [<urllib.request.HTTPRedirectHan...PRedirectHandler object at 0x7f50c4ae5d60>], 303: [<urllib.request.HTTPRedirectHandler object at 0x7f50c4ae5d60>], ...}\n[tests/basic-tests-linux  ]   | kind = 'default', meth_name = 'http_error_default'\n[tests/basic-tests-linux  ]   | args = (<urllib.request.Request object at 0x7f50c4ae5ac0>, <http.client.HTTPResponse object at 0x7f50c4ae5fa0>, 403, 'Forbidden', <http.client.HTTPMessage object at 0x7f50c4ac9a30>)\n[tests/basic-tests-linux  ]   | handlers = [<urllib.request.HTTPDefaultErrorHandler object at 0x7f50c4ae5e50>]\n[tests/basic-tests-linux  ]   | handler = <urllib.request.HTTPDefaultErrorHandler object at 0x7f50c4ae5e50>\n[tests/basic-tests-linux  ]   | func = <bound method HTTPDefaultErrorHandler.http_error_default of <urllib.request.HTTPDefaultErrorHandler object at 0x7f50c4ae5e50>>\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   |     def _call_chain(self, chain, kind, meth_name, *args):\n[tests/basic-tests-linux  ]   |         # Handlers raise an exception if no one else should try to handle\n[tests/basic-tests-linux  ]   |         # the request, or return None if they can't but another handler\n[tests/basic-tests-linux  ]   |         # could.  Otherwise, they return the response.\n[tests/basic-tests-linux  ]   |         handlers = chain.get(kind, ())\n[tests/basic-tests-linux  ]   |         for handler in handlers:\n[tests/basic-tests-linux  ]   |             func = getattr(handler, meth_name)\n[tests/basic-tests-linux  ]   | >           result = func(*args)\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/urllib/request.py:494: \n[tests/basic-tests-linux  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | self = <urllib.request.HTTPDefaultErrorHandler object at 0x7f50c4ae5e50>\n[tests/basic-tests-linux  ]   | req = <urllib.request.Request object at 0x7f50c4ae5ac0>\n[tests/basic-tests-linux  ]   | fp = <http.client.HTTPResponse object at 0x7f50c4ae5fa0>, code = 403\n[tests/basic-tests-linux  ]   | msg = 'Forbidden', hdrs = <http.client.HTTPMessage object at 0x7f50c4ac9a30>\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   |     def http_error_default(self, req, fp, code, msg, hdrs):\n[tests/basic-tests-linux  ]   | >       raise HTTPError(req.full_url, code, msg, hdrs, fp)\n[tests/basic-tests-linux  ]   | E       urllib.error.HTTPError: HTTP Error 403: Forbidden\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/urllib/request.py:641: HTTPError\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | During handling of the above exception, another exception occurred:\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   |     def setup_module():\n[tests/basic-tests-linux  ]   | >       meta('9780375869020')  #  <-- set\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | isbnlib/test/test_cache_decorator.py:17: \n[tests/basic-tests-linux  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-linux  ]   | isbnlib/_ext.py:24: in meta\n[tests/basic-tests-linux  ]   |     return query(isbn, service) if isbn else {}\n[tests/basic-tests-linux  ]   | isbnlib/dev/_decorators.py:27: in memoized_func\n[tests/basic-tests-linux  ]   |     value = func(*args, **kwargs)\n[tests/basic-tests-linux  ]   | isbnlib/_metadata.py:33: in query\n[tests/basic-tests-linux  ]   |     meta = services[service](isbn)\n[tests/basic-tests-linux  ]   | isbnlib/_goob.py:70: in query\n[tests/basic-tests-linux  ]   |     data = wquery(SERVICE_URL.format(isbn='isbn:' + isbn), user_agent=UA)\n[tests/basic-tests-linux  ]   | isbnlib/dev/webquery.py:65: in query\n[tests/basic-tests-linux  ]   |     wq = WEBQuery(url, user_agent, throttling)\n[tests/basic-tests-linux  ]   | isbnlib/dev/webquery.py:32: in __init__\n[tests/basic-tests-linux  ]   |     self.data = webservice.query(service_url, ua)\n[tests/basic-tests-linux  ]   | isbnlib/dev/_decorators.py:47: in memoized_func\n[tests/basic-tests-linux  ]   |     value = func(*args, **kwargs)\n[tests/basic-tests-linux  ]   | isbnlib/dev/webservice.py:107: in query\n[tests/basic-tests-linux  ]   |     data = service.data()\n[tests/basic-tests-linux  ]   | isbnlib/dev/webservice.py:87: in data\n[tests/basic-tests-linux  ]   |     res = self.response()\n[tests/basic-tests-linux  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | self = <isbnlib.dev.webservice.WEBService object at 0x7f50c4ae56d0>\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   |     def response(self):\n[tests/basic-tests-linux  ]   |         \"\"\"Check errors on response.\"\"\"\n[tests/basic-tests-linux  ]   |         # TODO(http 102)\n[tests/basic-tests-linux  ]   |         # How to handle \"102 http's code\"?\n[tests/basic-tests-linux  ]   |         # - urlopen doesn't catch a 102 code!\n[tests/basic-tests-linux  ]   |         #   https://docs.python.org/3/howto/urllib2.html#error-codes\n[tests/basic-tests-linux  ]   |         try:\n[tests/basic-tests-linux  ]   |             response = urlopen(\n[tests/basic-tests-linux  ]   |                 self._request,\n[tests/basic-tests-linux  ]   |                 timeout=options.get('URLOPEN_TIMEOUT'),\n[tests/basic-tests-linux  ]   |             )\n[tests/basic-tests-linux  ]   |             LOGGER.debug('Request headers:\\n%s', self._request.header_items())\n[tests/basic-tests-linux  ]   |         except HTTPError as e:  # pragma: no cover\n[tests/basic-tests-linux  ]   |             LOGGER.critical(\n[tests/basic-tests-linux  ]   |                 'ISBNLibHTTPError for %s with code %s [%s]',\n[tests/basic-tests-linux  ]   |                 self._url,\n[tests/basic-tests-linux  ]   |                 e.code,\n[tests/basic-tests-linux  ]   |                 e.msg,\n[tests/basic-tests-linux  ]   |             )\n[tests/basic-tests-linux  ]   |             if e.code in (401, 403, 429):\n[tests/basic-tests-linux  ]   | >               raise ISBNLibHTTPError('%s Are you making many requests?' %\n[tests/basic-tests-linux  ]   |                                        e.code)\n[tests/basic-tests-linux  ]   | E               isbnlib.dev._exceptions.ISBNLibHTTPError: an HTTP error has ocurred (403 Are you making many requests?)\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | isbnlib/dev/webservice.py:63: ISBNLibHTTPError\n[tests/basic-tests-linux  ]   | ------------------------------ Captured log setup ------------------------------\n[tests/basic-tests-linux  ]   | CRITICAL isbnlib.dev.webservice:webservice.py:56 ISBNLibHTTPError for https://www.googleapis.com/books/v1/volumes?q=isbn:9780375869020&fields=items/volumeInfo(title,subtitle,authors,publisher,publishedDate,language,industryIdentifiers,description,imageLinks)&maxResults=1 with code 403 [Forbidden]\n[tests/basic-tests-linux  ]   | =================================== FAILURES ===================================\n[tests/basic-tests-linux  ]   | __________________________________ test_desc ___________________________________\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | self = <isbnlib.dev.webservice.WEBService object at 0x7f50c4a219d0>\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   |     def response(self):\n[tests/basic-tests-linux  ]   |         \"\"\"Check errors on response.\"\"\"\n[tests/basic-tests-linux  ]   |         # TODO(http 102)\n[tests/basic-tests-linux  ]   |         # How to handle \"102 http's code\"?\n[tests/basic-tests-linux  ]   |         # - urlopen doesn't catch a 102 code!\n[tests/basic-tests-linux  ]   |         #   https://docs.python.org/3/howto/urllib2.html#error-codes\n[tests/basic-tests-linux  ]   |         try:\n[tests/basic-tests-linux  ]   | >           response = urlopen(\n[tests/basic-tests-linux  ]   |                 self._request,\n[tests/basic-tests-linux  ]   |                 timeout=options.get('URLOPEN_TIMEOUT'),\n[tests/basic-tests-linux  ]   |             )\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | isbnlib/dev/webservice.py:50: \n[tests/basic-tests-linux  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | url = <urllib.request.Request object at 0x7f50c4a219a0>, data = None\n[tests/basic-tests-linux  ]   | timeout = 10\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   |     def urlopen(url, data=None, timeout=socket._GLOBAL_DEFAULT_TIMEOUT,\n[tests/basic-tests-linux  ]   |                 *, cafile=None, capath=None, cadefault=False, context=None):\n[tests/basic-tests-linux  ]   |         '''Open the URL url, which can be either a string or a Request object.\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         *data* must be an object specifying additional data to be sent to\n[tests/basic-tests-linux  ]   |         the server, or None if no such data is needed.  See Request for\n[tests/basic-tests-linux  ]   |         details.\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         urllib.request module uses HTTP/1.1 and includes a \"Connection:close\"\n[tests/basic-tests-linux  ]   |         header in its HTTP requests.\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         The optional *timeout* parameter specifies a timeout in seconds for\n[tests/basic-tests-linux  ]   |         blocking operations like the connection attempt (if not specified, the\n[tests/basic-tests-linux  ]   |         global default timeout setting will be used). This only works for HTTP,\n[tests/basic-tests-linux  ]   |         HTTPS and FTP connections.\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         If *context* is specified, it must be a ssl.SSLContext instance describing\n[tests/basic-tests-linux  ]   |         the various SSL options. See HTTPSConnection for more details.\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         The optional *cafile* and *capath* parameters specify a set of trusted CA\n[tests/basic-tests-linux  ]   |         certificates for HTTPS requests. cafile should point to a single file\n[tests/basic-tests-linux  ]   |         containing a bundle of CA certificates, whereas capath should point to a\n[tests/basic-tests-linux  ]   |         directory of hashed certificate files. More information can be found in\n[tests/basic-tests-linux  ]   |         ssl.SSLContext.load_verify_locations().\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         The *cadefault* parameter is ignored.\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         This function always returns an object which can work as a\n[tests/basic-tests-linux  ]   |         context manager and has the properties url, headers, and status.\n[tests/basic-tests-linux  ]   |         See urllib.response.addinfourl for more detail on these properties.\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         For HTTP and HTTPS URLs, this function returns a http.client.HTTPResponse\n[tests/basic-tests-linux  ]   |         object slightly modified. In addition to the three new methods above, the\n[tests/basic-tests-linux  ]   |         msg attribute contains the same information as the reason attribute ---\n[tests/basic-tests-linux  ]   |         the reason phrase returned by the server --- instead of the response\n[tests/basic-tests-linux  ]   |         headers as it is specified in the documentation for HTTPResponse.\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         For FTP, file, and data URLs and requests explicitly handled by legacy\n[tests/basic-tests-linux  ]   |         URLopener and FancyURLopener classes, this function returns a\n[tests/basic-tests-linux  ]   |         urllib.response.addinfourl object.\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         Note that None may be returned if no handler handles the request (though\n[tests/basic-tests-linux  ]   |         the default installed global OpenerDirector uses UnknownHandler to ensure\n[tests/basic-tests-linux  ]   |         this never happens).\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         In addition, if proxy settings are detected (for example, when a *_proxy\n[tests/basic-tests-linux  ]   |         environment variable like http_proxy is set), ProxyHandler is default\n[tests/basic-tests-linux  ]   |         installed and makes sure the requests are handled through the proxy.\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         '''\n[tests/basic-tests-linux  ]   |         global _opener\n[tests/basic-tests-linux  ]   |         if cafile or capath or cadefault:\n[tests/basic-tests-linux  ]   |             import warnings\n[tests/basic-tests-linux  ]   |             warnings.warn(\"cafile, capath and cadefault are deprecated, use a \"\n[tests/basic-tests-linux  ]   |                           \"custom context instead.\", DeprecationWarning, 2)\n[tests/basic-tests-linux  ]   |             if context is not None:\n[tests/basic-tests-linux  ]   |                 raise ValueError(\n[tests/basic-tests-linux  ]   |                     \"You can't pass both context and any of cafile, capath, and \"\n[tests/basic-tests-linux  ]   |                     \"cadefault\"\n[tests/basic-tests-linux  ]   |                 )\n[tests/basic-tests-linux  ]   |             if not _have_ssl:\n[tests/basic-tests-linux  ]   |                 raise ValueError('SSL support not available')\n[tests/basic-tests-linux  ]   |             context = ssl.create_default_context(ssl.Purpose.SERVER_AUTH,\n[tests/basic-tests-linux  ]   |                                                  cafile=cafile,\n[tests/basic-tests-linux  ]   |                                                  capath=capath)\n[tests/basic-tests-linux  ]   |             https_handler = HTTPSHandler(context=context)\n[tests/basic-tests-linux  ]   |             opener = build_opener(https_handler)\n[tests/basic-tests-linux  ]   |         elif context:\n[tests/basic-tests-linux  ]   |             https_handler = HTTPSHandler(context=context)\n[tests/basic-tests-linux  ]   |             opener = build_opener(https_handler)\n[tests/basic-tests-linux  ]   |         elif _opener is None:\n[tests/basic-tests-linux  ]   |             _opener = opener = build_opener()\n[tests/basic-tests-linux  ]   |         else:\n[tests/basic-tests-linux  ]   |             opener = _opener\n[tests/basic-tests-linux  ]   | >       return opener.open(url, data, timeout)\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/urllib/request.py:214: \n[tests/basic-tests-linux  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | self = <urllib.request.OpenerDirector object at 0x7f50c4ae5b80>\n[tests/basic-tests-linux  ]   | fullurl = <urllib.request.Request object at 0x7f50c4a219a0>, data = None\n[tests/basic-tests-linux  ]   | timeout = 10\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   |     def open(self, fullurl, data=None, timeout=socket._GLOBAL_DEFAULT_TIMEOUT):\n[tests/basic-tests-linux  ]   |         # accept a URL or a Request object\n[tests/basic-tests-linux  ]   |         if isinstance(fullurl, str):\n[tests/basic-tests-linux  ]   |             req = Request(fullurl, data)\n[tests/basic-tests-linux  ]   |         else:\n[tests/basic-tests-linux  ]   |             req = fullurl\n[tests/basic-tests-linux  ]   |             if data is not None:\n[tests/basic-tests-linux  ]   |                 req.data = data\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         req.timeout = timeout\n[tests/basic-tests-linux  ]   |         protocol = req.type\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         # pre-process request\n[tests/basic-tests-linux  ]   |         meth_name = protocol+\"_request\"\n[tests/basic-tests-linux  ]   |         for processor in self.process_request.get(protocol, []):\n[tests/basic-tests-linux  ]   |             meth = getattr(processor, meth_name)\n[tests/basic-tests-linux  ]   |             req = meth(req)\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         sys.audit('urllib.Request', req.full_url, req.data, req.headers, req.get_method())\n[tests/basic-tests-linux  ]   |         response = self._open(req, data)\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         # post-process response\n[tests/basic-tests-linux  ]   |         meth_name = protocol+\"_response\"\n[tests/basic-tests-linux  ]   |         for processor in self.process_response.get(protocol, []):\n[tests/basic-tests-linux  ]   |             meth = getattr(processor, meth_name)\n[tests/basic-tests-linux  ]   | >           response = meth(req, response)\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/urllib/request.py:523: \n[tests/basic-tests-linux  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | self = <urllib.request.HTTPErrorProcessor object at 0x7f50c4ae5df0>\n[tests/basic-tests-linux  ]   | request = <urllib.request.Request object at 0x7f50c4a219a0>\n[tests/basic-tests-linux  ]   | response = <http.client.HTTPResponse object at 0x7f50c4a21730>\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   |     def http_response(self, request, response):\n[tests/basic-tests-linux  ]   |         code, msg, hdrs = response.code, response.msg, response.info()\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         # According to RFC 2616, \"2xx\" code indicates that the client's\n[tests/basic-tests-linux  ]   |         # request was successfully received, understood, and accepted.\n[tests/basic-tests-linux  ]   |         if not (200 <= code < 300):\n[tests/basic-tests-linux  ]   | >           response = self.parent.error(\n[tests/basic-tests-linux  ]   |                 'http', request, response, code, msg, hdrs)\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/urllib/request.py:632: \n[tests/basic-tests-linux  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | self = <urllib.request.OpenerDirector object at 0x7f50c4ae5b80>, proto = 403\n[tests/basic-tests-linux  ]   | args = ({'default': [<urllib.request.HTTPDefaultErrorHandler object at 0x7f50c4ae5e50>], 301: [<urllib.request.HTTPRedirectHa...ult', <urllib.request.Request object at 0x7f50c4a219a0>, <http.client.HTTPResponse object at 0x7f50c4a21730>, 403, ...)\n[tests/basic-tests-linux  ]   | dict = {'default': [<urllib.request.HTTPDefaultErrorHandler object at 0x7f50c4ae5e50>], 301: [<urllib.request.HTTPRedirectHan...PRedirectHandler object at 0x7f50c4ae5d60>], 303: [<urllib.request.HTTPRedirectHandler object at 0x7f50c4ae5d60>], ...}\n[tests/basic-tests-linux  ]   | meth_name = 'http_error_403', http_err = 1\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   |     def error(self, proto, *args):\n[tests/basic-tests-linux  ]   |         if proto in ('http', 'https'):\n[tests/basic-tests-linux  ]   |             # XXX http[s] protocols are special-cased\n[tests/basic-tests-linux  ]   |             dict = self.handle_error['http'] # https is not different than http\n[tests/basic-tests-linux  ]   |             proto = args[2]  # YUCK!\n[tests/basic-tests-linux  ]   |             meth_name = 'http_error_%s' % proto\n[tests/basic-tests-linux  ]   |             http_err = 1\n[tests/basic-tests-linux  ]   |             orig_args = args\n[tests/basic-tests-linux  ]   |         else:\n[tests/basic-tests-linux  ]   |             dict = self.handle_error\n[tests/basic-tests-linux  ]   |             meth_name = proto + '_error'\n[tests/basic-tests-linux  ]   |             http_err = 0\n[tests/basic-tests-linux  ]   |         args = (dict, proto, meth_name) + args\n[tests/basic-tests-linux  ]   |         result = self._call_chain(*args)\n[tests/basic-tests-linux  ]   |         if result:\n[tests/basic-tests-linux  ]   |             return result\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         if http_err:\n[tests/basic-tests-linux  ]   |             args = (dict, 'default', 'http_error_default') + orig_args\n[tests/basic-tests-linux  ]   | >           return self._call_chain(*args)\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/urllib/request.py:561: \n[tests/basic-tests-linux  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | self = <urllib.request.OpenerDirector object at 0x7f50c4ae5b80>\n[tests/basic-tests-linux  ]   | chain = {'default': [<urllib.request.HTTPDefaultErrorHandler object at 0x7f50c4ae5e50>], 301: [<urllib.request.HTTPRedirectHan...PRedirectHandler object at 0x7f50c4ae5d60>], 303: [<urllib.request.HTTPRedirectHandler object at 0x7f50c4ae5d60>], ...}\n[tests/basic-tests-linux  ]   | kind = 'default', meth_name = 'http_error_default'\n[tests/basic-tests-linux  ]   | args = (<urllib.request.Request object at 0x7f50c4a219a0>, <http.client.HTTPResponse object at 0x7f50c4a21730>, 403, 'Forbidden', <http.client.HTTPMessage object at 0x7f50c4a21670>)\n[tests/basic-tests-linux  ]   | handlers = [<urllib.request.HTTPDefaultErrorHandler object at 0x7f50c4ae5e50>]\n[tests/basic-tests-linux  ]   | handler = <urllib.request.HTTPDefaultErrorHandler object at 0x7f50c4ae5e50>\n[tests/basic-tests-linux  ]   | func = <bound method HTTPDefaultErrorHandler.http_error_default of <urllib.request.HTTPDefaultErrorHandler object at 0x7f50c4ae5e50>>\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   |     def _call_chain(self, chain, kind, meth_name, *args):\n[tests/basic-tests-linux  ]   |         # Handlers raise an exception if no one else should try to handle\n[tests/basic-tests-linux  ]   |         # the request, or return None if they can't but another handler\n[tests/basic-tests-linux  ]   |         # could.  Otherwise, they return the response.\n[tests/basic-tests-linux  ]   |         handlers = chain.get(kind, ())\n[tests/basic-tests-linux  ]   |         for handler in handlers:\n[tests/basic-tests-linux  ]   |             func = getattr(handler, meth_name)\n[tests/basic-tests-linux  ]   | >           result = func(*args)\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/urllib/request.py:494: \n[tests/basic-tests-linux  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | self = <urllib.request.HTTPDefaultErrorHandler object at 0x7f50c4ae5e50>\n[tests/basic-tests-linux  ]   | req = <urllib.request.Request object at 0x7f50c4a219a0>\n[tests/basic-tests-linux  ]   | fp = <http.client.HTTPResponse object at 0x7f50c4a21730>, code = 403\n[tests/basic-tests-linux  ]   | msg = 'Forbidden', hdrs = <http.client.HTTPMessage object at 0x7f50c4a21670>\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   |     def http_error_default(self, req, fp, code, msg, hdrs):\n[tests/basic-tests-linux  ]   | >       raise HTTPError(req.full_url, code, msg, hdrs, fp)\n[tests/basic-tests-linux  ]   | E       urllib.error.HTTPError: HTTP Error 403: Forbidden\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/urllib/request.py:641: HTTPError\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | During handling of the above exception, another exception occurred:\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   |     @pytest.mark.network\n[tests/basic-tests-linux  ]   |     def test_desc():\n[tests/basic-tests-linux  ]   |         \"\"\"Test 'desc' command.\"\"\"\n[tests/basic-tests-linux  ]   | >       assert (len(desc('9780156001311')) > 10) == True\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | isbnlib/test/test_ext.py:57: \n[tests/basic-tests-linux  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-linux  ]   | isbnlib/_ext.py:94: in desc\n[tests/basic-tests-linux  ]   |     return goo_desc(isbn) if isbn else ''\n[tests/basic-tests-linux  ]   | isbnlib/dev/_decorators.py:27: in memoized_func\n[tests/basic-tests-linux  ]   |     value = func(*args, **kwargs)\n[tests/basic-tests-linux  ]   | isbnlib/_desc.py:25: in goo_desc\n[tests/basic-tests-linux  ]   |     content = wsquery(url, user_agent=UA)\n[tests/basic-tests-linux  ]   | isbnlib/dev/_decorators.py:47: in memoized_func\n[tests/basic-tests-linux  ]   |     value = func(*args, **kwargs)\n[tests/basic-tests-linux  ]   | isbnlib/dev/webservice.py:107: in query\n[tests/basic-tests-linux  ]   |     data = service.data()\n[tests/basic-tests-linux  ]   | isbnlib/dev/webservice.py:87: in data\n[tests/basic-tests-linux  ]   |     res = self.response()\n[tests/basic-tests-linux  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | self = <isbnlib.dev.webservice.WEBService object at 0x7f50c4a219d0>\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   |     def response(self):\n[tests/basic-tests-linux  ]   |         \"\"\"Check errors on response.\"\"\"\n[tests/basic-tests-linux  ]   |         # TODO(http 102)\n[tests/basic-tests-linux  ]   |         # How to handle \"102 http's code\"?\n[tests/basic-tests-linux  ]   |         # - urlopen doesn't catch a 102 code!\n[tests/basic-tests-linux  ]   |         #   https://docs.python.org/3/howto/urllib2.html#error-codes\n[tests/basic-tests-linux  ]   |         try:\n[tests/basic-tests-linux  ]   |             response = urlopen(\n[tests/basic-tests-linux  ]   |                 self._request,\n[tests/basic-tests-linux  ]   |                 timeout=options.get('URLOPEN_TIMEOUT'),\n[tests/basic-tests-linux  ]   |             )\n[tests/basic-tests-linux  ]   |             LOGGER.debug('Request headers:\\n%s', self._request.header_items())\n[tests/basic-tests-linux  ]   |         except HTTPError as e:  # pragma: no cover\n[tests/basic-tests-linux  ]   |             LOGGER.critical(\n[tests/basic-tests-linux  ]   |                 'ISBNLibHTTPError for %s with code %s [%s]',\n[tests/basic-tests-linux  ]   |                 self._url,\n[tests/basic-tests-linux  ]   |                 e.code,\n[tests/basic-tests-linux  ]   |                 e.msg,\n[tests/basic-tests-linux  ]   |             )\n[tests/basic-tests-linux  ]   |             if e.code in (401, 403, 429):\n[tests/basic-tests-linux  ]   | >               raise ISBNLibHTTPError('%s Are you making many requests?' %\n[tests/basic-tests-linux  ]   |                                        e.code)\n[tests/basic-tests-linux  ]   | E               isbnlib.dev._exceptions.ISBNLibHTTPError: an HTTP error has ocurred (403 Are you making many requests?)\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | isbnlib/dev/webservice.py:63: ISBNLibHTTPError\n[tests/basic-tests-linux  ]   | ------------------------------ Captured log call -------------------------------\n[tests/basic-tests-linux  ]   | CRITICAL isbnlib.dev.webservice:webservice.py:56 ISBNLibHTTPError for https://www.googleapis.com/books/v1/volumes?q=isbn:9780156001311&fields=items/volumeInfo(title,subtitle,authors,publisher,publishedDate,language,industryIdentifiers,description,imageLinks)&maxResults=1 with code 403 [Forbidden]\n[tests/basic-tests-linux  ]   | __________________________________ test_cover __________________________________\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | self = <isbnlib.dev.webservice.WEBService object at 0x7f50c49f9610>\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   |     def response(self):\n[tests/basic-tests-linux  ]   |         \"\"\"Check errors on response.\"\"\"\n[tests/basic-tests-linux  ]   |         # TODO(http 102)\n[tests/basic-tests-linux  ]   |         # How to handle \"102 http's code\"?\n[tests/basic-tests-linux  ]   |         # - urlopen doesn't catch a 102 code!\n[tests/basic-tests-linux  ]   |         #   https://docs.python.org/3/howto/urllib2.html#error-codes\n[tests/basic-tests-linux  ]   |         try:\n[tests/basic-tests-linux  ]   | >           response = urlopen(\n[tests/basic-tests-linux  ]   |                 self._request,\n[tests/basic-tests-linux  ]   |                 timeout=options.get('URLOPEN_TIMEOUT'),\n[tests/basic-tests-linux  ]   |             )\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | isbnlib/dev/webservice.py:50: \n[tests/basic-tests-linux  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | url = <urllib.request.Request object at 0x7f50c49f96a0>, data = None\n[tests/basic-tests-linux  ]   | timeout = 10\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   |     def urlopen(url, data=None, timeout=socket._GLOBAL_DEFAULT_TIMEOUT,\n[tests/basic-tests-linux  ]   |                 *, cafile=None, capath=None, cadefault=False, context=None):\n[tests/basic-tests-linux  ]   |         '''Open the URL url, which can be either a string or a Request object.\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         *data* must be an object specifying additional data to be sent to\n[tests/basic-tests-linux  ]   |         the server, or None if no such data is needed.  See Request for\n[tests/basic-tests-linux  ]   |         details.\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         urllib.request module uses HTTP/1.1 and includes a \"Connection:close\"\n[tests/basic-tests-linux  ]   |         header in its HTTP requests.\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         The optional *timeout* parameter specifies a timeout in seconds for\n[tests/basic-tests-linux  ]   |         blocking operations like the connection attempt (if not specified, the\n[tests/basic-tests-linux  ]   |         global default timeout setting will be used). This only works for HTTP,\n[tests/basic-tests-linux  ]   |         HTTPS and FTP connections.\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         If *context* is specified, it must be a ssl.SSLContext instance describing\n[tests/basic-tests-linux  ]   |         the various SSL options. See HTTPSConnection for more details.\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         The optional *cafile* and *capath* parameters specify a set of trusted CA\n[tests/basic-tests-linux  ]   |         certificates for HTTPS requests. cafile should point to a single file\n[tests/basic-tests-linux  ]   |         containing a bundle of CA certificates, whereas capath should point to a\n[tests/basic-tests-linux  ]   |         directory of hashed certificate files. More information can be found in\n[tests/basic-tests-linux  ]   |         ssl.SSLContext.load_verify_locations().\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         The *cadefault* parameter is ignored.\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         This function always returns an object which can work as a\n[tests/basic-tests-linux  ]   |         context manager and has the properties url, headers, and status.\n[tests/basic-tests-linux  ]   |         See urllib.response.addinfourl for more detail on these properties.\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         For HTTP and HTTPS URLs, this function returns a http.client.HTTPResponse\n[tests/basic-tests-linux  ]   |         object slightly modified. In addition to the three new methods above, the\n[tests/basic-tests-linux  ]   |         msg attribute contains the same information as the reason attribute ---\n[tests/basic-tests-linux  ]   |         the reason phrase returned by the server --- instead of the response\n[tests/basic-tests-linux  ]   |         headers as it is specified in the documentation for HTTPResponse.\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         For FTP, file, and data URLs and requests explicitly handled by legacy\n[tests/basic-tests-linux  ]   |         URLopener and FancyURLopener classes, this function returns a\n[tests/basic-tests-linux  ]   |         urllib.response.addinfourl object.\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         Note that None may be returned if no handler handles the request (though\n[tests/basic-tests-linux  ]   |         the default installed global OpenerDirector uses UnknownHandler to ensure\n[tests/basic-tests-linux  ]   |         this never happens).\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         In addition, if proxy settings are detected (for example, when a *_proxy\n[tests/basic-tests-linux  ]   |         environment variable like http_proxy is set), ProxyHandler is default\n[tests/basic-tests-linux  ]   |         installed and makes sure the requests are handled through the proxy.\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         '''\n[tests/basic-tests-linux  ]   |         global _opener\n[tests/basic-tests-linux  ]   |         if cafile or capath or cadefault:\n[tests/basic-tests-linux  ]   |             import warnings\n[tests/basic-tests-linux  ]   |             warnings.warn(\"cafile, capath and cadefault are deprecated, use a \"\n[tests/basic-tests-linux  ]   |                           \"custom context instead.\", DeprecationWarning, 2)\n[tests/basic-tests-linux  ]   |             if context is not None:\n[tests/basic-tests-linux  ]   |                 raise ValueError(\n[tests/basic-tests-linux  ]   |                     \"You can't pass both context and any of cafile, capath, and \"\n[tests/basic-tests-linux  ]   |                     \"cadefault\"\n[tests/basic-tests-linux  ]   |                 )\n[tests/basic-tests-linux  ]   |             if not _have_ssl:\n[tests/basic-tests-linux  ]   |                 raise ValueError('SSL support not available')\n[tests/basic-tests-linux  ]   |             context = ssl.create_default_context(ssl.Purpose.SERVER_AUTH,\n[tests/basic-tests-linux  ]   |                                                  cafile=cafile,\n[tests/basic-tests-linux  ]   |                                                  capath=capath)\n[tests/basic-tests-linux  ]   |             https_handler = HTTPSHandler(context=context)\n[tests/basic-tests-linux  ]   |             opener = build_opener(https_handler)\n[tests/basic-tests-linux  ]   |         elif context:\n[tests/basic-tests-linux  ]   |             https_handler = HTTPSHandler(context=context)\n[tests/basic-tests-linux  ]   |             opener = build_opener(https_handler)\n[tests/basic-tests-linux  ]   |         elif _opener is None:\n[tests/basic-tests-linux  ]   |             _opener = opener = build_opener()\n[tests/basic-tests-linux  ]   |         else:\n[tests/basic-tests-linux  ]   |             opener = _opener\n[tests/basic-tests-linux  ]   | >       return opener.open(url, data, timeout)\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/urllib/request.py:214: \n[tests/basic-tests-linux  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | self = <urllib.request.OpenerDirector object at 0x7f50c4ae5b80>\n[tests/basic-tests-linux  ]   | fullurl = <urllib.request.Request object at 0x7f50c49f96a0>, data = None\n[tests/basic-tests-linux  ]   | timeout = 10\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   |     def open(self, fullurl, data=None, timeout=socket._GLOBAL_DEFAULT_TIMEOUT):\n[tests/basic-tests-linux  ]   |         # accept a URL or a Request object\n[tests/basic-tests-linux  ]   |         if isinstance(fullurl, str):\n[tests/basic-tests-linux  ]   |             req = Request(fullurl, data)\n[tests/basic-tests-linux  ]   |         else:\n[tests/basic-tests-linux  ]   |             req = fullurl\n[tests/basic-tests-linux  ]   |             if data is not None:\n[tests/basic-tests-linux  ]   |                 req.data = data\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         req.timeout = timeout\n[tests/basic-tests-linux  ]   |         protocol = req.type\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         # pre-process request\n[tests/basic-tests-linux  ]   |         meth_name = protocol+\"_request\"\n[tests/basic-tests-linux  ]   |         for processor in self.process_request.get(protocol, []):\n[tests/basic-tests-linux  ]   |             meth = getattr(processor, meth_name)\n[tests/basic-tests-linux  ]   |             req = meth(req)\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         sys.audit('urllib.Request', req.full_url, req.data, req.headers, req.get_method())\n[tests/basic-tests-linux  ]   |         response = self._open(req, data)\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         # post-process response\n[tests/basic-tests-linux  ]   |         meth_name = protocol+\"_response\"\n[tests/basic-tests-linux  ]   |         for processor in self.process_response.get(protocol, []):\n[tests/basic-tests-linux  ]   |             meth = getattr(processor, meth_name)\n[tests/basic-tests-linux  ]   | >           response = meth(req, response)\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/urllib/request.py:523: \n[tests/basic-tests-linux  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | self = <urllib.request.HTTPErrorProcessor object at 0x7f50c4ae5df0>\n[tests/basic-tests-linux  ]   | request = <urllib.request.Request object at 0x7f50c49f96a0>\n[tests/basic-tests-linux  ]   | response = <http.client.HTTPResponse object at 0x7f50c49f9760>\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   |     def http_response(self, request, response):\n[tests/basic-tests-linux  ]   |         code, msg, hdrs = response.code, response.msg, response.info()\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         # According to RFC 2616, \"2xx\" code indicates that the client's\n[tests/basic-tests-linux  ]   |         # request was successfully received, understood, and accepted.\n[tests/basic-tests-linux  ]   |         if not (200 <= code < 300):\n[tests/basic-tests-linux  ]   | >           response = self.parent.error(\n[tests/basic-tests-linux  ]   |                 'http', request, response, code, msg, hdrs)\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/urllib/request.py:632: \n[tests/basic-tests-linux  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | self = <urllib.request.OpenerDirector object at 0x7f50c4ae5b80>, proto = 403\n[tests/basic-tests-linux  ]   | args = ({'default': [<urllib.request.HTTPDefaultErrorHandler object at 0x7f50c4ae5e50>], 301: [<urllib.request.HTTPRedirectHa...ult', <urllib.request.Request object at 0x7f50c49f96a0>, <http.client.HTTPResponse object at 0x7f50c49f9760>, 403, ...)\n[tests/basic-tests-linux  ]   | dict = {'default': [<urllib.request.HTTPDefaultErrorHandler object at 0x7f50c4ae5e50>], 301: [<urllib.request.HTTPRedirectHan...PRedirectHandler object at 0x7f50c4ae5d60>], 303: [<urllib.request.HTTPRedirectHandler object at 0x7f50c4ae5d60>], ...}\n[tests/basic-tests-linux  ]   | meth_name = 'http_error_403', http_err = 1\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   |     def error(self, proto, *args):\n[tests/basic-tests-linux  ]   |         if proto in ('http', 'https'):\n[tests/basic-tests-linux  ]   |             # XXX http[s] protocols are special-cased\n[tests/basic-tests-linux  ]   |             dict = self.handle_error['http'] # https is not different than http\n[tests/basic-tests-linux  ]   |             proto = args[2]  # YUCK!\n[tests/basic-tests-linux  ]   |             meth_name = 'http_error_%s' % proto\n[tests/basic-tests-linux  ]   |             http_err = 1\n[tests/basic-tests-linux  ]   |             orig_args = args\n[tests/basic-tests-linux  ]   |         else:\n[tests/basic-tests-linux  ]   |             dict = self.handle_error\n[tests/basic-tests-linux  ]   |             meth_name = proto + '_error'\n[tests/basic-tests-linux  ]   |             http_err = 0\n[tests/basic-tests-linux  ]   |         args = (dict, proto, meth_name) + args\n[tests/basic-tests-linux  ]   |         result = self._call_chain(*args)\n[tests/basic-tests-linux  ]   |         if result:\n[tests/basic-tests-linux  ]   |             return result\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         if http_err:\n[tests/basic-tests-linux  ]   |             args = (dict, 'default', 'http_error_default') + orig_args\n[tests/basic-tests-linux  ]   | >           return self._call_chain(*args)\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/urllib/request.py:561: \n[tests/basic-tests-linux  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | self = <urllib.request.OpenerDirector object at 0x7f50c4ae5b80>\n[tests/basic-tests-linux  ]   | chain = {'default': [<urllib.request.HTTPDefaultErrorHandler object at 0x7f50c4ae5e50>], 301: [<urllib.request.HTTPRedirectHan...PRedirectHandler object at 0x7f50c4ae5d60>], 303: [<urllib.request.HTTPRedirectHandler object at 0x7f50c4ae5d60>], ...}\n[tests/basic-tests-linux  ]   | kind = 'default', meth_name = 'http_error_default'\n[tests/basic-tests-linux  ]   | args = (<urllib.request.Request object at 0x7f50c49f96a0>, <http.client.HTTPResponse object at 0x7f50c49f9760>, 403, 'Forbidden', <http.client.HTTPMessage object at 0x7f50c49f9370>)\n[tests/basic-tests-linux  ]   | handlers = [<urllib.request.HTTPDefaultErrorHandler object at 0x7f50c4ae5e50>]\n[tests/basic-tests-linux  ]   | handler = <urllib.request.HTTPDefaultErrorHandler object at 0x7f50c4ae5e50>\n[tests/basic-tests-linux  ]   | func = <bound method HTTPDefaultErrorHandler.http_error_default of <urllib.request.HTTPDefaultErrorHandler object at 0x7f50c4ae5e50>>\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   |     def _call_chain(self, chain, kind, meth_name, *args):\n[tests/basic-tests-linux  ]   |         # Handlers raise an exception if no one else should try to handle\n[tests/basic-tests-linux  ]   |         # the request, or return None if they can't but another handler\n[tests/basic-tests-linux  ]   |         # could.  Otherwise, they return the response.\n[tests/basic-tests-linux  ]   |         handlers = chain.get(kind, ())\n[tests/basic-tests-linux  ]   |         for handler in handlers:\n[tests/basic-tests-linux  ]   |             func = getattr(handler, meth_name)\n[tests/basic-tests-linux  ]   | >           result = func(*args)\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/urllib/request.py:494: \n[tests/basic-tests-linux  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | self = <urllib.request.HTTPDefaultErrorHandler object at 0x7f50c4ae5e50>\n[tests/basic-tests-linux  ]   | req = <urllib.request.Request object at 0x7f50c49f96a0>\n[tests/basic-tests-linux  ]   | fp = <http.client.HTTPResponse object at 0x7f50c49f9760>, code = 403\n[tests/basic-tests-linux  ]   | msg = 'Forbidden', hdrs = <http.client.HTTPMessage object at 0x7f50c49f9370>\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   |     def http_error_default(self, req, fp, code, msg, hdrs):\n[tests/basic-tests-linux  ]   | >       raise HTTPError(req.full_url, code, msg, hdrs, fp)\n[tests/basic-tests-linux  ]   | E       urllib.error.HTTPError: HTTP Error 403: Forbidden\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/urllib/request.py:641: HTTPError\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | During handling of the above exception, another exception occurred:\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   |     @pytest.mark.network\n[tests/basic-tests-linux  ]   |     def test_cover():\n[tests/basic-tests-linux  ]   |         \"\"\"Test 'cover' command.\"\"\"\n[tests/basic-tests-linux  ]   | >       assert (len(repr(cover('9780156001311'))) > 50) == True\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | isbnlib/test/test_ext.py:64: \n[tests/basic-tests-linux  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-linux  ]   | isbnlib/_ext.py:88: in cover\n[tests/basic-tests-linux  ]   |     return gcover(isbn) if isbn else {}\n[tests/basic-tests-linux  ]   | isbnlib/dev/_decorators.py:27: in memoized_func\n[tests/basic-tests-linux  ]   |     value = func(*args, **kwargs)\n[tests/basic-tests-linux  ]   | isbnlib/_cover.py:21: in cover\n[tests/basic-tests-linux  ]   |     data = wquery(SERVICE_URL.format(isbn=isbn), user_agent=UA)\n[tests/basic-tests-linux  ]   | isbnlib/dev/webquery.py:65: in query\n[tests/basic-tests-linux  ]   |     wq = WEBQuery(url, user_agent, throttling)\n[tests/basic-tests-linux  ]   | isbnlib/dev/webquery.py:32: in __init__\n[tests/basic-tests-linux  ]   |     self.data = webservice.query(service_url, ua)\n[tests/basic-tests-linux  ]   | isbnlib/dev/_decorators.py:47: in memoized_func\n[tests/basic-tests-linux  ]   |     value = func(*args, **kwargs)\n[tests/basic-tests-linux  ]   | isbnlib/dev/webservice.py:107: in query\n[tests/basic-tests-linux  ]   |     data = service.data()\n[tests/basic-tests-linux  ]   | isbnlib/dev/webservice.py:87: in data\n[tests/basic-tests-linux  ]   |     res = self.response()\n[tests/basic-tests-linux  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | self = <isbnlib.dev.webservice.WEBService object at 0x7f50c49f9610>\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   |     def response(self):\n[tests/basic-tests-linux  ]   |         \"\"\"Check errors on response.\"\"\"\n[tests/basic-tests-linux  ]   |         # TODO(http 102)\n[tests/basic-tests-linux  ]   |         # How to handle \"102 http's code\"?\n[tests/basic-tests-linux  ]   |         # - urlopen doesn't catch a 102 code!\n[tests/basic-tests-linux  ]   |         #   https://docs.python.org/3/howto/urllib2.html#error-codes\n[tests/basic-tests-linux  ]   |         try:\n[tests/basic-tests-linux  ]   |             response = urlopen(\n[tests/basic-tests-linux  ]   |                 self._request,\n[tests/basic-tests-linux  ]   |                 timeout=options.get('URLOPEN_TIMEOUT'),\n[tests/basic-tests-linux  ]   |             )\n[tests/basic-tests-linux  ]   |             LOGGER.debug('Request headers:\\n%s', self._request.header_items())\n[tests/basic-tests-linux  ]   |         except HTTPError as e:  # pragma: no cover\n[tests/basic-tests-linux  ]   |             LOGGER.critical(\n[tests/basic-tests-linux  ]   |                 'ISBNLibHTTPError for %s with code %s [%s]',\n[tests/basic-tests-linux  ]   |                 self._url,\n[tests/basic-tests-linux  ]   |                 e.code,\n[tests/basic-tests-linux  ]   |                 e.msg,\n[tests/basic-tests-linux  ]   |             )\n[tests/basic-tests-linux  ]   |             if e.code in (401, 403, 429):\n[tests/basic-tests-linux  ]   | >               raise ISBNLibHTTPError('%s Are you making many requests?' %\n[tests/basic-tests-linux  ]   |                                        e.code)\n[tests/basic-tests-linux  ]   | E               isbnlib.dev._exceptions.ISBNLibHTTPError: an HTTP error has ocurred (403 Are you making many requests?)\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | isbnlib/dev/webservice.py:63: ISBNLibHTTPError\n[tests/basic-tests-linux  ]   | ------------------------------ Captured log call -------------------------------\n[tests/basic-tests-linux  ]   | CRITICAL isbnlib.dev.webservice:webservice.py:56 ISBNLibHTTPError for https://www.googleapis.com/books/v1/volumes?q=isbn:9780156001311&fields=items/volumeInfo(title,subtitle,authors,publisher,publishedDate,language,industryIdentifiers,description,imageLinks)&maxResults=1 with code 403 [Forbidden]\n[tests/basic-tests-linux  ]   | __________________________________ test_goom ___________________________________\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | self = <isbnlib.dev.webservice.WEBService object at 0x7f50c4916250>\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   |     def response(self):\n[tests/basic-tests-linux  ]   |         \"\"\"Check errors on response.\"\"\"\n[tests/basic-tests-linux  ]   |         # TODO(http 102)\n[tests/basic-tests-linux  ]   |         # How to handle \"102 http's code\"?\n[tests/basic-tests-linux  ]   |         # - urlopen doesn't catch a 102 code!\n[tests/basic-tests-linux  ]   |         #   https://docs.python.org/3/howto/urllib2.html#error-codes\n[tests/basic-tests-linux  ]   |         try:\n[tests/basic-tests-linux  ]   | >           response = urlopen(\n[tests/basic-tests-linux  ]   |                 self._request,\n[tests/basic-tests-linux  ]   |                 timeout=options.get('URLOPEN_TIMEOUT'),\n[tests/basic-tests-linux  ]   |             )\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/xlcnd-isbnlib/isbnlib/dev/webservice.py:50: \n[tests/basic-tests-linux  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | url = <urllib.request.Request object at 0x7f50c4916a00>, data = None\n[tests/basic-tests-linux  ]   | timeout = 10\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   |     def urlopen(url, data=None, timeout=socket._GLOBAL_DEFAULT_TIMEOUT,\n[tests/basic-tests-linux  ]   |                 *, cafile=None, capath=None, cadefault=False, context=None):\n[tests/basic-tests-linux  ]   |         '''Open the URL url, which can be either a string or a Request object.\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         *data* must be an object specifying additional data to be sent to\n[tests/basic-tests-linux  ]   |         the server, or None if no such data is needed.  See Request for\n[tests/basic-tests-linux  ]   |         details.\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         urllib.request module uses HTTP/1.1 and includes a \"Connection:close\"\n[tests/basic-tests-linux  ]   |         header in its HTTP requests.\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         The optional *timeout* parameter specifies a timeout in seconds for\n[tests/basic-tests-linux  ]   |         blocking operations like the connection attempt (if not specified, the\n[tests/basic-tests-linux  ]   |         global default timeout setting will be used). This only works for HTTP,\n[tests/basic-tests-linux  ]   |         HTTPS and FTP connections.\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         If *context* is specified, it must be a ssl.SSLContext instance describing\n[tests/basic-tests-linux  ]   |         the various SSL options. See HTTPSConnection for more details.\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         The optional *cafile* and *capath* parameters specify a set of trusted CA\n[tests/basic-tests-linux  ]   |         certificates for HTTPS requests. cafile should point to a single file\n[tests/basic-tests-linux  ]   |         containing a bundle of CA certificates, whereas capath should point to a\n[tests/basic-tests-linux  ]   |         directory of hashed certificate files. More information can be found in\n[tests/basic-tests-linux  ]   |         ssl.SSLContext.load_verify_locations().\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         The *cadefault* parameter is ignored.\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         This function always returns an object which can work as a\n[tests/basic-tests-linux  ]   |         context manager and has the properties url, headers, and status.\n[tests/basic-tests-linux  ]   |         See urllib.response.addinfourl for more detail on these properties.\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         For HTTP and HTTPS URLs, this function returns a http.client.HTTPResponse\n[tests/basic-tests-linux  ]   |         object slightly modified. In addition to the three new methods above, the\n[tests/basic-tests-linux  ]   |         msg attribute contains the same information as the reason attribute ---\n[tests/basic-tests-linux  ]   |         the reason phrase returned by the server --- instead of the response\n[tests/basic-tests-linux  ]   |         headers as it is specified in the documentation for HTTPResponse.\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         For FTP, file, and data URLs and requests explicitly handled by legacy\n[tests/basic-tests-linux  ]   |         URLopener and FancyURLopener classes, this function returns a\n[tests/basic-tests-linux  ]   |         urllib.response.addinfourl object.\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         Note that None may be returned if no handler handles the request (though\n[tests/basic-tests-linux  ]   |         the default installed global OpenerDirector uses UnknownHandler to ensure\n[tests/basic-tests-linux  ]   |         this never happens).\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         In addition, if proxy settings are detected (for example, when a *_proxy\n[tests/basic-tests-linux  ]   |         environment variable like http_proxy is set), ProxyHandler is default\n[tests/basic-tests-linux  ]   |         installed and makes sure the requests are handled through the proxy.\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         '''\n[tests/basic-tests-linux  ]   |         global _opener\n[tests/basic-tests-linux  ]   |         if cafile or capath or cadefault:\n[tests/basic-tests-linux  ]   |             import warnings\n[tests/basic-tests-linux  ]   |             warnings.warn(\"cafile, capath and cadefault are deprecated, use a \"\n[tests/basic-tests-linux  ]   |                           \"custom context instead.\", DeprecationWarning, 2)\n[tests/basic-tests-linux  ]   |             if context is not None:\n[tests/basic-tests-linux  ]   |                 raise ValueError(\n[tests/basic-tests-linux  ]   |                     \"You can't pass both context and any of cafile, capath, and \"\n[tests/basic-tests-linux  ]   |                     \"cadefault\"\n[tests/basic-tests-linux  ]   |                 )\n[tests/basic-tests-linux  ]   |             if not _have_ssl:\n[tests/basic-tests-linux  ]   |                 raise ValueError('SSL support not available')\n[tests/basic-tests-linux  ]   |             context = ssl.create_default_context(ssl.Purpose.SERVER_AUTH,\n[tests/basic-tests-linux  ]   |                                                  cafile=cafile,\n[tests/basic-tests-linux  ]   |                                                  capath=capath)\n[tests/basic-tests-linux  ]   |             https_handler = HTTPSHandler(context=context)\n[tests/basic-tests-linux  ]   |             opener = build_opener(https_handler)\n[tests/basic-tests-linux  ]   |         elif context:\n[tests/basic-tests-linux  ]   |             https_handler = HTTPSHandler(context=context)\n[tests/basic-tests-linux  ]   |             opener = build_opener(https_handler)\n[tests/basic-tests-linux  ]   |         elif _opener is None:\n[tests/basic-tests-linux  ]   |             _opener = opener = build_opener()\n[tests/basic-tests-linux  ]   |         else:\n[tests/basic-tests-linux  ]   |             opener = _opener\n[tests/basic-tests-linux  ]   | >       return opener.open(url, data, timeout)\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/urllib/request.py:214: \n[tests/basic-tests-linux  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | self = <urllib.request.OpenerDirector object at 0x7f50c4ae5b80>\n[tests/basic-tests-linux  ]   | fullurl = <urllib.request.Request object at 0x7f50c4916a00>, data = None\n[tests/basic-tests-linux  ]   | timeout = 10\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   |     def open(self, fullurl, data=None, timeout=socket._GLOBAL_DEFAULT_TIMEOUT):\n[tests/basic-tests-linux  ]   |         # accept a URL or a Request object\n[tests/basic-tests-linux  ]   |         if isinstance(fullurl, str):\n[tests/basic-tests-linux  ]   |             req = Request(fullurl, data)\n[tests/basic-tests-linux  ]   |         else:\n[tests/basic-tests-linux  ]   |             req = fullurl\n[tests/basic-tests-linux  ]   |             if data is not None:\n[tests/basic-tests-linux  ]   |                 req.data = data\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         req.timeout = timeout\n[tests/basic-tests-linux  ]   |         protocol = req.type\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         # pre-process request\n[tests/basic-tests-linux  ]   |         meth_name = protocol+\"_request\"\n[tests/basic-tests-linux  ]   |         for processor in self.process_request.get(protocol, []):\n[tests/basic-tests-linux  ]   |             meth = getattr(processor, meth_name)\n[tests/basic-tests-linux  ]   |             req = meth(req)\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         sys.audit('urllib.Request', req.full_url, req.data, req.headers, req.get_method())\n[tests/basic-tests-linux  ]   |         response = self._open(req, data)\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         # post-process response\n[tests/basic-tests-linux  ]   |         meth_name = protocol+\"_response\"\n[tests/basic-tests-linux  ]   |         for processor in self.process_response.get(protocol, []):\n[tests/basic-tests-linux  ]   |             meth = getattr(processor, meth_name)\n[tests/basic-tests-linux  ]   | >           response = meth(req, response)\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/urllib/request.py:523: \n[tests/basic-tests-linux  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | self = <urllib.request.HTTPErrorProcessor object at 0x7f50c4ae5df0>\n[tests/basic-tests-linux  ]   | request = <urllib.request.Request object at 0x7f50c4916a00>\n[tests/basic-tests-linux  ]   | response = <http.client.HTTPResponse object at 0x7f50c4916af0>\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   |     def http_response(self, request, response):\n[tests/basic-tests-linux  ]   |         code, msg, hdrs = response.code, response.msg, response.info()\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         # According to RFC 2616, \"2xx\" code indicates that the client's\n[tests/basic-tests-linux  ]   |         # request was successfully received, understood, and accepted.\n[tests/basic-tests-linux  ]   |         if not (200 <= code < 300):\n[tests/basic-tests-linux  ]   | >           response = self.parent.error(\n[tests/basic-tests-linux  ]   |                 'http', request, response, code, msg, hdrs)\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/urllib/request.py:632: \n[tests/basic-tests-linux  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | self = <urllib.request.OpenerDirector object at 0x7f50c4ae5b80>, proto = 403\n[tests/basic-tests-linux  ]   | args = ({'default': [<urllib.request.HTTPDefaultErrorHandler object at 0x7f50c4ae5e50>], 301: [<urllib.request.HTTPRedirectHa...ult', <urllib.request.Request object at 0x7f50c4916a00>, <http.client.HTTPResponse object at 0x7f50c4916af0>, 403, ...)\n[tests/basic-tests-linux  ]   | dict = {'default': [<urllib.request.HTTPDefaultErrorHandler object at 0x7f50c4ae5e50>], 301: [<urllib.request.HTTPRedirectHan...PRedirectHandler object at 0x7f50c4ae5d60>], 303: [<urllib.request.HTTPRedirectHandler object at 0x7f50c4ae5d60>], ...}\n[tests/basic-tests-linux  ]   | meth_name = 'http_error_403', http_err = 1\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   |     def error(self, proto, *args):\n[tests/basic-tests-linux  ]   |         if proto in ('http', 'https'):\n[tests/basic-tests-linux  ]   |             # XXX http[s] protocols are special-cased\n[tests/basic-tests-linux  ]   |             dict = self.handle_error['http'] # https is not different than http\n[tests/basic-tests-linux  ]   |             proto = args[2]  # YUCK!\n[tests/basic-tests-linux  ]   |             meth_name = 'http_error_%s' % proto\n[tests/basic-tests-linux  ]   |             http_err = 1\n[tests/basic-tests-linux  ]   |             orig_args = args\n[tests/basic-tests-linux  ]   |         else:\n[tests/basic-tests-linux  ]   |             dict = self.handle_error\n[tests/basic-tests-linux  ]   |             meth_name = proto + '_error'\n[tests/basic-tests-linux  ]   |             http_err = 0\n[tests/basic-tests-linux  ]   |         args = (dict, proto, meth_name) + args\n[tests/basic-tests-linux  ]   |         result = self._call_chain(*args)\n[tests/basic-tests-linux  ]   |         if result:\n[tests/basic-tests-linux  ]   |             return result\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         if http_err:\n[tests/basic-tests-linux  ]   |             args = (dict, 'default', 'http_error_default') + orig_args\n[tests/basic-tests-linux  ]   | >           return self._call_chain(*args)\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/urllib/request.py:561: \n[tests/basic-tests-linux  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | self = <urllib.request.OpenerDirector object at 0x7f50c4ae5b80>\n[tests/basic-tests-linux  ]   | chain = {'default': [<urllib.request.HTTPDefaultErrorHandler object at 0x7f50c4ae5e50>], 301: [<urllib.request.HTTPRedirectHan...PRedirectHandler object at 0x7f50c4ae5d60>], 303: [<urllib.request.HTTPRedirectHandler object at 0x7f50c4ae5d60>], ...}\n[tests/basic-tests-linux  ]   | kind = 'default', meth_name = 'http_error_default'\n[tests/basic-tests-linux  ]   | args = (<urllib.request.Request object at 0x7f50c4916a00>, <http.client.HTTPResponse object at 0x7f50c4916af0>, 403, 'Forbidden', <http.client.HTTPMessage object at 0x7f50c4916f10>)\n[tests/basic-tests-linux  ]   | handlers = [<urllib.request.HTTPDefaultErrorHandler object at 0x7f50c4ae5e50>]\n[tests/basic-tests-linux  ]   | handler = <urllib.request.HTTPDefaultErrorHandler object at 0x7f50c4ae5e50>\n[tests/basic-tests-linux  ]   | func = <bound method HTTPDefaultErrorHandler.http_error_default of <urllib.request.HTTPDefaultErrorHandler object at 0x7f50c4ae5e50>>\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   |     def _call_chain(self, chain, kind, meth_name, *args):\n[tests/basic-tests-linux  ]   |         # Handlers raise an exception if no one else should try to handle\n[tests/basic-tests-linux  ]   |         # the request, or return None if they can't but another handler\n[tests/basic-tests-linux  ]   |         # could.  Otherwise, they return the response.\n[tests/basic-tests-linux  ]   |         handlers = chain.get(kind, ())\n[tests/basic-tests-linux  ]   |         for handler in handlers:\n[tests/basic-tests-linux  ]   |             func = getattr(handler, meth_name)\n[tests/basic-tests-linux  ]   | >           result = func(*args)\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/urllib/request.py:494: \n[tests/basic-tests-linux  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | self = <urllib.request.HTTPDefaultErrorHandler object at 0x7f50c4ae5e50>\n[tests/basic-tests-linux  ]   | req = <urllib.request.Request object at 0x7f50c4916a00>\n[tests/basic-tests-linux  ]   | fp = <http.client.HTTPResponse object at 0x7f50c4916af0>, code = 403\n[tests/basic-tests-linux  ]   | msg = 'Forbidden', hdrs = <http.client.HTTPMessage object at 0x7f50c4916f10>\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   |     def http_error_default(self, req, fp, code, msg, hdrs):\n[tests/basic-tests-linux  ]   | >       raise HTTPError(req.full_url, code, msg, hdrs, fp)\n[tests/basic-tests-linux  ]   | E       urllib.error.HTTPError: HTTP Error 403: Forbidden\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/urllib/request.py:641: HTTPError\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | During handling of the above exception, another exception occurred:\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   |     def test_goom():\n[tests/basic-tests-linux  ]   |         \"\"\"Test the Google's Multiple Books service.\"\"\"\n[tests/basic-tests-linux  ]   | >       assert (len(repr(goom.query('the old man and the sea'))) > 500) == True\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/xlcnd-isbnlib/isbnlib/test/test_goom.py:15: \n[tests/basic-tests-linux  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-linux  ]   | /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/xlcnd-isbnlib/isbnlib/dev/_decorators.py:27: in memoized_func\n[tests/basic-tests-linux  ]   |     value = func(*args, **kwargs)\n[tests/basic-tests-linux  ]   | /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/xlcnd-isbnlib/isbnlib/_goom.py:73: in query\n[tests/basic-tests-linux  ]   |     data = wquery(SERVICE_URL.format(words=words), UA)\n[tests/basic-tests-linux  ]   | /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/xlcnd-isbnlib/isbnlib/dev/webquery.py:65: in query\n[tests/basic-tests-linux  ]   |     wq = WEBQuery(url, user_agent, throttling)\n[tests/basic-tests-linux  ]   | /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/xlcnd-isbnlib/isbnlib/dev/webquery.py:32: in __init__\n[tests/basic-tests-linux  ]   |     self.data = webservice.query(service_url, ua)\n[tests/basic-tests-linux  ]   | /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/xlcnd-isbnlib/isbnlib/dev/_decorators.py:47: in memoized_func\n[tests/basic-tests-linux  ]   |     value = func(*args, **kwargs)\n[tests/basic-tests-linux  ]   | /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/xlcnd-isbnlib/isbnlib/dev/webservice.py:107: in query\n[tests/basic-tests-linux  ]   |     data = service.data()\n[tests/basic-tests-linux  ]   | /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/xlcnd-isbnlib/isbnlib/dev/webservice.py:87: in data\n[tests/basic-tests-linux  ]   |     res = self.response()\n[tests/basic-tests-linux  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | self = <isbnlib.dev.webservice.WEBService object at 0x7f50c4916250>\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   |     def response(self):\n[tests/basic-tests-linux  ]   |         \"\"\"Check errors on response.\"\"\"\n[tests/basic-tests-linux  ]   |         # TODO(http 102)\n[tests/basic-tests-linux  ]   |         # How to handle \"102 http's code\"?\n[tests/basic-tests-linux  ]   |         # - urlopen doesn't catch a 102 code!\n[tests/basic-tests-linux  ]   |         #   https://docs.python.org/3/howto/urllib2.html#error-codes\n[tests/basic-tests-linux  ]   |         try:\n[tests/basic-tests-linux  ]   |             response = urlopen(\n[tests/basic-tests-linux  ]   |                 self._request,\n[tests/basic-tests-linux  ]   |                 timeout=options.get('URLOPEN_TIMEOUT'),\n[tests/basic-tests-linux  ]   |             )\n[tests/basic-tests-linux  ]   |             LOGGER.debug('Request headers:\\n%s', self._request.header_items())\n[tests/basic-tests-linux  ]   |         except HTTPError as e:  # pragma: no cover\n[tests/basic-tests-linux  ]   |             LOGGER.critical(\n[tests/basic-tests-linux  ]   |                 'ISBNLibHTTPError for %s with code %s [%s]',\n[tests/basic-tests-linux  ]   |                 self._url,\n[tests/basic-tests-linux  ]   |                 e.code,\n[tests/basic-tests-linux  ]   |                 e.msg,\n[tests/basic-tests-linux  ]   |             )\n[tests/basic-tests-linux  ]   |             if e.code in (401, 403, 429):\n[tests/basic-tests-linux  ]   | >               raise ISBNLibHTTPError('%s Are you making many requests?' %\n[tests/basic-tests-linux  ]   |                                        e.code)\n[tests/basic-tests-linux  ]   | E               isbnlib.dev._exceptions.ISBNLibHTTPError: an HTTP error has ocurred (403 Are you making many requests?)\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/xlcnd-isbnlib/isbnlib/dev/webservice.py:63: ISBNLibHTTPError\n[tests/basic-tests-linux  ]   | ------------------------------ Captured log call -------------------------------\n[tests/basic-tests-linux  ]   | CRITICAL isbnlib.dev.webservice:webservice.py:56 ISBNLibHTTPError for https://www.googleapis.com/books/v1/volumes?q=the%20old%20man%20and%20the%20sea&fields=items/volumeInfo(title,authors,publisher,publishedDate,language,industryIdentifiers)&maxResults=10 with code 403 [Forbidden]\n[tests/basic-tests-linux  ]   | __________________________________ test_query __________________________________\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | self = <isbnlib.dev.webservice.WEBService object at 0x7f50c49f8c40>\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   |     def response(self):\n[tests/basic-tests-linux  ]   |         \"\"\"Check errors on response.\"\"\"\n[tests/basic-tests-linux  ]   |         # TODO(http 102)\n[tests/basic-tests-linux  ]   |         # How to handle \"102 http's code\"?\n[tests/basic-tests-linux  ]   |         # - urlopen doesn't catch a 102 code!\n[tests/basic-tests-linux  ]   |         #   https://docs.python.org/3/howto/urllib2.html#error-codes\n[tests/basic-tests-linux  ]   |         try:\n[tests/basic-tests-linux  ]   | >           response = urlopen(\n[tests/basic-tests-linux  ]   |                 self._request,\n[tests/basic-tests-linux  ]   |                 timeout=options.get('URLOPEN_TIMEOUT'),\n[tests/basic-tests-linux  ]   |             )\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/xlcnd-isbnlib/isbnlib/dev/webservice.py:50: \n[tests/basic-tests-linux  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | url = <urllib.request.Request object at 0x7f50c49f8b80>, data = None\n[tests/basic-tests-linux  ]   | timeout = 10\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   |     def urlopen(url, data=None, timeout=socket._GLOBAL_DEFAULT_TIMEOUT,\n[tests/basic-tests-linux  ]   |                 *, cafile=None, capath=None, cadefault=False, context=None):\n[tests/basic-tests-linux  ]   |         '''Open the URL url, which can be either a string or a Request object.\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         *data* must be an object specifying additional data to be sent to\n[tests/basic-tests-linux  ]   |         the server, or None if no such data is needed.  See Request for\n[tests/basic-tests-linux  ]   |         details.\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         urllib.request module uses HTTP/1.1 and includes a \"Connection:close\"\n[tests/basic-tests-linux  ]   |         header in its HTTP requests.\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         The optional *timeout* parameter specifies a timeout in seconds for\n[tests/basic-tests-linux  ]   |         blocking operations like the connection attempt (if not specified, the\n[tests/basic-tests-linux  ]   |         global default timeout setting will be used). This only works for HTTP,\n[tests/basic-tests-linux  ]   |         HTTPS and FTP connections.\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         If *context* is specified, it must be a ssl.SSLContext instance describing\n[tests/basic-tests-linux  ]   |         the various SSL options. See HTTPSConnection for more details.\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         The optional *cafile* and *capath* parameters specify a set of trusted CA\n[tests/basic-tests-linux  ]   |         certificates for HTTPS requests. cafile should point to a single file\n[tests/basic-tests-linux  ]   |         containing a bundle of CA certificates, whereas capath should point to a\n[tests/basic-tests-linux  ]   |         directory of hashed certificate files. More information can be found in\n[tests/basic-tests-linux  ]   |         ssl.SSLContext.load_verify_locations().\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         The *cadefault* parameter is ignored.\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         This function always returns an object which can work as a\n[tests/basic-tests-linux  ]   |         context manager and has the properties url, headers, and status.\n[tests/basic-tests-linux  ]   |         See urllib.response.addinfourl for more detail on these properties.\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         For HTTP and HTTPS URLs, this function returns a http.client.HTTPResponse\n[tests/basic-tests-linux  ]   |         object slightly modified. In addition to the three new methods above, the\n[tests/basic-tests-linux  ]   |         msg attribute contains the same information as the reason attribute ---\n[tests/basic-tests-linux  ]   |         the reason phrase returned by the server --- instead of the response\n[tests/basic-tests-linux  ]   |         headers as it is specified in the documentation for HTTPResponse.\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         For FTP, file, and data URLs and requests explicitly handled by legacy\n[tests/basic-tests-linux  ]   |         URLopener and FancyURLopener classes, this function returns a\n[tests/basic-tests-linux  ]   |         urllib.response.addinfourl object.\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         Note that None may be returned if no handler handles the request (though\n[tests/basic-tests-linux  ]   |         the default installed global OpenerDirector uses UnknownHandler to ensure\n[tests/basic-tests-linux  ]   |         this never happens).\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         In addition, if proxy settings are detected (for example, when a *_proxy\n[tests/basic-tests-linux  ]   |         environment variable like http_proxy is set), ProxyHandler is default\n[tests/basic-tests-linux  ]   |         installed and makes sure the requests are handled through the proxy.\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         '''\n[tests/basic-tests-linux  ]   |         global _opener\n[tests/basic-tests-linux  ]   |         if cafile or capath or cadefault:\n[tests/basic-tests-linux  ]   |             import warnings\n[tests/basic-tests-linux  ]   |             warnings.warn(\"cafile, capath and cadefault are deprecated, use a \"\n[tests/basic-tests-linux  ]   |                           \"custom context instead.\", DeprecationWarning, 2)\n[tests/basic-tests-linux  ]   |             if context is not None:\n[tests/basic-tests-linux  ]   |                 raise ValueError(\n[tests/basic-tests-linux  ]   |                     \"You can't pass both context and any of cafile, capath, and \"\n[tests/basic-tests-linux  ]   |                     \"cadefault\"\n[tests/basic-tests-linux  ]   |                 )\n[tests/basic-tests-linux  ]   |             if not _have_ssl:\n[tests/basic-tests-linux  ]   |                 raise ValueError('SSL support not available')\n[tests/basic-tests-linux  ]   |             context = ssl.create_default_context(ssl.Purpose.SERVER_AUTH,\n[tests/basic-tests-linux  ]   |                                                  cafile=cafile,\n[tests/basic-tests-linux  ]   |                                                  capath=capath)\n[tests/basic-tests-linux  ]   |             https_handler = HTTPSHandler(context=context)\n[tests/basic-tests-linux  ]   |             opener = build_opener(https_handler)\n[tests/basic-tests-linux  ]   |         elif context:\n[tests/basic-tests-linux  ]   |             https_handler = HTTPSHandler(context=context)\n[tests/basic-tests-linux  ]   |             opener = build_opener(https_handler)\n[tests/basic-tests-linux  ]   |         elif _opener is None:\n[tests/basic-tests-linux  ]   |             _opener = opener = build_opener()\n[tests/basic-tests-linux  ]   |         else:\n[tests/basic-tests-linux  ]   |             opener = _opener\n[tests/basic-tests-linux  ]   | >       return opener.open(url, data, timeout)\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/urllib/request.py:214: \n[tests/basic-tests-linux  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | self = <urllib.request.OpenerDirector object at 0x7f50c4ae5b80>\n[tests/basic-tests-linux  ]   | fullurl = <urllib.request.Request object at 0x7f50c49f8b80>, data = None\n[tests/basic-tests-linux  ]   | timeout = 10\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   |     def open(self, fullurl, data=None, timeout=socket._GLOBAL_DEFAULT_TIMEOUT):\n[tests/basic-tests-linux  ]   |         # accept a URL or a Request object\n[tests/basic-tests-linux  ]   |         if isinstance(fullurl, str):\n[tests/basic-tests-linux  ]   |             req = Request(fullurl, data)\n[tests/basic-tests-linux  ]   |         else:\n[tests/basic-tests-linux  ]   |             req = fullurl\n[tests/basic-tests-linux  ]   |             if data is not None:\n[tests/basic-tests-linux  ]   |                 req.data = data\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         req.timeout = timeout\n[tests/basic-tests-linux  ]   |         protocol = req.type\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         # pre-process request\n[tests/basic-tests-linux  ]   |         meth_name = protocol+\"_request\"\n[tests/basic-tests-linux  ]   |         for processor in self.process_request.get(protocol, []):\n[tests/basic-tests-linux  ]   |             meth = getattr(processor, meth_name)\n[tests/basic-tests-linux  ]   |             req = meth(req)\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         sys.audit('urllib.Request', req.full_url, req.data, req.headers, req.get_method())\n[tests/basic-tests-linux  ]   |         response = self._open(req, data)\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         # post-process response\n[tests/basic-tests-linux  ]   |         meth_name = protocol+\"_response\"\n[tests/basic-tests-linux  ]   |         for processor in self.process_response.get(protocol, []):\n[tests/basic-tests-linux  ]   |             meth = getattr(processor, meth_name)\n[tests/basic-tests-linux  ]   | >           response = meth(req, response)\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/urllib/request.py:523: \n[tests/basic-tests-linux  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | self = <urllib.request.HTTPErrorProcessor object at 0x7f50c4ae5df0>\n[tests/basic-tests-linux  ]   | request = <urllib.request.Request object at 0x7f50c49f8b80>\n[tests/basic-tests-linux  ]   | response = <http.client.HTTPResponse object at 0x7f50c49f8100>\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   |     def http_response(self, request, response):\n[tests/basic-tests-linux  ]   |         code, msg, hdrs = response.code, response.msg, response.info()\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         # According to RFC 2616, \"2xx\" code indicates that the client's\n[tests/basic-tests-linux  ]   |         # request was successfully received, understood, and accepted.\n[tests/basic-tests-linux  ]   |         if not (200 <= code < 300):\n[tests/basic-tests-linux  ]   | >           response = self.parent.error(\n[tests/basic-tests-linux  ]   |                 'http', request, response, code, msg, hdrs)\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/urllib/request.py:632: \n[tests/basic-tests-linux  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | self = <urllib.request.OpenerDirector object at 0x7f50c4ae5b80>, proto = 403\n[tests/basic-tests-linux  ]   | args = ({'default': [<urllib.request.HTTPDefaultErrorHandler object at 0x7f50c4ae5e50>], 301: [<urllib.request.HTTPRedirectHa...ult', <urllib.request.Request object at 0x7f50c49f8b80>, <http.client.HTTPResponse object at 0x7f50c49f8100>, 403, ...)\n[tests/basic-tests-linux  ]   | dict = {'default': [<urllib.request.HTTPDefaultErrorHandler object at 0x7f50c4ae5e50>], 301: [<urllib.request.HTTPRedirectHan...PRedirectHandler object at 0x7f50c4ae5d60>], 303: [<urllib.request.HTTPRedirectHandler object at 0x7f50c4ae5d60>], ...}\n[tests/basic-tests-linux  ]   | meth_name = 'http_error_403', http_err = 1\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   |     def error(self, proto, *args):\n[tests/basic-tests-linux  ]   |         if proto in ('http', 'https'):\n[tests/basic-tests-linux  ]   |             # XXX http[s] protocols are special-cased\n[tests/basic-tests-linux  ]   |             dict = self.handle_error['http'] # https is not different than http\n[tests/basic-tests-linux  ]   |             proto = args[2]  # YUCK!\n[tests/basic-tests-linux  ]   |             meth_name = 'http_error_%s' % proto\n[tests/basic-tests-linux  ]   |             http_err = 1\n[tests/basic-tests-linux  ]   |             orig_args = args\n[tests/basic-tests-linux  ]   |         else:\n[tests/basic-tests-linux  ]   |             dict = self.handle_error\n[tests/basic-tests-linux  ]   |             meth_name = proto + '_error'\n[tests/basic-tests-linux  ]   |             http_err = 0\n[tests/basic-tests-linux  ]   |         args = (dict, proto, meth_name) + args\n[tests/basic-tests-linux  ]   |         result = self._call_chain(*args)\n[tests/basic-tests-linux  ]   |         if result:\n[tests/basic-tests-linux  ]   |             return result\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         if http_err:\n[tests/basic-tests-linux  ]   |             args = (dict, 'default', 'http_error_default') + orig_args\n[tests/basic-tests-linux  ]   | >           return self._call_chain(*args)\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/urllib/request.py:561: \n[tests/basic-tests-linux  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | self = <urllib.request.OpenerDirector object at 0x7f50c4ae5b80>\n[tests/basic-tests-linux  ]   | chain = {'default': [<urllib.request.HTTPDefaultErrorHandler object at 0x7f50c4ae5e50>], 301: [<urllib.request.HTTPRedirectHan...PRedirectHandler object at 0x7f50c4ae5d60>], 303: [<urllib.request.HTTPRedirectHandler object at 0x7f50c4ae5d60>], ...}\n[tests/basic-tests-linux  ]   | kind = 'default', meth_name = 'http_error_default'\n[tests/basic-tests-linux  ]   | args = (<urllib.request.Request object at 0x7f50c49f8b80>, <http.client.HTTPResponse object at 0x7f50c49f8100>, 403, 'Forbidden', <http.client.HTTPMessage object at 0x7f50c49f8d60>)\n[tests/basic-tests-linux  ]   | handlers = [<urllib.request.HTTPDefaultErrorHandler object at 0x7f50c4ae5e50>]\n[tests/basic-tests-linux  ]   | handler = <urllib.request.HTTPDefaultErrorHandler object at 0x7f50c4ae5e50>\n[tests/basic-tests-linux  ]   | func = <bound method HTTPDefaultErrorHandler.http_error_default of <urllib.request.HTTPDefaultErrorHandler object at 0x7f50c4ae5e50>>\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   |     def _call_chain(self, chain, kind, meth_name, *args):\n[tests/basic-tests-linux  ]   |         # Handlers raise an exception if no one else should try to handle\n[tests/basic-tests-linux  ]   |         # the request, or return None if they can't but another handler\n[tests/basic-tests-linux  ]   |         # could.  Otherwise, they return the response.\n[tests/basic-tests-linux  ]   |         handlers = chain.get(kind, ())\n[tests/basic-tests-linux  ]   |         for handler in handlers:\n[tests/basic-tests-linux  ]   |             func = getattr(handler, meth_name)\n[tests/basic-tests-linux  ]   | >           result = func(*args)\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/urllib/request.py:494: \n[tests/basic-tests-linux  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | self = <urllib.request.HTTPDefaultErrorHandler object at 0x7f50c4ae5e50>\n[tests/basic-tests-linux  ]   | req = <urllib.request.Request object at 0x7f50c49f8b80>\n[tests/basic-tests-linux  ]   | fp = <http.client.HTTPResponse object at 0x7f50c49f8100>, code = 403\n[tests/basic-tests-linux  ]   | msg = 'Forbidden', hdrs = <http.client.HTTPMessage object at 0x7f50c49f8d60>\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   |     def http_error_default(self, req, fp, code, msg, hdrs):\n[tests/basic-tests-linux  ]   | >       raise HTTPError(req.full_url, code, msg, hdrs, fp)\n[tests/basic-tests-linux  ]   | E       urllib.error.HTTPError: HTTP Error 403: Forbidden\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/urllib/request.py:641: HTTPError\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | During handling of the above exception, another exception occurred:\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   |     def test_query():\n[tests/basic-tests-linux  ]   |         \"\"\"Test the query of metadata with 'low level' queries.\"\"\"\n[tests/basic-tests-linux  ]   |         # test query from metadata\n[tests/basic-tests-linux  ]   |         with pytest.raises(Exception):\n[tests/basic-tests-linux  ]   |             query('9781849692341', 'goob')\n[tests/basic-tests-linux  ]   |         with pytest.raises(Exception):\n[tests/basic-tests-linux  ]   |             query('9781849692343', 'goob')\n[tests/basic-tests-linux  ]   |         # assert_equals(query('9789934015960', 'goob'), {})\n[tests/basic-tests-linux  ]   | >       assert (len(repr(query('9780321534965'))) > 100) == True\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/xlcnd-isbnlib/isbnlib/test/test_metadata.py:23: \n[tests/basic-tests-linux  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-linux  ]   | /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/xlcnd-isbnlib/isbnlib/dev/_decorators.py:27: in memoized_func\n[tests/basic-tests-linux  ]   |     value = func(*args, **kwargs)\n[tests/basic-tests-linux  ]   | /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/xlcnd-isbnlib/isbnlib/_metadata.py:33: in query\n[tests/basic-tests-linux  ]   |     meta = services[service](isbn)\n[tests/basic-tests-linux  ]   | /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/xlcnd-isbnlib/isbnlib/_goob.py:70: in query\n[tests/basic-tests-linux  ]   |     data = wquery(SERVICE_URL.format(isbn='isbn:' + isbn), user_agent=UA)\n[tests/basic-tests-linux  ]   | /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/xlcnd-isbnlib/isbnlib/dev/webquery.py:65: in query\n[tests/basic-tests-linux  ]   |     wq = WEBQuery(url, user_agent, throttling)\n[tests/basic-tests-linux  ]   | /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/xlcnd-isbnlib/isbnlib/dev/webquery.py:32: in __init__\n[tests/basic-tests-linux  ]   |     self.data = webservice.query(service_url, ua)\n[tests/basic-tests-linux  ]   | /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/xlcnd-isbnlib/isbnlib/dev/_decorators.py:47: in memoized_func\n[tests/basic-tests-linux  ]   |     value = func(*args, **kwargs)\n[tests/basic-tests-linux  ]   | /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/xlcnd-isbnlib/isbnlib/dev/webservice.py:107: in query\n[tests/basic-tests-linux  ]   |     data = service.data()\n[tests/basic-tests-linux  ]   | /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/xlcnd-isbnlib/isbnlib/dev/webservice.py:87: in data\n[tests/basic-tests-linux  ]   |     res = self.response()\n[tests/basic-tests-linux  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | self = <isbnlib.dev.webservice.WEBService object at 0x7f50c49f8c40>\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   |     def response(self):\n[tests/basic-tests-linux  ]   |         \"\"\"Check errors on response.\"\"\"\n[tests/basic-tests-linux  ]   |         # TODO(http 102)\n[tests/basic-tests-linux  ]   |         # How to handle \"102 http's code\"?\n[tests/basic-tests-linux  ]   |         # - urlopen doesn't catch a 102 code!\n[tests/basic-tests-linux  ]   |         #   https://docs.python.org/3/howto/urllib2.html#error-codes\n[tests/basic-tests-linux  ]   |         try:\n[tests/basic-tests-linux  ]   |             response = urlopen(\n[tests/basic-tests-linux  ]   |                 self._request,\n[tests/basic-tests-linux  ]   |                 timeout=options.get('URLOPEN_TIMEOUT'),\n[tests/basic-tests-linux  ]   |             )\n[tests/basic-tests-linux  ]   |             LOGGER.debug('Request headers:\\n%s', self._request.header_items())\n[tests/basic-tests-linux  ]   |         except HTTPError as e:  # pragma: no cover\n[tests/basic-tests-linux  ]   |             LOGGER.critical(\n[tests/basic-tests-linux  ]   |                 'ISBNLibHTTPError for %s with code %s [%s]',\n[tests/basic-tests-linux  ]   |                 self._url,\n[tests/basic-tests-linux  ]   |                 e.code,\n[tests/basic-tests-linux  ]   |                 e.msg,\n[tests/basic-tests-linux  ]   |             )\n[tests/basic-tests-linux  ]   |             if e.code in (401, 403, 429):\n[tests/basic-tests-linux  ]   | >               raise ISBNLibHTTPError('%s Are you making many requests?' %\n[tests/basic-tests-linux  ]   |                                        e.code)\n[tests/basic-tests-linux  ]   | E               isbnlib.dev._exceptions.ISBNLibHTTPError: an HTTP error has ocurred (403 Are you making many requests?)\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/xlcnd-isbnlib/isbnlib/dev/webservice.py:63: ISBNLibHTTPError\n[tests/basic-tests-linux  ]   | ------------------------------ Captured log call -------------------------------\n[tests/basic-tests-linux  ]   | CRITICAL isbnlib._metadata:_metadata.py:25 9781849692341 is not a valid ISBN\n[tests/basic-tests-linux  ]   | CRITICAL isbnlib._metadata:_metadata.py:25 9781849692343 is not a valid ISBN\n[tests/basic-tests-linux  ]   | CRITICAL isbnlib.dev.webservice:webservice.py:56 ISBNLibHTTPError for https://www.googleapis.com/books/v1/volumes?q=isbn:9780321534965&fields=items/volumeInfo(title,subtitle,authors,publisher,publishedDate,language,industryIdentifiers,description,imageLinks)&maxResults=1 with code 403 [Forbidden]\n[tests/basic-tests-linux  ]   | ________________________________ test_ext_meta _________________________________\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | self = <isbnlib.dev.webservice.WEBService object at 0x7f50c49a4e50>\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   |     def response(self):\n[tests/basic-tests-linux  ]   |         \"\"\"Check errors on response.\"\"\"\n[tests/basic-tests-linux  ]   |         # TODO(http 102)\n[tests/basic-tests-linux  ]   |         # How to handle \"102 http's code\"?\n[tests/basic-tests-linux  ]   |         # - urlopen doesn't catch a 102 code!\n[tests/basic-tests-linux  ]   |         #   https://docs.python.org/3/howto/urllib2.html#error-codes\n[tests/basic-tests-linux  ]   |         try:\n[tests/basic-tests-linux  ]   | >           response = urlopen(\n[tests/basic-tests-linux  ]   |                 self._request,\n[tests/basic-tests-linux  ]   |                 timeout=options.get('URLOPEN_TIMEOUT'),\n[tests/basic-tests-linux  ]   |             )\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/xlcnd-isbnlib/isbnlib/dev/webservice.py:50: \n[tests/basic-tests-linux  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | url = <urllib.request.Request object at 0x7f50c49a44f0>, data = None\n[tests/basic-tests-linux  ]   | timeout = 10\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   |     def urlopen(url, data=None, timeout=socket._GLOBAL_DEFAULT_TIMEOUT,\n[tests/basic-tests-linux  ]   |                 *, cafile=None, capath=None, cadefault=False, context=None):\n[tests/basic-tests-linux  ]   |         '''Open the URL url, which can be either a string or a Request object.\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         *data* must be an object specifying additional data to be sent to\n[tests/basic-tests-linux  ]   |         the server, or None if no such data is needed.  See Request for\n[tests/basic-tests-linux  ]   |         details.\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         urllib.request module uses HTTP/1.1 and includes a \"Connection:close\"\n[tests/basic-tests-linux  ]   |         header in its HTTP requests.\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         The optional *timeout* parameter specifies a timeout in seconds for\n[tests/basic-tests-linux  ]   |         blocking operations like the connection attempt (if not specified, the\n[tests/basic-tests-linux  ]   |         global default timeout setting will be used). This only works for HTTP,\n[tests/basic-tests-linux  ]   |         HTTPS and FTP connections.\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         If *context* is specified, it must be a ssl.SSLContext instance describing\n[tests/basic-tests-linux  ]   |         the various SSL options. See HTTPSConnection for more details.\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         The optional *cafile* and *capath* parameters specify a set of trusted CA\n[tests/basic-tests-linux  ]   |         certificates for HTTPS requests. cafile should point to a single file\n[tests/basic-tests-linux  ]   |         containing a bundle of CA certificates, whereas capath should point to a\n[tests/basic-tests-linux  ]   |         directory of hashed certificate files. More information can be found in\n[tests/basic-tests-linux  ]   |         ssl.SSLContext.load_verify_locations().\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         The *cadefault* parameter is ignored.\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         This function always returns an object which can work as a\n[tests/basic-tests-linux  ]   |         context manager and has the properties url, headers, and status.\n[tests/basic-tests-linux  ]   |         See urllib.response.addinfourl for more detail on these properties.\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         For HTTP and HTTPS URLs, this function returns a http.client.HTTPResponse\n[tests/basic-tests-linux  ]   |         object slightly modified. In addition to the three new methods above, the\n[tests/basic-tests-linux  ]   |         msg attribute contains the same information as the reason attribute ---\n[tests/basic-tests-linux  ]   |         the reason phrase returned by the server --- instead of the response\n[tests/basic-tests-linux  ]   |         headers as it is specified in the documentation for HTTPResponse.\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         For FTP, file, and data URLs and requests explicitly handled by legacy\n[tests/basic-tests-linux  ]   |         URLopener and FancyURLopener classes, this function returns a\n[tests/basic-tests-linux  ]   |         urllib.response.addinfourl object.\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         Note that None may be returned if no handler handles the request (though\n[tests/basic-tests-linux  ]   |         the default installed global OpenerDirector uses UnknownHandler to ensure\n[tests/basic-tests-linux  ]   |         this never happens).\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         In addition, if proxy settings are detected (for example, when a *_proxy\n[tests/basic-tests-linux  ]   |         environment variable like http_proxy is set), ProxyHandler is default\n[tests/basic-tests-linux  ]   |         installed and makes sure the requests are handled through the proxy.\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         '''\n[tests/basic-tests-linux  ]   |         global _opener\n[tests/basic-tests-linux  ]   |         if cafile or capath or cadefault:\n[tests/basic-tests-linux  ]   |             import warnings\n[tests/basic-tests-linux  ]   |             warnings.warn(\"cafile, capath and cadefault are deprecated, use a \"\n[tests/basic-tests-linux  ]   |                           \"custom context instead.\", DeprecationWarning, 2)\n[tests/basic-tests-linux  ]   |             if context is not None:\n[tests/basic-tests-linux  ]   |                 raise ValueError(\n[tests/basic-tests-linux  ]   |                     \"You can't pass both context and any of cafile, capath, and \"\n[tests/basic-tests-linux  ]   |                     \"cadefault\"\n[tests/basic-tests-linux  ]   |                 )\n[tests/basic-tests-linux  ]   |             if not _have_ssl:\n[tests/basic-tests-linux  ]   |                 raise ValueError('SSL support not available')\n[tests/basic-tests-linux  ]   |             context = ssl.create_default_context(ssl.Purpose.SERVER_AUTH,\n[tests/basic-tests-linux  ]   |                                                  cafile=cafile,\n[tests/basic-tests-linux  ]   |                                                  capath=capath)\n[tests/basic-tests-linux  ]   |             https_handler = HTTPSHandler(context=context)\n[tests/basic-tests-linux  ]   |             opener = build_opener(https_handler)\n[tests/basic-tests-linux  ]   |         elif context:\n[tests/basic-tests-linux  ]   |             https_handler = HTTPSHandler(context=context)\n[tests/basic-tests-linux  ]   |             opener = build_opener(https_handler)\n[tests/basic-tests-linux  ]   |         elif _opener is None:\n[tests/basic-tests-linux  ]   |             _opener = opener = build_opener()\n[tests/basic-tests-linux  ]   |         else:\n[tests/basic-tests-linux  ]   |             opener = _opener\n[tests/basic-tests-linux  ]   | >       return opener.open(url, data, timeout)\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/urllib/request.py:214: \n[tests/basic-tests-linux  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | self = <urllib.request.OpenerDirector object at 0x7f50c4ae5b80>\n[tests/basic-tests-linux  ]   | fullurl = <urllib.request.Request object at 0x7f50c49a44f0>, data = None\n[tests/basic-tests-linux  ]   | timeout = 10\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   |     def open(self, fullurl, data=None, timeout=socket._GLOBAL_DEFAULT_TIMEOUT):\n[tests/basic-tests-linux  ]   |         # accept a URL or a Request object\n[tests/basic-tests-linux  ]   |         if isinstance(fullurl, str):\n[tests/basic-tests-linux  ]   |             req = Request(fullurl, data)\n[tests/basic-tests-linux  ]   |         else:\n[tests/basic-tests-linux  ]   |             req = fullurl\n[tests/basic-tests-linux  ]   |             if data is not None:\n[tests/basic-tests-linux  ]   |                 req.data = data\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         req.timeout = timeout\n[tests/basic-tests-linux  ]   |         protocol = req.type\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         # pre-process request\n[tests/basic-tests-linux  ]   |         meth_name = protocol+\"_request\"\n[tests/basic-tests-linux  ]   |         for processor in self.process_request.get(protocol, []):\n[tests/basic-tests-linux  ]   |             meth = getattr(processor, meth_name)\n[tests/basic-tests-linux  ]   |             req = meth(req)\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         sys.audit('urllib.Request', req.full_url, req.data, req.headers, req.get_method())\n[tests/basic-tests-linux  ]   |         response = self._open(req, data)\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         # post-process response\n[tests/basic-tests-linux  ]   |         meth_name = protocol+\"_response\"\n[tests/basic-tests-linux  ]   |         for processor in self.process_response.get(protocol, []):\n[tests/basic-tests-linux  ]   |             meth = getattr(processor, meth_name)\n[tests/basic-tests-linux  ]   | >           response = meth(req, response)\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/urllib/request.py:523: \n[tests/basic-tests-linux  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | self = <urllib.request.HTTPErrorProcessor object at 0x7f50c4ae5df0>\n[tests/basic-tests-linux  ]   | request = <urllib.request.Request object at 0x7f50c49a44f0>\n[tests/basic-tests-linux  ]   | response = <http.client.HTTPResponse object at 0x7f50c49a48b0>\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   |     def http_response(self, request, response):\n[tests/basic-tests-linux  ]   |         code, msg, hdrs = response.code, response.msg, response.info()\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         # According to RFC 2616, \"2xx\" code indicates that the client's\n[tests/basic-tests-linux  ]   |         # request was successfully received, understood, and accepted.\n[tests/basic-tests-linux  ]   |         if not (200 <= code < 300):\n[tests/basic-tests-linux  ]   | >           response = self.parent.error(\n[tests/basic-tests-linux  ]   |                 'http', request, response, code, msg, hdrs)\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/urllib/request.py:632: \n[tests/basic-tests-linux  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | self = <urllib.request.OpenerDirector object at 0x7f50c4ae5b80>, proto = 403\n[tests/basic-tests-linux  ]   | args = ({'default': [<urllib.request.HTTPDefaultErrorHandler object at 0x7f50c4ae5e50>], 301: [<urllib.request.HTTPRedirectHa...ult', <urllib.request.Request object at 0x7f50c49a44f0>, <http.client.HTTPResponse object at 0x7f50c49a48b0>, 403, ...)\n[tests/basic-tests-linux  ]   | dict = {'default': [<urllib.request.HTTPDefaultErrorHandler object at 0x7f50c4ae5e50>], 301: [<urllib.request.HTTPRedirectHan...PRedirectHandler object at 0x7f50c4ae5d60>], 303: [<urllib.request.HTTPRedirectHandler object at 0x7f50c4ae5d60>], ...}\n[tests/basic-tests-linux  ]   | meth_name = 'http_error_403', http_err = 1\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   |     def error(self, proto, *args):\n[tests/basic-tests-linux  ]   |         if proto in ('http', 'https'):\n[tests/basic-tests-linux  ]   |             # XXX http[s] protocols are special-cased\n[tests/basic-tests-linux  ]   |             dict = self.handle_error['http'] # https is not different than http\n[tests/basic-tests-linux  ]   |             proto = args[2]  # YUCK!\n[tests/basic-tests-linux  ]   |             meth_name = 'http_error_%s' % proto\n[tests/basic-tests-linux  ]   |             http_err = 1\n[tests/basic-tests-linux  ]   |             orig_args = args\n[tests/basic-tests-linux  ]   |         else:\n[tests/basic-tests-linux  ]   |             dict = self.handle_error\n[tests/basic-tests-linux  ]   |             meth_name = proto + '_error'\n[tests/basic-tests-linux  ]   |             http_err = 0\n[tests/basic-tests-linux  ]   |         args = (dict, proto, meth_name) + args\n[tests/basic-tests-linux  ]   |         result = self._call_chain(*args)\n[tests/basic-tests-linux  ]   |         if result:\n[tests/basic-tests-linux  ]   |             return result\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         if http_err:\n[tests/basic-tests-linux  ]   |             args = (dict, 'default', 'http_error_default') + orig_args\n[tests/basic-tests-linux  ]   | >           return self._call_chain(*args)\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/urllib/request.py:561: \n[tests/basic-tests-linux  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | self = <urllib.request.OpenerDirector object at 0x7f50c4ae5b80>\n[tests/basic-tests-linux  ]   | chain = {'default': [<urllib.request.HTTPDefaultErrorHandler object at 0x7f50c4ae5e50>], 301: [<urllib.request.HTTPRedirectHan...PRedirectHandler object at 0x7f50c4ae5d60>], 303: [<urllib.request.HTTPRedirectHandler object at 0x7f50c4ae5d60>], ...}\n[tests/basic-tests-linux  ]   | kind = 'default', meth_name = 'http_error_default'\n[tests/basic-tests-linux  ]   | args = (<urllib.request.Request object at 0x7f50c49a44f0>, <http.client.HTTPResponse object at 0x7f50c49a48b0>, 403, 'Forbidden', <http.client.HTTPMessage object at 0x7f50c49a46a0>)\n[tests/basic-tests-linux  ]   | handlers = [<urllib.request.HTTPDefaultErrorHandler object at 0x7f50c4ae5e50>]\n[tests/basic-tests-linux  ]   | handler = <urllib.request.HTTPDefaultErrorHandler object at 0x7f50c4ae5e50>\n[tests/basic-tests-linux  ]   | func = <bound method HTTPDefaultErrorHandler.http_error_default of <urllib.request.HTTPDefaultErrorHandler object at 0x7f50c4ae5e50>>\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   |     def _call_chain(self, chain, kind, meth_name, *args):\n[tests/basic-tests-linux  ]   |         # Handlers raise an exception if no one else should try to handle\n[tests/basic-tests-linux  ]   |         # the request, or return None if they can't but another handler\n[tests/basic-tests-linux  ]   |         # could.  Otherwise, they return the response.\n[tests/basic-tests-linux  ]   |         handlers = chain.get(kind, ())\n[tests/basic-tests-linux  ]   |         for handler in handlers:\n[tests/basic-tests-linux  ]   |             func = getattr(handler, meth_name)\n[tests/basic-tests-linux  ]   | >           result = func(*args)\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/urllib/request.py:494: \n[tests/basic-tests-linux  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | self = <urllib.request.HTTPDefaultErrorHandler object at 0x7f50c4ae5e50>\n[tests/basic-tests-linux  ]   | req = <urllib.request.Request object at 0x7f50c49a44f0>\n[tests/basic-tests-linux  ]   | fp = <http.client.HTTPResponse object at 0x7f50c49a48b0>, code = 403\n[tests/basic-tests-linux  ]   | msg = 'Forbidden', hdrs = <http.client.HTTPMessage object at 0x7f50c49a46a0>\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   |     def http_error_default(self, req, fp, code, msg, hdrs):\n[tests/basic-tests-linux  ]   | >       raise HTTPError(req.full_url, code, msg, hdrs, fp)\n[tests/basic-tests-linux  ]   | E       urllib.error.HTTPError: HTTP Error 403: Forbidden\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/urllib/request.py:641: HTTPError\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | During handling of the above exception, another exception occurred:\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   |     def test_ext_meta():\n[tests/basic-tests-linux  ]   |         \"\"\"Test the query of metadata with 'high level' meta function.\"\"\"\n[tests/basic-tests-linux  ]   |         # test meta from core\n[tests/basic-tests-linux  ]   | >       assert (len(repr(meta('9780321534965', 'goob'))) > 100) == True\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/xlcnd-isbnlib/isbnlib/test/test_metadata.py:36: \n[tests/basic-tests-linux  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-linux  ]   | /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/xlcnd-isbnlib/isbnlib/_ext.py:24: in meta\n[tests/basic-tests-linux  ]   |     return query(isbn, service) if isbn else {}\n[tests/basic-tests-linux  ]   | /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/xlcnd-isbnlib/isbnlib/dev/_decorators.py:27: in memoized_func\n[tests/basic-tests-linux  ]   |     value = func(*args, **kwargs)\n[tests/basic-tests-linux  ]   | /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/xlcnd-isbnlib/isbnlib/_metadata.py:33: in query\n[tests/basic-tests-linux  ]   |     meta = services[service](isbn)\n[tests/basic-tests-linux  ]   | /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/xlcnd-isbnlib/isbnlib/_goob.py:70: in query\n[tests/basic-tests-linux  ]   |     data = wquery(SERVICE_URL.format(isbn='isbn:' + isbn), user_agent=UA)\n[tests/basic-tests-linux  ]   | /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/xlcnd-isbnlib/isbnlib/dev/webquery.py:65: in query\n[tests/basic-tests-linux  ]   |     wq = WEBQuery(url, user_agent, throttling)\n[tests/basic-tests-linux  ]   | /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/xlcnd-isbnlib/isbnlib/dev/webquery.py:32: in __init__\n[tests/basic-tests-linux  ]   |     self.data = webservice.query(service_url, ua)\n[tests/basic-tests-linux  ]   | /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/xlcnd-isbnlib/isbnlib/dev/_decorators.py:47: in memoized_func\n[tests/basic-tests-linux  ]   |     value = func(*args, **kwargs)\n[tests/basic-tests-linux  ]   | /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/xlcnd-isbnlib/isbnlib/dev/webservice.py:107: in query\n[tests/basic-tests-linux  ]   |     data = service.data()\n[tests/basic-tests-linux  ]   | /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/xlcnd-isbnlib/isbnlib/dev/webservice.py:87: in data\n[tests/basic-tests-linux  ]   |     res = self.response()\n[tests/basic-tests-linux  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | self = <isbnlib.dev.webservice.WEBService object at 0x7f50c49a4e50>\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   |     def response(self):\n[tests/basic-tests-linux  ]   |         \"\"\"Check errors on response.\"\"\"\n[tests/basic-tests-linux  ]   |         # TODO(http 102)\n[tests/basic-tests-linux  ]   |         # How to handle \"102 http's code\"?\n[tests/basic-tests-linux  ]   |         # - urlopen doesn't catch a 102 code!\n[tests/basic-tests-linux  ]   |         #   https://docs.python.org/3/howto/urllib2.html#error-codes\n[tests/basic-tests-linux  ]   |         try:\n[tests/basic-tests-linux  ]   |             response = urlopen(\n[tests/basic-tests-linux  ]   |                 self._request,\n[tests/basic-tests-linux  ]   |                 timeout=options.get('URLOPEN_TIMEOUT'),\n[tests/basic-tests-linux  ]   |             )\n[tests/basic-tests-linux  ]   |             LOGGER.debug('Request headers:\\n%s', self._request.header_items())\n[tests/basic-tests-linux  ]   |         except HTTPError as e:  # pragma: no cover\n[tests/basic-tests-linux  ]   |             LOGGER.critical(\n[tests/basic-tests-linux  ]   |                 'ISBNLibHTTPError for %s with code %s [%s]',\n[tests/basic-tests-linux  ]   |                 self._url,\n[tests/basic-tests-linux  ]   |                 e.code,\n[tests/basic-tests-linux  ]   |                 e.msg,\n[tests/basic-tests-linux  ]   |             )\n[tests/basic-tests-linux  ]   |             if e.code in (401, 403, 429):\n[tests/basic-tests-linux  ]   | >               raise ISBNLibHTTPError('%s Are you making many requests?' %\n[tests/basic-tests-linux  ]   |                                        e.code)\n[tests/basic-tests-linux  ]   | E               isbnlib.dev._exceptions.ISBNLibHTTPError: an HTTP error has ocurred (403 Are you making many requests?)\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/xlcnd-isbnlib/isbnlib/dev/webservice.py:63: ISBNLibHTTPError\n[tests/basic-tests-linux  ]   | ------------------------------ Captured log call -------------------------------\n[tests/basic-tests-linux  ]   | CRITICAL isbnlib.dev.webservice:webservice.py:56 ISBNLibHTTPError for https://www.googleapis.com/books/v1/volumes?q=isbn:9780321534965&fields=items/volumeInfo(title,subtitle,authors,publisher,publishedDate,language,industryIdentifiers,description,imageLinks)&maxResults=1 with code 403 [Forbidden]\n[tests/basic-tests-linux  ]   | ___________________________________ test_ren ___________________________________\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | self = <isbnlib.dev.webservice.WEBService object at 0x7f50c498cdc0>\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   |     def response(self):\n[tests/basic-tests-linux  ]   |         \"\"\"Check errors on response.\"\"\"\n[tests/basic-tests-linux  ]   |         # TODO(http 102)\n[tests/basic-tests-linux  ]   |         # How to handle \"102 http's code\"?\n[tests/basic-tests-linux  ]   |         # - urlopen doesn't catch a 102 code!\n[tests/basic-tests-linux  ]   |         #   https://docs.python.org/3/howto/urllib2.html#error-codes\n[tests/basic-tests-linux  ]   |         try:\n[tests/basic-tests-linux  ]   | >           response = urlopen(\n[tests/basic-tests-linux  ]   |                 self._request,\n[tests/basic-tests-linux  ]   |                 timeout=options.get('URLOPEN_TIMEOUT'),\n[tests/basic-tests-linux  ]   |             )\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/xlcnd-isbnlib/isbnlib/dev/webservice.py:50: \n[tests/basic-tests-linux  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | url = <urllib.request.Request object at 0x7f50c498cb20>, data = None\n[tests/basic-tests-linux  ]   | timeout = 10\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   |     def urlopen(url, data=None, timeout=socket._GLOBAL_DEFAULT_TIMEOUT,\n[tests/basic-tests-linux  ]   |                 *, cafile=None, capath=None, cadefault=False, context=None):\n[tests/basic-tests-linux  ]   |         '''Open the URL url, which can be either a string or a Request object.\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         *data* must be an object specifying additional data to be sent to\n[tests/basic-tests-linux  ]   |         the server, or None if no such data is needed.  See Request for\n[tests/basic-tests-linux  ]   |         details.\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         urllib.request module uses HTTP/1.1 and includes a \"Connection:close\"\n[tests/basic-tests-linux  ]   |         header in its HTTP requests.\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         The optional *timeout* parameter specifies a timeout in seconds for\n[tests/basic-tests-linux  ]   |         blocking operations like the connection attempt (if not specified, the\n[tests/basic-tests-linux  ]   |         global default timeout setting will be used). This only works for HTTP,\n[tests/basic-tests-linux  ]   |         HTTPS and FTP connections.\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         If *context* is specified, it must be a ssl.SSLContext instance describing\n[tests/basic-tests-linux  ]   |         the various SSL options. See HTTPSConnection for more details.\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         The optional *cafile* and *capath* parameters specify a set of trusted CA\n[tests/basic-tests-linux  ]   |         certificates for HTTPS requests. cafile should point to a single file\n[tests/basic-tests-linux  ]   |         containing a bundle of CA certificates, whereas capath should point to a\n[tests/basic-tests-linux  ]   |         directory of hashed certificate files. More information can be found in\n[tests/basic-tests-linux  ]   |         ssl.SSLContext.load_verify_locations().\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         The *cadefault* parameter is ignored.\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         This function always returns an object which can work as a\n[tests/basic-tests-linux  ]   |         context manager and has the properties url, headers, and status.\n[tests/basic-tests-linux  ]   |         See urllib.response.addinfourl for more detail on these properties.\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         For HTTP and HTTPS URLs, this function returns a http.client.HTTPResponse\n[tests/basic-tests-linux  ]   |         object slightly modified. In addition to the three new methods above, the\n[tests/basic-tests-linux  ]   |         msg attribute contains the same information as the reason attribute ---\n[tests/basic-tests-linux  ]   |         the reason phrase returned by the server --- instead of the response\n[tests/basic-tests-linux  ]   |         headers as it is specified in the documentation for HTTPResponse.\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         For FTP, file, and data URLs and requests explicitly handled by legacy\n[tests/basic-tests-linux  ]   |         URLopener and FancyURLopener classes, this function returns a\n[tests/basic-tests-linux  ]   |         urllib.response.addinfourl object.\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         Note that None may be returned if no handler handles the request (though\n[tests/basic-tests-linux  ]   |         the default installed global OpenerDirector uses UnknownHandler to ensure\n[tests/basic-tests-linux  ]   |         this never happens).\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         In addition, if proxy settings are detected (for example, when a *_proxy\n[tests/basic-tests-linux  ]   |         environment variable like http_proxy is set), ProxyHandler is default\n[tests/basic-tests-linux  ]   |         installed and makes sure the requests are handled through the proxy.\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         '''\n[tests/basic-tests-linux  ]   |         global _opener\n[tests/basic-tests-linux  ]   |         if cafile or capath or cadefault:\n[tests/basic-tests-linux  ]   |             import warnings\n[tests/basic-tests-linux  ]   |             warnings.warn(\"cafile, capath and cadefault are deprecated, use a \"\n[tests/basic-tests-linux  ]   |                           \"custom context instead.\", DeprecationWarning, 2)\n[tests/basic-tests-linux  ]   |             if context is not None:\n[tests/basic-tests-linux  ]   |                 raise ValueError(\n[tests/basic-tests-linux  ]   |                     \"You can't pass both context and any of cafile, capath, and \"\n[tests/basic-tests-linux  ]   |                     \"cadefault\"\n[tests/basic-tests-linux  ]   |                 )\n[tests/basic-tests-linux  ]   |             if not _have_ssl:\n[tests/basic-tests-linux  ]   |                 raise ValueError('SSL support not available')\n[tests/basic-tests-linux  ]   |             context = ssl.create_default_context(ssl.Purpose.SERVER_AUTH,\n[tests/basic-tests-linux  ]   |                                                  cafile=cafile,\n[tests/basic-tests-linux  ]   |                                                  capath=capath)\n[tests/basic-tests-linux  ]   |             https_handler = HTTPSHandler(context=context)\n[tests/basic-tests-linux  ]   |             opener = build_opener(https_handler)\n[tests/basic-tests-linux  ]   |         elif context:\n[tests/basic-tests-linux  ]   |             https_handler = HTTPSHandler(context=context)\n[tests/basic-tests-linux  ]   |             opener = build_opener(https_handler)\n[tests/basic-tests-linux  ]   |         elif _opener is None:\n[tests/basic-tests-linux  ]   |             _opener = opener = build_opener()\n[tests/basic-tests-linux  ]   |         else:\n[tests/basic-tests-linux  ]   |             opener = _opener\n[tests/basic-tests-linux  ]   | >       return opener.open(url, data, timeout)\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/urllib/request.py:214: \n[tests/basic-tests-linux  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | self = <urllib.request.OpenerDirector object at 0x7f50c4ae5b80>\n[tests/basic-tests-linux  ]   | fullurl = <urllib.request.Request object at 0x7f50c498cb20>, data = None\n[tests/basic-tests-linux  ]   | timeout = 10\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   |     def open(self, fullurl, data=None, timeout=socket._GLOBAL_DEFAULT_TIMEOUT):\n[tests/basic-tests-linux  ]   |         # accept a URL or a Request object\n[tests/basic-tests-linux  ]   |         if isinstance(fullurl, str):\n[tests/basic-tests-linux  ]   |             req = Request(fullurl, data)\n[tests/basic-tests-linux  ]   |         else:\n[tests/basic-tests-linux  ]   |             req = fullurl\n[tests/basic-tests-linux  ]   |             if data is not None:\n[tests/basic-tests-linux  ]   |                 req.data = data\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         req.timeout = timeout\n[tests/basic-tests-linux  ]   |         protocol = req.type\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         # pre-process request\n[tests/basic-tests-linux  ]   |         meth_name = protocol+\"_request\"\n[tests/basic-tests-linux  ]   |         for processor in self.process_request.get(protocol, []):\n[tests/basic-tests-linux  ]   |             meth = getattr(processor, meth_name)\n[tests/basic-tests-linux  ]   |             req = meth(req)\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         sys.audit('urllib.Request', req.full_url, req.data, req.headers, req.get_method())\n[tests/basic-tests-linux  ]   |         response = self._open(req, data)\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         # post-process response\n[tests/basic-tests-linux  ]   |         meth_name = protocol+\"_response\"\n[tests/basic-tests-linux  ]   |         for processor in self.process_response.get(protocol, []):\n[tests/basic-tests-linux  ]   |             meth = getattr(processor, meth_name)\n[tests/basic-tests-linux  ]   | >           response = meth(req, response)\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/urllib/request.py:523: \n[tests/basic-tests-linux  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | self = <urllib.request.HTTPErrorProcessor object at 0x7f50c4ae5df0>\n[tests/basic-tests-linux  ]   | request = <urllib.request.Request object at 0x7f50c498cb20>\n[tests/basic-tests-linux  ]   | response = <http.client.HTTPResponse object at 0x7f50c498ca30>\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   |     def http_response(self, request, response):\n[tests/basic-tests-linux  ]   |         code, msg, hdrs = response.code, response.msg, response.info()\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         # According to RFC 2616, \"2xx\" code indicates that the client's\n[tests/basic-tests-linux  ]   |         # request was successfully received, understood, and accepted.\n[tests/basic-tests-linux  ]   |         if not (200 <= code < 300):\n[tests/basic-tests-linux  ]   | >           response = self.parent.error(\n[tests/basic-tests-linux  ]   |                 'http', request, response, code, msg, hdrs)\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/urllib/request.py:632: \n[tests/basic-tests-linux  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | self = <urllib.request.OpenerDirector object at 0x7f50c4ae5b80>, proto = 403\n[tests/basic-tests-linux  ]   | args = ({'default': [<urllib.request.HTTPDefaultErrorHandler object at 0x7f50c4ae5e50>], 301: [<urllib.request.HTTPRedirectHa...ult', <urllib.request.Request object at 0x7f50c498cb20>, <http.client.HTTPResponse object at 0x7f50c498ca30>, 403, ...)\n[tests/basic-tests-linux  ]   | dict = {'default': [<urllib.request.HTTPDefaultErrorHandler object at 0x7f50c4ae5e50>], 301: [<urllib.request.HTTPRedirectHan...PRedirectHandler object at 0x7f50c4ae5d60>], 303: [<urllib.request.HTTPRedirectHandler object at 0x7f50c4ae5d60>], ...}\n[tests/basic-tests-linux  ]   | meth_name = 'http_error_403', http_err = 1\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   |     def error(self, proto, *args):\n[tests/basic-tests-linux  ]   |         if proto in ('http', 'https'):\n[tests/basic-tests-linux  ]   |             # XXX http[s] protocols are special-cased\n[tests/basic-tests-linux  ]   |             dict = self.handle_error['http'] # https is not different than http\n[tests/basic-tests-linux  ]   |             proto = args[2]  # YUCK!\n[tests/basic-tests-linux  ]   |             meth_name = 'http_error_%s' % proto\n[tests/basic-tests-linux  ]   |             http_err = 1\n[tests/basic-tests-linux  ]   |             orig_args = args\n[tests/basic-tests-linux  ]   |         else:\n[tests/basic-tests-linux  ]   |             dict = self.handle_error\n[tests/basic-tests-linux  ]   |             meth_name = proto + '_error'\n[tests/basic-tests-linux  ]   |             http_err = 0\n[tests/basic-tests-linux  ]   |         args = (dict, proto, meth_name) + args\n[tests/basic-tests-linux  ]   |         result = self._call_chain(*args)\n[tests/basic-tests-linux  ]   |         if result:\n[tests/basic-tests-linux  ]   |             return result\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         if http_err:\n[tests/basic-tests-linux  ]   |             args = (dict, 'default', 'http_error_default') + orig_args\n[tests/basic-tests-linux  ]   | >           return self._call_chain(*args)\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/urllib/request.py:561: \n[tests/basic-tests-linux  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | self = <urllib.request.OpenerDirector object at 0x7f50c4ae5b80>\n[tests/basic-tests-linux  ]   | chain = {'default': [<urllib.request.HTTPDefaultErrorHandler object at 0x7f50c4ae5e50>], 301: [<urllib.request.HTTPRedirectHan...PRedirectHandler object at 0x7f50c4ae5d60>], 303: [<urllib.request.HTTPRedirectHandler object at 0x7f50c4ae5d60>], ...}\n[tests/basic-tests-linux  ]   | kind = 'default', meth_name = 'http_error_default'\n[tests/basic-tests-linux  ]   | args = (<urllib.request.Request object at 0x7f50c498cb20>, <http.client.HTTPResponse object at 0x7f50c498ca30>, 403, 'Forbidden', <http.client.HTTPMessage object at 0x7f50c498c700>)\n[tests/basic-tests-linux  ]   | handlers = [<urllib.request.HTTPDefaultErrorHandler object at 0x7f50c4ae5e50>]\n[tests/basic-tests-linux  ]   | handler = <urllib.request.HTTPDefaultErrorHandler object at 0x7f50c4ae5e50>\n[tests/basic-tests-linux  ]   | func = <bound method HTTPDefaultErrorHandler.http_error_default of <urllib.request.HTTPDefaultErrorHandler object at 0x7f50c4ae5e50>>\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   |     def _call_chain(self, chain, kind, meth_name, *args):\n[tests/basic-tests-linux  ]   |         # Handlers raise an exception if no one else should try to handle\n[tests/basic-tests-linux  ]   |         # the request, or return None if they can't but another handler\n[tests/basic-tests-linux  ]   |         # could.  Otherwise, they return the response.\n[tests/basic-tests-linux  ]   |         handlers = chain.get(kind, ())\n[tests/basic-tests-linux  ]   |         for handler in handlers:\n[tests/basic-tests-linux  ]   |             func = getattr(handler, meth_name)\n[tests/basic-tests-linux  ]   | >           result = func(*args)\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/urllib/request.py:494: \n[tests/basic-tests-linux  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | self = <urllib.request.HTTPDefaultErrorHandler object at 0x7f50c4ae5e50>\n[tests/basic-tests-linux  ]   | req = <urllib.request.Request object at 0x7f50c498cb20>\n[tests/basic-tests-linux  ]   | fp = <http.client.HTTPResponse object at 0x7f50c498ca30>, code = 403\n[tests/basic-tests-linux  ]   | msg = 'Forbidden', hdrs = <http.client.HTTPMessage object at 0x7f50c498c700>\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   |     def http_error_default(self, req, fp, code, msg, hdrs):\n[tests/basic-tests-linux  ]   | >       raise HTTPError(req.full_url, code, msg, hdrs, fp)\n[tests/basic-tests-linux  ]   | E       urllib.error.HTTPError: HTTP Error 403: Forbidden\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/urllib/request.py:641: HTTPError\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | During handling of the above exception, another exception occurred:\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   |     def test_ren():\n[tests/basic-tests-linux  ]   |         \"\"\"Test 'high level' ren function.\"\"\"\n[tests/basic-tests-linux  ]   | >       ren(F1)\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/xlcnd-isbnlib/isbnlib/test/test_rename.py:86: \n[tests/basic-tests-linux  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-linux  ]   | /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/xlcnd-isbnlib/isbnlib/_ext.py:61: in ren\n[tests/basic-tests-linux  ]   |     data = meta(isbn)\n[tests/basic-tests-linux  ]   | /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/xlcnd-isbnlib/isbnlib/_ext.py:24: in meta\n[tests/basic-tests-linux  ]   |     return query(isbn, service) if isbn else {}\n[tests/basic-tests-linux  ]   | /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/xlcnd-isbnlib/isbnlib/dev/_decorators.py:27: in memoized_func\n[tests/basic-tests-linux  ]   |     value = func(*args, **kwargs)\n[tests/basic-tests-linux  ]   | /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/xlcnd-isbnlib/isbnlib/_metadata.py:33: in query\n[tests/basic-tests-linux  ]   |     meta = services[service](isbn)\n[tests/basic-tests-linux  ]   | /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/xlcnd-isbnlib/isbnlib/_goob.py:70: in query\n[tests/basic-tests-linux  ]   |     data = wquery(SERVICE_URL.format(isbn='isbn:' + isbn), user_agent=UA)\n[tests/basic-tests-linux  ]   | /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/xlcnd-isbnlib/isbnlib/dev/webquery.py:65: in query\n[tests/basic-tests-linux  ]   |     wq = WEBQuery(url, user_agent, throttling)\n[tests/basic-tests-linux  ]   | /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/xlcnd-isbnlib/isbnlib/dev/webquery.py:32: in __init__\n[tests/basic-tests-linux  ]   |     self.data = webservice.query(service_url, ua)\n[tests/basic-tests-linux  ]   | /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/xlcnd-isbnlib/isbnlib/dev/_decorators.py:47: in memoized_func\n[tests/basic-tests-linux  ]   |     value = func(*args, **kwargs)\n[tests/basic-tests-linux  ]   | /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/xlcnd-isbnlib/isbnlib/dev/webservice.py:107: in query\n[tests/basic-tests-linux  ]   |     data = service.data()\n[tests/basic-tests-linux  ]   | /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/xlcnd-isbnlib/isbnlib/dev/webservice.py:87: in data\n[tests/basic-tests-linux  ]   |     res = self.response()\n[tests/basic-tests-linux  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | self = <isbnlib.dev.webservice.WEBService object at 0x7f50c498cdc0>\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   |     def response(self):\n[tests/basic-tests-linux  ]   |         \"\"\"Check errors on response.\"\"\"\n[tests/basic-tests-linux  ]   |         # TODO(http 102)\n[tests/basic-tests-linux  ]   |         # How to handle \"102 http's code\"?\n[tests/basic-tests-linux  ]   |         # - urlopen doesn't catch a 102 code!\n[tests/basic-tests-linux  ]   |         #   https://docs.python.org/3/howto/urllib2.html#error-codes\n[tests/basic-tests-linux  ]   |         try:\n[tests/basic-tests-linux  ]   |             response = urlopen(\n[tests/basic-tests-linux  ]   |                 self._request,\n[tests/basic-tests-linux  ]   |                 timeout=options.get('URLOPEN_TIMEOUT'),\n[tests/basic-tests-linux  ]   |             )\n[tests/basic-tests-linux  ]   |             LOGGER.debug('Request headers:\\n%s', self._request.header_items())\n[tests/basic-tests-linux  ]   |         except HTTPError as e:  # pragma: no cover\n[tests/basic-tests-linux  ]   |             LOGGER.critical(\n[tests/basic-tests-linux  ]   |                 'ISBNLibHTTPError for %s with code %s [%s]',\n[tests/basic-tests-linux  ]   |                 self._url,\n[tests/basic-tests-linux  ]   |                 e.code,\n[tests/basic-tests-linux  ]   |                 e.msg,\n[tests/basic-tests-linux  ]   |             )\n[tests/basic-tests-linux  ]   |             if e.code in (401, 403, 429):\n[tests/basic-tests-linux  ]   | >               raise ISBNLibHTTPError('%s Are you making many requests?' %\n[tests/basic-tests-linux  ]   |                                        e.code)\n[tests/basic-tests-linux  ]   | E               isbnlib.dev._exceptions.ISBNLibHTTPError: an HTTP error has ocurred (403 Are you making many requests?)\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/xlcnd-isbnlib/isbnlib/dev/webservice.py:63: ISBNLibHTTPError\n[tests/basic-tests-linux  ]   | ------------------------------ Captured log call -------------------------------\n[tests/basic-tests-linux  ]   | CRITICAL isbnlib.dev.webservice:webservice.py:56 ISBNLibHTTPError for https://www.googleapis.com/books/v1/volumes?q=isbn:9780198520115&fields=items/volumeInfo(title,subtitle,authors,publisher,publishedDate,language,industryIdentifiers,description,imageLinks)&maxResults=1 with code 403 [Forbidden]\n[tests/basic-tests-linux  ]   | =============================== warnings summary ===============================\n[tests/basic-tests-linux  ]   | ../../../opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/pkg_resources/__init__.py:121\n[tests/basic-tests-linux  ]   |   /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/pkg_resources/__init__.py:121: DeprecationWarning: pkg_resources is deprecated as an API\n[tests/basic-tests-linux  ]   |     warnings.warn(\"pkg_resources is deprecated as an API\", DeprecationWarning)\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | -- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n[tests/basic-tests-linux  ]   | =========================== short test summary info ============================\n[tests/basic-tests-linux  ]   | FAILED isbnlib/test/test_ext.py::test_desc - isbnlib.dev._exceptions.ISBNLibHTTPError: an HTTP error has ocurred (403 Are you making many requests?)\n[tests/basic-tests-linux  ]   | FAILED isbnlib/test/test_ext.py::test_cover - isbnlib.dev._exceptions.ISBNLibHTTPError: an HTTP error has ocurred (403 Are you making many requests?)\n[tests/basic-tests-linux  ]   | FAILED isbnlib/test/test_goom.py::test_goom - isbnlib.dev._exceptions.ISBNLibHTTPError: an HTTP error has ocurred (403 Are you making many requests?)\n[tests/basic-tests-linux  ]   | FAILED isbnlib/test/test_metadata.py::test_query - isbnlib.dev._exceptions.ISBNLibHTTPError: an HTTP error has ocurred (403 Are you making many requests?)\n[tests/basic-tests-linux  ]   | FAILED isbnlib/test/test_metadata.py::test_ext_meta - isbnlib.dev._exceptions.ISBNLibHTTPError: an HTTP error has ocurred (403 Are you making many requests?)\n[tests/basic-tests-linux  ]   | FAILED isbnlib/test/test_rename.py::test_ren - isbnlib.dev._exceptions.ISBNLibHTTPError: an HTTP error has ocurred (403 Are you making many requests?)\n[tests/basic-tests-linux  ]   | ERROR isbnlib/test/test_cache_decorator.py::test_cache_meta - isbnlib.dev._exceptions.ISBNLibHTTPError: an HTTP error has ocurred (403 Are you making many requests?)\n[tests/basic-tests-linux  ]   | ============== 6 failed, 57 passed, 1 warning, 1 error in 17.98s ===============\n[tests/basic-tests-linux  ]   \u274c  Failure - Main Test with pytest\n[tests/basic-tests-linux  ] exitcode '1': failure\n[tests/basic-tests-macos  ] \ud83c\udfc1  Job failed\n[tests/basic-tests-linux  ] \ud83c\udfc1  Job failed\n[tests/basic-tests-windows] \ud83c\udfc1  Job failed\n",
    "actions_stderr": "Error: Job 'basic-tests-macos' failed\n"
}