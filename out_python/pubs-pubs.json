{
    "repository": "pubs/pubs",
    "clone_url": "https://github.com/pubs/pubs.git",
    "timestamp": "2023-05-29T15:20:51.591978Z",
    "clone_success": true,
    "number of actions": 1,
    "number_of_test_actions": 1,
    "actions_successful": false,
    "actions_stdout": "[Pubs tests/Run unit tests with mock requests-2] \ud83d\ude80  Start image=crawlergpt:latest\n[Pubs tests/Run unit tests with mock requests-1] \ud83d\ude80  Start image=crawlergpt:latest\n[Pubs tests/Run unit tests online              ] \ud83d\ude80  Start image=crawlergpt:latest\n[Pubs tests/Run unit tests online              ]   \ud83d\udc33  docker pull image=crawlergpt:latest platform= username= forcePull=false\n[Pubs tests/Run unit tests with mock requests-1]   \ud83d\udc33  docker pull image=crawlergpt:latest platform= username= forcePull=false\n[Pubs tests/Run unit tests with mock requests-2]   \ud83d\udc33  docker pull image=crawlergpt:latest platform= username= forcePull=false\n[Pubs tests/Run unit tests with mock requests-1]   \ud83d\udc33  docker create image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[Pubs tests/Run unit tests with mock requests-2]   \ud83d\udc33  docker create image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[Pubs tests/Run unit tests online              ]   \ud83d\udc33  docker create image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[Pubs tests/Run unit tests with mock requests-2]   \ud83d\udc33  docker run image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[Pubs tests/Run unit tests online              ]   \ud83d\udc33  docker run image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[Pubs tests/Run unit tests with mock requests-1]   \ud83d\udc33  docker run image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[Pubs tests/Run unit tests with mock requests-2]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/pubs-pubs] user=0 workdir=\n[Pubs tests/Run unit tests online              ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/pubs-pubs] user=0 workdir=\n[Pubs tests/Run unit tests with mock requests-1]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/pubs-pubs] user=0 workdir=\n[Pubs tests/Run unit tests with mock requests-2]   \u2601  git clone 'https://github.com/actions/setup-python' # ref=v3\n[Pubs tests/Run unit tests with mock requests-2] \ud83e\uddea  Matrix: map[os:ubuntu-latest python-version:3.6]\n[Pubs tests/Run unit tests with mock requests-2] \u2b50 Run Main actions/checkout@v3\n[Pubs tests/Run unit tests with mock requests-2]   \u2705  Success - Main actions/checkout@v3\n[Pubs tests/Run unit tests online              ]   \u2601  git clone 'https://github.com/actions/setup-python' # ref=v3\n[Pubs tests/Run unit tests with mock requests-1]   \u2601  git clone 'https://github.com/actions/setup-python' # ref=v3\n[Pubs tests/Run unit tests with mock requests-2] \u2b50 Run Main Set up Python 3.6\n[Pubs tests/Run unit tests online              ] \ud83e\uddea  Matrix: map[os:ubuntu-latest python-version:3.10]\n[Pubs tests/Run unit tests online              ] \u2b50 Run Main actions/checkout@v3\n[Pubs tests/Run unit tests with mock requests-2]   \ud83d\udc33  docker cp src=/home/andre-silva/.cache/act/actions-setup-python@v3/ dst=/var/run/act/actions/actions-setup-python@v3/\n[Pubs tests/Run unit tests with mock requests-1] \ud83e\uddea  Matrix: map[os:ubuntu-latest python-version:3.10]\n[Pubs tests/Run unit tests online              ]   \u2705  Success - Main actions/checkout@v3\n[Pubs tests/Run unit tests with mock requests-1] \u2b50 Run Main actions/checkout@v3\n[Pubs tests/Run unit tests with mock requests-1]   \u2705  Success - Main actions/checkout@v3\n[Pubs tests/Run unit tests with mock requests-2]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /var/run/act/actions/actions-setup-python@v3/] user=0 workdir=\n[Pubs tests/Run unit tests online              ] \u2b50 Run Main Set up Python 3.10\n[Pubs tests/Run unit tests online              ]   \ud83d\udc33  docker cp src=/home/andre-silva/.cache/act/actions-setup-python@v3/ dst=/var/run/act/actions/actions-setup-python@v3/\n[Pubs tests/Run unit tests with mock requests-1] \u2b50 Run Main Set up Python 3.10\n[Pubs tests/Run unit tests with mock requests-1]   \ud83d\udc33  docker cp src=/home/andre-silva/.cache/act/actions-setup-python@v3/ dst=/var/run/act/actions/actions-setup-python@v3/\n[Pubs tests/Run unit tests online              ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /var/run/act/actions/actions-setup-python@v3/] user=0 workdir=\n[Pubs tests/Run unit tests with mock requests-1]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /var/run/act/actions/actions-setup-python@v3/] user=0 workdir=\n[Pubs tests/Run unit tests with mock requests-2]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/actions-setup-python@v3/dist/setup/index.js] user= workdir=\n[Pubs tests/Run unit tests online              ]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/actions-setup-python@v3/dist/setup/index.js] user= workdir=\n[Pubs tests/Run unit tests with mock requests-1]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/actions-setup-python@v3/dist/setup/index.js] user= workdir=\n[Pubs tests/Run unit tests with mock requests-2]   \ud83d\udcac  ::debug::Semantic version spec of 3.6 is 3.6\n[Pubs tests/Run unit tests with mock requests-2]   \ud83d\udcac  ::debug::isExplicit: \n[Pubs tests/Run unit tests with mock requests-2]   \ud83d\udcac  ::debug::explicit? false\n[Pubs tests/Run unit tests with mock requests-2]   \ud83d\udcac  ::debug::isExplicit: 2.7.18\n[Pubs tests/Run unit tests with mock requests-2]   \ud83d\udcac  ::debug::explicit? true\n[Pubs tests/Run unit tests with mock requests-2]   \ud83d\udcac  ::debug::isExplicit: 3.5.10\n[Pubs tests/Run unit tests with mock requests-2]   \ud83d\udcac  ::debug::explicit? true\n[Pubs tests/Run unit tests with mock requests-2]   \ud83d\udcac  ::debug::isExplicit: 3.6.14\n[Pubs tests/Run unit tests with mock requests-2]   \ud83d\udcac  ::debug::explicit? true\n[Pubs tests/Run unit tests with mock requests-2]   \ud83d\udcac  ::debug::isExplicit: 3.7.11\n[Pubs tests/Run unit tests with mock requests-2]   \ud83d\udcac  ::debug::explicit? true\n[Pubs tests/Run unit tests with mock requests-2]   \ud83d\udcac  ::debug::isExplicit: 3.8.11\n[Pubs tests/Run unit tests with mock requests-2]   \ud83d\udcac  ::debug::explicit? true\n[Pubs tests/Run unit tests with mock requests-2]   \ud83d\udcac  ::debug::isExplicit: 3.9.6\n[Pubs tests/Run unit tests with mock requests-2]   \ud83d\udcac  ::debug::explicit? true\n[Pubs tests/Run unit tests with mock requests-2]   \ud83d\udcac  ::debug::evaluating 6 versions\n[Pubs tests/Run unit tests with mock requests-2]   \ud83d\udcac  ::debug::matched: 3.6.14\n[Pubs tests/Run unit tests with mock requests-2]   \ud83d\udcac  ::debug::checking cache: /opt/hostedtoolcache/Python/3.6.14/x64\n[Pubs tests/Run unit tests with mock requests-2]   \ud83d\udcac  ::debug::Found tool in cache Python 3.6.14 x64\n[Pubs tests/Run unit tests with mock requests-2]   | Successfully setup CPython (3.6.14)\n[Pubs tests/Run unit tests with mock requests-2]   \u2753 add-matcher /run/act/actions/actions-setup-python@v3/.github/python.json\n[Pubs tests/Run unit tests with mock requests-2]   \u2705  Success - Main Set up Python 3.6\n[Pubs tests/Run unit tests with mock requests-2]   \u2699  ::set-env:: pythonLocation=/opt/hostedtoolcache/Python/3.6.14/x64\n[Pubs tests/Run unit tests with mock requests-2]   \u2699  ::set-env:: LD_LIBRARY_PATH=/opt/hostedtoolcache/Python/3.6.14/x64/lib\n[Pubs tests/Run unit tests with mock requests-2]   \u2699  ::set-output:: python-version=3.6.14\n[Pubs tests/Run unit tests with mock requests-2]   \u2699  ::add-path:: /opt/hostedtoolcache/Python/3.6.14/x64\n[Pubs tests/Run unit tests with mock requests-2]   \u2699  ::add-path:: /opt/hostedtoolcache/Python/3.6.14/x64/bin\n[Pubs tests/Run unit tests with mock requests-2] \u2b50 Run Main Install dependencies\n[Pubs tests/Run unit tests with mock requests-2]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/2] user= workdir=\n[Pubs tests/Run unit tests online              ]   \ud83d\udcac  ::debug::Semantic version spec of 3.10 is 3.10\n[Pubs tests/Run unit tests online              ]   \ud83d\udcac  ::debug::isExplicit: \n[Pubs tests/Run unit tests online              ]   \ud83d\udcac  ::debug::explicit? false\n[Pubs tests/Run unit tests online              ]   \ud83d\udcac  ::debug::isExplicit: 2.7.18\n[Pubs tests/Run unit tests online              ]   \ud83d\udcac  ::debug::explicit? true\n[Pubs tests/Run unit tests online              ]   \ud83d\udcac  ::debug::isExplicit: 3.5.10\n[Pubs tests/Run unit tests online              ]   \ud83d\udcac  ::debug::explicit? true\n[Pubs tests/Run unit tests online              ]   \ud83d\udcac  ::debug::isExplicit: 3.6.14\n[Pubs tests/Run unit tests online              ]   \ud83d\udcac  ::debug::explicit? true\n[Pubs tests/Run unit tests online              ]   \ud83d\udcac  ::debug::isExplicit: 3.7.11\n[Pubs tests/Run unit tests online              ]   \ud83d\udcac  ::debug::explicit? true\n[Pubs tests/Run unit tests online              ]   \ud83d\udcac  ::debug::isExplicit: 3.8.11\n[Pubs tests/Run unit tests online              ]   \ud83d\udcac  ::debug::explicit? true\n[Pubs tests/Run unit tests online              ]   \ud83d\udcac  ::debug::isExplicit: 3.9.6\n[Pubs tests/Run unit tests online              ]   \ud83d\udcac  ::debug::explicit? true\n[Pubs tests/Run unit tests online              ]   \ud83d\udcac  ::debug::evaluating 6 versions\n[Pubs tests/Run unit tests online              ]   \ud83d\udcac  ::debug::match not found\n[Pubs tests/Run unit tests online              ]   | Version 3.10 was not found in the local cache\n[Pubs tests/Run unit tests with mock requests-1]   \ud83d\udcac  ::debug::Semantic version spec of 3.10 is 3.10\n[Pubs tests/Run unit tests with mock requests-1]   \ud83d\udcac  ::debug::isExplicit: \n[Pubs tests/Run unit tests with mock requests-1]   \ud83d\udcac  ::debug::explicit? false\n[Pubs tests/Run unit tests with mock requests-1]   \ud83d\udcac  ::debug::isExplicit: 2.7.18\n[Pubs tests/Run unit tests with mock requests-1]   \ud83d\udcac  ::debug::explicit? true\n[Pubs tests/Run unit tests with mock requests-1]   \ud83d\udcac  ::debug::isExplicit: 3.5.10\n[Pubs tests/Run unit tests with mock requests-1]   \ud83d\udcac  ::debug::explicit? true\n[Pubs tests/Run unit tests with mock requests-1]   \ud83d\udcac  ::debug::isExplicit: 3.6.14\n[Pubs tests/Run unit tests with mock requests-1]   \ud83d\udcac  ::debug::explicit? true\n[Pubs tests/Run unit tests with mock requests-1]   \ud83d\udcac  ::debug::isExplicit: 3.7.11\n[Pubs tests/Run unit tests with mock requests-1]   \ud83d\udcac  ::debug::explicit? true\n[Pubs tests/Run unit tests with mock requests-1]   \ud83d\udcac  ::debug::isExplicit: 3.8.11\n[Pubs tests/Run unit tests with mock requests-1]   \ud83d\udcac  ::debug::explicit? true\n[Pubs tests/Run unit tests with mock requests-1]   \ud83d\udcac  ::debug::isExplicit: 3.9.6\n[Pubs tests/Run unit tests with mock requests-1]   \ud83d\udcac  ::debug::explicit? true\n[Pubs tests/Run unit tests with mock requests-1]   \ud83d\udcac  ::debug::evaluating 6 versions\n[Pubs tests/Run unit tests with mock requests-1]   \ud83d\udcac  ::debug::match not found\n[Pubs tests/Run unit tests with mock requests-1]   | Version 3.10 was not found in the local cache\n[Pubs tests/Run unit tests with mock requests-1]   \u2757  ::error::API rate limit exceeded for 130.242.72.40. (But here's the good news: Authenticated requests get a higher rate limit. Check out the documentation for more details.)\n[Pubs tests/Run unit tests online              ]   \u2757  ::error::API rate limit exceeded for 130.242.72.40. (But here's the good news: Authenticated requests get a higher rate limit. Check out the documentation for more details.)\n[Pubs tests/Run unit tests with mock requests-1]   \u274c  Failure - Main Set up Python 3.10\n[Pubs tests/Run unit tests online              ]   \u274c  Failure - Main Set up Python 3.10\n[Pubs tests/Run unit tests with mock requests-2]   | Requirement already satisfied: pip in /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages (21.2.4)\n[Pubs tests/Run unit tests with mock requests-2]   | Collecting pip\n[Pubs tests/Run unit tests with mock requests-2]   |   Downloading pip-21.3.1-py3-none-any.whl (1.7 MB)\n[Pubs tests/Run unit tests with mock requests-2]   | Installing collected packages: pip\n[Pubs tests/Run unit tests with mock requests-2]   |   Attempting uninstall: pip\n[Pubs tests/Run unit tests with mock requests-2]   |     Found existing installation: pip 21.2.4\n[Pubs tests/Run unit tests with mock requests-2]   |     Uninstalling pip-21.2.4:\n[Pubs tests/Run unit tests with mock requests-2]   |       Successfully uninstalled pip-21.2.4\n[Pubs tests/Run unit tests online              ] exitcode '1': failure\n[Pubs tests/Run unit tests with mock requests-1] exitcode '1': failure\n[Pubs tests/Run unit tests with mock requests-2]   | Successfully installed pip-21.3.1\n[Pubs tests/Run unit tests with mock requests-2]   | Obtaining file:///tmp/de65f406-fe28-11ed-a890-af2cc187fc11/pubs-pubs (from -r dev_requirements.txt (line 10))\n[Pubs tests/Run unit tests with mock requests-2]   |   Preparing metadata (setup.py): started\n[Pubs tests/Run unit tests with mock requests-2]   |   Preparing metadata (setup.py): finished with status 'done'\n[Pubs tests/Run unit tests with mock requests-2]   | Collecting pyyaml\n[Pubs tests/Run unit tests with mock requests-2]   |   Downloading PyYAML-6.0-cp36-cp36m-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_12_x86_64.manylinux2010_x86_64.whl (603 kB)\n[Pubs tests/Run unit tests with mock requests-2]   | Collecting bibtexparser>=1.0\n[Pubs tests/Run unit tests with mock requests-2]   |   Downloading bibtexparser-1.4.0.tar.gz (51 kB)\n[Pubs tests/Run unit tests with mock requests-2]   |   Preparing metadata (setup.py): started\n[Pubs tests/Run unit tests with mock requests-2]   |   Preparing metadata (setup.py): finished with status 'done'\n[Pubs tests/Run unit tests with mock requests-2]   | Collecting python-dateutil\n[Pubs tests/Run unit tests with mock requests-2]   |   Downloading python_dateutil-2.8.2-py2.py3-none-any.whl (247 kB)\n[Pubs tests/Run unit tests with mock requests-2]   | Collecting requests\n[Pubs tests/Run unit tests with mock requests-2]   |   Downloading requests-2.27.1-py2.py3-none-any.whl (63 kB)\n[Pubs tests/Run unit tests with mock requests-2]   | Collecting configobj\n[Pubs tests/Run unit tests with mock requests-2]   |   Downloading configobj-5.0.8-py2.py3-none-any.whl (36 kB)\n[Pubs tests/Run unit tests with mock requests-2]   | Collecting beautifulsoup4\n[Pubs tests/Run unit tests with mock requests-2]   |   Downloading beautifulsoup4-4.12.2-py3-none-any.whl (142 kB)\n[Pubs tests/Run unit tests with mock requests-2]   | Collecting feedparser\n[Pubs tests/Run unit tests with mock requests-2]   |   Downloading feedparser-6.0.10-py3-none-any.whl (81 kB)\n[Pubs tests/Run unit tests with mock requests-2]   | Collecting six\n[Pubs tests/Run unit tests with mock requests-2]   |   Downloading six-1.16.0-py2.py3-none-any.whl (11 kB)\n[Pubs tests/Run unit tests with mock requests-2]   | Collecting pyfakefs\n[Pubs tests/Run unit tests with mock requests-2]   |   Downloading pyfakefs-4.6.3-py3-none-any.whl (195 kB)\n[Pubs tests/Run unit tests with mock requests-2]   | Collecting certifi\n[Pubs tests/Run unit tests with mock requests-2]   |   Downloading certifi-2023.5.7-py3-none-any.whl (156 kB)\n[Pubs tests/Run unit tests with mock requests-2]   | Collecting ddt>=1.4.1\n[Pubs tests/Run unit tests with mock requests-2]   |   Downloading ddt-1.6.0-py2.py3-none-any.whl (7.1 kB)\n[Pubs tests/Run unit tests with mock requests-2]   | Collecting mock\n[Pubs tests/Run unit tests with mock requests-2]   |   Downloading mock-5.0.2-py3-none-any.whl (30 kB)\n[Pubs tests/Run unit tests with mock requests-2]   | Collecting pytest\n[Pubs tests/Run unit tests with mock requests-2]   |   Downloading pytest-7.0.1-py3-none-any.whl (296 kB)\n[Pubs tests/Run unit tests with mock requests-2]   | Collecting pyparsing>=2.0.3\n[Pubs tests/Run unit tests with mock requests-2]   |   Downloading pyparsing-3.0.9-py3-none-any.whl (98 kB)\n[Pubs tests/Run unit tests with mock requests-2]   | Collecting charset-normalizer~=2.0.0\n[Pubs tests/Run unit tests with mock requests-2]   |   Downloading charset_normalizer-2.0.12-py3-none-any.whl (39 kB)\n[Pubs tests/Run unit tests with mock requests-2]   | Collecting idna<4,>=2.5\n[Pubs tests/Run unit tests with mock requests-2]   |   Downloading idna-3.4-py3-none-any.whl (61 kB)\n[Pubs tests/Run unit tests with mock requests-2]   | Collecting urllib3<1.27,>=1.21.1\n[Pubs tests/Run unit tests with mock requests-2]   |   Downloading urllib3-1.26.16-py2.py3-none-any.whl (143 kB)\n[Pubs tests/Run unit tests with mock requests-2]   | Collecting soupsieve>1.2\n[Pubs tests/Run unit tests with mock requests-2]   |   Downloading soupsieve-2.3.2.post1-py3-none-any.whl (37 kB)\n[Pubs tests/Run unit tests with mock requests-2]   | Collecting sgmllib3k\n[Pubs tests/Run unit tests with mock requests-2]   |   Downloading sgmllib3k-1.0.0.tar.gz (5.8 kB)\n[Pubs tests/Run unit tests with mock requests-2]   |   Preparing metadata (setup.py): started\n[Pubs tests/Run unit tests with mock requests-2]   |   Preparing metadata (setup.py): finished with status 'done'\n[Pubs tests/Run unit tests with mock requests-2]   | Collecting py>=1.8.2\n[Pubs tests/Run unit tests with mock requests-2]   |   Downloading py-1.11.0-py2.py3-none-any.whl (98 kB)\n[Pubs tests/Run unit tests with mock requests-2]   | Collecting tomli>=1.0.0\n[Pubs tests/Run unit tests with mock requests-2]   |   Downloading tomli-1.2.3-py3-none-any.whl (12 kB)\n[Pubs tests/Run unit tests with mock requests-2]   | Collecting packaging\n[Pubs tests/Run unit tests with mock requests-2]   |   Downloading packaging-21.3-py3-none-any.whl (40 kB)\n[Pubs tests/Run unit tests with mock requests-2]   | Collecting pluggy<2.0,>=0.12\n[Pubs tests/Run unit tests with mock requests-2]   |   Downloading pluggy-1.0.0-py2.py3-none-any.whl (13 kB)\n[Pubs tests/Run unit tests with mock requests-2]   | Collecting attrs>=19.2.0\n[Pubs tests/Run unit tests with mock requests-2]   |   Downloading attrs-22.2.0-py3-none-any.whl (60 kB)\n[Pubs tests/Run unit tests with mock requests-2]   | Collecting importlib-metadata>=0.12\n[Pubs tests/Run unit tests with mock requests-2]   |   Downloading importlib_metadata-4.8.3-py3-none-any.whl (17 kB)\n[Pubs tests/Run unit tests with mock requests-2]   | Collecting iniconfig\n[Pubs tests/Run unit tests with mock requests-2]   |   Downloading iniconfig-1.1.1-py2.py3-none-any.whl (5.0 kB)\n[Pubs tests/Run unit tests with mock requests-2]   | Collecting zipp>=0.5\n[Pubs tests/Run unit tests with mock requests-2]   |   Downloading zipp-3.6.0-py3-none-any.whl (5.3 kB)\n[Pubs tests/Run unit tests with mock requests-2]   | Collecting typing-extensions>=3.6.4\n[Pubs tests/Run unit tests with mock requests-2]   |   Downloading typing_extensions-4.1.1-py3-none-any.whl (26 kB)\n[Pubs tests/Run unit tests with mock requests-2]   | Using legacy 'setup.py install' for bibtexparser, since package 'wheel' is not installed.\n[Pubs tests/Run unit tests with mock requests-2]   | Using legacy 'setup.py install' for sgmllib3k, since package 'wheel' is not installed.\n[Pubs tests/Run unit tests with mock requests-2]   | Installing collected packages: zipp, typing-extensions, urllib3, soupsieve, six, sgmllib3k, pyparsing, importlib-metadata, idna, charset-normalizer, certifi, tomli, requests, pyyaml, python-dateutil, py, pluggy, packaging, iniconfig, feedparser, configobj, bibtexparser, beautifulsoup4, attrs, pytest, pyfakefs, pubs, mock, ddt\n[Pubs tests/Run unit tests with mock requests-2]   |     Running setup.py install for sgmllib3k: started\n[Pubs tests/Run unit tests with mock requests-2]   |     Running setup.py install for sgmllib3k: finished with status 'done'\n[Pubs tests/Run unit tests with mock requests-2]   |     Running setup.py install for bibtexparser: started\n[Pubs tests/Run unit tests with mock requests-2]   |     Running setup.py install for bibtexparser: finished with status 'done'\n[Pubs tests/Run unit tests with mock requests-2]   |   Running setup.py develop for pubs\n[Pubs tests/Run unit tests with mock requests-2]   | Successfully installed attrs-22.2.0 beautifulsoup4-4.12.2 bibtexparser-1.4.0 certifi-2023.5.7 charset-normalizer-2.0.12 configobj-5.0.8 ddt-1.6.0 feedparser-6.0.10 idna-3.4 importlib-metadata-4.8.3 iniconfig-1.1.1 mock-5.0.2 packaging-21.3 pluggy-1.0.0 pubs-0.9.0 py-1.11.0 pyfakefs-4.6.3 pyparsing-3.0.9 pytest-7.0.1 python-dateutil-2.8.2 pyyaml-6.0 requests-2.27.1 sgmllib3k-1.0.0 six-1.16.0 soupsieve-2.3.2.post1 tomli-1.2.3 typing-extensions-4.1.1 urllib3-1.26.16 zipp-3.6.0\n[Pubs tests/Run unit tests with mock requests-2]   \u2705  Success - Main Install dependencies\n[Pubs tests/Run unit tests with mock requests-2] \u2b50 Run Main Configure git author (fix issue with environment variable)\n[Pubs tests/Run unit tests with mock requests-2]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/3] user= workdir=\n[Pubs tests/Run unit tests online              ] \ud83c\udfc1  Job failed\n[Pubs tests/Run unit tests with mock requests-1] \ud83c\udfc1  Job failed\n[Pubs tests/Run unit tests with mock requests-2]   \u2705  Success - Main Configure git author (fix issue with environment variable)\n[Pubs tests/Run unit tests with mock requests-2] \u2b50 Run Main Test with pytest (mock API mode)\n[Pubs tests/Run unit tests with mock requests-2]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/4] user= workdir=\n[Pubs tests/Run unit tests with mock requests-2]   | ============================= test session starts ==============================\n[Pubs tests/Run unit tests with mock requests-2]   | platform linux -- Python 3.6.14, pytest-7.0.1, pluggy-1.0.0\n[Pubs tests/Run unit tests with mock requests-2]   | rootdir: /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/pubs-pubs\n[Pubs tests/Run unit tests with mock requests-2]   | plugins: pyfakefs-4.6.3\n[Pubs tests/Run unit tests with mock requests-2]   | collected 234 items\n[Pubs tests/Run unit tests with mock requests-2]   | \n[Pubs tests/Run unit tests with mock requests-2]   | tests/test_apis.py .....s............                                    [  7%]\n[Pubs tests/Run unit tests with mock requests-2]   | tests/test_bibstruct.py .......                                          [ 10%]\n[Pubs tests/Run unit tests with mock requests-2]   | tests/test_databroker.py FF..                                            [ 12%]\n[Pubs tests/Run unit tests with mock requests-2]   | tests/test_datacache.py ...........                                      [ 17%]\n[Pubs tests/Run unit tests with mock requests-2]   | tests/test_doi.py ..........                                             [ 21%]\n[Pubs tests/Run unit tests with mock requests-2]   | tests/test_endecoder.py ................                                 [ 28%]\n[Pubs tests/Run unit tests with mock requests-2]   | tests/test_events.py ...                                                 [ 29%]\n[Pubs tests/Run unit tests with mock requests-2]   | tests/test_filebroker.py ......                                          [ 32%]\n[Pubs tests/Run unit tests with mock requests-2]   | tests/test_git.py ..                                                     [ 32%]\n[Pubs tests/Run unit tests with mock requests-2]   | tests/test_note_append.py ..                                             [ 33%]\n[Pubs tests/Run unit tests with mock requests-2]   | tests/test_paper.py ........                                             [ 37%]\n[Pubs tests/Run unit tests with mock requests-2]   | tests/test_plug_alias.py ............                                    [ 42%]\n[Pubs tests/Run unit tests with mock requests-2]   | tests/test_pretty.py ...                                                 [ 43%]\n[Pubs tests/Run unit tests with mock requests-2]   | tests/test_queries.py ...............................                    [ 56%]\n[Pubs tests/Run unit tests with mock requests-2]   | tests/test_repo.py .........                                             [ 60%]\n[Pubs tests/Run unit tests with mock requests-2]   | tests/test_tag.py ..                                                     [ 61%]\n[Pubs tests/Run unit tests with mock requests-2]   | tests/test_usecase.py .................................................. [ 82%]\n[Pubs tests/Run unit tests with mock requests-2]   | ..............................s.........                                 [100%]\n[Pubs tests/Run unit tests with mock requests-2]   | \n[Pubs tests/Run unit tests with mock requests-2]   | =================================== FAILURES ===================================\n[Pubs tests/Run unit tests with mock requests-2]   | ________________________ TestDataBroker.test_databroker ________________________\n[Pubs tests/Run unit tests with mock requests-2]   | \n[Pubs tests/Run unit tests with mock requests-2]   | self = <tests.test_databroker.TestDataBroker testMethod=test_databroker>\n[Pubs tests/Run unit tests with mock requests-2]   | \n[Pubs tests/Run unit tests with mock requests-2]   |     def test_databroker(self):\n[Pubs tests/Run unit tests with mock requests-2]   |     \n[Pubs tests/Run unit tests with mock requests-2]   |         ende = endecoder.EnDecoder()\n[Pubs tests/Run unit tests with mock requests-2]   |         page99_metadata = ende.decode_metadata(str_fixtures.metadata_raw0)\n[Pubs tests/Run unit tests with mock requests-2]   |         page99_bibentry = ende.decode_bibdata(str_fixtures.bibtex_raw0)\n[Pubs tests/Run unit tests with mock requests-2]   |     \n[Pubs tests/Run unit tests with mock requests-2]   |         for db_class in [databroker.DataBroker, datacache.DataCache]:\n[Pubs tests/Run unit tests with mock requests-2]   | >           self.reset_fs()\n[Pubs tests/Run unit tests with mock requests-2]   | \n[Pubs tests/Run unit tests with mock requests-2]   | tests/test_databroker.py:23: \n[Pubs tests/Run unit tests with mock requests-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Pubs tests/Run unit tests with mock requests-2]   | tests/fake_env.py:105: in reset_fs\n[Pubs tests/Run unit tests with mock requests-2]   |     self.fs.create_dir(self.rootpath)\n[Pubs tests/Run unit tests with mock requests-2]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/pyfakefs/fake_filesystem.py:2604: in create_dir\n[Pubs tests/Run unit tests with mock requests-2]   |     self.raise_os_error(errno.EEXIST, dir_path)\n[Pubs tests/Run unit tests with mock requests-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Pubs tests/Run unit tests with mock requests-2]   | \n[Pubs tests/Run unit tests with mock requests-2]   | self = <pyfakefs.fake_filesystem.FakeFilesystem object at 0x7f3a324ebef0>\n[Pubs tests/Run unit tests with mock requests-2]   | err_no = 17\n[Pubs tests/Run unit tests with mock requests-2]   | filename = '/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/pubs-pubs/tests'\n[Pubs tests/Run unit tests with mock requests-2]   | winerror = None\n[Pubs tests/Run unit tests with mock requests-2]   | \n[Pubs tests/Run unit tests with mock requests-2]   |     def raise_os_error(self, err_no: int,\n[Pubs tests/Run unit tests with mock requests-2]   |                        filename: Optional[AnyString] = None,\n[Pubs tests/Run unit tests with mock requests-2]   |                        winerror: Optional[int] = None) -> NoReturn:\n[Pubs tests/Run unit tests with mock requests-2]   |         \"\"\"Raises OSError.\n[Pubs tests/Run unit tests with mock requests-2]   |         The error message is constructed from the given error code and shall\n[Pubs tests/Run unit tests with mock requests-2]   |         start with the error string issued in the real system.\n[Pubs tests/Run unit tests with mock requests-2]   |         Note: this is not true under Windows if winerror is given - in this\n[Pubs tests/Run unit tests with mock requests-2]   |         case a localized message specific to winerror will be shown in the\n[Pubs tests/Run unit tests with mock requests-2]   |         real file system.\n[Pubs tests/Run unit tests with mock requests-2]   |     \n[Pubs tests/Run unit tests with mock requests-2]   |         Args:\n[Pubs tests/Run unit tests with mock requests-2]   |             err_no: A numeric error code from the C variable errno.\n[Pubs tests/Run unit tests with mock requests-2]   |             filename: The name of the affected file, if any.\n[Pubs tests/Run unit tests with mock requests-2]   |             winerror: Windows only - the specific Windows error code.\n[Pubs tests/Run unit tests with mock requests-2]   |         \"\"\"\n[Pubs tests/Run unit tests with mock requests-2]   |         message = os.strerror(err_no) + ' in the fake filesystem'\n[Pubs tests/Run unit tests with mock requests-2]   |         if (winerror is not None and sys.platform == 'win32' and\n[Pubs tests/Run unit tests with mock requests-2]   |                 self.is_windows_fs):\n[Pubs tests/Run unit tests with mock requests-2]   |             raise OSError(err_no, message, filename, winerror)\n[Pubs tests/Run unit tests with mock requests-2]   | >       raise OSError(err_no, message, filename)\n[Pubs tests/Run unit tests with mock requests-2]   | E       FileExistsError: [Errno 17] File exists in the fake filesystem: '/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/pubs-pubs/tests'\n[Pubs tests/Run unit tests with mock requests-2]   | \n[Pubs tests/Run unit tests with mock requests-2]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/pyfakefs/fake_filesystem.py:1122: FileExistsError\n[Pubs tests/Run unit tests with mock requests-2]   | ______________________ TestDataBroker.test_existing_data _______________________\n[Pubs tests/Run unit tests with mock requests-2]   | \n[Pubs tests/Run unit tests with mock requests-2]   | self = <tests.test_databroker.TestDataBroker testMethod=test_existing_data>\n[Pubs tests/Run unit tests with mock requests-2]   | \n[Pubs tests/Run unit tests with mock requests-2]   |     def test_existing_data(self):\n[Pubs tests/Run unit tests with mock requests-2]   |     \n[Pubs tests/Run unit tests with mock requests-2]   |         ende = endecoder.EnDecoder()\n[Pubs tests/Run unit tests with mock requests-2]   |         page99_bibentry = ende.decode_bibdata(str_fixtures.bibtex_raw0)\n[Pubs tests/Run unit tests with mock requests-2]   |     \n[Pubs tests/Run unit tests with mock requests-2]   |         for db_class in [databroker.DataBroker, datacache.DataCache]:\n[Pubs tests/Run unit tests with mock requests-2]   | >           self.reset_fs()\n[Pubs tests/Run unit tests with mock requests-2]   | \n[Pubs tests/Run unit tests with mock requests-2]   | tests/test_databroker.py:47: \n[Pubs tests/Run unit tests with mock requests-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Pubs tests/Run unit tests with mock requests-2]   | tests/fake_env.py:105: in reset_fs\n[Pubs tests/Run unit tests with mock requests-2]   |     self.fs.create_dir(self.rootpath)\n[Pubs tests/Run unit tests with mock requests-2]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/pyfakefs/fake_filesystem.py:2604: in create_dir\n[Pubs tests/Run unit tests with mock requests-2]   |     self.raise_os_error(errno.EEXIST, dir_path)\n[Pubs tests/Run unit tests with mock requests-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Pubs tests/Run unit tests with mock requests-2]   | \n[Pubs tests/Run unit tests with mock requests-2]   | self = <pyfakefs.fake_filesystem.FakeFilesystem object at 0x7f3a34266710>\n[Pubs tests/Run unit tests with mock requests-2]   | err_no = 17\n[Pubs tests/Run unit tests with mock requests-2]   | filename = '/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/pubs-pubs/tests'\n[Pubs tests/Run unit tests with mock requests-2]   | winerror = None\n[Pubs tests/Run unit tests with mock requests-2]   | \n[Pubs tests/Run unit tests with mock requests-2]   |     def raise_os_error(self, err_no: int,\n[Pubs tests/Run unit tests with mock requests-2]   |                        filename: Optional[AnyString] = None,\n[Pubs tests/Run unit tests with mock requests-2]   |                        winerror: Optional[int] = None) -> NoReturn:\n[Pubs tests/Run unit tests with mock requests-2]   |         \"\"\"Raises OSError.\n[Pubs tests/Run unit tests with mock requests-2]   |         The error message is constructed from the given error code and shall\n[Pubs tests/Run unit tests with mock requests-2]   |         start with the error string issued in the real system.\n[Pubs tests/Run unit tests with mock requests-2]   |         Note: this is not true under Windows if winerror is given - in this\n[Pubs tests/Run unit tests with mock requests-2]   |         case a localized message specific to winerror will be shown in the\n[Pubs tests/Run unit tests with mock requests-2]   |         real file system.\n[Pubs tests/Run unit tests with mock requests-2]   |     \n[Pubs tests/Run unit tests with mock requests-2]   |         Args:\n[Pubs tests/Run unit tests with mock requests-2]   |             err_no: A numeric error code from the C variable errno.\n[Pubs tests/Run unit tests with mock requests-2]   |             filename: The name of the affected file, if any.\n[Pubs tests/Run unit tests with mock requests-2]   |             winerror: Windows only - the specific Windows error code.\n[Pubs tests/Run unit tests with mock requests-2]   |         \"\"\"\n[Pubs tests/Run unit tests with mock requests-2]   |         message = os.strerror(err_no) + ' in the fake filesystem'\n[Pubs tests/Run unit tests with mock requests-2]   |         if (winerror is not None and sys.platform == 'win32' and\n[Pubs tests/Run unit tests with mock requests-2]   |                 self.is_windows_fs):\n[Pubs tests/Run unit tests with mock requests-2]   |             raise OSError(err_no, message, filename, winerror)\n[Pubs tests/Run unit tests with mock requests-2]   | >       raise OSError(err_no, message, filename)\n[Pubs tests/Run unit tests with mock requests-2]   | E       FileExistsError: [Errno 17] File exists in the fake filesystem: '/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/pubs-pubs/tests'\n[Pubs tests/Run unit tests with mock requests-2]   | \n[Pubs tests/Run unit tests with mock requests-2]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/pyfakefs/fake_filesystem.py:1122: FileExistsError\n[Pubs tests/Run unit tests with mock requests-2]   | =========================== short test summary info ============================\n[Pubs tests/Run unit tests with mock requests-2]   | FAILED tests/test_databroker.py::TestDataBroker::test_databroker - FileExists...\n[Pubs tests/Run unit tests with mock requests-2]   | FAILED tests/test_databroker.py::TestDataBroker::test_existing_data - FileExi...\n[Pubs tests/Run unit tests with mock requests-2]   | ================== 2 failed, 230 passed, 2 skipped in 29.76s ===================\n[Pubs tests/Run unit tests with mock requests-2]   \u274c  Failure - Main Test with pytest (mock API mode)\n[Pubs tests/Run unit tests with mock requests-2] exitcode '1': failure\n[Pubs tests/Run unit tests with mock requests-2] \ud83c\udfc1  Job failed\n",
    "actions_stderr": "Error: Job 'Run unit tests with mock requests' failed\n"
}