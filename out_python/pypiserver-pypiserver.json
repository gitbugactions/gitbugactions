{
    "repository": "pypiserver/pypiserver",
    "clone_url": "https://github.com/pypiserver/pypiserver.git",
    "timestamp": "2023-05-29T14:13:14.332160Z",
    "clone_success": true,
    "number of actions": 2,
    "number_of_test_actions": 1,
    "actions_successful": false,
    "actions_stdout": "[CI/test-python] \ud83d\ude80  Start image=crawlergpt:latest\n[CI/test-docker] \ud83d\ude80  Start image=crawlergpt:latest\n[CI/check      ] \ud83d\ude80  Start image=crawlergpt:latest\n[CI/test-docker]   \ud83d\udc33  docker pull image=crawlergpt:latest platform= username= forcePull=false\n[CI/check      ]   \ud83d\udc33  docker pull image=crawlergpt:latest platform= username= forcePull=false\n[CI/test-python]   \ud83d\udc33  docker pull image=crawlergpt:latest platform= username= forcePull=false\n[CI/test-python]   \ud83d\udc33  docker create image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[CI/check      ]   \ud83d\udc33  docker create image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[CI/test-docker]   \ud83d\udc33  docker create image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[CI/check      ]   \ud83d\udc33  docker run image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[CI/test-docker]   \ud83d\udc33  docker run image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[CI/test-python]   \ud83d\udc33  docker run image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[CI/test-docker]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/pypiserver-pypiserver] user=0 workdir=\n[CI/check      ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/pypiserver-pypiserver] user=0 workdir=\n[CI/test-python]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/pypiserver-pypiserver] user=0 workdir=\n[CI/check      ]   \u2601  git clone 'https://github.com/actions/setup-python' # ref=v4\n[CI/check      ] \u2b50 Run Main actions/checkout@v3\n[CI/test-docker]   \u2601  git clone 'https://github.com/actions/setup-python' # ref=v4\n[CI/check      ]   \u2705  Success - Main actions/checkout@v3\n[CI/test-python]   \u2601  git clone 'https://github.com/actions/setup-python' # ref=v4\n[CI/test-docker] \u2b50 Run Main actions/checkout@v3\n[CI/test-docker]   \u2705  Success - Main actions/checkout@v3\n[CI/test-python] \ud83e\uddea  Matrix: map[python-version:3.7]\n[CI/check      ] \u2b50 Run Main Set up Python\n[CI/test-python] \u2b50 Run Main actions/checkout@v3\n[CI/test-python]   \u2705  Success - Main actions/checkout@v3\n[CI/check      ]   \ud83d\udc33  docker cp src=/home/andre-silva/.cache/act/actions-setup-python@v4/ dst=/var/run/act/actions/actions-setup-python@v4/\n[CI/test-docker] \u2b50 Run Main Set up Python\n[CI/check      ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /var/run/act/actions/actions-setup-python@v4/] user=0 workdir=\n[CI/test-docker]   \ud83d\udc33  docker cp src=/home/andre-silva/.cache/act/actions-setup-python@v4/ dst=/var/run/act/actions/actions-setup-python@v4/\n[CI/test-python] \u2b50 Run Main Set up Python 3.7\n[CI/test-docker]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /var/run/act/actions/actions-setup-python@v4/] user=0 workdir=\n[CI/test-python]   \ud83d\udc33  docker cp src=/home/andre-silva/.cache/act/actions-setup-python@v4/ dst=/var/run/act/actions/actions-setup-python@v4/\n[CI/test-python]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /var/run/act/actions/actions-setup-python@v4/] user=0 workdir=\n[CI/test-docker]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/actions-setup-python@v4/dist/setup/index.js] user= workdir=\n[CI/test-python]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/actions-setup-python@v4/dist/setup/index.js] user= workdir=\n[CI/check      ]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/actions-setup-python@v4/dist/setup/index.js] user= workdir=\n[CI/test-python]   \ud83d\udcac  ::debug::Python is expected to be installed into /opt/hostedtoolcache\n[CI/test-docker]   \ud83d\udcac  ::debug::Python is expected to be installed into /opt/hostedtoolcache\n[CI/test-python]   \u2753  ::group::Installed versions\n[CI/test-docker]   \u2753  ::group::Installed versions\n[CI/test-docker]   \ud83d\udcac  ::debug::Semantic version spec of 3.x is 3.x\n[CI/test-docker]   \ud83d\udcac  ::debug::isExplicit: \n[CI/test-docker]   \ud83d\udcac  ::debug::explicit? false\n[CI/test-docker]   \ud83d\udcac  ::debug::isExplicit: 2.7.18\n[CI/test-docker]   \ud83d\udcac  ::debug::explicit? true\n[CI/test-docker]   \ud83d\udcac  ::debug::isExplicit: 3.5.10\n[CI/test-docker]   \ud83d\udcac  ::debug::explicit? true\n[CI/test-docker]   \ud83d\udcac  ::debug::isExplicit: 3.6.14\n[CI/test-docker]   \ud83d\udcac  ::debug::explicit? true\n[CI/test-docker]   \ud83d\udcac  ::debug::isExplicit: 3.7.11\n[CI/test-docker]   \ud83d\udcac  ::debug::explicit? true\n[CI/test-docker]   \ud83d\udcac  ::debug::isExplicit: 3.8.11\n[CI/test-docker]   \ud83d\udcac  ::debug::explicit? true\n[CI/test-docker]   \ud83d\udcac  ::debug::isExplicit: 3.9.6\n[CI/test-docker]   \ud83d\udcac  ::debug::explicit? true\n[CI/test-python]   \ud83d\udcac  ::debug::Semantic version spec of 3.7 is 3.7\n[CI/test-python]   \ud83d\udcac  ::debug::isExplicit: \n[CI/test-python]   \ud83d\udcac  ::debug::explicit? false\n[CI/test-python]   \ud83d\udcac  ::debug::isExplicit: 2.7.18\n[CI/test-python]   \ud83d\udcac  ::debug::explicit? true\n[CI/test-python]   \ud83d\udcac  ::debug::isExplicit: 3.5.10\n[CI/test-python]   \ud83d\udcac  ::debug::explicit? true\n[CI/test-python]   \ud83d\udcac  ::debug::isExplicit: 3.6.14\n[CI/test-python]   \ud83d\udcac  ::debug::explicit? true\n[CI/test-python]   \ud83d\udcac  ::debug::isExplicit: 3.7.11\n[CI/test-python]   \ud83d\udcac  ::debug::explicit? true\n[CI/test-python]   \ud83d\udcac  ::debug::isExplicit: 3.8.11\n[CI/test-python]   \ud83d\udcac  ::debug::explicit? true\n[CI/test-python]   \ud83d\udcac  ::debug::isExplicit: 3.9.6\n[CI/test-python]   \ud83d\udcac  ::debug::explicit? true\n[CI/test-python]   \ud83d\udcac  ::debug::evaluating 6 versions\n[CI/test-docker]   \ud83d\udcac  ::debug::evaluating 6 versions\n[CI/test-python]   \ud83d\udcac  ::debug::matched: 3.7.11\n[CI/test-python]   \ud83d\udcac  ::debug::checking cache: /opt/hostedtoolcache/Python/3.7.11/x64\n[CI/test-python]   \ud83d\udcac  ::debug::Found tool in cache Python 3.7.11 x64\n[CI/test-docker]   \ud83d\udcac  ::debug::matched: 3.9.6\n[CI/test-docker]   \ud83d\udcac  ::debug::checking cache: /opt/hostedtoolcache/Python/3.9.6/x64\n[CI/test-docker]   \ud83d\udcac  ::debug::Found tool in cache Python 3.9.6 x64\n[CI/test-docker]   | Successfully set up CPython (3.9.6)\n[CI/test-docker]   \u2753  ::endgroup::\n[CI/test-docker]   \u2753 add-matcher /run/act/actions/actions-setup-python@v4/.github/python.json\n[CI/test-python]   | Successfully set up CPython (3.7.11)\n[CI/test-python]   \u2753  ::endgroup::\n[CI/test-python]   \u2753 add-matcher /run/act/actions/actions-setup-python@v4/.github/python.json\n[CI/check      ]   \ud83d\udcac  ::debug::Python is expected to be installed into /opt/hostedtoolcache\n[CI/check      ]   \u2753  ::group::Installed versions\n[CI/check      ]   \ud83d\udcac  ::debug::Semantic version spec of 3.x is 3.x\n[CI/check      ]   \ud83d\udcac  ::debug::isExplicit: \n[CI/check      ]   \ud83d\udcac  ::debug::explicit? false\n[CI/check      ]   \ud83d\udcac  ::debug::isExplicit: 2.7.18\n[CI/check      ]   \ud83d\udcac  ::debug::explicit? true\n[CI/check      ]   \ud83d\udcac  ::debug::isExplicit: 3.5.10\n[CI/check      ]   \ud83d\udcac  ::debug::explicit? true\n[CI/check      ]   \ud83d\udcac  ::debug::isExplicit: 3.6.14\n[CI/check      ]   \ud83d\udcac  ::debug::explicit? true\n[CI/check      ]   \ud83d\udcac  ::debug::isExplicit: 3.7.11\n[CI/check      ]   \ud83d\udcac  ::debug::explicit? true\n[CI/check      ]   \ud83d\udcac  ::debug::isExplicit: 3.8.11\n[CI/check      ]   \ud83d\udcac  ::debug::explicit? true\n[CI/check      ]   \ud83d\udcac  ::debug::isExplicit: 3.9.6\n[CI/check      ]   \ud83d\udcac  ::debug::explicit? true\n[CI/check      ]   \ud83d\udcac  ::debug::evaluating 6 versions\n[CI/check      ]   \ud83d\udcac  ::debug::matched: 3.9.6\n[CI/check      ]   \ud83d\udcac  ::debug::checking cache: /opt/hostedtoolcache/Python/3.9.6/x64\n[CI/check      ]   \ud83d\udcac  ::debug::Found tool in cache Python 3.9.6 x64\n[CI/test-docker]   \u2705  Success - Main Set up Python\n[CI/check      ]   | Successfully set up CPython (3.9.6)\n[CI/check      ]   \u2753  ::endgroup::\n[CI/check      ]   \u2753 add-matcher /run/act/actions/actions-setup-python@v4/.github/python.json\n[CI/test-python]   \u2705  Success - Main Set up Python 3.7\n[CI/check      ]   \u2705  Success - Main Set up Python\n[CI/check      ]   \u2699  ::set-env:: pythonLocation=/opt/hostedtoolcache/Python/3.9.6/x64\n[CI/check      ]   \u2699  ::set-env:: PKG_CONFIG_PATH=/opt/hostedtoolcache/Python/3.9.6/x64/lib/pkgconfig\n[CI/check      ]   \u2699  ::set-env:: Python_ROOT_DIR=/opt/hostedtoolcache/Python/3.9.6/x64\n[CI/check      ]   \u2699  ::set-env:: Python2_ROOT_DIR=/opt/hostedtoolcache/Python/3.9.6/x64\n[CI/check      ]   \u2699  ::set-env:: Python3_ROOT_DIR=/opt/hostedtoolcache/Python/3.9.6/x64\n[CI/check      ]   \u2699  ::set-env:: LD_LIBRARY_PATH=/opt/hostedtoolcache/Python/3.9.6/x64/lib\n[CI/test-python]   \u2699  ::set-env:: Python3_ROOT_DIR=/opt/hostedtoolcache/Python/3.7.11/x64\n[CI/test-python]   \u2699  ::set-env:: LD_LIBRARY_PATH=/opt/hostedtoolcache/Python/3.7.11/x64/lib\n[CI/test-python]   \u2699  ::set-env:: pythonLocation=/opt/hostedtoolcache/Python/3.7.11/x64\n[CI/test-docker]   \u2699  ::set-env:: LD_LIBRARY_PATH=/opt/hostedtoolcache/Python/3.9.6/x64/lib\n[CI/test-python]   \u2699  ::set-env:: PKG_CONFIG_PATH=/opt/hostedtoolcache/Python/3.7.11/x64/lib/pkgconfig\n[CI/test-docker]   \u2699  ::set-env:: pythonLocation=/opt/hostedtoolcache/Python/3.9.6/x64\n[CI/test-python]   \u2699  ::set-env:: Python_ROOT_DIR=/opt/hostedtoolcache/Python/3.7.11/x64\n[CI/test-docker]   \u2699  ::set-env:: PKG_CONFIG_PATH=/opt/hostedtoolcache/Python/3.9.6/x64/lib/pkgconfig\n[CI/test-python]   \u2699  ::set-env:: Python2_ROOT_DIR=/opt/hostedtoolcache/Python/3.7.11/x64\n[CI/test-docker]   \u2699  ::set-env:: Python_ROOT_DIR=/opt/hostedtoolcache/Python/3.9.6/x64\n[CI/test-docker]   \u2699  ::set-env:: Python2_ROOT_DIR=/opt/hostedtoolcache/Python/3.9.6/x64\n[CI/test-docker]   \u2699  ::set-env:: Python3_ROOT_DIR=/opt/hostedtoolcache/Python/3.9.6/x64\n[CI/check      ]   \u2699  ::set-output:: python-path=/opt/hostedtoolcache/Python/3.9.6/x64/bin/python\n[CI/check      ]   \u2699  ::set-output:: python-version=3.9.6\n[CI/test-python]   \u2699  ::set-output:: python-version=3.7.11\n[CI/test-python]   \u2699  ::set-output:: python-path=/opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[CI/test-docker]   \u2699  ::set-output:: python-version=3.9.6\n[CI/test-docker]   \u2699  ::set-output:: python-path=/opt/hostedtoolcache/Python/3.9.6/x64/bin/python\n[CI/test-python]   \u2699  ::add-path:: /opt/hostedtoolcache/Python/3.7.11/x64\n[CI/test-python]   \u2699  ::add-path:: /opt/hostedtoolcache/Python/3.7.11/x64/bin\n[CI/test-docker]   \u2699  ::add-path:: /opt/hostedtoolcache/Python/3.9.6/x64\n[CI/test-docker]   \u2699  ::add-path:: /opt/hostedtoolcache/Python/3.9.6/x64/bin\n[CI/check      ]   \u2699  ::add-path:: /opt/hostedtoolcache/Python/3.9.6/x64\n[CI/check      ]   \u2699  ::add-path:: /opt/hostedtoolcache/Python/3.9.6/x64/bin\n[CI/test-docker] \u2b50 Run Main Install test dependencies\n[CI/test-python] \u2b50 Run Main Install dependencies\n[CI/check      ] \u2b50 Run Main Install dependencies\n[CI/test-python]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/2] user= workdir=\n[CI/check      ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/2] user= workdir=\n[CI/test-docker]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/2] user= workdir=\n[CI/check      ]   | Obtaining file:///tmp/de65f406-fe28-11ed-a890-af2cc187fc11/pypiserver-pypiserver (from -r requirements/exe.pip (line 7))\n[CI/test-python]   | Requirement already satisfied: setuptools in /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages (47.1.0)\n[CI/check      ]   |   Installing build dependencies: started\n[CI/test-docker]   | Collecting gevent>=1.1b4\n[CI/test-docker]   |   Downloading gevent-22.10.2-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (6.4 MB)\n[CI/test-docker]   | Collecting httpx\n[CI/test-docker]   |   Downloading httpx-0.24.1-py3-none-any.whl (75 kB)\n[CI/test-docker]   | Requirement already satisfied: pip in /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages (from -r requirements/test.pip (line 6)) (21.2.4)\n[CI/test-docker]   | Collecting passlib>=1.6\n[CI/test-docker]   |   Downloading passlib-1.7.4-py2.py3-none-any.whl (525 kB)\n[CI/test-python]   | Collecting setuptools\n[CI/test-python]   |   Downloading setuptools-67.8.0-py3-none-any.whl (1.1 MB)\n[CI/test-docker]   | Collecting pytest>=6.2.2\n[CI/test-docker]   |   Downloading pytest-7.3.1-py3-none-any.whl (320 kB)\n[CI/test-docker]   | Collecting pytest-cov\n[CI/test-docker]   |   Downloading pytest_cov-4.1.0-py3-none-any.whl (21 kB)\n[CI/test-docker]   | Requirement already satisfied: setuptools<62.0.0,>=40.0 in /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages (from -r requirements/test.pip (line 10)) (56.0.0)\n[CI/test-python]   | Installing collected packages: setuptools\n[CI/test-python]   |   Attempting uninstall: setuptools\n[CI/test-python]   |     Found existing installation: setuptools 47.1.0\n[CI/test-python]   |     Uninstalling setuptools-47.1.0:\n[CI/test-python]   |       Successfully uninstalled setuptools-47.1.0\n[CI/test-docker]   | Collecting tox\n[CI/test-docker]   |   Downloading tox-4.5.2-py3-none-any.whl (148 kB)\n[CI/test-docker]   | Collecting twine\n[CI/test-docker]   |   Downloading twine-4.0.2-py3-none-any.whl (36 kB)\n[CI/test-docker]   | Collecting webtest\n[CI/test-docker]   |   Downloading WebTest-3.0.0-py3-none-any.whl (31 kB)\n[CI/test-docker]   | Collecting wheel>=0.25.0\n[CI/test-docker]   |   Downloading wheel-0.40.0-py3-none-any.whl (64 kB)\n[CI/test-python]   | Successfully installed setuptools-67.8.0\n[CI/test-docker]   | Collecting greenlet>=2.0.0\n[CI/test-docker]   |   Downloading greenlet-2.0.2-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (610 kB)\n[CI/test-python]   | WARNING: You are using pip version 21.2.4; however, version 23.1.2 is available.\n[CI/test-python]   | You should consider upgrading via the '/opt/hostedtoolcache/Python/3.7.11/x64/bin/python -m pip install --upgrade pip' command.\n[CI/test-docker]   | Collecting zope.interface\n[CI/test-docker]   |   Downloading zope.interface-6.0-cp39-cp39-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl (246 kB)\n[CI/test-docker]   | Collecting zope.event\n[CI/test-docker]   |   Downloading zope.event-4.6-py2.py3-none-any.whl (6.8 kB)\n[CI/test-docker]   | Collecting httpcore<0.18.0,>=0.15.0\n[CI/test-docker]   |   Downloading httpcore-0.17.2-py3-none-any.whl (72 kB)\n[CI/test-docker]   | Collecting certifi\n[CI/test-docker]   |   Downloading certifi-2023.5.7-py3-none-any.whl (156 kB)\n[CI/test-docker]   | Collecting idna\n[CI/test-docker]   |   Downloading idna-3.4-py3-none-any.whl (61 kB)\n[CI/test-docker]   | Collecting sniffio\n[CI/test-docker]   |   Downloading sniffio-1.3.0-py3-none-any.whl (10 kB)\n[CI/test-docker]   | Collecting iniconfig\n[CI/test-docker]   |   Downloading iniconfig-2.0.0-py3-none-any.whl (5.9 kB)\n[CI/test-python]   | Collecting tox==3.27.*\n[CI/test-docker]   | Collecting exceptiongroup>=1.0.0rc8\n[CI/test-docker]   |   Downloading exceptiongroup-1.1.1-py3-none-any.whl (14 kB)\n[CI/test-python]   |   Downloading tox-3.27.1-py2.py3-none-any.whl (86 kB)\n[CI/check      ]   |   Installing build dependencies: finished with status 'done'\n[CI/check      ]   |   Getting requirements to build wheel: started\n[CI/test-docker]   | Collecting tomli>=1.0.0\n[CI/test-docker]   |   Downloading tomli-2.0.1-py3-none-any.whl (12 kB)\n[CI/test-python]   | Collecting pluggy>=0.12.0\n[CI/test-python]   |   Downloading pluggy-1.0.0-py2.py3-none-any.whl (13 kB)\n[CI/test-docker]   | Collecting packaging\n[CI/test-docker]   |   Downloading packaging-23.1-py3-none-any.whl (48 kB)\n[CI/test-python]   | Collecting six>=1.14.0\n[CI/test-python]   |   Downloading six-1.16.0-py2.py3-none-any.whl (11 kB)\n[CI/test-docker]   | Collecting pluggy<2.0,>=0.12\n[CI/test-docker]   |   Downloading pluggy-1.0.0-py2.py3-none-any.whl (13 kB)\n[CI/check      ]   |   Getting requirements to build wheel: finished with status 'done'\n[CI/test-python]   | Collecting packaging>=14\n[CI/test-python]   |   Downloading packaging-23.1-py3-none-any.whl (48 kB)\n[CI/test-python]   | Collecting py>=1.4.17\n[CI/test-python]   |   Downloading py-1.11.0-py2.py3-none-any.whl (98 kB)\n[CI/check      ]   |   Installing backend dependencies: started\n[CI/test-python]   | Collecting virtualenv!=20.0.0,!=20.0.1,!=20.0.2,!=20.0.3,!=20.0.4,!=20.0.5,!=20.0.6,!=20.0.7,>=16.0.0\n[CI/test-python]   |   Downloading virtualenv-20.23.0-py3-none-any.whl (3.3 MB)\n[CI/test-python]   | Collecting filelock>=3.0.0\n[CI/test-python]   |   Downloading filelock-3.12.0-py3-none-any.whl (10 kB)\n[CI/test-python]   | Collecting tomli>=2.0.1\n[CI/test-python]   |   Downloading tomli-2.0.1-py3-none-any.whl (12 kB)\n[CI/test-python]   | Collecting importlib-metadata>=0.12\n[CI/test-python]   |   Downloading importlib_metadata-6.6.0-py3-none-any.whl (22 kB)\n[CI/test-docker]   | Collecting coverage[toml]>=5.2.1\n[CI/test-docker]   |   Downloading coverage-7.2.6-cp39-cp39-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl (228 kB)\n[CI/test-python]   | Collecting typing-extensions>=3.6.4\n[CI/test-python]   |   Downloading typing_extensions-4.6.2-py3-none-any.whl (31 kB)\n[CI/test-docker]   | Collecting filelock>=3.12\n[CI/test-docker]   |   Downloading filelock-3.12.0-py3-none-any.whl (10 kB)\n[CI/test-python]   | Collecting zipp>=0.5\n[CI/test-python]   |   Downloading zipp-3.15.0-py3-none-any.whl (6.8 kB)\n[CI/test-docker]   | Collecting chardet>=5.1\n[CI/test-docker]   |   Downloading chardet-5.1.0-py3-none-any.whl (199 kB)\n[CI/test-docker]   | Collecting cachetools>=5.3\n[CI/test-docker]   |   Downloading cachetools-5.3.1-py3-none-any.whl (9.3 kB)\n[CI/test-python]   | Collecting distlib<1,>=0.3.6\n[CI/test-python]   |   Downloading distlib-0.3.6-py2.py3-none-any.whl (468 kB)\n[CI/test-python]   | Collecting platformdirs<4,>=3.2\n[CI/test-python]   |   Downloading platformdirs-3.5.1-py3-none-any.whl (15 kB)\n[CI/test-docker]   | Collecting virtualenv>=20.23\n[CI/test-docker]   |   Downloading virtualenv-20.23.0-py3-none-any.whl (3.3 MB)\n[CI/test-python]   | Installing collected packages: zipp, typing-extensions, platformdirs, importlib-metadata, filelock, distlib, virtualenv, tomli, six, py, pluggy, packaging, tox\n[CI/test-docker]   | Collecting pyproject-api>=1.5.1\n[CI/test-docker]   |   Downloading pyproject_api-1.5.1-py3-none-any.whl (12 kB)\n[CI/check      ]   |   Installing backend dependencies: finished with status 'done'\n[CI/test-docker]   | Collecting colorama>=0.4.6\n[CI/check      ]   |     Preparing wheel metadata: started\n[CI/test-docker]   |   Downloading colorama-0.4.6-py2.py3-none-any.whl (25 kB)\n[CI/test-docker]   | Collecting platformdirs>=3.5.1\n[CI/test-docker]   |   Downloading platformdirs-3.5.1-py3-none-any.whl (15 kB)\n[CI/test-docker]   | Collecting rfc3986>=1.4.0\n[CI/test-docker]   |   Downloading rfc3986-2.0.0-py2.py3-none-any.whl (31 kB)\n[CI/check      ]   |     Preparing wheel metadata: finished with status 'done'\n[CI/test-docker]   | Collecting rich>=12.0.0\n[CI/test-docker]   |   Downloading rich-13.3.5-py3-none-any.whl (238 kB)\n[CI/test-python]   | Successfully installed distlib-0.3.6 filelock-3.12.0 importlib-metadata-6.6.0 packaging-23.1 platformdirs-3.5.1 pluggy-1.0.0 py-1.11.0 six-1.16.0 tomli-2.0.1 tox-3.27.1 typing-extensions-4.6.2 virtualenv-20.23.0 zipp-3.15.0\n[CI/test-python]   | WARNING: You are using pip version 21.2.4; however, version 23.1.2 is available.\n[CI/test-python]   | You should consider upgrading via the '/opt/hostedtoolcache/Python/3.7.11/x64/bin/python -m pip install --upgrade pip' command.\n[CI/test-docker]   | Collecting importlib-metadata>=3.6\n[CI/test-docker]   |   Downloading importlib_metadata-6.6.0-py3-none-any.whl (22 kB)\n[CI/test-docker]   | Collecting requests-toolbelt!=0.9.0,>=0.8.0\n[CI/test-docker]   |   Downloading requests_toolbelt-1.0.0-py2.py3-none-any.whl (54 kB)\n[CI/test-python]   \u2705  Success - Main Install dependencies\n[CI/test-docker]   | Collecting keyring>=15.1\n[CI/test-docker]   |   Downloading keyring-23.13.1-py3-none-any.whl (37 kB)\n[CI/test-docker]   | Collecting pkginfo>=1.8.1\n[CI/test-docker]   |   Downloading pkginfo-1.9.6-py3-none-any.whl (30 kB)\n[CI/check      ]   | Collecting gevent>=1.1b4\n[CI/check      ]   |   Downloading gevent-22.10.2-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (6.4 MB)\n[CI/test-docker]   | Collecting readme-renderer>=35.0\n[CI/test-docker]   |   Downloading readme_renderer-37.3-py3-none-any.whl (14 kB)\n[CI/test-python] \u2b50 Run Main Run tests\n[CI/test-docker]   | Collecting urllib3>=1.26.0\n[CI/test-docker]   |   Downloading urllib3-2.0.2-py3-none-any.whl (123 kB)\n[CI/check      ]   | Collecting httpx\n[CI/check      ]   |   Downloading httpx-0.24.1-py3-none-any.whl (75 kB)\n[CI/check      ]   | Requirement already satisfied: pip in /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages (from -r requirements/test.pip (line 6)) (21.2.4)\n[CI/check      ]   | Collecting passlib>=1.6\n[CI/check      ]   |   Downloading passlib-1.7.4-py2.py3-none-any.whl (525 kB)\n[CI/test-docker]   | Collecting requests>=2.20\n[CI/test-docker]   |   Downloading requests-2.31.0-py3-none-any.whl (62 kB)\n[CI/check      ]   | Collecting pytest>=6.2.2\n[CI/check      ]   |   Downloading pytest-7.3.1-py3-none-any.whl (320 kB)\n[CI/test-docker]   | Collecting beautifulsoup4\n[CI/test-python]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/3] user= workdir=\n[CI/test-docker]   |   Downloading beautifulsoup4-4.12.2-py3-none-any.whl (142 kB)\n[CI/check      ]   | Collecting pytest-cov\n[CI/test-docker]   | Collecting waitress>=0.8.5\n[CI/check      ]   |   Downloading pytest_cov-4.1.0-py3-none-any.whl (21 kB)\n[CI/test-docker]   |   Downloading waitress-2.1.2-py3-none-any.whl (57 kB)\n[CI/check      ]   | Requirement already satisfied: setuptools<62.0.0,>=40.0 in /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages (from -r requirements/test.pip (line 10)) (56.0.0)\n[CI/test-docker]   | Collecting WebOb>=1.2\n[CI/test-docker]   |   Downloading WebOb-1.8.7-py2.py3-none-any.whl (114 kB)\n[CI/check      ]   | Collecting tox\n[CI/check      ]   |   Downloading tox-4.5.2-py3-none-any.whl (148 kB)\n[CI/test-docker]   | Collecting h11<0.15,>=0.13\n[CI/check      ]   | Collecting twine\n[CI/test-docker]   |   Downloading h11-0.14.0-py3-none-any.whl (58 kB)\n[CI/check      ]   |   Downloading twine-4.0.2-py3-none-any.whl (36 kB)\n[CI/check      ]   | Collecting webtest\n[CI/check      ]   |   Downloading WebTest-3.0.0-py3-none-any.whl (31 kB)\n[CI/test-docker]   | Collecting anyio<5.0,>=3.0\n[CI/test-docker]   |   Downloading anyio-3.7.0-py3-none-any.whl (80 kB)\n[CI/check      ]   | Collecting wheel>=0.25.0\n[CI/check      ]   |   Using cached wheel-0.40.0-py3-none-any.whl (64 kB)\n[CI/check      ]   | Collecting black\n[CI/check      ]   |   Downloading black-23.3.0-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (1.7 MB)\n[CI/check      ]   | Collecting docopt\n[CI/check      ]   |   Downloading docopt-0.6.2.tar.gz (25 kB)\n[CI/test-docker]   | Collecting zipp>=0.5\n[CI/test-docker]   |   Downloading zipp-3.15.0-py3-none-any.whl (6.8 kB)\n[CI/test-docker]   | Collecting SecretStorage>=3.2\n[CI/test-docker]   |   Downloading SecretStorage-3.3.3-py3-none-any.whl (15 kB)\n[CI/test-docker]   | Collecting jeepney>=0.4.2\n[CI/test-docker]   |   Downloading jeepney-0.8.0-py3-none-any.whl (48 kB)\n[CI/test-docker]   | Collecting jaraco.classes\n[CI/test-docker]   |   Downloading jaraco.classes-3.2.3-py3-none-any.whl (6.0 kB)\n[CI/test-docker]   | Collecting bleach>=2.1.0\n[CI/test-docker]   |   Downloading bleach-6.0.0-py3-none-any.whl (162 kB)\n[CI/test-docker]   | Collecting docutils>=0.13.1\n[CI/test-docker]   |   Downloading docutils-0.20.1-py3-none-any.whl (572 kB)\n[CI/test-docker]   | Collecting Pygments>=2.5.1\n[CI/test-docker]   |   Downloading Pygments-2.15.1-py3-none-any.whl (1.1 MB)\n[CI/test-docker]   | Collecting six>=1.9.0\n[CI/test-docker]   |   Downloading six-1.16.0-py2.py3-none-any.whl (11 kB)\n[CI/test-docker]   | Collecting webencodings\n[CI/test-docker]   |   Downloading webencodings-0.5.1-py2.py3-none-any.whl (11 kB)\n[CI/check      ]   | Collecting mypy\n[CI/check      ]   |   Downloading mypy-1.3.0-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (12.2 MB)\n[CI/test-docker]   | Collecting charset-normalizer<4,>=2\n[CI/test-docker]   |   Downloading charset_normalizer-3.1.0-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (199 kB)\n[CI/test-docker]   | Collecting markdown-it-py<3.0.0,>=2.2.0\n[CI/test-docker]   |   Downloading markdown_it_py-2.2.0-py3-none-any.whl (84 kB)\n[CI/test-docker]   | Collecting mdurl~=0.1\n[CI/test-docker]   |   Downloading mdurl-0.1.2-py3-none-any.whl (10.0 kB)\n[CI/check      ]   | Collecting greenlet>=2.0.0\n[CI/check      ]   |   Downloading greenlet-2.0.2-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (610 kB)\n[CI/test-docker]   | Collecting cryptography>=2.0\n[CI/test-docker]   |   Downloading cryptography-40.0.2-cp36-abi3-manylinux_2_28_x86_64.whl (3.7 MB)\n[CI/check      ]   | Collecting zope.interface\n[CI/check      ]   |   Downloading zope.interface-6.0-cp39-cp39-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl (246 kB)\n[CI/check      ]   | Collecting zope.event\n[CI/check      ]   |   Downloading zope.event-4.6-py2.py3-none-any.whl (6.8 kB)\n[CI/check      ]   | Collecting certifi\n[CI/check      ]   |   Downloading certifi-2023.5.7-py3-none-any.whl (156 kB)\n[CI/check      ]   | Collecting sniffio\n[CI/check      ]   |   Downloading sniffio-1.3.0-py3-none-any.whl (10 kB)\n[CI/check      ]   | Collecting idna\n[CI/test-python]   | GLOB sdist-make: /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/pypiserver-pypiserver/setup.py\n[CI/check      ]   |   Downloading idna-3.4-py3-none-any.whl (61 kB)\n[CI/check      ]   | Collecting httpcore<0.18.0,>=0.15.0\n[CI/check      ]   |   Downloading httpcore-0.17.2-py3-none-any.whl (72 kB)\n[CI/test-docker]   | Collecting cffi>=1.12\n[CI/test-docker]   |   Downloading cffi-1.15.1-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (441 kB)\n[CI/test-docker]   | Collecting pycparser\n[CI/check      ]   | Collecting pluggy<2.0,>=0.12\n[CI/test-docker]   |   Downloading pycparser-2.21-py2.py3-none-any.whl (118 kB)\n[CI/check      ]   |   Downloading pluggy-1.0.0-py2.py3-none-any.whl (13 kB)\n[CI/check      ]   | Collecting packaging\n[CI/check      ]   |   Downloading packaging-23.1-py3-none-any.whl (48 kB)\n[CI/check      ]   | Collecting iniconfig\n[CI/check      ]   |   Downloading iniconfig-2.0.0-py3-none-any.whl (5.9 kB)\n[CI/check      ]   | Collecting tomli>=1.0.0\n[CI/test-docker]   | Collecting distlib<1,>=0.3.6\n[CI/check      ]   |   Downloading tomli-2.0.1-py3-none-any.whl (12 kB)\n[CI/test-docker]   |   Downloading distlib-0.3.6-py2.py3-none-any.whl (468 kB)\n[CI/check      ]   | Collecting exceptiongroup>=1.0.0rc8\n[CI/check      ]   |   Downloading exceptiongroup-1.1.1-py3-none-any.whl (14 kB)\n[CI/test-docker]   | Collecting soupsieve>1.2\n[CI/test-docker]   |   Downloading soupsieve-2.4.1-py3-none-any.whl (36 kB)\n[CI/test-docker]   | Collecting more-itertools\n[CI/test-docker]   |   Downloading more_itertools-9.1.0-py3-none-any.whl (54 kB)\n[CI/test-docker]   | Installing collected packages: pycparser, cffi, zipp, webencodings, urllib3, sniffio, six, more-itertools, mdurl, jeepney, idna, exceptiongroup, cryptography, charset-normalizer, certifi, tomli, soupsieve, SecretStorage, requests, Pygments, pluggy, platformdirs, packaging, markdown-it-py, jaraco.classes, iniconfig, importlib-metadata, h11, filelock, docutils, distlib, coverage, bleach, anyio, zope.interface, zope.event, WebOb, waitress, virtualenv, rich, rfc3986, requests-toolbelt, readme-renderer, pytest, pyproject-api, pkginfo, keyring, httpcore, greenlet, colorama, chardet, cachetools, beautifulsoup4, wheel, webtest, twine, tox, pytest-cov, passlib, httpx, gevent\n[CI/check      ]   | Collecting coverage[toml]>=5.2.1\n[CI/check      ]   |   Downloading coverage-7.2.6-cp39-cp39-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl (228 kB)\n[CI/check      ]   | Collecting virtualenv>=20.23\n[CI/check      ]   |   Downloading virtualenv-20.23.0-py3-none-any.whl (3.3 MB)\n[CI/check      ]   | Collecting pyproject-api>=1.5.1\n[CI/check      ]   |   Downloading pyproject_api-1.5.1-py3-none-any.whl (12 kB)\n[CI/check      ]   | Collecting colorama>=0.4.6\n[CI/check      ]   |   Downloading colorama-0.4.6-py2.py3-none-any.whl (25 kB)\n[CI/check      ]   | Collecting chardet>=5.1\n[CI/check      ]   |   Downloading chardet-5.1.0-py3-none-any.whl (199 kB)\n[CI/check      ]   | Collecting cachetools>=5.3\n[CI/check      ]   |   Downloading cachetools-5.3.1-py3-none-any.whl (9.3 kB)\n[CI/check      ]   | Collecting filelock>=3.12\n[CI/check      ]   |   Downloading filelock-3.12.0-py3-none-any.whl (10 kB)\n[CI/test-python]   | py create: /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/pypiserver-pypiserver/.tox/py\n[CI/check      ]   | Collecting platformdirs>=3.5.1\n[CI/check      ]   |   Downloading platformdirs-3.5.1-py3-none-any.whl (15 kB)\n[CI/check      ]   | Collecting pkginfo>=1.8.1\n[CI/check      ]   |   Downloading pkginfo-1.9.6-py3-none-any.whl (30 kB)\n[CI/check      ]   | Collecting rich>=12.0.0\n[CI/check      ]   |   Downloading rich-13.3.5-py3-none-any.whl (238 kB)\n[CI/check      ]   | Collecting importlib-metadata>=3.6\n[CI/check      ]   |   Downloading importlib_metadata-6.6.0-py3-none-any.whl (22 kB)\n[CI/check      ]   | Collecting readme-renderer>=35.0\n[CI/check      ]   |   Downloading readme_renderer-37.3-py3-none-any.whl (14 kB)\n[CI/check      ]   | Collecting rfc3986>=1.4.0\n[CI/check      ]   |   Downloading rfc3986-2.0.0-py2.py3-none-any.whl (31 kB)\n[CI/check      ]   | Collecting urllib3>=1.26.0\n[CI/check      ]   |   Downloading urllib3-2.0.2-py3-none-any.whl (123 kB)\n[CI/test-python]   | py installdeps: -r/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/pypiserver-pypiserver/requirements/test.pip\n[CI/check      ]   | Collecting requests>=2.20\n[CI/check      ]   |   Downloading requests-2.31.0-py3-none-any.whl (62 kB)\n[CI/check      ]   | Collecting requests-toolbelt!=0.9.0,>=0.8.0\n[CI/check      ]   |   Downloading requests_toolbelt-1.0.0-py2.py3-none-any.whl (54 kB)\n[CI/check      ]   | Collecting keyring>=15.1\n[CI/check      ]   |   Downloading keyring-23.13.1-py3-none-any.whl (37 kB)\n[CI/check      ]   | Collecting beautifulsoup4\n[CI/check      ]   |   Downloading beautifulsoup4-4.12.2-py3-none-any.whl (142 kB)\n[CI/check      ]   | Collecting waitress>=0.8.5\n[CI/check      ]   |   Downloading waitress-2.1.2-py3-none-any.whl (57 kB)\n[CI/check      ]   | Collecting WebOb>=1.2\n[CI/check      ]   |   Downloading WebOb-1.8.7-py2.py3-none-any.whl (114 kB)\n[CI/check      ]   | Collecting click>=8.0.0\n[CI/check      ]   |   Downloading click-8.1.3-py3-none-any.whl (96 kB)\n[CI/check      ]   | Collecting typing-extensions>=3.10.0.0\n[CI/check      ]   |   Downloading typing_extensions-4.6.2-py3-none-any.whl (31 kB)\n[CI/check      ]   | Collecting mypy-extensions>=0.4.3\n[CI/check      ]   |   Downloading mypy_extensions-1.0.0-py3-none-any.whl (4.7 kB)\n[CI/check      ]   | Collecting pathspec>=0.9.0\n[CI/check      ]   |   Downloading pathspec-0.11.1-py3-none-any.whl (29 kB)\n[CI/check      ]   | Collecting anyio<5.0,>=3.0\n[CI/check      ]   |   Downloading anyio-3.7.0-py3-none-any.whl (80 kB)\n[CI/check      ]   | Collecting h11<0.15,>=0.13\n[CI/check      ]   |   Downloading h11-0.14.0-py3-none-any.whl (58 kB)\n[CI/check      ]   | Collecting zipp>=0.5\n[CI/check      ]   |   Downloading zipp-3.15.0-py3-none-any.whl (6.8 kB)\n[CI/check      ]   | Collecting jaraco.classes\n[CI/check      ]   |   Downloading jaraco.classes-3.2.3-py3-none-any.whl (6.0 kB)\n[CI/check      ]   | Collecting SecretStorage>=3.2\n[CI/check      ]   |   Downloading SecretStorage-3.3.3-py3-none-any.whl (15 kB)\n[CI/check      ]   | Collecting jeepney>=0.4.2\n[CI/check      ]   |   Downloading jeepney-0.8.0-py3-none-any.whl (48 kB)\n[CI/check      ]   | Collecting bleach>=2.1.0\n[CI/check      ]   |   Downloading bleach-6.0.0-py3-none-any.whl (162 kB)\n[CI/check      ]   | Collecting docutils>=0.13.1\n[CI/check      ]   |   Downloading docutils-0.20.1-py3-none-any.whl (572 kB)\n[CI/check      ]   | Collecting Pygments>=2.5.1\n[CI/check      ]   |   Downloading Pygments-2.15.1-py3-none-any.whl (1.1 MB)\n[CI/check      ]   | Collecting six>=1.9.0\n[CI/check      ]   |   Downloading six-1.16.0-py2.py3-none-any.whl (11 kB)\n[CI/check      ]   | Collecting webencodings\n[CI/check      ]   |   Downloading webencodings-0.5.1-py2.py3-none-any.whl (11 kB)\n[CI/check      ]   | Collecting charset-normalizer<4,>=2\n[CI/check      ]   |   Downloading charset_normalizer-3.1.0-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (199 kB)\n[CI/check      ]   | Collecting markdown-it-py<3.0.0,>=2.2.0\n[CI/check      ]   |   Downloading markdown_it_py-2.2.0-py3-none-any.whl (84 kB)\n[CI/check      ]   | Collecting mdurl~=0.1\n[CI/check      ]   |   Downloading mdurl-0.1.2-py3-none-any.whl (10.0 kB)\n[CI/check      ]   | Collecting cryptography>=2.0\n[CI/check      ]   |   Downloading cryptography-40.0.2-cp36-abi3-manylinux_2_28_x86_64.whl (3.7 MB)\n[CI/check      ]   | Collecting cffi>=1.12\n[CI/check      ]   |   Downloading cffi-1.15.1-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (441 kB)\n[CI/check      ]   | Collecting pycparser\n[CI/check      ]   |   Downloading pycparser-2.21-py2.py3-none-any.whl (118 kB)\n[CI/check      ]   | Collecting distlib<1,>=0.3.6\n[CI/check      ]   |   Downloading distlib-0.3.6-py2.py3-none-any.whl (468 kB)\n[CI/check      ]   | Collecting soupsieve>1.2\n[CI/check      ]   |   Downloading soupsieve-2.4.1-py3-none-any.whl (36 kB)\n[CI/check      ]   | Collecting more-itertools\n[CI/check      ]   |   Downloading more_itertools-9.1.0-py3-none-any.whl (54 kB)\n[CI/check      ]   | Using legacy 'setup.py install' for docopt, since package 'wheel' is not installed.\n[CI/test-docker]   | Successfully installed Pygments-2.15.1 SecretStorage-3.3.3 WebOb-1.8.7 anyio-3.7.0 beautifulsoup4-4.12.2 bleach-6.0.0 cachetools-5.3.1 certifi-2023.5.7 cffi-1.15.1 chardet-5.1.0 charset-normalizer-3.1.0 colorama-0.4.6 coverage-7.2.6 cryptography-40.0.2 distlib-0.3.6 docutils-0.20.1 exceptiongroup-1.1.1 filelock-3.12.0 gevent-22.10.2 greenlet-2.0.2 h11-0.14.0 httpcore-0.17.2 httpx-0.24.1 idna-3.4 importlib-metadata-6.6.0 iniconfig-2.0.0 jaraco.classes-3.2.3 jeepney-0.8.0 keyring-23.13.1 markdown-it-py-2.2.0 mdurl-0.1.2 more-itertools-9.1.0 packaging-23.1 passlib-1.7.4 pkginfo-1.9.6 platformdirs-3.5.1 pluggy-1.0.0 pycparser-2.21 pyproject-api-1.5.1 pytest-7.3.1 pytest-cov-4.1.0 readme-renderer-37.3 requests-2.31.0 requests-toolbelt-1.0.0 rfc3986-2.0.0 rich-13.3.5 six-1.16.0 sniffio-1.3.0 soupsieve-2.4.1 tomli-2.0.1 tox-4.5.2 twine-4.0.2 urllib3-2.0.2 virtualenv-20.23.0 waitress-2.1.2 webencodings-0.5.1 webtest-3.0.0 wheel-0.40.0 zipp-3.15.0 zope.event-4.6 zope.interface-6.0\n[CI/test-docker]   | WARNING: You are using pip version 21.2.4; however, version 23.1.2 is available.\n[CI/test-docker]   | You should consider upgrading via the '/opt/hostedtoolcache/Python/3.9.6/x64/bin/python -m pip install --upgrade pip' command.\n[CI/check      ]   | Installing collected packages: pycparser, cffi, zipp, webencodings, urllib3, sniffio, six, more-itertools, mdurl, jeepney, idna, exceptiongroup, cryptography, charset-normalizer, certifi, tomli, soupsieve, SecretStorage, requests, Pygments, pluggy, platformdirs, packaging, markdown-it-py, jaraco.classes, iniconfig, importlib-metadata, h11, filelock, docutils, distlib, coverage, bleach, anyio, zope.interface, zope.event, WebOb, waitress, virtualenv, typing-extensions, rich, rfc3986, requests-toolbelt, readme-renderer, pytest, pyproject-api, pkginfo, pathspec, mypy-extensions, keyring, httpcore, greenlet, colorama, click, chardet, cachetools, beautifulsoup4, wheel, webtest, twine, tox, pytest-cov, pypiserver, passlib, mypy, httpx, gevent, docopt, black\n[CI/test-docker]   \u2705  Success - Main Install test dependencies\n[CI/test-docker] \u2b50 Run Main Install package\n[CI/test-docker]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/3] user= workdir=\n[CI/test-docker]   | Obtaining file:///tmp/de65f406-fe28-11ed-a890-af2cc187fc11/pypiserver-pypiserver (from -r requirements/exe.pip (line 7))\n[CI/test-docker]   |   Installing build dependencies: started\n[CI/check      ]   |   Running setup.py develop for pypiserver\n[CI/test-docker]   |   Installing build dependencies: finished with status 'done'\n[CI/test-docker]   |   Getting requirements to build wheel: started\n[CI/test-docker]   |   Getting requirements to build wheel: finished with status 'done'\n[CI/test-docker]   |   Installing backend dependencies: started\n[CI/check      ]   |     Running setup.py install for docopt: started\n[CI/check      ]   |     Running setup.py install for docopt: finished with status 'done'\n[CI/check      ]   | Successfully installed Pygments-2.15.1 SecretStorage-3.3.3 WebOb-1.8.7 anyio-3.7.0 beautifulsoup4-4.12.2 black-23.3.0 bleach-6.0.0 cachetools-5.3.1 certifi-2023.5.7 cffi-1.15.1 chardet-5.1.0 charset-normalizer-3.1.0 click-8.1.3 colorama-0.4.6 coverage-7.2.6 cryptography-40.0.2 distlib-0.3.6 docopt-0.6.2 docutils-0.20.1 exceptiongroup-1.1.1 filelock-3.12.0 gevent-22.10.2 greenlet-2.0.2 h11-0.14.0 httpcore-0.17.2 httpx-0.24.1 idna-3.4 importlib-metadata-6.6.0 iniconfig-2.0.0 jaraco.classes-3.2.3 jeepney-0.8.0 keyring-23.13.1 markdown-it-py-2.2.0 mdurl-0.1.2 more-itertools-9.1.0 mypy-1.3.0 mypy-extensions-1.0.0 packaging-23.1 passlib-1.7.4 pathspec-0.11.1 pkginfo-1.9.6 platformdirs-3.5.1 pluggy-1.0.0 pycparser-2.21 pypiserver-1.5.1 pyproject-api-1.5.1 pytest-7.3.1 pytest-cov-4.1.0 readme-renderer-37.3 requests-2.31.0 requests-toolbelt-1.0.0 rfc3986-2.0.0 rich-13.3.5 six-1.16.0 sniffio-1.3.0 soupsieve-2.4.1 tomli-2.0.1 tox-4.5.2 twine-4.0.2 typing-extensions-4.6.2 urllib3-2.0.2 virtualenv-20.23.0 waitress-2.1.2 webencodings-0.5.1 webtest-3.0.0 wheel-0.40.0 zipp-3.15.0 zope.event-4.6 zope.interface-6.0\n[CI/check      ]   | WARNING: You are using pip version 21.2.4; however, version 23.1.2 is available.\n[CI/check      ]   | You should consider upgrading via the '/opt/hostedtoolcache/Python/3.9.6/x64/bin/python -m pip install --upgrade pip' command.\n[CI/test-docker]   |   Installing backend dependencies: finished with status 'done'\n[CI/test-docker]   |     Preparing wheel metadata: started\n[CI/test-docker]   |     Preparing wheel metadata: finished with status 'done'\n[CI/check      ]   | Collecting types-pkg_resources\n[CI/check      ]   |   Downloading types_pkg_resources-0.1.3-py2.py3-none-any.whl (4.8 kB)\n[CI/test-docker]   | Installing collected packages: pypiserver\n[CI/test-docker]   |   Running setup.py develop for pypiserver\n[CI/check      ]   | Installing collected packages: types-pkg-resources\n[CI/check      ]   | Successfully installed types-pkg-resources-0.1.3\n[CI/check      ]   | WARNING: You are using pip version 21.2.4; however, version 23.1.2 is available.\n[CI/check      ]   | You should consider upgrading via the '/opt/hostedtoolcache/Python/3.9.6/x64/bin/python -m pip install --upgrade pip' command.\n[CI/check      ]   \u2705  Success - Main Install dependencies\n[CI/test-docker]   | Successfully installed pypiserver-1.5.1\n[CI/test-docker]   | WARNING: You are using pip version 21.2.4; however, version 23.1.2 is available.\n[CI/test-docker]   | You should consider upgrading via the '/opt/hostedtoolcache/Python/3.9.6/x64/bin/python -m pip install --upgrade pip' command.\n[CI/test-docker]   \u2705  Success - Main Install package\n[CI/check      ] \u2b50 Run Main Check types\n[CI/check      ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/3] user= workdir=\n[CI/test-docker] \u2b50 Run Main Run tests\n[CI/test-docker]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/4] user= workdir=\n[CI/test-python]   | py inst: /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/pypiserver-pypiserver/.tox/.tmp/package/1/pypiserver-1.5.1.zip\n[CI/test-python]   | py installed: anyio==3.7.0,beautifulsoup4==4.12.2,bleach==6.0.0,cachetools==5.3.1,certifi==2023.5.7,cffi==1.15.1,chardet==5.1.0,charset-normalizer==3.1.0,colorama==0.4.6,coverage==7.2.6,cryptography==40.0.2,distlib==0.3.6,docutils==0.20.1,exceptiongroup==1.1.1,filelock==3.12.0,gevent==22.10.2,greenlet==2.0.2,h11==0.14.0,httpcore==0.17.2,httpx==0.24.1,idna==3.4,importlib-metadata==6.6.0,importlib-resources==5.12.0,iniconfig==2.0.0,jaraco.classes==3.2.3,jeepney==0.8.0,keyring==23.13.1,markdown-it-py==2.2.0,mdurl==0.1.2,more-itertools==9.1.0,packaging==23.1,passlib==1.7.4,pkginfo==1.9.6,platformdirs==3.5.1,pluggy==1.0.0,pycparser==2.21,Pygments==2.15.1,pypiserver @ file:///tmp/de65f406-fe28-11ed-a890-af2cc187fc11/pypiserver-pypiserver/.tox/.tmp/package/1/pypiserver-1.5.1.zip#sha256=08528e6990ec981c7ebd0fa4750307b3e8f3ebf071045102f171da30aa689ff7,pyproject_api==1.5.1,pytest==7.3.1,pytest-cov==4.1.0,readme-renderer==37.3,requests==2.31.0,requests-toolbelt==1.0.0,rfc3986==2.0.0,rich==13.3.5,SecretStorage==3.3.3,six==1.16.0,sniffio==1.3.0,soupsieve==2.4.1,tomli==2.0.1,tox==4.5.2,twine==4.0.2,typing_extensions==4.6.2,urllib3==2.0.2,virtualenv==20.23.0,waitress==2.1.2,webencodings==0.5.1,WebOb==1.8.7,WebTest==3.0.0,zipp==3.15.0,zope.event==4.6,zope.interface==6.0\n[CI/test-python]   | py run-test-pre: PYTHONHASHSEED='1414452294'\n[CI/test-python]   | py run-test: commands[0] | /bin/sh -c true\n[CI/test-python]   | py run-test: commands[1] | pytest --cov=pypiserver tests\n[CI/test-docker]   | ============================= test session starts ==============================\n[CI/test-docker]   | platform linux -- Python 3.9.6, pytest-7.3.1, pluggy-1.0.0\n[CI/test-docker]   | rootdir: /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/pypiserver-pypiserver\n[CI/test-docker]   | configfile: tox.ini\n[CI/test-docker]   | plugins: cov-4.1.0, anyio-3.7.0\n[CI/test-docker]   | collected 38 items\n[CI/test-docker]   | \n[CI/test-python]   | ============================= test session starts ==============================\n[CI/test-python]   | platform linux -- Python 3.7.11, pytest-7.3.1, pluggy-1.0.0\n[CI/test-python]   | cachedir: .tox/py/.pytest_cache\n[CI/test-python]   | rootdir: /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/pypiserver-pypiserver\n[CI/test-python]   | configfile: tox.ini\n[CI/test-python]   | plugins: cov-4.1.0, anyio-3.7.0\n[CI/test-python]   | collected 486 items\n[CI/test-python]   | \n[CI/test-python]   | tests/test_app.py ...................................................... [ 11%]\n[CI/test-docker]   | docker/test_docker.py EEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEF             [100%]\n[CI/test-docker]   | \n[CI/test-docker]   | ==================================== ERRORS ====================================\n[CI/test-docker]   | ___________________ ERROR at setup of TestCommands.test_help ___________________\n[CI/test-docker]   | \n[CI/test-docker]   |     @pytest.fixture(scope=\"session\")\n[CI/test-docker]   |     def image() -> str:\n[CI/test-docker]   |         \"\"\"Build the docker image for pypiserver.\n[CI/test-docker]   |     \n[CI/test-docker]   |         Return the tag.\n[CI/test-docker]   |         \"\"\"\n[CI/test-docker]   |         tag = \"pypiserver:test\"\n[CI/test-docker]   | >       run(\n[CI/test-docker]   |             \"docker\",\n[CI/test-docker]   |             \"build\",\n[CI/test-docker]   |             \"--file\",\n[CI/test-docker]   |             str(DOCKERFILE),\n[CI/test-docker]   |             \"--tag\",\n[CI/test-docker]   |             tag,\n[CI/test-docker]   |             str(ROOT_DIR),\n[CI/test-docker]   |             cwd=ROOT_DIR,\n[CI/test-docker]   |         )\n[CI/test-docker]   | \n[CI/test-docker]   | docker/test_docker.py:47: \n[CI/test-docker]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[CI/test-docker]   | \n[CI/test-docker]   | capture = False, raise_on_err = True\n[CI/test-docker]   | check_code = <function <lambda> at 0x7f6ffc32bdc0>\n[CI/test-docker]   | cmd = ('docker', 'build', '--file', '/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/pypiserver-pypiserver/Dockerfile', '--tag', 'pypiserver:test', ...)\n[CI/test-docker]   | popen_kwargs = {'cwd': PosixPath('/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/pypiserver-pypiserver')}\n[CI/test-docker]   | stdout = None, stderr = None\n[CI/test-docker]   | proc = <Popen: returncode: 1 args: ('docker', 'build', '--file', '/tmp/de65f406-fe2...>\n[CI/test-docker]   | out = None, err = None, result = RunReturn(returncode=1, out='', err='')\n[CI/test-docker]   | \n[CI/test-docker]   |     def run(\n[CI/test-docker]   |         *cmd: str,\n[CI/test-docker]   |         capture: bool = False,\n[CI/test-docker]   |         raise_on_err: bool = True,\n[CI/test-docker]   |         check_code: t.Callable[[int], bool] = lambda c: c == 0,\n[CI/test-docker]   |         **popen_kwargs: t.Any,\n[CI/test-docker]   |     ) -> RunReturn:\n[CI/test-docker]   |         \"\"\"Run a command to completion.\"\"\"\n[CI/test-docker]   |         stdout = subprocess.PIPE if capture else None\n[CI/test-docker]   |         stderr = subprocess.PIPE if capture else None\n[CI/test-docker]   |         proc = subprocess.Popen(cmd, stdout=stdout, stderr=stderr, **popen_kwargs)\n[CI/test-docker]   |         out, err = proc.communicate()\n[CI/test-docker]   |         result = RunReturn(\n[CI/test-docker]   |             proc.returncode,\n[CI/test-docker]   |             \"\" if out is None else out.decode(),\n[CI/test-docker]   |             \"\" if err is None else err.decode(),\n[CI/test-docker]   |         )\n[CI/test-docker]   |         if raise_on_err and not check_code(result.returncode):\n[CI/test-docker]   | >           raise RuntimeError(result)\n[CI/test-docker]   | E           RuntimeError: RunReturn(returncode=1, out='', err='')\n[CI/test-docker]   | \n[CI/test-docker]   | docker/test_docker.py:142: RuntimeError\n[CI/test-docker]   | ---------------------------- Captured stderr setup -----------------------------\n[CI/test-docker]   | time=\"2023-05-29T14:14:46Z\" level=error msg=\"Can't add file /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/pypiserver-pypiserver/README.rst to tar: io: read/write on closed pipe\"\n[CI/test-docker]   | time=\"2023-05-29T14:14:46Z\" level=error msg=\"Can't close tar writer: io: read/write on closed pipe\"\n[CI/test-docker]   | Got permission denied while trying to connect to the Docker daemon socket at unix:///var/run/docker.sock: Post \"http://%2Fvar%2Frun%2Fdocker.sock/v1.24/build?buildargs=%7B%7D&cachefrom=%5B%5D&cgroupparent=&cpuperiod=0&cpuquota=0&cpusetcpus=&cpusetmems=&cpushares=0&dockerfile=Dockerfile&labels=%7B%7D&memory=0&memswap=0&networkmode=default&rm=1&shmsize=0&t=pypiserver%3Atest&target=&ulimits=null&version=1\": dial unix /var/run/docker.sock: connect: permission denied\n[CI/test-docker]   | _________________ ERROR at setup of TestCommands.test_version __________________\n[CI/test-docker]   | \n[CI/test-docker]   |     @pytest.fixture(scope=\"session\")\n[CI/test-docker]   |     def image() -> str:\n[CI/test-docker]   |         \"\"\"Build the docker image for pypiserver.\n[CI/test-docker]   |     \n[CI/test-docker]   |         Return the tag.\n[CI/test-docker]   |         \"\"\"\n[CI/test-docker]   |         tag = \"pypiserver:test\"\n[CI/test-docker]   | >       run(\n[CI/test-docker]   |             \"docker\",\n[CI/test-docker]   |             \"build\",\n[CI/test-docker]   |             \"--file\",\n[CI/test-docker]   |             str(DOCKERFILE),\n[CI/test-docker]   |             \"--tag\",\n[CI/test-docker]   |             tag,\n[CI/test-docker]   |             str(ROOT_DIR),\n[CI/test-docker]   |             cwd=ROOT_DIR,\n[CI/test-docker]   |         )\n[CI/test-docker]   | \n[CI/test-docker]   | docker/test_docker.py:47: \n[CI/test-docker]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[CI/test-docker]   | \n[CI/test-docker]   | capture = False, raise_on_err = True\n[CI/test-docker]   | check_code = <function <lambda> at 0x7f6ffc32bdc0>\n[CI/test-docker]   | cmd = ('docker', 'build', '--file', '/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/pypiserver-pypiserver/Dockerfile', '--tag', 'pypiserver:test', ...)\n[CI/test-docker]   | popen_kwargs = {'cwd': PosixPath('/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/pypiserver-pypiserver')}\n[CI/test-docker]   | stdout = None, stderr = None\n[CI/test-docker]   | proc = <Popen: returncode: 1 args: ('docker', 'build', '--file', '/tmp/de65f406-fe2...>\n[CI/test-docker]   | out = None, err = None, result = RunReturn(returncode=1, out='', err='')\n[CI/test-docker]   | \n[CI/test-docker]   |     def run(\n[CI/test-docker]   |         *cmd: str,\n[CI/test-docker]   |         capture: bool = False,\n[CI/test-docker]   |         raise_on_err: bool = True,\n[CI/test-docker]   |         check_code: t.Callable[[int], bool] = lambda c: c == 0,\n[CI/test-docker]   |         **popen_kwargs: t.Any,\n[CI/test-docker]   |     ) -> RunReturn:\n[CI/test-docker]   |         \"\"\"Run a command to completion.\"\"\"\n[CI/test-docker]   |         stdout = subprocess.PIPE if capture else None\n[CI/test-docker]   |         stderr = subprocess.PIPE if capture else None\n[CI/test-docker]   |         proc = subprocess.Popen(cmd, stdout=stdout, stderr=stderr, **popen_kwargs)\n[CI/test-docker]   |         out, err = proc.communicate()\n[CI/test-docker]   |         result = RunReturn(\n[CI/test-docker]   |             proc.returncode,\n[CI/test-docker]   |             \"\" if out is None else out.decode(),\n[CI/test-docker]   |             \"\" if err is None else err.decode(),\n[CI/test-docker]   |         )\n[CI/test-docker]   |         if raise_on_err and not check_code(result.returncode):\n[CI/test-docker]   | >           raise RuntimeError(result)\n[CI/test-docker]   | E           RuntimeError: RunReturn(returncode=1, out='', err='')\n[CI/test-docker]   | \n[CI/test-docker]   | docker/test_docker.py:142: RuntimeError\n[CI/test-docker]   | _________ ERROR at setup of TestPermissions.test_needs_rx_on_data[454] _________\n[CI/test-docker]   | \n[CI/test-docker]   |     @pytest.fixture(scope=\"session\")\n[CI/test-docker]   |     def image() -> str:\n[CI/test-docker]   |         \"\"\"Build the docker image for pypiserver.\n[CI/test-docker]   |     \n[CI/test-docker]   |         Return the tag.\n[CI/test-docker]   |         \"\"\"\n[CI/test-docker]   |         tag = \"pypiserver:test\"\n[CI/test-docker]   | >       run(\n[CI/test-docker]   |             \"docker\",\n[CI/test-docker]   |             \"build\",\n[CI/test-docker]   |             \"--file\",\n[CI/test-docker]   |             str(DOCKERFILE),\n[CI/test-docker]   |             \"--tag\",\n[CI/test-docker]   |             tag,\n[CI/test-docker]   |             str(ROOT_DIR),\n[CI/test-docker]   |             cwd=ROOT_DIR,\n[CI/test-docker]   |         )\n[CI/test-docker]   | \n[CI/test-docker]   | docker/test_docker.py:47: \n[CI/test-docker]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[CI/test-docker]   | \n[CI/test-docker]   | capture = False, raise_on_err = True\n[CI/test-docker]   | check_code = <function <lambda> at 0x7f6ffc32bdc0>\n[CI/test-docker]   | cmd = ('docker', 'build', '--file', '/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/pypiserver-pypiserver/Dockerfile', '--tag', 'pypiserver:test', ...)\n[CI/test-docker]   | popen_kwargs = {'cwd': PosixPath('/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/pypiserver-pypiserver')}\n[CI/test-docker]   | stdout = None, stderr = None\n[CI/test-docker]   | proc = <Popen: returncode: 1 args: ('docker', 'build', '--file', '/tmp/de65f406-fe2...>\n[CI/test-docker]   | out = None, err = None, result = RunReturn(returncode=1, out='', err='')\n[CI/test-docker]   | \n[CI/test-docker]   |     def run(\n[CI/test-docker]   |         *cmd: str,\n[CI/test-docker]   |         capture: bool = False,\n[CI/test-docker]   |         raise_on_err: bool = True,\n[CI/test-docker]   |         check_code: t.Callable[[int], bool] = lambda c: c == 0,\n[CI/test-docker]   |         **popen_kwargs: t.Any,\n[CI/test-docker]   |     ) -> RunReturn:\n[CI/test-docker]   |         \"\"\"Run a command to completion.\"\"\"\n[CI/test-docker]   |         stdout = subprocess.PIPE if capture else None\n[CI/test-docker]   |         stderr = subprocess.PIPE if capture else None\n[CI/test-docker]   |         proc = subprocess.Popen(cmd, stdout=stdout, stderr=stderr, **popen_kwargs)\n[CI/test-docker]   |         out, err = proc.communicate()\n[CI/test-docker]   |         result = RunReturn(\n[CI/test-docker]   |             proc.returncode,\n[CI/test-docker]   |             \"\" if out is None else out.decode(),\n[CI/test-docker]   |             \"\" if err is None else err.decode(),\n[CI/test-docker]   |         )\n[CI/test-docker]   |         if raise_on_err and not check_code(result.returncode):\n[CI/test-docker]   | >           raise RuntimeError(result)\n[CI/test-docker]   | E           RuntimeError: RunReturn(returncode=1, out='', err='')\n[CI/test-docker]   | \n[CI/test-docker]   | docker/test_docker.py:142: RuntimeError\n[CI/test-docker]   | _________ ERROR at setup of TestPermissions.test_needs_rx_on_data[449] _________\n[CI/test-docker]   | \n[CI/test-docker]   |     @pytest.fixture(scope=\"session\")\n[CI/test-docker]   |     def image() -> str:\n[CI/test-docker]   |         \"\"\"Build the docker image for pypiserver.\n[CI/test-docker]   |     \n[CI/test-docker]   |         Return the tag.\n[CI/test-docker]   |         \"\"\"\n[CI/test-docker]   |         tag = \"pypiserver:test\"\n[CI/test-docker]   | >       run(\n[CI/test-docker]   |             \"docker\",\n[CI/test-docker]   |             \"build\",\n[CI/test-docker]   |             \"--file\",\n[CI/test-docker]   |             str(DOCKERFILE),\n[CI/test-docker]   |             \"--tag\",\n[CI/test-docker]   |             tag,\n[CI/test-docker]   |             str(ROOT_DIR),\n[CI/test-docker]   |             cwd=ROOT_DIR,\n[CI/test-docker]   |         )\n[CI/test-docker]   | \n[CI/test-docker]   | docker/test_docker.py:47: \n[CI/test-docker]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[CI/test-docker]   | \n[CI/test-docker]   | capture = False, raise_on_err = True\n[CI/test-docker]   | check_code = <function <lambda> at 0x7f6ffc32bdc0>\n[CI/test-docker]   | cmd = ('docker', 'build', '--file', '/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/pypiserver-pypiserver/Dockerfile', '--tag', 'pypiserver:test', ...)\n[CI/test-docker]   | popen_kwargs = {'cwd': PosixPath('/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/pypiserver-pypiserver')}\n[CI/test-docker]   | stdout = None, stderr = None\n[CI/test-docker]   | proc = <Popen: returncode: 1 args: ('docker', 'build', '--file', '/tmp/de65f406-fe2...>\n[CI/test-docker]   | out = None, err = None, result = RunReturn(returncode=1, out='', err='')\n[CI/test-docker]   | \n[CI/test-docker]   |     def run(\n[CI/test-docker]   |         *cmd: str,\n[CI/test-docker]   |         capture: bool = False,\n[CI/test-docker]   |         raise_on_err: bool = True,\n[CI/test-docker]   |         check_code: t.Callable[[int], bool] = lambda c: c == 0,\n[CI/test-docker]   |         **popen_kwargs: t.Any,\n[CI/test-docker]   |     ) -> RunReturn:\n[CI/test-docker]   |         \"\"\"Run a command to completion.\"\"\"\n[CI/test-docker]   |         stdout = subprocess.PIPE if capture else None\n[CI/test-docker]   |         stderr = subprocess.PIPE if capture else None\n[CI/test-docker]   |         proc = subprocess.Popen(cmd, stdout=stdout, stderr=stderr, **popen_kwargs)\n[CI/test-docker]   |         out, err = proc.communicate()\n[CI/test-docker]   |         result = RunReturn(\n[CI/test-docker]   |             proc.returncode,\n[CI/test-docker]   |             \"\" if out is None else out.decode(),\n[CI/test-docker]   |             \"\" if err is None else err.decode(),\n[CI/test-docker]   |         )\n[CI/test-docker]   |         if raise_on_err and not check_code(result.returncode):\n[CI/test-docker]   | >           raise RuntimeError(result)\n[CI/test-docker]   | E           RuntimeError: RunReturn(returncode=1, out='', err='')\n[CI/test-docker]   | \n[CI/test-docker]   | docker/test_docker.py:142: RuntimeError\n[CI/test-docker]   | _________ ERROR at setup of TestPermissions.test_needs_rx_on_data[452] _________\n[CI/test-docker]   | \n[CI/test-docker]   |     @pytest.fixture(scope=\"session\")\n[CI/test-docker]   |     def image() -> str:\n[CI/test-docker]   |         \"\"\"Build the docker image for pypiserver.\n[CI/test-docker]   |     \n[CI/test-docker]   |         Return the tag.\n[CI/test-docker]   |         \"\"\"\n[CI/test-docker]   |         tag = \"pypiserver:test\"\n[CI/test-docker]   | >       run(\n[CI/test-docker]   |             \"docker\",\n[CI/test-docker]   |             \"build\",\n[CI/test-docker]   |             \"--file\",\n[CI/test-docker]   |             str(DOCKERFILE),\n[CI/test-docker]   |             \"--tag\",\n[CI/test-docker]   |             tag,\n[CI/test-docker]   |             str(ROOT_DIR),\n[CI/test-docker]   |             cwd=ROOT_DIR,\n[CI/test-docker]   |         )\n[CI/test-docker]   | \n[CI/test-docker]   | docker/test_docker.py:47: \n[CI/test-docker]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[CI/test-docker]   | \n[CI/test-docker]   | capture = False, raise_on_err = True\n[CI/test-docker]   | check_code = <function <lambda> at 0x7f6ffc32bdc0>\n[CI/test-docker]   | cmd = ('docker', 'build', '--file', '/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/pypiserver-pypiserver/Dockerfile', '--tag', 'pypiserver:test', ...)\n[CI/test-docker]   | popen_kwargs = {'cwd': PosixPath('/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/pypiserver-pypiserver')}\n[CI/test-docker]   | stdout = None, stderr = None\n[CI/test-docker]   | proc = <Popen: returncode: 1 args: ('docker', 'build', '--file', '/tmp/de65f406-fe2...>\n[CI/test-docker]   | out = None, err = None, result = RunReturn(returncode=1, out='', err='')\n[CI/test-docker]   | \n[CI/test-docker]   |     def run(\n[CI/test-docker]   |         *cmd: str,\n[CI/test-docker]   |         capture: bool = False,\n[CI/test-docker]   |         raise_on_err: bool = True,\n[CI/test-docker]   |         check_code: t.Callable[[int], bool] = lambda c: c == 0,\n[CI/test-docker]   |         **popen_kwargs: t.Any,\n[CI/test-docker]   |     ) -> RunReturn:\n[CI/test-docker]   |         \"\"\"Run a command to completion.\"\"\"\n[CI/test-docker]   |         stdout = subprocess.PIPE if capture else None\n[CI/test-docker]   |         stderr = subprocess.PIPE if capture else None\n[CI/test-docker]   |         proc = subprocess.Popen(cmd, stdout=stdout, stderr=stderr, **popen_kwargs)\n[CI/test-docker]   |         out, err = proc.communicate()\n[CI/test-docker]   |         result = RunReturn(\n[CI/test-docker]   |             proc.returncode,\n[CI/test-docker]   |             \"\" if out is None else out.decode(),\n[CI/test-docker]   |             \"\" if err is None else err.decode(),\n[CI/test-docker]   |         )\n[CI/test-docker]   |         if raise_on_err and not check_code(result.returncode):\n[CI/test-docker]   | >           raise RuntimeError(result)\n[CI/test-docker]   | E           RuntimeError: RunReturn(returncode=1, out='', err='')\n[CI/test-docker]   | \n[CI/test-docker]   | docker/test_docker.py:142: RuntimeError\n[CI/test-docker]   | __ ERROR at setup of TestPermissions.test_needs_rwx_on_packages[extra_args0] ___\n[CI/test-docker]   | \n[CI/test-docker]   |     @pytest.fixture(scope=\"session\")\n[CI/test-docker]   |     def image() -> str:\n[CI/test-docker]   |         \"\"\"Build the docker image for pypiserver.\n[CI/test-docker]   |     \n[CI/test-docker]   |         Return the tag.\n[CI/test-docker]   |         \"\"\"\n[CI/test-docker]   |         tag = \"pypiserver:test\"\n[CI/test-docker]   | >       run(\n[CI/test-docker]   |             \"docker\",\n[CI/test-docker]   |             \"build\",\n[CI/test-docker]   |             \"--file\",\n[CI/test-docker]   |             str(DOCKERFILE),\n[CI/test-docker]   |             \"--tag\",\n[CI/test-docker]   |             tag,\n[CI/test-docker]   |             str(ROOT_DIR),\n[CI/test-docker]   |             cwd=ROOT_DIR,\n[CI/test-docker]   |         )\n[CI/test-docker]   | \n[CI/test-docker]   | docker/test_docker.py:47: \n[CI/test-docker]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[CI/test-docker]   | \n[CI/test-docker]   | capture = False, raise_on_err = True\n[CI/test-docker]   | check_code = <function <lambda> at 0x7f6ffc32bdc0>\n[CI/test-docker]   | cmd = ('docker', 'build', '--file', '/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/pypiserver-pypiserver/Dockerfile', '--tag', 'pypiserver:test', ...)\n[CI/test-docker]   | popen_kwargs = {'cwd': PosixPath('/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/pypiserver-pypiserver')}\n[CI/test-docker]   | stdout = None, stderr = None\n[CI/test-docker]   | proc = <Popen: returncode: 1 args: ('docker', 'build', '--file', '/tmp/de65f406-fe2...>\n[CI/test-docker]   | out = None, err = None, result = RunReturn(returncode=1, out='', err='')\n[CI/test-docker]   | \n[CI/test-docker]   |     def run(\n[CI/test-docker]   |         *cmd: str,\n[CI/test-docker]   |         capture: bool = False,\n[CI/test-docker]   |         raise_on_err: bool = True,\n[CI/test-docker]   |         check_code: t.Callable[[int], bool] = lambda c: c == 0,\n[CI/test-docker]   |         **popen_kwargs: t.Any,\n[CI/test-docker]   |     ) -> RunReturn:\n[CI/test-docker]   |         \"\"\"Run a command to completion.\"\"\"\n[CI/test-docker]   |         stdout = subprocess.PIPE if capture else None\n[CI/test-docker]   |         stderr = subprocess.PIPE if capture else None\n[CI/test-docker]   |         proc = subprocess.Popen(cmd, stdout=stdout, stderr=stderr, **popen_kwargs)\n[CI/test-docker]   |         out, err = proc.communicate()\n[CI/test-docker]   |         result = RunReturn(\n[CI/test-docker]   |             proc.returncode,\n[CI/test-docker]   |             \"\" if out is None else out.decode(),\n[CI/test-docker]   |             \"\" if err is None else err.decode(),\n[CI/test-docker]   |         )\n[CI/test-docker]   |         if raise_on_err and not check_code(result.returncode):\n[CI/test-docker]   | >           raise RuntimeError(result)\n[CI/test-docker]   | E           RuntimeError: RunReturn(returncode=1, out='', err='')\n[CI/test-docker]   | \n[CI/test-docker]   | docker/test_docker.py:142: RuntimeError\n[CI/test-docker]   | __ ERROR at setup of TestPermissions.test_needs_rwx_on_packages[extra_args1] ___\n[CI/test-docker]   | \n[CI/test-docker]   |     @pytest.fixture(scope=\"session\")\n[CI/test-docker]   |     def image() -> str:\n[CI/test-docker]   |         \"\"\"Build the docker image for pypiserver.\n[CI/test-docker]   |     \n[CI/test-docker]   |         Return the tag.\n[CI/test-docker]   |         \"\"\"\n[CI/test-docker]   |         tag = \"pypiserver:test\"\n[CI/test-docker]   | >       run(\n[CI/test-docker]   |             \"docker\",\n[CI/test-docker]   |             \"build\",\n[CI/test-docker]   |             \"--file\",\n[CI/test-docker]   |             str(DOCKERFILE),\n[CI/test-docker]   |             \"--tag\",\n[CI/test-docker]   |             tag,\n[CI/test-docker]   |             str(ROOT_DIR),\n[CI/test-docker]   |             cwd=ROOT_DIR,\n[CI/test-docker]   |         )\n[CI/test-docker]   | \n[CI/test-docker]   | docker/test_docker.py:47: \n[CI/test-docker]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[CI/test-docker]   | \n[CI/test-docker]   | capture = False, raise_on_err = True\n[CI/test-docker]   | check_code = <function <lambda> at 0x7f6ffc32bdc0>\n[CI/test-docker]   | cmd = ('docker', 'build', '--file', '/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/pypiserver-pypiserver/Dockerfile', '--tag', 'pypiserver:test', ...)\n[CI/test-docker]   | popen_kwargs = {'cwd': PosixPath('/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/pypiserver-pypiserver')}\n[CI/test-docker]   | stdout = None, stderr = None\n[CI/test-docker]   | proc = <Popen: returncode: 1 args: ('docker', 'build', '--file', '/tmp/de65f406-fe2...>\n[CI/test-docker]   | out = None, err = None, result = RunReturn(returncode=1, out='', err='')\n[CI/test-docker]   | \n[CI/test-docker]   |     def run(\n[CI/test-docker]   |         *cmd: str,\n[CI/test-docker]   |         capture: bool = False,\n[CI/test-docker]   |         raise_on_err: bool = True,\n[CI/test-docker]   |         check_code: t.Callable[[int], bool] = lambda c: c == 0,\n[CI/test-docker]   |         **popen_kwargs: t.Any,\n[CI/test-docker]   |     ) -> RunReturn:\n[CI/test-docker]   |         \"\"\"Run a command to completion.\"\"\"\n[CI/test-docker]   |         stdout = subprocess.PIPE if capture else None\n[CI/test-docker]   |         stderr = subprocess.PIPE if capture else None\n[CI/test-docker]   |         proc = subprocess.Popen(cmd, stdout=stdout, stderr=stderr, **popen_kwargs)\n[CI/test-docker]   |         out, err = proc.communicate()\n[CI/test-docker]   |         result = RunReturn(\n[CI/test-docker]   |             proc.returncode,\n[CI/test-docker]   |             \"\" if out is None else out.decode(),\n[CI/test-docker]   |             \"\" if err is None else err.decode(),\n[CI/test-docker]   |         )\n[CI/test-docker]   |         if raise_on_err and not check_code(result.returncode):\n[CI/test-docker]   | >           raise RuntimeError(result)\n[CI/test-docker]   | E           RuntimeError: RunReturn(returncode=1, out='', err='')\n[CI/test-docker]   | \n[CI/test-docker]   | docker/test_docker.py:142: RuntimeError\n[CI/test-docker]   | ________ ERROR at setup of TestPermissions.test_runs_as_pypiserver_user ________\n[CI/test-docker]   | \n[CI/test-docker]   |     @pytest.fixture(scope=\"session\")\n[CI/test-docker]   |     def image() -> str:\n[CI/test-docker]   |         \"\"\"Build the docker image for pypiserver.\n[CI/test-docker]   |     \n[CI/test-docker]   |         Return the tag.\n[CI/test-docker]   |         \"\"\"\n[CI/test-docker]   |         tag = \"pypiserver:test\"\n[CI/test-docker]   | >       run(\n[CI/test-docker]   |             \"docker\",\n[CI/test-docker]   |             \"build\",\n[CI/test-docker]   |             \"--file\",\n[CI/test-docker]   |             str(DOCKERFILE),\n[CI/test-docker]   |             \"--tag\",\n[CI/test-docker]   |             tag,\n[CI/test-docker]   |             str(ROOT_DIR),\n[CI/test-docker]   |             cwd=ROOT_DIR,\n[CI/test-docker]   |         )\n[CI/test-docker]   | \n[CI/test-docker]   | docker/test_docker.py:47: \n[CI/test-docker]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[CI/test-docker]   | \n[CI/test-docker]   | capture = False, raise_on_err = True\n[CI/test-docker]   | check_code = <function <lambda> at 0x7f6ffc32bdc0>\n[CI/test-docker]   | cmd = ('docker', 'build', '--file', '/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/pypiserver-pypiserver/Dockerfile', '--tag', 'pypiserver:test', ...)\n[CI/test-docker]   | popen_kwargs = {'cwd': PosixPath('/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/pypiserver-pypiserver')}\n[CI/test-docker]   | stdout = None, stderr = None\n[CI/test-docker]   | proc = <Popen: returncode: 1 args: ('docker', 'build', '--file', '/tmp/de65f406-fe2...>\n[CI/test-docker]   | out = None, err = None, result = RunReturn(returncode=1, out='', err='')\n[CI/test-docker]   | \n[CI/test-docker]   |     def run(\n[CI/test-docker]   |         *cmd: str,\n[CI/test-docker]   |         capture: bool = False,\n[CI/test-docker]   |         raise_on_err: bool = True,\n[CI/test-docker]   |         check_code: t.Callable[[int], bool] = lambda c: c == 0,\n[CI/test-docker]   |         **popen_kwargs: t.Any,\n[CI/test-docker]   |     ) -> RunReturn:\n[CI/test-docker]   |         \"\"\"Run a command to completion.\"\"\"\n[CI/test-docker]   |         stdout = subprocess.PIPE if capture else None\n[CI/test-docker]   |         stderr = subprocess.PIPE if capture else None\n[CI/test-docker]   |         proc = subprocess.Popen(cmd, stdout=stdout, stderr=stderr, **popen_kwargs)\n[CI/test-docker]   |         out, err = proc.communicate()\n[CI/test-docker]   |         result = RunReturn(\n[CI/test-docker]   |             proc.returncode,\n[CI/test-docker]   |             \"\" if out is None else out.decode(),\n[CI/test-docker]   |             \"\" if err is None else err.decode(),\n[CI/test-docker]   |         )\n[CI/test-docker]   |         if raise_on_err and not check_code(result.returncode):\n[CI/test-docker]   | >           raise RuntimeError(result)\n[CI/test-docker]   | E           RuntimeError: RunReturn(returncode=1, out='', err='')\n[CI/test-docker]   | \n[CI/test-docker]   | docker/test_docker.py:142: RuntimeError\n[CI/test-docker]   | ____________ ERROR at setup of TestBasics.test_download[container0] ____________\n[CI/test-docker]   | \n[CI/test-docker]   |     @pytest.fixture(scope=\"session\")\n[CI/test-docker]   |     def image() -> str:\n[CI/test-docker]   |         \"\"\"Build the docker image for pypiserver.\n[CI/test-docker]   |     \n[CI/test-docker]   |         Return the tag.\n[CI/test-docker]   |         \"\"\"\n[CI/test-docker]   |         tag = \"pypiserver:test\"\n[CI/test-docker]   | >       run(\n[CI/test-docker]   |             \"docker\",\n[CI/test-docker]   |             \"build\",\n[CI/test-docker]   |             \"--file\",\n[CI/test-docker]   |             str(DOCKERFILE),\n[CI/test-docker]   |             \"--tag\",\n[CI/test-docker]   |             tag,\n[CI/test-docker]   |             str(ROOT_DIR),\n[CI/test-docker]   |             cwd=ROOT_DIR,\n[CI/test-docker]   |         )\n[CI/test-docker]   | \n[CI/test-docker]   | docker/test_docker.py:47: \n[CI/test-docker]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[CI/test-docker]   | \n[CI/test-docker]   | capture = False, raise_on_err = True\n[CI/test-docker]   | check_code = <function <lambda> at 0x7f6ffc32bdc0>\n[CI/test-docker]   | cmd = ('docker', 'build', '--file', '/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/pypiserver-pypiserver/Dockerfile', '--tag', 'pypiserver:test', ...)\n[CI/test-docker]   | popen_kwargs = {'cwd': PosixPath('/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/pypiserver-pypiserver')}\n[CI/test-docker]   | stdout = None, stderr = None\n[CI/test-docker]   | proc = <Popen: returncode: 1 args: ('docker', 'build', '--file', '/tmp/de65f406-fe2...>\n[CI/test-docker]   | out = None, err = None, result = RunReturn(returncode=1, out='', err='')\n[CI/test-docker]   | \n[CI/test-docker]   |     def run(\n[CI/test-docker]   |         *cmd: str,\n[CI/test-docker]   |         capture: bool = False,\n[CI/test-docker]   |         raise_on_err: bool = True,\n[CI/test-docker]   |         check_code: t.Callable[[int], bool] = lambda c: c == 0,\n[CI/test-docker]   |         **popen_kwargs: t.Any,\n[CI/test-docker]   |     ) -> RunReturn:\n[CI/test-docker]   |         \"\"\"Run a command to completion.\"\"\"\n[CI/test-docker]   |         stdout = subprocess.PIPE if capture else None\n[CI/test-docker]   |         stderr = subprocess.PIPE if capture else None\n[CI/test-docker]   |         proc = subprocess.Popen(cmd, stdout=stdout, stderr=stderr, **popen_kwargs)\n[CI/test-docker]   |         out, err = proc.communicate()\n[CI/test-docker]   |         result = RunReturn(\n[CI/test-docker]   |             proc.returncode,\n[CI/test-docker]   |             \"\" if out is None else out.decode(),\n[CI/test-docker]   |             \"\" if err is None else err.decode(),\n[CI/test-docker]   |         )\n[CI/test-docker]   |         if raise_on_err and not check_code(result.returncode):\n[CI/test-docker]   | >           raise RuntimeError(result)\n[CI/test-docker]   | E           RuntimeError: RunReturn(returncode=1, out='', err='')\n[CI/test-docker]   | \n[CI/test-docker]   | docker/test_docker.py:142: RuntimeError\n[CI/test-docker]   | ---------------------------- Captured stdout setup -----------------------------\n[CI/test-docker]   | cd fixtures/mypkg; python setup.py sdist\n[CI/test-docker]   | running sdist\n[CI/test-docker]   | running egg_info\n[CI/test-docker]   | creating pypiserver_mypkg.egg-info\n[CI/test-docker]   | writing pypiserver_mypkg.egg-info/PKG-INFO\n[CI/test-docker]   | writing dependency_links to pypiserver_mypkg.egg-info/dependency_links.txt\n[CI/test-docker]   | writing top-level names to pypiserver_mypkg.egg-info/top_level.txt\n[CI/test-docker]   | writing manifest file 'pypiserver_mypkg.egg-info/SOURCES.txt'\n[CI/test-docker]   | reading manifest file 'pypiserver_mypkg.egg-info/SOURCES.txt'\n[CI/test-docker]   | writing manifest file 'pypiserver_mypkg.egg-info/SOURCES.txt'\n[CI/test-docker]   | running check\n[CI/test-docker]   | creating pypiserver_mypkg-1.0.0\n[CI/test-docker]   | creating pypiserver_mypkg-1.0.0/mypkg\n[CI/test-docker]   | creating pypiserver_mypkg-1.0.0/pypiserver_mypkg.egg-info\n[CI/test-docker]   | copying files to pypiserver_mypkg-1.0.0...\n[CI/test-docker]   | copying setup.cfg -> pypiserver_mypkg-1.0.0\n[CI/test-docker]   | copying setup.py -> pypiserver_mypkg-1.0.0\n[CI/test-docker]   | copying mypkg/__init__.py -> pypiserver_mypkg-1.0.0/mypkg\n[CI/test-docker]   | copying pypiserver_mypkg.egg-info/PKG-INFO -> pypiserver_mypkg-1.0.0/pypiserver_mypkg.egg-info\n[CI/test-docker]   | copying pypiserver_mypkg.egg-info/SOURCES.txt -> pypiserver_mypkg-1.0.0/pypiserver_mypkg.egg-info\n[CI/test-docker]   | copying pypiserver_mypkg.egg-info/dependency_links.txt -> pypiserver_mypkg-1.0.0/pypiserver_mypkg.egg-info\n[CI/test-docker]   | copying pypiserver_mypkg.egg-info/top_level.txt -> pypiserver_mypkg-1.0.0/pypiserver_mypkg.egg-info\n[CI/test-docker]   | Writing pypiserver_mypkg-1.0.0/setup.cfg\n[CI/test-docker]   | creating dist\n[CI/test-docker]   | Creating tar archive\n[CI/test-docker]   | removing 'pypiserver_mypkg-1.0.0' (and everything under it)\n[CI/test-docker]   | cd fixtures/mypkg; python setup.py bdist_wheel\n[CI/test-docker]   | running bdist_wheel\n[CI/test-docker]   | running build\n[CI/test-docker]   | running build_py\n[CI/test-docker]   | creating build\n[CI/test-docker]   | creating build/lib\n[CI/test-docker]   | creating build/lib/mypkg\n[CI/test-docker]   | copying mypkg/__init__.py -> build/lib/mypkg\n[CI/test-docker]   | installing to build/bdist.linux-x86_64/wheel\n[CI/test-docker]   | running install\n[CI/test-docker]   | running install_lib\n[CI/test-docker]   | creating build/bdist.linux-x86_64\n[CI/test-docker]   | creating build/bdist.linux-x86_64/wheel\n[CI/test-docker]   | creating build/bdist.linux-x86_64/wheel/mypkg\n[CI/test-docker]   | copying build/lib/mypkg/__init__.py -> build/bdist.linux-x86_64/wheel/mypkg\n[CI/test-docker]   | running install_egg_info\n[CI/test-docker]   | running egg_info\n[CI/test-docker]   | writing pypiserver_mypkg.egg-info/PKG-INFO\n[CI/test-docker]   | writing dependency_links to pypiserver_mypkg.egg-info/dependency_links.txt\n[CI/test-docker]   | writing top-level names to pypiserver_mypkg.egg-info/top_level.txt\n[CI/test-docker]   | reading manifest file 'pypiserver_mypkg.egg-info/SOURCES.txt'\n[CI/test-docker]   | writing manifest file 'pypiserver_mypkg.egg-info/SOURCES.txt'\n[CI/test-docker]   | Copying pypiserver_mypkg.egg-info to build/bdist.linux-x86_64/wheel/pypiserver_mypkg-1.0.0-py3.9.egg-info\n[CI/test-docker]   | running install_scripts\n[CI/test-docker]   | creating build/bdist.linux-x86_64/wheel/pypiserver_mypkg-1.0.0.dist-info/WHEEL\n[CI/test-docker]   | creating 'dist/pypiserver_mypkg-1.0.0-py2.py3-none-any.whl' and adding 'build/bdist.linux-x86_64/wheel' to it\n[CI/test-docker]   | adding 'mypkg/__init__.py'\n[CI/test-docker]   | adding 'pypiserver_mypkg-1.0.0.dist-info/METADATA'\n[CI/test-docker]   | adding 'pypiserver_mypkg-1.0.0.dist-info/WHEEL'\n[CI/test-docker]   | adding 'pypiserver_mypkg-1.0.0.dist-info/top_level.txt'\n[CI/test-docker]   | adding 'pypiserver_mypkg-1.0.0.dist-info/RECORD'\n[CI/test-docker]   | removing build/bdist.linux-x86_64/wheel\n[CI/test-docker]   | ---------------------------- Captured stderr setup -----------------------------\n[CI/test-docker]   | warning: sdist: standard file not found: should have one of README, README.rst, README.txt, README.md\n[CI/test-docker]   | \n[CI/test-docker]   | warning: check: missing required meta-data: url\n[CI/test-docker]   | \n[CI/test-docker]   | warning: check: missing meta-data: either (author and author_email) or (maintainer and maintainer_email) should be supplied\n[CI/test-docker]   | \n[CI/test-docker]   | The [wheel] section is deprecated. Use [bdist_wheel] instead.\n[CI/test-docker]   | ____________ ERROR at setup of TestBasics.test_install[container0] _____________\n[CI/test-docker]   | \n[CI/test-docker]   |     @pytest.fixture(scope=\"session\")\n[CI/test-docker]   |     def image() -> str:\n[CI/test-docker]   |         \"\"\"Build the docker image for pypiserver.\n[CI/test-docker]   |     \n[CI/test-docker]   |         Return the tag.\n[CI/test-docker]   |         \"\"\"\n[CI/test-docker]   |         tag = \"pypiserver:test\"\n[CI/test-docker]   | >       run(\n[CI/test-docker]   |             \"docker\",\n[CI/test-docker]   |             \"build\",\n[CI/test-docker]   |             \"--file\",\n[CI/test-docker]   |             str(DOCKERFILE),\n[CI/test-docker]   |             \"--tag\",\n[CI/test-docker]   |             tag,\n[CI/test-docker]   |             str(ROOT_DIR),\n[CI/test-docker]   |             cwd=ROOT_DIR,\n[CI/test-docker]   |         )\n[CI/test-docker]   | \n[CI/test-docker]   | docker/test_docker.py:47: \n[CI/test-docker]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[CI/test-docker]   | \n[CI/test-docker]   | capture = False, raise_on_err = True\n[CI/test-docker]   | check_code = <function <lambda> at 0x7f6ffc32bdc0>\n[CI/test-docker]   | cmd = ('docker', 'build', '--file', '/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/pypiserver-pypiserver/Dockerfile', '--tag', 'pypiserver:test', ...)\n[CI/test-docker]   | popen_kwargs = {'cwd': PosixPath('/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/pypiserver-pypiserver')}\n[CI/test-docker]   | stdout = None, stderr = None\n[CI/test-docker]   | proc = <Popen: returncode: 1 args: ('docker', 'build', '--file', '/tmp/de65f406-fe2...>\n[CI/test-docker]   | out = None, err = None, result = RunReturn(returncode=1, out='', err='')\n[CI/test-docker]   | \n[CI/test-docker]   |     def run(\n[CI/test-docker]   |         *cmd: str,\n[CI/test-docker]   |         capture: bool = False,\n[CI/test-docker]   |         raise_on_err: bool = True,\n[CI/test-docker]   |         check_code: t.Callable[[int], bool] = lambda c: c == 0,\n[CI/test-docker]   |         **popen_kwargs: t.Any,\n[CI/test-docker]   |     ) -> RunReturn:\n[CI/test-docker]   |         \"\"\"Run a command to completion.\"\"\"\n[CI/test-docker]   |         stdout = subprocess.PIPE if capture else None\n[CI/test-docker]   |         stderr = subprocess.PIPE if capture else None\n[CI/test-docker]   |         proc = subprocess.Popen(cmd, stdout=stdout, stderr=stderr, **popen_kwargs)\n[CI/test-docker]   |         out, err = proc.communicate()\n[CI/test-docker]   |         result = RunReturn(\n[CI/test-docker]   |             proc.returncode,\n[CI/test-docker]   |             \"\" if out is None else out.decode(),\n[CI/test-docker]   |             \"\" if err is None else err.decode(),\n[CI/test-docker]   |         )\n[CI/test-docker]   |         if raise_on_err and not check_code(result.returncode):\n[CI/test-docker]   | >           raise RuntimeError(result)\n[CI/test-docker]   | E           RuntimeError: RunReturn(returncode=1, out='', err='')\n[CI/test-docker]   | \n[CI/test-docker]   | docker/test_docker.py:142: RuntimeError\n[CI/test-docker]   | ________ ERROR at setup of TestBasics.test_expected_server[container0] _________\n[CI/test-docker]   | \n[CI/test-docker]   |     @pytest.fixture(scope=\"session\")\n[CI/test-docker]   |     def image() -> str:\n[CI/test-docker]   |         \"\"\"Build the docker image for pypiserver.\n[CI/test-docker]   |     \n[CI/test-docker]   |         Return the tag.\n[CI/test-docker]   |         \"\"\"\n[CI/test-docker]   |         tag = \"pypiserver:test\"\n[CI/test-docker]   | >       run(\n[CI/test-docker]   |             \"docker\",\n[CI/test-docker]   |             \"build\",\n[CI/test-docker]   |             \"--file\",\n[CI/test-docker]   |             str(DOCKERFILE),\n[CI/test-docker]   |             \"--tag\",\n[CI/test-docker]   |             tag,\n[CI/test-docker]   |             str(ROOT_DIR),\n[CI/test-docker]   |             cwd=ROOT_DIR,\n[CI/test-docker]   |         )\n[CI/test-docker]   | \n[CI/test-docker]   | docker/test_docker.py:47: \n[CI/test-docker]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[CI/test-docker]   | \n[CI/test-docker]   | capture = False, raise_on_err = True\n[CI/test-docker]   | check_code = <function <lambda> at 0x7f6ffc32bdc0>\n[CI/test-docker]   | cmd = ('docker', 'build', '--file', '/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/pypiserver-pypiserver/Dockerfile', '--tag', 'pypiserver:test', ...)\n[CI/test-docker]   | popen_kwargs = {'cwd': PosixPath('/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/pypiserver-pypiserver')}\n[CI/test-docker]   | stdout = None, stderr = None\n[CI/test-docker]   | proc = <Popen: returncode: 1 args: ('docker', 'build', '--file', '/tmp/de65f406-fe2...>\n[CI/test-docker]   | out = None, err = None, result = RunReturn(returncode=1, out='', err='')\n[CI/test-docker]   | \n[CI/test-docker]   |     def run(\n[CI/test-docker]   |         *cmd: str,\n[CI/test-docker]   |         capture: bool = False,\n[CI/test-docker]   |         raise_on_err: bool = True,\n[CI/test-docker]   |         check_code: t.Callable[[int], bool] = lambda c: c == 0,\n[CI/test-docker]   |         **popen_kwargs: t.Any,\n[CI/test-docker]   |     ) -> RunReturn:\n[CI/test-docker]   |         \"\"\"Run a command to completion.\"\"\"\n[CI/test-docker]   |         stdout = subprocess.PIPE if capture else None\n[CI/test-docker]   |         stderr = subprocess.PIPE if capture else None\n[CI/test-docker]   |         proc = subprocess.Popen(cmd, stdout=stdout, stderr=stderr, **popen_kwargs)\n[CI/test-docker]   |         out, err = proc.communicate()\n[CI/test-docker]   |         result = RunReturn(\n[CI/test-docker]   |             proc.returncode,\n[CI/test-docker]   |             \"\" if out is None else out.decode(),\n[CI/test-docker]   |             \"\" if err is None else err.decode(),\n[CI/test-docker]   |         )\n[CI/test-docker]   |         if raise_on_err and not check_code(result.returncode):\n[CI/test-docker]   | >           raise RuntimeError(result)\n[CI/test-docker]   | E           RuntimeError: RunReturn(returncode=1, out='', err='')\n[CI/test-docker]   | \n[CI/test-docker]   | docker/test_docker.py:142: RuntimeError\n[CI/test-docker]   | ____________ ERROR at setup of TestBasics.test_welcome[container0] _____________\n[CI/test-docker]   | \n[CI/test-docker]   |     @pytest.fixture(scope=\"session\")\n[CI/test-docker]   |     def image() -> str:\n[CI/test-docker]   |         \"\"\"Build the docker image for pypiserver.\n[CI/test-docker]   |     \n[CI/test-docker]   |         Return the tag.\n[CI/test-docker]   |         \"\"\"\n[CI/test-docker]   |         tag = \"pypiserver:test\"\n[CI/test-docker]   | >       run(\n[CI/test-docker]   |             \"docker\",\n[CI/test-docker]   |             \"build\",\n[CI/test-docker]   |             \"--file\",\n[CI/test-docker]   |             str(DOCKERFILE),\n[CI/test-docker]   |             \"--tag\",\n[CI/test-docker]   |             tag,\n[CI/test-docker]   |             str(ROOT_DIR),\n[CI/test-docker]   |             cwd=ROOT_DIR,\n[CI/test-docker]   |         )\n[CI/test-docker]   | \n[CI/test-docker]   | docker/test_docker.py:47: \n[CI/test-docker]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[CI/test-docker]   | \n[CI/test-docker]   | capture = False, raise_on_err = True\n[CI/test-docker]   | check_code = <function <lambda> at 0x7f6ffc32bdc0>\n[CI/test-docker]   | cmd = ('docker', 'build', '--file', '/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/pypiserver-pypiserver/Dockerfile', '--tag', 'pypiserver:test', ...)\n[CI/test-docker]   | popen_kwargs = {'cwd': PosixPath('/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/pypiserver-pypiserver')}\n[CI/test-docker]   | stdout = None, stderr = None\n[CI/test-docker]   | proc = <Popen: returncode: 1 args: ('docker', 'build', '--file', '/tmp/de65f406-fe2...>\n[CI/test-docker]   | out = None, err = None, result = RunReturn(returncode=1, out='', err='')\n[CI/test-docker]   | \n[CI/test-docker]   |     def run(\n[CI/test-docker]   |         *cmd: str,\n[CI/test-docker]   |         capture: bool = False,\n[CI/test-docker]   |         raise_on_err: bool = True,\n[CI/test-docker]   |         check_code: t.Callable[[int], bool] = lambda c: c == 0,\n[CI/test-docker]   |         **popen_kwargs: t.Any,\n[CI/test-docker]   |     ) -> RunReturn:\n[CI/test-docker]   |         \"\"\"Run a command to completion.\"\"\"\n[CI/test-docker]   |         stdout = subprocess.PIPE if capture else None\n[CI/test-docker]   |         stderr = subprocess.PIPE if capture else None\n[CI/test-docker]   |         proc = subprocess.Popen(cmd, stdout=stdout, stderr=stderr, **popen_kwargs)\n[CI/test-docker]   |         out, err = proc.communicate()\n[CI/test-docker]   |         result = RunReturn(\n[CI/test-docker]   |             proc.returncode,\n[CI/test-docker]   |             \"\" if out is None else out.decode(),\n[CI/test-docker]   |             \"\" if err is None else err.decode(),\n[CI/test-docker]   |         )\n[CI/test-docker]   |         if raise_on_err and not check_code(result.returncode):\n[CI/test-docker]   | >           raise RuntimeError(result)\n[CI/test-docker]   | E           RuntimeError: RunReturn(returncode=1, out='', err='')\n[CI/test-docker]   | \n[CI/test-docker]   | docker/test_docker.py:142: RuntimeError\n[CI/test-docker]   | ____________ ERROR at setup of TestBasics.test_download[container1] ____________\n[CI/test-docker]   | \n[CI/test-docker]   |     @pytest.fixture(scope=\"session\")\n[CI/test-docker]   |     def image() -> str:\n[CI/test-docker]   |         \"\"\"Build the docker image for pypiserver.\n[CI/test-docker]   |     \n[CI/test-docker]   |         Return the tag.\n[CI/test-docker]   |         \"\"\"\n[CI/test-docker]   |         tag = \"pypiserver:test\"\n[CI/test-docker]   | >       run(\n[CI/test-docker]   |             \"docker\",\n[CI/test-docker]   |             \"build\",\n[CI/test-docker]   |             \"--file\",\n[CI/test-docker]   |             str(DOCKERFILE),\n[CI/test-docker]   |             \"--tag\",\n[CI/test-docker]   |             tag,\n[CI/test-docker]   |             str(ROOT_DIR),\n[CI/test-docker]   |             cwd=ROOT_DIR,\n[CI/test-docker]   |         )\n[CI/test-docker]   | \n[CI/test-docker]   | docker/test_docker.py:47: \n[CI/test-docker]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[CI/test-docker]   | \n[CI/test-docker]   | capture = False, raise_on_err = True\n[CI/test-docker]   | check_code = <function <lambda> at 0x7f6ffc32bdc0>\n[CI/test-docker]   | cmd = ('docker', 'build', '--file', '/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/pypiserver-pypiserver/Dockerfile', '--tag', 'pypiserver:test', ...)\n[CI/test-docker]   | popen_kwargs = {'cwd': PosixPath('/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/pypiserver-pypiserver')}\n[CI/test-docker]   | stdout = None, stderr = None\n[CI/test-docker]   | proc = <Popen: returncode: 1 args: ('docker', 'build', '--file', '/tmp/de65f406-fe2...>\n[CI/test-docker]   | out = None, err = None, result = RunReturn(returncode=1, out='', err='')\n[CI/test-docker]   | \n[CI/test-docker]   |     def run(\n[CI/test-docker]   |         *cmd: str,\n[CI/test-docker]   |         capture: bool = False,\n[CI/test-docker]   |         raise_on_err: bool = True,\n[CI/test-docker]   |         check_code: t.Callable[[int], bool] = lambda c: c == 0,\n[CI/test-docker]   |         **popen_kwargs: t.Any,\n[CI/test-docker]   |     ) -> RunReturn:\n[CI/test-docker]   |         \"\"\"Run a command to completion.\"\"\"\n[CI/test-docker]   |         stdout = subprocess.PIPE if capture else None\n[CI/test-docker]   |         stderr = subprocess.PIPE if capture else None\n[CI/test-docker]   |         proc = subprocess.Popen(cmd, stdout=stdout, stderr=stderr, **popen_kwargs)\n[CI/test-docker]   |         out, err = proc.communicate()\n[CI/test-docker]   |         result = RunReturn(\n[CI/test-docker]   |             proc.returncode,\n[CI/test-docker]   |             \"\" if out is None else out.decode(),\n[CI/test-docker]   |             \"\" if err is None else err.decode(),\n[CI/test-docker]   |         )\n[CI/test-docker]   |         if raise_on_err and not check_code(result.returncode):\n[CI/test-docker]   | >           raise RuntimeError(result)\n[CI/test-docker]   | E           RuntimeError: RunReturn(returncode=1, out='', err='')\n[CI/test-docker]   | \n[CI/test-docker]   | docker/test_docker.py:142: RuntimeError\n[CI/test-docker]   | ____________ ERROR at setup of TestBasics.test_install[container1] _____________\n[CI/test-docker]   | \n[CI/test-docker]   |     @pytest.fixture(scope=\"session\")\n[CI/test-docker]   |     def image() -> str:\n[CI/test-docker]   |         \"\"\"Build the docker image for pypiserver.\n[CI/test-docker]   |     \n[CI/test-docker]   |         Return the tag.\n[CI/test-docker]   |         \"\"\"\n[CI/test-docker]   |         tag = \"pypiserver:test\"\n[CI/test-docker]   | >       run(\n[CI/test-docker]   |             \"docker\",\n[CI/test-docker]   |             \"build\",\n[CI/test-docker]   |             \"--file\",\n[CI/test-docker]   |             str(DOCKERFILE),\n[CI/test-docker]   |             \"--tag\",\n[CI/test-docker]   |             tag,\n[CI/test-docker]   |             str(ROOT_DIR),\n[CI/test-docker]   |             cwd=ROOT_DIR,\n[CI/test-docker]   |         )\n[CI/test-docker]   | \n[CI/test-docker]   | docker/test_docker.py:47: \n[CI/test-docker]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[CI/test-docker]   | \n[CI/test-docker]   | capture = False, raise_on_err = True\n[CI/test-docker]   | check_code = <function <lambda> at 0x7f6ffc32bdc0>\n[CI/test-docker]   | cmd = ('docker', 'build', '--file', '/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/pypiserver-pypiserver/Dockerfile', '--tag', 'pypiserver:test', ...)\n[CI/test-docker]   | popen_kwargs = {'cwd': PosixPath('/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/pypiserver-pypiserver')}\n[CI/test-docker]   | stdout = None, stderr = None\n[CI/test-docker]   | proc = <Popen: returncode: 1 args: ('docker', 'build', '--file', '/tmp/de65f406-fe2...>\n[CI/test-docker]   | out = None, err = None, result = RunReturn(returncode=1, out='', err='')\n[CI/test-docker]   | \n[CI/test-docker]   |     def run(\n[CI/test-docker]   |         *cmd: str,\n[CI/test-docker]   |         capture: bool = False,\n[CI/test-docker]   |         raise_on_err: bool = True,\n[CI/test-docker]   |         check_code: t.Callable[[int], bool] = lambda c: c == 0,\n[CI/test-docker]   |         **popen_kwargs: t.Any,\n[CI/test-docker]   |     ) -> RunReturn:\n[CI/test-docker]   |         \"\"\"Run a command to completion.\"\"\"\n[CI/test-docker]   |         stdout = subprocess.PIPE if capture else None\n[CI/test-docker]   |         stderr = subprocess.PIPE if capture else None\n[CI/test-docker]   |         proc = subprocess.Popen(cmd, stdout=stdout, stderr=stderr, **popen_kwargs)\n[CI/test-docker]   |         out, err = proc.communicate()\n[CI/test-docker]   |         result = RunReturn(\n[CI/test-docker]   |             proc.returncode,\n[CI/test-docker]   |             \"\" if out is None else out.decode(),\n[CI/test-docker]   |             \"\" if err is None else err.decode(),\n[CI/test-docker]   |         )\n[CI/test-docker]   |         if raise_on_err and not check_code(result.returncode):\n[CI/test-docker]   | >           raise RuntimeError(result)\n[CI/test-docker]   | E           RuntimeError: RunReturn(returncode=1, out='', err='')\n[CI/test-docker]   | \n[CI/test-docker]   | docker/test_docker.py:142: RuntimeError\n[CI/test-docker]   | ________ ERROR at setup of TestBasics.test_expected_server[container1] _________\n[CI/test-docker]   | \n[CI/test-docker]   |     @pytest.fixture(scope=\"session\")\n[CI/test-docker]   |     def image() -> str:\n[CI/test-docker]   |         \"\"\"Build the docker image for pypiserver.\n[CI/test-docker]   |     \n[CI/test-docker]   |         Return the tag.\n[CI/test-docker]   |         \"\"\"\n[CI/test-docker]   |         tag = \"pypiserver:test\"\n[CI/test-docker]   | >       run(\n[CI/test-docker]   |             \"docker\",\n[CI/test-docker]   |             \"build\",\n[CI/test-docker]   |             \"--file\",\n[CI/test-docker]   |             str(DOCKERFILE),\n[CI/test-docker]   |             \"--tag\",\n[CI/test-docker]   |             tag,\n[CI/test-docker]   |             str(ROOT_DIR),\n[CI/test-docker]   |             cwd=ROOT_DIR,\n[CI/test-docker]   |         )\n[CI/test-docker]   | \n[CI/test-docker]   | docker/test_docker.py:47: \n[CI/test-docker]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[CI/test-docker]   | \n[CI/test-docker]   | capture = False, raise_on_err = True\n[CI/test-docker]   | check_code = <function <lambda> at 0x7f6ffc32bdc0>\n[CI/test-docker]   | cmd = ('docker', 'build', '--file', '/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/pypiserver-pypiserver/Dockerfile', '--tag', 'pypiserver:test', ...)\n[CI/test-docker]   | popen_kwargs = {'cwd': PosixPath('/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/pypiserver-pypiserver')}\n[CI/test-docker]   | stdout = None, stderr = None\n[CI/test-docker]   | proc = <Popen: returncode: 1 args: ('docker', 'build', '--file', '/tmp/de65f406-fe2...>\n[CI/test-docker]   | out = None, err = None, result = RunReturn(returncode=1, out='', err='')\n[CI/test-docker]   | \n[CI/test-docker]   |     def run(\n[CI/test-docker]   |         *cmd: str,\n[CI/test-docker]   |         capture: bool = False,\n[CI/test-docker]   |         raise_on_err: bool = True,\n[CI/test-docker]   |         check_code: t.Callable[[int], bool] = lambda c: c == 0,\n[CI/test-docker]   |         **popen_kwargs: t.Any,\n[CI/test-docker]   |     ) -> RunReturn:\n[CI/test-docker]   |         \"\"\"Run a command to completion.\"\"\"\n[CI/test-docker]   |         stdout = subprocess.PIPE if capture else None\n[CI/test-docker]   |         stderr = subprocess.PIPE if capture else None\n[CI/test-docker]   |         proc = subprocess.Popen(cmd, stdout=stdout, stderr=stderr, **popen_kwargs)\n[CI/test-docker]   |         out, err = proc.communicate()\n[CI/test-docker]   |         result = RunReturn(\n[CI/test-docker]   |             proc.returncode,\n[CI/test-docker]   |             \"\" if out is None else out.decode(),\n[CI/test-docker]   |             \"\" if err is None else err.decode(),\n[CI/test-docker]   |         )\n[CI/test-docker]   |         if raise_on_err and not check_code(result.returncode):\n[CI/test-docker]   | >           raise RuntimeError(result)\n[CI/test-docker]   | E           RuntimeError: RunReturn(returncode=1, out='', err='')\n[CI/test-docker]   | \n[CI/test-docker]   | docker/test_docker.py:142: RuntimeError\n[CI/test-docker]   | ____________ ERROR at setup of TestBasics.test_welcome[container1] _____________\n[CI/test-docker]   | \n[CI/test-docker]   |     @pytest.fixture(scope=\"session\")\n[CI/test-docker]   |     def image() -> str:\n[CI/test-docker]   |         \"\"\"Build the docker image for pypiserver.\n[CI/test-docker]   |     \n[CI/test-docker]   |         Return the tag.\n[CI/test-docker]   |         \"\"\"\n[CI/test-docker]   |         tag = \"pypiserver:test\"\n[CI/test-docker]   | >       run(\n[CI/test-docker]   |             \"docker\",\n[CI/test-docker]   |             \"build\",\n[CI/test-docker]   |             \"--file\",\n[CI/test-docker]   |             str(DOCKERFILE),\n[CI/test-docker]   |             \"--tag\",\n[CI/test-docker]   |             tag,\n[CI/test-docker]   |             str(ROOT_DIR),\n[CI/test-docker]   |             cwd=ROOT_DIR,\n[CI/test-docker]   |         )\n[CI/test-docker]   | \n[CI/test-docker]   | docker/test_docker.py:47: \n[CI/test-docker]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[CI/test-docker]   | \n[CI/test-docker]   | capture = False, raise_on_err = True\n[CI/test-docker]   | check_code = <function <lambda> at 0x7f6ffc32bdc0>\n[CI/test-docker]   | cmd = ('docker', 'build', '--file', '/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/pypiserver-pypiserver/Dockerfile', '--tag', 'pypiserver:test', ...)\n[CI/test-docker]   | popen_kwargs = {'cwd': PosixPath('/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/pypiserver-pypiserver')}\n[CI/test-docker]   | stdout = None, stderr = None\n[CI/test-docker]   | proc = <Popen: returncode: 1 args: ('docker', 'build', '--file', '/tmp/de65f406-fe2...>\n[CI/test-docker]   | out = None, err = None, result = RunReturn(returncode=1, out='', err='')\n[CI/test-docker]   | \n[CI/test-docker]   |     def run(\n[CI/test-docker]   |         *cmd: str,\n[CI/test-docker]   |         capture: bool = False,\n[CI/test-docker]   |         raise_on_err: bool = True,\n[CI/test-docker]   |         check_code: t.Callable[[int], bool] = lambda c: c == 0,\n[CI/test-docker]   |         **popen_kwargs: t.Any,\n[CI/test-docker]   |     ) -> RunReturn:\n[CI/test-docker]   |         \"\"\"Run a command to completion.\"\"\"\n[CI/test-docker]   |         stdout = subprocess.PIPE if capture else None\n[CI/test-docker]   |         stderr = subprocess.PIPE if capture else None\n[CI/test-docker]   |         proc = subprocess.Popen(cmd, stdout=stdout, stderr=stderr, **popen_kwargs)\n[CI/test-docker]   |         out, err = proc.communicate()\n[CI/test-docker]   |         result = RunReturn(\n[CI/test-docker]   |             proc.returncode,\n[CI/test-docker]   |             \"\" if out is None else out.decode(),\n[CI/test-docker]   |             \"\" if err is None else err.decode(),\n[CI/test-docker]   |         )\n[CI/test-docker]   |         if raise_on_err and not check_code(result.returncode):\n[CI/test-docker]   | >           raise RuntimeError(result)\n[CI/test-docker]   | E           RuntimeError: RunReturn(returncode=1, out='', err='')\n[CI/test-docker]   | \n[CI/test-docker]   | docker/test_docker.py:142: RuntimeError\n[CI/test-docker]   | ____________ ERROR at setup of TestBasics.test_download[container2] ____________\n[CI/test-docker]   | \n[CI/test-docker]   |     @pytest.fixture(scope=\"session\")\n[CI/test-docker]   |     def image() -> str:\n[CI/test-docker]   |         \"\"\"Build the docker image for pypiserver.\n[CI/test-docker]   |     \n[CI/test-docker]   |         Return the tag.\n[CI/test-docker]   |         \"\"\"\n[CI/test-docker]   |         tag = \"pypiserver:test\"\n[CI/test-docker]   | >       run(\n[CI/test-docker]   |             \"docker\",\n[CI/test-docker]   |             \"build\",\n[CI/test-docker]   |             \"--file\",\n[CI/test-docker]   |             str(DOCKERFILE),\n[CI/test-docker]   |             \"--tag\",\n[CI/test-docker]   |             tag,\n[CI/test-docker]   |             str(ROOT_DIR),\n[CI/test-docker]   |             cwd=ROOT_DIR,\n[CI/test-docker]   |         )\n[CI/test-docker]   | \n[CI/test-docker]   | docker/test_docker.py:47: \n[CI/test-docker]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[CI/test-docker]   | \n[CI/test-docker]   | capture = False, raise_on_err = True\n[CI/test-docker]   | check_code = <function <lambda> at 0x7f6ffc32bdc0>\n[CI/test-docker]   | cmd = ('docker', 'build', '--file', '/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/pypiserver-pypiserver/Dockerfile', '--tag', 'pypiserver:test', ...)\n[CI/test-docker]   | popen_kwargs = {'cwd': PosixPath('/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/pypiserver-pypiserver')}\n[CI/test-docker]   | stdout = None, stderr = None\n[CI/test-docker]   | proc = <Popen: returncode: 1 args: ('docker', 'build', '--file', '/tmp/de65f406-fe2...>\n[CI/test-docker]   | out = None, err = None, result = RunReturn(returncode=1, out='', err='')\n[CI/test-docker]   | \n[CI/test-docker]   |     def run(\n[CI/test-docker]   |         *cmd: str,\n[CI/test-docker]   |         capture: bool = False,\n[CI/test-docker]   |         raise_on_err: bool = True,\n[CI/test-docker]   |         check_code: t.Callable[[int], bool] = lambda c: c == 0,\n[CI/test-docker]   |         **popen_kwargs: t.Any,\n[CI/test-docker]   |     ) -> RunReturn:\n[CI/test-docker]   |         \"\"\"Run a command to completion.\"\"\"\n[CI/test-docker]   |         stdout = subprocess.PIPE if capture else None\n[CI/test-docker]   |         stderr = subprocess.PIPE if capture else None\n[CI/test-docker]   |         proc = subprocess.Popen(cmd, stdout=stdout, stderr=stderr, **popen_kwargs)\n[CI/test-docker]   |         out, err = proc.communicate()\n[CI/test-docker]   |         result = RunReturn(\n[CI/test-docker]   |             proc.returncode,\n[CI/test-docker]   |             \"\" if out is None else out.decode(),\n[CI/test-docker]   |             \"\" if err is None else err.decode(),\n[CI/test-docker]   |         )\n[CI/test-docker]   |         if raise_on_err and not check_code(result.returncode):\n[CI/test-docker]   | >           raise RuntimeError(result)\n[CI/test-docker]   | E           RuntimeError: RunReturn(returncode=1, out='', err='')\n[CI/test-docker]   | \n[CI/test-docker]   | docker/test_docker.py:142: RuntimeError\n[CI/test-docker]   | ____________ ERROR at setup of TestBasics.test_install[container2] _____________\n[CI/test-docker]   | \n[CI/test-docker]   |     @pytest.fixture(scope=\"session\")\n[CI/test-docker]   |     def image() -> str:\n[CI/test-docker]   |         \"\"\"Build the docker image for pypiserver.\n[CI/test-docker]   |     \n[CI/test-docker]   |         Return the tag.\n[CI/test-docker]   |         \"\"\"\n[CI/test-docker]   |         tag = \"pypiserver:test\"\n[CI/test-docker]   | >       run(\n[CI/test-docker]   |             \"docker\",\n[CI/test-docker]   |             \"build\",\n[CI/test-docker]   |             \"--file\",\n[CI/test-docker]   |             str(DOCKERFILE),\n[CI/test-docker]   |             \"--tag\",\n[CI/test-docker]   |             tag,\n[CI/test-docker]   |             str(ROOT_DIR),\n[CI/test-docker]   |             cwd=ROOT_DIR,\n[CI/test-docker]   |         )\n[CI/test-docker]   | \n[CI/test-docker]   | docker/test_docker.py:47: \n[CI/test-docker]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[CI/test-docker]   | \n[CI/test-docker]   | capture = False, raise_on_err = True\n[CI/test-docker]   | check_code = <function <lambda> at 0x7f6ffc32bdc0>\n[CI/test-docker]   | cmd = ('docker', 'build', '--file', '/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/pypiserver-pypiserver/Dockerfile', '--tag', 'pypiserver:test', ...)\n[CI/test-docker]   | popen_kwargs = {'cwd': PosixPath('/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/pypiserver-pypiserver')}\n[CI/test-docker]   | stdout = None, stderr = None\n[CI/test-docker]   | proc = <Popen: returncode: 1 args: ('docker', 'build', '--file', '/tmp/de65f406-fe2...>\n[CI/test-docker]   | out = None, err = None, result = RunReturn(returncode=1, out='', err='')\n[CI/test-docker]   | \n[CI/test-docker]   |     def run(\n[CI/test-docker]   |         *cmd: str,\n[CI/test-docker]   |         capture: bool = False,\n[CI/test-docker]   |         raise_on_err: bool = True,\n[CI/test-docker]   |         check_code: t.Callable[[int], bool] = lambda c: c == 0,\n[CI/test-docker]   |         **popen_kwargs: t.Any,\n[CI/test-docker]   |     ) -> RunReturn:\n[CI/test-docker]   |         \"\"\"Run a command to completion.\"\"\"\n[CI/test-docker]   |         stdout = subprocess.PIPE if capture else None\n[CI/test-docker]   |         stderr = subprocess.PIPE if capture else None\n[CI/test-docker]   |         proc = subprocess.Popen(cmd, stdout=stdout, stderr=stderr, **popen_kwargs)\n[CI/test-docker]   |         out, err = proc.communicate()\n[CI/test-docker]   |         result = RunReturn(\n[CI/test-docker]   |             proc.returncode,\n[CI/test-docker]   |             \"\" if out is None else out.decode(),\n[CI/test-docker]   |             \"\" if err is None else err.decode(),\n[CI/test-docker]   |         )\n[CI/test-docker]   |         if raise_on_err and not check_code(result.returncode):\n[CI/test-docker]   | >           raise RuntimeError(result)\n[CI/test-docker]   | E           RuntimeError: RunReturn(returncode=1, out='', err='')\n[CI/test-docker]   | \n[CI/test-docker]   | docker/test_docker.py:142: RuntimeError\n[CI/test-docker]   | ________ ERROR at setup of TestBasics.test_expected_server[container2] _________\n[CI/test-docker]   | \n[CI/test-docker]   |     @pytest.fixture(scope=\"session\")\n[CI/test-docker]   |     def image() -> str:\n[CI/test-docker]   |         \"\"\"Build the docker image for pypiserver.\n[CI/test-docker]   |     \n[CI/test-docker]   |         Return the tag.\n[CI/test-docker]   |         \"\"\"\n[CI/test-docker]   |         tag = \"pypiserver:test\"\n[CI/test-docker]   | >       run(\n[CI/test-docker]   |             \"docker\",\n[CI/test-docker]   |             \"build\",\n[CI/test-docker]   |             \"--file\",\n[CI/test-docker]   |             str(DOCKERFILE),\n[CI/test-docker]   |             \"--tag\",\n[CI/test-docker]   |             tag,\n[CI/test-docker]   |             str(ROOT_DIR),\n[CI/test-docker]   |             cwd=ROOT_DIR,\n[CI/test-docker]   |         )\n[CI/test-docker]   | \n[CI/test-docker]   | docker/test_docker.py:47: \n[CI/test-docker]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[CI/test-docker]   | \n[CI/test-docker]   | capture = False, raise_on_err = True\n[CI/test-docker]   | check_code = <function <lambda> at 0x7f6ffc32bdc0>\n[CI/test-docker]   | cmd = ('docker', 'build', '--file', '/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/pypiserver-pypiserver/Dockerfile', '--tag', 'pypiserver:test', ...)\n[CI/test-docker]   | popen_kwargs = {'cwd': PosixPath('/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/pypiserver-pypiserver')}\n[CI/test-docker]   | stdout = None, stderr = None\n[CI/test-docker]   | proc = <Popen: returncode: 1 args: ('docker', 'build', '--file', '/tmp/de65f406-fe2...>\n[CI/test-docker]   | out = None, err = None, result = RunReturn(returncode=1, out='', err='')\n[CI/test-docker]   | \n[CI/test-docker]   |     def run(\n[CI/test-docker]   |         *cmd: str,\n[CI/test-docker]   |         capture: bool = False,\n[CI/test-docker]   |         raise_on_err: bool = True,\n[CI/test-docker]   |         check_code: t.Callable[[int], bool] = lambda c: c == 0,\n[CI/test-docker]   |         **popen_kwargs: t.Any,\n[CI/test-docker]   |     ) -> RunReturn:\n[CI/test-docker]   |         \"\"\"Run a command to completion.\"\"\"\n[CI/test-docker]   |         stdout = subprocess.PIPE if capture else None\n[CI/test-docker]   |         stderr = subprocess.PIPE if capture else None\n[CI/test-docker]   |         proc = subprocess.Popen(cmd, stdout=stdout, stderr=stderr, **popen_kwargs)\n[CI/test-docker]   |         out, err = proc.communicate()\n[CI/test-docker]   |         result = RunReturn(\n[CI/test-docker]   |             proc.returncode,\n[CI/test-docker]   |             \"\" if out is None else out.decode(),\n[CI/test-docker]   |             \"\" if err is None else err.decode(),\n[CI/test-docker]   |         )\n[CI/test-docker]   |         if raise_on_err and not check_code(result.returncode):\n[CI/test-docker]   | >           raise RuntimeError(result)\n[CI/test-docker]   | E           RuntimeError: RunReturn(returncode=1, out='', err='')\n[CI/test-docker]   | \n[CI/test-docker]   | docker/test_docker.py:142: RuntimeError\n[CI/test-docker]   | ____________ ERROR at setup of TestBasics.test_welcome[container2] _____________\n[CI/test-docker]   | \n[CI/test-docker]   |     @pytest.fixture(scope=\"session\")\n[CI/test-docker]   |     def image() -> str:\n[CI/test-docker]   |         \"\"\"Build the docker image for pypiserver.\n[CI/test-docker]   |     \n[CI/test-docker]   |         Return the tag.\n[CI/test-docker]   |         \"\"\"\n[CI/test-docker]   |         tag = \"pypiserver:test\"\n[CI/test-docker]   | >       run(\n[CI/test-docker]   |             \"docker\",\n[CI/test-docker]   |             \"build\",\n[CI/test-docker]   |             \"--file\",\n[CI/test-docker]   |             str(DOCKERFILE),\n[CI/test-docker]   |             \"--tag\",\n[CI/test-docker]   |             tag,\n[CI/test-docker]   |             str(ROOT_DIR),\n[CI/test-docker]   |             cwd=ROOT_DIR,\n[CI/test-docker]   |         )\n[CI/test-docker]   | \n[CI/test-docker]   | docker/test_docker.py:47: \n[CI/test-docker]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[CI/test-docker]   | \n[CI/test-docker]   | capture = False, raise_on_err = True\n[CI/test-docker]   | check_code = <function <lambda> at 0x7f6ffc32bdc0>\n[CI/test-docker]   | cmd = ('docker', 'build', '--file', '/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/pypiserver-pypiserver/Dockerfile', '--tag', 'pypiserver:test', ...)\n[CI/test-docker]   | popen_kwargs = {'cwd': PosixPath('/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/pypiserver-pypiserver')}\n[CI/test-docker]   | stdout = None, stderr = None\n[CI/test-docker]   | proc = <Popen: returncode: 1 args: ('docker', 'build', '--file', '/tmp/de65f406-fe2...>\n[CI/test-docker]   | out = None, err = None, result = RunReturn(returncode=1, out='', err='')\n[CI/test-docker]   | \n[CI/test-docker]   |     def run(\n[CI/test-docker]   |         *cmd: str,\n[CI/test-docker]   |         capture: bool = False,\n[CI/test-docker]   |         raise_on_err: bool = True,\n[CI/test-docker]   |         check_code: t.Callable[[int], bool] = lambda c: c == 0,\n[CI/test-docker]   |         **popen_kwargs: t.Any,\n[CI/test-docker]   |     ) -> RunReturn:\n[CI/test-docker]   |         \"\"\"Run a command to completion.\"\"\"\n[CI/test-docker]   |         stdout = subprocess.PIPE if capture else None\n[CI/test-docker]   |         stderr = subprocess.PIPE if capture else None\n[CI/test-docker]   |         proc = subprocess.Popen(cmd, stdout=stdout, stderr=stderr, **popen_kwargs)\n[CI/test-docker]   |         out, err = proc.communicate()\n[CI/test-docker]   |         result = RunReturn(\n[CI/test-docker]   |             proc.returncode,\n[CI/test-docker]   |             \"\" if out is None else out.decode(),\n[CI/test-docker]   |             \"\" if err is None else err.decode(),\n[CI/test-docker]   |         )\n[CI/test-docker]   |         if raise_on_err and not check_code(result.returncode):\n[CI/test-docker]   | >           raise RuntimeError(result)\n[CI/test-docker]   | E           RuntimeError: RunReturn(returncode=1, out='', err='')\n[CI/test-docker]   | \n[CI/test-docker]   | docker/test_docker.py:142: RuntimeError\n[CI/test-docker]   | ____________ ERROR at setup of TestBasics.test_download[container3] ____________\n[CI/test-docker]   | \n[CI/test-docker]   |     @pytest.fixture(scope=\"session\")\n[CI/test-docker]   |     def image() -> str:\n[CI/test-docker]   |         \"\"\"Build the docker image for pypiserver.\n[CI/test-docker]   |     \n[CI/test-docker]   |         Return the tag.\n[CI/test-docker]   |         \"\"\"\n[CI/test-docker]   |         tag = \"pypiserver:test\"\n[CI/test-docker]   | >       run(\n[CI/test-docker]   |             \"docker\",\n[CI/test-docker]   |             \"build\",\n[CI/test-docker]   |             \"--file\",\n[CI/test-docker]   |             str(DOCKERFILE),\n[CI/test-docker]   |             \"--tag\",\n[CI/test-docker]   |             tag,\n[CI/test-docker]   |             str(ROOT_DIR),\n[CI/test-docker]   |             cwd=ROOT_DIR,\n[CI/test-docker]   |         )\n[CI/test-docker]   | \n[CI/test-docker]   | docker/test_docker.py:47: \n[CI/test-docker]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[CI/test-docker]   | \n[CI/test-docker]   | capture = False, raise_on_err = True\n[CI/test-docker]   | check_code = <function <lambda> at 0x7f6ffc32bdc0>\n[CI/test-docker]   | cmd = ('docker', 'build', '--file', '/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/pypiserver-pypiserver/Dockerfile', '--tag', 'pypiserver:test', ...)\n[CI/test-docker]   | popen_kwargs = {'cwd': PosixPath('/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/pypiserver-pypiserver')}\n[CI/test-docker]   | stdout = None, stderr = None\n[CI/test-docker]   | proc = <Popen: returncode: 1 args: ('docker', 'build', '--file', '/tmp/de65f406-fe2...>\n[CI/test-docker]   | out = None, err = None, result = RunReturn(returncode=1, out='', err='')\n[CI/test-docker]   | \n[CI/test-docker]   |     def run(\n[CI/test-docker]   |         *cmd: str,\n[CI/test-docker]   |         capture: bool = False,\n[CI/test-docker]   |         raise_on_err: bool = True,\n[CI/test-docker]   |         check_code: t.Callable[[int], bool] = lambda c: c == 0,\n[CI/test-docker]   |         **popen_kwargs: t.Any,\n[CI/test-docker]   |     ) -> RunReturn:\n[CI/test-docker]   |         \"\"\"Run a command to completion.\"\"\"\n[CI/test-docker]   |         stdout = subprocess.PIPE if capture else None\n[CI/test-docker]   |         stderr = subprocess.PIPE if capture else None\n[CI/test-docker]   |         proc = subprocess.Popen(cmd, stdout=stdout, stderr=stderr, **popen_kwargs)\n[CI/test-docker]   |         out, err = proc.communicate()\n[CI/test-docker]   |         result = RunReturn(\n[CI/test-docker]   |             proc.returncode,\n[CI/test-docker]   |             \"\" if out is None else out.decode(),\n[CI/test-docker]   |             \"\" if err is None else err.decode(),\n[CI/test-docker]   |         )\n[CI/test-docker]   |         if raise_on_err and not check_code(result.returncode):\n[CI/test-docker]   | >           raise RuntimeError(result)\n[CI/test-docker]   | E           RuntimeError: RunReturn(returncode=1, out='', err='')\n[CI/test-docker]   | \n[CI/test-docker]   | docker/test_docker.py:142: RuntimeError\n[CI/test-docker]   | ____________ ERROR at setup of TestBasics.test_install[container3] _____________\n[CI/test-docker]   | \n[CI/test-docker]   |     @pytest.fixture(scope=\"session\")\n[CI/test-docker]   |     def image() -> str:\n[CI/test-docker]   |         \"\"\"Build the docker image for pypiserver.\n[CI/test-docker]   |     \n[CI/test-docker]   |         Return the tag.\n[CI/test-docker]   |         \"\"\"\n[CI/test-docker]   |         tag = \"pypiserver:test\"\n[CI/test-docker]   | >       run(\n[CI/test-docker]   |             \"docker\",\n[CI/test-docker]   |             \"build\",\n[CI/test-docker]   |             \"--file\",\n[CI/test-docker]   |             str(DOCKERFILE),\n[CI/test-docker]   |             \"--tag\",\n[CI/test-docker]   |             tag,\n[CI/test-docker]   |             str(ROOT_DIR),\n[CI/test-docker]   |             cwd=ROOT_DIR,\n[CI/test-docker]   |         )\n[CI/test-docker]   | \n[CI/test-docker]   | docker/test_docker.py:47: \n[CI/test-docker]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[CI/test-docker]   | \n[CI/test-docker]   | capture = False, raise_on_err = True\n[CI/test-docker]   | check_code = <function <lambda> at 0x7f6ffc32bdc0>\n[CI/test-docker]   | cmd = ('docker', 'build', '--file', '/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/pypiserver-pypiserver/Dockerfile', '--tag', 'pypiserver:test', ...)\n[CI/test-docker]   | popen_kwargs = {'cwd': PosixPath('/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/pypiserver-pypiserver')}\n[CI/test-docker]   | stdout = None, stderr = None\n[CI/test-docker]   | proc = <Popen: returncode: 1 args: ('docker', 'build', '--file', '/tmp/de65f406-fe2...>\n[CI/test-docker]   | out = None, err = None, result = RunReturn(returncode=1, out='', err='')\n[CI/test-docker]   | \n[CI/test-docker]   |     def run(\n[CI/test-docker]   |         *cmd: str,\n[CI/test-docker]   |         capture: bool = False,\n[CI/test-docker]   |         raise_on_err: bool = True,\n[CI/test-docker]   |         check_code: t.Callable[[int], bool] = lambda c: c == 0,\n[CI/test-docker]   |         **popen_kwargs: t.Any,\n[CI/test-docker]   |     ) -> RunReturn:\n[CI/test-docker]   |         \"\"\"Run a command to completion.\"\"\"\n[CI/test-docker]   |         stdout = subprocess.PIPE if capture else None\n[CI/test-docker]   |         stderr = subprocess.PIPE if capture else None\n[CI/test-docker]   |         proc = subprocess.Popen(cmd, stdout=stdout, stderr=stderr, **popen_kwargs)\n[CI/test-docker]   |         out, err = proc.communicate()\n[CI/test-docker]   |         result = RunReturn(\n[CI/test-docker]   |             proc.returncode,\n[CI/test-docker]   |             \"\" if out is None else out.decode(),\n[CI/test-docker]   |             \"\" if err is None else err.decode(),\n[CI/test-docker]   |         )\n[CI/test-docker]   |         if raise_on_err and not check_code(result.returncode):\n[CI/test-docker]   | >           raise RuntimeError(result)\n[CI/test-docker]   | E           RuntimeError: RunReturn(returncode=1, out='', err='')\n[CI/test-docker]   | \n[CI/test-docker]   | docker/test_docker.py:142: RuntimeError\n[CI/test-docker]   | ________ ERROR at setup of TestBasics.test_expected_server[container3] _________\n[CI/test-docker]   | \n[CI/test-docker]   |     @pytest.fixture(scope=\"session\")\n[CI/test-docker]   |     def image() -> str:\n[CI/test-docker]   |         \"\"\"Build the docker image for pypiserver.\n[CI/test-docker]   |     \n[CI/test-docker]   |         Return the tag.\n[CI/test-docker]   |         \"\"\"\n[CI/test-docker]   |         tag = \"pypiserver:test\"\n[CI/test-docker]   | >       run(\n[CI/test-docker]   |             \"docker\",\n[CI/test-docker]   |             \"build\",\n[CI/test-docker]   |             \"--file\",\n[CI/test-docker]   |             str(DOCKERFILE),\n[CI/test-docker]   |             \"--tag\",\n[CI/test-docker]   |             tag,\n[CI/test-docker]   |             str(ROOT_DIR),\n[CI/test-docker]   |             cwd=ROOT_DIR,\n[CI/test-docker]   |         )\n[CI/test-docker]   | \n[CI/test-docker]   | docker/test_docker.py:47: \n[CI/test-docker]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[CI/test-docker]   | \n[CI/test-docker]   | capture = False, raise_on_err = True\n[CI/test-docker]   | check_code = <function <lambda> at 0x7f6ffc32bdc0>\n[CI/test-docker]   | cmd = ('docker', 'build', '--file', '/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/pypiserver-pypiserver/Dockerfile', '--tag', 'pypiserver:test', ...)\n[CI/test-docker]   | popen_kwargs = {'cwd': PosixPath('/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/pypiserver-pypiserver')}\n[CI/test-docker]   | stdout = None, stderr = None\n[CI/test-docker]   | proc = <Popen: returncode: 1 args: ('docker', 'build', '--file', '/tmp/de65f406-fe2...>\n[CI/test-docker]   | out = None, err = None, result = RunReturn(returncode=1, out='', err='')\n[CI/test-docker]   | \n[CI/test-docker]   |     def run(\n[CI/test-docker]   |         *cmd: str,\n[CI/test-docker]   |         capture: bool = False,\n[CI/test-docker]   |         raise_on_err: bool = True,\n[CI/test-docker]   |         check_code: t.Callable[[int], bool] = lambda c: c == 0,\n[CI/test-docker]   |         **popen_kwargs: t.Any,\n[CI/test-docker]   |     ) -> RunReturn:\n[CI/test-docker]   |         \"\"\"Run a command to completion.\"\"\"\n[CI/test-docker]   |         stdout = subprocess.PIPE if capture else None\n[CI/test-docker]   |         stderr = subprocess.PIPE if capture else None\n[CI/test-docker]   |         proc = subprocess.Popen(cmd, stdout=stdout, stderr=stderr, **popen_kwargs)\n[CI/test-docker]   |         out, err = proc.communicate()\n[CI/test-docker]   |         result = RunReturn(\n[CI/test-docker]   |             proc.returncode,\n[CI/test-docker]   |             \"\" if out is None else out.decode(),\n[CI/test-docker]   |             \"\" if err is None else err.decode(),\n[CI/test-docker]   |         )\n[CI/test-docker]   |         if raise_on_err and not check_code(result.returncode):\n[CI/test-docker]   | >           raise RuntimeError(result)\n[CI/test-docker]   | E           RuntimeError: RunReturn(returncode=1, out='', err='')\n[CI/test-docker]   | \n[CI/test-docker]   | docker/test_docker.py:142: RuntimeError\n[CI/test-docker]   | ____________ ERROR at setup of TestBasics.test_welcome[container3] _____________\n[CI/test-docker]   | \n[CI/test-docker]   |     @pytest.fixture(scope=\"session\")\n[CI/test-docker]   |     def image() -> str:\n[CI/test-docker]   |         \"\"\"Build the docker image for pypiserver.\n[CI/test-docker]   |     \n[CI/test-docker]   |         Return the tag.\n[CI/test-docker]   |         \"\"\"\n[CI/test-docker]   |         tag = \"pypiserver:test\"\n[CI/test-docker]   | >       run(\n[CI/test-docker]   |             \"docker\",\n[CI/test-docker]   |             \"build\",\n[CI/test-docker]   |             \"--file\",\n[CI/test-docker]   |             str(DOCKERFILE),\n[CI/test-docker]   |             \"--tag\",\n[CI/test-docker]   |             tag,\n[CI/test-docker]   |             str(ROOT_DIR),\n[CI/test-docker]   |             cwd=ROOT_DIR,\n[CI/test-docker]   |         )\n[CI/test-docker]   | \n[CI/test-docker]   | docker/test_docker.py:47: \n[CI/test-docker]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[CI/test-docker]   | \n[CI/test-docker]   | capture = False, raise_on_err = True\n[CI/test-docker]   | check_code = <function <lambda> at 0x7f6ffc32bdc0>\n[CI/test-docker]   | cmd = ('docker', 'build', '--file', '/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/pypiserver-pypiserver/Dockerfile', '--tag', 'pypiserver:test', ...)\n[CI/test-docker]   | popen_kwargs = {'cwd': PosixPath('/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/pypiserver-pypiserver')}\n[CI/test-docker]   | stdout = None, stderr = None\n[CI/test-docker]   | proc = <Popen: returncode: 1 args: ('docker', 'build', '--file', '/tmp/de65f406-fe2...>\n[CI/test-docker]   | out = None, err = None, result = RunReturn(returncode=1, out='', err='')\n[CI/test-docker]   | \n[CI/test-docker]   |     def run(\n[CI/test-docker]   |         *cmd: str,\n[CI/test-docker]   |         capture: bool = False,\n[CI/test-docker]   |         raise_on_err: bool = True,\n[CI/test-docker]   |         check_code: t.Callable[[int], bool] = lambda c: c == 0,\n[CI/test-docker]   |         **popen_kwargs: t.Any,\n[CI/test-docker]   |     ) -> RunReturn:\n[CI/test-docker]   |         \"\"\"Run a command to completion.\"\"\"\n[CI/test-docker]   |         stdout = subprocess.PIPE if capture else None\n[CI/test-docker]   |         stderr = subprocess.PIPE if capture else None\n[CI/test-docker]   |         proc = subprocess.Popen(cmd, stdout=stdout, stderr=stderr, **popen_kwargs)\n[CI/test-docker]   |         out, err = proc.communicate()\n[CI/test-docker]   |         result = RunReturn(\n[CI/test-docker]   |             proc.returncode,\n[CI/test-docker]   |             \"\" if out is None else out.decode(),\n[CI/test-docker]   |             \"\" if err is None else err.decode(),\n[CI/test-docker]   |         )\n[CI/test-docker]   |         if raise_on_err and not check_code(result.returncode):\n[CI/test-docker]   | >           raise RuntimeError(result)\n[CI/test-docker]   | E           RuntimeError: RunReturn(returncode=1, out='', err='')\n[CI/test-docker]   | \n[CI/test-docker]   | docker/test_docker.py:142: RuntimeError\n[CI/test-docker]   | ____________ ERROR at setup of TestBasics.test_download[container4] ____________\n[CI/test-docker]   | \n[CI/test-docker]   |     @pytest.fixture(scope=\"session\")\n[CI/test-docker]   |     def image() -> str:\n[CI/test-docker]   |         \"\"\"Build the docker image for pypiserver.\n[CI/test-docker]   |     \n[CI/test-docker]   |         Return the tag.\n[CI/test-docker]   |         \"\"\"\n[CI/test-docker]   |         tag = \"pypiserver:test\"\n[CI/test-docker]   | >       run(\n[CI/test-docker]   |             \"docker\",\n[CI/test-docker]   |             \"build\",\n[CI/test-docker]   |             \"--file\",\n[CI/test-docker]   |             str(DOCKERFILE),\n[CI/test-docker]   |             \"--tag\",\n[CI/test-docker]   |             tag,\n[CI/test-docker]   |             str(ROOT_DIR),\n[CI/test-docker]   |             cwd=ROOT_DIR,\n[CI/test-docker]   |         )\n[CI/test-docker]   | \n[CI/test-docker]   | docker/test_docker.py:47: \n[CI/test-docker]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[CI/test-docker]   | \n[CI/test-docker]   | capture = False, raise_on_err = True\n[CI/test-docker]   | check_code = <function <lambda> at 0x7f6ffc32bdc0>\n[CI/test-docker]   | cmd = ('docker', 'build', '--file', '/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/pypiserver-pypiserver/Dockerfile', '--tag', 'pypiserver:test', ...)\n[CI/test-docker]   | popen_kwargs = {'cwd': PosixPath('/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/pypiserver-pypiserver')}\n[CI/test-docker]   | stdout = None, stderr = None\n[CI/test-docker]   | proc = <Popen: returncode: 1 args: ('docker', 'build', '--file', '/tmp/de65f406-fe2...>\n[CI/test-docker]   | out = None, err = None, result = RunReturn(returncode=1, out='', err='')\n[CI/test-docker]   | \n[CI/test-docker]   |     def run(\n[CI/test-docker]   |         *cmd: str,\n[CI/test-docker]   |         capture: bool = False,\n[CI/test-docker]   |         raise_on_err: bool = True,\n[CI/test-docker]   |         check_code: t.Callable[[int], bool] = lambda c: c == 0,\n[CI/test-docker]   |         **popen_kwargs: t.Any,\n[CI/test-docker]   |     ) -> RunReturn:\n[CI/test-docker]   |         \"\"\"Run a command to completion.\"\"\"\n[CI/test-docker]   |         stdout = subprocess.PIPE if capture else None\n[CI/test-docker]   |         stderr = subprocess.PIPE if capture else None\n[CI/test-docker]   |         proc = subprocess.Popen(cmd, stdout=stdout, stderr=stderr, **popen_kwargs)\n[CI/test-docker]   |         out, err = proc.communicate()\n[CI/test-docker]   |         result = RunReturn(\n[CI/test-docker]   |             proc.returncode,\n[CI/test-docker]   |             \"\" if out is None else out.decode(),\n[CI/test-docker]   |             \"\" if err is None else err.decode(),\n[CI/test-docker]   |         )\n[CI/test-docker]   |         if raise_on_err and not check_code(result.returncode):\n[CI/test-docker]   | >           raise RuntimeError(result)\n[CI/test-docker]   | E           RuntimeError: RunReturn(returncode=1, out='', err='')\n[CI/test-docker]   | \n[CI/test-docker]   | docker/test_docker.py:142: RuntimeError\n[CI/test-docker]   | ____________ ERROR at setup of TestBasics.test_install[container4] _____________\n[CI/test-docker]   | \n[CI/test-docker]   |     @pytest.fixture(scope=\"session\")\n[CI/test-docker]   |     def image() -> str:\n[CI/test-docker]   |         \"\"\"Build the docker image for pypiserver.\n[CI/test-docker]   |     \n[CI/test-docker]   |         Return the tag.\n[CI/test-docker]   |         \"\"\"\n[CI/test-docker]   |         tag = \"pypiserver:test\"\n[CI/test-docker]   | >       run(\n[CI/test-docker]   |             \"docker\",\n[CI/test-docker]   |             \"build\",\n[CI/test-docker]   |             \"--file\",\n[CI/test-docker]   |             str(DOCKERFILE),\n[CI/test-docker]   |             \"--tag\",\n[CI/test-docker]   |             tag,\n[CI/test-docker]   |             str(ROOT_DIR),\n[CI/test-docker]   |             cwd=ROOT_DIR,\n[CI/test-docker]   |         )\n[CI/test-docker]   | \n[CI/test-docker]   | docker/test_docker.py:47: \n[CI/test-docker]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[CI/test-docker]   | \n[CI/test-docker]   | capture = False, raise_on_err = True\n[CI/test-docker]   | check_code = <function <lambda> at 0x7f6ffc32bdc0>\n[CI/test-docker]   | cmd = ('docker', 'build', '--file', '/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/pypiserver-pypiserver/Dockerfile', '--tag', 'pypiserver:test', ...)\n[CI/test-docker]   | popen_kwargs = {'cwd': PosixPath('/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/pypiserver-pypiserver')}\n[CI/test-docker]   | stdout = None, stderr = None\n[CI/test-docker]   | proc = <Popen: returncode: 1 args: ('docker', 'build', '--file', '/tmp/de65f406-fe2...>\n[CI/test-docker]   | out = None, err = None, result = RunReturn(returncode=1, out='', err='')\n[CI/test-docker]   | \n[CI/test-docker]   |     def run(\n[CI/test-docker]   |         *cmd: str,\n[CI/test-docker]   |         capture: bool = False,\n[CI/test-docker]   |         raise_on_err: bool = True,\n[CI/test-docker]   |         check_code: t.Callable[[int], bool] = lambda c: c == 0,\n[CI/test-docker]   |         **popen_kwargs: t.Any,\n[CI/test-docker]   |     ) -> RunReturn:\n[CI/test-docker]   |         \"\"\"Run a command to completion.\"\"\"\n[CI/test-docker]   |         stdout = subprocess.PIPE if capture else None\n[CI/test-docker]   |         stderr = subprocess.PIPE if capture else None\n[CI/test-docker]   |         proc = subprocess.Popen(cmd, stdout=stdout, stderr=stderr, **popen_kwargs)\n[CI/test-docker]   |         out, err = proc.communicate()\n[CI/test-docker]   |         result = RunReturn(\n[CI/test-docker]   |             proc.returncode,\n[CI/test-docker]   |             \"\" if out is None else out.decode(),\n[CI/test-docker]   |             \"\" if err is None else err.decode(),\n[CI/test-docker]   |         )\n[CI/test-docker]   |         if raise_on_err and not check_code(result.returncode):\n[CI/test-docker]   | >           raise RuntimeError(result)\n[CI/test-docker]   | E           RuntimeError: RunReturn(returncode=1, out='', err='')\n[CI/test-docker]   | \n[CI/test-docker]   | docker/test_docker.py:142: RuntimeError\n[CI/test-docker]   | ________ ERROR at setup of TestBasics.test_expected_server[container4] _________\n[CI/test-docker]   | \n[CI/test-docker]   |     @pytest.fixture(scope=\"session\")\n[CI/test-docker]   |     def image() -> str:\n[CI/test-docker]   |         \"\"\"Build the docker image for pypiserver.\n[CI/test-docker]   |     \n[CI/test-docker]   |         Return the tag.\n[CI/test-docker]   |         \"\"\"\n[CI/test-docker]   |         tag = \"pypiserver:test\"\n[CI/test-docker]   | >       run(\n[CI/test-docker]   |             \"docker\",\n[CI/test-docker]   |             \"build\",\n[CI/test-docker]   |             \"--file\",\n[CI/test-docker]   |             str(DOCKERFILE),\n[CI/test-docker]   |             \"--tag\",\n[CI/test-docker]   |             tag,\n[CI/test-docker]   |             str(ROOT_DIR),\n[CI/test-docker]   |             cwd=ROOT_DIR,\n[CI/test-docker]   |         )\n[CI/test-docker]   | \n[CI/test-docker]   | docker/test_docker.py:47: \n[CI/test-docker]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[CI/test-docker]   | \n[CI/test-docker]   | capture = False, raise_on_err = True\n[CI/test-docker]   | check_code = <function <lambda> at 0x7f6ffc32bdc0>\n[CI/test-docker]   | cmd = ('docker', 'build', '--file', '/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/pypiserver-pypiserver/Dockerfile', '--tag', 'pypiserver:test', ...)\n[CI/test-docker]   | popen_kwargs = {'cwd': PosixPath('/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/pypiserver-pypiserver')}\n[CI/test-docker]   | stdout = None, stderr = None\n[CI/test-docker]   | proc = <Popen: returncode: 1 args: ('docker', 'build', '--file', '/tmp/de65f406-fe2...>\n[CI/test-docker]   | out = None, err = None, result = RunReturn(returncode=1, out='', err='')\n[CI/test-docker]   | \n[CI/test-docker]   |     def run(\n[CI/test-docker]   |         *cmd: str,\n[CI/test-docker]   |         capture: bool = False,\n[CI/test-docker]   |         raise_on_err: bool = True,\n[CI/test-docker]   |         check_code: t.Callable[[int], bool] = lambda c: c == 0,\n[CI/test-docker]   |         **popen_kwargs: t.Any,\n[CI/test-docker]   |     ) -> RunReturn:\n[CI/test-docker]   |         \"\"\"Run a command to completion.\"\"\"\n[CI/test-docker]   |         stdout = subprocess.PIPE if capture else None\n[CI/test-docker]   |         stderr = subprocess.PIPE if capture else None\n[CI/test-docker]   |         proc = subprocess.Popen(cmd, stdout=stdout, stderr=stderr, **popen_kwargs)\n[CI/test-docker]   |         out, err = proc.communicate()\n[CI/test-docker]   |         result = RunReturn(\n[CI/test-docker]   |             proc.returncode,\n[CI/test-docker]   |             \"\" if out is None else out.decode(),\n[CI/test-docker]   |             \"\" if err is None else err.decode(),\n[CI/test-docker]   |         )\n[CI/test-docker]   |         if raise_on_err and not check_code(result.returncode):\n[CI/test-docker]   | >           raise RuntimeError(result)\n[CI/test-docker]   | E           RuntimeError: RunReturn(returncode=1, out='', err='')\n[CI/test-docker]   | \n[CI/test-docker]   | docker/test_docker.py:142: RuntimeError\n[CI/test-docker]   | ____________ ERROR at setup of TestBasics.test_welcome[container4] _____________\n[CI/test-docker]   | \n[CI/test-docker]   |     @pytest.fixture(scope=\"session\")\n[CI/test-docker]   |     def image() -> str:\n[CI/test-docker]   |         \"\"\"Build the docker image for pypiserver.\n[CI/test-docker]   |     \n[CI/test-docker]   |         Return the tag.\n[CI/test-docker]   |         \"\"\"\n[CI/test-docker]   |         tag = \"pypiserver:test\"\n[CI/test-docker]   | >       run(\n[CI/test-docker]   |             \"docker\",\n[CI/test-docker]   |             \"build\",\n[CI/test-docker]   |             \"--file\",\n[CI/test-docker]   |             str(DOCKERFILE),\n[CI/test-docker]   |             \"--tag\",\n[CI/test-docker]   |             tag,\n[CI/test-docker]   |             str(ROOT_DIR),\n[CI/test-docker]   |             cwd=ROOT_DIR,\n[CI/test-docker]   |         )\n[CI/test-docker]   | \n[CI/test-docker]   | docker/test_docker.py:47: \n[CI/test-docker]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[CI/test-docker]   | \n[CI/test-docker]   | capture = False, raise_on_err = True\n[CI/test-docker]   | check_code = <function <lambda> at 0x7f6ffc32bdc0>\n[CI/test-docker]   | cmd = ('docker', 'build', '--file', '/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/pypiserver-pypiserver/Dockerfile', '--tag', 'pypiserver:test', ...)\n[CI/test-docker]   | popen_kwargs = {'cwd': PosixPath('/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/pypiserver-pypiserver')}\n[CI/test-docker]   | stdout = None, stderr = None\n[CI/test-docker]   | proc = <Popen: returncode: 1 args: ('docker', 'build', '--file', '/tmp/de65f406-fe2...>\n[CI/test-docker]   | out = None, err = None, result = RunReturn(returncode=1, out='', err='')\n[CI/test-docker]   | \n[CI/test-docker]   |     def run(\n[CI/test-docker]   |         *cmd: str,\n[CI/test-docker]   |         capture: bool = False,\n[CI/test-docker]   |         raise_on_err: bool = True,\n[CI/test-docker]   |         check_code: t.Callable[[int], bool] = lambda c: c == 0,\n[CI/test-docker]   |         **popen_kwargs: t.Any,\n[CI/test-docker]   |     ) -> RunReturn:\n[CI/test-docker]   |         \"\"\"Run a command to completion.\"\"\"\n[CI/test-docker]   |         stdout = subprocess.PIPE if capture else None\n[CI/test-docker]   |         stderr = subprocess.PIPE if capture else None\n[CI/test-docker]   |         proc = subprocess.Popen(cmd, stdout=stdout, stderr=stderr, **popen_kwargs)\n[CI/test-docker]   |         out, err = proc.communicate()\n[CI/test-docker]   |         result = RunReturn(\n[CI/test-docker]   |             proc.returncode,\n[CI/test-docker]   |             \"\" if out is None else out.decode(),\n[CI/test-docker]   |             \"\" if err is None else err.decode(),\n[CI/test-docker]   |         )\n[CI/test-docker]   |         if raise_on_err and not check_code(result.returncode):\n[CI/test-docker]   | >           raise RuntimeError(result)\n[CI/test-docker]   | E           RuntimeError: RunReturn(returncode=1, out='', err='')\n[CI/test-docker]   | \n[CI/test-docker]   | docker/test_docker.py:142: RuntimeError\n[CI/test-docker]   | ____________ ERROR at setup of TestBasics.test_download[container5] ____________\n[CI/test-docker]   | \n[CI/test-docker]   |     @pytest.fixture(scope=\"session\")\n[CI/test-docker]   |     def image() -> str:\n[CI/test-docker]   |         \"\"\"Build the docker image for pypiserver.\n[CI/test-docker]   |     \n[CI/test-docker]   |         Return the tag.\n[CI/test-docker]   |         \"\"\"\n[CI/test-docker]   |         tag = \"pypiserver:test\"\n[CI/test-docker]   | >       run(\n[CI/test-docker]   |             \"docker\",\n[CI/test-docker]   |             \"build\",\n[CI/test-docker]   |             \"--file\",\n[CI/test-docker]   |             str(DOCKERFILE),\n[CI/test-docker]   |             \"--tag\",\n[CI/test-docker]   |             tag,\n[CI/test-docker]   |             str(ROOT_DIR),\n[CI/test-docker]   |             cwd=ROOT_DIR,\n[CI/test-docker]   |         )\n[CI/test-docker]   | \n[CI/test-docker]   | docker/test_docker.py:47: \n[CI/test-docker]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[CI/test-docker]   | \n[CI/test-docker]   | capture = False, raise_on_err = True\n[CI/test-docker]   | check_code = <function <lambda> at 0x7f6ffc32bdc0>\n[CI/test-docker]   | cmd = ('docker', 'build', '--file', '/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/pypiserver-pypiserver/Dockerfile', '--tag', 'pypiserver:test', ...)\n[CI/test-docker]   | popen_kwargs = {'cwd': PosixPath('/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/pypiserver-pypiserver')}\n[CI/test-docker]   | stdout = None, stderr = None\n[CI/test-docker]   | proc = <Popen: returncode: 1 args: ('docker', 'build', '--file', '/tmp/de65f406-fe2...>\n[CI/test-docker]   | out = None, err = None, result = RunReturn(returncode=1, out='', err='')\n[CI/test-docker]   | \n[CI/test-docker]   |     def run(\n[CI/test-docker]   |         *cmd: str,\n[CI/test-docker]   |         capture: bool = False,\n[CI/test-docker]   |         raise_on_err: bool = True,\n[CI/test-docker]   |         check_code: t.Callable[[int], bool] = lambda c: c == 0,\n[CI/test-docker]   |         **popen_kwargs: t.Any,\n[CI/test-docker]   |     ) -> RunReturn:\n[CI/test-docker]   |         \"\"\"Run a command to completion.\"\"\"\n[CI/test-docker]   |         stdout = subprocess.PIPE if capture else None\n[CI/test-docker]   |         stderr = subprocess.PIPE if capture else None\n[CI/test-docker]   |         proc = subprocess.Popen(cmd, stdout=stdout, stderr=stderr, **popen_kwargs)\n[CI/test-docker]   |         out, err = proc.communicate()\n[CI/test-docker]   |         result = RunReturn(\n[CI/test-docker]   |             proc.returncode,\n[CI/test-docker]   |             \"\" if out is None else out.decode(),\n[CI/test-docker]   |             \"\" if err is None else err.decode(),\n[CI/test-docker]   |         )\n[CI/test-docker]   |         if raise_on_err and not check_code(result.returncode):\n[CI/test-docker]   | >           raise RuntimeError(result)\n[CI/test-docker]   | E           RuntimeError: RunReturn(returncode=1, out='', err='')\n[CI/test-docker]   | \n[CI/test-docker]   | docker/test_docker.py:142: RuntimeError\n[CI/test-docker]   | ____________ ERROR at setup of TestBasics.test_install[container5] _____________\n[CI/test-docker]   | \n[CI/test-docker]   |     @pytest.fixture(scope=\"session\")\n[CI/test-docker]   |     def image() -> str:\n[CI/test-docker]   |         \"\"\"Build the docker image for pypiserver.\n[CI/test-docker]   |     \n[CI/test-docker]   |         Return the tag.\n[CI/test-docker]   |         \"\"\"\n[CI/test-docker]   |         tag = \"pypiserver:test\"\n[CI/test-docker]   | >       run(\n[CI/test-docker]   |             \"docker\",\n[CI/test-docker]   |             \"build\",\n[CI/test-docker]   |             \"--file\",\n[CI/test-docker]   |             str(DOCKERFILE),\n[CI/test-docker]   |             \"--tag\",\n[CI/test-docker]   |             tag,\n[CI/test-docker]   |             str(ROOT_DIR),\n[CI/test-docker]   |             cwd=ROOT_DIR,\n[CI/test-docker]   |         )\n[CI/test-docker]   | \n[CI/test-docker]   | docker/test_docker.py:47: \n[CI/test-docker]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[CI/test-docker]   | \n[CI/test-docker]   | capture = False, raise_on_err = True\n[CI/test-docker]   | check_code = <function <lambda> at 0x7f6ffc32bdc0>\n[CI/test-docker]   | cmd = ('docker', 'build', '--file', '/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/pypiserver-pypiserver/Dockerfile', '--tag', 'pypiserver:test', ...)\n[CI/test-docker]   | popen_kwargs = {'cwd': PosixPath('/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/pypiserver-pypiserver')}\n[CI/test-docker]   | stdout = None, stderr = None\n[CI/test-docker]   | proc = <Popen: returncode: 1 args: ('docker', 'build', '--file', '/tmp/de65f406-fe2...>\n[CI/test-docker]   | out = None, err = None, result = RunReturn(returncode=1, out='', err='')\n[CI/test-docker]   | \n[CI/test-docker]   |     def run(\n[CI/test-docker]   |         *cmd: str,\n[CI/test-docker]   |         capture: bool = False,\n[CI/test-docker]   |         raise_on_err: bool = True,\n[CI/test-docker]   |         check_code: t.Callable[[int], bool] = lambda c: c == 0,\n[CI/test-docker]   |         **popen_kwargs: t.Any,\n[CI/test-docker]   |     ) -> RunReturn:\n[CI/test-docker]   |         \"\"\"Run a command to completion.\"\"\"\n[CI/test-docker]   |         stdout = subprocess.PIPE if capture else None\n[CI/test-docker]   |         stderr = subprocess.PIPE if capture else None\n[CI/test-docker]   |         proc = subprocess.Popen(cmd, stdout=stdout, stderr=stderr, **popen_kwargs)\n[CI/test-docker]   |         out, err = proc.communicate()\n[CI/test-docker]   |         result = RunReturn(\n[CI/test-docker]   |             proc.returncode,\n[CI/test-docker]   |             \"\" if out is None else out.decode(),\n[CI/test-docker]   |             \"\" if err is None else err.decode(),\n[CI/test-docker]   |         )\n[CI/test-docker]   |         if raise_on_err and not check_code(result.returncode):\n[CI/test-docker]   | >           raise RuntimeError(result)\n[CI/test-docker]   | E           RuntimeError: RunReturn(returncode=1, out='', err='')\n[CI/test-docker]   | \n[CI/test-docker]   | docker/test_docker.py:142: RuntimeError\n[CI/test-docker]   | ________ ERROR at setup of TestBasics.test_expected_server[container5] _________\n[CI/test-docker]   | \n[CI/test-docker]   |     @pytest.fixture(scope=\"session\")\n[CI/test-docker]   |     def image() -> str:\n[CI/test-docker]   |         \"\"\"Build the docker image for pypiserver.\n[CI/test-docker]   |     \n[CI/test-docker]   |         Return the tag.\n[CI/test-docker]   |         \"\"\"\n[CI/test-docker]   |         tag = \"pypiserver:test\"\n[CI/test-docker]   | >       run(\n[CI/test-docker]   |             \"docker\",\n[CI/test-docker]   |             \"build\",\n[CI/test-docker]   |             \"--file\",\n[CI/test-docker]   |             str(DOCKERFILE),\n[CI/test-docker]   |             \"--tag\",\n[CI/test-docker]   |             tag,\n[CI/test-docker]   |             str(ROOT_DIR),\n[CI/test-docker]   |             cwd=ROOT_DIR,\n[CI/test-docker]   |         )\n[CI/test-docker]   | \n[CI/test-docker]   | docker/test_docker.py:47: \n[CI/test-docker]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[CI/test-docker]   | \n[CI/test-docker]   | capture = False, raise_on_err = True\n[CI/test-docker]   | check_code = <function <lambda> at 0x7f6ffc32bdc0>\n[CI/test-docker]   | cmd = ('docker', 'build', '--file', '/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/pypiserver-pypiserver/Dockerfile', '--tag', 'pypiserver:test', ...)\n[CI/test-docker]   | popen_kwargs = {'cwd': PosixPath('/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/pypiserver-pypiserver')}\n[CI/test-docker]   | stdout = None, stderr = None\n[CI/test-docker]   | proc = <Popen: returncode: 1 args: ('docker', 'build', '--file', '/tmp/de65f406-fe2...>\n[CI/test-docker]   | out = None, err = None, result = RunReturn(returncode=1, out='', err='')\n[CI/test-docker]   | \n[CI/test-docker]   |     def run(\n[CI/test-docker]   |         *cmd: str,\n[CI/test-docker]   |         capture: bool = False,\n[CI/test-docker]   |         raise_on_err: bool = True,\n[CI/test-docker]   |         check_code: t.Callable[[int], bool] = lambda c: c == 0,\n[CI/test-docker]   |         **popen_kwargs: t.Any,\n[CI/test-docker]   |     ) -> RunReturn:\n[CI/test-docker]   |         \"\"\"Run a command to completion.\"\"\"\n[CI/test-docker]   |         stdout = subprocess.PIPE if capture else None\n[CI/test-docker]   |         stderr = subprocess.PIPE if capture else None\n[CI/test-docker]   |         proc = subprocess.Popen(cmd, stdout=stdout, stderr=stderr, **popen_kwargs)\n[CI/test-docker]   |         out, err = proc.communicate()\n[CI/test-docker]   |         result = RunReturn(\n[CI/test-docker]   |             proc.returncode,\n[CI/test-docker]   |             \"\" if out is None else out.decode(),\n[CI/test-docker]   |             \"\" if err is None else err.decode(),\n[CI/test-docker]   |         )\n[CI/test-docker]   |         if raise_on_err and not check_code(result.returncode):\n[CI/test-docker]   | >           raise RuntimeError(result)\n[CI/test-docker]   | E           RuntimeError: RunReturn(returncode=1, out='', err='')\n[CI/test-docker]   | \n[CI/test-docker]   | docker/test_docker.py:142: RuntimeError\n[CI/test-docker]   | ____________ ERROR at setup of TestBasics.test_welcome[container5] _____________\n[CI/test-docker]   | \n[CI/test-docker]   |     @pytest.fixture(scope=\"session\")\n[CI/test-docker]   |     def image() -> str:\n[CI/test-docker]   |         \"\"\"Build the docker image for pypiserver.\n[CI/test-docker]   |     \n[CI/test-docker]   |         Return the tag.\n[CI/test-docker]   |         \"\"\"\n[CI/test-docker]   |         tag = \"pypiserver:test\"\n[CI/test-docker]   | >       run(\n[CI/test-docker]   |             \"docker\",\n[CI/test-docker]   |             \"build\",\n[CI/test-docker]   |             \"--file\",\n[CI/test-docker]   |             str(DOCKERFILE),\n[CI/test-docker]   |             \"--tag\",\n[CI/test-docker]   |             tag,\n[CI/test-docker]   |             str(ROOT_DIR),\n[CI/test-docker]   |             cwd=ROOT_DIR,\n[CI/test-docker]   |         )\n[CI/test-docker]   | \n[CI/test-docker]   | docker/test_docker.py:47: \n[CI/test-docker]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[CI/test-docker]   | \n[CI/test-docker]   | capture = False, raise_on_err = True\n[CI/test-docker]   | check_code = <function <lambda> at 0x7f6ffc32bdc0>\n[CI/test-docker]   | cmd = ('docker', 'build', '--file', '/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/pypiserver-pypiserver/Dockerfile', '--tag', 'pypiserver:test', ...)\n[CI/test-docker]   | popen_kwargs = {'cwd': PosixPath('/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/pypiserver-pypiserver')}\n[CI/test-docker]   | stdout = None, stderr = None\n[CI/test-docker]   | proc = <Popen: returncode: 1 args: ('docker', 'build', '--file', '/tmp/de65f406-fe2...>\n[CI/test-docker]   | out = None, err = None, result = RunReturn(returncode=1, out='', err='')\n[CI/test-docker]   | \n[CI/test-docker]   |     def run(\n[CI/test-docker]   |         *cmd: str,\n[CI/test-docker]   |         capture: bool = False,\n[CI/test-docker]   |         raise_on_err: bool = True,\n[CI/test-docker]   |         check_code: t.Callable[[int], bool] = lambda c: c == 0,\n[CI/test-docker]   |         **popen_kwargs: t.Any,\n[CI/test-docker]   |     ) -> RunReturn:\n[CI/test-docker]   |         \"\"\"Run a command to completion.\"\"\"\n[CI/test-docker]   |         stdout = subprocess.PIPE if capture else None\n[CI/test-docker]   |         stderr = subprocess.PIPE if capture else None\n[CI/test-docker]   |         proc = subprocess.Popen(cmd, stdout=stdout, stderr=stderr, **popen_kwargs)\n[CI/test-docker]   |         out, err = proc.communicate()\n[CI/test-docker]   |         result = RunReturn(\n[CI/test-docker]   |             proc.returncode,\n[CI/test-docker]   |             \"\" if out is None else out.decode(),\n[CI/test-docker]   |             \"\" if err is None else err.decode(),\n[CI/test-docker]   |         )\n[CI/test-docker]   |         if raise_on_err and not check_code(result.returncode):\n[CI/test-docker]   | >           raise RuntimeError(result)\n[CI/test-docker]   | E           RuntimeError: RunReturn(returncode=1, out='', err='')\n[CI/test-docker]   | \n[CI/test-docker]   | docker/test_docker.py:142: RuntimeError\n[CI/test-docker]   | _____________ ERROR at setup of TestAuthed.test_upload_failed_auth _____________\n[CI/test-docker]   | \n[CI/test-docker]   |     @pytest.fixture(scope=\"session\")\n[CI/test-docker]   |     def image() -> str:\n[CI/test-docker]   |         \"\"\"Build the docker image for pypiserver.\n[CI/test-docker]   |     \n[CI/test-docker]   |         Return the tag.\n[CI/test-docker]   |         \"\"\"\n[CI/test-docker]   |         tag = \"pypiserver:test\"\n[CI/test-docker]   | >       run(\n[CI/test-docker]   |             \"docker\",\n[CI/test-docker]   |             \"build\",\n[CI/test-docker]   |             \"--file\",\n[CI/test-docker]   |             str(DOCKERFILE),\n[CI/test-docker]   |             \"--tag\",\n[CI/test-docker]   |             tag,\n[CI/test-docker]   |             str(ROOT_DIR),\n[CI/test-docker]   |             cwd=ROOT_DIR,\n[CI/test-docker]   |         )\n[CI/test-docker]   | \n[CI/test-docker]   | docker/test_docker.py:47: \n[CI/test-docker]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[CI/test-docker]   | \n[CI/test-docker]   | capture = False, raise_on_err = True\n[CI/test-docker]   | check_code = <function <lambda> at 0x7f6ffc32bdc0>\n[CI/test-docker]   | cmd = ('docker', 'build', '--file', '/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/pypiserver-pypiserver/Dockerfile', '--tag', 'pypiserver:test', ...)\n[CI/test-docker]   | popen_kwargs = {'cwd': PosixPath('/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/pypiserver-pypiserver')}\n[CI/test-docker]   | stdout = None, stderr = None\n[CI/test-docker]   | proc = <Popen: returncode: 1 args: ('docker', 'build', '--file', '/tmp/de65f406-fe2...>\n[CI/test-docker]   | out = None, err = None, result = RunReturn(returncode=1, out='', err='')\n[CI/test-docker]   | \n[CI/test-docker]   |     def run(\n[CI/test-docker]   |         *cmd: str,\n[CI/test-docker]   |         capture: bool = False,\n[CI/test-docker]   |         raise_on_err: bool = True,\n[CI/test-docker]   |         check_code: t.Callable[[int], bool] = lambda c: c == 0,\n[CI/test-docker]   |         **popen_kwargs: t.Any,\n[CI/test-docker]   |     ) -> RunReturn:\n[CI/test-docker]   |         \"\"\"Run a command to completion.\"\"\"\n[CI/test-docker]   |         stdout = subprocess.PIPE if capture else None\n[CI/test-docker]   |         stderr = subprocess.PIPE if capture else None\n[CI/test-docker]   |         proc = subprocess.Popen(cmd, stdout=stdout, stderr=stderr, **popen_kwargs)\n[CI/test-docker]   |         out, err = proc.communicate()\n[CI/test-docker]   |         result = RunReturn(\n[CI/test-docker]   |             proc.returncode,\n[CI/test-docker]   |             \"\" if out is None else out.decode(),\n[CI/test-docker]   |             \"\" if err is None else err.decode(),\n[CI/test-docker]   |         )\n[CI/test-docker]   |         if raise_on_err and not check_code(result.returncode):\n[CI/test-docker]   | >           raise RuntimeError(result)\n[CI/test-docker]   | E           RuntimeError: RunReturn(returncode=1, out='', err='')\n[CI/test-docker]   | \n[CI/test-docker]   | docker/test_docker.py:142: RuntimeError\n[CI/test-docker]   | __________________ ERROR at setup of TestAuthed.test_download __________________\n[CI/test-docker]   | \n[CI/test-docker]   |     @pytest.fixture(scope=\"session\")\n[CI/test-docker]   |     def image() -> str:\n[CI/test-docker]   |         \"\"\"Build the docker image for pypiserver.\n[CI/test-docker]   |     \n[CI/test-docker]   |         Return the tag.\n[CI/test-docker]   |         \"\"\"\n[CI/test-docker]   |         tag = \"pypiserver:test\"\n[CI/test-docker]   | >       run(\n[CI/test-docker]   |             \"docker\",\n[CI/test-docker]   |             \"build\",\n[CI/test-docker]   |             \"--file\",\n[CI/test-docker]   |             str(DOCKERFILE),\n[CI/test-docker]   |             \"--tag\",\n[CI/test-docker]   |             tag,\n[CI/test-docker]   |             str(ROOT_DIR),\n[CI/test-docker]   |             cwd=ROOT_DIR,\n[CI/test-docker]   |         )\n[CI/test-docker]   | \n[CI/test-docker]   | docker/test_docker.py:47: \n[CI/test-docker]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[CI/test-docker]   | \n[CI/test-docker]   | capture = False, raise_on_err = True\n[CI/test-docker]   | check_code = <function <lambda> at 0x7f6ffc32bdc0>\n[CI/test-docker]   | cmd = ('docker', 'build', '--file', '/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/pypiserver-pypiserver/Dockerfile', '--tag', 'pypiserver:test', ...)\n[CI/test-docker]   | popen_kwargs = {'cwd': PosixPath('/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/pypiserver-pypiserver')}\n[CI/test-docker]   | stdout = None, stderr = None\n[CI/test-docker]   | proc = <Popen: returncode: 1 args: ('docker', 'build', '--file', '/tmp/de65f406-fe2...>\n[CI/test-docker]   | out = None, err = None, result = RunReturn(returncode=1, out='', err='')\n[CI/test-docker]   | \n[CI/test-docker]   |     def run(\n[CI/test-docker]   |         *cmd: str,\n[CI/test-docker]   |         capture: bool = False,\n[CI/test-docker]   |         raise_on_err: bool = True,\n[CI/test-docker]   |         check_code: t.Callable[[int], bool] = lambda c: c == 0,\n[CI/test-docker]   |         **popen_kwargs: t.Any,\n[CI/test-docker]   |     ) -> RunReturn:\n[CI/test-docker]   |         \"\"\"Run a command to completion.\"\"\"\n[CI/test-docker]   |         stdout = subprocess.PIPE if capture else None\n[CI/test-docker]   |         stderr = subprocess.PIPE if capture else None\n[CI/test-docker]   |         proc = subprocess.Popen(cmd, stdout=stdout, stderr=stderr, **popen_kwargs)\n[CI/test-docker]   |         out, err = proc.communicate()\n[CI/test-docker]   |         result = RunReturn(\n[CI/test-docker]   |             proc.returncode,\n[CI/test-docker]   |             \"\" if out is None else out.decode(),\n[CI/test-docker]   |             \"\" if err is None else err.decode(),\n[CI/test-docker]   |         )\n[CI/test-docker]   |         if raise_on_err and not check_code(result.returncode):\n[CI/test-docker]   | >           raise RuntimeError(result)\n[CI/test-docker]   | E           RuntimeError: RunReturn(returncode=1, out='', err='')\n[CI/test-docker]   | \n[CI/test-docker]   | docker/test_docker.py:142: RuntimeError\n[CI/test-docker]   | ____________ ERROR at setup of TestAuthed.test_download_failed_auth ____________\n[CI/test-docker]   | \n[CI/test-docker]   |     @pytest.fixture(scope=\"session\")\n[CI/test-docker]   |     def image() -> str:\n[CI/test-docker]   |         \"\"\"Build the docker image for pypiserver.\n[CI/test-docker]   |     \n[CI/test-docker]   |         Return the tag.\n[CI/test-docker]   |         \"\"\"\n[CI/test-docker]   |         tag = \"pypiserver:test\"\n[CI/test-docker]   | >       run(\n[CI/test-docker]   |             \"docker\",\n[CI/test-docker]   |             \"build\",\n[CI/test-docker]   |             \"--file\",\n[CI/test-docker]   |             str(DOCKERFILE),\n[CI/test-docker]   |             \"--tag\",\n[CI/test-docker]   |             tag,\n[CI/test-docker]   |             str(ROOT_DIR),\n[CI/test-docker]   |             cwd=ROOT_DIR,\n[CI/test-docker]   |         )\n[CI/test-docker]   | \n[CI/test-docker]   | docker/test_docker.py:47: \n[CI/test-docker]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[CI/test-docker]   | \n[CI/test-docker]   | capture = False, raise_on_err = True\n[CI/test-docker]   | check_code = <function <lambda> at 0x7f6ffc32bdc0>\n[CI/test-docker]   | cmd = ('docker', 'build', '--file', '/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/pypiserver-pypiserver/Dockerfile', '--tag', 'pypiserver:test', ...)\n[CI/test-docker]   | popen_kwargs = {'cwd': PosixPath('/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/pypiserver-pypiserver')}\n[CI/test-docker]   | stdout = None, stderr = None\n[CI/test-docker]   | proc = <Popen: returncode: 1 args: ('docker', 'build', '--file', '/tmp/de65f406-fe2...>\n[CI/test-docker]   | out = None, err = None, result = RunReturn(returncode=1, out='', err='')\n[CI/test-docker]   | \n[CI/test-docker]   |     def run(\n[CI/test-docker]   |         *cmd: str,\n[CI/test-docker]   |         capture: bool = False,\n[CI/test-docker]   |         raise_on_err: bool = True,\n[CI/test-docker]   |         check_code: t.Callable[[int], bool] = lambda c: c == 0,\n[CI/test-docker]   |         **popen_kwargs: t.Any,\n[CI/test-docker]   |     ) -> RunReturn:\n[CI/test-docker]   |         \"\"\"Run a command to completion.\"\"\"\n[CI/test-docker]   |         stdout = subprocess.PIPE if capture else None\n[CI/test-docker]   |         stderr = subprocess.PIPE if capture else None\n[CI/test-docker]   |         proc = subprocess.Popen(cmd, stdout=stdout, stderr=stderr, **popen_kwargs)\n[CI/test-docker]   |         out, err = proc.communicate()\n[CI/test-docker]   |         result = RunReturn(\n[CI/test-docker]   |             proc.returncode,\n[CI/test-docker]   |             \"\" if out is None else out.decode(),\n[CI/test-docker]   |             \"\" if err is None else err.decode(),\n[CI/test-docker]   |         )\n[CI/test-docker]   |         if raise_on_err and not check_code(result.returncode):\n[CI/test-docker]   | >           raise RuntimeError(result)\n[CI/test-docker]   | E           RuntimeError: RunReturn(returncode=1, out='', err='')\n[CI/test-docker]   | \n[CI/test-docker]   | docker/test_docker.py:142: RuntimeError\n[CI/test-docker]   | __________________ ERROR at setup of TestAuthed.test_install ___________________\n[CI/test-docker]   | \n[CI/test-docker]   |     @pytest.fixture(scope=\"session\")\n[CI/test-docker]   |     def image() -> str:\n[CI/test-docker]   |         \"\"\"Build the docker image for pypiserver.\n[CI/test-docker]   |     \n[CI/test-docker]   |         Return the tag.\n[CI/test-docker]   |         \"\"\"\n[CI/test-docker]   |         tag = \"pypiserver:test\"\n[CI/test-docker]   | >       run(\n[CI/test-docker]   |             \"docker\",\n[CI/test-docker]   |             \"build\",\n[CI/test-docker]   |             \"--file\",\n[CI/test-docker]   |             str(DOCKERFILE),\n[CI/test-docker]   |             \"--tag\",\n[CI/test-docker]   |             tag,\n[CI/test-docker]   |             str(ROOT_DIR),\n[CI/test-docker]   |             cwd=ROOT_DIR,\n[CI/test-docker]   |         )\n[CI/test-docker]   | \n[CI/test-docker]   | docker/test_docker.py:47: \n[CI/test-docker]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[CI/test-docker]   | \n[CI/test-docker]   | capture = False, raise_on_err = True\n[CI/test-docker]   | check_code = <function <lambda> at 0x7f6ffc32bdc0>\n[CI/test-docker]   | cmd = ('docker', 'build', '--file', '/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/pypiserver-pypiserver/Dockerfile', '--tag', 'pypiserver:test', ...)\n[CI/test-docker]   | popen_kwargs = {'cwd': PosixPath('/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/pypiserver-pypiserver')}\n[CI/test-docker]   | stdout = None, stderr = None\n[CI/test-docker]   | proc = <Popen: returncode: 1 args: ('docker', 'build', '--file', '/tmp/de65f406-fe2...>\n[CI/test-docker]   | out = None, err = None, result = RunReturn(returncode=1, out='', err='')\n[CI/test-docker]   | \n[CI/test-docker]   |     def run(\n[CI/test-docker]   |         *cmd: str,\n[CI/test-docker]   |         capture: bool = False,\n[CI/test-docker]   |         raise_on_err: bool = True,\n[CI/test-docker]   |         check_code: t.Callable[[int], bool] = lambda c: c == 0,\n[CI/test-docker]   |         **popen_kwargs: t.Any,\n[CI/test-docker]   |     ) -> RunReturn:\n[CI/test-docker]   |         \"\"\"Run a command to completion.\"\"\"\n[CI/test-docker]   |         stdout = subprocess.PIPE if capture else None\n[CI/test-docker]   |         stderr = subprocess.PIPE if capture else None\n[CI/test-docker]   |         proc = subprocess.Popen(cmd, stdout=stdout, stderr=stderr, **popen_kwargs)\n[CI/test-docker]   |         out, err = proc.communicate()\n[CI/test-docker]   |         result = RunReturn(\n[CI/test-docker]   |             proc.returncode,\n[CI/test-docker]   |             \"\" if out is None else out.decode(),\n[CI/test-docker]   |             \"\" if err is None else err.decode(),\n[CI/test-docker]   |         )\n[CI/test-docker]   |         if raise_on_err and not check_code(result.returncode):\n[CI/test-docker]   | >           raise RuntimeError(result)\n[CI/test-docker]   | E           RuntimeError: RunReturn(returncode=1, out='', err='')\n[CI/test-docker]   | \n[CI/test-docker]   | docker/test_docker.py:142: RuntimeError\n[CI/test-docker]   | ____________ ERROR at setup of TestAuthed.test_install_failed_auth _____________\n[CI/test-docker]   | \n[CI/test-docker]   |     @pytest.fixture(scope=\"session\")\n[CI/test-docker]   |     def image() -> str:\n[CI/test-docker]   |         \"\"\"Build the docker image for pypiserver.\n[CI/test-docker]   |     \n[CI/test-docker]   |         Return the tag.\n[CI/test-docker]   |         \"\"\"\n[CI/test-docker]   |         tag = \"pypiserver:test\"\n[CI/test-docker]   | >       run(\n[CI/test-docker]   |             \"docker\",\n[CI/test-docker]   |             \"build\",\n[CI/test-docker]   |             \"--file\",\n[CI/test-docker]   |             str(DOCKERFILE),\n[CI/test-docker]   |             \"--tag\",\n[CI/test-docker]   |             tag,\n[CI/test-docker]   |             str(ROOT_DIR),\n[CI/test-docker]   |             cwd=ROOT_DIR,\n[CI/test-docker]   |         )\n[CI/test-docker]   | \n[CI/test-docker]   | docker/test_docker.py:47: \n[CI/test-docker]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[CI/test-docker]   | \n[CI/test-docker]   | capture = False, raise_on_err = True\n[CI/test-docker]   | check_code = <function <lambda> at 0x7f6ffc32bdc0>\n[CI/test-docker]   | cmd = ('docker', 'build', '--file', '/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/pypiserver-pypiserver/Dockerfile', '--tag', 'pypiserver:test', ...)\n[CI/test-docker]   | popen_kwargs = {'cwd': PosixPath('/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/pypiserver-pypiserver')}\n[CI/test-docker]   | stdout = None, stderr = None\n[CI/test-docker]   | proc = <Popen: returncode: 1 args: ('docker', 'build', '--file', '/tmp/de65f406-fe2...>\n[CI/test-docker]   | out = None, err = None, result = RunReturn(returncode=1, out='', err='')\n[CI/test-docker]   | \n[CI/test-docker]   |     def run(\n[CI/test-docker]   |         *cmd: str,\n[CI/test-docker]   |         capture: bool = False,\n[CI/test-docker]   |         raise_on_err: bool = True,\n[CI/test-docker]   |         check_code: t.Callable[[int], bool] = lambda c: c == 0,\n[CI/test-docker]   |         **popen_kwargs: t.Any,\n[CI/test-docker]   |     ) -> RunReturn:\n[CI/test-docker]   |         \"\"\"Run a command to completion.\"\"\"\n[CI/test-docker]   |         stdout = subprocess.PIPE if capture else None\n[CI/test-docker]   |         stderr = subprocess.PIPE if capture else None\n[CI/test-docker]   |         proc = subprocess.Popen(cmd, stdout=stdout, stderr=stderr, **popen_kwargs)\n[CI/test-docker]   |         out, err = proc.communicate()\n[CI/test-docker]   |         result = RunReturn(\n[CI/test-docker]   |             proc.returncode,\n[CI/test-docker]   |             \"\" if out is None else out.decode(),\n[CI/test-docker]   |             \"\" if err is None else err.decode(),\n[CI/test-docker]   |         )\n[CI/test-docker]   |         if raise_on_err and not check_code(result.returncode):\n[CI/test-docker]   | >           raise RuntimeError(result)\n[CI/test-docker]   | E           RuntimeError: RunReturn(returncode=1, out='', err='')\n[CI/test-docker]   | \n[CI/test-docker]   | docker/test_docker.py:142: RuntimeError\n[CI/test-docker]   | =================================== FAILURES ===================================\n[CI/test-docker]   | ___________________________ TestAuthed.test_welcome ____________________________\n[CI/test-docker]   | \n[CI/test-docker]   | map = {<class 'socket.timeout'>: <class 'httpcore.ConnectTimeout'>, <class 'OSError'>: <class 'httpcore.ConnectError'>}\n[CI/test-docker]   | \n[CI/test-docker]   |     @contextlib.contextmanager\n[CI/test-docker]   |     def map_exceptions(map: ExceptionMapping) -> Iterator[None]:\n[CI/test-docker]   |         try:\n[CI/test-docker]   | >           yield\n[CI/test-docker]   | \n[CI/test-docker]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/httpcore/_exceptions.py:10: \n[CI/test-docker]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[CI/test-docker]   | \n[CI/test-docker]   | self = <httpcore.backends.sync.SyncBackend object at 0x7f6ffc242670>\n[CI/test-docker]   | host = 'localhost', port = 54427, timeout = 5.0, local_address = None\n[CI/test-docker]   | socket_options = []\n[CI/test-docker]   | \n[CI/test-docker]   |     def connect_tcp(\n[CI/test-docker]   |         self,\n[CI/test-docker]   |         host: str,\n[CI/test-docker]   |         port: int,\n[CI/test-docker]   |         timeout: typing.Optional[float] = None,\n[CI/test-docker]   |         local_address: typing.Optional[str] = None,\n[CI/test-docker]   |         socket_options: typing.Optional[typing.Iterable[SOCKET_OPTION]] = None,\n[CI/test-docker]   |     ) -> NetworkStream:\n[CI/test-docker]   |         # Note that we automatically include `TCP_NODELAY`\n[CI/test-docker]   |         # in addition to any other custom socket options.\n[CI/test-docker]   |         if socket_options is None:\n[CI/test-docker]   |             socket_options = []  # pragma: no cover\n[CI/test-docker]   |         address = (host, port)\n[CI/test-docker]   |         source_address = None if local_address is None else (local_address, 0)\n[CI/test-docker]   |         exc_map: ExceptionMapping = {\n[CI/test-docker]   |             socket.timeout: ConnectTimeout,\n[CI/test-docker]   |             OSError: ConnectError,\n[CI/test-docker]   |         }\n[CI/test-docker]   |     \n[CI/test-docker]   |         with map_exceptions(exc_map):\n[CI/test-docker]   | >           sock = socket.create_connection(\n[CI/test-docker]   |                 address,\n[CI/test-docker]   |                 timeout,\n[CI/test-docker]   |                 source_address=source_address,\n[CI/test-docker]   |             )\n[CI/test-docker]   | \n[CI/test-docker]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/httpcore/backends/sync.py:100: \n[CI/test-docker]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[CI/test-docker]   | \n[CI/test-docker]   | address = ('localhost', 54427), timeout = 5.0, source_address = None\n[CI/test-docker]   | \n[CI/test-docker]   |     def create_connection(address, timeout=_GLOBAL_DEFAULT_TIMEOUT,\n[CI/test-docker]   |                           source_address=None):\n[CI/test-docker]   |         \"\"\"Connect to *address* and return the socket object.\n[CI/test-docker]   |     \n[CI/test-docker]   |         Convenience function.  Connect to *address* (a 2-tuple ``(host,\n[CI/test-docker]   |         port)``) and return the socket object.  Passing the optional\n[CI/test-docker]   |         *timeout* parameter will set the timeout on the socket instance\n[CI/test-docker]   |         before attempting to connect.  If no *timeout* is supplied, the\n[CI/test-docker]   |         global default timeout setting returned by :func:`getdefaulttimeout`\n[CI/test-docker]   |         is used.  If *source_address* is set it must be a tuple of (host, port)\n[CI/test-docker]   |         for the socket to bind as a source address before making the connection.\n[CI/test-docker]   |         A host of '' or port 0 tells the OS to use the default.\n[CI/test-docker]   |         \"\"\"\n[CI/test-docker]   |     \n[CI/test-docker]   |         host, port = address\n[CI/test-docker]   |         err = None\n[CI/test-docker]   |         for res in getaddrinfo(host, port, 0, SOCK_STREAM):\n[CI/test-docker]   |             af, socktype, proto, canonname, sa = res\n[CI/test-docker]   |             sock = None\n[CI/test-docker]   |             try:\n[CI/test-docker]   |                 sock = socket(af, socktype, proto)\n[CI/test-docker]   |                 if timeout is not _GLOBAL_DEFAULT_TIMEOUT:\n[CI/test-docker]   |                     sock.settimeout(timeout)\n[CI/test-docker]   |                 if source_address:\n[CI/test-docker]   |                     sock.bind(source_address)\n[CI/test-docker]   |                 sock.connect(sa)\n[CI/test-docker]   |                 # Break explicitly a reference cycle\n[CI/test-docker]   |                 err = None\n[CI/test-docker]   |                 return sock\n[CI/test-docker]   |     \n[CI/test-docker]   |             except error as _:\n[CI/test-docker]   |                 err = _\n[CI/test-docker]   |                 if sock is not None:\n[CI/test-docker]   |                     sock.close()\n[CI/test-docker]   |     \n[CI/test-docker]   |         if err is not None:\n[CI/test-docker]   |             try:\n[CI/test-docker]   | >               raise err\n[CI/test-docker]   | \n[CI/test-docker]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/socket.py:843: \n[CI/test-docker]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[CI/test-docker]   | \n[CI/test-docker]   | address = ('localhost', 54427), timeout = 5.0, source_address = None\n[CI/test-docker]   | \n[CI/test-docker]   |     def create_connection(address, timeout=_GLOBAL_DEFAULT_TIMEOUT,\n[CI/test-docker]   |                           source_address=None):\n[CI/test-docker]   |         \"\"\"Connect to *address* and return the socket object.\n[CI/test-docker]   |     \n[CI/test-docker]   |         Convenience function.  Connect to *address* (a 2-tuple ``(host,\n[CI/test-docker]   |         port)``) and return the socket object.  Passing the optional\n[CI/test-docker]   |         *timeout* parameter will set the timeout on the socket instance\n[CI/test-docker]   |         before attempting to connect.  If no *timeout* is supplied, the\n[CI/test-docker]   |         global default timeout setting returned by :func:`getdefaulttimeout`\n[CI/test-docker]   |         is used.  If *source_address* is set it must be a tuple of (host, port)\n[CI/test-docker]   |         for the socket to bind as a source address before making the connection.\n[CI/test-docker]   |         A host of '' or port 0 tells the OS to use the default.\n[CI/test-docker]   |         \"\"\"\n[CI/test-docker]   |     \n[CI/test-docker]   |         host, port = address\n[CI/test-docker]   |         err = None\n[CI/test-docker]   |         for res in getaddrinfo(host, port, 0, SOCK_STREAM):\n[CI/test-docker]   |             af, socktype, proto, canonname, sa = res\n[CI/test-docker]   |             sock = None\n[CI/test-docker]   |             try:\n[CI/test-docker]   |                 sock = socket(af, socktype, proto)\n[CI/test-docker]   |                 if timeout is not _GLOBAL_DEFAULT_TIMEOUT:\n[CI/test-docker]   |                     sock.settimeout(timeout)\n[CI/test-docker]   |                 if source_address:\n[CI/test-docker]   |                     sock.bind(source_address)\n[CI/test-docker]   | >               sock.connect(sa)\n[CI/test-docker]   | E               OSError: [Errno 99] Cannot assign requested address\n[CI/test-docker]   | \n[CI/test-docker]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/socket.py:831: OSError\n[CI/test-docker]   | \n[CI/test-docker]   | The above exception was the direct cause of the following exception:\n[CI/test-docker]   | \n[CI/test-docker]   |     @contextlib.contextmanager\n[CI/test-docker]   |     def map_httpcore_exceptions() -> typing.Iterator[None]:\n[CI/test-docker]   |         try:\n[CI/test-docker]   | >           yield\n[CI/test-docker]   | \n[CI/test-docker]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/httpx/_transports/default.py:60: \n[CI/test-docker]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[CI/test-docker]   | \n[CI/test-docker]   | self = <httpx.HTTPTransport object at 0x7f6ffc214430>\n[CI/test-docker]   | request = <Request('GET', 'http://localhost:54427')>\n[CI/test-docker]   | \n[CI/test-docker]   |     def handle_request(\n[CI/test-docker]   |         self,\n[CI/test-docker]   |         request: Request,\n[CI/test-docker]   |     ) -> Response:\n[CI/test-docker]   |         assert isinstance(request.stream, SyncByteStream)\n[CI/test-docker]   |     \n[CI/test-docker]   |         req = httpcore.Request(\n[CI/test-docker]   |             method=request.method,\n[CI/test-docker]   |             url=httpcore.URL(\n[CI/test-docker]   |                 scheme=request.url.raw_scheme,\n[CI/test-docker]   |                 host=request.url.raw_host,\n[CI/test-docker]   |                 port=request.url.port,\n[CI/test-docker]   |                 target=request.url.raw_path,\n[CI/test-docker]   |             ),\n[CI/test-docker]   |             headers=request.headers.raw,\n[CI/test-docker]   |             content=request.stream,\n[CI/test-docker]   |             extensions=request.extensions,\n[CI/test-docker]   |         )\n[CI/test-docker]   |         with map_httpcore_exceptions():\n[CI/test-docker]   | >           resp = self._pool.handle_request(req)\n[CI/test-docker]   | \n[CI/test-docker]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/httpx/_transports/default.py:218: \n[CI/test-docker]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[CI/test-docker]   | \n[CI/test-docker]   | self = <httpcore.ConnectionPool object at 0x7f6ffc242040>\n[CI/test-docker]   | request = <Request [b'GET']>\n[CI/test-docker]   | \n[CI/test-docker]   |     def handle_request(self, request: Request) -> Response:\n[CI/test-docker]   |         \"\"\"\n[CI/test-docker]   |         Send an HTTP request, and return an HTTP response.\n[CI/test-docker]   |     \n[CI/test-docker]   |         This is the core implementation that is called into by `.request()` or `.stream()`.\n[CI/test-docker]   |         \"\"\"\n[CI/test-docker]   |         scheme = request.url.scheme.decode()\n[CI/test-docker]   |         if scheme == \"\":\n[CI/test-docker]   |             raise UnsupportedProtocol(\n[CI/test-docker]   |                 \"Request URL is missing an 'http://' or 'https://' protocol.\"\n[CI/test-docker]   |             )\n[CI/test-docker]   |         if scheme not in (\"http\", \"https\", \"ws\", \"wss\"):\n[CI/test-docker]   |             raise UnsupportedProtocol(\n[CI/test-docker]   |                 f\"Request URL has an unsupported protocol '{scheme}://'.\"\n[CI/test-docker]   |             )\n[CI/test-docker]   |     \n[CI/test-docker]   |         status = RequestStatus(request)\n[CI/test-docker]   |     \n[CI/test-docker]   |         with self._pool_lock:\n[CI/test-docker]   |             self._requests.append(status)\n[CI/test-docker]   |             self._close_expired_connections()\n[CI/test-docker]   |             self._attempt_to_acquire_connection(status)\n[CI/test-docker]   |     \n[CI/test-docker]   |         while True:\n[CI/test-docker]   |             timeouts = request.extensions.get(\"timeout\", {})\n[CI/test-docker]   |             timeout = timeouts.get(\"pool\", None)\n[CI/test-docker]   |             try:\n[CI/test-docker]   |                 connection = status.wait_for_connection(timeout=timeout)\n[CI/test-docker]   |             except BaseException as exc:\n[CI/test-docker]   |                 # If we timeout here, or if the task is cancelled, then make\n[CI/test-docker]   |                 # sure to remove the request from the queue before bubbling\n[CI/test-docker]   |                 # up the exception.\n[CI/test-docker]   |                 with self._pool_lock:\n[CI/test-docker]   |                     # Ensure only remove when task exists.\n[CI/test-docker]   |                     if status in self._requests:\n[CI/test-docker]   |                         self._requests.remove(status)\n[CI/test-docker]   |                     raise exc\n[CI/test-docker]   |     \n[CI/test-docker]   |             try:\n[CI/test-docker]   |                 response = connection.handle_request(request)\n[CI/test-docker]   |             except ConnectionNotAvailable:\n[CI/test-docker]   |                 # The ConnectionNotAvailable exception is a special case, that\n[CI/test-docker]   |                 # indicates we need to retry the request on a new connection.\n[CI/test-docker]   |                 #\n[CI/test-docker]   |                 # The most common case where this can occur is when multiple\n[CI/test-docker]   |                 # requests are queued waiting for a single connection, which\n[CI/test-docker]   |                 # might end up as an HTTP/2 connection, but which actually ends\n[CI/test-docker]   |                 # up as HTTP/1.1.\n[CI/test-docker]   |                 with self._pool_lock:\n[CI/test-docker]   |                     # Maintain our position in the request queue, but reset the\n[CI/test-docker]   |                     # status so that the request becomes queued again.\n[CI/test-docker]   |                     status.unset_connection()\n[CI/test-docker]   |                     self._attempt_to_acquire_connection(status)\n[CI/test-docker]   |             except BaseException as exc:\n[CI/test-docker]   |                 self.response_closed(status)\n[CI/test-docker]   | >               raise exc\n[CI/test-docker]   | \n[CI/test-docker]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/httpcore/_sync/connection_pool.py:261: \n[CI/test-docker]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[CI/test-docker]   | \n[CI/test-docker]   | self = <httpcore.ConnectionPool object at 0x7f6ffc242040>\n[CI/test-docker]   | request = <Request [b'GET']>\n[CI/test-docker]   | \n[CI/test-docker]   |     def handle_request(self, request: Request) -> Response:\n[CI/test-docker]   |         \"\"\"\n[CI/test-docker]   |         Send an HTTP request, and return an HTTP response.\n[CI/test-docker]   |     \n[CI/test-docker]   |         This is the core implementation that is called into by `.request()` or `.stream()`.\n[CI/test-docker]   |         \"\"\"\n[CI/test-docker]   |         scheme = request.url.scheme.decode()\n[CI/test-docker]   |         if scheme == \"\":\n[CI/test-docker]   |             raise UnsupportedProtocol(\n[CI/test-docker]   |                 \"Request URL is missing an 'http://' or 'https://' protocol.\"\n[CI/test-docker]   |             )\n[CI/test-docker]   |         if scheme not in (\"http\", \"https\", \"ws\", \"wss\"):\n[CI/test-docker]   |             raise UnsupportedProtocol(\n[CI/test-docker]   |                 f\"Request URL has an unsupported protocol '{scheme}://'.\"\n[CI/test-docker]   |             )\n[CI/test-docker]   |     \n[CI/test-docker]   |         status = RequestStatus(request)\n[CI/test-docker]   |     \n[CI/test-docker]   |         with self._pool_lock:\n[CI/test-docker]   |             self._requests.append(status)\n[CI/test-docker]   |             self._close_expired_connections()\n[CI/test-docker]   |             self._attempt_to_acquire_connection(status)\n[CI/test-docker]   |     \n[CI/test-docker]   |         while True:\n[CI/test-docker]   |             timeouts = request.extensions.get(\"timeout\", {})\n[CI/test-docker]   |             timeout = timeouts.get(\"pool\", None)\n[CI/test-docker]   |             try:\n[CI/test-docker]   |                 connection = status.wait_for_connection(timeout=timeout)\n[CI/test-docker]   |             except BaseException as exc:\n[CI/test-docker]   |                 # If we timeout here, or if the task is cancelled, then make\n[CI/test-docker]   |                 # sure to remove the request from the queue before bubbling\n[CI/test-docker]   |                 # up the exception.\n[CI/test-docker]   |                 with self._pool_lock:\n[CI/test-docker]   |                     # Ensure only remove when task exists.\n[CI/test-docker]   |                     if status in self._requests:\n[CI/test-docker]   |                         self._requests.remove(status)\n[CI/test-docker]   |                     raise exc\n[CI/test-docker]   |     \n[CI/test-docker]   |             try:\n[CI/test-docker]   | >               response = connection.handle_request(request)\n[CI/test-docker]   | \n[CI/test-docker]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/httpcore/_sync/connection_pool.py:245: \n[CI/test-docker]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[CI/test-docker]   | \n[CI/test-docker]   | self = <HTTPConnection [CONNECTION FAILED]>, request = <Request [b'GET']>\n[CI/test-docker]   | \n[CI/test-docker]   |     def handle_request(self, request: Request) -> Response:\n[CI/test-docker]   |         if not self.can_handle_request(request.url.origin):\n[CI/test-docker]   |             raise RuntimeError(\n[CI/test-docker]   |                 f\"Attempted to send request to {request.url.origin} on connection to {self._origin}\"\n[CI/test-docker]   |             )\n[CI/test-docker]   |     \n[CI/test-docker]   |         with self._request_lock:\n[CI/test-docker]   |             if self._connection is None:\n[CI/test-docker]   |                 try:\n[CI/test-docker]   |                     stream = self._connect(request)\n[CI/test-docker]   |     \n[CI/test-docker]   |                     ssl_object = stream.get_extra_info(\"ssl_object\")\n[CI/test-docker]   |                     http2_negotiated = (\n[CI/test-docker]   |                         ssl_object is not None\n[CI/test-docker]   |                         and ssl_object.selected_alpn_protocol() == \"h2\"\n[CI/test-docker]   |                     )\n[CI/test-docker]   |                     if http2_negotiated or (self._http2 and not self._http1):\n[CI/test-docker]   |                         from .http2 import HTTP2Connection\n[CI/test-docker]   |     \n[CI/test-docker]   |                         self._connection = HTTP2Connection(\n[CI/test-docker]   |                             origin=self._origin,\n[CI/test-docker]   |                             stream=stream,\n[CI/test-docker]   |                             keepalive_expiry=self._keepalive_expiry,\n[CI/test-docker]   |                         )\n[CI/test-docker]   |                     else:\n[CI/test-docker]   |                         self._connection = HTTP11Connection(\n[CI/test-docker]   |                             origin=self._origin,\n[CI/test-docker]   |                             stream=stream,\n[CI/test-docker]   |                             keepalive_expiry=self._keepalive_expiry,\n[CI/test-docker]   |                         )\n[CI/test-docker]   |                 except Exception as exc:\n[CI/test-docker]   |                     self._connect_failed = True\n[CI/test-docker]   | >                   raise exc\n[CI/test-docker]   | \n[CI/test-docker]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/httpcore/_sync/connection.py:92: \n[CI/test-docker]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[CI/test-docker]   | \n[CI/test-docker]   | self = <HTTPConnection [CONNECTION FAILED]>, request = <Request [b'GET']>\n[CI/test-docker]   | \n[CI/test-docker]   |     def handle_request(self, request: Request) -> Response:\n[CI/test-docker]   |         if not self.can_handle_request(request.url.origin):\n[CI/test-docker]   |             raise RuntimeError(\n[CI/test-docker]   |                 f\"Attempted to send request to {request.url.origin} on connection to {self._origin}\"\n[CI/test-docker]   |             )\n[CI/test-docker]   |     \n[CI/test-docker]   |         with self._request_lock:\n[CI/test-docker]   |             if self._connection is None:\n[CI/test-docker]   |                 try:\n[CI/test-docker]   | >                   stream = self._connect(request)\n[CI/test-docker]   | \n[CI/test-docker]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/httpcore/_sync/connection.py:69: \n[CI/test-docker]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[CI/test-docker]   | \n[CI/test-docker]   | self = <HTTPConnection [CONNECTION FAILED]>, request = <Request [b'GET']>\n[CI/test-docker]   | \n[CI/test-docker]   |     def _connect(self, request: Request) -> NetworkStream:\n[CI/test-docker]   |         timeouts = request.extensions.get(\"timeout\", {})\n[CI/test-docker]   |         sni_hostname = request.extensions.get(\"sni_hostname\", None)\n[CI/test-docker]   |         timeout = timeouts.get(\"connect\", None)\n[CI/test-docker]   |     \n[CI/test-docker]   |         retries_left = self._retries\n[CI/test-docker]   |         delays = exponential_backoff(factor=RETRIES_BACKOFF_FACTOR)\n[CI/test-docker]   |     \n[CI/test-docker]   |         while True:\n[CI/test-docker]   |             try:\n[CI/test-docker]   |                 if self._uds is None:\n[CI/test-docker]   |                     kwargs = {\n[CI/test-docker]   |                         \"host\": self._origin.host.decode(\"ascii\"),\n[CI/test-docker]   |                         \"port\": self._origin.port,\n[CI/test-docker]   |                         \"local_address\": self._local_address,\n[CI/test-docker]   |                         \"timeout\": timeout,\n[CI/test-docker]   |                         \"socket_options\": self._socket_options,\n[CI/test-docker]   |                     }\n[CI/test-docker]   |                     with Trace(\"connect_tcp\", logger, request, kwargs) as trace:\n[CI/test-docker]   | >                       stream = self._network_backend.connect_tcp(**kwargs)\n[CI/test-docker]   | \n[CI/test-docker]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/httpcore/_sync/connection.py:117: \n[CI/test-docker]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[CI/test-docker]   | \n[CI/test-docker]   | self = <httpcore.backends.sync.SyncBackend object at 0x7f6ffc242670>\n[CI/test-docker]   | host = 'localhost', port = 54427, timeout = 5.0, local_address = None\n[CI/test-docker]   | socket_options = []\n[CI/test-docker]   | \n[CI/test-docker]   |     def connect_tcp(\n[CI/test-docker]   |         self,\n[CI/test-docker]   |         host: str,\n[CI/test-docker]   |         port: int,\n[CI/test-docker]   |         timeout: typing.Optional[float] = None,\n[CI/test-docker]   |         local_address: typing.Optional[str] = None,\n[CI/test-docker]   |         socket_options: typing.Optional[typing.Iterable[SOCKET_OPTION]] = None,\n[CI/test-docker]   |     ) -> NetworkStream:\n[CI/test-docker]   |         # Note that we automatically include `TCP_NODELAY`\n[CI/test-docker]   |         # in addition to any other custom socket options.\n[CI/test-docker]   |         if socket_options is None:\n[CI/test-docker]   |             socket_options = []  # pragma: no cover\n[CI/test-docker]   |         address = (host, port)\n[CI/test-docker]   |         source_address = None if local_address is None else (local_address, 0)\n[CI/test-docker]   |         exc_map: ExceptionMapping = {\n[CI/test-docker]   |             socket.timeout: ConnectTimeout,\n[CI/test-docker]   |             OSError: ConnectError,\n[CI/test-docker]   |         }\n[CI/test-docker]   |     \n[CI/test-docker]   |         with map_exceptions(exc_map):\n[CI/test-docker]   |             sock = socket.create_connection(\n[CI/test-docker]   |                 address,\n[CI/test-docker]   |                 timeout,\n[CI/test-docker]   |                 source_address=source_address,\n[CI/test-docker]   |             )\n[CI/test-docker]   |             for option in socket_options:\n[CI/test-docker]   |                 sock.setsockopt(*option)  # pragma: no cover\n[CI/test-docker]   | >           sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n[CI/test-docker]   | \n[CI/test-docker]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/httpcore/backends/sync.py:107: \n[CI/test-docker]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[CI/test-docker]   | \n[CI/test-docker]   | self = <contextlib._GeneratorContextManager object at 0x7f6ffc269940>\n[CI/test-docker]   | type = <class 'OSError'>, value = OSError(99, 'Cannot assign requested address')\n[CI/test-docker]   | traceback = <traceback object at 0x7f6ffc2433c0>\n[CI/test-docker]   | \n[CI/test-docker]   |     def __exit__(self, type, value, traceback):\n[CI/test-docker]   |         if type is None:\n[CI/test-docker]   |             try:\n[CI/test-docker]   |                 next(self.gen)\n[CI/test-docker]   |             except StopIteration:\n[CI/test-docker]   |                 return False\n[CI/test-docker]   |             else:\n[CI/test-docker]   |                 raise RuntimeError(\"generator didn't stop\")\n[CI/test-docker]   |         else:\n[CI/test-docker]   |             if value is None:\n[CI/test-docker]   |                 # Need to force instantiation so we can reliably\n[CI/test-docker]   |                 # tell if we get the same exception back\n[CI/test-docker]   |                 value = type()\n[CI/test-docker]   |             try:\n[CI/test-docker]   | >               self.gen.throw(type, value, traceback)\n[CI/test-docker]   | \n[CI/test-docker]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/contextlib.py:135: \n[CI/test-docker]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[CI/test-docker]   | \n[CI/test-docker]   | map = {<class 'socket.timeout'>: <class 'httpcore.ConnectTimeout'>, <class 'OSError'>: <class 'httpcore.ConnectError'>}\n[CI/test-docker]   | \n[CI/test-docker]   |     @contextlib.contextmanager\n[CI/test-docker]   |     def map_exceptions(map: ExceptionMapping) -> Iterator[None]:\n[CI/test-docker]   |         try:\n[CI/test-docker]   |             yield\n[CI/test-docker]   |         except Exception as exc:  # noqa: PIE786\n[CI/test-docker]   |             for from_exc, to_exc in map.items():\n[CI/test-docker]   |                 if isinstance(exc, from_exc):\n[CI/test-docker]   | >                   raise to_exc(exc) from exc\n[CI/test-docker]   | E                   httpcore.ConnectError: [Errno 99] Cannot assign requested address\n[CI/test-docker]   | \n[CI/test-docker]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/httpcore/_exceptions.py:14: ConnectError\n[CI/test-docker]   | \n[CI/test-docker]   | The above exception was the direct cause of the following exception:\n[CI/test-docker]   | \n[CI/test-docker]   | self = <test_docker.TestAuthed object at 0x7f6ffc2e28e0>\n[CI/test-docker]   | \n[CI/test-docker]   |     def test_welcome(self) -> None:\n[CI/test-docker]   |         \"\"\"View the welcome page.\"\"\"\n[CI/test-docker]   | >       resp = httpx.get(f\"http://localhost:{self.HOST_PORT}\")\n[CI/test-docker]   | \n[CI/test-docker]   | docker/test_docker.py:593: \n[CI/test-docker]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[CI/test-docker]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/httpx/_api.py:189: in get\n[CI/test-docker]   |     return request(\n[CI/test-docker]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/httpx/_api.py:100: in request\n[CI/test-docker]   |     return client.request(\n[CI/test-docker]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/httpx/_client.py:814: in request\n[CI/test-docker]   |     return self.send(request, auth=auth, follow_redirects=follow_redirects)\n[CI/test-docker]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/httpx/_client.py:901: in send\n[CI/test-docker]   |     response = self._send_handling_auth(\n[CI/test-docker]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/httpx/_client.py:929: in _send_handling_auth\n[CI/test-docker]   |     response = self._send_handling_redirects(\n[CI/test-docker]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/httpx/_client.py:966: in _send_handling_redirects\n[CI/test-docker]   |     response = self._send_single_request(request)\n[CI/test-docker]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/httpx/_client.py:1002: in _send_single_request\n[CI/test-docker]   |     response = transport.handle_request(request)\n[CI/test-docker]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/httpx/_transports/default.py:218: in handle_request\n[CI/test-docker]   |     resp = self._pool.handle_request(req)\n[CI/test-docker]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/contextlib.py:135: in __exit__\n[CI/test-docker]   |     self.gen.throw(type, value, traceback)\n[CI/test-docker]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[CI/test-docker]   | \n[CI/test-docker]   |     @contextlib.contextmanager\n[CI/test-docker]   |     def map_httpcore_exceptions() -> typing.Iterator[None]:\n[CI/test-docker]   |         try:\n[CI/test-docker]   |             yield\n[CI/test-docker]   |         except Exception as exc:  # noqa: PIE-786\n[CI/test-docker]   |             mapped_exc = None\n[CI/test-docker]   |     \n[CI/test-docker]   |             for from_exc, to_exc in HTTPCORE_EXC_MAP.items():\n[CI/test-docker]   |                 if not isinstance(exc, from_exc):\n[CI/test-docker]   |                     continue\n[CI/test-docker]   |                 # We want to map to the most specific exception we can find.\n[CI/test-docker]   |                 # Eg if `exc` is an `httpcore.ReadTimeout`, we want to map to\n[CI/test-docker]   |                 # `httpx.ReadTimeout`, not just `httpx.TimeoutException`.\n[CI/test-docker]   |                 if mapped_exc is None or issubclass(to_exc, mapped_exc):\n[CI/test-docker]   |                     mapped_exc = to_exc\n[CI/test-docker]   |     \n[CI/test-docker]   |             if mapped_exc is None:  # pragma: no cover\n[CI/test-docker]   |                 raise\n[CI/test-docker]   |     \n[CI/test-docker]   |             message = str(exc)\n[CI/test-docker]   | >           raise mapped_exc(message) from exc\n[CI/test-docker]   | E           httpx.ConnectError: [Errno 99] Cannot assign requested address\n[CI/test-docker]   | \n[CI/test-docker]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/httpx/_transports/default.py:77: ConnectError\n[CI/test-docker]   | =========================== short test summary info ============================\n[CI/test-docker]   | FAILED docker/test_docker.py::TestAuthed::test_welcome - httpx.ConnectError: [Errno 99] Cannot assign requested address\n[CI/test-docker]   | ERROR docker/test_docker.py::TestCommands::test_help - RuntimeError: RunReturn(returncode=1, out='', err='')\n[CI/test-docker]   | ERROR docker/test_docker.py::TestCommands::test_version - RuntimeError: RunReturn(returncode=1, out='', err='')\n[CI/test-docker]   | ERROR docker/test_docker.py::TestPermissions::test_needs_rx_on_data[454] - RuntimeError: RunReturn(returncode=1, out='', err='')\n[CI/test-docker]   | ERROR docker/test_docker.py::TestPermissions::test_needs_rx_on_data[449] - RuntimeError: RunReturn(returncode=1, out='', err='')\n[CI/test-docker]   | ERROR docker/test_docker.py::TestPermissions::test_needs_rx_on_data[452] - RuntimeError: RunReturn(returncode=1, out='', err='')\n[CI/test-docker]   | ERROR docker/test_docker.py::TestPermissions::test_needs_rwx_on_packages[extra_args0] - RuntimeError: RunReturn(returncode=1, out='', err='')\n[CI/test-docker]   | ERROR docker/test_docker.py::TestPermissions::test_needs_rwx_on_packages[extra_args1] - RuntimeError: RunReturn(returncode=1, out='', err='')\n[CI/test-docker]   | ERROR docker/test_docker.py::TestPermissions::test_runs_as_pypiserver_user - RuntimeError: RunReturn(returncode=1, out='', err='')\n[CI/test-docker]   | ERROR docker/test_docker.py::TestBasics::test_download[container0] - RuntimeError: RunReturn(returncode=1, out='', err='')\n[CI/test-docker]   | ERROR docker/test_docker.py::TestBasics::test_install[container0] - RuntimeError: RunReturn(returncode=1, out='', err='')\n[CI/test-docker]   | ERROR docker/test_docker.py::TestBasics::test_expected_server[container0] - RuntimeError: RunReturn(returncode=1, out='', err='')\n[CI/test-docker]   | ERROR docker/test_docker.py::TestBasics::test_welcome[container0] - RuntimeError: RunReturn(returncode=1, out='', err='')\n[CI/test-docker]   | ERROR docker/test_docker.py::TestBasics::test_download[container1] - RuntimeError: RunReturn(returncode=1, out='', err='')\n[CI/test-docker]   | ERROR docker/test_docker.py::TestBasics::test_install[container1] - RuntimeError: RunReturn(returncode=1, out='', err='')\n[CI/test-docker]   | ERROR docker/test_docker.py::TestBasics::test_expected_server[container1] - RuntimeError: RunReturn(returncode=1, out='', err='')\n[CI/test-docker]   | ERROR docker/test_docker.py::TestBasics::test_welcome[container1] - RuntimeError: RunReturn(returncode=1, out='', err='')\n[CI/test-docker]   | ERROR docker/test_docker.py::TestBasics::test_download[container2] - RuntimeError: RunReturn(returncode=1, out='', err='')\n[CI/test-docker]   | ERROR docker/test_docker.py::TestBasics::test_install[container2] - RuntimeError: RunReturn(returncode=1, out='', err='')\n[CI/test-docker]   | ERROR docker/test_docker.py::TestBasics::test_expected_server[container2] - RuntimeError: RunReturn(returncode=1, out='', err='')\n[CI/test-docker]   | ERROR docker/test_docker.py::TestBasics::test_welcome[container2] - RuntimeError: RunReturn(returncode=1, out='', err='')\n[CI/test-docker]   | ERROR docker/test_docker.py::TestBasics::test_download[container3] - RuntimeError: RunReturn(returncode=1, out='', err='')\n[CI/test-docker]   | ERROR docker/test_docker.py::TestBasics::test_install[container3] - RuntimeError: RunReturn(returncode=1, out='', err='')\n[CI/test-docker]   | ERROR docker/test_docker.py::TestBasics::test_expected_server[container3] - RuntimeError: RunReturn(returncode=1, out='', err='')\n[CI/test-docker]   | ERROR docker/test_docker.py::TestBasics::test_welcome[container3] - RuntimeError: RunReturn(returncode=1, out='', err='')\n[CI/test-docker]   | ERROR docker/test_docker.py::TestBasics::test_download[container4] - RuntimeError: RunReturn(returncode=1, out='', err='')\n[CI/test-docker]   | ERROR docker/test_docker.py::TestBasics::test_install[container4] - RuntimeError: RunReturn(returncode=1, out='', err='')\n[CI/test-docker]   | ERROR docker/test_docker.py::TestBasics::test_expected_server[container4] - RuntimeError: RunReturn(returncode=1, out='', err='')\n[CI/test-docker]   | ERROR docker/test_docker.py::TestBasics::test_welcome[container4] - RuntimeError: RunReturn(returncode=1, out='', err='')\n[CI/test-docker]   | ERROR docker/test_docker.py::TestBasics::test_download[container5] - RuntimeError: RunReturn(returncode=1, out='', err='')\n[CI/test-docker]   | ERROR docker/test_docker.py::TestBasics::test_install[container5] - RuntimeError: RunReturn(returncode=1, out='', err='')\n[CI/test-docker]   | ERROR docker/test_docker.py::TestBasics::test_expected_server[container5] - RuntimeError: RunReturn(returncode=1, out='', err='')\n[CI/test-docker]   | ERROR docker/test_docker.py::TestBasics::test_welcome[container5] - RuntimeError: RunReturn(returncode=1, out='', err='')\n[CI/test-docker]   | ERROR docker/test_docker.py::TestAuthed::test_upload_failed_auth - RuntimeError: RunReturn(returncode=1, out='', err='')\n[CI/test-docker]   | ERROR docker/test_docker.py::TestAuthed::test_download - RuntimeError: RunReturn(returncode=1, out='', err='')\n[CI/test-docker]   | ERROR docker/test_docker.py::TestAuthed::test_download_failed_auth - RuntimeError: RunReturn(returncode=1, out='', err='')\n[CI/test-docker]   | ERROR docker/test_docker.py::TestAuthed::test_install - RuntimeError: RunReturn(returncode=1, out='', err='')\n[CI/test-docker]   | ERROR docker/test_docker.py::TestAuthed::test_install_failed_auth - RuntimeError: RunReturn(returncode=1, out='', err='')\n[CI/test-docker]   | ========================= 1 failed, 37 errors in 4.16s =========================\n[CI/test-docker]   \u274c  Failure - Main Run tests\n[CI/test-python]   | ........................................................................ [ 25%]\n[CI/test-docker] exitcode '1': failure\n[CI/test-python]   | ....................................                                     [ 33%]\n[CI/test-python]   | tests/test_backend.py ......                                             [ 34%]\n[CI/test-python]   | tests/test_config.py ................................................... [ 45%]\n[CI/test-python]   | ........................................................................ [ 59%]\n[CI/test-python]   | .                                                                        [ 60%]\n[CI/test-python]   | tests/test_core.py ........                                              [ 61%]\n[CI/test-python]   | tests/test_docs.py .                                                     [ 61%]\n[CI/test-python]   | tests/test_init.py ................                                      [ 65%]\n[CI/test-python]   | tests/test_main.py ..............................                        [ 71%]\n[CI/test-python]   | tests/test_manage.py ..............................                      [ 77%]\n[CI/test-python]   | tests/test_pkg_helpers.py .............................................. [ 87%]\n[CI/test-python]   | ...........................................                              [ 95%]\n[CI/test-docker] \ud83c\udfc1  Job failed\n[CI/check      ]   | Success: no issues found in 3 source files\n[CI/check      ]   \u2705  Success - Main Check types\n[CI/check      ] \u2b50 Run Main Check formatting\n[CI/check      ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/4] user= workdir=\n[CI/check      ]   | All done! \u2728 \ud83c\udf70 \u2728\n[CI/check      ]   | 30 files would be left unchanged.\n[CI/check      ]   \u2705  Success - Main Check formatting\n[CI/check      ] \u2b50 Run Main Validate README\n[CI/check      ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/5] user= workdir=\n[CI/check      ]   | +++ Checking README for PyPy....\n[CI/check      ]   | OK\n[CI/check      ]   \u2705  Success - Main Validate README\n[CI/check      ] \u2b50 Run Post Set up Python\n[CI/check      ]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/actions-setup-python@v4/dist/cache-save/index.js] user= workdir=\n[CI/check      ]   \u2705  Success - Post Set up Python\n[CI/check      ] \ud83c\udfc1  Job succeeded\n[CI/test-python]   | tests/test_server.py ....................                                [100%]\n[CI/test-python]   | \n[CI/test-python]   | =============================== warnings summary ===============================\n[CI/test-python]   | .tox/py/lib/python3.7/site-packages/_distutils_hack/__init__.py:30\n[CI/test-python]   |   /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/pypiserver-pypiserver/.tox/py/lib/python3.7/site-packages/_distutils_hack/__init__.py:30: UserWarning: Setuptools is replacing distutils.\n[CI/test-python]   |     warnings.warn(\"Setuptools is replacing distutils.\")\n[CI/test-python]   | \n[CI/test-python]   | tests/test_app.py::test_root_count\n[CI/test-python]   | tests/test_app.py::test_nonroot_simple_index\n[CI/test-python]   | tests/test_app.py::test_nonroot_simple_index_with_x_forwarded_host\n[CI/test-python]   | tests/test_app.py::test_nonroot_simple_packages\n[CI/test-python]   | tests/test_app.py::test_nonroot_simple_packages_with_x_forwarded_host\n[CI/test-python]   |   /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/pypiserver-pypiserver/tests/test_app.py:107: DeprecationWarning: Attribute access is deprecated.\n[CI/test-python]   |     backend = app.config.backend\n[CI/test-python]   | \n[CI/test-python]   | tests/test_manage.py: 30 warnings\n[CI/test-python]   |   /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/pypiserver-pypiserver/pypiserver/manage.py:117: DeprecationWarning: distutils Version classes are deprecated. Use packaging.version instead.\n[CI/test-python]   |     legacy_pip = LooseVersion(pip_version) < LooseVersion(\"10.0\")\n[CI/test-python]   | \n[CI/test-python]   | -- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n[CI/test-python]   | \n[CI/test-python]   | ---------- coverage: platform linux, python 3.7.11-final-0 -----------\n[CI/test-python]   | Name                        Stmts   Miss  Cover\n[CI/test-python]   | -----------------------------------------------\n[CI/test-python]   | pypiserver/__init__.py         59      3    95%\n[CI/test-python]   | pypiserver/__main__.py         84     17    80%\n[CI/test-python]   | pypiserver/_app.py            186     21    89%\n[CI/test-python]   | pypiserver/backend.py         179     33    82%\n[CI/test-python]   | pypiserver/cache.py            76     57    25%\n[CI/test-python]   | pypiserver/config.py          293     33    89%\n[CI/test-python]   | pypiserver/core.py             42      2    95%\n[CI/test-python]   | pypiserver/manage.py           99     33    67%\n[CI/test-python]   | pypiserver/pkg_helpers.py      66      0   100%\n[CI/test-python]   | pypiserver/plugin.py            6      6     0%\n[CI/test-python]   | -----------------------------------------------\n[CI/test-python]   | TOTAL                        1090    205    81%\n[CI/test-python]   | \n[CI/test-python]   | ================= 486 passed, 36 warnings in 174.90s (0:02:54) =================\n[CI/test-python]   | ___________________________________ summary ____________________________________\n[CI/test-python]   |   py: commands succeeded\n[CI/test-python]   |   congratulations :)\n[CI/test-python]   \u2705  Success - Main Run tests\n[CI/test-python] \u2b50 Run Post Set up Python 3.7\n[CI/test-python]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/actions-setup-python@v4/dist/cache-save/index.js] user= workdir=\n[CI/test-python]   \u2705  Success - Post Set up Python 3.7\n[CI/test-python] \ud83c\udfc1  Job succeeded\n",
    "actions_stderr": "time=\"2023-05-29T16:17:54+02:00\" level=error msg=\"Error while evaluating matrix: Invalid JSON: invalid character '$' looking for beginning of value\"\ntime=\"2023-05-29T16:17:54+02:00\" level=fatal msg=\"yaml: unmarshal errors:\\n  line 80: cannot unmarshal !!str `${{ fro...` into []interface {}\"\n"
}