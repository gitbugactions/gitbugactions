{
    "repository": "deschler/django-modeltranslation",
    "clone_url": "https://github.com/deschler/django-modeltranslation.git",
    "timestamp": "2023-05-29T14:36:42.736526Z",
    "clone_success": true,
    "number of actions": 2,
    "number_of_test_actions": 1,
    "actions_successful": false,
    "actions_stdout": "[CI/Check ] \ud83d\ude80  Start image=crawlergpt:latest\n[CI/Test-2] \ud83d\ude80  Start image=crawlergpt:latest\n[CI/Test-1] \ud83d\ude80  Start image=crawlergpt:latest\n[CI/Test-1]   \ud83d\udc33  docker pull image=crawlergpt:latest platform= username= forcePull=false\n[CI/Test-2]   \ud83d\udc33  docker pull image=crawlergpt:latest platform= username= forcePull=false\n[CI/Check ]   \ud83d\udc33  docker pull image=crawlergpt:latest platform= username= forcePull=false\n[CI/Check ]   \ud83d\udc33  docker create image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[CI/Test-1]   \ud83d\udc33  docker create image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[CI/Test-2]   \ud83d\udc33  docker create image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[CI/Check ]   \ud83d\udc33  docker run image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[CI/Test-1]   \ud83d\udc33  docker run image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[CI/Test-2]   \ud83d\udc33  docker run image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[CI/Check ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/deschler-django-modeltranslation] user=0 workdir=\n[CI/Test-2]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/deschler-django-modeltranslation] user=0 workdir=\n[CI/Test-1]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/deschler-django-modeltranslation] user=0 workdir=\n[CI/Check ]   \u2601  git clone 'https://github.com/actions/setup-python' # ref=v3\n[CI/Check ] \ud83e\uddea  Matrix: map[python:3.10]\n[CI/Check ] \u2b50 Run Main actions/checkout@v3\n[CI/Check ]   \u2705  Success - Main actions/checkout@v3\n[CI/Check ] \u2b50 Run Main Set up Python 3.10\n[CI/Check ]   \ud83d\udc33  docker cp src=/home/andre-silva/.cache/act/actions-setup-python@v3/ dst=/var/run/act/actions/actions-setup-python@v3/\n[CI/Check ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /var/run/act/actions/actions-setup-python@v3/] user=0 workdir=\n[CI/Test-2]   \u2601  git clone 'https://github.com/actions/setup-python' # ref=v3\n[CI/Test-1]   \u2601  git clone 'https://github.com/actions/setup-python' # ref=v3\n[CI/Test-2] \ud83e\uddea  Matrix: map[database:postgres django:3.2 python:3.7]\n[CI/Test-2] \u2b50 Run Main actions/checkout@v3\n[CI/Test-2]   \u2705  Success - Main actions/checkout@v3\n[CI/Test-1] \ud83e\uddea  Matrix: map[database:sqlite django:3.2 python:3.8]\n[CI/Test-1] \u2b50 Run Main actions/checkout@v3\n[CI/Test-1]   \u2705  Success - Main actions/checkout@v3\n[CI/Test-2] \u2b50 Run Main Set up Python 3.7\n[CI/Test-2]   \ud83d\udc33  docker cp src=/home/andre-silva/.cache/act/actions-setup-python@v3/ dst=/var/run/act/actions/actions-setup-python@v3/\n[CI/Test-1] \u2b50 Run Main Set up Python 3.8\n[CI/Test-1]   \ud83d\udc33  docker cp src=/home/andre-silva/.cache/act/actions-setup-python@v3/ dst=/var/run/act/actions/actions-setup-python@v3/\n[CI/Test-2]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /var/run/act/actions/actions-setup-python@v3/] user=0 workdir=\n[CI/Test-1]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /var/run/act/actions/actions-setup-python@v3/] user=0 workdir=\n[CI/Check ]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/actions-setup-python@v3/dist/setup/index.js] user= workdir=\n[CI/Test-1]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/actions-setup-python@v3/dist/setup/index.js] user= workdir=\n[CI/Test-2]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/actions-setup-python@v3/dist/setup/index.js] user= workdir=\n[CI/Test-2]   \ud83d\udcac  ::debug::Semantic version spec of 3.7 is 3.7\n[CI/Test-2]   \ud83d\udcac  ::debug::isExplicit: \n[CI/Test-2]   \ud83d\udcac  ::debug::explicit? false\n[CI/Test-2]   \ud83d\udcac  ::debug::isExplicit: 2.7.18\n[CI/Test-2]   \ud83d\udcac  ::debug::explicit? true\n[CI/Test-2]   \ud83d\udcac  ::debug::isExplicit: 3.5.10\n[CI/Test-2]   \ud83d\udcac  ::debug::explicit? true\n[CI/Test-2]   \ud83d\udcac  ::debug::isExplicit: 3.6.14\n[CI/Test-2]   \ud83d\udcac  ::debug::explicit? true\n[CI/Test-2]   \ud83d\udcac  ::debug::isExplicit: 3.7.11\n[CI/Test-2]   \ud83d\udcac  ::debug::explicit? true\n[CI/Test-2]   \ud83d\udcac  ::debug::isExplicit: 3.8.11\n[CI/Test-2]   \ud83d\udcac  ::debug::explicit? true\n[CI/Test-2]   \ud83d\udcac  ::debug::isExplicit: 3.9.6\n[CI/Test-2]   \ud83d\udcac  ::debug::explicit? true\n[CI/Test-2]   \ud83d\udcac  ::debug::evaluating 6 versions\n[CI/Test-2]   \ud83d\udcac  ::debug::matched: 3.7.11\n[CI/Test-2]   \ud83d\udcac  ::debug::checking cache: /opt/hostedtoolcache/Python/3.7.11/x64\n[CI/Test-2]   \ud83d\udcac  ::debug::Found tool in cache Python 3.7.11 x64\n[CI/Test-2]   | Successfully setup CPython (3.7.11)\n[CI/Test-2]   \u2753 add-matcher /run/act/actions/actions-setup-python@v3/.github/python.json\n[CI/Test-2]   \u2705  Success - Main Set up Python 3.7\n[CI/Check ]   \ud83d\udcac  ::debug::Semantic version spec of 3.10 is 3.10\n[CI/Check ]   \ud83d\udcac  ::debug::isExplicit: \n[CI/Check ]   \ud83d\udcac  ::debug::explicit? false\n[CI/Check ]   \ud83d\udcac  ::debug::isExplicit: 2.7.18\n[CI/Check ]   \ud83d\udcac  ::debug::explicit? true\n[CI/Check ]   \ud83d\udcac  ::debug::isExplicit: 3.5.10\n[CI/Check ]   \ud83d\udcac  ::debug::explicit? true\n[CI/Check ]   \ud83d\udcac  ::debug::isExplicit: 3.6.14\n[CI/Check ]   \ud83d\udcac  ::debug::explicit? true\n[CI/Check ]   \ud83d\udcac  ::debug::isExplicit: 3.7.11\n[CI/Check ]   \ud83d\udcac  ::debug::explicit? true\n[CI/Check ]   \ud83d\udcac  ::debug::isExplicit: 3.8.11\n[CI/Check ]   \ud83d\udcac  ::debug::explicit? true\n[CI/Check ]   \ud83d\udcac  ::debug::isExplicit: 3.9.6\n[CI/Check ]   \ud83d\udcac  ::debug::explicit? true\n[CI/Check ]   \ud83d\udcac  ::debug::evaluating 6 versions\n[CI/Check ]   \ud83d\udcac  ::debug::match not found\n[CI/Check ]   | Version 3.10 was not found in the local cache\n[CI/Test-1]   \ud83d\udcac  ::debug::Semantic version spec of 3.8 is 3.8\n[CI/Test-1]   \ud83d\udcac  ::debug::isExplicit: \n[CI/Test-1]   \ud83d\udcac  ::debug::explicit? false\n[CI/Test-1]   \ud83d\udcac  ::debug::isExplicit: 2.7.18\n[CI/Test-1]   \ud83d\udcac  ::debug::explicit? true\n[CI/Test-1]   \ud83d\udcac  ::debug::isExplicit: 3.5.10\n[CI/Test-1]   \ud83d\udcac  ::debug::explicit? true\n[CI/Test-1]   \ud83d\udcac  ::debug::isExplicit: 3.6.14\n[CI/Test-1]   \ud83d\udcac  ::debug::explicit? true\n[CI/Test-1]   \ud83d\udcac  ::debug::isExplicit: 3.7.11\n[CI/Test-1]   \ud83d\udcac  ::debug::explicit? true\n[CI/Test-1]   \ud83d\udcac  ::debug::isExplicit: 3.8.11\n[CI/Test-1]   \ud83d\udcac  ::debug::explicit? true\n[CI/Test-1]   \ud83d\udcac  ::debug::isExplicit: 3.9.6\n[CI/Test-1]   \ud83d\udcac  ::debug::explicit? true\n[CI/Test-1]   \ud83d\udcac  ::debug::evaluating 6 versions\n[CI/Test-1]   \ud83d\udcac  ::debug::matched: 3.8.11\n[CI/Test-1]   \ud83d\udcac  ::debug::checking cache: /opt/hostedtoolcache/Python/3.8.11/x64\n[CI/Test-1]   \ud83d\udcac  ::debug::Found tool in cache Python 3.8.11 x64\n[CI/Test-1]   | Successfully setup CPython (3.8.11)\n[CI/Test-1]   \u2753 add-matcher /run/act/actions/actions-setup-python@v3/.github/python.json\n[CI/Test-1]   \u2705  Success - Main Set up Python 3.8\n[CI/Check ]   \u2757  ::error::API rate limit exceeded for 130.242.72.40. (But here's the good news: Authenticated requests get a higher rate limit. Check out the documentation for more details.)\n[CI/Check ]   \u274c  Failure - Main Set up Python 3.10\n[CI/Test-2]   \u2699  ::set-env:: pythonLocation=/opt/hostedtoolcache/Python/3.7.11/x64\n[CI/Test-2]   \u2699  ::set-env:: LD_LIBRARY_PATH=/opt/hostedtoolcache/Python/3.7.11/x64/lib\n[CI/Test-1]   \u2699  ::set-env:: LD_LIBRARY_PATH=/opt/hostedtoolcache/Python/3.8.11/x64/lib\n[CI/Test-1]   \u2699  ::set-env:: pythonLocation=/opt/hostedtoolcache/Python/3.8.11/x64\n[CI/Test-1]   \u2699  ::set-output:: python-version=3.8.11\n[CI/Test-2]   \u2699  ::set-output:: python-version=3.7.11\n[CI/Test-1]   \u2699  ::add-path:: /opt/hostedtoolcache/Python/3.8.11/x64\n[CI/Test-1]   \u2699  ::add-path:: /opt/hostedtoolcache/Python/3.8.11/x64/bin\n[CI/Check ] exitcode '1': failure\n[CI/Test-2]   \u2699  ::add-path:: /opt/hostedtoolcache/Python/3.7.11/x64\n[CI/Test-2]   \u2699  ::add-path:: /opt/hostedtoolcache/Python/3.7.11/x64/bin\n[CI/Test-1] \u2b50 Run Main Set up env\n[CI/Test-2] \u2b50 Run Main Set up env\n[CI/Test-2]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/2] user= workdir=\n[CI/Test-1]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/2] user= workdir=\n[CI/Test-1]   | Collecting typing-extensions\n[CI/Test-1]   |   Downloading typing_extensions-4.6.2-py3-none-any.whl (31 kB)\n[CI/Test-2]   | WARNING: You are using pip version 21.2.4; however, version 23.1.2 is available.\n[CI/Test-2]   | You should consider upgrading via the '/opt/hostedtoolcache/Python/3.7.11/x64/bin/python -m pip install --upgrade pip' command.\n[CI/Test-2]   | Collecting typing-extensions\n[CI/Test-1]   | Collecting coverage\n[CI/Test-1]   |   Downloading coverage-7.2.6-cp38-cp38-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl (229 kB)\n[CI/Test-2]   |   Downloading typing_extensions-4.6.2-py3-none-any.whl (31 kB)\n[CI/Test-1]   | Collecting pytest\n[CI/Test-1]   |   Downloading pytest-7.3.1-py3-none-any.whl (320 kB)\n[CI/Test-1]   | Collecting pytest-django\n[CI/Test-1]   |   Downloading pytest_django-4.5.2-py3-none-any.whl (20 kB)\n[CI/Test-1]   | Collecting pytest-cov\n[CI/Test-1]   |   Downloading pytest_cov-4.1.0-py3-none-any.whl (21 kB)\n[CI/Test-1]   | Collecting Django<3.3,>=3.2\n[CI/Test-1]   |   Downloading Django-3.2.19-py3-none-any.whl (7.9 MB)\n[CI/Test-2]   | Collecting coverage\n[CI/Test-2]   |   Downloading coverage-7.2.6-cp37-cp37m-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl (225 kB)\n[CI/Check ] \ud83c\udfc1  Job failed\n[CI/Test-2]   | Collecting pytest\n[CI/Test-2]   |   Downloading pytest-7.3.1-py3-none-any.whl (320 kB)\n[CI/Test-1]   | Collecting pluggy<2.0,>=0.12\n[CI/Test-1]   |   Downloading pluggy-1.0.0-py2.py3-none-any.whl (13 kB)\n[CI/Test-2]   | Collecting pytest-django\n[CI/Test-2]   |   Downloading pytest_django-4.5.2-py3-none-any.whl (20 kB)\n[CI/Test-1]   | Collecting exceptiongroup>=1.0.0rc8\n[CI/Test-1]   |   Downloading exceptiongroup-1.1.1-py3-none-any.whl (14 kB)\n[CI/Test-1]   | Collecting iniconfig\n[CI/Test-1]   |   Downloading iniconfig-2.0.0-py3-none-any.whl (5.9 kB)\n[CI/Test-2]   | Collecting pytest-cov\n[CI/Test-2]   |   Downloading pytest_cov-4.1.0-py3-none-any.whl (21 kB)\n[CI/Test-1]   | Collecting packaging\n[CI/Test-1]   |   Downloading packaging-23.1-py3-none-any.whl (48 kB)\n[CI/Test-1]   | Collecting tomli>=1.0.0\n[CI/Test-1]   |   Downloading tomli-2.0.1-py3-none-any.whl (12 kB)\n[CI/Test-2]   | Collecting Django<3.3,>=3.2\n[CI/Test-2]   |   Downloading Django-3.2.19-py3-none-any.whl (7.9 MB)\n[CI/Test-1]   | Collecting pytz\n[CI/Test-1]   |   Downloading pytz-2023.3-py2.py3-none-any.whl (502 kB)\n[CI/Test-1]   | Collecting asgiref<4,>=3.3.2\n[CI/Test-1]   |   Downloading asgiref-3.7.2-py3-none-any.whl (24 kB)\n[CI/Test-1]   | Collecting sqlparse>=0.2.2\n[CI/Test-1]   |   Downloading sqlparse-0.4.4-py3-none-any.whl (41 kB)\n[CI/Test-2]   | Collecting packaging\n[CI/Test-2]   |   Downloading packaging-23.1-py3-none-any.whl (48 kB)\n[CI/Test-1]   | Installing collected packages: typing-extensions, tomli, pluggy, packaging, iniconfig, exceptiongroup, coverage, sqlparse, pytz, pytest, asgiref, pytest-django, pytest-cov, Django\n[CI/Test-2]   | Collecting importlib-metadata>=0.12\n[CI/Test-2]   |   Downloading importlib_metadata-6.6.0-py3-none-any.whl (22 kB)\n[CI/Test-2]   | Collecting exceptiongroup>=1.0.0rc8\n[CI/Test-2]   |   Downloading exceptiongroup-1.1.1-py3-none-any.whl (14 kB)\n[CI/Test-2]   | Collecting tomli>=1.0.0\n[CI/Test-2]   |   Downloading tomli-2.0.1-py3-none-any.whl (12 kB)\n[CI/Test-2]   | Collecting pluggy<2.0,>=0.12\n[CI/Test-2]   |   Downloading pluggy-1.0.0-py2.py3-none-any.whl (13 kB)\n[CI/Test-2]   | Collecting iniconfig\n[CI/Test-2]   |   Downloading iniconfig-2.0.0-py3-none-any.whl (5.9 kB)\n[CI/Test-2]   | Collecting sqlparse>=0.2.2\n[CI/Test-2]   |   Downloading sqlparse-0.4.4-py3-none-any.whl (41 kB)\n[CI/Test-2]   | Collecting asgiref<4,>=3.3.2\n[CI/Test-2]   |   Downloading asgiref-3.7.2-py3-none-any.whl (24 kB)\n[CI/Test-2]   | Collecting pytz\n[CI/Test-2]   |   Downloading pytz-2023.3-py2.py3-none-any.whl (502 kB)\n[CI/Test-2]   | Collecting zipp>=0.5\n[CI/Test-2]   |   Downloading zipp-3.15.0-py3-none-any.whl (6.8 kB)\n[CI/Test-2]   | Installing collected packages: zipp, typing-extensions, importlib-metadata, tomli, pluggy, packaging, iniconfig, exceptiongroup, coverage, sqlparse, pytz, pytest, asgiref, pytest-django, pytest-cov, Django\n[CI/Test-1]   | Successfully installed Django-3.2.19 asgiref-3.7.2 coverage-7.2.6 exceptiongroup-1.1.1 iniconfig-2.0.0 packaging-23.1 pluggy-1.0.0 pytest-7.3.1 pytest-cov-4.1.0 pytest-django-4.5.2 pytz-2023.3 sqlparse-0.4.4 tomli-2.0.1 typing-extensions-4.6.2\n[CI/Test-1]   | WARNING: You are using pip version 21.2.4; however, version 23.1.2 is available.\n[CI/Test-1]   | You should consider upgrading via the '/opt/hostedtoolcache/Python/3.8.11/x64/bin/python -m pip install --upgrade pip' command.\n[CI/Test-1]   \u2705  Success - Main Set up env\n[CI/Test-1] \u2b50 Run Main Run tests\n[CI/Test-1]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/3] user= workdir=\n[CI/Test-2]   | Successfully installed Django-3.2.19 asgiref-3.7.2 coverage-7.2.6 exceptiongroup-1.1.1 importlib-metadata-6.6.0 iniconfig-2.0.0 packaging-23.1 pluggy-1.0.0 pytest-7.3.1 pytest-cov-4.1.0 pytest-django-4.5.2 pytz-2023.3 sqlparse-0.4.4 tomli-2.0.1 typing-extensions-4.6.2 zipp-3.15.0\n[CI/Test-2]   | WARNING: You are using pip version 21.2.4; however, version 23.1.2 is available.\n[CI/Test-2]   | You should consider upgrading via the '/opt/hostedtoolcache/Python/3.7.11/x64/bin/python -m pip install --upgrade pip' command.\n[CI/Test-2]   \u2705  Success - Main Set up env\n[CI/Test-2] \u2b50 Run Main Run tests\n[CI/Test-2]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/3] user= workdir=\n[CI/Test-1]   | ============================= test session starts ==============================\n[CI/Test-1]   | platform linux -- Python 3.8.11, pytest-7.3.1, pluggy-1.0.0\n[CI/Test-1]   | django: settings: modeltranslation.tests.settings (from ini)\n[CI/Test-1]   | rootdir: /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/deschler-django-modeltranslation\n[CI/Test-1]   | configfile: pytest.ini\n[CI/Test-1]   | plugins: django-4.5.2, cov-4.1.0\n[CI/Test-1]   | collected 128 items\n[CI/Test-1]   | \n[CI/Test-2]   | ============================= test session starts ==============================\n[CI/Test-2]   | platform linux -- Python 3.7.11, pytest-7.3.1, pluggy-1.0.0\n[CI/Test-2]   | django: settings: modeltranslation.tests.settings (from ini)\n[CI/Test-2]   | rootdir: /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/deschler-django-modeltranslation\n[CI/Test-2]   | configfile: pytest.ini\n[CI/Test-2]   | plugins: django-4.5.2, cov-4.1.0\n[CI/Test-2]   | collected 128 items\n[CI/Test-2]   | \n[CI/Test-2]   | modeltranslation/tests/tests.py EEEEE\n[CI/Test-2]   | \n[CI/Test-2]   | ==================================== ERRORS ====================================\n[CI/Test-2]   | _____________ ERROR at setup of TestAutodiscover.test_duplication ______________\n[CI/Test-2]   | \n[CI/Test-2]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f812560b090>\n[CI/Test-2]   | \n[CI/Test-2]   |     @async_unsafe\n[CI/Test-2]   |     def ensure_connection(self):\n[CI/Test-2]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[CI/Test-2]   |         if self.connection is None:\n[CI/Test-2]   |             with self.wrap_database_errors:\n[CI/Test-2]   | >               self.connect()\n[CI/Test-2]   | \n[CI/Test-2]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:219: \n[CI/Test-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[CI/Test-2]   | \n[CI/Test-2]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f812560b090>,)\n[CI/Test-2]   | kwargs = {}\n[CI/Test-2]   | \n[CI/Test-2]   |     @functools.wraps(func)\n[CI/Test-2]   |     def inner(*args, **kwargs):\n[CI/Test-2]   |         if not os.environ.get('DJANGO_ALLOW_ASYNC_UNSAFE'):\n[CI/Test-2]   |             # Detect a running event loop in this thread.\n[CI/Test-2]   |             try:\n[CI/Test-2]   |                 event_loop = get_running_loop()\n[CI/Test-2]   |             except RuntimeError:\n[CI/Test-2]   |                 pass\n[CI/Test-2]   |             else:\n[CI/Test-2]   |                 if PY37 or event_loop.is_running():\n[CI/Test-2]   |                     raise SynchronousOnlyOperation(message)\n[CI/Test-2]   |         # Pass onwards.\n[CI/Test-2]   | >       return func(*args, **kwargs)\n[CI/Test-2]   | \n[CI/Test-2]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: \n[CI/Test-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[CI/Test-2]   | \n[CI/Test-2]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f812560b090>\n[CI/Test-2]   | \n[CI/Test-2]   |     @async_unsafe\n[CI/Test-2]   |     def connect(self):\n[CI/Test-2]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[CI/Test-2]   |         # Check for invalid configurations.\n[CI/Test-2]   |         self.check_settings()\n[CI/Test-2]   |         # In case the previous connection was closed while in an atomic block\n[CI/Test-2]   |         self.in_atomic_block = False\n[CI/Test-2]   |         self.savepoint_ids = []\n[CI/Test-2]   |         self.needs_rollback = False\n[CI/Test-2]   |         # Reset parameters defining when to close the connection\n[CI/Test-2]   |         max_age = self.settings_dict['CONN_MAX_AGE']\n[CI/Test-2]   |         self.close_at = None if max_age is None else time.monotonic() + max_age\n[CI/Test-2]   |         self.closed_in_transaction = False\n[CI/Test-2]   |         self.errors_occurred = False\n[CI/Test-2]   |         # Establish the connection\n[CI/Test-2]   |         conn_params = self.get_connection_params()\n[CI/Test-2]   | >       self.connection = self.get_new_connection(conn_params)\n[CI/Test-2]   | \n[CI/Test-2]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:200: \n[CI/Test-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[CI/Test-2]   | \n[CI/Test-2]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f812560b090>, {'database': 'postgres', 'host': '127.0.0.1', 'password': 'modeltranslation', 'user': 'modeltranslation'})\n[CI/Test-2]   | kwargs = {}\n[CI/Test-2]   | \n[CI/Test-2]   |     @functools.wraps(func)\n[CI/Test-2]   |     def inner(*args, **kwargs):\n[CI/Test-2]   |         if not os.environ.get('DJANGO_ALLOW_ASYNC_UNSAFE'):\n[CI/Test-2]   |             # Detect a running event loop in this thread.\n[CI/Test-2]   |             try:\n[CI/Test-2]   |                 event_loop = get_running_loop()\n[CI/Test-2]   |             except RuntimeError:\n[CI/Test-2]   |                 pass\n[CI/Test-2]   |             else:\n[CI/Test-2]   |                 if PY37 or event_loop.is_running():\n[CI/Test-2]   |                     raise SynchronousOnlyOperation(message)\n[CI/Test-2]   |         # Pass onwards.\n[CI/Test-2]   | >       return func(*args, **kwargs)\n[CI/Test-2]   | \n[CI/Test-2]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: \n[CI/Test-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[CI/Test-2]   | \n[CI/Test-2]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f812560b090>\n[CI/Test-2]   | conn_params = {'database': 'postgres', 'host': '127.0.0.1', 'password': 'modeltranslation', 'user': 'modeltranslation'}\n[CI/Test-2]   | \n[CI/Test-2]   |     @async_unsafe\n[CI/Test-2]   |     def get_new_connection(self, conn_params):\n[CI/Test-2]   | >       connection = Database.connect(**conn_params)\n[CI/Test-2]   | \n[CI/Test-2]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/postgresql/base.py:187: \n[CI/Test-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[CI/Test-2]   | \n[CI/Test-2]   | dsn = 'user=modeltranslation password=modeltranslation host=127.0.0.1 dbname=postgres'\n[CI/Test-2]   | connection_factory = None, cursor_factory = None\n[CI/Test-2]   | kwargs = {'database': 'postgres', 'host': '127.0.0.1', 'password': 'modeltranslation', 'user': 'modeltranslation'}\n[CI/Test-2]   | kwasync = {}\n[CI/Test-2]   | \n[CI/Test-2]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[CI/Test-2]   |         \"\"\"\n[CI/Test-2]   |         Create a new database connection.\n[CI/Test-2]   |     \n[CI/Test-2]   |         The connection parameters can be specified as a string:\n[CI/Test-2]   |     \n[CI/Test-2]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[CI/Test-2]   |     \n[CI/Test-2]   |         or using a set of keyword arguments:\n[CI/Test-2]   |     \n[CI/Test-2]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[CI/Test-2]   |     \n[CI/Test-2]   |         Or as a mix of both. The basic connection parameters are:\n[CI/Test-2]   |     \n[CI/Test-2]   |         - *dbname*: the database name\n[CI/Test-2]   |         - *database*: the database name (only as keyword argument)\n[CI/Test-2]   |         - *user*: user name used to authenticate\n[CI/Test-2]   |         - *password*: password used to authenticate\n[CI/Test-2]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[CI/Test-2]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[CI/Test-2]   |     \n[CI/Test-2]   |         Using the *connection_factory* parameter a different class or connections\n[CI/Test-2]   |         factory can be specified. It should be a callable object taking a dsn\n[CI/Test-2]   |         argument.\n[CI/Test-2]   |     \n[CI/Test-2]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[CI/Test-2]   |         used by cursor().\n[CI/Test-2]   |     \n[CI/Test-2]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[CI/Test-2]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[CI/Test-2]   |     \n[CI/Test-2]   |         Any other keyword parameter will be passed to the underlying client\n[CI/Test-2]   |         library: the list of supported parameters depends on the library version.\n[CI/Test-2]   |     \n[CI/Test-2]   |         \"\"\"\n[CI/Test-2]   |         kwasync = {}\n[CI/Test-2]   |         if 'async' in kwargs:\n[CI/Test-2]   |             kwasync['async'] = kwargs.pop('async')\n[CI/Test-2]   |         if 'async_' in kwargs:\n[CI/Test-2]   |             kwasync['async_'] = kwargs.pop('async_')\n[CI/Test-2]   |     \n[CI/Test-2]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[CI/Test-2]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[CI/Test-2]   | E       psycopg2.OperationalError: connection to server at \"127.0.0.1\", port 5432 failed: Connection refused\n[CI/Test-2]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[CI/Test-2]   | \n[CI/Test-2]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[CI/Test-2]   | \n[CI/Test-2]   | The above exception was the direct cause of the following exception:\n[CI/Test-2]   | \n[CI/Test-2]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f812890e750>\n[CI/Test-2]   | \n[CI/Test-2]   |     @contextmanager\n[CI/Test-2]   |     def _nodb_cursor(self):\n[CI/Test-2]   |         try:\n[CI/Test-2]   | >           with super()._nodb_cursor() as cursor:\n[CI/Test-2]   | \n[CI/Test-2]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/postgresql/base.py:301: \n[CI/Test-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[CI/Test-2]   | \n[CI/Test-2]   | self = <contextlib._GeneratorContextManager object at 0x7f812560b0d0>\n[CI/Test-2]   | \n[CI/Test-2]   |     def __enter__(self):\n[CI/Test-2]   |         # do not keep args and kwds alive unnecessarily\n[CI/Test-2]   |         # they are only needed for recreation, which is not possible anymore\n[CI/Test-2]   |         del self.args, self.kwds, self.func\n[CI/Test-2]   |         try:\n[CI/Test-2]   | >           return next(self.gen)\n[CI/Test-2]   | \n[CI/Test-2]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/contextlib.py:112: \n[CI/Test-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[CI/Test-2]   | \n[CI/Test-2]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f812890e750>\n[CI/Test-2]   | \n[CI/Test-2]   |     @contextmanager\n[CI/Test-2]   |     def _nodb_cursor(self):\n[CI/Test-2]   |         \"\"\"\n[CI/Test-2]   |         Return a cursor from an alternative connection to be used when there is\n[CI/Test-2]   |         no need to access the main database, specifically for test db\n[CI/Test-2]   |         creation/deletion. This also prevents the production database from\n[CI/Test-2]   |         being exposed to potential child threads while (or after) the test\n[CI/Test-2]   |         database is destroyed. Refs #10868, #17786, #16969.\n[CI/Test-2]   |         \"\"\"\n[CI/Test-2]   |         conn = self.__class__({**self.settings_dict, 'NAME': None}, alias=NO_DB_ALIAS)\n[CI/Test-2]   |         try:\n[CI/Test-2]   | >           with conn.cursor() as cursor:\n[CI/Test-2]   | \n[CI/Test-2]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:620: \n[CI/Test-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[CI/Test-2]   | \n[CI/Test-2]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f812560b090>,)\n[CI/Test-2]   | kwargs = {}\n[CI/Test-2]   | \n[CI/Test-2]   |     @functools.wraps(func)\n[CI/Test-2]   |     def inner(*args, **kwargs):\n[CI/Test-2]   |         if not os.environ.get('DJANGO_ALLOW_ASYNC_UNSAFE'):\n[CI/Test-2]   |             # Detect a running event loop in this thread.\n[CI/Test-2]   |             try:\n[CI/Test-2]   |                 event_loop = get_running_loop()\n[CI/Test-2]   |             except RuntimeError:\n[CI/Test-2]   |                 pass\n[CI/Test-2]   |             else:\n[CI/Test-2]   |                 if PY37 or event_loop.is_running():\n[CI/Test-2]   |                     raise SynchronousOnlyOperation(message)\n[CI/Test-2]   |         # Pass onwards.\n[CI/Test-2]   | >       return func(*args, **kwargs)\n[CI/Test-2]   | \n[CI/Test-2]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: \n[CI/Test-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[CI/Test-2]   | \n[CI/Test-2]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f812560b090>\n[CI/Test-2]   | \n[CI/Test-2]   |     @async_unsafe\n[CI/Test-2]   |     def cursor(self):\n[CI/Test-2]   |         \"\"\"Create a cursor, opening a connection if necessary.\"\"\"\n[CI/Test-2]   | >       return self._cursor()\n[CI/Test-2]   | \n[CI/Test-2]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:259: \n[CI/Test-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[CI/Test-2]   | \n[CI/Test-2]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f812560b090>\n[CI/Test-2]   | name = None\n[CI/Test-2]   | \n[CI/Test-2]   |     def _cursor(self, name=None):\n[CI/Test-2]   | >       self.ensure_connection()\n[CI/Test-2]   | \n[CI/Test-2]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:235: \n[CI/Test-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[CI/Test-2]   | \n[CI/Test-2]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f812560b090>,)\n[CI/Test-2]   | kwargs = {}\n[CI/Test-2]   | \n[CI/Test-2]   |     @functools.wraps(func)\n[CI/Test-2]   |     def inner(*args, **kwargs):\n[CI/Test-2]   |         if not os.environ.get('DJANGO_ALLOW_ASYNC_UNSAFE'):\n[CI/Test-2]   |             # Detect a running event loop in this thread.\n[CI/Test-2]   |             try:\n[CI/Test-2]   |                 event_loop = get_running_loop()\n[CI/Test-2]   |             except RuntimeError:\n[CI/Test-2]   |                 pass\n[CI/Test-2]   |             else:\n[CI/Test-2]   |                 if PY37 or event_loop.is_running():\n[CI/Test-2]   |                     raise SynchronousOnlyOperation(message)\n[CI/Test-2]   |         # Pass onwards.\n[CI/Test-2]   | >       return func(*args, **kwargs)\n[CI/Test-2]   | \n[CI/Test-2]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: \n[CI/Test-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[CI/Test-2]   | \n[CI/Test-2]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f812560b090>\n[CI/Test-2]   | \n[CI/Test-2]   |     @async_unsafe\n[CI/Test-2]   |     def ensure_connection(self):\n[CI/Test-2]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[CI/Test-2]   |         if self.connection is None:\n[CI/Test-2]   |             with self.wrap_database_errors:\n[CI/Test-2]   | >               self.connect()\n[CI/Test-2]   | \n[CI/Test-2]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:219: \n[CI/Test-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[CI/Test-2]   | \n[CI/Test-2]   | self = <django.db.utils.DatabaseErrorWrapper object at 0x7f812560ba90>\n[CI/Test-2]   | exc_type = <class 'psycopg2.OperationalError'>\n[CI/Test-2]   | exc_value = OperationalError('connection to server at \"127.0.0.1\", port 5432 failed: Connection refused\\n\\tIs the server running on that host and accepting TCP/IP connections?\\n')\n[CI/Test-2]   | traceback = <traceback object at 0x7f8126520460>\n[CI/Test-2]   | \n[CI/Test-2]   |     def __exit__(self, exc_type, exc_value, traceback):\n[CI/Test-2]   |         if exc_type is None:\n[CI/Test-2]   |             return\n[CI/Test-2]   |         for dj_exc_type in (\n[CI/Test-2]   |                 DataError,\n[CI/Test-2]   |                 OperationalError,\n[CI/Test-2]   |                 IntegrityError,\n[CI/Test-2]   |                 InternalError,\n[CI/Test-2]   |                 ProgrammingError,\n[CI/Test-2]   |                 NotSupportedError,\n[CI/Test-2]   |                 DatabaseError,\n[CI/Test-2]   |                 InterfaceError,\n[CI/Test-2]   |                 Error,\n[CI/Test-2]   |         ):\n[CI/Test-2]   |             db_exc_type = getattr(self.wrapper.Database, dj_exc_type.__name__)\n[CI/Test-2]   |             if issubclass(exc_type, db_exc_type):\n[CI/Test-2]   |                 dj_exc_value = dj_exc_type(*exc_value.args)\n[CI/Test-2]   |                 # Only set the 'errors_occurred' flag for errors that may make\n[CI/Test-2]   |                 # the connection unusable.\n[CI/Test-2]   |                 if dj_exc_type not in (DataError, IntegrityError):\n[CI/Test-2]   |                     self.wrapper.errors_occurred = True\n[CI/Test-2]   | >               raise dj_exc_value.with_traceback(traceback) from exc_value\n[CI/Test-2]   | \n[CI/Test-2]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/utils.py:90: \n[CI/Test-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[CI/Test-2]   | \n[CI/Test-2]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f812560b090>\n[CI/Test-2]   | \n[CI/Test-2]   |     @async_unsafe\n[CI/Test-2]   |     def ensure_connection(self):\n[CI/Test-2]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[CI/Test-2]   |         if self.connection is None:\n[CI/Test-2]   |             with self.wrap_database_errors:\n[CI/Test-2]   | >               self.connect()\n[CI/Test-2]   | \n[CI/Test-2]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:219: \n[CI/Test-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[CI/Test-2]   | \n[CI/Test-2]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f812560b090>,)\n[CI/Test-2]   | kwargs = {}\n[CI/Test-2]   | \n[CI/Test-2]   |     @functools.wraps(func)\n[CI/Test-2]   |     def inner(*args, **kwargs):\n[CI/Test-2]   |         if not os.environ.get('DJANGO_ALLOW_ASYNC_UNSAFE'):\n[CI/Test-2]   |             # Detect a running event loop in this thread.\n[CI/Test-2]   |             try:\n[CI/Test-2]   |                 event_loop = get_running_loop()\n[CI/Test-2]   |             except RuntimeError:\n[CI/Test-2]   |                 pass\n[CI/Test-2]   |             else:\n[CI/Test-2]   |                 if PY37 or event_loop.is_running():\n[CI/Test-2]   |                     raise SynchronousOnlyOperation(message)\n[CI/Test-2]   |         # Pass onwards.\n[CI/Test-2]   | >       return func(*args, **kwargs)\n[CI/Test-2]   | \n[CI/Test-2]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: \n[CI/Test-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[CI/Test-2]   | \n[CI/Test-2]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f812560b090>\n[CI/Test-2]   | \n[CI/Test-2]   |     @async_unsafe\n[CI/Test-2]   |     def connect(self):\n[CI/Test-2]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[CI/Test-2]   |         # Check for invalid configurations.\n[CI/Test-2]   |         self.check_settings()\n[CI/Test-2]   |         # In case the previous connection was closed while in an atomic block\n[CI/Test-2]   |         self.in_atomic_block = False\n[CI/Test-2]   |         self.savepoint_ids = []\n[CI/Test-2]   |         self.needs_rollback = False\n[CI/Test-2]   |         # Reset parameters defining when to close the connection\n[CI/Test-2]   |         max_age = self.settings_dict['CONN_MAX_AGE']\n[CI/Test-2]   |         self.close_at = None if max_age is None else time.monotonic() + max_age\n[CI/Test-2]   |         self.closed_in_transaction = False\n[CI/Test-2]   |         self.errors_occurred = False\n[CI/Test-2]   |         # Establish the connection\n[CI/Test-2]   |         conn_params = self.get_connection_params()\n[CI/Test-2]   | >       self.connection = self.get_new_connection(conn_params)\n[CI/Test-2]   | \n[CI/Test-2]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:200: \n[CI/Test-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[CI/Test-2]   | \n[CI/Test-2]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f812560b090>, {'database': 'postgres', 'host': '127.0.0.1', 'password': 'modeltranslation', 'user': 'modeltranslation'})\n[CI/Test-2]   | kwargs = {}\n[CI/Test-2]   | \n[CI/Test-2]   |     @functools.wraps(func)\n[CI/Test-2]   |     def inner(*args, **kwargs):\n[CI/Test-2]   |         if not os.environ.get('DJANGO_ALLOW_ASYNC_UNSAFE'):\n[CI/Test-2]   |             # Detect a running event loop in this thread.\n[CI/Test-2]   |             try:\n[CI/Test-2]   |                 event_loop = get_running_loop()\n[CI/Test-2]   |             except RuntimeError:\n[CI/Test-2]   |                 pass\n[CI/Test-2]   |             else:\n[CI/Test-2]   |                 if PY37 or event_loop.is_running():\n[CI/Test-2]   |                     raise SynchronousOnlyOperation(message)\n[CI/Test-2]   |         # Pass onwards.\n[CI/Test-2]   | >       return func(*args, **kwargs)\n[CI/Test-2]   | \n[CI/Test-2]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: \n[CI/Test-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[CI/Test-2]   | \n[CI/Test-2]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f812560b090>\n[CI/Test-2]   | conn_params = {'database': 'postgres', 'host': '127.0.0.1', 'password': 'modeltranslation', 'user': 'modeltranslation'}\n[CI/Test-2]   | \n[CI/Test-2]   |     @async_unsafe\n[CI/Test-2]   |     def get_new_connection(self, conn_params):\n[CI/Test-2]   | >       connection = Database.connect(**conn_params)\n[CI/Test-2]   | \n[CI/Test-2]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/postgresql/base.py:187: \n[CI/Test-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[CI/Test-2]   | \n[CI/Test-2]   | dsn = 'user=modeltranslation password=modeltranslation host=127.0.0.1 dbname=postgres'\n[CI/Test-2]   | connection_factory = None, cursor_factory = None\n[CI/Test-2]   | kwargs = {'database': 'postgres', 'host': '127.0.0.1', 'password': 'modeltranslation', 'user': 'modeltranslation'}\n[CI/Test-2]   | kwasync = {}\n[CI/Test-2]   | \n[CI/Test-2]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[CI/Test-2]   |         \"\"\"\n[CI/Test-2]   |         Create a new database connection.\n[CI/Test-2]   |     \n[CI/Test-2]   |         The connection parameters can be specified as a string:\n[CI/Test-2]   |     \n[CI/Test-2]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[CI/Test-2]   |     \n[CI/Test-2]   |         or using a set of keyword arguments:\n[CI/Test-2]   |     \n[CI/Test-2]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[CI/Test-2]   |     \n[CI/Test-2]   |         Or as a mix of both. The basic connection parameters are:\n[CI/Test-2]   |     \n[CI/Test-2]   |         - *dbname*: the database name\n[CI/Test-2]   |         - *database*: the database name (only as keyword argument)\n[CI/Test-2]   |         - *user*: user name used to authenticate\n[CI/Test-2]   |         - *password*: password used to authenticate\n[CI/Test-2]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[CI/Test-2]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[CI/Test-2]   |     \n[CI/Test-2]   |         Using the *connection_factory* parameter a different class or connections\n[CI/Test-2]   |         factory can be specified. It should be a callable object taking a dsn\n[CI/Test-2]   |         argument.\n[CI/Test-2]   |     \n[CI/Test-2]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[CI/Test-2]   |         used by cursor().\n[CI/Test-2]   |     \n[CI/Test-2]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[CI/Test-2]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[CI/Test-2]   |     \n[CI/Test-2]   |         Any other keyword parameter will be passed to the underlying client\n[CI/Test-2]   |         library: the list of supported parameters depends on the library version.\n[CI/Test-2]   |     \n[CI/Test-2]   |         \"\"\"\n[CI/Test-2]   |         kwasync = {}\n[CI/Test-2]   |         if 'async' in kwargs:\n[CI/Test-2]   |             kwasync['async'] = kwargs.pop('async')\n[CI/Test-2]   |         if 'async_' in kwargs:\n[CI/Test-2]   |             kwasync['async_'] = kwargs.pop('async_')\n[CI/Test-2]   |     \n[CI/Test-2]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[CI/Test-2]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[CI/Test-2]   | E       django.db.utils.OperationalError: connection to server at \"127.0.0.1\", port 5432 failed: Connection refused\n[CI/Test-2]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[CI/Test-2]   | \n[CI/Test-2]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[CI/Test-2]   | \n[CI/Test-2]   | During handling of the above exception, another exception occurred:\n[CI/Test-2]   | \n[CI/Test-2]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f812560b2d0>\n[CI/Test-2]   | \n[CI/Test-2]   |     @async_unsafe\n[CI/Test-2]   |     def ensure_connection(self):\n[CI/Test-2]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[CI/Test-2]   |         if self.connection is None:\n[CI/Test-2]   |             with self.wrap_database_errors:\n[CI/Test-2]   | >               self.connect()\n[CI/Test-2]   | \n[CI/Test-2]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:219: \n[CI/Test-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[CI/Test-2]   | \n[CI/Test-2]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f812560b2d0>,)\n[CI/Test-2]   | kwargs = {}\n[CI/Test-2]   | \n[CI/Test-2]   |     @functools.wraps(func)\n[CI/Test-2]   |     def inner(*args, **kwargs):\n[CI/Test-2]   |         if not os.environ.get('DJANGO_ALLOW_ASYNC_UNSAFE'):\n[CI/Test-2]   |             # Detect a running event loop in this thread.\n[CI/Test-2]   |             try:\n[CI/Test-2]   |                 event_loop = get_running_loop()\n[CI/Test-2]   |             except RuntimeError:\n[CI/Test-2]   |                 pass\n[CI/Test-2]   |             else:\n[CI/Test-2]   |                 if PY37 or event_loop.is_running():\n[CI/Test-2]   |                     raise SynchronousOnlyOperation(message)\n[CI/Test-2]   |         # Pass onwards.\n[CI/Test-2]   | >       return func(*args, **kwargs)\n[CI/Test-2]   | \n[CI/Test-2]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: \n[CI/Test-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[CI/Test-2]   | \n[CI/Test-2]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f812560b2d0>\n[CI/Test-2]   | \n[CI/Test-2]   |     @async_unsafe\n[CI/Test-2]   |     def connect(self):\n[CI/Test-2]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[CI/Test-2]   |         # Check for invalid configurations.\n[CI/Test-2]   |         self.check_settings()\n[CI/Test-2]   |         # In case the previous connection was closed while in an atomic block\n[CI/Test-2]   |         self.in_atomic_block = False\n[CI/Test-2]   |         self.savepoint_ids = []\n[CI/Test-2]   |         self.needs_rollback = False\n[CI/Test-2]   |         # Reset parameters defining when to close the connection\n[CI/Test-2]   |         max_age = self.settings_dict['CONN_MAX_AGE']\n[CI/Test-2]   |         self.close_at = None if max_age is None else time.monotonic() + max_age\n[CI/Test-2]   |         self.closed_in_transaction = False\n[CI/Test-2]   |         self.errors_occurred = False\n[CI/Test-2]   |         # Establish the connection\n[CI/Test-2]   |         conn_params = self.get_connection_params()\n[CI/Test-2]   | >       self.connection = self.get_new_connection(conn_params)\n[CI/Test-2]   | \n[CI/Test-2]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:200: \n[CI/Test-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[CI/Test-2]   | \n[CI/Test-2]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f812560b2d0>, {'database': 'modeltranslation', 'host': '127.0.0.1', 'password': 'modeltranslation', 'user': 'modeltranslation'})\n[CI/Test-2]   | kwargs = {}\n[CI/Test-2]   | \n[CI/Test-2]   |     @functools.wraps(func)\n[CI/Test-2]   |     def inner(*args, **kwargs):\n[CI/Test-2]   |         if not os.environ.get('DJANGO_ALLOW_ASYNC_UNSAFE'):\n[CI/Test-2]   |             # Detect a running event loop in this thread.\n[CI/Test-2]   |             try:\n[CI/Test-2]   |                 event_loop = get_running_loop()\n[CI/Test-2]   |             except RuntimeError:\n[CI/Test-2]   |                 pass\n[CI/Test-2]   |             else:\n[CI/Test-2]   |                 if PY37 or event_loop.is_running():\n[CI/Test-2]   |                     raise SynchronousOnlyOperation(message)\n[CI/Test-2]   |         # Pass onwards.\n[CI/Test-2]   | >       return func(*args, **kwargs)\n[CI/Test-2]   | \n[CI/Test-2]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: \n[CI/Test-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[CI/Test-2]   | \n[CI/Test-2]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f812560b2d0>\n[CI/Test-2]   | conn_params = {'database': 'modeltranslation', 'host': '127.0.0.1', 'password': 'modeltranslation', 'user': 'modeltranslation'}\n[CI/Test-2]   | \n[CI/Test-2]   |     @async_unsafe\n[CI/Test-2]   |     def get_new_connection(self, conn_params):\n[CI/Test-2]   | >       connection = Database.connect(**conn_params)\n[CI/Test-2]   | \n[CI/Test-2]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/postgresql/base.py:187: \n[CI/Test-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[CI/Test-2]   | \n[CI/Test-2]   | dsn = 'user=modeltranslation password=modeltranslation host=127.0.0.1 dbname=modeltranslation'\n[CI/Test-2]   | connection_factory = None, cursor_factory = None\n[CI/Test-2]   | kwargs = {'database': 'modeltranslation', 'host': '127.0.0.1', 'password': 'modeltranslation', 'user': 'modeltranslation'}\n[CI/Test-2]   | kwasync = {}\n[CI/Test-2]   | \n[CI/Test-2]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[CI/Test-2]   |         \"\"\"\n[CI/Test-2]   |         Create a new database connection.\n[CI/Test-2]   |     \n[CI/Test-2]   |         The connection parameters can be specified as a string:\n[CI/Test-2]   |     \n[CI/Test-2]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[CI/Test-2]   |     \n[CI/Test-2]   |         or using a set of keyword arguments:\n[CI/Test-2]   |     \n[CI/Test-2]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[CI/Test-2]   |     \n[CI/Test-2]   |         Or as a mix of both. The basic connection parameters are:\n[CI/Test-2]   |     \n[CI/Test-2]   |         - *dbname*: the database name\n[CI/Test-2]   |         - *database*: the database name (only as keyword argument)\n[CI/Test-2]   |         - *user*: user name used to authenticate\n[CI/Test-2]   |         - *password*: password used to authenticate\n[CI/Test-2]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[CI/Test-2]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[CI/Test-2]   |     \n[CI/Test-2]   |         Using the *connection_factory* parameter a different class or connections\n[CI/Test-2]   |         factory can be specified. It should be a callable object taking a dsn\n[CI/Test-2]   |         argument.\n[CI/Test-2]   |     \n[CI/Test-2]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[CI/Test-2]   |         used by cursor().\n[CI/Test-2]   |     \n[CI/Test-2]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[CI/Test-2]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[CI/Test-2]   |     \n[CI/Test-2]   |         Any other keyword parameter will be passed to the underlying client\n[CI/Test-2]   |         library: the list of supported parameters depends on the library version.\n[CI/Test-2]   |     \n[CI/Test-2]   |         \"\"\"\n[CI/Test-2]   |         kwasync = {}\n[CI/Test-2]   |         if 'async' in kwargs:\n[CI/Test-2]   |             kwasync['async'] = kwargs.pop('async')\n[CI/Test-2]   |         if 'async_' in kwargs:\n[CI/Test-2]   |             kwasync['async_'] = kwargs.pop('async_')\n[CI/Test-2]   |     \n[CI/Test-2]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[CI/Test-2]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[CI/Test-2]   | E       psycopg2.OperationalError: connection to server at \"127.0.0.1\", port 5432 failed: Connection refused\n[CI/Test-2]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[CI/Test-2]   | \n[CI/Test-2]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[CI/Test-2]   | \n[CI/Test-2]   | The above exception was the direct cause of the following exception:\n[CI/Test-2]   | \n[CI/Test-2]   | request = <SubRequest '_django_setup_unittest' for <TestCaseFunction test_duplication>>\n[CI/Test-2]   | django_db_blocker = <pytest_django.plugin._DatabaseBlocker object at 0x7f812978c950>\n[CI/Test-2]   | \n[CI/Test-2]   |     @pytest.fixture(autouse=True, scope=\"class\")\n[CI/Test-2]   |     def _django_setup_unittest(\n[CI/Test-2]   |         request,\n[CI/Test-2]   |         django_db_blocker: \"_DatabaseBlocker\",\n[CI/Test-2]   |     ) -> Generator[None, None, None]:\n[CI/Test-2]   |         \"\"\"Setup a django unittest, internal to pytest-django.\"\"\"\n[CI/Test-2]   |         if not django_settings_is_configured() or not is_django_unittest(request):\n[CI/Test-2]   |             yield\n[CI/Test-2]   |             return\n[CI/Test-2]   |     \n[CI/Test-2]   |         # Fix/patch pytest.\n[CI/Test-2]   |         # Before pytest 5.4: https://github.com/pytest-dev/pytest/issues/5991\n[CI/Test-2]   |         # After pytest 5.4: https://github.com/pytest-dev/pytest-django/issues/824\n[CI/Test-2]   |         from _pytest.unittest import TestCaseFunction\n[CI/Test-2]   |         original_runtest = TestCaseFunction.runtest\n[CI/Test-2]   |     \n[CI/Test-2]   |         def non_debugging_runtest(self) -> None:\n[CI/Test-2]   |             self._testcase(result=self)\n[CI/Test-2]   |     \n[CI/Test-2]   |         try:\n[CI/Test-2]   |             TestCaseFunction.runtest = non_debugging_runtest  # type: ignore[assignment]\n[CI/Test-2]   |     \n[CI/Test-2]   | >           request.getfixturevalue(\"django_db_setup\")\n[CI/Test-2]   | \n[CI/Test-2]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/pytest_django/plugin.py:490: \n[CI/Test-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[CI/Test-2]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/pytest_django/fixtures.py:125: in django_db_setup\n[CI/Test-2]   |     **setup_databases_args\n[CI/Test-2]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/test/utils.py:183: in setup_databases\n[CI/Test-2]   |     serialize=connection.settings_dict['TEST'].get('SERIALIZE', True),\n[CI/Test-2]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/creation.py:57: in create_test_db\n[CI/Test-2]   |     self._create_test_db(verbosity, autoclobber, keepdb)\n[CI/Test-2]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/creation.py:191: in _create_test_db\n[CI/Test-2]   |     with self._nodb_cursor() as cursor:\n[CI/Test-2]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/contextlib.py:112: in __enter__\n[CI/Test-2]   |     return next(self.gen)\n[CI/Test-2]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/postgresql/base.py:319: in _nodb_cursor\n[CI/Test-2]   |     with conn.cursor() as cursor:\n[CI/Test-2]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: in inner\n[CI/Test-2]   |     return func(*args, **kwargs)\n[CI/Test-2]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:259: in cursor\n[CI/Test-2]   |     return self._cursor()\n[CI/Test-2]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:235: in _cursor\n[CI/Test-2]   |     self.ensure_connection()\n[CI/Test-2]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: in inner\n[CI/Test-2]   |     return func(*args, **kwargs)\n[CI/Test-2]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:219: in ensure_connection\n[CI/Test-2]   |     self.connect()\n[CI/Test-2]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/utils.py:90: in __exit__\n[CI/Test-2]   |     raise dj_exc_value.with_traceback(traceback) from exc_value\n[CI/Test-2]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:219: in ensure_connection\n[CI/Test-2]   |     self.connect()\n[CI/Test-2]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: in inner\n[CI/Test-2]   |     return func(*args, **kwargs)\n[CI/Test-2]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:200: in connect\n[CI/Test-2]   |     self.connection = self.get_new_connection(conn_params)\n[CI/Test-2]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: in inner\n[CI/Test-2]   |     return func(*args, **kwargs)\n[CI/Test-2]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/postgresql/base.py:187: in get_new_connection\n[CI/Test-2]   |     connection = Database.connect(**conn_params)\n[CI/Test-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[CI/Test-2]   | \n[CI/Test-2]   | dsn = 'user=modeltranslation password=modeltranslation host=127.0.0.1 dbname=modeltranslation'\n[CI/Test-2]   | connection_factory = None, cursor_factory = None\n[CI/Test-2]   | kwargs = {'database': 'modeltranslation', 'host': '127.0.0.1', 'password': 'modeltranslation', 'user': 'modeltranslation'}\n[CI/Test-2]   | kwasync = {}\n[CI/Test-2]   | \n[CI/Test-2]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[CI/Test-2]   |         \"\"\"\n[CI/Test-2]   |         Create a new database connection.\n[CI/Test-2]   |     \n[CI/Test-2]   |         The connection parameters can be specified as a string:\n[CI/Test-2]   |     \n[CI/Test-2]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[CI/Test-2]   |     \n[CI/Test-2]   |         or using a set of keyword arguments:\n[CI/Test-2]   |     \n[CI/Test-2]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[CI/Test-2]   |     \n[CI/Test-2]   |         Or as a mix of both. The basic connection parameters are:\n[CI/Test-2]   |     \n[CI/Test-2]   |         - *dbname*: the database name\n[CI/Test-2]   |         - *database*: the database name (only as keyword argument)\n[CI/Test-2]   |         - *user*: user name used to authenticate\n[CI/Test-2]   |         - *password*: password used to authenticate\n[CI/Test-2]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[CI/Test-2]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[CI/Test-2]   |     \n[CI/Test-2]   |         Using the *connection_factory* parameter a different class or connections\n[CI/Test-2]   |         factory can be specified. It should be a callable object taking a dsn\n[CI/Test-2]   |         argument.\n[CI/Test-2]   |     \n[CI/Test-2]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[CI/Test-2]   |         used by cursor().\n[CI/Test-2]   |     \n[CI/Test-2]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[CI/Test-2]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[CI/Test-2]   |     \n[CI/Test-2]   |         Any other keyword parameter will be passed to the underlying client\n[CI/Test-2]   |         library: the list of supported parameters depends on the library version.\n[CI/Test-2]   |     \n[CI/Test-2]   |         \"\"\"\n[CI/Test-2]   |         kwasync = {}\n[CI/Test-2]   |         if 'async' in kwargs:\n[CI/Test-2]   |             kwasync['async'] = kwargs.pop('async')\n[CI/Test-2]   |         if 'async_' in kwargs:\n[CI/Test-2]   |             kwasync['async_'] = kwargs.pop('async_')\n[CI/Test-2]   |     \n[CI/Test-2]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[CI/Test-2]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[CI/Test-2]   | E       django.db.utils.OperationalError: connection to server at \"127.0.0.1\", port 5432 failed: Connection refused\n[CI/Test-2]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[CI/Test-2]   | \n[CI/Test-2]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[CI/Test-2]   | ________________ ERROR at setup of TestAutodiscover.test_global ________________\n[CI/Test-2]   | \n[CI/Test-2]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f812560b090>\n[CI/Test-2]   | \n[CI/Test-2]   |     @async_unsafe\n[CI/Test-2]   |     def ensure_connection(self):\n[CI/Test-2]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[CI/Test-2]   |         if self.connection is None:\n[CI/Test-2]   |             with self.wrap_database_errors:\n[CI/Test-2]   | >               self.connect()\n[CI/Test-2]   | \n[CI/Test-2]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:219: \n[CI/Test-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[CI/Test-2]   | \n[CI/Test-2]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f812560b090>,)\n[CI/Test-2]   | kwargs = {}\n[CI/Test-2]   | \n[CI/Test-2]   |     @functools.wraps(func)\n[CI/Test-2]   |     def inner(*args, **kwargs):\n[CI/Test-2]   |         if not os.environ.get('DJANGO_ALLOW_ASYNC_UNSAFE'):\n[CI/Test-2]   |             # Detect a running event loop in this thread.\n[CI/Test-2]   |             try:\n[CI/Test-2]   |                 event_loop = get_running_loop()\n[CI/Test-2]   |             except RuntimeError:\n[CI/Test-2]   |                 pass\n[CI/Test-2]   |             else:\n[CI/Test-2]   |                 if PY37 or event_loop.is_running():\n[CI/Test-2]   |                     raise SynchronousOnlyOperation(message)\n[CI/Test-2]   |         # Pass onwards.\n[CI/Test-2]   | >       return func(*args, **kwargs)\n[CI/Test-2]   | \n[CI/Test-2]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: \n[CI/Test-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[CI/Test-2]   | \n[CI/Test-2]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f812560b090>\n[CI/Test-2]   | \n[CI/Test-2]   |     @async_unsafe\n[CI/Test-2]   |     def connect(self):\n[CI/Test-2]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[CI/Test-2]   |         # Check for invalid configurations.\n[CI/Test-2]   |         self.check_settings()\n[CI/Test-2]   |         # In case the previous connection was closed while in an atomic block\n[CI/Test-2]   |         self.in_atomic_block = False\n[CI/Test-2]   |         self.savepoint_ids = []\n[CI/Test-2]   |         self.needs_rollback = False\n[CI/Test-2]   |         # Reset parameters defining when to close the connection\n[CI/Test-2]   |         max_age = self.settings_dict['CONN_MAX_AGE']\n[CI/Test-2]   |         self.close_at = None if max_age is None else time.monotonic() + max_age\n[CI/Test-2]   |         self.closed_in_transaction = False\n[CI/Test-2]   |         self.errors_occurred = False\n[CI/Test-2]   |         # Establish the connection\n[CI/Test-2]   |         conn_params = self.get_connection_params()\n[CI/Test-2]   | >       self.connection = self.get_new_connection(conn_params)\n[CI/Test-2]   | \n[CI/Test-2]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:200: \n[CI/Test-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[CI/Test-2]   | \n[CI/Test-2]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f812560b090>, {'database': 'postgres', 'host': '127.0.0.1', 'password': 'modeltranslation', 'user': 'modeltranslation'})\n[CI/Test-2]   | kwargs = {}\n[CI/Test-2]   | \n[CI/Test-2]   |     @functools.wraps(func)\n[CI/Test-2]   |     def inner(*args, **kwargs):\n[CI/Test-2]   |         if not os.environ.get('DJANGO_ALLOW_ASYNC_UNSAFE'):\n[CI/Test-2]   |             # Detect a running event loop in this thread.\n[CI/Test-2]   |             try:\n[CI/Test-2]   |                 event_loop = get_running_loop()\n[CI/Test-2]   |             except RuntimeError:\n[CI/Test-2]   |                 pass\n[CI/Test-2]   |             else:\n[CI/Test-2]   |                 if PY37 or event_loop.is_running():\n[CI/Test-2]   |                     raise SynchronousOnlyOperation(message)\n[CI/Test-2]   |         # Pass onwards.\n[CI/Test-2]   | >       return func(*args, **kwargs)\n[CI/Test-2]   | \n[CI/Test-2]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: \n[CI/Test-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[CI/Test-2]   | \n[CI/Test-2]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f812560b090>\n[CI/Test-2]   | conn_params = {'database': 'postgres', 'host': '127.0.0.1', 'password': 'modeltranslation', 'user': 'modeltranslation'}\n[CI/Test-2]   | \n[CI/Test-2]   |     @async_unsafe\n[CI/Test-2]   |     def get_new_connection(self, conn_params):\n[CI/Test-2]   | >       connection = Database.connect(**conn_params)\n[CI/Test-2]   | \n[CI/Test-2]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/postgresql/base.py:187: \n[CI/Test-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[CI/Test-2]   | \n[CI/Test-2]   | dsn = 'user=modeltranslation password=modeltranslation host=127.0.0.1 dbname=postgres'\n[CI/Test-2]   | connection_factory = None, cursor_factory = None\n[CI/Test-2]   | kwargs = {'database': 'postgres', 'host': '127.0.0.1', 'password': 'modeltranslation', 'user': 'modeltranslation'}\n[CI/Test-2]   | kwasync = {}\n[CI/Test-2]   | \n[CI/Test-2]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[CI/Test-2]   |         \"\"\"\n[CI/Test-2]   |         Create a new database connection.\n[CI/Test-2]   |     \n[CI/Test-2]   |         The connection parameters can be specified as a string:\n[CI/Test-2]   |     \n[CI/Test-2]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[CI/Test-2]   |     \n[CI/Test-2]   |         or using a set of keyword arguments:\n[CI/Test-2]   |     \n[CI/Test-2]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[CI/Test-2]   |     \n[CI/Test-2]   |         Or as a mix of both. The basic connection parameters are:\n[CI/Test-2]   |     \n[CI/Test-2]   |         - *dbname*: the database name\n[CI/Test-2]   |         - *database*: the database name (only as keyword argument)\n[CI/Test-2]   |         - *user*: user name used to authenticate\n[CI/Test-2]   |         - *password*: password used to authenticate\n[CI/Test-2]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[CI/Test-2]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[CI/Test-2]   |     \n[CI/Test-2]   |         Using the *connection_factory* parameter a different class or connections\n[CI/Test-2]   |         factory can be specified. It should be a callable object taking a dsn\n[CI/Test-2]   |         argument.\n[CI/Test-2]   |     \n[CI/Test-2]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[CI/Test-2]   |         used by cursor().\n[CI/Test-2]   |     \n[CI/Test-2]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[CI/Test-2]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[CI/Test-2]   |     \n[CI/Test-2]   |         Any other keyword parameter will be passed to the underlying client\n[CI/Test-2]   |         library: the list of supported parameters depends on the library version.\n[CI/Test-2]   |     \n[CI/Test-2]   |         \"\"\"\n[CI/Test-2]   |         kwasync = {}\n[CI/Test-2]   |         if 'async' in kwargs:\n[CI/Test-2]   |             kwasync['async'] = kwargs.pop('async')\n[CI/Test-2]   |         if 'async_' in kwargs:\n[CI/Test-2]   |             kwasync['async_'] = kwargs.pop('async_')\n[CI/Test-2]   |     \n[CI/Test-2]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[CI/Test-2]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[CI/Test-2]   | E       psycopg2.OperationalError: connection to server at \"127.0.0.1\", port 5432 failed: Connection refused\n[CI/Test-2]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[CI/Test-2]   | \n[CI/Test-2]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[CI/Test-2]   | \n[CI/Test-2]   | The above exception was the direct cause of the following exception:\n[CI/Test-2]   | \n[CI/Test-2]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f812890e750>\n[CI/Test-2]   | \n[CI/Test-2]   |     @contextmanager\n[CI/Test-2]   |     def _nodb_cursor(self):\n[CI/Test-2]   |         try:\n[CI/Test-2]   | >           with super()._nodb_cursor() as cursor:\n[CI/Test-2]   | \n[CI/Test-2]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/postgresql/base.py:301: \n[CI/Test-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[CI/Test-2]   | \n[CI/Test-2]   | self = <contextlib._GeneratorContextManager object at 0x7f812560b0d0>\n[CI/Test-2]   | \n[CI/Test-2]   |     def __enter__(self):\n[CI/Test-2]   |         # do not keep args and kwds alive unnecessarily\n[CI/Test-2]   |         # they are only needed for recreation, which is not possible anymore\n[CI/Test-2]   |         del self.args, self.kwds, self.func\n[CI/Test-2]   |         try:\n[CI/Test-2]   | >           return next(self.gen)\n[CI/Test-2]   | \n[CI/Test-2]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/contextlib.py:112: \n[CI/Test-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[CI/Test-2]   | \n[CI/Test-2]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f812890e750>\n[CI/Test-2]   | \n[CI/Test-2]   |     @contextmanager\n[CI/Test-2]   |     def _nodb_cursor(self):\n[CI/Test-2]   |         \"\"\"\n[CI/Test-2]   |         Return a cursor from an alternative connection to be used when there is\n[CI/Test-2]   |         no need to access the main database, specifically for test db\n[CI/Test-2]   |         creation/deletion. This also prevents the production database from\n[CI/Test-2]   |         being exposed to potential child threads while (or after) the test\n[CI/Test-2]   |         database is destroyed. Refs #10868, #17786, #16969.\n[CI/Test-2]   |         \"\"\"\n[CI/Test-2]   |         conn = self.__class__({**self.settings_dict, 'NAME': None}, alias=NO_DB_ALIAS)\n[CI/Test-2]   |         try:\n[CI/Test-2]   | >           with conn.cursor() as cursor:\n[CI/Test-2]   | \n[CI/Test-2]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:620: \n[CI/Test-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[CI/Test-2]   | \n[CI/Test-2]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f812560b090>,)\n[CI/Test-2]   | kwargs = {}\n[CI/Test-2]   | \n[CI/Test-2]   |     @functools.wraps(func)\n[CI/Test-2]   |     def inner(*args, **kwargs):\n[CI/Test-2]   |         if not os.environ.get('DJANGO_ALLOW_ASYNC_UNSAFE'):\n[CI/Test-2]   |             # Detect a running event loop in this thread.\n[CI/Test-2]   |             try:\n[CI/Test-2]   |                 event_loop = get_running_loop()\n[CI/Test-2]   |             except RuntimeError:\n[CI/Test-2]   |                 pass\n[CI/Test-2]   |             else:\n[CI/Test-2]   |                 if PY37 or event_loop.is_running():\n[CI/Test-2]   |                     raise SynchronousOnlyOperation(message)\n[CI/Test-2]   |         # Pass onwards.\n[CI/Test-2]   | >       return func(*args, **kwargs)\n[CI/Test-2]   | \n[CI/Test-2]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: \n[CI/Test-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[CI/Test-2]   | \n[CI/Test-2]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f812560b090>\n[CI/Test-2]   | \n[CI/Test-2]   |     @async_unsafe\n[CI/Test-2]   |     def cursor(self):\n[CI/Test-2]   |         \"\"\"Create a cursor, opening a connection if necessary.\"\"\"\n[CI/Test-2]   | >       return self._cursor()\n[CI/Test-2]   | \n[CI/Test-2]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:259: \n[CI/Test-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[CI/Test-2]   | \n[CI/Test-2]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f812560b090>\n[CI/Test-2]   | name = None\n[CI/Test-2]   | \n[CI/Test-2]   |     def _cursor(self, name=None):\n[CI/Test-2]   | >       self.ensure_connection()\n[CI/Test-2]   | \n[CI/Test-2]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:235: \n[CI/Test-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[CI/Test-2]   | \n[CI/Test-2]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f812560b090>,)\n[CI/Test-2]   | kwargs = {}\n[CI/Test-2]   | \n[CI/Test-2]   |     @functools.wraps(func)\n[CI/Test-2]   |     def inner(*args, **kwargs):\n[CI/Test-2]   |         if not os.environ.get('DJANGO_ALLOW_ASYNC_UNSAFE'):\n[CI/Test-2]   |             # Detect a running event loop in this thread.\n[CI/Test-2]   |             try:\n[CI/Test-2]   |                 event_loop = get_running_loop()\n[CI/Test-2]   |             except RuntimeError:\n[CI/Test-2]   |                 pass\n[CI/Test-2]   |             else:\n[CI/Test-2]   |                 if PY37 or event_loop.is_running():\n[CI/Test-2]   |                     raise SynchronousOnlyOperation(message)\n[CI/Test-2]   |         # Pass onwards.\n[CI/Test-2]   | >       return func(*args, **kwargs)\n[CI/Test-2]   | \n[CI/Test-2]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: \n[CI/Test-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[CI/Test-2]   | \n[CI/Test-2]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f812560b090>\n[CI/Test-2]   | \n[CI/Test-2]   |     @async_unsafe\n[CI/Test-2]   |     def ensure_connection(self):\n[CI/Test-2]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[CI/Test-2]   |         if self.connection is None:\n[CI/Test-2]   |             with self.wrap_database_errors:\n[CI/Test-2]   | >               self.connect()\n[CI/Test-2]   | \n[CI/Test-2]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:219: \n[CI/Test-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[CI/Test-2]   | \n[CI/Test-2]   | self = <django.db.utils.DatabaseErrorWrapper object at 0x7f812560ba90>\n[CI/Test-2]   | exc_type = <class 'psycopg2.OperationalError'>\n[CI/Test-2]   | exc_value = OperationalError('connection to server at \"127.0.0.1\", port 5432 failed: Connection refused\\n\\tIs the server running on that host and accepting TCP/IP connections?\\n')\n[CI/Test-2]   | traceback = <traceback object at 0x7f8126520460>\n[CI/Test-2]   | \n[CI/Test-2]   |     def __exit__(self, exc_type, exc_value, traceback):\n[CI/Test-2]   |         if exc_type is None:\n[CI/Test-2]   |             return\n[CI/Test-2]   |         for dj_exc_type in (\n[CI/Test-2]   |                 DataError,\n[CI/Test-2]   |                 OperationalError,\n[CI/Test-2]   |                 IntegrityError,\n[CI/Test-2]   |                 InternalError,\n[CI/Test-2]   |                 ProgrammingError,\n[CI/Test-2]   |                 NotSupportedError,\n[CI/Test-2]   |                 DatabaseError,\n[CI/Test-2]   |                 InterfaceError,\n[CI/Test-2]   |                 Error,\n[CI/Test-2]   |         ):\n[CI/Test-2]   |             db_exc_type = getattr(self.wrapper.Database, dj_exc_type.__name__)\n[CI/Test-2]   |             if issubclass(exc_type, db_exc_type):\n[CI/Test-2]   |                 dj_exc_value = dj_exc_type(*exc_value.args)\n[CI/Test-2]   |                 # Only set the 'errors_occurred' flag for errors that may make\n[CI/Test-2]   |                 # the connection unusable.\n[CI/Test-2]   |                 if dj_exc_type not in (DataError, IntegrityError):\n[CI/Test-2]   |                     self.wrapper.errors_occurred = True\n[CI/Test-2]   | >               raise dj_exc_value.with_traceback(traceback) from exc_value\n[CI/Test-2]   | \n[CI/Test-2]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/utils.py:90: \n[CI/Test-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[CI/Test-2]   | \n[CI/Test-2]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f812560b090>\n[CI/Test-2]   | \n[CI/Test-2]   |     @async_unsafe\n[CI/Test-2]   |     def ensure_connection(self):\n[CI/Test-2]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[CI/Test-2]   |         if self.connection is None:\n[CI/Test-2]   |             with self.wrap_database_errors:\n[CI/Test-2]   | >               self.connect()\n[CI/Test-2]   | \n[CI/Test-2]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:219: \n[CI/Test-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[CI/Test-2]   | \n[CI/Test-2]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f812560b090>,)\n[CI/Test-2]   | kwargs = {}\n[CI/Test-2]   | \n[CI/Test-2]   |     @functools.wraps(func)\n[CI/Test-2]   |     def inner(*args, **kwargs):\n[CI/Test-2]   |         if not os.environ.get('DJANGO_ALLOW_ASYNC_UNSAFE'):\n[CI/Test-2]   |             # Detect a running event loop in this thread.\n[CI/Test-2]   |             try:\n[CI/Test-2]   |                 event_loop = get_running_loop()\n[CI/Test-2]   |             except RuntimeError:\n[CI/Test-2]   |                 pass\n[CI/Test-2]   |             else:\n[CI/Test-2]   |                 if PY37 or event_loop.is_running():\n[CI/Test-2]   |                     raise SynchronousOnlyOperation(message)\n[CI/Test-2]   |         # Pass onwards.\n[CI/Test-2]   | >       return func(*args, **kwargs)\n[CI/Test-2]   | \n[CI/Test-2]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: \n[CI/Test-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[CI/Test-2]   | \n[CI/Test-2]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f812560b090>\n[CI/Test-2]   | \n[CI/Test-2]   |     @async_unsafe\n[CI/Test-2]   |     def connect(self):\n[CI/Test-2]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[CI/Test-2]   |         # Check for invalid configurations.\n[CI/Test-2]   |         self.check_settings()\n[CI/Test-2]   |         # In case the previous connection was closed while in an atomic block\n[CI/Test-2]   |         self.in_atomic_block = False\n[CI/Test-2]   |         self.savepoint_ids = []\n[CI/Test-2]   |         self.needs_rollback = False\n[CI/Test-2]   |         # Reset parameters defining when to close the connection\n[CI/Test-2]   |         max_age = self.settings_dict['CONN_MAX_AGE']\n[CI/Test-2]   |         self.close_at = None if max_age is None else time.monotonic() + max_age\n[CI/Test-2]   |         self.closed_in_transaction = False\n[CI/Test-2]   |         self.errors_occurred = False\n[CI/Test-2]   |         # Establish the connection\n[CI/Test-2]   |         conn_params = self.get_connection_params()\n[CI/Test-2]   | >       self.connection = self.get_new_connection(conn_params)\n[CI/Test-2]   | \n[CI/Test-2]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:200: \n[CI/Test-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[CI/Test-2]   | \n[CI/Test-2]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f812560b090>, {'database': 'postgres', 'host': '127.0.0.1', 'password': 'modeltranslation', 'user': 'modeltranslation'})\n[CI/Test-2]   | kwargs = {}\n[CI/Test-2]   | \n[CI/Test-2]   |     @functools.wraps(func)\n[CI/Test-2]   |     def inner(*args, **kwargs):\n[CI/Test-2]   |         if not os.environ.get('DJANGO_ALLOW_ASYNC_UNSAFE'):\n[CI/Test-2]   |             # Detect a running event loop in this thread.\n[CI/Test-2]   |             try:\n[CI/Test-2]   |                 event_loop = get_running_loop()\n[CI/Test-2]   |             except RuntimeError:\n[CI/Test-2]   |                 pass\n[CI/Test-2]   |             else:\n[CI/Test-2]   |                 if PY37 or event_loop.is_running():\n[CI/Test-2]   |                     raise SynchronousOnlyOperation(message)\n[CI/Test-2]   |         # Pass onwards.\n[CI/Test-2]   | >       return func(*args, **kwargs)\n[CI/Test-2]   | \n[CI/Test-2]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: \n[CI/Test-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[CI/Test-2]   | \n[CI/Test-2]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f812560b090>\n[CI/Test-2]   | conn_params = {'database': 'postgres', 'host': '127.0.0.1', 'password': 'modeltranslation', 'user': 'modeltranslation'}\n[CI/Test-2]   | \n[CI/Test-2]   |     @async_unsafe\n[CI/Test-2]   |     def get_new_connection(self, conn_params):\n[CI/Test-2]   | >       connection = Database.connect(**conn_params)\n[CI/Test-2]   | \n[CI/Test-2]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/postgresql/base.py:187: \n[CI/Test-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[CI/Test-2]   | \n[CI/Test-2]   | dsn = 'user=modeltranslation password=modeltranslation host=127.0.0.1 dbname=postgres'\n[CI/Test-2]   | connection_factory = None, cursor_factory = None\n[CI/Test-2]   | kwargs = {'database': 'postgres', 'host': '127.0.0.1', 'password': 'modeltranslation', 'user': 'modeltranslation'}\n[CI/Test-2]   | kwasync = {}\n[CI/Test-2]   | \n[CI/Test-2]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[CI/Test-2]   |         \"\"\"\n[CI/Test-2]   |         Create a new database connection.\n[CI/Test-2]   |     \n[CI/Test-2]   |         The connection parameters can be specified as a string:\n[CI/Test-2]   |     \n[CI/Test-2]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[CI/Test-2]   |     \n[CI/Test-2]   |         or using a set of keyword arguments:\n[CI/Test-2]   |     \n[CI/Test-2]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[CI/Test-2]   |     \n[CI/Test-2]   |         Or as a mix of both. The basic connection parameters are:\n[CI/Test-2]   |     \n[CI/Test-2]   |         - *dbname*: the database name\n[CI/Test-2]   |         - *database*: the database name (only as keyword argument)\n[CI/Test-2]   |         - *user*: user name used to authenticate\n[CI/Test-2]   |         - *password*: password used to authenticate\n[CI/Test-2]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[CI/Test-2]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[CI/Test-2]   |     \n[CI/Test-2]   |         Using the *connection_factory* parameter a different class or connections\n[CI/Test-2]   |         factory can be specified. It should be a callable object taking a dsn\n[CI/Test-2]   |         argument.\n[CI/Test-2]   |     \n[CI/Test-2]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[CI/Test-2]   |         used by cursor().\n[CI/Test-2]   |     \n[CI/Test-2]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[CI/Test-2]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[CI/Test-2]   |     \n[CI/Test-2]   |         Any other keyword parameter will be passed to the underlying client\n[CI/Test-2]   |         library: the list of supported parameters depends on the library version.\n[CI/Test-2]   |     \n[CI/Test-2]   |         \"\"\"\n[CI/Test-2]   |         kwasync = {}\n[CI/Test-2]   |         if 'async' in kwargs:\n[CI/Test-2]   |             kwasync['async'] = kwargs.pop('async')\n[CI/Test-2]   |         if 'async_' in kwargs:\n[CI/Test-2]   |             kwasync['async_'] = kwargs.pop('async_')\n[CI/Test-2]   |     \n[CI/Test-2]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[CI/Test-2]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[CI/Test-2]   | E       django.db.utils.OperationalError: connection to server at \"127.0.0.1\", port 5432 failed: Connection refused\n[CI/Test-2]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[CI/Test-2]   | \n[CI/Test-2]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[CI/Test-2]   | \n[CI/Test-2]   | During handling of the above exception, another exception occurred:\n[CI/Test-2]   | \n[CI/Test-2]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f812560b2d0>\n[CI/Test-2]   | \n[CI/Test-2]   |     @async_unsafe\n[CI/Test-2]   |     def ensure_connection(self):\n[CI/Test-2]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[CI/Test-2]   |         if self.connection is None:\n[CI/Test-2]   |             with self.wrap_database_errors:\n[CI/Test-2]   | >               self.connect()\n[CI/Test-2]   | \n[CI/Test-2]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:219: \n[CI/Test-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[CI/Test-2]   | \n[CI/Test-2]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f812560b2d0>,)\n[CI/Test-2]   | kwargs = {}\n[CI/Test-2]   | \n[CI/Test-2]   |     @functools.wraps(func)\n[CI/Test-2]   |     def inner(*args, **kwargs):\n[CI/Test-2]   |         if not os.environ.get('DJANGO_ALLOW_ASYNC_UNSAFE'):\n[CI/Test-2]   |             # Detect a running event loop in this thread.\n[CI/Test-2]   |             try:\n[CI/Test-2]   |                 event_loop = get_running_loop()\n[CI/Test-2]   |             except RuntimeError:\n[CI/Test-2]   |                 pass\n[CI/Test-2]   |             else:\n[CI/Test-2]   |                 if PY37 or event_loop.is_running():\n[CI/Test-2]   |                     raise SynchronousOnlyOperation(message)\n[CI/Test-2]   |         # Pass onwards.\n[CI/Test-2]   | >       return func(*args, **kwargs)\n[CI/Test-2]   | \n[CI/Test-2]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: \n[CI/Test-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[CI/Test-2]   | \n[CI/Test-2]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f812560b2d0>\n[CI/Test-2]   | \n[CI/Test-2]   |     @async_unsafe\n[CI/Test-2]   |     def connect(self):\n[CI/Test-2]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[CI/Test-2]   |         # Check for invalid configurations.\n[CI/Test-2]   |         self.check_settings()\n[CI/Test-2]   |         # In case the previous connection was closed while in an atomic block\n[CI/Test-2]   |         self.in_atomic_block = False\n[CI/Test-2]   |         self.savepoint_ids = []\n[CI/Test-2]   |         self.needs_rollback = False\n[CI/Test-2]   |         # Reset parameters defining when to close the connection\n[CI/Test-2]   |         max_age = self.settings_dict['CONN_MAX_AGE']\n[CI/Test-2]   |         self.close_at = None if max_age is None else time.monotonic() + max_age\n[CI/Test-2]   |         self.closed_in_transaction = False\n[CI/Test-2]   |         self.errors_occurred = False\n[CI/Test-2]   |         # Establish the connection\n[CI/Test-2]   |         conn_params = self.get_connection_params()\n[CI/Test-2]   | >       self.connection = self.get_new_connection(conn_params)\n[CI/Test-2]   | \n[CI/Test-2]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:200: \n[CI/Test-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[CI/Test-2]   | \n[CI/Test-2]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f812560b2d0>, {'database': 'modeltranslation', 'host': '127.0.0.1', 'password': 'modeltranslation', 'user': 'modeltranslation'})\n[CI/Test-2]   | kwargs = {}\n[CI/Test-2]   | \n[CI/Test-2]   |     @functools.wraps(func)\n[CI/Test-2]   |     def inner(*args, **kwargs):\n[CI/Test-2]   |         if not os.environ.get('DJANGO_ALLOW_ASYNC_UNSAFE'):\n[CI/Test-2]   |             # Detect a running event loop in this thread.\n[CI/Test-2]   |             try:\n[CI/Test-2]   |                 event_loop = get_running_loop()\n[CI/Test-2]   |             except RuntimeError:\n[CI/Test-2]   |                 pass\n[CI/Test-2]   |             else:\n[CI/Test-2]   |                 if PY37 or event_loop.is_running():\n[CI/Test-2]   |                     raise SynchronousOnlyOperation(message)\n[CI/Test-2]   |         # Pass onwards.\n[CI/Test-2]   | >       return func(*args, **kwargs)\n[CI/Test-2]   | \n[CI/Test-2]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: \n[CI/Test-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[CI/Test-2]   | \n[CI/Test-2]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f812560b2d0>\n[CI/Test-2]   | conn_params = {'database': 'modeltranslation', 'host': '127.0.0.1', 'password': 'modeltranslation', 'user': 'modeltranslation'}\n[CI/Test-2]   | \n[CI/Test-2]   |     @async_unsafe\n[CI/Test-2]   |     def get_new_connection(self, conn_params):\n[CI/Test-2]   | >       connection = Database.connect(**conn_params)\n[CI/Test-2]   | \n[CI/Test-2]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/postgresql/base.py:187: \n[CI/Test-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[CI/Test-2]   | \n[CI/Test-2]   | dsn = 'user=modeltranslation password=modeltranslation host=127.0.0.1 dbname=modeltranslation'\n[CI/Test-2]   | connection_factory = None, cursor_factory = None\n[CI/Test-2]   | kwargs = {'database': 'modeltranslation', 'host': '127.0.0.1', 'password': 'modeltranslation', 'user': 'modeltranslation'}\n[CI/Test-2]   | kwasync = {}\n[CI/Test-2]   | \n[CI/Test-2]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[CI/Test-2]   |         \"\"\"\n[CI/Test-2]   |         Create a new database connection.\n[CI/Test-2]   |     \n[CI/Test-2]   |         The connection parameters can be specified as a string:\n[CI/Test-2]   |     \n[CI/Test-2]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[CI/Test-2]   |     \n[CI/Test-2]   |         or using a set of keyword arguments:\n[CI/Test-2]   |     \n[CI/Test-2]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[CI/Test-2]   |     \n[CI/Test-2]   |         Or as a mix of both. The basic connection parameters are:\n[CI/Test-2]   |     \n[CI/Test-2]   |         - *dbname*: the database name\n[CI/Test-2]   |         - *database*: the database name (only as keyword argument)\n[CI/Test-2]   |         - *user*: user name used to authenticate\n[CI/Test-2]   |         - *password*: password used to authenticate\n[CI/Test-2]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[CI/Test-2]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[CI/Test-2]   |     \n[CI/Test-2]   |         Using the *connection_factory* parameter a different class or connections\n[CI/Test-2]   |         factory can be specified. It should be a callable object taking a dsn\n[CI/Test-2]   |         argument.\n[CI/Test-2]   |     \n[CI/Test-2]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[CI/Test-2]   |         used by cursor().\n[CI/Test-2]   |     \n[CI/Test-2]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[CI/Test-2]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[CI/Test-2]   |     \n[CI/Test-2]   |         Any other keyword parameter will be passed to the underlying client\n[CI/Test-2]   |         library: the list of supported parameters depends on the library version.\n[CI/Test-2]   |     \n[CI/Test-2]   |         \"\"\"\n[CI/Test-2]   |         kwasync = {}\n[CI/Test-2]   |         if 'async' in kwargs:\n[CI/Test-2]   |             kwasync['async'] = kwargs.pop('async')\n[CI/Test-2]   |         if 'async_' in kwargs:\n[CI/Test-2]   |             kwasync['async_'] = kwargs.pop('async_')\n[CI/Test-2]   |     \n[CI/Test-2]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[CI/Test-2]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[CI/Test-2]   | E       psycopg2.OperationalError: connection to server at \"127.0.0.1\", port 5432 failed: Connection refused\n[CI/Test-2]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[CI/Test-2]   | \n[CI/Test-2]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[CI/Test-2]   | \n[CI/Test-2]   | The above exception was the direct cause of the following exception:\n[CI/Test-2]   | \n[CI/Test-2]   | request = <SubRequest '_django_setup_unittest' for <TestCaseFunction test_duplication>>\n[CI/Test-2]   | django_db_blocker = <pytest_django.plugin._DatabaseBlocker object at 0x7f812978c950>\n[CI/Test-2]   | \n[CI/Test-2]   |     @pytest.fixture(autouse=True, scope=\"class\")\n[CI/Test-2]   |     def _django_setup_unittest(\n[CI/Test-2]   |         request,\n[CI/Test-2]   |         django_db_blocker: \"_DatabaseBlocker\",\n[CI/Test-2]   |     ) -> Generator[None, None, None]:\n[CI/Test-2]   |         \"\"\"Setup a django unittest, internal to pytest-django.\"\"\"\n[CI/Test-2]   |         if not django_settings_is_configured() or not is_django_unittest(request):\n[CI/Test-2]   |             yield\n[CI/Test-2]   |             return\n[CI/Test-2]   |     \n[CI/Test-2]   |         # Fix/patch pytest.\n[CI/Test-2]   |         # Before pytest 5.4: https://github.com/pytest-dev/pytest/issues/5991\n[CI/Test-2]   |         # After pytest 5.4: https://github.com/pytest-dev/pytest-django/issues/824\n[CI/Test-2]   |         from _pytest.unittest import TestCaseFunction\n[CI/Test-2]   |         original_runtest = TestCaseFunction.runtest\n[CI/Test-2]   |     \n[CI/Test-2]   |         def non_debugging_runtest(self) -> None:\n[CI/Test-2]   |             self._testcase(result=self)\n[CI/Test-2]   |     \n[CI/Test-2]   |         try:\n[CI/Test-2]   |             TestCaseFunction.runtest = non_debugging_runtest  # type: ignore[assignment]\n[CI/Test-2]   |     \n[CI/Test-2]   | >           request.getfixturevalue(\"django_db_setup\")\n[CI/Test-2]   | \n[CI/Test-2]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/pytest_django/plugin.py:490: \n[CI/Test-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[CI/Test-2]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/pytest_django/fixtures.py:125: in django_db_setup\n[CI/Test-2]   |     **setup_databases_args\n[CI/Test-2]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/test/utils.py:183: in setup_databases\n[CI/Test-2]   |     serialize=connection.settings_dict['TEST'].get('SERIALIZE', True),\n[CI/Test-2]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/creation.py:57: in create_test_db\n[CI/Test-2]   |     self._create_test_db(verbosity, autoclobber, keepdb)\n[CI/Test-2]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/creation.py:191: in _create_test_db\n[CI/Test-2]   |     with self._nodb_cursor() as cursor:\n[CI/Test-2]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/contextlib.py:112: in __enter__\n[CI/Test-2]   |     return next(self.gen)\n[CI/Test-2]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/postgresql/base.py:319: in _nodb_cursor\n[CI/Test-2]   |     with conn.cursor() as cursor:\n[CI/Test-2]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: in inner\n[CI/Test-2]   |     return func(*args, **kwargs)\n[CI/Test-2]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:259: in cursor\n[CI/Test-2]   |     return self._cursor()\n[CI/Test-2]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:235: in _cursor\n[CI/Test-2]   |     self.ensure_connection()\n[CI/Test-2]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: in inner\n[CI/Test-2]   |     return func(*args, **kwargs)\n[CI/Test-2]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:219: in ensure_connection\n[CI/Test-2]   |     self.connect()\n[CI/Test-2]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/utils.py:90: in __exit__\n[CI/Test-2]   |     raise dj_exc_value.with_traceback(traceback) from exc_value\n[CI/Test-2]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:219: in ensure_connection\n[CI/Test-2]   |     self.connect()\n[CI/Test-2]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: in inner\n[CI/Test-2]   |     return func(*args, **kwargs)\n[CI/Test-2]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:200: in connect\n[CI/Test-2]   |     self.connection = self.get_new_connection(conn_params)\n[CI/Test-2]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: in inner\n[CI/Test-2]   |     return func(*args, **kwargs)\n[CI/Test-2]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/postgresql/base.py:187: in get_new_connection\n[CI/Test-2]   |     connection = Database.connect(**conn_params)\n[CI/Test-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[CI/Test-2]   | \n[CI/Test-2]   | dsn = 'user=modeltranslation password=modeltranslation host=127.0.0.1 dbname=modeltranslation'\n[CI/Test-2]   | connection_factory = None, cursor_factory = None\n[CI/Test-2]   | kwargs = {'database': 'modeltranslation', 'host': '127.0.0.1', 'password': 'modeltranslation', 'user': 'modeltranslation'}\n[CI/Test-2]   | kwasync = {}\n[CI/Test-2]   | \n[CI/Test-2]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[CI/Test-2]   |         \"\"\"\n[CI/Test-2]   |         Create a new database connection.\n[CI/Test-2]   |     \n[CI/Test-2]   |         The connection parameters can be specified as a string:\n[CI/Test-2]   |     \n[CI/Test-2]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[CI/Test-2]   |     \n[CI/Test-2]   |         or using a set of keyword arguments:\n[CI/Test-2]   |     \n[CI/Test-2]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[CI/Test-2]   |     \n[CI/Test-2]   |         Or as a mix of both. The basic connection parameters are:\n[CI/Test-2]   |     \n[CI/Test-2]   |         - *dbname*: the database name\n[CI/Test-2]   |         - *database*: the database name (only as keyword argument)\n[CI/Test-2]   |         - *user*: user name used to authenticate\n[CI/Test-2]   |         - *password*: password used to authenticate\n[CI/Test-2]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[CI/Test-2]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[CI/Test-2]   |     \n[CI/Test-2]   |         Using the *connection_factory* parameter a different class or connections\n[CI/Test-2]   |         factory can be specified. It should be a callable object taking a dsn\n[CI/Test-2]   |         argument.\n[CI/Test-2]   |     \n[CI/Test-2]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[CI/Test-2]   |         used by cursor().\n[CI/Test-2]   |     \n[CI/Test-2]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[CI/Test-2]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[CI/Test-2]   |     \n[CI/Test-2]   |         Any other keyword parameter will be passed to the underlying client\n[CI/Test-2]   |         library: the list of supported parameters depends on the library version.\n[CI/Test-2]   |     \n[CI/Test-2]   |         \"\"\"\n[CI/Test-2]   |         kwasync = {}\n[CI/Test-2]   |         if 'async' in kwargs:\n[CI/Test-2]   |             kwasync['async'] = kwargs.pop('async')\n[CI/Test-2]   |         if 'async_' in kwargs:\n[CI/Test-2]   |             kwasync['async_'] = kwargs.pop('async_')\n[CI/Test-2]   |     \n[CI/Test-2]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[CI/Test-2]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[CI/Test-2]   | E       django.db.utils.OperationalError: connection to server at \"127.0.0.1\", port 5432 failed: Connection refused\n[CI/Test-2]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[CI/Test-2]   | \n[CI/Test-2]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[CI/Test-2]   | ________________ ERROR at setup of TestAutodiscover.test_simple ________________\n[CI/Test-2]   | \n[CI/Test-2]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f812560b090>\n[CI/Test-2]   | \n[CI/Test-2]   |     @async_unsafe\n[CI/Test-2]   |     def ensure_connection(self):\n[CI/Test-2]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[CI/Test-2]   |         if self.connection is None:\n[CI/Test-2]   |             with self.wrap_database_errors:\n[CI/Test-2]   | >               self.connect()\n[CI/Test-2]   | \n[CI/Test-2]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:219: \n[CI/Test-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[CI/Test-2]   | \n[CI/Test-2]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f812560b090>,)\n[CI/Test-2]   | kwargs = {}\n[CI/Test-2]   | \n[CI/Test-2]   |     @functools.wraps(func)\n[CI/Test-2]   |     def inner(*args, **kwargs):\n[CI/Test-2]   |         if not os.environ.get('DJANGO_ALLOW_ASYNC_UNSAFE'):\n[CI/Test-2]   |             # Detect a running event loop in this thread.\n[CI/Test-2]   |             try:\n[CI/Test-2]   |                 event_loop = get_running_loop()\n[CI/Test-2]   |             except RuntimeError:\n[CI/Test-2]   |                 pass\n[CI/Test-2]   |             else:\n[CI/Test-2]   |                 if PY37 or event_loop.is_running():\n[CI/Test-2]   |                     raise SynchronousOnlyOperation(message)\n[CI/Test-2]   |         # Pass onwards.\n[CI/Test-2]   | >       return func(*args, **kwargs)\n[CI/Test-2]   | \n[CI/Test-2]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: \n[CI/Test-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[CI/Test-2]   | \n[CI/Test-2]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f812560b090>\n[CI/Test-2]   | \n[CI/Test-2]   |     @async_unsafe\n[CI/Test-2]   |     def connect(self):\n[CI/Test-2]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[CI/Test-2]   |         # Check for invalid configurations.\n[CI/Test-2]   |         self.check_settings()\n[CI/Test-2]   |         # In case the previous connection was closed while in an atomic block\n[CI/Test-2]   |         self.in_atomic_block = False\n[CI/Test-2]   |         self.savepoint_ids = []\n[CI/Test-2]   |         self.needs_rollback = False\n[CI/Test-2]   |         # Reset parameters defining when to close the connection\n[CI/Test-2]   |         max_age = self.settings_dict['CONN_MAX_AGE']\n[CI/Test-2]   |         self.close_at = None if max_age is None else time.monotonic() + max_age\n[CI/Test-2]   |         self.closed_in_transaction = False\n[CI/Test-2]   |         self.errors_occurred = False\n[CI/Test-2]   |         # Establish the connection\n[CI/Test-2]   |         conn_params = self.get_connection_params()\n[CI/Test-2]   | >       self.connection = self.get_new_connection(conn_params)\n[CI/Test-2]   | \n[CI/Test-2]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:200: \n[CI/Test-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[CI/Test-2]   | \n[CI/Test-2]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f812560b090>, {'database': 'postgres', 'host': '127.0.0.1', 'password': 'modeltranslation', 'user': 'modeltranslation'})\n[CI/Test-2]   | kwargs = {}\n[CI/Test-2]   | \n[CI/Test-2]   |     @functools.wraps(func)\n[CI/Test-2]   |     def inner(*args, **kwargs):\n[CI/Test-2]   |         if not os.environ.get('DJANGO_ALLOW_ASYNC_UNSAFE'):\n[CI/Test-2]   |             # Detect a running event loop in this thread.\n[CI/Test-2]   |             try:\n[CI/Test-2]   |                 event_loop = get_running_loop()\n[CI/Test-2]   |             except RuntimeError:\n[CI/Test-2]   |                 pass\n[CI/Test-2]   |             else:\n[CI/Test-2]   |                 if PY37 or event_loop.is_running():\n[CI/Test-2]   |                     raise SynchronousOnlyOperation(message)\n[CI/Test-2]   |         # Pass onwards.\n[CI/Test-2]   | >       return func(*args, **kwargs)\n[CI/Test-2]   | \n[CI/Test-2]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: \n[CI/Test-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[CI/Test-2]   | \n[CI/Test-2]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f812560b090>\n[CI/Test-2]   | conn_params = {'database': 'postgres', 'host': '127.0.0.1', 'password': 'modeltranslation', 'user': 'modeltranslation'}\n[CI/Test-2]   | \n[CI/Test-2]   |     @async_unsafe\n[CI/Test-2]   |     def get_new_connection(self, conn_params):\n[CI/Test-2]   | >       connection = Database.connect(**conn_params)\n[CI/Test-2]   | \n[CI/Test-2]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/postgresql/base.py:187: \n[CI/Test-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[CI/Test-2]   | \n[CI/Test-2]   | dsn = 'user=modeltranslation password=modeltranslation host=127.0.0.1 dbname=postgres'\n[CI/Test-2]   | connection_factory = None, cursor_factory = None\n[CI/Test-2]   | kwargs = {'database': 'postgres', 'host': '127.0.0.1', 'password': 'modeltranslation', 'user': 'modeltranslation'}\n[CI/Test-2]   | kwasync = {}\n[CI/Test-2]   | \n[CI/Test-2]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[CI/Test-2]   |         \"\"\"\n[CI/Test-2]   |         Create a new database connection.\n[CI/Test-2]   |     \n[CI/Test-2]   |         The connection parameters can be specified as a string:\n[CI/Test-2]   |     \n[CI/Test-2]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[CI/Test-2]   |     \n[CI/Test-2]   |         or using a set of keyword arguments:\n[CI/Test-2]   |     \n[CI/Test-2]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[CI/Test-2]   |     \n[CI/Test-2]   |         Or as a mix of both. The basic connection parameters are:\n[CI/Test-2]   |     \n[CI/Test-2]   |         - *dbname*: the database name\n[CI/Test-2]   |         - *database*: the database name (only as keyword argument)\n[CI/Test-2]   |         - *user*: user name used to authenticate\n[CI/Test-2]   |         - *password*: password used to authenticate\n[CI/Test-2]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[CI/Test-2]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[CI/Test-2]   |     \n[CI/Test-2]   |         Using the *connection_factory* parameter a different class or connections\n[CI/Test-2]   |         factory can be specified. It should be a callable object taking a dsn\n[CI/Test-2]   |         argument.\n[CI/Test-2]   |     \n[CI/Test-2]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[CI/Test-2]   |         used by cursor().\n[CI/Test-2]   |     \n[CI/Test-2]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[CI/Test-2]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[CI/Test-2]   |     \n[CI/Test-2]   |         Any other keyword parameter will be passed to the underlying client\n[CI/Test-2]   |         library: the list of supported parameters depends on the library version.\n[CI/Test-2]   |     \n[CI/Test-2]   |         \"\"\"\n[CI/Test-2]   |         kwasync = {}\n[CI/Test-2]   |         if 'async' in kwargs:\n[CI/Test-2]   |             kwasync['async'] = kwargs.pop('async')\n[CI/Test-2]   |         if 'async_' in kwargs:\n[CI/Test-2]   |             kwasync['async_'] = kwargs.pop('async_')\n[CI/Test-2]   |     \n[CI/Test-2]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[CI/Test-2]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[CI/Test-2]   | E       psycopg2.OperationalError: connection to server at \"127.0.0.1\", port 5432 failed: Connection refused\n[CI/Test-2]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[CI/Test-2]   | \n[CI/Test-2]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[CI/Test-2]   | \n[CI/Test-2]   | The above exception was the direct cause of the following exception:\n[CI/Test-2]   | \n[CI/Test-2]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f812890e750>\n[CI/Test-2]   | \n[CI/Test-2]   |     @contextmanager\n[CI/Test-2]   |     def _nodb_cursor(self):\n[CI/Test-2]   |         try:\n[CI/Test-2]   | >           with super()._nodb_cursor() as cursor:\n[CI/Test-2]   | \n[CI/Test-2]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/postgresql/base.py:301: \n[CI/Test-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[CI/Test-2]   | \n[CI/Test-2]   | self = <contextlib._GeneratorContextManager object at 0x7f812560b0d0>\n[CI/Test-2]   | \n[CI/Test-2]   |     def __enter__(self):\n[CI/Test-2]   |         # do not keep args and kwds alive unnecessarily\n[CI/Test-2]   |         # they are only needed for recreation, which is not possible anymore\n[CI/Test-2]   |         del self.args, self.kwds, self.func\n[CI/Test-2]   |         try:\n[CI/Test-2]   | >           return next(self.gen)\n[CI/Test-2]   | \n[CI/Test-2]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/contextlib.py:112: \n[CI/Test-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[CI/Test-2]   | \n[CI/Test-2]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f812890e750>\n[CI/Test-2]   | \n[CI/Test-2]   |     @contextmanager\n[CI/Test-2]   |     def _nodb_cursor(self):\n[CI/Test-2]   |         \"\"\"\n[CI/Test-2]   |         Return a cursor from an alternative connection to be used when there is\n[CI/Test-2]   |         no need to access the main database, specifically for test db\n[CI/Test-2]   |         creation/deletion. This also prevents the production database from\n[CI/Test-2]   |         being exposed to potential child threads while (or after) the test\n[CI/Test-2]   |         database is destroyed. Refs #10868, #17786, #16969.\n[CI/Test-2]   |         \"\"\"\n[CI/Test-2]   |         conn = self.__class__({**self.settings_dict, 'NAME': None}, alias=NO_DB_ALIAS)\n[CI/Test-2]   |         try:\n[CI/Test-2]   | >           with conn.cursor() as cursor:\n[CI/Test-2]   | \n[CI/Test-2]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:620: \n[CI/Test-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[CI/Test-2]   | \n[CI/Test-2]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f812560b090>,)\n[CI/Test-2]   | kwargs = {}\n[CI/Test-2]   | \n[CI/Test-2]   |     @functools.wraps(func)\n[CI/Test-2]   |     def inner(*args, **kwargs):\n[CI/Test-2]   |         if not os.environ.get('DJANGO_ALLOW_ASYNC_UNSAFE'):\n[CI/Test-2]   |             # Detect a running event loop in this thread.\n[CI/Test-2]   |             try:\n[CI/Test-2]   |                 event_loop = get_running_loop()\n[CI/Test-2]   |             except RuntimeError:\n[CI/Test-2]   |                 pass\n[CI/Test-2]   |             else:\n[CI/Test-2]   |                 if PY37 or event_loop.is_running():\n[CI/Test-2]   |                     raise SynchronousOnlyOperation(message)\n[CI/Test-2]   |         # Pass onwards.\n[CI/Test-2]   | >       return func(*args, **kwargs)\n[CI/Test-2]   | \n[CI/Test-2]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: \n[CI/Test-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[CI/Test-2]   | \n[CI/Test-2]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f812560b090>\n[CI/Test-2]   | \n[CI/Test-2]   |     @async_unsafe\n[CI/Test-2]   |     def cursor(self):\n[CI/Test-2]   |         \"\"\"Create a cursor, opening a connection if necessary.\"\"\"\n[CI/Test-2]   | >       return self._cursor()\n[CI/Test-2]   | \n[CI/Test-2]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:259: \n[CI/Test-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[CI/Test-2]   | \n[CI/Test-2]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f812560b090>\n[CI/Test-2]   | name = None\n[CI/Test-2]   | \n[CI/Test-2]   |     def _cursor(self, name=None):\n[CI/Test-2]   | >       self.ensure_connection()\n[CI/Test-2]   | \n[CI/Test-2]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:235: \n[CI/Test-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[CI/Test-2]   | \n[CI/Test-2]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f812560b090>,)\n[CI/Test-2]   | kwargs = {}\n[CI/Test-2]   | \n[CI/Test-2]   |     @functools.wraps(func)\n[CI/Test-2]   |     def inner(*args, **kwargs):\n[CI/Test-2]   |         if not os.environ.get('DJANGO_ALLOW_ASYNC_UNSAFE'):\n[CI/Test-2]   |             # Detect a running event loop in this thread.\n[CI/Test-2]   |             try:\n[CI/Test-2]   |                 event_loop = get_running_loop()\n[CI/Test-2]   |             except RuntimeError:\n[CI/Test-2]   |                 pass\n[CI/Test-2]   |             else:\n[CI/Test-2]   |                 if PY37 or event_loop.is_running():\n[CI/Test-2]   |                     raise SynchronousOnlyOperation(message)\n[CI/Test-2]   |         # Pass onwards.\n[CI/Test-2]   | >       return func(*args, **kwargs)\n[CI/Test-2]   | \n[CI/Test-2]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: \n[CI/Test-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[CI/Test-2]   | \n[CI/Test-2]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f812560b090>\n[CI/Test-2]   | \n[CI/Test-2]   |     @async_unsafe\n[CI/Test-2]   |     def ensure_connection(self):\n[CI/Test-2]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[CI/Test-2]   |         if self.connection is None:\n[CI/Test-2]   |             with self.wrap_database_errors:\n[CI/Test-2]   | >               self.connect()\n[CI/Test-2]   | \n[CI/Test-2]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:219: \n[CI/Test-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[CI/Test-2]   | \n[CI/Test-2]   | self = <django.db.utils.DatabaseErrorWrapper object at 0x7f812560ba90>\n[CI/Test-2]   | exc_type = <class 'psycopg2.OperationalError'>\n[CI/Test-2]   | exc_value = OperationalError('connection to server at \"127.0.0.1\", port 5432 failed: Connection refused\\n\\tIs the server running on that host and accepting TCP/IP connections?\\n')\n[CI/Test-2]   | traceback = <traceback object at 0x7f8126520460>\n[CI/Test-2]   | \n[CI/Test-2]   |     def __exit__(self, exc_type, exc_value, traceback):\n[CI/Test-2]   |         if exc_type is None:\n[CI/Test-2]   |             return\n[CI/Test-2]   |         for dj_exc_type in (\n[CI/Test-2]   |                 DataError,\n[CI/Test-2]   |                 OperationalError,\n[CI/Test-2]   |                 IntegrityError,\n[CI/Test-2]   |                 InternalError,\n[CI/Test-2]   |                 ProgrammingError,\n[CI/Test-2]   |                 NotSupportedError,\n[CI/Test-2]   |                 DatabaseError,\n[CI/Test-2]   |                 InterfaceError,\n[CI/Test-2]   |                 Error,\n[CI/Test-2]   |         ):\n[CI/Test-2]   |             db_exc_type = getattr(self.wrapper.Database, dj_exc_type.__name__)\n[CI/Test-2]   |             if issubclass(exc_type, db_exc_type):\n[CI/Test-2]   |                 dj_exc_value = dj_exc_type(*exc_value.args)\n[CI/Test-2]   |                 # Only set the 'errors_occurred' flag for errors that may make\n[CI/Test-2]   |                 # the connection unusable.\n[CI/Test-2]   |                 if dj_exc_type not in (DataError, IntegrityError):\n[CI/Test-2]   |                     self.wrapper.errors_occurred = True\n[CI/Test-2]   | >               raise dj_exc_value.with_traceback(traceback) from exc_value\n[CI/Test-2]   | \n[CI/Test-2]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/utils.py:90: \n[CI/Test-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[CI/Test-2]   | \n[CI/Test-2]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f812560b090>\n[CI/Test-2]   | \n[CI/Test-2]   |     @async_unsafe\n[CI/Test-2]   |     def ensure_connection(self):\n[CI/Test-2]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[CI/Test-2]   |         if self.connection is None:\n[CI/Test-2]   |             with self.wrap_database_errors:\n[CI/Test-2]   | >               self.connect()\n[CI/Test-2]   | \n[CI/Test-2]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:219: \n[CI/Test-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[CI/Test-2]   | \n[CI/Test-2]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f812560b090>,)\n[CI/Test-2]   | kwargs = {}\n[CI/Test-2]   | \n[CI/Test-2]   |     @functools.wraps(func)\n[CI/Test-2]   |     def inner(*args, **kwargs):\n[CI/Test-2]   |         if not os.environ.get('DJANGO_ALLOW_ASYNC_UNSAFE'):\n[CI/Test-2]   |             # Detect a running event loop in this thread.\n[CI/Test-2]   |             try:\n[CI/Test-2]   |                 event_loop = get_running_loop()\n[CI/Test-2]   |             except RuntimeError:\n[CI/Test-2]   |                 pass\n[CI/Test-2]   |             else:\n[CI/Test-2]   |                 if PY37 or event_loop.is_running():\n[CI/Test-2]   |                     raise SynchronousOnlyOperation(message)\n[CI/Test-2]   |         # Pass onwards.\n[CI/Test-2]   | >       return func(*args, **kwargs)\n[CI/Test-2]   | \n[CI/Test-2]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: \n[CI/Test-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[CI/Test-2]   | \n[CI/Test-2]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f812560b090>\n[CI/Test-2]   | \n[CI/Test-2]   |     @async_unsafe\n[CI/Test-2]   |     def connect(self):\n[CI/Test-2]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[CI/Test-2]   |         # Check for invalid configurations.\n[CI/Test-2]   |         self.check_settings()\n[CI/Test-2]   |         # In case the previous connection was closed while in an atomic block\n[CI/Test-2]   |         self.in_atomic_block = False\n[CI/Test-2]   |         self.savepoint_ids = []\n[CI/Test-2]   |         self.needs_rollback = False\n[CI/Test-2]   |         # Reset parameters defining when to close the connection\n[CI/Test-2]   |         max_age = self.settings_dict['CONN_MAX_AGE']\n[CI/Test-2]   |         self.close_at = None if max_age is None else time.monotonic() + max_age\n[CI/Test-2]   |         self.closed_in_transaction = False\n[CI/Test-2]   |         self.errors_occurred = False\n[CI/Test-2]   |         # Establish the connection\n[CI/Test-2]   |         conn_params = self.get_connection_params()\n[CI/Test-2]   | >       self.connection = self.get_new_connection(conn_params)\n[CI/Test-2]   | \n[CI/Test-2]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:200: \n[CI/Test-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[CI/Test-2]   | \n[CI/Test-2]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f812560b090>, {'database': 'postgres', 'host': '127.0.0.1', 'password': 'modeltranslation', 'user': 'modeltranslation'})\n[CI/Test-2]   | kwargs = {}\n[CI/Test-2]   | \n[CI/Test-2]   |     @functools.wraps(func)\n[CI/Test-2]   |     def inner(*args, **kwargs):\n[CI/Test-2]   |         if not os.environ.get('DJANGO_ALLOW_ASYNC_UNSAFE'):\n[CI/Test-2]   |             # Detect a running event loop in this thread.\n[CI/Test-2]   |             try:\n[CI/Test-2]   |                 event_loop = get_running_loop()\n[CI/Test-2]   |             except RuntimeError:\n[CI/Test-2]   |                 pass\n[CI/Test-2]   |             else:\n[CI/Test-2]   |                 if PY37 or event_loop.is_running():\n[CI/Test-2]   |                     raise SynchronousOnlyOperation(message)\n[CI/Test-2]   |         # Pass onwards.\n[CI/Test-2]   | >       return func(*args, **kwargs)\n[CI/Test-2]   | \n[CI/Test-2]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: \n[CI/Test-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[CI/Test-2]   | \n[CI/Test-2]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f812560b090>\n[CI/Test-2]   | conn_params = {'database': 'postgres', 'host': '127.0.0.1', 'password': 'modeltranslation', 'user': 'modeltranslation'}\n[CI/Test-2]   | \n[CI/Test-2]   |     @async_unsafe\n[CI/Test-2]   |     def get_new_connection(self, conn_params):\n[CI/Test-2]   | >       connection = Database.connect(**conn_params)\n[CI/Test-2]   | \n[CI/Test-2]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/postgresql/base.py:187: \n[CI/Test-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[CI/Test-2]   | \n[CI/Test-2]   | dsn = 'user=modeltranslation password=modeltranslation host=127.0.0.1 dbname=postgres'\n[CI/Test-2]   | connection_factory = None, cursor_factory = None\n[CI/Test-2]   | kwargs = {'database': 'postgres', 'host': '127.0.0.1', 'password': 'modeltranslation', 'user': 'modeltranslation'}\n[CI/Test-2]   | kwasync = {}\n[CI/Test-2]   | \n[CI/Test-2]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[CI/Test-2]   |         \"\"\"\n[CI/Test-2]   |         Create a new database connection.\n[CI/Test-2]   |     \n[CI/Test-2]   |         The connection parameters can be specified as a string:\n[CI/Test-2]   |     \n[CI/Test-2]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[CI/Test-2]   |     \n[CI/Test-2]   |         or using a set of keyword arguments:\n[CI/Test-2]   |     \n[CI/Test-2]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[CI/Test-2]   |     \n[CI/Test-2]   |         Or as a mix of both. The basic connection parameters are:\n[CI/Test-2]   |     \n[CI/Test-2]   |         - *dbname*: the database name\n[CI/Test-2]   |         - *database*: the database name (only as keyword argument)\n[CI/Test-2]   |         - *user*: user name used to authenticate\n[CI/Test-2]   |         - *password*: password used to authenticate\n[CI/Test-2]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[CI/Test-2]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[CI/Test-2]   |     \n[CI/Test-2]   |         Using the *connection_factory* parameter a different class or connections\n[CI/Test-2]   |         factory can be specified. It should be a callable object taking a dsn\n[CI/Test-2]   |         argument.\n[CI/Test-2]   |     \n[CI/Test-2]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[CI/Test-2]   |         used by cursor().\n[CI/Test-2]   |     \n[CI/Test-2]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[CI/Test-2]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[CI/Test-2]   |     \n[CI/Test-2]   |         Any other keyword parameter will be passed to the underlying client\n[CI/Test-2]   |         library: the list of supported parameters depends on the library version.\n[CI/Test-2]   |     \n[CI/Test-2]   |         \"\"\"\n[CI/Test-2]   |         kwasync = {}\n[CI/Test-2]   |         if 'async' in kwargs:\n[CI/Test-2]   |             kwasync['async'] = kwargs.pop('async')\n[CI/Test-2]   |         if 'async_' in kwargs:\n[CI/Test-2]   |             kwasync['async_'] = kwargs.pop('async_')\n[CI/Test-2]   |     \n[CI/Test-2]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[CI/Test-2]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[CI/Test-2]   | E       django.db.utils.OperationalError: connection to server at \"127.0.0.1\", port 5432 failed: Connection refused\n[CI/Test-2]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[CI/Test-2]   | \n[CI/Test-2]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[CI/Test-2]   | \n[CI/Test-2]   | During handling of the above exception, another exception occurred:\n[CI/Test-2]   | \n[CI/Test-2]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f812560b2d0>\n[CI/Test-2]   | \n[CI/Test-2]   |     @async_unsafe\n[CI/Test-2]   |     def ensure_connection(self):\n[CI/Test-2]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[CI/Test-2]   |         if self.connection is None:\n[CI/Test-2]   |             with self.wrap_database_errors:\n[CI/Test-2]   | >               self.connect()\n[CI/Test-2]   | \n[CI/Test-2]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:219: \n[CI/Test-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[CI/Test-2]   | \n[CI/Test-2]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f812560b2d0>,)\n[CI/Test-2]   | kwargs = {}\n[CI/Test-2]   | \n[CI/Test-2]   |     @functools.wraps(func)\n[CI/Test-2]   |     def inner(*args, **kwargs):\n[CI/Test-2]   |         if not os.environ.get('DJANGO_ALLOW_ASYNC_UNSAFE'):\n[CI/Test-2]   |             # Detect a running event loop in this thread.\n[CI/Test-2]   |             try:\n[CI/Test-2]   |                 event_loop = get_running_loop()\n[CI/Test-2]   |             except RuntimeError:\n[CI/Test-2]   |                 pass\n[CI/Test-2]   |             else:\n[CI/Test-2]   |                 if PY37 or event_loop.is_running():\n[CI/Test-2]   |                     raise SynchronousOnlyOperation(message)\n[CI/Test-2]   |         # Pass onwards.\n[CI/Test-2]   | >       return func(*args, **kwargs)\n[CI/Test-2]   | \n[CI/Test-2]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: \n[CI/Test-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[CI/Test-2]   | \n[CI/Test-2]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f812560b2d0>\n[CI/Test-2]   | \n[CI/Test-2]   |     @async_unsafe\n[CI/Test-2]   |     def connect(self):\n[CI/Test-2]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[CI/Test-2]   |         # Check for invalid configurations.\n[CI/Test-2]   |         self.check_settings()\n[CI/Test-2]   |         # In case the previous connection was closed while in an atomic block\n[CI/Test-2]   |         self.in_atomic_block = False\n[CI/Test-2]   |         self.savepoint_ids = []\n[CI/Test-2]   |         self.needs_rollback = False\n[CI/Test-2]   |         # Reset parameters defining when to close the connection\n[CI/Test-2]   |         max_age = self.settings_dict['CONN_MAX_AGE']\n[CI/Test-2]   |         self.close_at = None if max_age is None else time.monotonic() + max_age\n[CI/Test-2]   |         self.closed_in_transaction = False\n[CI/Test-2]   |         self.errors_occurred = False\n[CI/Test-2]   |         # Establish the connection\n[CI/Test-2]   |         conn_params = self.get_connection_params()\n[CI/Test-2]   | >       self.connection = self.get_new_connection(conn_params)\n[CI/Test-2]   | \n[CI/Test-2]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:200: \n[CI/Test-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[CI/Test-2]   | \n[CI/Test-2]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f812560b2d0>, {'database': 'modeltranslation', 'host': '127.0.0.1', 'password': 'modeltranslation', 'user': 'modeltranslation'})\n[CI/Test-2]   | kwargs = {}\n[CI/Test-2]   | \n[CI/Test-2]   |     @functools.wraps(func)\n[CI/Test-2]   |     def inner(*args, **kwargs):\n[CI/Test-2]   |         if not os.environ.get('DJANGO_ALLOW_ASYNC_UNSAFE'):\n[CI/Test-2]   |             # Detect a running event loop in this thread.\n[CI/Test-2]   |             try:\n[CI/Test-2]   |                 event_loop = get_running_loop()\n[CI/Test-2]   |             except RuntimeError:\n[CI/Test-2]   |                 pass\n[CI/Test-2]   |             else:\n[CI/Test-2]   |                 if PY37 or event_loop.is_running():\n[CI/Test-2]   |                     raise SynchronousOnlyOperation(message)\n[CI/Test-2]   |         # Pass onwards.\n[CI/Test-2]   | >       return func(*args, **kwargs)\n[CI/Test-2]   | \n[CI/Test-2]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: \n[CI/Test-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[CI/Test-2]   | \n[CI/Test-2]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f812560b2d0>\n[CI/Test-2]   | conn_params = {'database': 'modeltranslation', 'host': '127.0.0.1', 'password': 'modeltranslation', 'user': 'modeltranslation'}\n[CI/Test-2]   | \n[CI/Test-2]   |     @async_unsafe\n[CI/Test-2]   |     def get_new_connection(self, conn_params):\n[CI/Test-2]   | >       connection = Database.connect(**conn_params)\n[CI/Test-2]   | \n[CI/Test-2]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/postgresql/base.py:187: \n[CI/Test-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[CI/Test-2]   | \n[CI/Test-2]   | dsn = 'user=modeltranslation password=modeltranslation host=127.0.0.1 dbname=modeltranslation'\n[CI/Test-2]   | connection_factory = None, cursor_factory = None\n[CI/Test-2]   | kwargs = {'database': 'modeltranslation', 'host': '127.0.0.1', 'password': 'modeltranslation', 'user': 'modeltranslation'}\n[CI/Test-2]   | kwasync = {}\n[CI/Test-2]   | \n[CI/Test-2]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[CI/Test-2]   |         \"\"\"\n[CI/Test-2]   |         Create a new database connection.\n[CI/Test-2]   |     \n[CI/Test-2]   |         The connection parameters can be specified as a string:\n[CI/Test-2]   |     \n[CI/Test-2]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[CI/Test-2]   |     \n[CI/Test-2]   |         or using a set of keyword arguments:\n[CI/Test-2]   |     \n[CI/Test-2]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[CI/Test-2]   |     \n[CI/Test-2]   |         Or as a mix of both. The basic connection parameters are:\n[CI/Test-2]   |     \n[CI/Test-2]   |         - *dbname*: the database name\n[CI/Test-2]   |         - *database*: the database name (only as keyword argument)\n[CI/Test-2]   |         - *user*: user name used to authenticate\n[CI/Test-2]   |         - *password*: password used to authenticate\n[CI/Test-2]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[CI/Test-2]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[CI/Test-2]   |     \n[CI/Test-2]   |         Using the *connection_factory* parameter a different class or connections\n[CI/Test-2]   |         factory can be specified. It should be a callable object taking a dsn\n[CI/Test-2]   |         argument.\n[CI/Test-2]   |     \n[CI/Test-2]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[CI/Test-2]   |         used by cursor().\n[CI/Test-2]   |     \n[CI/Test-2]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[CI/Test-2]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[CI/Test-2]   |     \n[CI/Test-2]   |         Any other keyword parameter will be passed to the underlying client\n[CI/Test-2]   |         library: the list of supported parameters depends on the library version.\n[CI/Test-2]   |     \n[CI/Test-2]   |         \"\"\"\n[CI/Test-2]   |         kwasync = {}\n[CI/Test-2]   |         if 'async' in kwargs:\n[CI/Test-2]   |             kwasync['async'] = kwargs.pop('async')\n[CI/Test-2]   |         if 'async_' in kwargs:\n[CI/Test-2]   |             kwasync['async_'] = kwargs.pop('async_')\n[CI/Test-2]   |     \n[CI/Test-2]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[CI/Test-2]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[CI/Test-2]   | E       psycopg2.OperationalError: connection to server at \"127.0.0.1\", port 5432 failed: Connection refused\n[CI/Test-2]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[CI/Test-2]   | \n[CI/Test-2]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[CI/Test-2]   | \n[CI/Test-2]   | The above exception was the direct cause of the following exception:\n[CI/Test-2]   | \n[CI/Test-2]   | request = <SubRequest '_django_setup_unittest' for <TestCaseFunction test_duplication>>\n[CI/Test-2]   | django_db_blocker = <pytest_django.plugin._DatabaseBlocker object at 0x7f812978c950>\n[CI/Test-2]   | \n[CI/Test-2]   |     @pytest.fixture(autouse=True, scope=\"class\")\n[CI/Test-2]   |     def _django_setup_unittest(\n[CI/Test-2]   |         request,\n[CI/Test-2]   |         django_db_blocker: \"_DatabaseBlocker\",\n[CI/Test-2]   |     ) -> Generator[None, None, None]:\n[CI/Test-2]   |         \"\"\"Setup a django unittest, internal to pytest-django.\"\"\"\n[CI/Test-2]   |         if not django_settings_is_configured() or not is_django_unittest(request):\n[CI/Test-2]   |             yield\n[CI/Test-2]   |             return\n[CI/Test-2]   |     \n[CI/Test-2]   |         # Fix/patch pytest.\n[CI/Test-2]   |         # Before pytest 5.4: https://github.com/pytest-dev/pytest/issues/5991\n[CI/Test-2]   |         # After pytest 5.4: https://github.com/pytest-dev/pytest-django/issues/824\n[CI/Test-2]   |         from _pytest.unittest import TestCaseFunction\n[CI/Test-2]   |         original_runtest = TestCaseFunction.runtest\n[CI/Test-2]   |     \n[CI/Test-2]   |         def non_debugging_runtest(self) -> None:\n[CI/Test-2]   |             self._testcase(result=self)\n[CI/Test-2]   |     \n[CI/Test-2]   |         try:\n[CI/Test-2]   |             TestCaseFunction.runtest = non_debugging_runtest  # type: ignore[assignment]\n[CI/Test-2]   |     \n[CI/Test-2]   | >           request.getfixturevalue(\"django_db_setup\")\n[CI/Test-2]   | \n[CI/Test-2]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/pytest_django/plugin.py:490: \n[CI/Test-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[CI/Test-2]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/pytest_django/fixtures.py:125: in django_db_setup\n[CI/Test-2]   |     **setup_databases_args\n[CI/Test-2]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/test/utils.py:183: in setup_databases\n[CI/Test-2]   |     serialize=connection.settings_dict['TEST'].get('SERIALIZE', True),\n[CI/Test-2]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/creation.py:57: in create_test_db\n[CI/Test-2]   |     self._create_test_db(verbosity, autoclobber, keepdb)\n[CI/Test-2]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/creation.py:191: in _create_test_db\n[CI/Test-2]   |     with self._nodb_cursor() as cursor:\n[CI/Test-2]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/contextlib.py:112: in __enter__\n[CI/Test-2]   |     return next(self.gen)\n[CI/Test-2]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/postgresql/base.py:319: in _nodb_cursor\n[CI/Test-2]   |     with conn.cursor() as cursor:\n[CI/Test-2]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: in inner\n[CI/Test-2]   |     return func(*args, **kwargs)\n[CI/Test-2]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:259: in cursor\n[CI/Test-2]   |     return self._cursor()\n[CI/Test-2]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:235: in _cursor\n[CI/Test-2]   |     self.ensure_connection()\n[CI/Test-2]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: in inner\n[CI/Test-2]   |     return func(*args, **kwargs)\n[CI/Test-2]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:219: in ensure_connection\n[CI/Test-2]   |     self.connect()\n[CI/Test-2]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/utils.py:90: in __exit__\n[CI/Test-2]   |     raise dj_exc_value.with_traceback(traceback) from exc_value\n[CI/Test-2]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:219: in ensure_connection\n[CI/Test-2]   |     self.connect()\n[CI/Test-2]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: in inner\n[CI/Test-2]   |     return func(*args, **kwargs)\n[CI/Test-2]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:200: in connect\n[CI/Test-2]   |     self.connection = self.get_new_connection(conn_params)\n[CI/Test-2]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: in inner\n[CI/Test-2]   |     return func(*args, **kwargs)\n[CI/Test-2]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/postgresql/base.py:187: in get_new_connection\n[CI/Test-2]   |     connection = Database.connect(**conn_params)\n[CI/Test-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[CI/Test-2]   | \n[CI/Test-2]   | dsn = 'user=modeltranslation password=modeltranslation host=127.0.0.1 dbname=modeltranslation'\n[CI/Test-2]   | connection_factory = None, cursor_factory = None\n[CI/Test-2]   | kwargs = {'database': 'modeltranslation', 'host': '127.0.0.1', 'password': 'modeltranslation', 'user': 'modeltranslation'}\n[CI/Test-2]   | kwasync = {}\n[CI/Test-2]   | \n[CI/Test-2]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[CI/Test-2]   |         \"\"\"\n[CI/Test-2]   |         Create a new database connection.\n[CI/Test-2]   |     \n[CI/Test-2]   |         The connection parameters can be specified as a string:\n[CI/Test-2]   |     \n[CI/Test-2]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[CI/Test-2]   |     \n[CI/Test-2]   |         or using a set of keyword arguments:\n[CI/Test-2]   |     \n[CI/Test-2]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[CI/Test-2]   |     \n[CI/Test-2]   |         Or as a mix of both. The basic connection parameters are:\n[CI/Test-2]   |     \n[CI/Test-2]   |         - *dbname*: the database name\n[CI/Test-2]   |         - *database*: the database name (only as keyword argument)\n[CI/Test-2]   |         - *user*: user name used to authenticate\n[CI/Test-2]   |         - *password*: password used to authenticate\n[CI/Test-2]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[CI/Test-2]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[CI/Test-2]   |     \n[CI/Test-2]   |         Using the *connection_factory* parameter a different class or connections\n[CI/Test-2]   |         factory can be specified. It should be a callable object taking a dsn\n[CI/Test-2]   |         argument.\n[CI/Test-2]   |     \n[CI/Test-2]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[CI/Test-2]   |         used by cursor().\n[CI/Test-2]   |     \n[CI/Test-2]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[CI/Test-2]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[CI/Test-2]   |     \n[CI/Test-2]   |         Any other keyword parameter will be passed to the underlying client\n[CI/Test-2]   |         library: the list of supported parameters depends on the library version.\n[CI/Test-2]   |     \n[CI/Test-2]   |         \"\"\"\n[CI/Test-2]   |         kwasync = {}\n[CI/Test-2]   |         if 'async' in kwargs:\n[CI/Test-2]   |             kwasync['async'] = kwargs.pop('async')\n[CI/Test-2]   |         if 'async_' in kwargs:\n[CI/Test-2]   |             kwasync['async_'] = kwargs.pop('async_')\n[CI/Test-2]   |     \n[CI/Test-2]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[CI/Test-2]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[CI/Test-2]   | E       django.db.utils.OperationalError: connection to server at \"127.0.0.1\", port 5432 failed: Connection refused\n[CI/Test-2]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[CI/Test-2]   | \n[CI/Test-2]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[CI/Test-2]   | ___________ ERROR at setup of ModeltranslationTest.test_constructor ____________\n[CI/Test-2]   | \n[CI/Test-2]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f812560b090>\n[CI/Test-2]   | \n[CI/Test-2]   |     @async_unsafe\n[CI/Test-2]   |     def ensure_connection(self):\n[CI/Test-2]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[CI/Test-2]   |         if self.connection is None:\n[CI/Test-2]   |             with self.wrap_database_errors:\n[CI/Test-2]   | >               self.connect()\n[CI/Test-2]   | \n[CI/Test-2]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:219: \n[CI/Test-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[CI/Test-2]   | \n[CI/Test-2]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f812560b090>,)\n[CI/Test-2]   | kwargs = {}\n[CI/Test-2]   | \n[CI/Test-2]   |     @functools.wraps(func)\n[CI/Test-2]   |     def inner(*args, **kwargs):\n[CI/Test-2]   |         if not os.environ.get('DJANGO_ALLOW_ASYNC_UNSAFE'):\n[CI/Test-2]   |             # Detect a running event loop in this thread.\n[CI/Test-2]   |             try:\n[CI/Test-2]   |                 event_loop = get_running_loop()\n[CI/Test-2]   |             except RuntimeError:\n[CI/Test-2]   |                 pass\n[CI/Test-2]   |             else:\n[CI/Test-2]   |                 if PY37 or event_loop.is_running():\n[CI/Test-2]   |                     raise SynchronousOnlyOperation(message)\n[CI/Test-2]   |         # Pass onwards.\n[CI/Test-2]   | >       return func(*args, **kwargs)\n[CI/Test-2]   | \n[CI/Test-2]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: \n[CI/Test-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[CI/Test-2]   | \n[CI/Test-2]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f812560b090>\n[CI/Test-2]   | \n[CI/Test-2]   |     @async_unsafe\n[CI/Test-2]   |     def connect(self):\n[CI/Test-2]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[CI/Test-2]   |         # Check for invalid configurations.\n[CI/Test-2]   |         self.check_settings()\n[CI/Test-2]   |         # In case the previous connection was closed while in an atomic block\n[CI/Test-2]   |         self.in_atomic_block = False\n[CI/Test-2]   |         self.savepoint_ids = []\n[CI/Test-2]   |         self.needs_rollback = False\n[CI/Test-2]   |         # Reset parameters defining when to close the connection\n[CI/Test-2]   |         max_age = self.settings_dict['CONN_MAX_AGE']\n[CI/Test-2]   |         self.close_at = None if max_age is None else time.monotonic() + max_age\n[CI/Test-2]   |         self.closed_in_transaction = False\n[CI/Test-2]   |         self.errors_occurred = False\n[CI/Test-2]   |         # Establish the connection\n[CI/Test-2]   |         conn_params = self.get_connection_params()\n[CI/Test-2]   | >       self.connection = self.get_new_connection(conn_params)\n[CI/Test-2]   | \n[CI/Test-2]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:200: \n[CI/Test-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[CI/Test-2]   | \n[CI/Test-2]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f812560b090>, {'database': 'postgres', 'host': '127.0.0.1', 'password': 'modeltranslation', 'user': 'modeltranslation'})\n[CI/Test-2]   | kwargs = {}\n[CI/Test-2]   | \n[CI/Test-2]   |     @functools.wraps(func)\n[CI/Test-2]   |     def inner(*args, **kwargs):\n[CI/Test-2]   |         if not os.environ.get('DJANGO_ALLOW_ASYNC_UNSAFE'):\n[CI/Test-2]   |             # Detect a running event loop in this thread.\n[CI/Test-2]   |             try:\n[CI/Test-2]   |                 event_loop = get_running_loop()\n[CI/Test-2]   |             except RuntimeError:\n[CI/Test-2]   |                 pass\n[CI/Test-2]   |             else:\n[CI/Test-2]   |                 if PY37 or event_loop.is_running():\n[CI/Test-2]   |                     raise SynchronousOnlyOperation(message)\n[CI/Test-2]   |         # Pass onwards.\n[CI/Test-2]   | >       return func(*args, **kwargs)\n[CI/Test-2]   | \n[CI/Test-2]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: \n[CI/Test-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[CI/Test-2]   | \n[CI/Test-2]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f812560b090>\n[CI/Test-2]   | conn_params = {'database': 'postgres', 'host': '127.0.0.1', 'password': 'modeltranslation', 'user': 'modeltranslation'}\n[CI/Test-2]   | \n[CI/Test-2]   |     @async_unsafe\n[CI/Test-2]   |     def get_new_connection(self, conn_params):\n[CI/Test-2]   | >       connection = Database.connect(**conn_params)\n[CI/Test-2]   | \n[CI/Test-2]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/postgresql/base.py:187: \n[CI/Test-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[CI/Test-2]   | \n[CI/Test-2]   | dsn = 'user=modeltranslation password=modeltranslation host=127.0.0.1 dbname=postgres'\n[CI/Test-2]   | connection_factory = None, cursor_factory = None\n[CI/Test-2]   | kwargs = {'database': 'postgres', 'host': '127.0.0.1', 'password': 'modeltranslation', 'user': 'modeltranslation'}\n[CI/Test-2]   | kwasync = {}\n[CI/Test-2]   | \n[CI/Test-2]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[CI/Test-2]   |         \"\"\"\n[CI/Test-2]   |         Create a new database connection.\n[CI/Test-2]   |     \n[CI/Test-2]   |         The connection parameters can be specified as a string:\n[CI/Test-2]   |     \n[CI/Test-2]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[CI/Test-2]   |     \n[CI/Test-2]   |         or using a set of keyword arguments:\n[CI/Test-2]   |     \n[CI/Test-2]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[CI/Test-2]   |     \n[CI/Test-2]   |         Or as a mix of both. The basic connection parameters are:\n[CI/Test-2]   |     \n[CI/Test-2]   |         - *dbname*: the database name\n[CI/Test-2]   |         - *database*: the database name (only as keyword argument)\n[CI/Test-2]   |         - *user*: user name used to authenticate\n[CI/Test-2]   |         - *password*: password used to authenticate\n[CI/Test-2]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[CI/Test-2]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[CI/Test-2]   |     \n[CI/Test-2]   |         Using the *connection_factory* parameter a different class or connections\n[CI/Test-2]   |         factory can be specified. It should be a callable object taking a dsn\n[CI/Test-2]   |         argument.\n[CI/Test-2]   |     \n[CI/Test-2]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[CI/Test-2]   |         used by cursor().\n[CI/Test-2]   |     \n[CI/Test-2]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[CI/Test-2]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[CI/Test-2]   |     \n[CI/Test-2]   |         Any other keyword parameter will be passed to the underlying client\n[CI/Test-2]   |         library: the list of supported parameters depends on the library version.\n[CI/Test-2]   |     \n[CI/Test-2]   |         \"\"\"\n[CI/Test-2]   |         kwasync = {}\n[CI/Test-2]   |         if 'async' in kwargs:\n[CI/Test-2]   |             kwasync['async'] = kwargs.pop('async')\n[CI/Test-2]   |         if 'async_' in kwargs:\n[CI/Test-2]   |             kwasync['async_'] = kwargs.pop('async_')\n[CI/Test-2]   |     \n[CI/Test-2]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[CI/Test-2]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[CI/Test-2]   | E       psycopg2.OperationalError: connection to server at \"127.0.0.1\", port 5432 failed: Connection refused\n[CI/Test-2]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[CI/Test-2]   | \n[CI/Test-2]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[CI/Test-2]   | \n[CI/Test-2]   | The above exception was the direct cause of the following exception:\n[CI/Test-2]   | \n[CI/Test-2]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f812890e750>\n[CI/Test-2]   | \n[CI/Test-2]   |     @contextmanager\n[CI/Test-2]   |     def _nodb_cursor(self):\n[CI/Test-2]   |         try:\n[CI/Test-2]   | >           with super()._nodb_cursor() as cursor:\n[CI/Test-2]   | \n[CI/Test-2]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/postgresql/base.py:301: \n[CI/Test-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[CI/Test-2]   | \n[CI/Test-2]   | self = <contextlib._GeneratorContextManager object at 0x7f812560b0d0>\n[CI/Test-2]   | \n[CI/Test-2]   |     def __enter__(self):\n[CI/Test-2]   |         # do not keep args and kwds alive unnecessarily\n[CI/Test-2]   |         # they are only needed for recreation, which is not possible anymore\n[CI/Test-2]   |         del self.args, self.kwds, self.func\n[CI/Test-2]   |         try:\n[CI/Test-2]   | >           return next(self.gen)\n[CI/Test-2]   | \n[CI/Test-2]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/contextlib.py:112: \n[CI/Test-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[CI/Test-2]   | \n[CI/Test-2]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f812890e750>\n[CI/Test-2]   | \n[CI/Test-2]   |     @contextmanager\n[CI/Test-2]   |     def _nodb_cursor(self):\n[CI/Test-2]   |         \"\"\"\n[CI/Test-2]   |         Return a cursor from an alternative connection to be used when there is\n[CI/Test-2]   |         no need to access the main database, specifically for test db\n[CI/Test-2]   |         creation/deletion. This also prevents the production database from\n[CI/Test-2]   |         being exposed to potential child threads while (or after) the test\n[CI/Test-2]   |         database is destroyed. Refs #10868, #17786, #16969.\n[CI/Test-2]   |         \"\"\"\n[CI/Test-2]   |         conn = self.__class__({**self.settings_dict, 'NAME': None}, alias=NO_DB_ALIAS)\n[CI/Test-2]   |         try:\n[CI/Test-2]   | >           with conn.cursor() as cursor:\n[CI/Test-2]   | \n[CI/Test-2]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:620: \n[CI/Test-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[CI/Test-2]   | \n[CI/Test-2]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f812560b090>,)\n[CI/Test-2]   | kwargs = {}\n[CI/Test-2]   | \n[CI/Test-2]   |     @functools.wraps(func)\n[CI/Test-2]   |     def inner(*args, **kwargs):\n[CI/Test-2]   |         if not os.environ.get('DJANGO_ALLOW_ASYNC_UNSAFE'):\n[CI/Test-2]   |             # Detect a running event loop in this thread.\n[CI/Test-2]   |             try:\n[CI/Test-2]   |                 event_loop = get_running_loop()\n[CI/Test-2]   |             except RuntimeError:\n[CI/Test-2]   |                 pass\n[CI/Test-2]   |             else:\n[CI/Test-2]   |                 if PY37 or event_loop.is_running():\n[CI/Test-2]   |                     raise SynchronousOnlyOperation(message)\n[CI/Test-2]   |         # Pass onwards.\n[CI/Test-2]   | >       return func(*args, **kwargs)\n[CI/Test-2]   | \n[CI/Test-2]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: \n[CI/Test-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[CI/Test-2]   | \n[CI/Test-2]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f812560b090>\n[CI/Test-2]   | \n[CI/Test-2]   |     @async_unsafe\n[CI/Test-2]   |     def cursor(self):\n[CI/Test-2]   |         \"\"\"Create a cursor, opening a connection if necessary.\"\"\"\n[CI/Test-2]   | >       return self._cursor()\n[CI/Test-2]   | \n[CI/Test-2]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:259: \n[CI/Test-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[CI/Test-2]   | \n[CI/Test-2]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f812560b090>\n[CI/Test-2]   | name = None\n[CI/Test-2]   | \n[CI/Test-2]   |     def _cursor(self, name=None):\n[CI/Test-2]   | >       self.ensure_connection()\n[CI/Test-2]   | \n[CI/Test-2]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:235: \n[CI/Test-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[CI/Test-2]   | \n[CI/Test-2]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f812560b090>,)\n[CI/Test-2]   | kwargs = {}\n[CI/Test-2]   | \n[CI/Test-2]   |     @functools.wraps(func)\n[CI/Test-2]   |     def inner(*args, **kwargs):\n[CI/Test-2]   |         if not os.environ.get('DJANGO_ALLOW_ASYNC_UNSAFE'):\n[CI/Test-2]   |             # Detect a running event loop in this thread.\n[CI/Test-2]   |             try:\n[CI/Test-2]   |                 event_loop = get_running_loop()\n[CI/Test-2]   |             except RuntimeError:\n[CI/Test-2]   |                 pass\n[CI/Test-2]   |             else:\n[CI/Test-2]   |                 if PY37 or event_loop.is_running():\n[CI/Test-2]   |                     raise SynchronousOnlyOperation(message)\n[CI/Test-2]   |         # Pass onwards.\n[CI/Test-2]   | >       return func(*args, **kwargs)\n[CI/Test-2]   | \n[CI/Test-2]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: \n[CI/Test-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[CI/Test-2]   | \n[CI/Test-2]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f812560b090>\n[CI/Test-2]   | \n[CI/Test-2]   |     @async_unsafe\n[CI/Test-2]   |     def ensure_connection(self):\n[CI/Test-2]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[CI/Test-2]   |         if self.connection is None:\n[CI/Test-2]   |             with self.wrap_database_errors:\n[CI/Test-2]   | >               self.connect()\n[CI/Test-2]   | \n[CI/Test-2]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:219: \n[CI/Test-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[CI/Test-2]   | \n[CI/Test-2]   | self = <django.db.utils.DatabaseErrorWrapper object at 0x7f812560ba90>\n[CI/Test-2]   | exc_type = <class 'psycopg2.OperationalError'>\n[CI/Test-2]   | exc_value = OperationalError('connection to server at \"127.0.0.1\", port 5432 failed: Connection refused\\n\\tIs the server running on that host and accepting TCP/IP connections?\\n')\n[CI/Test-2]   | traceback = <traceback object at 0x7f8126520460>\n[CI/Test-2]   | \n[CI/Test-2]   |     def __exit__(self, exc_type, exc_value, traceback):\n[CI/Test-2]   |         if exc_type is None:\n[CI/Test-2]   |             return\n[CI/Test-2]   |         for dj_exc_type in (\n[CI/Test-2]   |                 DataError,\n[CI/Test-2]   |                 OperationalError,\n[CI/Test-2]   |                 IntegrityError,\n[CI/Test-2]   |                 InternalError,\n[CI/Test-2]   |                 ProgrammingError,\n[CI/Test-2]   |                 NotSupportedError,\n[CI/Test-2]   |                 DatabaseError,\n[CI/Test-2]   |                 InterfaceError,\n[CI/Test-2]   |                 Error,\n[CI/Test-2]   |         ):\n[CI/Test-2]   |             db_exc_type = getattr(self.wrapper.Database, dj_exc_type.__name__)\n[CI/Test-2]   |             if issubclass(exc_type, db_exc_type):\n[CI/Test-2]   |                 dj_exc_value = dj_exc_type(*exc_value.args)\n[CI/Test-2]   |                 # Only set the 'errors_occurred' flag for errors that may make\n[CI/Test-2]   |                 # the connection unusable.\n[CI/Test-2]   |                 if dj_exc_type not in (DataError, IntegrityError):\n[CI/Test-2]   |                     self.wrapper.errors_occurred = True\n[CI/Test-2]   | >               raise dj_exc_value.with_traceback(traceback) from exc_value\n[CI/Test-2]   | \n[CI/Test-2]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/utils.py:90: \n[CI/Test-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[CI/Test-2]   | \n[CI/Test-2]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f812560b090>\n[CI/Test-2]   | \n[CI/Test-2]   |     @async_unsafe\n[CI/Test-2]   |     def ensure_connection(self):\n[CI/Test-2]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[CI/Test-2]   |         if self.connection is None:\n[CI/Test-2]   |             with self.wrap_database_errors:\n[CI/Test-2]   | >               self.connect()\n[CI/Test-2]   | \n[CI/Test-2]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:219: \n[CI/Test-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[CI/Test-2]   | \n[CI/Test-2]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f812560b090>,)\n[CI/Test-2]   | kwargs = {}\n[CI/Test-2]   | \n[CI/Test-2]   |     @functools.wraps(func)\n[CI/Test-2]   |     def inner(*args, **kwargs):\n[CI/Test-2]   |         if not os.environ.get('DJANGO_ALLOW_ASYNC_UNSAFE'):\n[CI/Test-2]   |             # Detect a running event loop in this thread.\n[CI/Test-2]   |             try:\n[CI/Test-2]   |                 event_loop = get_running_loop()\n[CI/Test-2]   |             except RuntimeError:\n[CI/Test-2]   |                 pass\n[CI/Test-2]   |             else:\n[CI/Test-2]   |                 if PY37 or event_loop.is_running():\n[CI/Test-2]   |                     raise SynchronousOnlyOperation(message)\n[CI/Test-2]   |         # Pass onwards.\n[CI/Test-2]   | >       return func(*args, **kwargs)\n[CI/Test-2]   | \n[CI/Test-2]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: \n[CI/Test-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[CI/Test-2]   | \n[CI/Test-2]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f812560b090>\n[CI/Test-2]   | \n[CI/Test-2]   |     @async_unsafe\n[CI/Test-2]   |     def connect(self):\n[CI/Test-2]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[CI/Test-2]   |         # Check for invalid configurations.\n[CI/Test-2]   |         self.check_settings()\n[CI/Test-2]   |         # In case the previous connection was closed while in an atomic block\n[CI/Test-2]   |         self.in_atomic_block = False\n[CI/Test-2]   |         self.savepoint_ids = []\n[CI/Test-2]   |         self.needs_rollback = False\n[CI/Test-2]   |         # Reset parameters defining when to close the connection\n[CI/Test-2]   |         max_age = self.settings_dict['CONN_MAX_AGE']\n[CI/Test-2]   |         self.close_at = None if max_age is None else time.monotonic() + max_age\n[CI/Test-2]   |         self.closed_in_transaction = False\n[CI/Test-2]   |         self.errors_occurred = False\n[CI/Test-2]   |         # Establish the connection\n[CI/Test-2]   |         conn_params = self.get_connection_params()\n[CI/Test-2]   | >       self.connection = self.get_new_connection(conn_params)\n[CI/Test-2]   | \n[CI/Test-2]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:200: \n[CI/Test-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[CI/Test-2]   | \n[CI/Test-2]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f812560b090>, {'database': 'postgres', 'host': '127.0.0.1', 'password': 'modeltranslation', 'user': 'modeltranslation'})\n[CI/Test-2]   | kwargs = {}\n[CI/Test-2]   | \n[CI/Test-2]   |     @functools.wraps(func)\n[CI/Test-2]   |     def inner(*args, **kwargs):\n[CI/Test-2]   |         if not os.environ.get('DJANGO_ALLOW_ASYNC_UNSAFE'):\n[CI/Test-2]   |             # Detect a running event loop in this thread.\n[CI/Test-2]   |             try:\n[CI/Test-2]   |                 event_loop = get_running_loop()\n[CI/Test-2]   |             except RuntimeError:\n[CI/Test-2]   |                 pass\n[CI/Test-2]   |             else:\n[CI/Test-2]   |                 if PY37 or event_loop.is_running():\n[CI/Test-2]   |                     raise SynchronousOnlyOperation(message)\n[CI/Test-2]   |         # Pass onwards.\n[CI/Test-2]   | >       return func(*args, **kwargs)\n[CI/Test-2]   | \n[CI/Test-2]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: \n[CI/Test-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[CI/Test-2]   | \n[CI/Test-2]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f812560b090>\n[CI/Test-2]   | conn_params = {'database': 'postgres', 'host': '127.0.0.1', 'password': 'modeltranslation', 'user': 'modeltranslation'}\n[CI/Test-2]   | \n[CI/Test-2]   |     @async_unsafe\n[CI/Test-2]   |     def get_new_connection(self, conn_params):\n[CI/Test-2]   | >       connection = Database.connect(**conn_params)\n[CI/Test-2]   | \n[CI/Test-2]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/postgresql/base.py:187: \n[CI/Test-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[CI/Test-2]   | \n[CI/Test-2]   | dsn = 'user=modeltranslation password=modeltranslation host=127.0.0.1 dbname=postgres'\n[CI/Test-2]   | connection_factory = None, cursor_factory = None\n[CI/Test-2]   | kwargs = {'database': 'postgres', 'host': '127.0.0.1', 'password': 'modeltranslation', 'user': 'modeltranslation'}\n[CI/Test-2]   | kwasync = {}\n[CI/Test-2]   | \n[CI/Test-2]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[CI/Test-2]   |         \"\"\"\n[CI/Test-2]   |         Create a new database connection.\n[CI/Test-2]   |     \n[CI/Test-2]   |         The connection parameters can be specified as a string:\n[CI/Test-2]   |     \n[CI/Test-2]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[CI/Test-2]   |     \n[CI/Test-2]   |         or using a set of keyword arguments:\n[CI/Test-2]   |     \n[CI/Test-2]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[CI/Test-2]   |     \n[CI/Test-2]   |         Or as a mix of both. The basic connection parameters are:\n[CI/Test-2]   |     \n[CI/Test-2]   |         - *dbname*: the database name\n[CI/Test-2]   |         - *database*: the database name (only as keyword argument)\n[CI/Test-2]   |         - *user*: user name used to authenticate\n[CI/Test-2]   |         - *password*: password used to authenticate\n[CI/Test-2]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[CI/Test-2]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[CI/Test-2]   |     \n[CI/Test-2]   |         Using the *connection_factory* parameter a different class or connections\n[CI/Test-2]   |         factory can be specified. It should be a callable object taking a dsn\n[CI/Test-2]   |         argument.\n[CI/Test-2]   |     \n[CI/Test-2]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[CI/Test-2]   |         used by cursor().\n[CI/Test-2]   |     \n[CI/Test-2]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[CI/Test-2]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[CI/Test-2]   |     \n[CI/Test-2]   |         Any other keyword parameter will be passed to the underlying client\n[CI/Test-2]   |         library: the list of supported parameters depends on the library version.\n[CI/Test-2]   |     \n[CI/Test-2]   |         \"\"\"\n[CI/Test-2]   |         kwasync = {}\n[CI/Test-2]   |         if 'async' in kwargs:\n[CI/Test-2]   |             kwasync['async'] = kwargs.pop('async')\n[CI/Test-2]   |         if 'async_' in kwargs:\n[CI/Test-2]   |             kwasync['async_'] = kwargs.pop('async_')\n[CI/Test-2]   |     \n[CI/Test-2]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[CI/Test-2]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[CI/Test-2]   | E       django.db.utils.OperationalError: connection to server at \"127.0.0.1\", port 5432 failed: Connection refused\n[CI/Test-2]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[CI/Test-2]   | \n[CI/Test-2]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[CI/Test-2]   | \n[CI/Test-2]   | During handling of the above exception, another exception occurred:\n[CI/Test-2]   | \n[CI/Test-2]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f812560b2d0>\n[CI/Test-2]   | \n[CI/Test-2]   |     @async_unsafe\n[CI/Test-2]   |     def ensure_connection(self):\n[CI/Test-2]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[CI/Test-2]   |         if self.connection is None:\n[CI/Test-2]   |             with self.wrap_database_errors:\n[CI/Test-2]   | >               self.connect()\n[CI/Test-2]   | \n[CI/Test-2]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:219: \n[CI/Test-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[CI/Test-2]   | \n[CI/Test-2]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f812560b2d0>,)\n[CI/Test-2]   | kwargs = {}\n[CI/Test-2]   | \n[CI/Test-2]   |     @functools.wraps(func)\n[CI/Test-2]   |     def inner(*args, **kwargs):\n[CI/Test-2]   |         if not os.environ.get('DJANGO_ALLOW_ASYNC_UNSAFE'):\n[CI/Test-2]   |             # Detect a running event loop in this thread.\n[CI/Test-2]   |             try:\n[CI/Test-2]   |                 event_loop = get_running_loop()\n[CI/Test-2]   |             except RuntimeError:\n[CI/Test-2]   |                 pass\n[CI/Test-2]   |             else:\n[CI/Test-2]   |                 if PY37 or event_loop.is_running():\n[CI/Test-2]   |                     raise SynchronousOnlyOperation(message)\n[CI/Test-2]   |         # Pass onwards.\n[CI/Test-2]   | >       return func(*args, **kwargs)\n[CI/Test-2]   | \n[CI/Test-2]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: \n[CI/Test-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[CI/Test-2]   | \n[CI/Test-2]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f812560b2d0>\n[CI/Test-2]   | \n[CI/Test-2]   |     @async_unsafe\n[CI/Test-2]   |     def connect(self):\n[CI/Test-2]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[CI/Test-2]   |         # Check for invalid configurations.\n[CI/Test-2]   |         self.check_settings()\n[CI/Test-2]   |         # In case the previous connection was closed while in an atomic block\n[CI/Test-2]   |         self.in_atomic_block = False\n[CI/Test-2]   |         self.savepoint_ids = []\n[CI/Test-2]   |         self.needs_rollback = False\n[CI/Test-2]   |         # Reset parameters defining when to close the connection\n[CI/Test-2]   |         max_age = self.settings_dict['CONN_MAX_AGE']\n[CI/Test-2]   |         self.close_at = None if max_age is None else time.monotonic() + max_age\n[CI/Test-2]   |         self.closed_in_transaction = False\n[CI/Test-2]   |         self.errors_occurred = False\n[CI/Test-2]   |         # Establish the connection\n[CI/Test-2]   |         conn_params = self.get_connection_params()\n[CI/Test-2]   | >       self.connection = self.get_new_connection(conn_params)\n[CI/Test-2]   | \n[CI/Test-2]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:200: \n[CI/Test-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[CI/Test-2]   | \n[CI/Test-2]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f812560b2d0>, {'database': 'modeltranslation', 'host': '127.0.0.1', 'password': 'modeltranslation', 'user': 'modeltranslation'})\n[CI/Test-2]   | kwargs = {}\n[CI/Test-2]   | \n[CI/Test-2]   |     @functools.wraps(func)\n[CI/Test-2]   |     def inner(*args, **kwargs):\n[CI/Test-2]   |         if not os.environ.get('DJANGO_ALLOW_ASYNC_UNSAFE'):\n[CI/Test-2]   |             # Detect a running event loop in this thread.\n[CI/Test-2]   |             try:\n[CI/Test-2]   |                 event_loop = get_running_loop()\n[CI/Test-2]   |             except RuntimeError:\n[CI/Test-2]   |                 pass\n[CI/Test-2]   |             else:\n[CI/Test-2]   |                 if PY37 or event_loop.is_running():\n[CI/Test-2]   |                     raise SynchronousOnlyOperation(message)\n[CI/Test-2]   |         # Pass onwards.\n[CI/Test-2]   | >       return func(*args, **kwargs)\n[CI/Test-2]   | \n[CI/Test-2]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: \n[CI/Test-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[CI/Test-2]   | \n[CI/Test-2]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f812560b2d0>\n[CI/Test-2]   | conn_params = {'database': 'modeltranslation', 'host': '127.0.0.1', 'password': 'modeltranslation', 'user': 'modeltranslation'}\n[CI/Test-2]   | \n[CI/Test-2]   |     @async_unsafe\n[CI/Test-2]   |     def get_new_connection(self, conn_params):\n[CI/Test-2]   | >       connection = Database.connect(**conn_params)\n[CI/Test-2]   | \n[CI/Test-2]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/postgresql/base.py:187: \n[CI/Test-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[CI/Test-2]   | \n[CI/Test-2]   | dsn = 'user=modeltranslation password=modeltranslation host=127.0.0.1 dbname=modeltranslation'\n[CI/Test-2]   | connection_factory = None, cursor_factory = None\n[CI/Test-2]   | kwargs = {'database': 'modeltranslation', 'host': '127.0.0.1', 'password': 'modeltranslation', 'user': 'modeltranslation'}\n[CI/Test-2]   | kwasync = {}\n[CI/Test-2]   | \n[CI/Test-2]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[CI/Test-2]   |         \"\"\"\n[CI/Test-2]   |         Create a new database connection.\n[CI/Test-2]   |     \n[CI/Test-2]   |         The connection parameters can be specified as a string:\n[CI/Test-2]   |     \n[CI/Test-2]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[CI/Test-2]   |     \n[CI/Test-2]   |         or using a set of keyword arguments:\n[CI/Test-2]   |     \n[CI/Test-2]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[CI/Test-2]   |     \n[CI/Test-2]   |         Or as a mix of both. The basic connection parameters are:\n[CI/Test-2]   |     \n[CI/Test-2]   |         - *dbname*: the database name\n[CI/Test-2]   |         - *database*: the database name (only as keyword argument)\n[CI/Test-2]   |         - *user*: user name used to authenticate\n[CI/Test-2]   |         - *password*: password used to authenticate\n[CI/Test-2]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[CI/Test-2]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[CI/Test-2]   |     \n[CI/Test-2]   |         Using the *connection_factory* parameter a different class or connections\n[CI/Test-2]   |         factory can be specified. It should be a callable object taking a dsn\n[CI/Test-2]   |         argument.\n[CI/Test-2]   |     \n[CI/Test-2]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[CI/Test-2]   |         used by cursor().\n[CI/Test-2]   |     \n[CI/Test-2]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[CI/Test-2]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[CI/Test-2]   |     \n[CI/Test-2]   |         Any other keyword parameter will be passed to the underlying client\n[CI/Test-2]   |         library: the list of supported parameters depends on the library version.\n[CI/Test-2]   |     \n[CI/Test-2]   |         \"\"\"\n[CI/Test-2]   |         kwasync = {}\n[CI/Test-2]   |         if 'async' in kwargs:\n[CI/Test-2]   |             kwasync['async'] = kwargs.pop('async')\n[CI/Test-2]   |         if 'async_' in kwargs:\n[CI/Test-2]   |             kwasync['async_'] = kwargs.pop('async_')\n[CI/Test-2]   |     \n[CI/Test-2]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[CI/Test-2]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[CI/Test-2]   | E       psycopg2.OperationalError: connection to server at \"127.0.0.1\", port 5432 failed: Connection refused\n[CI/Test-2]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[CI/Test-2]   | \n[CI/Test-2]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[CI/Test-2]   | \n[CI/Test-2]   | The above exception was the direct cause of the following exception:\n[CI/Test-2]   | \n[CI/Test-2]   | request = <SubRequest '_django_setup_unittest' for <TestCaseFunction test_constructor>>\n[CI/Test-2]   | django_db_blocker = <pytest_django.plugin._DatabaseBlocker object at 0x7f812978c950>\n[CI/Test-2]   | \n[CI/Test-2]   |     @pytest.fixture(autouse=True, scope=\"class\")\n[CI/Test-2]   |     def _django_setup_unittest(\n[CI/Test-2]   |         request,\n[CI/Test-2]   |         django_db_blocker: \"_DatabaseBlocker\",\n[CI/Test-2]   |     ) -> Generator[None, None, None]:\n[CI/Test-2]   |         \"\"\"Setup a django unittest, internal to pytest-django.\"\"\"\n[CI/Test-2]   |         if not django_settings_is_configured() or not is_django_unittest(request):\n[CI/Test-2]   |             yield\n[CI/Test-2]   |             return\n[CI/Test-2]   |     \n[CI/Test-2]   |         # Fix/patch pytest.\n[CI/Test-2]   |         # Before pytest 5.4: https://github.com/pytest-dev/pytest/issues/5991\n[CI/Test-2]   |         # After pytest 5.4: https://github.com/pytest-dev/pytest-django/issues/824\n[CI/Test-2]   |         from _pytest.unittest import TestCaseFunction\n[CI/Test-2]   |         original_runtest = TestCaseFunction.runtest\n[CI/Test-2]   |     \n[CI/Test-2]   |         def non_debugging_runtest(self) -> None:\n[CI/Test-2]   |             self._testcase(result=self)\n[CI/Test-2]   |     \n[CI/Test-2]   |         try:\n[CI/Test-2]   |             TestCaseFunction.runtest = non_debugging_runtest  # type: ignore[assignment]\n[CI/Test-2]   |     \n[CI/Test-2]   | >           request.getfixturevalue(\"django_db_setup\")\n[CI/Test-2]   | \n[CI/Test-2]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/pytest_django/plugin.py:490: \n[CI/Test-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[CI/Test-2]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/pytest_django/fixtures.py:125: in django_db_setup\n[CI/Test-2]   |     **setup_databases_args\n[CI/Test-2]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/test/utils.py:183: in setup_databases\n[CI/Test-2]   |     serialize=connection.settings_dict['TEST'].get('SERIALIZE', True),\n[CI/Test-2]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/creation.py:57: in create_test_db\n[CI/Test-2]   |     self._create_test_db(verbosity, autoclobber, keepdb)\n[CI/Test-2]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/creation.py:191: in _create_test_db\n[CI/Test-2]   |     with self._nodb_cursor() as cursor:\n[CI/Test-2]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/contextlib.py:112: in __enter__\n[CI/Test-2]   |     return next(self.gen)\n[CI/Test-2]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/postgresql/base.py:319: in _nodb_cursor\n[CI/Test-2]   |     with conn.cursor() as cursor:\n[CI/Test-2]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: in inner\n[CI/Test-2]   |     return func(*args, **kwargs)\n[CI/Test-2]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:259: in cursor\n[CI/Test-2]   |     return self._cursor()\n[CI/Test-2]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:235: in _cursor\n[CI/Test-2]   |     self.ensure_connection()\n[CI/Test-2]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: in inner\n[CI/Test-2]   |     return func(*args, **kwargs)\n[CI/Test-2]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:219: in ensure_connection\n[CI/Test-2]   |     self.connect()\n[CI/Test-2]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/utils.py:90: in __exit__\n[CI/Test-2]   |     raise dj_exc_value.with_traceback(traceback) from exc_value\n[CI/Test-2]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:219: in ensure_connection\n[CI/Test-2]   |     self.connect()\n[CI/Test-2]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: in inner\n[CI/Test-2]   |     return func(*args, **kwargs)\n[CI/Test-2]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:200: in connect\n[CI/Test-2]   |     self.connection = self.get_new_connection(conn_params)\n[CI/Test-2]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: in inner\n[CI/Test-2]   |     return func(*args, **kwargs)\n[CI/Test-2]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/postgresql/base.py:187: in get_new_connection\n[CI/Test-2]   |     connection = Database.connect(**conn_params)\n[CI/Test-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[CI/Test-2]   | \n[CI/Test-2]   | dsn = 'user=modeltranslation password=modeltranslation host=127.0.0.1 dbname=modeltranslation'\n[CI/Test-2]   | connection_factory = None, cursor_factory = None\n[CI/Test-2]   | kwargs = {'database': 'modeltranslation', 'host': '127.0.0.1', 'password': 'modeltranslation', 'user': 'modeltranslation'}\n[CI/Test-2]   | kwasync = {}\n[CI/Test-2]   | \n[CI/Test-2]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[CI/Test-2]   |         \"\"\"\n[CI/Test-2]   |         Create a new database connection.\n[CI/Test-2]   |     \n[CI/Test-2]   |         The connection parameters can be specified as a string:\n[CI/Test-2]   |     \n[CI/Test-2]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[CI/Test-2]   |     \n[CI/Test-2]   |         or using a set of keyword arguments:\n[CI/Test-2]   |     \n[CI/Test-2]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[CI/Test-2]   |     \n[CI/Test-2]   |         Or as a mix of both. The basic connection parameters are:\n[CI/Test-2]   |     \n[CI/Test-2]   |         - *dbname*: the database name\n[CI/Test-2]   |         - *database*: the database name (only as keyword argument)\n[CI/Test-2]   |         - *user*: user name used to authenticate\n[CI/Test-2]   |         - *password*: password used to authenticate\n[CI/Test-2]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[CI/Test-2]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[CI/Test-2]   |     \n[CI/Test-2]   |         Using the *connection_factory* parameter a different class or connections\n[CI/Test-2]   |         factory can be specified. It should be a callable object taking a dsn\n[CI/Test-2]   |         argument.\n[CI/Test-2]   |     \n[CI/Test-2]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[CI/Test-2]   |         used by cursor().\n[CI/Test-2]   |     \n[CI/Test-2]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[CI/Test-2]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[CI/Test-2]   |     \n[CI/Test-2]   |         Any other keyword parameter will be passed to the underlying client\n[CI/Test-2]   |         library: the list of supported parameters depends on the library version.\n[CI/Test-2]   |     \n[CI/Test-2]   |         \"\"\"\n[CI/Test-2]   |         kwasync = {}\n[CI/Test-2]   |         if 'async' in kwargs:\n[CI/Test-2]   |             kwasync['async'] = kwargs.pop('async')\n[CI/Test-2]   |         if 'async_' in kwargs:\n[CI/Test-2]   |             kwasync['async_'] = kwargs.pop('async_')\n[CI/Test-2]   |     \n[CI/Test-2]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[CI/Test-2]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[CI/Test-2]   | E       django.db.utils.OperationalError: connection to server at \"127.0.0.1\", port 5432 failed: Connection refused\n[CI/Test-2]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[CI/Test-2]   | \n[CI/Test-2]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[CI/Test-2]   | _____ ERROR at setup of ModeltranslationTest.test_descriptor_introspection _____\n[CI/Test-2]   | \n[CI/Test-2]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f812560b090>\n[CI/Test-2]   | \n[CI/Test-2]   |     @async_unsafe\n[CI/Test-2]   |     def ensure_connection(self):\n[CI/Test-2]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[CI/Test-2]   |         if self.connection is None:\n[CI/Test-2]   |             with self.wrap_database_errors:\n[CI/Test-2]   | >               self.connect()\n[CI/Test-2]   | \n[CI/Test-2]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:219: \n[CI/Test-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[CI/Test-2]   | \n[CI/Test-2]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f812560b090>,)\n[CI/Test-2]   | kwargs = {}\n[CI/Test-2]   | \n[CI/Test-2]   |     @functools.wraps(func)\n[CI/Test-2]   |     def inner(*args, **kwargs):\n[CI/Test-2]   |         if not os.environ.get('DJANGO_ALLOW_ASYNC_UNSAFE'):\n[CI/Test-2]   |             # Detect a running event loop in this thread.\n[CI/Test-2]   |             try:\n[CI/Test-2]   |                 event_loop = get_running_loop()\n[CI/Test-2]   |             except RuntimeError:\n[CI/Test-2]   |                 pass\n[CI/Test-2]   |             else:\n[CI/Test-2]   |                 if PY37 or event_loop.is_running():\n[CI/Test-2]   |                     raise SynchronousOnlyOperation(message)\n[CI/Test-2]   |         # Pass onwards.\n[CI/Test-2]   | >       return func(*args, **kwargs)\n[CI/Test-2]   | \n[CI/Test-2]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: \n[CI/Test-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[CI/Test-2]   | \n[CI/Test-2]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f812560b090>\n[CI/Test-2]   | \n[CI/Test-2]   |     @async_unsafe\n[CI/Test-2]   |     def connect(self):\n[CI/Test-2]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[CI/Test-2]   |         # Check for invalid configurations.\n[CI/Test-2]   |         self.check_settings()\n[CI/Test-2]   |         # In case the previous connection was closed while in an atomic block\n[CI/Test-2]   |         self.in_atomic_block = False\n[CI/Test-2]   |         self.savepoint_ids = []\n[CI/Test-2]   |         self.needs_rollback = False\n[CI/Test-2]   |         # Reset parameters defining when to close the connection\n[CI/Test-2]   |         max_age = self.settings_dict['CONN_MAX_AGE']\n[CI/Test-2]   |         self.close_at = None if max_age is None else time.monotonic() + max_age\n[CI/Test-2]   |         self.closed_in_transaction = False\n[CI/Test-2]   |         self.errors_occurred = False\n[CI/Test-2]   |         # Establish the connection\n[CI/Test-2]   |         conn_params = self.get_connection_params()\n[CI/Test-2]   | >       self.connection = self.get_new_connection(conn_params)\n[CI/Test-2]   | \n[CI/Test-2]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:200: \n[CI/Test-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[CI/Test-2]   | \n[CI/Test-2]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f812560b090>, {'database': 'postgres', 'host': '127.0.0.1', 'password': 'modeltranslation', 'user': 'modeltranslation'})\n[CI/Test-2]   | kwargs = {}\n[CI/Test-2]   | \n[CI/Test-2]   |     @functools.wraps(func)\n[CI/Test-2]   |     def inner(*args, **kwargs):\n[CI/Test-2]   |         if not os.environ.get('DJANGO_ALLOW_ASYNC_UNSAFE'):\n[CI/Test-2]   |             # Detect a running event loop in this thread.\n[CI/Test-2]   |             try:\n[CI/Test-2]   |                 event_loop = get_running_loop()\n[CI/Test-2]   |             except RuntimeError:\n[CI/Test-2]   |                 pass\n[CI/Test-2]   |             else:\n[CI/Test-2]   |                 if PY37 or event_loop.is_running():\n[CI/Test-2]   |                     raise SynchronousOnlyOperation(message)\n[CI/Test-2]   |         # Pass onwards.\n[CI/Test-2]   | >       return func(*args, **kwargs)\n[CI/Test-2]   | \n[CI/Test-2]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: \n[CI/Test-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[CI/Test-2]   | \n[CI/Test-2]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f812560b090>\n[CI/Test-2]   | conn_params = {'database': 'postgres', 'host': '127.0.0.1', 'password': 'modeltranslation', 'user': 'modeltranslation'}\n[CI/Test-2]   | \n[CI/Test-2]   |     @async_unsafe\n[CI/Test-2]   |     def get_new_connection(self, conn_params):\n[CI/Test-2]   | >       connection = Database.connect(**conn_params)\n[CI/Test-2]   | \n[CI/Test-2]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/postgresql/base.py:187: \n[CI/Test-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[CI/Test-2]   | \n[CI/Test-2]   | dsn = 'user=modeltranslation password=modeltranslation host=127.0.0.1 dbname=postgres'\n[CI/Test-2]   | connection_factory = None, cursor_factory = None\n[CI/Test-2]   | kwargs = {'database': 'postgres', 'host': '127.0.0.1', 'password': 'modeltranslation', 'user': 'modeltranslation'}\n[CI/Test-2]   | kwasync = {}\n[CI/Test-2]   | \n[CI/Test-2]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[CI/Test-2]   |         \"\"\"\n[CI/Test-2]   |         Create a new database connection.\n[CI/Test-2]   |     \n[CI/Test-2]   |         The connection parameters can be specified as a string:\n[CI/Test-2]   |     \n[CI/Test-2]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[CI/Test-2]   |     \n[CI/Test-2]   |         or using a set of keyword arguments:\n[CI/Test-2]   |     \n[CI/Test-2]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[CI/Test-2]   |     \n[CI/Test-2]   |         Or as a mix of both. The basic connection parameters are:\n[CI/Test-2]   |     \n[CI/Test-2]   |         - *dbname*: the database name\n[CI/Test-2]   |         - *database*: the database name (only as keyword argument)\n[CI/Test-2]   |         - *user*: user name used to authenticate\n[CI/Test-2]   |         - *password*: password used to authenticate\n[CI/Test-2]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[CI/Test-2]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[CI/Test-2]   |     \n[CI/Test-2]   |         Using the *connection_factory* parameter a different class or connections\n[CI/Test-2]   |         factory can be specified. It should be a callable object taking a dsn\n[CI/Test-2]   |         argument.\n[CI/Test-2]   |     \n[CI/Test-2]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[CI/Test-2]   |         used by cursor().\n[CI/Test-2]   |     \n[CI/Test-2]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[CI/Test-2]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[CI/Test-2]   |     \n[CI/Test-2]   |         Any other keyword parameter will be passed to the underlying client\n[CI/Test-2]   |         library: the list of supported parameters depends on the library version.\n[CI/Test-2]   |     \n[CI/Test-2]   |         \"\"\"\n[CI/Test-2]   |         kwasync = {}\n[CI/Test-2]   |         if 'async' in kwargs:\n[CI/Test-2]   |             kwasync['async'] = kwargs.pop('async')\n[CI/Test-2]   |         if 'async_' in kwargs:\n[CI/Test-2]   |             kwasync['async_'] = kwargs.pop('async_')\n[CI/Test-2]   |     \n[CI/Test-2]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[CI/Test-2]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[CI/Test-2]   | E       psycopg2.OperationalError: connection to server at \"127.0.0.1\", port 5432 failed: Connection refused\n[CI/Test-2]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[CI/Test-2]   | \n[CI/Test-2]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[CI/Test-2]   | \n[CI/Test-2]   | The above exception was the direct cause of the following exception:\n[CI/Test-2]   | \n[CI/Test-2]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f812890e750>\n[CI/Test-2]   | \n[CI/Test-2]   |     @contextmanager\n[CI/Test-2]   |     def _nodb_cursor(self):\n[CI/Test-2]   |         try:\n[CI/Test-2]   | >           with super()._nodb_cursor() as cursor:\n[CI/Test-2]   | \n[CI/Test-2]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/postgresql/base.py:301: \n[CI/Test-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[CI/Test-2]   | \n[CI/Test-2]   | self = <contextlib._GeneratorContextManager object at 0x7f812560b0d0>\n[CI/Test-2]   | \n[CI/Test-2]   |     def __enter__(self):\n[CI/Test-2]   |         # do not keep args and kwds alive unnecessarily\n[CI/Test-2]   |         # they are only needed for recreation, which is not possible anymore\n[CI/Test-2]   |         del self.args, self.kwds, self.func\n[CI/Test-2]   |         try:\n[CI/Test-2]   | >           return next(self.gen)\n[CI/Test-2]   | \n[CI/Test-2]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/contextlib.py:112: \n[CI/Test-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[CI/Test-2]   | \n[CI/Test-2]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f812890e750>\n[CI/Test-2]   | \n[CI/Test-2]   |     @contextmanager\n[CI/Test-2]   |     def _nodb_cursor(self):\n[CI/Test-2]   |         \"\"\"\n[CI/Test-2]   |         Return a cursor from an alternative connection to be used when there is\n[CI/Test-2]   |         no need to access the main database, specifically for test db\n[CI/Test-2]   |         creation/deletion. This also prevents the production database from\n[CI/Test-2]   |         being exposed to potential child threads while (or after) the test\n[CI/Test-2]   |         database is destroyed. Refs #10868, #17786, #16969.\n[CI/Test-2]   |         \"\"\"\n[CI/Test-2]   |         conn = self.__class__({**self.settings_dict, 'NAME': None}, alias=NO_DB_ALIAS)\n[CI/Test-2]   |         try:\n[CI/Test-2]   | >           with conn.cursor() as cursor:\n[CI/Test-2]   | \n[CI/Test-2]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:620: \n[CI/Test-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[CI/Test-2]   | \n[CI/Test-2]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f812560b090>,)\n[CI/Test-2]   | kwargs = {}\n[CI/Test-2]   | \n[CI/Test-2]   |     @functools.wraps(func)\n[CI/Test-2]   |     def inner(*args, **kwargs):\n[CI/Test-2]   |         if not os.environ.get('DJANGO_ALLOW_ASYNC_UNSAFE'):\n[CI/Test-2]   |             # Detect a running event loop in this thread.\n[CI/Test-2]   |             try:\n[CI/Test-2]   |                 event_loop = get_running_loop()\n[CI/Test-2]   |             except RuntimeError:\n[CI/Test-2]   |                 pass\n[CI/Test-2]   |             else:\n[CI/Test-2]   |                 if PY37 or event_loop.is_running():\n[CI/Test-2]   |                     raise SynchronousOnlyOperation(message)\n[CI/Test-2]   |         # Pass onwards.\n[CI/Test-2]   | >       return func(*args, **kwargs)\n[CI/Test-2]   | \n[CI/Test-2]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: \n[CI/Test-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[CI/Test-2]   | \n[CI/Test-2]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f812560b090>\n[CI/Test-2]   | \n[CI/Test-2]   |     @async_unsafe\n[CI/Test-2]   |     def cursor(self):\n[CI/Test-2]   |         \"\"\"Create a cursor, opening a connection if necessary.\"\"\"\n[CI/Test-2]   | >       return self._cursor()\n[CI/Test-2]   | \n[CI/Test-2]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:259: \n[CI/Test-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[CI/Test-2]   | \n[CI/Test-2]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f812560b090>\n[CI/Test-2]   | name = None\n[CI/Test-2]   | \n[CI/Test-2]   |     def _cursor(self, name=None):\n[CI/Test-2]   | >       self.ensure_connection()\n[CI/Test-2]   | \n[CI/Test-2]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:235: \n[CI/Test-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[CI/Test-2]   | \n[CI/Test-2]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f812560b090>,)\n[CI/Test-2]   | kwargs = {}\n[CI/Test-2]   | \n[CI/Test-2]   |     @functools.wraps(func)\n[CI/Test-2]   |     def inner(*args, **kwargs):\n[CI/Test-2]   |         if not os.environ.get('DJANGO_ALLOW_ASYNC_UNSAFE'):\n[CI/Test-2]   |             # Detect a running event loop in this thread.\n[CI/Test-2]   |             try:\n[CI/Test-2]   |                 event_loop = get_running_loop()\n[CI/Test-2]   |             except RuntimeError:\n[CI/Test-2]   |                 pass\n[CI/Test-2]   |             else:\n[CI/Test-2]   |                 if PY37 or event_loop.is_running():\n[CI/Test-2]   |                     raise SynchronousOnlyOperation(message)\n[CI/Test-2]   |         # Pass onwards.\n[CI/Test-2]   | >       return func(*args, **kwargs)\n[CI/Test-2]   | \n[CI/Test-2]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: \n[CI/Test-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[CI/Test-2]   | \n[CI/Test-2]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f812560b090>\n[CI/Test-2]   | \n[CI/Test-2]   |     @async_unsafe\n[CI/Test-2]   |     def ensure_connection(self):\n[CI/Test-2]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[CI/Test-2]   |         if self.connection is None:\n[CI/Test-2]   |             with self.wrap_database_errors:\n[CI/Test-2]   | >               self.connect()\n[CI/Test-2]   | \n[CI/Test-2]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:219: \n[CI/Test-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[CI/Test-2]   | \n[CI/Test-2]   | self = <django.db.utils.DatabaseErrorWrapper object at 0x7f812560ba90>\n[CI/Test-2]   | exc_type = <class 'psycopg2.OperationalError'>\n[CI/Test-2]   | exc_value = OperationalError('connection to server at \"127.0.0.1\", port 5432 failed: Connection refused\\n\\tIs the server running on that host and accepting TCP/IP connections?\\n')\n[CI/Test-2]   | traceback = <traceback object at 0x7f8126520460>\n[CI/Test-2]   | \n[CI/Test-2]   |     def __exit__(self, exc_type, exc_value, traceback):\n[CI/Test-2]   |         if exc_type is None:\n[CI/Test-2]   |             return\n[CI/Test-2]   |         for dj_exc_type in (\n[CI/Test-2]   |                 DataError,\n[CI/Test-2]   |                 OperationalError,\n[CI/Test-2]   |                 IntegrityError,\n[CI/Test-2]   |                 InternalError,\n[CI/Test-2]   |                 ProgrammingError,\n[CI/Test-2]   |                 NotSupportedError,\n[CI/Test-2]   |                 DatabaseError,\n[CI/Test-2]   |                 InterfaceError,\n[CI/Test-2]   |                 Error,\n[CI/Test-2]   |         ):\n[CI/Test-2]   |             db_exc_type = getattr(self.wrapper.Database, dj_exc_type.__name__)\n[CI/Test-2]   |             if issubclass(exc_type, db_exc_type):\n[CI/Test-2]   |                 dj_exc_value = dj_exc_type(*exc_value.args)\n[CI/Test-2]   |                 # Only set the 'errors_occurred' flag for errors that may make\n[CI/Test-2]   |                 # the connection unusable.\n[CI/Test-2]   |                 if dj_exc_type not in (DataError, IntegrityError):\n[CI/Test-2]   |                     self.wrapper.errors_occurred = True\n[CI/Test-2]   | >               raise dj_exc_value.with_traceback(traceback) from exc_value\n[CI/Test-2]   | \n[CI/Test-2]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/utils.py:90: \n[CI/Test-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[CI/Test-2]   | \n[CI/Test-2]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f812560b090>\n[CI/Test-2]   | \n[CI/Test-2]   |     @async_unsafe\n[CI/Test-2]   |     def ensure_connection(self):\n[CI/Test-2]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[CI/Test-2]   |         if self.connection is None:\n[CI/Test-2]   |             with self.wrap_database_errors:\n[CI/Test-2]   | >               self.connect()\n[CI/Test-2]   | \n[CI/Test-2]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:219: \n[CI/Test-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[CI/Test-2]   | \n[CI/Test-2]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f812560b090>,)\n[CI/Test-2]   | kwargs = {}\n[CI/Test-2]   | \n[CI/Test-2]   |     @functools.wraps(func)\n[CI/Test-2]   |     def inner(*args, **kwargs):\n[CI/Test-2]   |         if not os.environ.get('DJANGO_ALLOW_ASYNC_UNSAFE'):\n[CI/Test-2]   |             # Detect a running event loop in this thread.\n[CI/Test-2]   |             try:\n[CI/Test-2]   |                 event_loop = get_running_loop()\n[CI/Test-2]   |             except RuntimeError:\n[CI/Test-2]   |                 pass\n[CI/Test-2]   |             else:\n[CI/Test-2]   |                 if PY37 or event_loop.is_running():\n[CI/Test-2]   |                     raise SynchronousOnlyOperation(message)\n[CI/Test-2]   |         # Pass onwards.\n[CI/Test-2]   | >       return func(*args, **kwargs)\n[CI/Test-2]   | \n[CI/Test-2]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: \n[CI/Test-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[CI/Test-2]   | \n[CI/Test-2]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f812560b090>\n[CI/Test-2]   | \n[CI/Test-2]   |     @async_unsafe\n[CI/Test-2]   |     def connect(self):\n[CI/Test-2]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[CI/Test-2]   |         # Check for invalid configurations.\n[CI/Test-2]   |         self.check_settings()\n[CI/Test-2]   |         # In case the previous connection was closed while in an atomic block\n[CI/Test-2]   |         self.in_atomic_block = False\n[CI/Test-2]   |         self.savepoint_ids = []\n[CI/Test-2]   |         self.needs_rollback = False\n[CI/Test-2]   |         # Reset parameters defining when to close the connection\n[CI/Test-2]   |         max_age = self.settings_dict['CONN_MAX_AGE']\n[CI/Test-2]   |         self.close_at = None if max_age is None else time.monotonic() + max_age\n[CI/Test-2]   |         self.closed_in_transaction = False\n[CI/Test-2]   |         self.errors_occurred = False\n[CI/Test-2]   |         # Establish the connection\n[CI/Test-2]   |         conn_params = self.get_connection_params()\n[CI/Test-2]   | >       self.connection = self.get_new_connection(conn_params)\n[CI/Test-2]   | \n[CI/Test-2]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:200: \n[CI/Test-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[CI/Test-2]   | \n[CI/Test-2]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f812560b090>, {'database': 'postgres', 'host': '127.0.0.1', 'password': 'modeltranslation', 'user': 'modeltranslation'})\n[CI/Test-2]   | kwargs = {}\n[CI/Test-2]   | \n[CI/Test-2]   |     @functools.wraps(func)\n[CI/Test-2]   |     def inner(*args, **kwargs):\n[CI/Test-2]   |         if not os.environ.get('DJANGO_ALLOW_ASYNC_UNSAFE'):\n[CI/Test-2]   |             # Detect a running event loop in this thread.\n[CI/Test-2]   |             try:\n[CI/Test-2]   |                 event_loop = get_running_loop()\n[CI/Test-2]   |             except RuntimeError:\n[CI/Test-2]   |                 pass\n[CI/Test-2]   |             else:\n[CI/Test-2]   |                 if PY37 or event_loop.is_running():\n[CI/Test-2]   |                     raise SynchronousOnlyOperation(message)\n[CI/Test-2]   |         # Pass onwards.\n[CI/Test-2]   | >       return func(*args, **kwargs)\n[CI/Test-2]   | \n[CI/Test-2]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: \n[CI/Test-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[CI/Test-2]   | \n[CI/Test-2]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f812560b090>\n[CI/Test-2]   | conn_params = {'database': 'postgres', 'host': '127.0.0.1', 'password': 'modeltranslation', 'user': 'modeltranslation'}\n[CI/Test-2]   | \n[CI/Test-2]   |     @async_unsafe\n[CI/Test-2]   |     def get_new_connection(self, conn_params):\n[CI/Test-2]   | >       connection = Database.connect(**conn_params)\n[CI/Test-2]   | \n[CI/Test-2]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/postgresql/base.py:187: \n[CI/Test-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[CI/Test-2]   | \n[CI/Test-2]   | dsn = 'user=modeltranslation password=modeltranslation host=127.0.0.1 dbname=postgres'\n[CI/Test-2]   | connection_factory = None, cursor_factory = None\n[CI/Test-2]   | kwargs = {'database': 'postgres', 'host': '127.0.0.1', 'password': 'modeltranslation', 'user': 'modeltranslation'}\n[CI/Test-2]   | kwasync = {}\n[CI/Test-2]   | \n[CI/Test-2]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[CI/Test-2]   |         \"\"\"\n[CI/Test-2]   |         Create a new database connection.\n[CI/Test-2]   |     \n[CI/Test-2]   |         The connection parameters can be specified as a string:\n[CI/Test-2]   |     \n[CI/Test-2]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[CI/Test-2]   |     \n[CI/Test-2]   |         or using a set of keyword arguments:\n[CI/Test-2]   |     \n[CI/Test-2]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[CI/Test-2]   |     \n[CI/Test-2]   |         Or as a mix of both. The basic connection parameters are:\n[CI/Test-2]   |     \n[CI/Test-2]   |         - *dbname*: the database name\n[CI/Test-2]   |         - *database*: the database name (only as keyword argument)\n[CI/Test-2]   |         - *user*: user name used to authenticate\n[CI/Test-2]   |         - *password*: password used to authenticate\n[CI/Test-2]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[CI/Test-2]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[CI/Test-2]   |     \n[CI/Test-2]   |         Using the *connection_factory* parameter a different class or connections\n[CI/Test-2]   |         factory can be specified. It should be a callable object taking a dsn\n[CI/Test-2]   |         argument.\n[CI/Test-2]   |     \n[CI/Test-2]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[CI/Test-2]   |         used by cursor().\n[CI/Test-2]   |     \n[CI/Test-2]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[CI/Test-2]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[CI/Test-2]   |     \n[CI/Test-2]   |         Any other keyword parameter will be passed to the underlying client\n[CI/Test-2]   |         library: the list of supported parameters depends on the library version.\n[CI/Test-2]   |     \n[CI/Test-2]   |         \"\"\"\n[CI/Test-2]   |         kwasync = {}\n[CI/Test-2]   |         if 'async' in kwargs:\n[CI/Test-2]   |             kwasync['async'] = kwargs.pop('async')\n[CI/Test-2]   |         if 'async_' in kwargs:\n[CI/Test-2]   |             kwasync['async_'] = kwargs.pop('async_')\n[CI/Test-2]   |     \n[CI/Test-2]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[CI/Test-2]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[CI/Test-2]   | E       django.db.utils.OperationalError: connection to server at \"127.0.0.1\", port 5432 failed: Connection refused\n[CI/Test-2]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[CI/Test-2]   | \n[CI/Test-2]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[CI/Test-2]   | \n[CI/Test-2]   | During handling of the above exception, another exception occurred:\n[CI/Test-2]   | \n[CI/Test-2]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f812560b2d0>\n[CI/Test-2]   | \n[CI/Test-2]   |     @async_unsafe\n[CI/Test-2]   |     def ensure_connection(self):\n[CI/Test-2]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[CI/Test-2]   |         if self.connection is None:\n[CI/Test-2]   |             with self.wrap_database_errors:\n[CI/Test-2]   | >               self.connect()\n[CI/Test-2]   | \n[CI/Test-2]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:219: \n[CI/Test-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[CI/Test-2]   | \n[CI/Test-2]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f812560b2d0>,)\n[CI/Test-2]   | kwargs = {}\n[CI/Test-2]   | \n[CI/Test-2]   |     @functools.wraps(func)\n[CI/Test-2]   |     def inner(*args, **kwargs):\n[CI/Test-2]   |         if not os.environ.get('DJANGO_ALLOW_ASYNC_UNSAFE'):\n[CI/Test-2]   |             # Detect a running event loop in this thread.\n[CI/Test-2]   |             try:\n[CI/Test-2]   |                 event_loop = get_running_loop()\n[CI/Test-2]   |             except RuntimeError:\n[CI/Test-2]   |                 pass\n[CI/Test-2]   |             else:\n[CI/Test-2]   |                 if PY37 or event_loop.is_running():\n[CI/Test-2]   |                     raise SynchronousOnlyOperation(message)\n[CI/Test-2]   |         # Pass onwards.\n[CI/Test-2]   | >       return func(*args, **kwargs)\n[CI/Test-2]   | \n[CI/Test-2]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: \n[CI/Test-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[CI/Test-2]   | \n[CI/Test-2]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f812560b2d0>\n[CI/Test-2]   | \n[CI/Test-2]   |     @async_unsafe\n[CI/Test-2]   |     def connect(self):\n[CI/Test-2]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[CI/Test-2]   |         # Check for invalid configurations.\n[CI/Test-2]   |         self.check_settings()\n[CI/Test-2]   |         # In case the previous connection was closed while in an atomic block\n[CI/Test-2]   |         self.in_atomic_block = False\n[CI/Test-2]   |         self.savepoint_ids = []\n[CI/Test-2]   |         self.needs_rollback = False\n[CI/Test-2]   |         # Reset parameters defining when to close the connection\n[CI/Test-2]   |         max_age = self.settings_dict['CONN_MAX_AGE']\n[CI/Test-2]   |         self.close_at = None if max_age is None else time.monotonic() + max_age\n[CI/Test-2]   |         self.closed_in_transaction = False\n[CI/Test-2]   |         self.errors_occurred = False\n[CI/Test-2]   |         # Establish the connection\n[CI/Test-2]   |         conn_params = self.get_connection_params()\n[CI/Test-2]   | >       self.connection = self.get_new_connection(conn_params)\n[CI/Test-2]   | \n[CI/Test-2]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:200: \n[CI/Test-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[CI/Test-2]   | \n[CI/Test-2]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f812560b2d0>, {'database': 'modeltranslation', 'host': '127.0.0.1', 'password': 'modeltranslation', 'user': 'modeltranslation'})\n[CI/Test-2]   | kwargs = {}\n[CI/Test-2]   | \n[CI/Test-2]   |     @functools.wraps(func)\n[CI/Test-2]   |     def inner(*args, **kwargs):\n[CI/Test-2]   |         if not os.environ.get('DJANGO_ALLOW_ASYNC_UNSAFE'):\n[CI/Test-2]   |             # Detect a running event loop in this thread.\n[CI/Test-2]   |             try:\n[CI/Test-2]   |                 event_loop = get_running_loop()\n[CI/Test-2]   |             except RuntimeError:\n[CI/Test-2]   |                 pass\n[CI/Test-2]   |             else:\n[CI/Test-2]   |                 if PY37 or event_loop.is_running():\n[CI/Test-2]   |                     raise SynchronousOnlyOperation(message)\n[CI/Test-2]   |         # Pass onwards.\n[CI/Test-2]   | >       return func(*args, **kwargs)\n[CI/Test-2]   | \n[CI/Test-2]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: \n[CI/Test-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[CI/Test-2]   | \n[CI/Test-2]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f812560b2d0>\n[CI/Test-2]   | conn_params = {'database': 'modeltranslation', 'host': '127.0.0.1', 'password': 'modeltranslation', 'user': 'modeltranslation'}\n[CI/Test-2]   | \n[CI/Test-2]   |     @async_unsafe\n[CI/Test-2]   |     def get_new_connection(self, conn_params):\n[CI/Test-2]   | >       connection = Database.connect(**conn_params)\n[CI/Test-2]   | \n[CI/Test-2]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/postgresql/base.py:187: \n[CI/Test-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[CI/Test-2]   | \n[CI/Test-2]   | dsn = 'user=modeltranslation password=modeltranslation host=127.0.0.1 dbname=modeltranslation'\n[CI/Test-2]   | connection_factory = None, cursor_factory = None\n[CI/Test-2]   | kwargs = {'database': 'modeltranslation', 'host': '127.0.0.1', 'password': 'modeltranslation', 'user': 'modeltranslation'}\n[CI/Test-2]   | kwasync = {}\n[CI/Test-2]   | \n[CI/Test-2]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[CI/Test-2]   |         \"\"\"\n[CI/Test-2]   |         Create a new database connection.\n[CI/Test-2]   |     \n[CI/Test-2]   |         The connection parameters can be specified as a string:\n[CI/Test-2]   |     \n[CI/Test-2]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[CI/Test-2]   |     \n[CI/Test-2]   |         or using a set of keyword arguments:\n[CI/Test-2]   |     \n[CI/Test-2]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[CI/Test-2]   |     \n[CI/Test-2]   |         Or as a mix of both. The basic connection parameters are:\n[CI/Test-2]   |     \n[CI/Test-2]   |         - *dbname*: the database name\n[CI/Test-2]   |         - *database*: the database name (only as keyword argument)\n[CI/Test-2]   |         - *user*: user name used to authenticate\n[CI/Test-2]   |         - *password*: password used to authenticate\n[CI/Test-2]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[CI/Test-2]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[CI/Test-2]   |     \n[CI/Test-2]   |         Using the *connection_factory* parameter a different class or connections\n[CI/Test-2]   |         factory can be specified. It should be a callable object taking a dsn\n[CI/Test-2]   |         argument.\n[CI/Test-2]   |     \n[CI/Test-2]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[CI/Test-2]   |         used by cursor().\n[CI/Test-2]   |     \n[CI/Test-2]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[CI/Test-2]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[CI/Test-2]   |     \n[CI/Test-2]   |         Any other keyword parameter will be passed to the underlying client\n[CI/Test-2]   |         library: the list of supported parameters depends on the library version.\n[CI/Test-2]   |     \n[CI/Test-2]   |         \"\"\"\n[CI/Test-2]   |         kwasync = {}\n[CI/Test-2]   |         if 'async' in kwargs:\n[CI/Test-2]   |             kwasync['async'] = kwargs.pop('async')\n[CI/Test-2]   |         if 'async_' in kwargs:\n[CI/Test-2]   |             kwasync['async_'] = kwargs.pop('async_')\n[CI/Test-2]   |     \n[CI/Test-2]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[CI/Test-2]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[CI/Test-2]   | E       psycopg2.OperationalError: connection to server at \"127.0.0.1\", port 5432 failed: Connection refused\n[CI/Test-2]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[CI/Test-2]   | \n[CI/Test-2]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[CI/Test-2]   | \n[CI/Test-2]   | The above exception was the direct cause of the following exception:\n[CI/Test-2]   | \n[CI/Test-2]   | request = <SubRequest '_django_setup_unittest' for <TestCaseFunction test_constructor>>\n[CI/Test-2]   | django_db_blocker = <pytest_django.plugin._DatabaseBlocker object at 0x7f812978c950>\n[CI/Test-2]   | \n[CI/Test-2]   |     @pytest.fixture(autouse=True, scope=\"class\")\n[CI/Test-2]   |     def _django_setup_unittest(\n[CI/Test-2]   |         request,\n[CI/Test-2]   |         django_db_blocker: \"_DatabaseBlocker\",\n[CI/Test-2]   |     ) -> Generator[None, None, None]:\n[CI/Test-2]   |         \"\"\"Setup a django unittest, internal to pytest-django.\"\"\"\n[CI/Test-2]   |         if not django_settings_is_configured() or not is_django_unittest(request):\n[CI/Test-2]   |             yield\n[CI/Test-2]   |             return\n[CI/Test-2]   |     \n[CI/Test-2]   |         # Fix/patch pytest.\n[CI/Test-2]   |         # Before pytest 5.4: https://github.com/pytest-dev/pytest/issues/5991\n[CI/Test-2]   |         # After pytest 5.4: https://github.com/pytest-dev/pytest-django/issues/824\n[CI/Test-2]   |         from _pytest.unittest import TestCaseFunction\n[CI/Test-2]   |         original_runtest = TestCaseFunction.runtest\n[CI/Test-2]   |     \n[CI/Test-2]   |         def non_debugging_runtest(self) -> None:\n[CI/Test-2]   |             self._testcase(result=self)\n[CI/Test-2]   |     \n[CI/Test-2]   |         try:\n[CI/Test-2]   |             TestCaseFunction.runtest = non_debugging_runtest  # type: ignore[assignment]\n[CI/Test-2]   |     \n[CI/Test-2]   | >           request.getfixturevalue(\"django_db_setup\")\n[CI/Test-2]   | \n[CI/Test-2]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/pytest_django/plugin.py:490: \n[CI/Test-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[CI/Test-2]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/pytest_django/fixtures.py:125: in django_db_setup\n[CI/Test-2]   |     **setup_databases_args\n[CI/Test-2]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/test/utils.py:183: in setup_databases\n[CI/Test-2]   |     serialize=connection.settings_dict['TEST'].get('SERIALIZE', True),\n[CI/Test-2]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/creation.py:57: in create_test_db\n[CI/Test-2]   |     self._create_test_db(verbosity, autoclobber, keepdb)\n[CI/Test-2]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/creation.py:191: in _create_test_db\n[CI/Test-2]   |     with self._nodb_cursor() as cursor:\n[CI/Test-2]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/contextlib.py:112: in __enter__\n[CI/Test-2]   |     return next(self.gen)\n[CI/Test-2]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/postgresql/base.py:319: in _nodb_cursor\n[CI/Test-2]   |     with conn.cursor() as cursor:\n[CI/Test-2]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: in inner\n[CI/Test-2]   |     return func(*args, **kwargs)\n[CI/Test-2]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:259: in cursor\n[CI/Test-2]   |     return self._cursor()\n[CI/Test-2]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:235: in _cursor\n[CI/Test-2]   |     self.ensure_connection()\n[CI/Test-2]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: in inner\n[CI/Test-2]   |     return func(*args, **kwargs)\n[CI/Test-2]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:219: in ensure_connection\n[CI/Test-2]   |     self.connect()\n[CI/Test-2]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/utils.py:90: in __exit__\n[CI/Test-2]   |     raise dj_exc_value.with_traceback(traceback) from exc_value\n[CI/Test-2]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:219: in ensure_connection\n[CI/Test-2]   |     self.connect()\n[CI/Test-2]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: in inner\n[CI/Test-2]   |     return func(*args, **kwargs)\n[CI/Test-2]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:200: in connect\n[CI/Test-2]   |     self.connection = self.get_new_connection(conn_params)\n[CI/Test-2]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: in inner\n[CI/Test-2]   |     return func(*args, **kwargs)\n[CI/Test-2]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/postgresql/base.py:187: in get_new_connection\n[CI/Test-2]   |     connection = Database.connect(**conn_params)\n[CI/Test-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[CI/Test-2]   | \n[CI/Test-2]   | dsn = 'user=modeltranslation password=modeltranslation host=127.0.0.1 dbname=modeltranslation'\n[CI/Test-2]   | connection_factory = None, cursor_factory = None\n[CI/Test-2]   | kwargs = {'database': 'modeltranslation', 'host': '127.0.0.1', 'password': 'modeltranslation', 'user': 'modeltranslation'}\n[CI/Test-2]   | kwasync = {}\n[CI/Test-2]   | \n[CI/Test-2]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[CI/Test-2]   |         \"\"\"\n[CI/Test-2]   |         Create a new database connection.\n[CI/Test-2]   |     \n[CI/Test-2]   |         The connection parameters can be specified as a string:\n[CI/Test-2]   |     \n[CI/Test-2]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[CI/Test-2]   |     \n[CI/Test-2]   |         or using a set of keyword arguments:\n[CI/Test-2]   |     \n[CI/Test-2]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[CI/Test-2]   |     \n[CI/Test-2]   |         Or as a mix of both. The basic connection parameters are:\n[CI/Test-2]   |     \n[CI/Test-2]   |         - *dbname*: the database name\n[CI/Test-2]   |         - *database*: the database name (only as keyword argument)\n[CI/Test-2]   |         - *user*: user name used to authenticate\n[CI/Test-2]   |         - *password*: password used to authenticate\n[CI/Test-2]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[CI/Test-2]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[CI/Test-2]   |     \n[CI/Test-2]   |         Using the *connection_factory* parameter a different class or connections\n[CI/Test-2]   |         factory can be specified. It should be a callable object taking a dsn\n[CI/Test-2]   |         argument.\n[CI/Test-2]   |     \n[CI/Test-2]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[CI/Test-2]   |         used by cursor().\n[CI/Test-2]   |     \n[CI/Test-2]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[CI/Test-2]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[CI/Test-2]   |     \n[CI/Test-2]   |         Any other keyword parameter will be passed to the underlying client\n[CI/Test-2]   |         library: the list of supported parameters depends on the library version.\n[CI/Test-2]   |     \n[CI/Test-2]   |         \"\"\"\n[CI/Test-2]   |         kwasync = {}\n[CI/Test-2]   |         if 'async' in kwargs:\n[CI/Test-2]   |             kwasync['async'] = kwargs.pop('async')\n[CI/Test-2]   |         if 'async_' in kwargs:\n[CI/Test-2]   |             kwasync['async_'] = kwargs.pop('async_')\n[CI/Test-2]   |     \n[CI/Test-2]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[CI/Test-2]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[CI/Test-2]   | E       django.db.utils.OperationalError: connection to server at \"127.0.0.1\", port 5432 failed: Connection refused\n[CI/Test-2]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[CI/Test-2]   | \n[CI/Test-2]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[CI/Test-2]   | =============================== warnings summary ===============================\n[CI/Test-2]   | modeltranslation/tests/tests.py::TestAutodiscover::test_duplication\n[CI/Test-2]   |   /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/postgresql/base.py:310: RuntimeWarning: Normally Django will use a connection to the 'postgres' database to avoid running initialization queries against the production database when it's not needed (for example, when running tests). Django was unable to create a connection to the 'postgres' database and will use the first PostgreSQL database instead.\n[CI/Test-2]   |     RuntimeWarning\n[CI/Test-2]   | \n[CI/Test-2]   | -- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n[CI/Test-2]   | =========================== short test summary info ============================\n[CI/Test-2]   | ERROR modeltranslation/tests/tests.py::TestAutodiscover::test_duplication - django.db.utils.OperationalError: connection to server at \"127.0.0.1\", port 5432 failed: Connection refused\n[CI/Test-2]   | \tIs the server running on that host and accepting TCP/IP connections?\n[CI/Test-2]   | ERROR modeltranslation/tests/tests.py::TestAutodiscover::test_global - django.db.utils.OperationalError: connection to server at \"127.0.0.1\", port 5432 failed: Connection refused\n[CI/Test-2]   | \tIs the server running on that host and accepting TCP/IP connections?\n[CI/Test-2]   | ERROR modeltranslation/tests/tests.py::TestAutodiscover::test_simple - django.db.utils.OperationalError: connection to server at \"127.0.0.1\", port 5432 failed: Connection refused\n[CI/Test-2]   | \tIs the server running on that host and accepting TCP/IP connections?\n[CI/Test-2]   | ERROR modeltranslation/tests/tests.py::ModeltranslationTest::test_constructor - django.db.utils.OperationalError: connection to server at \"127.0.0.1\", port 5432 failed: Connection refused\n[CI/Test-2]   | \tIs the server running on that host and accepting TCP/IP connections?\n[CI/Test-2]   | ERROR modeltranslation/tests/tests.py::ModeltranslationTest::test_descriptor_introspection - django.db.utils.OperationalError: connection to server at \"127.0.0.1\", port 5432 failed: Connection refused\n[CI/Test-2]   | \tIs the server running on that host and accepting TCP/IP connections?\n[CI/Test-2]   | !!!!!!!!!!!!!!!!!!!!!!!!!! stopping after 5 failures !!!!!!!!!!!!!!!!!!!!!!!!!!!\n[CI/Test-2]   | ========================= 1 warning, 5 errors in 4.45s =========================\n[CI/Test-1]   | modeltranslation/tests/tests.py ........................................ [ 31%]\n[CI/Test-2]   \u274c  Failure - Main Run tests\n[CI/Test-2] exitcode '1': failure\n[CI/Test-1]   | ........................................................................ [ 87%]\n[CI/Test-1]   | ................                                                         [100%]\n[CI/Test-1]   | \n[CI/Test-1]   | ---------- coverage: platform linux, python 3.8.11-final-0 -----------\n[CI/Test-1]   | Name                                                                Stmts   Miss  Cover\n[CI/Test-1]   | ---------------------------------------------------------------------------------------\n[CI/Test-1]   | modeltranslation/__init__.py                                            6      3    50%\n[CI/Test-1]   | modeltranslation/admin.py                                             218     24    89%\n[CI/Test-1]   | modeltranslation/apps.py                                                7      0   100%\n[CI/Test-1]   | modeltranslation/decorators.py                                          8      1    88%\n[CI/Test-1]   | modeltranslation/fields.py                                            216     40    81%\n[CI/Test-1]   | modeltranslation/forms.py                                              28     13    54%\n[CI/Test-1]   | modeltranslation/management/__init__.py                                 0      0   100%\n[CI/Test-1]   | modeltranslation/management/commands/__init__.py                        0      0   100%\n[CI/Test-1]   | modeltranslation/management/commands/loaddata.py                       26      6    77%\n[CI/Test-1]   | modeltranslation/management/commands/sync_translation_fields.py        85     85     0%\n[CI/Test-1]   | modeltranslation/management/commands/update_translation_fields.py      48      5    90%\n[CI/Test-1]   | modeltranslation/manager.py                                           367     48    87%\n[CI/Test-1]   | modeltranslation/models.py                                             35      9    74%\n[CI/Test-1]   | modeltranslation/settings.py                                           33      6    82%\n[CI/Test-1]   | modeltranslation/tests/__init__.py                                      0      0   100%\n[CI/Test-1]   | modeltranslation/tests/migrations/0001_initial.py                       9      0   100%\n[CI/Test-1]   | modeltranslation/tests/migrations/__init__.py                           0      0   100%\n[CI/Test-1]   | modeltranslation/tests/models.py                                      262      3    99%\n[CI/Test-1]   | modeltranslation/tests/project_translation.py                           5      0   100%\n[CI/Test-1]   | modeltranslation/tests/settings.py                                     24      1    96%\n[CI/Test-1]   | modeltranslation/tests/test_app/__init__.py                             0      0   100%\n[CI/Test-1]   | modeltranslation/tests/test_app/models.py                              10      0   100%\n[CI/Test-1]   | modeltranslation/tests/test_app/translation.py                          5      0   100%\n[CI/Test-1]   | modeltranslation/tests/tests.py                                      2284     21    99%\n[CI/Test-1]   | modeltranslation/tests/translation.py                                 123      0   100%\n[CI/Test-1]   | modeltranslation/tests/urls.py                                          1      1     0%\n[CI/Test-1]   | modeltranslation/thread_context.py                                     23      0   100%\n[CI/Test-1]   | modeltranslation/translator.py                                        292     18    94%\n[CI/Test-1]   | modeltranslation/utils.py                                              86      5    94%\n[CI/Test-1]   | modeltranslation/widgets.py                                            37     19    49%\n[CI/Test-1]   | ---------------------------------------------------------------------------------------\n[CI/Test-1]   | TOTAL                                                                4238    308    93%\n[CI/Test-1]   | \n[CI/Test-1]   | \n[CI/Test-1]   | ============================= 128 passed in 8.05s ==============================\n[CI/Test-1]   \u2705  Success - Main Run tests\n[CI/Test-1] \u2b50 Run Post Set up Python 3.8\n[CI/Test-1]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/actions-setup-python@v3/dist/cache-save/index.js] user= workdir=\n[CI/Test-1]   \u2705  Success - Post Set up Python 3.8\n[CI/Test-2] \ud83c\udfc1  Job failed\n[CI/Test-1] \ud83c\udfc1  Job failed\n",
    "actions_stderr": "Error: Job 'Check' failed\n"
}