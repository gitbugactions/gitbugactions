{
    "repository": "memsql/memsql-python",
    "clone_url": "https://github.com/memsql/memsql-python.git",
    "timestamp": "2023-05-29T14:56:54.522659Z",
    "clone_success": true,
    "number of actions": 1,
    "number_of_test_actions": 1,
    "actions_successful": false,
    "actions_stdout": "[Test/test] \ud83d\ude80  Start image=crawlergpt:latest\n[Test/test]   \ud83d\udc33  docker pull image=crawlergpt:latest platform= username= forcePull=false\n[Test/test]   \ud83d\udc33  docker create image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[Test/test]   \ud83d\udc33  docker run image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[Test/test]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/memsql-memsql-python] user=0 workdir=\n[Test/test]   \u2601  git clone 'https://github.com/actions/setup-python' # ref=v2\n[Test/test] \u2b50 Run Main actions/checkout@v2\n[Test/test]   \u2705  Success - Main actions/checkout@v2\n[Test/test] \u2b50 Run Main Set up Python\n[Test/test]   \ud83d\udc33  docker cp src=/home/andre-silva/.cache/act/actions-setup-python@v2/ dst=/var/run/act/actions/actions-setup-python@v2/\n[Test/test]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /var/run/act/actions/actions-setup-python@v2/] user=0 workdir=\n[Test/test]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/actions-setup-python@v2/dist/setup/index.js] user= workdir=\n[Test/test]   \ud83d\udcac  ::debug::Semantic version spec of 3.9 is 3.9\n[Test/test]   \ud83d\udcac  ::debug::isExplicit: \n[Test/test]   \ud83d\udcac  ::debug::explicit? false\n[Test/test]   \ud83d\udcac  ::debug::isExplicit: 2.7.18\n[Test/test]   \ud83d\udcac  ::debug::explicit? true\n[Test/test]   \ud83d\udcac  ::debug::isExplicit: 3.5.10\n[Test/test]   \ud83d\udcac  ::debug::explicit? true\n[Test/test]   \ud83d\udcac  ::debug::isExplicit: 3.6.14\n[Test/test]   \ud83d\udcac  ::debug::explicit? true\n[Test/test]   \ud83d\udcac  ::debug::isExplicit: 3.7.11\n[Test/test]   \ud83d\udcac  ::debug::explicit? true\n[Test/test]   \ud83d\udcac  ::debug::isExplicit: 3.8.11\n[Test/test]   \ud83d\udcac  ::debug::explicit? true\n[Test/test]   \ud83d\udcac  ::debug::isExplicit: 3.9.6\n[Test/test]   \ud83d\udcac  ::debug::explicit? true\n[Test/test]   \ud83d\udcac  ::debug::evaluating 6 versions\n[Test/test]   \ud83d\udcac  ::debug::matched: 3.9.6\n[Test/test]   \ud83d\udcac  ::debug::checking cache: /opt/hostedtoolcache/Python/3.9.6/x64\n[Test/test]   \ud83d\udcac  ::debug::Found tool in cache Python 3.9.6 x64\n[Test/test]   | Successfully setup CPython (3.9.6)\n[Test/test]   \u2753 add-matcher /run/act/actions/actions-setup-python@v2/.github/python.json\n[Test/test]   \u2705  Success - Main Set up Python\n[Test/test]   \u2699  ::set-env:: pythonLocation=/opt/hostedtoolcache/Python/3.9.6/x64\n[Test/test]   \u2699  ::set-env:: LD_LIBRARY_PATH=/opt/hostedtoolcache/Python/3.9.6/x64/lib\n[Test/test]   \u2699  ::set-output:: python-version=3.9.6\n[Test/test]   \u2699  ::add-path:: /opt/hostedtoolcache/Python/3.9.6/x64\n[Test/test]   \u2699  ::add-path:: /opt/hostedtoolcache/Python/3.9.6/x64/bin\n[Test/test] \u2b50 Run Main Install dependencies\n[Test/test]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/2] user= workdir=\n[Test/test]   | Requirement already satisfied: pip in /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages (21.2.4)\n[Test/test]   | Collecting pip\n[Test/test]   |   Downloading pip-23.1.2-py3-none-any.whl (2.1 MB)\n[Test/test]   | Installing collected packages: pip\n[Test/test]   |   Attempting uninstall: pip\n[Test/test]   |     Found existing installation: pip 21.2.4\n[Test/test]   |     Uninstalling pip-21.2.4:\n[Test/test]   |       Successfully uninstalled pip-21.2.4\n[Test/test]   | Successfully installed pip-23.1.2\n[Test/test]   | Collecting flake8\n[Test/test]   |   Downloading flake8-6.0.0-py2.py3-none-any.whl (57 kB)\n[Test/test]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 57.8/57.8 kB 2.1 MB/s eta 0:00:00\n[Test/test]   | Collecting pytest\n[Test/test]   |   Downloading pytest-7.3.1-py3-none-any.whl (320 kB)\n[Test/test]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 320.5/320.5 kB 9.1 MB/s eta 0:00:00\n[Test/test]   | Collecting mock\n[Test/test]   |   Downloading mock-5.0.2-py3-none-any.whl (30 kB)\n[Test/test]   | Collecting ordereddict\n[Test/test]   |   Downloading ordereddict-1.1.tar.gz (2.1 kB)\n[Test/test]   |   Installing build dependencies: started\n[Test/test]   |   Installing build dependencies: finished with status 'done'\n[Test/test]   |   Getting requirements to build wheel: started\n[Test/test]   |   Getting requirements to build wheel: finished with status 'done'\n[Test/test]   |   Preparing metadata (pyproject.toml): started\n[Test/test]   |   Preparing metadata (pyproject.toml): finished with status 'done'\n[Test/test]   | Collecting mccabe<0.8.0,>=0.7.0 (from flake8)\n[Test/test]   |   Downloading mccabe-0.7.0-py2.py3-none-any.whl (7.3 kB)\n[Test/test]   | Collecting pycodestyle<2.11.0,>=2.10.0 (from flake8)\n[Test/test]   |   Downloading pycodestyle-2.10.0-py2.py3-none-any.whl (41 kB)\n[Test/test]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 41.3/41.3 kB 9.1 MB/s eta 0:00:00\n[Test/test]   | Collecting pyflakes<3.1.0,>=3.0.0 (from flake8)\n[Test/test]   |   Downloading pyflakes-3.0.1-py2.py3-none-any.whl (62 kB)\n[Test/test]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 62.8/62.8 kB 2.0 MB/s eta 0:00:00\n[Test/test]   | Collecting iniconfig (from pytest)\n[Test/test]   |   Downloading iniconfig-2.0.0-py3-none-any.whl (5.9 kB)\n[Test/test]   | Collecting packaging (from pytest)\n[Test/test]   |   Downloading packaging-23.1-py3-none-any.whl (48 kB)\n[Test/test]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 48.9/48.9 kB 5.8 MB/s eta 0:00:00\n[Test/test]   | Collecting pluggy<2.0,>=0.12 (from pytest)\n[Test/test]   |   Downloading pluggy-1.0.0-py2.py3-none-any.whl (13 kB)\n[Test/test]   | Collecting exceptiongroup>=1.0.0rc8 (from pytest)\n[Test/test]   |   Downloading exceptiongroup-1.1.1-py3-none-any.whl (14 kB)\n[Test/test]   | Collecting tomli>=1.0.0 (from pytest)\n[Test/test]   |   Downloading tomli-2.0.1-py3-none-any.whl (12 kB)\n[Test/test]   | Building wheels for collected packages: ordereddict\n[Test/test]   |   Building wheel for ordereddict (pyproject.toml): started\n[Test/test]   |   Building wheel for ordereddict (pyproject.toml): finished with status 'done'\n[Test/test]   |   Created wheel for ordereddict: filename=ordereddict-1.1-py3-none-any.whl size=3509 sha256=e0fddd7cfadd26cb604ba371ad039fb8d3d04d5ba797188ce5a64aeb33332b1d\n[Test/test]   |   Stored in directory: /home/runneradmin/.cache/pip/wheels/cf/77/af/aee8a9045795a9f737655f4c4db59b6b464829a35f3b2c10b2\n[Test/test]   | Successfully built ordereddict\n[Test/test]   | Installing collected packages: ordereddict, tomli, pyflakes, pycodestyle, pluggy, packaging, mock, mccabe, iniconfig, exceptiongroup, pytest, flake8\n[Test/test]   | Successfully installed exceptiongroup-1.1.1 flake8-6.0.0 iniconfig-2.0.0 mccabe-0.7.0 mock-5.0.2 ordereddict-1.1 packaging-23.1 pluggy-1.0.0 pycodestyle-2.10.0 pyflakes-3.0.1 pytest-7.3.1 tomli-2.0.1\n[Test/test]   | \n[Test/test]   | [notice] A new release of pip is available: 21.1.3 -> 23.1.2\n[Test/test]   | [notice] To update, run: pip install --upgrade pip\n[Test/test]   | Processing /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/memsql-memsql-python\n[Test/test]   |   Installing build dependencies: started\n[Test/test]   |   Installing build dependencies: finished with status 'done'\n[Test/test]   |   Getting requirements to build wheel: started\n[Test/test]   |   Getting requirements to build wheel: finished with status 'done'\n[Test/test]   |   Preparing metadata (pyproject.toml): started\n[Test/test]   |   Preparing metadata (pyproject.toml): finished with status 'done'\n[Test/test]   | Collecting wraptor (from memsql==3.2.0)\n[Test/test]   |   Downloading Wraptor-0.7.0.tar.gz (6.0 kB)\n[Test/test]   |   Installing build dependencies: started\n[Test/test]   |   Installing build dependencies: finished with status 'done'\n[Test/test]   |   Getting requirements to build wheel: started\n[Test/test]   |   Getting requirements to build wheel: finished with status 'done'\n[Test/test]   |   Preparing metadata (pyproject.toml): started\n[Test/test]   |   Preparing metadata (pyproject.toml): finished with status 'done'\n[Test/test]   | Collecting simplejson (from memsql==3.2.0)\n[Test/test]   |   Downloading simplejson-3.19.1-cp39-cp39-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl (137 kB)\n[Test/test]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 137.4/137.4 kB 4.1 MB/s eta 0:00:00\n[Test/test]   | Collecting python-dateutil<3.0 (from memsql==3.2.0)\n[Test/test]   |   Downloading python_dateutil-2.8.2-py2.py3-none-any.whl (247 kB)\n[Test/test]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 247.7/247.7 kB 3.3 MB/s eta 0:00:00\n[Test/test]   | Collecting mysqlclient<3.0,>=1.4 (from memsql==3.2.0)\n[Test/test]   |   Downloading mysqlclient-2.1.1.tar.gz (88 kB)\n[Test/test]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 88.1/88.1 kB 3.3 MB/s eta 0:00:00\n[Test/test]   |   Installing build dependencies: started\n[Test/test]   |   Installing build dependencies: finished with status 'done'\n[Test/test]   |   Getting requirements to build wheel: started\n[Test/test]   |   Getting requirements to build wheel: finished with status 'done'\n[Test/test]   |   Preparing metadata (pyproject.toml): started\n[Test/test]   |   Preparing metadata (pyproject.toml): finished with status 'done'\n[Test/test]   | Collecting six>=1.5 (from python-dateutil<3.0->memsql==3.2.0)\n[Test/test]   |   Downloading six-1.16.0-py2.py3-none-any.whl (11 kB)\n[Test/test]   | Building wheels for collected packages: memsql, mysqlclient, wraptor\n[Test/test]   |   Building wheel for memsql (pyproject.toml): started\n[Test/test]   |   Building wheel for memsql (pyproject.toml): finished with status 'done'\n[Test/test]   |   Created wheel for memsql: filename=memsql-3.2.0-py3-none-any.whl size=21000 sha256=c0a1dc240d44bd8793de504ee1389e6f04940bf72f71dbe36c9f3bfb8604a32f\n[Test/test]   |   Stored in directory: /home/runneradmin/.cache/pip/wheels/16/3d/33/81c60608d597bd67609726774861e7616e1fbdc067d08a5bfa\n[Test/test]   |   Building wheel for mysqlclient (pyproject.toml): started\n[Test/test]   |   Building wheel for mysqlclient (pyproject.toml): finished with status 'done'\n[Test/test]   |   Created wheel for mysqlclient: filename=mysqlclient-2.1.1-cp39-cp39-linux_x86_64.whl size=111093 sha256=87204a013d70377f0619ad549c9162fd022fac05fb33e3c993dc5de4ed14eb6f\n[Test/test]   |   Stored in directory: /home/runneradmin/.cache/pip/wheels/f3/a5/27/c6312d8008951cfd5511684378a9e057b82006c70e1fea6107\n[Test/test]   |   Building wheel for wraptor (pyproject.toml): started\n[Test/test]   |   Building wheel for wraptor (pyproject.toml): finished with status 'done'\n[Test/test]   |   Created wheel for wraptor: filename=Wraptor-0.7.0-py3-none-any.whl size=8248 sha256=d4c8b121382883448658241fff00b5eb0c202601cee580047ad87265ed172195\n[Test/test]   |   Stored in directory: /home/runneradmin/.cache/pip/wheels/18/6c/a1/987d3b57a9b540c1f2b27666e0efd3581a273200b819a184f5\n[Test/test]   | Successfully built memsql mysqlclient wraptor\n[Test/test]   | Installing collected packages: wraptor, six, simplejson, mysqlclient, python-dateutil, memsql\n[Test/test]   | Successfully installed memsql-3.2.0 mysqlclient-2.1.1 python-dateutil-2.8.2 simplejson-3.19.1 six-1.16.0 wraptor-0.7.0\n[Test/test]   | \n[Test/test]   | [notice] A new release of pip is available: 21.1.3 -> 23.1.2\n[Test/test]   | [notice] To update, run: pip install --upgrade pip\n[Test/test]   \u2705  Success - Main Install dependencies\n[Test/test] \u2b50 Run Main Run tests\n[Test/test]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/3] user= workdir=\n[Test/test]   | ============================= test session starts ==============================\n[Test/test]   | platform linux -- Python 3.9.6, pytest-7.3.1, pluggy-1.0.0\n[Test/test]   | rootdir: /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/memsql-memsql-python\n[Test/test]   | collected 54 items\n[Test/test]   | \n[Test/test]   | memsql/common/test/test_connection_pool.py EEEEEEEEEEEF.EFFFFFEFEEEEEE.E [ 53%]\n[Test/test]   | FF                                                                       [ 57%]\n[Test/test]   | memsql/common/test/test_database_adapters.py EEEEEE.EEEEEEEEEEE          [ 90%]\n[Test/test]   | memsql/common/test/test_query_builder.py ....                            [ 98%]\n[Test/test]   | memsql/common/test/test_select_result.py .                               [100%]\n[Test/test]   | \n[Test/test]   | ==================================== ERRORS ====================================\n[Test/test]   | __________________ ERROR at setup of TestQueries.test_insert ___________________\n[Test/test]   | \n[Test/test]   | self = <memsql.common.test.test_database_adapters.TestQueries object at 0x7f95ed414850>\n[Test/test]   | request = <SubRequest 'x_conn' for <Function test_insert>>\n[Test/test]   | test_db_args = {'host': '127.0.0.1', 'password': 'mysql', 'port': 3306, 'user': 'root'}\n[Test/test]   | test_db_database = 'memsql_python_tests'\n[Test/test]   | \n[Test/test]   |     @pytest.fixture(scope=\"class\")\n[Test/test]   |     def x_conn(self, request, test_db_args, test_db_database):\n[Test/test]   | >       return self._x_conn(request, test_db_args, test_db_database)\n[Test/test]   | \n[Test/test]   | memsql/common/test/test_database_adapters.py:48: \n[Test/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test/test]   | memsql/common/test/test_database_adapters.py:51: in _x_conn\n[Test/test]   |     conn = database.connect(**test_db_args)\n[Test/test]   | memsql/common/database.py:20: in connect\n[Test/test]   |     return Connection(*args, **kwargs)\n[Test/test]   | memsql/common/database.py:71: in __init__\n[Test/test]   |     self.reconnect()\n[Test/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test/test]   | \n[Test/test]   | self = <memsql.common.database.Connection object at 0x7f95ed303490>\n[Test/test]   | \n[Test/test]   |     def reconnect(self):\n[Test/test]   |         \"\"\"Closes the existing database connection and re-opens it.\"\"\"\n[Test/test]   | >       conn = _mysql.connect(**self._db_args)\n[Test/test]   | E       MySQLdb.OperationalError: (2003, \"Can't connect to MySQL server on '127.0.0.1:3306' (111)\")\n[Test/test]   | \n[Test/test]   | memsql/common/database.py:102: OperationalError\n[Test/test]   | _________________ ERROR at setup of TestQueries.test_insert_qb _________________\n[Test/test]   | \n[Test/test]   | self = <memsql.common.test.test_database_adapters.TestQueries object at 0x7f95ed414850>\n[Test/test]   | request = <SubRequest 'x_conn' for <Function test_insert>>\n[Test/test]   | test_db_args = {'host': '127.0.0.1', 'password': 'mysql', 'port': 3306, 'user': 'root'}\n[Test/test]   | test_db_database = 'memsql_python_tests'\n[Test/test]   | \n[Test/test]   |     @pytest.fixture(scope=\"class\")\n[Test/test]   |     def x_conn(self, request, test_db_args, test_db_database):\n[Test/test]   | >       return self._x_conn(request, test_db_args, test_db_database)\n[Test/test]   | \n[Test/test]   | memsql/common/test/test_database_adapters.py:48: \n[Test/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test/test]   | memsql/common/test/test_database_adapters.py:51: in _x_conn\n[Test/test]   |     conn = database.connect(**test_db_args)\n[Test/test]   | memsql/common/database.py:20: in connect\n[Test/test]   |     return Connection(*args, **kwargs)\n[Test/test]   | memsql/common/database.py:71: in __init__\n[Test/test]   |     self.reconnect()\n[Test/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test/test]   | \n[Test/test]   | self = <memsql.common.database.Connection object at 0x7f95ed303490>\n[Test/test]   | \n[Test/test]   |     def reconnect(self):\n[Test/test]   |         \"\"\"Closes the existing database connection and re-opens it.\"\"\"\n[Test/test]   | >       conn = _mysql.connect(**self._db_args)\n[Test/test]   | E       MySQLdb.OperationalError: (2003, \"Can't connect to MySQL server on '127.0.0.1:3306' (111)\")\n[Test/test]   | \n[Test/test]   | memsql/common/database.py:102: OperationalError\n[Test/test]   | __________________ ERROR at setup of TestQueries.test_select ___________________\n[Test/test]   | \n[Test/test]   | self = <memsql.common.test.test_database_adapters.TestQueries object at 0x7f95ed414850>\n[Test/test]   | request = <SubRequest 'x_conn' for <Function test_insert>>\n[Test/test]   | test_db_args = {'host': '127.0.0.1', 'password': 'mysql', 'port': 3306, 'user': 'root'}\n[Test/test]   | test_db_database = 'memsql_python_tests'\n[Test/test]   | \n[Test/test]   |     @pytest.fixture(scope=\"class\")\n[Test/test]   |     def x_conn(self, request, test_db_args, test_db_database):\n[Test/test]   | >       return self._x_conn(request, test_db_args, test_db_database)\n[Test/test]   | \n[Test/test]   | memsql/common/test/test_database_adapters.py:48: \n[Test/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test/test]   | memsql/common/test/test_database_adapters.py:51: in _x_conn\n[Test/test]   |     conn = database.connect(**test_db_args)\n[Test/test]   | memsql/common/database.py:20: in connect\n[Test/test]   |     return Connection(*args, **kwargs)\n[Test/test]   | memsql/common/database.py:71: in __init__\n[Test/test]   |     self.reconnect()\n[Test/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test/test]   | \n[Test/test]   | self = <memsql.common.database.Connection object at 0x7f95ed303490>\n[Test/test]   | \n[Test/test]   |     def reconnect(self):\n[Test/test]   |         \"\"\"Closes the existing database connection and re-opens it.\"\"\"\n[Test/test]   | >       conn = _mysql.connect(**self._db_args)\n[Test/test]   | E       MySQLdb.OperationalError: (2003, \"Can't connect to MySQL server on '127.0.0.1:3306' (111)\")\n[Test/test]   | \n[Test/test]   | memsql/common/database.py:102: OperationalError\n[Test/test]   | __________________ ERROR at setup of TestQueries.test_unicode __________________\n[Test/test]   | \n[Test/test]   | self = <memsql.common.test.test_database_adapters.TestQueries object at 0x7f95ed414850>\n[Test/test]   | request = <SubRequest 'x_conn' for <Function test_insert>>\n[Test/test]   | test_db_args = {'host': '127.0.0.1', 'password': 'mysql', 'port': 3306, 'user': 'root'}\n[Test/test]   | test_db_database = 'memsql_python_tests'\n[Test/test]   | \n[Test/test]   |     @pytest.fixture(scope=\"class\")\n[Test/test]   |     def x_conn(self, request, test_db_args, test_db_database):\n[Test/test]   | >       return self._x_conn(request, test_db_args, test_db_database)\n[Test/test]   | \n[Test/test]   | memsql/common/test/test_database_adapters.py:48: \n[Test/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test/test]   | memsql/common/test/test_database_adapters.py:51: in _x_conn\n[Test/test]   |     conn = database.connect(**test_db_args)\n[Test/test]   | memsql/common/database.py:20: in connect\n[Test/test]   |     return Connection(*args, **kwargs)\n[Test/test]   | memsql/common/database.py:71: in __init__\n[Test/test]   |     self.reconnect()\n[Test/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test/test]   | \n[Test/test]   | self = <memsql.common.database.Connection object at 0x7f95ed303490>\n[Test/test]   | \n[Test/test]   |     def reconnect(self):\n[Test/test]   |         \"\"\"Closes the existing database connection and re-opens it.\"\"\"\n[Test/test]   | >       conn = _mysql.connect(**self._db_args)\n[Test/test]   | E       MySQLdb.OperationalError: (2003, \"Can't connect to MySQL server on '127.0.0.1:3306' (111)\")\n[Test/test]   | \n[Test/test]   | memsql/common/database.py:102: OperationalError\n[Test/test]   | ________________ ERROR at setup of TestQueries.test_queryparams ________________\n[Test/test]   | \n[Test/test]   | self = <memsql.common.test.test_database_adapters.TestQueries object at 0x7f95ed414850>\n[Test/test]   | request = <SubRequest 'x_conn' for <Function test_insert>>\n[Test/test]   | test_db_args = {'host': '127.0.0.1', 'password': 'mysql', 'port': 3306, 'user': 'root'}\n[Test/test]   | test_db_database = 'memsql_python_tests'\n[Test/test]   | \n[Test/test]   |     @pytest.fixture(scope=\"class\")\n[Test/test]   |     def x_conn(self, request, test_db_args, test_db_database):\n[Test/test]   | >       return self._x_conn(request, test_db_args, test_db_database)\n[Test/test]   | \n[Test/test]   | memsql/common/test/test_database_adapters.py:48: \n[Test/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test/test]   | memsql/common/test/test_database_adapters.py:51: in _x_conn\n[Test/test]   |     conn = database.connect(**test_db_args)\n[Test/test]   | memsql/common/database.py:20: in connect\n[Test/test]   |     return Connection(*args, **kwargs)\n[Test/test]   | memsql/common/database.py:71: in __init__\n[Test/test]   |     self.reconnect()\n[Test/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test/test]   | \n[Test/test]   | self = <memsql.common.database.Connection object at 0x7f95ed303490>\n[Test/test]   | \n[Test/test]   |     def reconnect(self):\n[Test/test]   |         \"\"\"Closes the existing database connection and re-opens it.\"\"\"\n[Test/test]   | >       conn = _mysql.connect(**self._db_args)\n[Test/test]   | E       MySQLdb.OperationalError: (2003, \"Can't connect to MySQL server on '127.0.0.1:3306' (111)\")\n[Test/test]   | \n[Test/test]   | memsql/common/database.py:102: OperationalError\n[Test/test]   | ______________ ERROR at setup of TestQueries.test_advanced_params ______________\n[Test/test]   | \n[Test/test]   | self = <memsql.common.test.test_database_adapters.TestQueries object at 0x7f95ed414850>\n[Test/test]   | request = <SubRequest 'x_conn' for <Function test_insert>>\n[Test/test]   | test_db_args = {'host': '127.0.0.1', 'password': 'mysql', 'port': 3306, 'user': 'root'}\n[Test/test]   | test_db_database = 'memsql_python_tests'\n[Test/test]   | \n[Test/test]   |     @pytest.fixture(scope=\"class\")\n[Test/test]   |     def x_conn(self, request, test_db_args, test_db_database):\n[Test/test]   | >       return self._x_conn(request, test_db_args, test_db_database)\n[Test/test]   | \n[Test/test]   | memsql/common/test/test_database_adapters.py:48: \n[Test/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test/test]   | memsql/common/test/test_database_adapters.py:51: in _x_conn\n[Test/test]   |     conn = database.connect(**test_db_args)\n[Test/test]   | memsql/common/database.py:20: in connect\n[Test/test]   |     return Connection(*args, **kwargs)\n[Test/test]   | memsql/common/database.py:71: in __init__\n[Test/test]   |     self.reconnect()\n[Test/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test/test]   | \n[Test/test]   | self = <memsql.common.database.Connection object at 0x7f95ed303490>\n[Test/test]   | \n[Test/test]   |     def reconnect(self):\n[Test/test]   |         \"\"\"Closes the existing database connection and re-opens it.\"\"\"\n[Test/test]   | >       conn = _mysql.connect(**self._db_args)\n[Test/test]   | E       MySQLdb.OperationalError: (2003, \"Can't connect to MySQL server on '127.0.0.1:3306' (111)\")\n[Test/test]   | \n[Test/test]   | memsql/common/database.py:102: OperationalError\n[Test/test]   | __________________ ERROR at setup of TestQueries.test_kwargs ___________________\n[Test/test]   | \n[Test/test]   | self = <memsql.common.test.test_database_adapters.TestQueries object at 0x7f95ed414850>\n[Test/test]   | request = <SubRequest 'x_conn' for <Function test_insert>>\n[Test/test]   | test_db_args = {'host': '127.0.0.1', 'password': 'mysql', 'port': 3306, 'user': 'root'}\n[Test/test]   | test_db_database = 'memsql_python_tests'\n[Test/test]   | \n[Test/test]   |     @pytest.fixture(scope=\"class\")\n[Test/test]   |     def x_conn(self, request, test_db_args, test_db_database):\n[Test/test]   | >       return self._x_conn(request, test_db_args, test_db_database)\n[Test/test]   | \n[Test/test]   | memsql/common/test/test_database_adapters.py:48: \n[Test/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test/test]   | memsql/common/test/test_database_adapters.py:51: in _x_conn\n[Test/test]   |     conn = database.connect(**test_db_args)\n[Test/test]   | memsql/common/database.py:20: in connect\n[Test/test]   |     return Connection(*args, **kwargs)\n[Test/test]   | memsql/common/database.py:71: in __init__\n[Test/test]   |     self.reconnect()\n[Test/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test/test]   | \n[Test/test]   | self = <memsql.common.database.Connection object at 0x7f95ed303490>\n[Test/test]   | \n[Test/test]   |     def reconnect(self):\n[Test/test]   |         \"\"\"Closes the existing database connection and re-opens it.\"\"\"\n[Test/test]   | >       conn = _mysql.connect(**self._db_args)\n[Test/test]   | E       MySQLdb.OperationalError: (2003, \"Can't connect to MySQL server on '127.0.0.1:3306' (111)\")\n[Test/test]   | \n[Test/test]   | memsql/common/database.py:102: OperationalError\n[Test/test]   | ________________ ERROR at setup of TestQueries.test_kwargs_all _________________\n[Test/test]   | \n[Test/test]   | self = <memsql.common.test.test_database_adapters.TestQueries object at 0x7f95ed414850>\n[Test/test]   | request = <SubRequest 'x_conn' for <Function test_insert>>\n[Test/test]   | test_db_args = {'host': '127.0.0.1', 'password': 'mysql', 'port': 3306, 'user': 'root'}\n[Test/test]   | test_db_database = 'memsql_python_tests'\n[Test/test]   | \n[Test/test]   |     @pytest.fixture(scope=\"class\")\n[Test/test]   |     def x_conn(self, request, test_db_args, test_db_database):\n[Test/test]   | >       return self._x_conn(request, test_db_args, test_db_database)\n[Test/test]   | \n[Test/test]   | memsql/common/test/test_database_adapters.py:48: \n[Test/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test/test]   | memsql/common/test/test_database_adapters.py:51: in _x_conn\n[Test/test]   |     conn = database.connect(**test_db_args)\n[Test/test]   | memsql/common/database.py:20: in connect\n[Test/test]   |     return Connection(*args, **kwargs)\n[Test/test]   | memsql/common/database.py:71: in __init__\n[Test/test]   |     self.reconnect()\n[Test/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test/test]   | \n[Test/test]   | self = <memsql.common.database.Connection object at 0x7f95ed303490>\n[Test/test]   | \n[Test/test]   |     def reconnect(self):\n[Test/test]   |         \"\"\"Closes the existing database connection and re-opens it.\"\"\"\n[Test/test]   | >       conn = _mysql.connect(**self._db_args)\n[Test/test]   | E       MySQLdb.OperationalError: (2003, \"Can't connect to MySQL server on '127.0.0.1:3306' (111)\")\n[Test/test]   | \n[Test/test]   | memsql/common/database.py:102: OperationalError\n[Test/test]   | ____________ ERROR at setup of TestQueries.test_kwparams_exclusive _____________\n[Test/test]   | \n[Test/test]   | self = <memsql.common.test.test_database_adapters.TestQueries object at 0x7f95ed414850>\n[Test/test]   | request = <SubRequest 'x_conn' for <Function test_insert>>\n[Test/test]   | test_db_args = {'host': '127.0.0.1', 'password': 'mysql', 'port': 3306, 'user': 'root'}\n[Test/test]   | test_db_database = 'memsql_python_tests'\n[Test/test]   | \n[Test/test]   |     @pytest.fixture(scope=\"class\")\n[Test/test]   |     def x_conn(self, request, test_db_args, test_db_database):\n[Test/test]   | >       return self._x_conn(request, test_db_args, test_db_database)\n[Test/test]   | \n[Test/test]   | memsql/common/test/test_database_adapters.py:48: \n[Test/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test/test]   | memsql/common/test/test_database_adapters.py:51: in _x_conn\n[Test/test]   |     conn = database.connect(**test_db_args)\n[Test/test]   | memsql/common/database.py:20: in connect\n[Test/test]   |     return Connection(*args, **kwargs)\n[Test/test]   | memsql/common/database.py:71: in __init__\n[Test/test]   |     self.reconnect()\n[Test/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test/test]   | \n[Test/test]   | self = <memsql.common.database.Connection object at 0x7f95ed303490>\n[Test/test]   | \n[Test/test]   |     def reconnect(self):\n[Test/test]   |         \"\"\"Closes the existing database connection and re-opens it.\"\"\"\n[Test/test]   | >       conn = _mysql.connect(**self._db_args)\n[Test/test]   | E       MySQLdb.OperationalError: (2003, \"Can't connect to MySQL server on '127.0.0.1:3306' (111)\")\n[Test/test]   | \n[Test/test]   | memsql/common/database.py:102: OperationalError\n[Test/test]   | _______________ ERROR at setup of TestQueries.test_single_format _______________\n[Test/test]   | \n[Test/test]   | self = <memsql.common.test.test_database_adapters.TestQueries object at 0x7f95ed414850>\n[Test/test]   | request = <SubRequest 'x_conn' for <Function test_insert>>\n[Test/test]   | test_db_args = {'host': '127.0.0.1', 'password': 'mysql', 'port': 3306, 'user': 'root'}\n[Test/test]   | test_db_database = 'memsql_python_tests'\n[Test/test]   | \n[Test/test]   |     @pytest.fixture(scope=\"class\")\n[Test/test]   |     def x_conn(self, request, test_db_args, test_db_database):\n[Test/test]   | >       return self._x_conn(request, test_db_args, test_db_database)\n[Test/test]   | \n[Test/test]   | memsql/common/test/test_database_adapters.py:48: \n[Test/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test/test]   | memsql/common/test/test_database_adapters.py:51: in _x_conn\n[Test/test]   |     conn = database.connect(**test_db_args)\n[Test/test]   | memsql/common/database.py:20: in connect\n[Test/test]   |     return Connection(*args, **kwargs)\n[Test/test]   | memsql/common/database.py:71: in __init__\n[Test/test]   |     self.reconnect()\n[Test/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test/test]   | \n[Test/test]   | self = <memsql.common.database.Connection object at 0x7f95ed303490>\n[Test/test]   | \n[Test/test]   |     def reconnect(self):\n[Test/test]   |         \"\"\"Closes the existing database connection and re-opens it.\"\"\"\n[Test/test]   | >       conn = _mysql.connect(**self._db_args)\n[Test/test]   | E       MySQLdb.OperationalError: (2003, \"Can't connect to MySQL server on '127.0.0.1:3306' (111)\")\n[Test/test]   | \n[Test/test]   | memsql/common/database.py:102: OperationalError\n[Test/test]   | _____________ ERROR at setup of TestQueries.test_ensure_connected ______________\n[Test/test]   | \n[Test/test]   | self = <memsql.common.test.test_database_adapters.TestQueries object at 0x7f95ed414850>\n[Test/test]   | request = <SubRequest 'x_conn' for <Function test_insert>>\n[Test/test]   | test_db_args = {'host': '127.0.0.1', 'password': 'mysql', 'port': 3306, 'user': 'root'}\n[Test/test]   | test_db_database = 'memsql_python_tests'\n[Test/test]   | \n[Test/test]   |     @pytest.fixture(scope=\"class\")\n[Test/test]   |     def x_conn(self, request, test_db_args, test_db_database):\n[Test/test]   | >       return self._x_conn(request, test_db_args, test_db_database)\n[Test/test]   | \n[Test/test]   | memsql/common/test/test_database_adapters.py:48: \n[Test/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test/test]   | memsql/common/test/test_database_adapters.py:51: in _x_conn\n[Test/test]   |     conn = database.connect(**test_db_args)\n[Test/test]   | memsql/common/database.py:20: in connect\n[Test/test]   |     return Connection(*args, **kwargs)\n[Test/test]   | memsql/common/database.py:71: in __init__\n[Test/test]   |     self.reconnect()\n[Test/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test/test]   | \n[Test/test]   | self = <memsql.common.database.Connection object at 0x7f95ed303490>\n[Test/test]   | \n[Test/test]   |     def reconnect(self):\n[Test/test]   |         \"\"\"Closes the existing database connection and re-opens it.\"\"\"\n[Test/test]   | >       conn = _mysql.connect(**self._db_args)\n[Test/test]   | E       MySQLdb.OperationalError: (2003, \"Can't connect to MySQL server on '127.0.0.1:3306' (111)\")\n[Test/test]   | \n[Test/test]   | memsql/common/database.py:102: OperationalError\n[Test/test]   | ________________________ ERROR at setup of test_checkin ________________________\n[Test/test]   | \n[Test/test]   | args = ()\n[Test/test]   | kwargs = {'_version': 0, 'database': 'information_schema', 'host': '127.0.0.1', 'options': None, ...}\n[Test/test]   | \n[Test/test]   |     def wrapped(*args, **kwargs):\n[Test/test]   |         try:\n[Test/test]   | >           return fn(*args, **kwargs)\n[Test/test]   | \n[Test/test]   | memsql/common/connection_pool.py:120: \n[Test/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test/test]   | \n[Test/test]   | args = ()\n[Test/test]   | kwargs = {'_version': 0, 'database': 'information_schema', 'host': '127.0.0.1', 'options': None, ...}\n[Test/test]   | \n[Test/test]   |     def connect(*args, **kwargs):\n[Test/test]   | >       return Connection(*args, **kwargs)\n[Test/test]   | \n[Test/test]   | memsql/common/database.py:20: \n[Test/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test/test]   | \n[Test/test]   | self = <memsql.common.database.Connection object at 0x7f95ed343520>\n[Test/test]   | host = '127.0.0.1', port = 3306, database = 'information_schema', user = 'root'\n[Test/test]   | password = 'mysql', max_idle_time = 25200, _version = 0, options = None\n[Test/test]   | \n[Test/test]   |     def __init__(self, host, port=3306, database=\"information_schema\", user=None, password=None,\n[Test/test]   |                  max_idle_time=7 * 3600, _version=0, options=None):\n[Test/test]   |         self.max_idle_time = max_idle_time\n[Test/test]   |     \n[Test/test]   |         args = {\n[Test/test]   |             \"db\": database,\n[Test/test]   |             \"conv\": CONVERSIONS\n[Test/test]   |         }\n[Test/test]   |     \n[Test/test]   |         if user is not None:\n[Test/test]   |             args[\"user\"] = user\n[Test/test]   |         if password is not None:\n[Test/test]   |             args[\"passwd\"] = password\n[Test/test]   |     \n[Test/test]   |         args[\"host\"] = host\n[Test/test]   |         args[\"port\"] = int(port)\n[Test/test]   |     \n[Test/test]   |         if options is not None:\n[Test/test]   |             assert isinstance(options, dict), \"Options to database.Connection must be an dictionary of { str: value } pairs.\"\n[Test/test]   |             args.update(options)\n[Test/test]   |     \n[Test/test]   |         # Fix for parameter name changes in mysqlclient v2.1.0\n[Test/test]   |         if MySQLdb.version_info[:2] >= (2, 1):\n[Test/test]   |             if \"db\" in args:\n[Test/test]   |                 args[\"database\"] = args.pop(\"db\")\n[Test/test]   |             if \"passwd\" in args:\n[Test/test]   |                 args[\"password\"] = args.pop(\"passwd\")\n[Test/test]   |     \n[Test/test]   |         self._db = None\n[Test/test]   |         self._db_args = args\n[Test/test]   |     \n[Test/test]   |         self._last_use_time = time.time()\n[Test/test]   | >       self.reconnect()\n[Test/test]   | \n[Test/test]   | memsql/common/database.py:71: \n[Test/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test/test]   | \n[Test/test]   | self = <memsql.common.database.Connection object at 0x7f95ed343520>\n[Test/test]   | \n[Test/test]   |     def reconnect(self):\n[Test/test]   |         \"\"\"Closes the existing database connection and re-opens it.\"\"\"\n[Test/test]   | >       conn = _mysql.connect(**self._db_args)\n[Test/test]   | E       MySQLdb.OperationalError: (2003, \"Can't connect to MySQL server on '127.0.0.1:3306' (111)\")\n[Test/test]   | \n[Test/test]   | memsql/common/database.py:102: OperationalError\n[Test/test]   | \n[Test/test]   | During handling of the above exception, another exception occurred:\n[Test/test]   | \n[Test/test]   | pool = <memsql.common.connection_pool.ConnectionPool object at 0x7f95ed343d90>\n[Test/test]   | db_args = ('127.0.0.1', 3306, 'root', 'mysql', 'information_schema')\n[Test/test]   | \n[Test/test]   |     @pytest.fixture\n[Test/test]   |     def fairy(pool, db_args):\n[Test/test]   | >       return pool.connect(*db_args)\n[Test/test]   | \n[Test/test]   | memsql/common/test/test_connection_pool.py:28: \n[Test/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test/test]   | memsql/common/connection_pool.py:54: in connect\n[Test/test]   |     fairy.connect(self._current_version)\n[Test/test]   | memsql/common/connection_pool.py:183: in connect\n[Test/test]   |     self._conn = _connect(\n[Test/test]   | memsql/common/connection_pool.py:132: in wrapped\n[Test/test]   |     self.__handle_connection_failure(e)\n[Test/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test/test]   | \n[Test/test]   | self = <memsql.common.connection_pool._PoolConnectionFairy object at 0x7f95ed343610>\n[Test/test]   | e = OperationalError(2003, \"Can't connect to MySQL server on '127.0.0.1:3306' (111)\")\n[Test/test]   | \n[Test/test]   |     def __handle_connection_failure(self, e):\n[Test/test]   |         # expire the connection so we don't return it to the pool accidentally\n[Test/test]   |         self.expire()\n[Test/test]   |     \n[Test/test]   |         # build and raise the new consolidated exception\n[Test/test]   |         message = None\n[Test/test]   |         if isinstance(e, _mysql.OperationalError) or (hasattr(e, 'args') and len(e.args) >= 2):\n[Test/test]   |             err_num = e.args[0]\n[Test/test]   |             message = e.args[1]\n[Test/test]   |         elif hasattr(e, 'errno'):\n[Test/test]   |             err_num = e.errno\n[Test/test]   |         else:\n[Test/test]   |             err_num = errno.ECONNABORTED\n[Test/test]   |     \n[Test/test]   | >       raise PoolConnectionException(err_num, message, self._key)\n[Test/test]   | E       memsql.common.connection_pool.PoolConnectionException: [Errno 2003] Can't connect to MySQL server on '127.0.0.1:3306' (111)\n[Test/test]   | \n[Test/test]   | memsql/common/connection_pool.py:164: PoolConnectionException\n[Test/test]   | ____________________ ERROR at setup of test_connection_info ____________________\n[Test/test]   | \n[Test/test]   | args = ()\n[Test/test]   | kwargs = {'_version': 0, 'database': 'information_schema', 'host': '127.0.0.1', 'options': None, ...}\n[Test/test]   | \n[Test/test]   |     def wrapped(*args, **kwargs):\n[Test/test]   |         try:\n[Test/test]   | >           return fn(*args, **kwargs)\n[Test/test]   | \n[Test/test]   | memsql/common/connection_pool.py:120: \n[Test/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test/test]   | \n[Test/test]   | args = ()\n[Test/test]   | kwargs = {'_version': 0, 'database': 'information_schema', 'host': '127.0.0.1', 'options': None, ...}\n[Test/test]   | \n[Test/test]   |     def connect(*args, **kwargs):\n[Test/test]   | >       return Connection(*args, **kwargs)\n[Test/test]   | \n[Test/test]   | memsql/common/database.py:20: \n[Test/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test/test]   | \n[Test/test]   | self = <memsql.common.database.Connection object at 0x7f95ed34ff10>\n[Test/test]   | host = '127.0.0.1', port = 3306, database = 'information_schema', user = 'root'\n[Test/test]   | password = 'mysql', max_idle_time = 25200, _version = 0, options = None\n[Test/test]   | \n[Test/test]   |     def __init__(self, host, port=3306, database=\"information_schema\", user=None, password=None,\n[Test/test]   |                  max_idle_time=7 * 3600, _version=0, options=None):\n[Test/test]   |         self.max_idle_time = max_idle_time\n[Test/test]   |     \n[Test/test]   |         args = {\n[Test/test]   |             \"db\": database,\n[Test/test]   |             \"conv\": CONVERSIONS\n[Test/test]   |         }\n[Test/test]   |     \n[Test/test]   |         if user is not None:\n[Test/test]   |             args[\"user\"] = user\n[Test/test]   |         if password is not None:\n[Test/test]   |             args[\"passwd\"] = password\n[Test/test]   |     \n[Test/test]   |         args[\"host\"] = host\n[Test/test]   |         args[\"port\"] = int(port)\n[Test/test]   |     \n[Test/test]   |         if options is not None:\n[Test/test]   |             assert isinstance(options, dict), \"Options to database.Connection must be an dictionary of { str: value } pairs.\"\n[Test/test]   |             args.update(options)\n[Test/test]   |     \n[Test/test]   |         # Fix for parameter name changes in mysqlclient v2.1.0\n[Test/test]   |         if MySQLdb.version_info[:2] >= (2, 1):\n[Test/test]   |             if \"db\" in args:\n[Test/test]   |                 args[\"database\"] = args.pop(\"db\")\n[Test/test]   |             if \"passwd\" in args:\n[Test/test]   |                 args[\"password\"] = args.pop(\"passwd\")\n[Test/test]   |     \n[Test/test]   |         self._db = None\n[Test/test]   |         self._db_args = args\n[Test/test]   |     \n[Test/test]   |         self._last_use_time = time.time()\n[Test/test]   | >       self.reconnect()\n[Test/test]   | \n[Test/test]   | memsql/common/database.py:71: \n[Test/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test/test]   | \n[Test/test]   | self = <memsql.common.database.Connection object at 0x7f95ed34ff10>\n[Test/test]   | \n[Test/test]   |     def reconnect(self):\n[Test/test]   |         \"\"\"Closes the existing database connection and re-opens it.\"\"\"\n[Test/test]   | >       conn = _mysql.connect(**self._db_args)\n[Test/test]   | E       MySQLdb.OperationalError: (2003, \"Can't connect to MySQL server on '127.0.0.1:3306' (111)\")\n[Test/test]   | \n[Test/test]   | memsql/common/database.py:102: OperationalError\n[Test/test]   | \n[Test/test]   | During handling of the above exception, another exception occurred:\n[Test/test]   | \n[Test/test]   | pool = <memsql.common.connection_pool.ConnectionPool object at 0x7f95ed34f280>\n[Test/test]   | db_args = ('127.0.0.1', 3306, 'root', 'mysql', 'information_schema')\n[Test/test]   | \n[Test/test]   |     @pytest.fixture\n[Test/test]   |     def fairy(pool, db_args):\n[Test/test]   | >       return pool.connect(*db_args)\n[Test/test]   | \n[Test/test]   | memsql/common/test/test_connection_pool.py:28: \n[Test/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test/test]   | memsql/common/connection_pool.py:54: in connect\n[Test/test]   |     fairy.connect(self._current_version)\n[Test/test]   | memsql/common/connection_pool.py:183: in connect\n[Test/test]   |     self._conn = _connect(\n[Test/test]   | memsql/common/connection_pool.py:132: in wrapped\n[Test/test]   |     self.__handle_connection_failure(e)\n[Test/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test/test]   | \n[Test/test]   | self = <memsql.common.connection_pool._PoolConnectionFairy object at 0x7f95ed34f460>\n[Test/test]   | e = OperationalError(2003, \"Can't connect to MySQL server on '127.0.0.1:3306' (111)\")\n[Test/test]   | \n[Test/test]   |     def __handle_connection_failure(self, e):\n[Test/test]   |         # expire the connection so we don't return it to the pool accidentally\n[Test/test]   |         self.expire()\n[Test/test]   |     \n[Test/test]   |         # build and raise the new consolidated exception\n[Test/test]   |         message = None\n[Test/test]   |         if isinstance(e, _mysql.OperationalError) or (hasattr(e, 'args') and len(e.args) >= 2):\n[Test/test]   |             err_num = e.args[0]\n[Test/test]   |             message = e.args[1]\n[Test/test]   |         elif hasattr(e, 'errno'):\n[Test/test]   |             err_num = e.errno\n[Test/test]   |         else:\n[Test/test]   |             err_num = errno.ECONNABORTED\n[Test/test]   |     \n[Test/test]   | >       raise PoolConnectionException(err_num, message, self._key)\n[Test/test]   | E       memsql.common.connection_pool.PoolConnectionException: [Errno 2003] Can't connect to MySQL server on '127.0.0.1:3306' (111)\n[Test/test]   | \n[Test/test]   | memsql/common/connection_pool.py:164: PoolConnectionException\n[Test/test]   | ____________________ ERROR at setup of test_fairy_reconnect ____________________\n[Test/test]   | \n[Test/test]   | args = ()\n[Test/test]   | kwargs = {'_version': 0, 'database': 'information_schema', 'host': '127.0.0.1', 'options': None, ...}\n[Test/test]   | \n[Test/test]   |     def wrapped(*args, **kwargs):\n[Test/test]   |         try:\n[Test/test]   | >           return fn(*args, **kwargs)\n[Test/test]   | \n[Test/test]   | memsql/common/connection_pool.py:120: \n[Test/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test/test]   | \n[Test/test]   | args = ()\n[Test/test]   | kwargs = {'_version': 0, 'database': 'information_schema', 'host': '127.0.0.1', 'options': None, ...}\n[Test/test]   | \n[Test/test]   |     def connect(*args, **kwargs):\n[Test/test]   | >       return Connection(*args, **kwargs)\n[Test/test]   | \n[Test/test]   | memsql/common/database.py:20: \n[Test/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test/test]   | \n[Test/test]   | self = <memsql.common.database.Connection object at 0x7f95ed3bcd30>\n[Test/test]   | host = '127.0.0.1', port = 3306, database = 'information_schema', user = 'root'\n[Test/test]   | password = 'mysql', max_idle_time = 25200, _version = 0, options = None\n[Test/test]   | \n[Test/test]   |     def __init__(self, host, port=3306, database=\"information_schema\", user=None, password=None,\n[Test/test]   |                  max_idle_time=7 * 3600, _version=0, options=None):\n[Test/test]   |         self.max_idle_time = max_idle_time\n[Test/test]   |     \n[Test/test]   |         args = {\n[Test/test]   |             \"db\": database,\n[Test/test]   |             \"conv\": CONVERSIONS\n[Test/test]   |         }\n[Test/test]   |     \n[Test/test]   |         if user is not None:\n[Test/test]   |             args[\"user\"] = user\n[Test/test]   |         if password is not None:\n[Test/test]   |             args[\"passwd\"] = password\n[Test/test]   |     \n[Test/test]   |         args[\"host\"] = host\n[Test/test]   |         args[\"port\"] = int(port)\n[Test/test]   |     \n[Test/test]   |         if options is not None:\n[Test/test]   |             assert isinstance(options, dict), \"Options to database.Connection must be an dictionary of { str: value } pairs.\"\n[Test/test]   |             args.update(options)\n[Test/test]   |     \n[Test/test]   |         # Fix for parameter name changes in mysqlclient v2.1.0\n[Test/test]   |         if MySQLdb.version_info[:2] >= (2, 1):\n[Test/test]   |             if \"db\" in args:\n[Test/test]   |                 args[\"database\"] = args.pop(\"db\")\n[Test/test]   |             if \"passwd\" in args:\n[Test/test]   |                 args[\"password\"] = args.pop(\"passwd\")\n[Test/test]   |     \n[Test/test]   |         self._db = None\n[Test/test]   |         self._db_args = args\n[Test/test]   |     \n[Test/test]   |         self._last_use_time = time.time()\n[Test/test]   | >       self.reconnect()\n[Test/test]   | \n[Test/test]   | memsql/common/database.py:71: \n[Test/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test/test]   | \n[Test/test]   | self = <memsql.common.database.Connection object at 0x7f95ed3bcd30>\n[Test/test]   | \n[Test/test]   |     def reconnect(self):\n[Test/test]   |         \"\"\"Closes the existing database connection and re-opens it.\"\"\"\n[Test/test]   | >       conn = _mysql.connect(**self._db_args)\n[Test/test]   | E       MySQLdb.OperationalError: (2003, \"Can't connect to MySQL server on '127.0.0.1:3306' (111)\")\n[Test/test]   | \n[Test/test]   | memsql/common/database.py:102: OperationalError\n[Test/test]   | \n[Test/test]   | During handling of the above exception, another exception occurred:\n[Test/test]   | \n[Test/test]   | pool = <memsql.common.connection_pool.ConnectionPool object at 0x7f95ed3bc160>\n[Test/test]   | db_args = ('127.0.0.1', 3306, 'root', 'mysql', 'information_schema')\n[Test/test]   | \n[Test/test]   |     @pytest.fixture\n[Test/test]   |     def fairy(pool, db_args):\n[Test/test]   | >       return pool.connect(*db_args)\n[Test/test]   | \n[Test/test]   | memsql/common/test/test_connection_pool.py:28: \n[Test/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test/test]   | memsql/common/connection_pool.py:54: in connect\n[Test/test]   |     fairy.connect(self._current_version)\n[Test/test]   | memsql/common/connection_pool.py:183: in connect\n[Test/test]   |     self._conn = _connect(\n[Test/test]   | memsql/common/connection_pool.py:132: in wrapped\n[Test/test]   |     self.__handle_connection_failure(e)\n[Test/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test/test]   | \n[Test/test]   | self = <memsql.common.connection_pool._PoolConnectionFairy object at 0x7f95ed3bc130>\n[Test/test]   | e = OperationalError(2003, \"Can't connect to MySQL server on '127.0.0.1:3306' (111)\")\n[Test/test]   | \n[Test/test]   |     def __handle_connection_failure(self, e):\n[Test/test]   |         # expire the connection so we don't return it to the pool accidentally\n[Test/test]   |         self.expire()\n[Test/test]   |     \n[Test/test]   |         # build and raise the new consolidated exception\n[Test/test]   |         message = None\n[Test/test]   |         if isinstance(e, _mysql.OperationalError) or (hasattr(e, 'args') and len(e.args) >= 2):\n[Test/test]   |             err_num = e.args[0]\n[Test/test]   |             message = e.args[1]\n[Test/test]   |         elif hasattr(e, 'errno'):\n[Test/test]   |             err_num = e.errno\n[Test/test]   |         else:\n[Test/test]   |             err_num = errno.ECONNABORTED\n[Test/test]   |     \n[Test/test]   | >       raise PoolConnectionException(err_num, message, self._key)\n[Test/test]   | E       memsql.common.connection_pool.PoolConnectionException: [Errno 2003] Can't connect to MySQL server on '127.0.0.1:3306' (111)\n[Test/test]   | \n[Test/test]   | memsql/common/connection_pool.py:164: PoolConnectionException\n[Test/test]   | _____________________ ERROR at setup of test_fairy_queries _____________________\n[Test/test]   | \n[Test/test]   | args = ()\n[Test/test]   | kwargs = {'_version': 0, 'database': 'information_schema', 'host': '127.0.0.1', 'options': None, ...}\n[Test/test]   | \n[Test/test]   |     def wrapped(*args, **kwargs):\n[Test/test]   |         try:\n[Test/test]   | >           return fn(*args, **kwargs)\n[Test/test]   | \n[Test/test]   | memsql/common/connection_pool.py:120: \n[Test/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test/test]   | \n[Test/test]   | args = ()\n[Test/test]   | kwargs = {'_version': 0, 'database': 'information_schema', 'host': '127.0.0.1', 'options': None, ...}\n[Test/test]   | \n[Test/test]   |     def connect(*args, **kwargs):\n[Test/test]   | >       return Connection(*args, **kwargs)\n[Test/test]   | \n[Test/test]   | memsql/common/database.py:20: \n[Test/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test/test]   | \n[Test/test]   | self = <memsql.common.database.Connection object at 0x7f95ed386460>\n[Test/test]   | host = '127.0.0.1', port = 3306, database = 'information_schema', user = 'root'\n[Test/test]   | password = 'mysql', max_idle_time = 25200, _version = 0, options = None\n[Test/test]   | \n[Test/test]   |     def __init__(self, host, port=3306, database=\"information_schema\", user=None, password=None,\n[Test/test]   |                  max_idle_time=7 * 3600, _version=0, options=None):\n[Test/test]   |         self.max_idle_time = max_idle_time\n[Test/test]   |     \n[Test/test]   |         args = {\n[Test/test]   |             \"db\": database,\n[Test/test]   |             \"conv\": CONVERSIONS\n[Test/test]   |         }\n[Test/test]   |     \n[Test/test]   |         if user is not None:\n[Test/test]   |             args[\"user\"] = user\n[Test/test]   |         if password is not None:\n[Test/test]   |             args[\"passwd\"] = password\n[Test/test]   |     \n[Test/test]   |         args[\"host\"] = host\n[Test/test]   |         args[\"port\"] = int(port)\n[Test/test]   |     \n[Test/test]   |         if options is not None:\n[Test/test]   |             assert isinstance(options, dict), \"Options to database.Connection must be an dictionary of { str: value } pairs.\"\n[Test/test]   |             args.update(options)\n[Test/test]   |     \n[Test/test]   |         # Fix for parameter name changes in mysqlclient v2.1.0\n[Test/test]   |         if MySQLdb.version_info[:2] >= (2, 1):\n[Test/test]   |             if \"db\" in args:\n[Test/test]   |                 args[\"database\"] = args.pop(\"db\")\n[Test/test]   |             if \"passwd\" in args:\n[Test/test]   |                 args[\"password\"] = args.pop(\"passwd\")\n[Test/test]   |     \n[Test/test]   |         self._db = None\n[Test/test]   |         self._db_args = args\n[Test/test]   |     \n[Test/test]   |         self._last_use_time = time.time()\n[Test/test]   | >       self.reconnect()\n[Test/test]   | \n[Test/test]   | memsql/common/database.py:71: \n[Test/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test/test]   | \n[Test/test]   | self = <memsql.common.database.Connection object at 0x7f95ed386460>\n[Test/test]   | \n[Test/test]   |     def reconnect(self):\n[Test/test]   |         \"\"\"Closes the existing database connection and re-opens it.\"\"\"\n[Test/test]   | >       conn = _mysql.connect(**self._db_args)\n[Test/test]   | E       MySQLdb.OperationalError: (2003, \"Can't connect to MySQL server on '127.0.0.1:3306' (111)\")\n[Test/test]   | \n[Test/test]   | memsql/common/database.py:102: OperationalError\n[Test/test]   | \n[Test/test]   | During handling of the above exception, another exception occurred:\n[Test/test]   | \n[Test/test]   | pool = <memsql.common.connection_pool.ConnectionPool object at 0x7f95ed42b790>\n[Test/test]   | db_args = ('127.0.0.1', 3306, 'root', 'mysql', 'information_schema')\n[Test/test]   | \n[Test/test]   |     @pytest.fixture\n[Test/test]   |     def fairy(pool, db_args):\n[Test/test]   | >       return pool.connect(*db_args)\n[Test/test]   | \n[Test/test]   | memsql/common/test/test_connection_pool.py:28: \n[Test/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test/test]   | memsql/common/connection_pool.py:54: in connect\n[Test/test]   |     fairy.connect(self._current_version)\n[Test/test]   | memsql/common/connection_pool.py:183: in connect\n[Test/test]   |     self._conn = _connect(\n[Test/test]   | memsql/common/connection_pool.py:132: in wrapped\n[Test/test]   |     self.__handle_connection_failure(e)\n[Test/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test/test]   | \n[Test/test]   | self = <memsql.common.connection_pool._PoolConnectionFairy object at 0x7f95ed386820>\n[Test/test]   | e = OperationalError(2003, \"Can't connect to MySQL server on '127.0.0.1:3306' (111)\")\n[Test/test]   | \n[Test/test]   |     def __handle_connection_failure(self, e):\n[Test/test]   |         # expire the connection so we don't return it to the pool accidentally\n[Test/test]   |         self.expire()\n[Test/test]   |     \n[Test/test]   |         # build and raise the new consolidated exception\n[Test/test]   |         message = None\n[Test/test]   |         if isinstance(e, _mysql.OperationalError) or (hasattr(e, 'args') and len(e.args) >= 2):\n[Test/test]   |             err_num = e.args[0]\n[Test/test]   |             message = e.args[1]\n[Test/test]   |         elif hasattr(e, 'errno'):\n[Test/test]   |             err_num = e.errno\n[Test/test]   |         else:\n[Test/test]   |             err_num = errno.ECONNABORTED\n[Test/test]   |     \n[Test/test]   | >       raise PoolConnectionException(err_num, message, self._key)\n[Test/test]   | E       memsql.common.connection_pool.PoolConnectionException: [Errno 2003] Can't connect to MySQL server on '127.0.0.1:3306' (111)\n[Test/test]   | \n[Test/test]   | memsql/common/connection_pool.py:164: PoolConnectionException\n[Test/test]   | ______________________ ERROR at setup of test_fairy_query ______________________\n[Test/test]   | \n[Test/test]   | args = ()\n[Test/test]   | kwargs = {'_version': 0, 'database': 'information_schema', 'host': '127.0.0.1', 'options': None, ...}\n[Test/test]   | \n[Test/test]   |     def wrapped(*args, **kwargs):\n[Test/test]   |         try:\n[Test/test]   | >           return fn(*args, **kwargs)\n[Test/test]   | \n[Test/test]   | memsql/common/connection_pool.py:120: \n[Test/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test/test]   | \n[Test/test]   | args = ()\n[Test/test]   | kwargs = {'_version': 0, 'database': 'information_schema', 'host': '127.0.0.1', 'options': None, ...}\n[Test/test]   | \n[Test/test]   |     def connect(*args, **kwargs):\n[Test/test]   | >       return Connection(*args, **kwargs)\n[Test/test]   | \n[Test/test]   | memsql/common/database.py:20: \n[Test/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test/test]   | \n[Test/test]   | self = <memsql.common.database.Connection object at 0x7f95ed32dd90>\n[Test/test]   | host = '127.0.0.1', port = 3306, database = 'information_schema', user = 'root'\n[Test/test]   | password = 'mysql', max_idle_time = 25200, _version = 0, options = None\n[Test/test]   | \n[Test/test]   |     def __init__(self, host, port=3306, database=\"information_schema\", user=None, password=None,\n[Test/test]   |                  max_idle_time=7 * 3600, _version=0, options=None):\n[Test/test]   |         self.max_idle_time = max_idle_time\n[Test/test]   |     \n[Test/test]   |         args = {\n[Test/test]   |             \"db\": database,\n[Test/test]   |             \"conv\": CONVERSIONS\n[Test/test]   |         }\n[Test/test]   |     \n[Test/test]   |         if user is not None:\n[Test/test]   |             args[\"user\"] = user\n[Test/test]   |         if password is not None:\n[Test/test]   |             args[\"passwd\"] = password\n[Test/test]   |     \n[Test/test]   |         args[\"host\"] = host\n[Test/test]   |         args[\"port\"] = int(port)\n[Test/test]   |     \n[Test/test]   |         if options is not None:\n[Test/test]   |             assert isinstance(options, dict), \"Options to database.Connection must be an dictionary of { str: value } pairs.\"\n[Test/test]   |             args.update(options)\n[Test/test]   |     \n[Test/test]   |         # Fix for parameter name changes in mysqlclient v2.1.0\n[Test/test]   |         if MySQLdb.version_info[:2] >= (2, 1):\n[Test/test]   |             if \"db\" in args:\n[Test/test]   |                 args[\"database\"] = args.pop(\"db\")\n[Test/test]   |             if \"passwd\" in args:\n[Test/test]   |                 args[\"password\"] = args.pop(\"passwd\")\n[Test/test]   |     \n[Test/test]   |         self._db = None\n[Test/test]   |         self._db_args = args\n[Test/test]   |     \n[Test/test]   |         self._last_use_time = time.time()\n[Test/test]   | >       self.reconnect()\n[Test/test]   | \n[Test/test]   | memsql/common/database.py:71: \n[Test/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test/test]   | \n[Test/test]   | self = <memsql.common.database.Connection object at 0x7f95ed32dd90>\n[Test/test]   | \n[Test/test]   |     def reconnect(self):\n[Test/test]   |         \"\"\"Closes the existing database connection and re-opens it.\"\"\"\n[Test/test]   | >       conn = _mysql.connect(**self._db_args)\n[Test/test]   | E       MySQLdb.OperationalError: (2003, \"Can't connect to MySQL server on '127.0.0.1:3306' (111)\")\n[Test/test]   | \n[Test/test]   | memsql/common/database.py:102: OperationalError\n[Test/test]   | \n[Test/test]   | During handling of the above exception, another exception occurred:\n[Test/test]   | \n[Test/test]   | pool = <memsql.common.connection_pool.ConnectionPool object at 0x7f95ed32d280>\n[Test/test]   | db_args = ('127.0.0.1', 3306, 'root', 'mysql', 'information_schema')\n[Test/test]   | \n[Test/test]   |     @pytest.fixture\n[Test/test]   |     def fairy(pool, db_args):\n[Test/test]   | >       return pool.connect(*db_args)\n[Test/test]   | \n[Test/test]   | memsql/common/test/test_connection_pool.py:28: \n[Test/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test/test]   | memsql/common/connection_pool.py:54: in connect\n[Test/test]   |     fairy.connect(self._current_version)\n[Test/test]   | memsql/common/connection_pool.py:183: in connect\n[Test/test]   |     self._conn = _connect(\n[Test/test]   | memsql/common/connection_pool.py:132: in wrapped\n[Test/test]   |     self.__handle_connection_failure(e)\n[Test/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test/test]   | \n[Test/test]   | self = <memsql.common.connection_pool._PoolConnectionFairy object at 0x7f95ed32df40>\n[Test/test]   | e = OperationalError(2003, \"Can't connect to MySQL server on '127.0.0.1:3306' (111)\")\n[Test/test]   | \n[Test/test]   |     def __handle_connection_failure(self, e):\n[Test/test]   |         # expire the connection so we don't return it to the pool accidentally\n[Test/test]   |         self.expire()\n[Test/test]   |     \n[Test/test]   |         # build and raise the new consolidated exception\n[Test/test]   |         message = None\n[Test/test]   |         if isinstance(e, _mysql.OperationalError) or (hasattr(e, 'args') and len(e.args) >= 2):\n[Test/test]   |             err_num = e.args[0]\n[Test/test]   |             message = e.args[1]\n[Test/test]   |         elif hasattr(e, 'errno'):\n[Test/test]   |             err_num = e.errno\n[Test/test]   |         else:\n[Test/test]   |             err_num = errno.ECONNABORTED\n[Test/test]   |     \n[Test/test]   | >       raise PoolConnectionException(err_num, message, self._key)\n[Test/test]   | E       memsql.common.connection_pool.PoolConnectionException: [Errno 2003] Can't connect to MySQL server on '127.0.0.1:3306' (111)\n[Test/test]   | \n[Test/test]   | memsql/common/connection_pool.py:164: PoolConnectionException\n[Test/test]   | _______________________ ERROR at setup of test_fairy_get _______________________\n[Test/test]   | \n[Test/test]   | args = ()\n[Test/test]   | kwargs = {'_version': 0, 'database': 'information_schema', 'host': '127.0.0.1', 'options': None, ...}\n[Test/test]   | \n[Test/test]   |     def wrapped(*args, **kwargs):\n[Test/test]   |         try:\n[Test/test]   | >           return fn(*args, **kwargs)\n[Test/test]   | \n[Test/test]   | memsql/common/connection_pool.py:120: \n[Test/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test/test]   | \n[Test/test]   | args = ()\n[Test/test]   | kwargs = {'_version': 0, 'database': 'information_schema', 'host': '127.0.0.1', 'options': None, ...}\n[Test/test]   | \n[Test/test]   |     def connect(*args, **kwargs):\n[Test/test]   | >       return Connection(*args, **kwargs)\n[Test/test]   | \n[Test/test]   | memsql/common/database.py:20: \n[Test/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test/test]   | \n[Test/test]   | self = <memsql.common.database.Connection object at 0x7f95ed352430>\n[Test/test]   | host = '127.0.0.1', port = 3306, database = 'information_schema', user = 'root'\n[Test/test]   | password = 'mysql', max_idle_time = 25200, _version = 0, options = None\n[Test/test]   | \n[Test/test]   |     def __init__(self, host, port=3306, database=\"information_schema\", user=None, password=None,\n[Test/test]   |                  max_idle_time=7 * 3600, _version=0, options=None):\n[Test/test]   |         self.max_idle_time = max_idle_time\n[Test/test]   |     \n[Test/test]   |         args = {\n[Test/test]   |             \"db\": database,\n[Test/test]   |             \"conv\": CONVERSIONS\n[Test/test]   |         }\n[Test/test]   |     \n[Test/test]   |         if user is not None:\n[Test/test]   |             args[\"user\"] = user\n[Test/test]   |         if password is not None:\n[Test/test]   |             args[\"passwd\"] = password\n[Test/test]   |     \n[Test/test]   |         args[\"host\"] = host\n[Test/test]   |         args[\"port\"] = int(port)\n[Test/test]   |     \n[Test/test]   |         if options is not None:\n[Test/test]   |             assert isinstance(options, dict), \"Options to database.Connection must be an dictionary of { str: value } pairs.\"\n[Test/test]   |             args.update(options)\n[Test/test]   |     \n[Test/test]   |         # Fix for parameter name changes in mysqlclient v2.1.0\n[Test/test]   |         if MySQLdb.version_info[:2] >= (2, 1):\n[Test/test]   |             if \"db\" in args:\n[Test/test]   |                 args[\"database\"] = args.pop(\"db\")\n[Test/test]   |             if \"passwd\" in args:\n[Test/test]   |                 args[\"password\"] = args.pop(\"passwd\")\n[Test/test]   |     \n[Test/test]   |         self._db = None\n[Test/test]   |         self._db_args = args\n[Test/test]   |     \n[Test/test]   |         self._last_use_time = time.time()\n[Test/test]   | >       self.reconnect()\n[Test/test]   | \n[Test/test]   | memsql/common/database.py:71: \n[Test/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test/test]   | \n[Test/test]   | self = <memsql.common.database.Connection object at 0x7f95ed352430>\n[Test/test]   | \n[Test/test]   |     def reconnect(self):\n[Test/test]   |         \"\"\"Closes the existing database connection and re-opens it.\"\"\"\n[Test/test]   | >       conn = _mysql.connect(**self._db_args)\n[Test/test]   | E       MySQLdb.OperationalError: (2003, \"Can't connect to MySQL server on '127.0.0.1:3306' (111)\")\n[Test/test]   | \n[Test/test]   | memsql/common/database.py:102: OperationalError\n[Test/test]   | \n[Test/test]   | During handling of the above exception, another exception occurred:\n[Test/test]   | \n[Test/test]   | pool = <memsql.common.connection_pool.ConnectionPool object at 0x7f95ed352b50>\n[Test/test]   | db_args = ('127.0.0.1', 3306, 'root', 'mysql', 'information_schema')\n[Test/test]   | \n[Test/test]   |     @pytest.fixture\n[Test/test]   |     def fairy(pool, db_args):\n[Test/test]   | >       return pool.connect(*db_args)\n[Test/test]   | \n[Test/test]   | memsql/common/test/test_connection_pool.py:28: \n[Test/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test/test]   | memsql/common/connection_pool.py:54: in connect\n[Test/test]   |     fairy.connect(self._current_version)\n[Test/test]   | memsql/common/connection_pool.py:183: in connect\n[Test/test]   |     self._conn = _connect(\n[Test/test]   | memsql/common/connection_pool.py:132: in wrapped\n[Test/test]   |     self.__handle_connection_failure(e)\n[Test/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test/test]   | \n[Test/test]   | self = <memsql.common.connection_pool._PoolConnectionFairy object at 0x7f95ed352400>\n[Test/test]   | e = OperationalError(2003, \"Can't connect to MySQL server on '127.0.0.1:3306' (111)\")\n[Test/test]   | \n[Test/test]   |     def __handle_connection_failure(self, e):\n[Test/test]   |         # expire the connection so we don't return it to the pool accidentally\n[Test/test]   |         self.expire()\n[Test/test]   |     \n[Test/test]   |         # build and raise the new consolidated exception\n[Test/test]   |         message = None\n[Test/test]   |         if isinstance(e, _mysql.OperationalError) or (hasattr(e, 'args') and len(e.args) >= 2):\n[Test/test]   |             err_num = e.args[0]\n[Test/test]   |             message = e.args[1]\n[Test/test]   |         elif hasattr(e, 'errno'):\n[Test/test]   |             err_num = e.errno\n[Test/test]   |         else:\n[Test/test]   |             err_num = errno.ECONNABORTED\n[Test/test]   |     \n[Test/test]   | >       raise PoolConnectionException(err_num, message, self._key)\n[Test/test]   | E       memsql.common.connection_pool.PoolConnectionException: [Errno 2003] Can't connect to MySQL server on '127.0.0.1:3306' (111)\n[Test/test]   | \n[Test/test]   | memsql/common/connection_pool.py:164: PoolConnectionException\n[Test/test]   | _____________________ ERROR at setup of test_fairy_execute _____________________\n[Test/test]   | \n[Test/test]   | args = ()\n[Test/test]   | kwargs = {'_version': 0, 'database': 'information_schema', 'host': '127.0.0.1', 'options': None, ...}\n[Test/test]   | \n[Test/test]   |     def wrapped(*args, **kwargs):\n[Test/test]   |         try:\n[Test/test]   | >           return fn(*args, **kwargs)\n[Test/test]   | \n[Test/test]   | memsql/common/connection_pool.py:120: \n[Test/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test/test]   | \n[Test/test]   | args = ()\n[Test/test]   | kwargs = {'_version': 0, 'database': 'information_schema', 'host': '127.0.0.1', 'options': None, ...}\n[Test/test]   | \n[Test/test]   |     def connect(*args, **kwargs):\n[Test/test]   | >       return Connection(*args, **kwargs)\n[Test/test]   | \n[Test/test]   | memsql/common/database.py:20: \n[Test/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test/test]   | \n[Test/test]   | self = <memsql.common.database.Connection object at 0x7f95ed341ac0>\n[Test/test]   | host = '127.0.0.1', port = 3306, database = 'information_schema', user = 'root'\n[Test/test]   | password = 'mysql', max_idle_time = 25200, _version = 0, options = None\n[Test/test]   | \n[Test/test]   |     def __init__(self, host, port=3306, database=\"information_schema\", user=None, password=None,\n[Test/test]   |                  max_idle_time=7 * 3600, _version=0, options=None):\n[Test/test]   |         self.max_idle_time = max_idle_time\n[Test/test]   |     \n[Test/test]   |         args = {\n[Test/test]   |             \"db\": database,\n[Test/test]   |             \"conv\": CONVERSIONS\n[Test/test]   |         }\n[Test/test]   |     \n[Test/test]   |         if user is not None:\n[Test/test]   |             args[\"user\"] = user\n[Test/test]   |         if password is not None:\n[Test/test]   |             args[\"passwd\"] = password\n[Test/test]   |     \n[Test/test]   |         args[\"host\"] = host\n[Test/test]   |         args[\"port\"] = int(port)\n[Test/test]   |     \n[Test/test]   |         if options is not None:\n[Test/test]   |             assert isinstance(options, dict), \"Options to database.Connection must be an dictionary of { str: value } pairs.\"\n[Test/test]   |             args.update(options)\n[Test/test]   |     \n[Test/test]   |         # Fix for parameter name changes in mysqlclient v2.1.0\n[Test/test]   |         if MySQLdb.version_info[:2] >= (2, 1):\n[Test/test]   |             if \"db\" in args:\n[Test/test]   |                 args[\"database\"] = args.pop(\"db\")\n[Test/test]   |             if \"passwd\" in args:\n[Test/test]   |                 args[\"password\"] = args.pop(\"passwd\")\n[Test/test]   |     \n[Test/test]   |         self._db = None\n[Test/test]   |         self._db_args = args\n[Test/test]   |     \n[Test/test]   |         self._last_use_time = time.time()\n[Test/test]   | >       self.reconnect()\n[Test/test]   | \n[Test/test]   | memsql/common/database.py:71: \n[Test/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test/test]   | \n[Test/test]   | self = <memsql.common.database.Connection object at 0x7f95ed341ac0>\n[Test/test]   | \n[Test/test]   |     def reconnect(self):\n[Test/test]   |         \"\"\"Closes the existing database connection and re-opens it.\"\"\"\n[Test/test]   | >       conn = _mysql.connect(**self._db_args)\n[Test/test]   | E       MySQLdb.OperationalError: (2003, \"Can't connect to MySQL server on '127.0.0.1:3306' (111)\")\n[Test/test]   | \n[Test/test]   | memsql/common/database.py:102: OperationalError\n[Test/test]   | \n[Test/test]   | During handling of the above exception, another exception occurred:\n[Test/test]   | \n[Test/test]   | pool = <memsql.common.connection_pool.ConnectionPool object at 0x7f95ed2a9a90>\n[Test/test]   | db_args = ('127.0.0.1', 3306, 'root', 'mysql', 'information_schema')\n[Test/test]   | \n[Test/test]   |     @pytest.fixture\n[Test/test]   |     def fairy(pool, db_args):\n[Test/test]   | >       return pool.connect(*db_args)\n[Test/test]   | \n[Test/test]   | memsql/common/test/test_connection_pool.py:28: \n[Test/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test/test]   | memsql/common/connection_pool.py:54: in connect\n[Test/test]   |     fairy.connect(self._current_version)\n[Test/test]   | memsql/common/connection_pool.py:183: in connect\n[Test/test]   |     self._conn = _connect(\n[Test/test]   | memsql/common/connection_pool.py:132: in wrapped\n[Test/test]   |     self.__handle_connection_failure(e)\n[Test/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test/test]   | \n[Test/test]   | self = <memsql.common.connection_pool._PoolConnectionFairy object at 0x7f95ed473160>\n[Test/test]   | e = OperationalError(2003, \"Can't connect to MySQL server on '127.0.0.1:3306' (111)\")\n[Test/test]   | \n[Test/test]   |     def __handle_connection_failure(self, e):\n[Test/test]   |         # expire the connection so we don't return it to the pool accidentally\n[Test/test]   |         self.expire()\n[Test/test]   |     \n[Test/test]   |         # build and raise the new consolidated exception\n[Test/test]   |         message = None\n[Test/test]   |         if isinstance(e, _mysql.OperationalError) or (hasattr(e, 'args') and len(e.args) >= 2):\n[Test/test]   |             err_num = e.args[0]\n[Test/test]   |             message = e.args[1]\n[Test/test]   |         elif hasattr(e, 'errno'):\n[Test/test]   |             err_num = e.errno\n[Test/test]   |         else:\n[Test/test]   |             err_num = errno.ECONNABORTED\n[Test/test]   |     \n[Test/test]   | >       raise PoolConnectionException(err_num, message, self._key)\n[Test/test]   | E       memsql.common.connection_pool.PoolConnectionException: [Errno 2003] Can't connect to MySQL server on '127.0.0.1:3306' (111)\n[Test/test]   | \n[Test/test]   | memsql/common/connection_pool.py:164: PoolConnectionException\n[Test/test]   | ________________ ERROR at setup of test_fairy_execute_lastrowid ________________\n[Test/test]   | \n[Test/test]   | args = ()\n[Test/test]   | kwargs = {'_version': 0, 'database': 'information_schema', 'host': '127.0.0.1', 'options': None, ...}\n[Test/test]   | \n[Test/test]   |     def wrapped(*args, **kwargs):\n[Test/test]   |         try:\n[Test/test]   | >           return fn(*args, **kwargs)\n[Test/test]   | \n[Test/test]   | memsql/common/connection_pool.py:120: \n[Test/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test/test]   | \n[Test/test]   | args = ()\n[Test/test]   | kwargs = {'_version': 0, 'database': 'information_schema', 'host': '127.0.0.1', 'options': None, ...}\n[Test/test]   | \n[Test/test]   |     def connect(*args, **kwargs):\n[Test/test]   | >       return Connection(*args, **kwargs)\n[Test/test]   | \n[Test/test]   | memsql/common/database.py:20: \n[Test/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test/test]   | \n[Test/test]   | self = <memsql.common.database.Connection object at 0x7f95ed33b430>\n[Test/test]   | host = '127.0.0.1', port = 3306, database = 'information_schema', user = 'root'\n[Test/test]   | password = 'mysql', max_idle_time = 25200, _version = 0, options = None\n[Test/test]   | \n[Test/test]   |     def __init__(self, host, port=3306, database=\"information_schema\", user=None, password=None,\n[Test/test]   |                  max_idle_time=7 * 3600, _version=0, options=None):\n[Test/test]   |         self.max_idle_time = max_idle_time\n[Test/test]   |     \n[Test/test]   |         args = {\n[Test/test]   |             \"db\": database,\n[Test/test]   |             \"conv\": CONVERSIONS\n[Test/test]   |         }\n[Test/test]   |     \n[Test/test]   |         if user is not None:\n[Test/test]   |             args[\"user\"] = user\n[Test/test]   |         if password is not None:\n[Test/test]   |             args[\"passwd\"] = password\n[Test/test]   |     \n[Test/test]   |         args[\"host\"] = host\n[Test/test]   |         args[\"port\"] = int(port)\n[Test/test]   |     \n[Test/test]   |         if options is not None:\n[Test/test]   |             assert isinstance(options, dict), \"Options to database.Connection must be an dictionary of { str: value } pairs.\"\n[Test/test]   |             args.update(options)\n[Test/test]   |     \n[Test/test]   |         # Fix for parameter name changes in mysqlclient v2.1.0\n[Test/test]   |         if MySQLdb.version_info[:2] >= (2, 1):\n[Test/test]   |             if \"db\" in args:\n[Test/test]   |                 args[\"database\"] = args.pop(\"db\")\n[Test/test]   |             if \"passwd\" in args:\n[Test/test]   |                 args[\"password\"] = args.pop(\"passwd\")\n[Test/test]   |     \n[Test/test]   |         self._db = None\n[Test/test]   |         self._db_args = args\n[Test/test]   |     \n[Test/test]   |         self._last_use_time = time.time()\n[Test/test]   | >       self.reconnect()\n[Test/test]   | \n[Test/test]   | memsql/common/database.py:71: \n[Test/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test/test]   | \n[Test/test]   | self = <memsql.common.database.Connection object at 0x7f95ed33b430>\n[Test/test]   | \n[Test/test]   |     def reconnect(self):\n[Test/test]   |         \"\"\"Closes the existing database connection and re-opens it.\"\"\"\n[Test/test]   | >       conn = _mysql.connect(**self._db_args)\n[Test/test]   | E       MySQLdb.OperationalError: (2003, \"Can't connect to MySQL server on '127.0.0.1:3306' (111)\")\n[Test/test]   | \n[Test/test]   | memsql/common/database.py:102: OperationalError\n[Test/test]   | \n[Test/test]   | During handling of the above exception, another exception occurred:\n[Test/test]   | \n[Test/test]   | pool = <memsql.common.connection_pool.ConnectionPool object at 0x7f95ed33b910>\n[Test/test]   | db_args = ('127.0.0.1', 3306, 'root', 'mysql', 'information_schema')\n[Test/test]   | \n[Test/test]   |     @pytest.fixture\n[Test/test]   |     def fairy(pool, db_args):\n[Test/test]   | >       return pool.connect(*db_args)\n[Test/test]   | \n[Test/test]   | memsql/common/test/test_connection_pool.py:28: \n[Test/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test/test]   | memsql/common/connection_pool.py:54: in connect\n[Test/test]   |     fairy.connect(self._current_version)\n[Test/test]   | memsql/common/connection_pool.py:183: in connect\n[Test/test]   |     self._conn = _connect(\n[Test/test]   | memsql/common/connection_pool.py:132: in wrapped\n[Test/test]   |     self.__handle_connection_failure(e)\n[Test/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test/test]   | \n[Test/test]   | self = <memsql.common.connection_pool._PoolConnectionFairy object at 0x7f95ed33b6a0>\n[Test/test]   | e = OperationalError(2003, \"Can't connect to MySQL server on '127.0.0.1:3306' (111)\")\n[Test/test]   | \n[Test/test]   |     def __handle_connection_failure(self, e):\n[Test/test]   |         # expire the connection so we don't return it to the pool accidentally\n[Test/test]   |         self.expire()\n[Test/test]   |     \n[Test/test]   |         # build and raise the new consolidated exception\n[Test/test]   |         message = None\n[Test/test]   |         if isinstance(e, _mysql.OperationalError) or (hasattr(e, 'args') and len(e.args) >= 2):\n[Test/test]   |             err_num = e.args[0]\n[Test/test]   |             message = e.args[1]\n[Test/test]   |         elif hasattr(e, 'errno'):\n[Test/test]   |             err_num = e.errno\n[Test/test]   |         else:\n[Test/test]   |             err_num = errno.ECONNABORTED\n[Test/test]   |     \n[Test/test]   | >       raise PoolConnectionException(err_num, message, self._key)\n[Test/test]   | E       memsql.common.connection_pool.PoolConnectionException: [Errno 2003] Can't connect to MySQL server on '127.0.0.1:3306' (111)\n[Test/test]   | \n[Test/test]   | memsql/common/connection_pool.py:164: PoolConnectionException\n[Test/test]   | ______________________ ERROR at setup of test_sql_errors _______________________\n[Test/test]   | \n[Test/test]   | args = ()\n[Test/test]   | kwargs = {'_version': 0, 'database': 'information_schema', 'host': '127.0.0.1', 'options': None, ...}\n[Test/test]   | \n[Test/test]   |     def wrapped(*args, **kwargs):\n[Test/test]   |         try:\n[Test/test]   | >           return fn(*args, **kwargs)\n[Test/test]   | \n[Test/test]   | memsql/common/connection_pool.py:120: \n[Test/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test/test]   | \n[Test/test]   | args = ()\n[Test/test]   | kwargs = {'_version': 0, 'database': 'information_schema', 'host': '127.0.0.1', 'options': None, ...}\n[Test/test]   | \n[Test/test]   |     def connect(*args, **kwargs):\n[Test/test]   | >       return Connection(*args, **kwargs)\n[Test/test]   | \n[Test/test]   | memsql/common/database.py:20: \n[Test/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test/test]   | \n[Test/test]   | self = <memsql.common.database.Connection object at 0x7f95ed3644c0>\n[Test/test]   | host = '127.0.0.1', port = 3306, database = 'information_schema', user = 'root'\n[Test/test]   | password = 'mysql', max_idle_time = 25200, _version = 0, options = None\n[Test/test]   | \n[Test/test]   |     def __init__(self, host, port=3306, database=\"information_schema\", user=None, password=None,\n[Test/test]   |                  max_idle_time=7 * 3600, _version=0, options=None):\n[Test/test]   |         self.max_idle_time = max_idle_time\n[Test/test]   |     \n[Test/test]   |         args = {\n[Test/test]   |             \"db\": database,\n[Test/test]   |             \"conv\": CONVERSIONS\n[Test/test]   |         }\n[Test/test]   |     \n[Test/test]   |         if user is not None:\n[Test/test]   |             args[\"user\"] = user\n[Test/test]   |         if password is not None:\n[Test/test]   |             args[\"passwd\"] = password\n[Test/test]   |     \n[Test/test]   |         args[\"host\"] = host\n[Test/test]   |         args[\"port\"] = int(port)\n[Test/test]   |     \n[Test/test]   |         if options is not None:\n[Test/test]   |             assert isinstance(options, dict), \"Options to database.Connection must be an dictionary of { str: value } pairs.\"\n[Test/test]   |             args.update(options)\n[Test/test]   |     \n[Test/test]   |         # Fix for parameter name changes in mysqlclient v2.1.0\n[Test/test]   |         if MySQLdb.version_info[:2] >= (2, 1):\n[Test/test]   |             if \"db\" in args:\n[Test/test]   |                 args[\"database\"] = args.pop(\"db\")\n[Test/test]   |             if \"passwd\" in args:\n[Test/test]   |                 args[\"password\"] = args.pop(\"passwd\")\n[Test/test]   |     \n[Test/test]   |         self._db = None\n[Test/test]   |         self._db_args = args\n[Test/test]   |     \n[Test/test]   |         self._last_use_time = time.time()\n[Test/test]   | >       self.reconnect()\n[Test/test]   | \n[Test/test]   | memsql/common/database.py:71: \n[Test/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test/test]   | \n[Test/test]   | self = <memsql.common.database.Connection object at 0x7f95ed3644c0>\n[Test/test]   | \n[Test/test]   |     def reconnect(self):\n[Test/test]   |         \"\"\"Closes the existing database connection and re-opens it.\"\"\"\n[Test/test]   | >       conn = _mysql.connect(**self._db_args)\n[Test/test]   | E       MySQLdb.OperationalError: (2003, \"Can't connect to MySQL server on '127.0.0.1:3306' (111)\")\n[Test/test]   | \n[Test/test]   | memsql/common/database.py:102: OperationalError\n[Test/test]   | \n[Test/test]   | During handling of the above exception, another exception occurred:\n[Test/test]   | \n[Test/test]   | pool = <memsql.common.connection_pool.ConnectionPool object at 0x7f95ed3379d0>\n[Test/test]   | db_args = ('127.0.0.1', 3306, 'root', 'mysql', 'information_schema')\n[Test/test]   | \n[Test/test]   |     @pytest.fixture\n[Test/test]   |     def fairy(pool, db_args):\n[Test/test]   | >       return pool.connect(*db_args)\n[Test/test]   | \n[Test/test]   | memsql/common/test/test_connection_pool.py:28: \n[Test/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test/test]   | memsql/common/connection_pool.py:54: in connect\n[Test/test]   |     fairy.connect(self._current_version)\n[Test/test]   | memsql/common/connection_pool.py:183: in connect\n[Test/test]   |     self._conn = _connect(\n[Test/test]   | memsql/common/connection_pool.py:132: in wrapped\n[Test/test]   |     self.__handle_connection_failure(e)\n[Test/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test/test]   | \n[Test/test]   | self = <memsql.common.connection_pool._PoolConnectionFairy object at 0x7f95ed364490>\n[Test/test]   | e = OperationalError(2003, \"Can't connect to MySQL server on '127.0.0.1:3306' (111)\")\n[Test/test]   | \n[Test/test]   |     def __handle_connection_failure(self, e):\n[Test/test]   |         # expire the connection so we don't return it to the pool accidentally\n[Test/test]   |         self.expire()\n[Test/test]   |     \n[Test/test]   |         # build and raise the new consolidated exception\n[Test/test]   |         message = None\n[Test/test]   |         if isinstance(e, _mysql.OperationalError) or (hasattr(e, 'args') and len(e.args) >= 2):\n[Test/test]   |             err_num = e.args[0]\n[Test/test]   |             message = e.args[1]\n[Test/test]   |         elif hasattr(e, 'errno'):\n[Test/test]   |             err_num = e.errno\n[Test/test]   |         else:\n[Test/test]   |             err_num = errno.ECONNABORTED\n[Test/test]   |     \n[Test/test]   | >       raise PoolConnectionException(err_num, message, self._key)\n[Test/test]   | E       memsql.common.connection_pool.PoolConnectionException: [Errno 2003] Can't connect to MySQL server on '127.0.0.1:3306' (111)\n[Test/test]   | \n[Test/test]   | memsql/common/connection_pool.py:164: PoolConnectionException\n[Test/test]   | ____________________ ERROR at setup of test_connection_open ____________________\n[Test/test]   | \n[Test/test]   | test_db_args = {'host': '127.0.0.1', 'password': 'mysql', 'port': 3306, 'user': 'root'}\n[Test/test]   | \n[Test/test]   |     @pytest.fixture\n[Test/test]   |     def test_db_conn(test_db_args):\n[Test/test]   | >       return database.connect(**test_db_args)\n[Test/test]   | \n[Test/test]   | memsql/common/test/conftest.py:22: \n[Test/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test/test]   | memsql/common/database.py:20: in connect\n[Test/test]   |     return Connection(*args, **kwargs)\n[Test/test]   | memsql/common/database.py:71: in __init__\n[Test/test]   |     self.reconnect()\n[Test/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test/test]   | \n[Test/test]   | self = <memsql.common.database.Connection object at 0x7f95ed414df0>\n[Test/test]   | \n[Test/test]   |     def reconnect(self):\n[Test/test]   |         \"\"\"Closes the existing database connection and re-opens it.\"\"\"\n[Test/test]   | >       conn = _mysql.connect(**self._db_args)\n[Test/test]   | E       MySQLdb.OperationalError: (2003, \"Can't connect to MySQL server on '127.0.0.1:3306' (111)\")\n[Test/test]   | \n[Test/test]   | memsql/common/database.py:102: OperationalError\n[Test/test]   | ___________________ ERROR at setup of test_connection_close ____________________\n[Test/test]   | \n[Test/test]   | test_db_args = {'host': '127.0.0.1', 'password': 'mysql', 'port': 3306, 'user': 'root'}\n[Test/test]   | \n[Test/test]   |     @pytest.fixture\n[Test/test]   |     def test_db_conn(test_db_args):\n[Test/test]   | >       return database.connect(**test_db_args)\n[Test/test]   | \n[Test/test]   | memsql/common/test/conftest.py:22: \n[Test/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test/test]   | memsql/common/database.py:20: in connect\n[Test/test]   |     return Connection(*args, **kwargs)\n[Test/test]   | memsql/common/database.py:71: in __init__\n[Test/test]   |     self.reconnect()\n[Test/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test/test]   | \n[Test/test]   | self = <memsql.common.database.Connection object at 0x7f95ed3344c0>\n[Test/test]   | \n[Test/test]   |     def reconnect(self):\n[Test/test]   |         \"\"\"Closes the existing database connection and re-opens it.\"\"\"\n[Test/test]   | >       conn = _mysql.connect(**self._db_args)\n[Test/test]   | E       MySQLdb.OperationalError: (2003, \"Can't connect to MySQL server on '127.0.0.1:3306' (111)\")\n[Test/test]   | \n[Test/test]   | memsql/common/database.py:102: OperationalError\n[Test/test]   | _______________________ ERROR at setup of test_reconnect _______________________\n[Test/test]   | \n[Test/test]   | test_db_args = {'host': '127.0.0.1', 'password': 'mysql', 'port': 3306, 'user': 'root'}\n[Test/test]   | \n[Test/test]   |     @pytest.fixture\n[Test/test]   |     def test_db_conn(test_db_args):\n[Test/test]   | >       return database.connect(**test_db_args)\n[Test/test]   | \n[Test/test]   | memsql/common/test/conftest.py:22: \n[Test/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test/test]   | memsql/common/database.py:20: in connect\n[Test/test]   |     return Connection(*args, **kwargs)\n[Test/test]   | memsql/common/database.py:71: in __init__\n[Test/test]   |     self.reconnect()\n[Test/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test/test]   | \n[Test/test]   | self = <memsql.common.database.Connection object at 0x7f95ed2c09a0>\n[Test/test]   | \n[Test/test]   |     def reconnect(self):\n[Test/test]   |         \"\"\"Closes the existing database connection and re-opens it.\"\"\"\n[Test/test]   | >       conn = _mysql.connect(**self._db_args)\n[Test/test]   | E       MySQLdb.OperationalError: (2003, \"Can't connect to MySQL server on '127.0.0.1:3306' (111)\")\n[Test/test]   | \n[Test/test]   | memsql/common/database.py:102: OperationalError\n[Test/test]   | _________________________ ERROR at setup of test_query _________________________\n[Test/test]   | \n[Test/test]   | test_db_args = {'host': '127.0.0.1', 'password': 'mysql', 'port': 3306, 'user': 'root'}\n[Test/test]   | \n[Test/test]   |     @pytest.fixture\n[Test/test]   |     def test_db_conn(test_db_args):\n[Test/test]   | >       return database.connect(**test_db_args)\n[Test/test]   | \n[Test/test]   | memsql/common/test/conftest.py:22: \n[Test/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test/test]   | memsql/common/database.py:20: in connect\n[Test/test]   |     return Connection(*args, **kwargs)\n[Test/test]   | memsql/common/database.py:71: in __init__\n[Test/test]   |     self.reconnect()\n[Test/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test/test]   | \n[Test/test]   | self = <memsql.common.database.Connection object at 0x7f95ed330ac0>\n[Test/test]   | \n[Test/test]   |     def reconnect(self):\n[Test/test]   |         \"\"\"Closes the existing database connection and re-opens it.\"\"\"\n[Test/test]   | >       conn = _mysql.connect(**self._db_args)\n[Test/test]   | E       MySQLdb.OperationalError: (2003, \"Can't connect to MySQL server on '127.0.0.1:3306' (111)\")\n[Test/test]   | \n[Test/test]   | memsql/common/database.py:102: OperationalError\n[Test/test]   | _________________________ ERROR at setup of test_ping __________________________\n[Test/test]   | \n[Test/test]   | test_db_args = {'host': '127.0.0.1', 'password': 'mysql', 'port': 3306, 'user': 'root'}\n[Test/test]   | \n[Test/test]   |     @pytest.fixture\n[Test/test]   |     def test_db_conn(test_db_args):\n[Test/test]   | >       return database.connect(**test_db_args)\n[Test/test]   | \n[Test/test]   | memsql/common/test/conftest.py:22: \n[Test/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test/test]   | memsql/common/database.py:20: in connect\n[Test/test]   |     return Connection(*args, **kwargs)\n[Test/test]   | memsql/common/database.py:71: in __init__\n[Test/test]   |     self.reconnect()\n[Test/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test/test]   | \n[Test/test]   | self = <memsql.common.database.Connection object at 0x7f95ed2b8b80>\n[Test/test]   | \n[Test/test]   |     def reconnect(self):\n[Test/test]   |         \"\"\"Closes the existing database connection and re-opens it.\"\"\"\n[Test/test]   | >       conn = _mysql.connect(**self._db_args)\n[Test/test]   | E       MySQLdb.OperationalError: (2003, \"Can't connect to MySQL server on '127.0.0.1:3306' (111)\")\n[Test/test]   | \n[Test/test]   | memsql/common/database.py:102: OperationalError\n[Test/test]   | _______________________ ERROR at setup of test_thread_id _______________________\n[Test/test]   | \n[Test/test]   | test_db_args = {'host': '127.0.0.1', 'password': 'mysql', 'port': 3306, 'user': 'root'}\n[Test/test]   | \n[Test/test]   |     @pytest.fixture\n[Test/test]   |     def test_db_conn(test_db_args):\n[Test/test]   | >       return database.connect(**test_db_args)\n[Test/test]   | \n[Test/test]   | memsql/common/test/conftest.py:22: \n[Test/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test/test]   | memsql/common/database.py:20: in connect\n[Test/test]   |     return Connection(*args, **kwargs)\n[Test/test]   | memsql/common/database.py:71: in __init__\n[Test/test]   |     self.reconnect()\n[Test/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test/test]   | \n[Test/test]   | self = <memsql.common.database.Connection object at 0x7f95ed26c670>\n[Test/test]   | \n[Test/test]   |     def reconnect(self):\n[Test/test]   |         \"\"\"Closes the existing database connection and re-opens it.\"\"\"\n[Test/test]   | >       conn = _mysql.connect(**self._db_args)\n[Test/test]   | E       MySQLdb.OperationalError: (2003, \"Can't connect to MySQL server on '127.0.0.1:3306' (111)\")\n[Test/test]   | \n[Test/test]   | memsql/common/database.py:102: OperationalError\n[Test/test]   | __________________ ERROR at setup of TestQueries.test_insert ___________________\n[Test/test]   | \n[Test/test]   | self = <memsql.common.test.test_database_adapters.TestQueries object at 0x7f95ed451dc0>\n[Test/test]   | request = <SubRequest 'x_conn' for <Function test_insert>>\n[Test/test]   | test_db_args = {'host': '127.0.0.1', 'password': 'mysql', 'port': 3306, 'user': 'root'}\n[Test/test]   | test_db_database = 'memsql_python_tests'\n[Test/test]   | \n[Test/test]   |     @pytest.fixture(scope=\"class\")\n[Test/test]   |     def x_conn(self, request, test_db_args, test_db_database):\n[Test/test]   | >       return self._x_conn(request, test_db_args, test_db_database)\n[Test/test]   | \n[Test/test]   | memsql/common/test/test_database_adapters.py:48: \n[Test/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test/test]   | memsql/common/test/test_database_adapters.py:51: in _x_conn\n[Test/test]   |     conn = database.connect(**test_db_args)\n[Test/test]   | memsql/common/database.py:20: in connect\n[Test/test]   |     return Connection(*args, **kwargs)\n[Test/test]   | memsql/common/database.py:71: in __init__\n[Test/test]   |     self.reconnect()\n[Test/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test/test]   | \n[Test/test]   | self = <memsql.common.database.Connection object at 0x7f95ed2a5610>\n[Test/test]   | \n[Test/test]   |     def reconnect(self):\n[Test/test]   |         \"\"\"Closes the existing database connection and re-opens it.\"\"\"\n[Test/test]   | >       conn = _mysql.connect(**self._db_args)\n[Test/test]   | E       MySQLdb.OperationalError: (2003, \"Can't connect to MySQL server on '127.0.0.1:3306' (111)\")\n[Test/test]   | \n[Test/test]   | memsql/common/database.py:102: OperationalError\n[Test/test]   | _________________ ERROR at setup of TestQueries.test_insert_qb _________________\n[Test/test]   | \n[Test/test]   | self = <memsql.common.test.test_database_adapters.TestQueries object at 0x7f95ed451dc0>\n[Test/test]   | request = <SubRequest 'x_conn' for <Function test_insert>>\n[Test/test]   | test_db_args = {'host': '127.0.0.1', 'password': 'mysql', 'port': 3306, 'user': 'root'}\n[Test/test]   | test_db_database = 'memsql_python_tests'\n[Test/test]   | \n[Test/test]   |     @pytest.fixture(scope=\"class\")\n[Test/test]   |     def x_conn(self, request, test_db_args, test_db_database):\n[Test/test]   | >       return self._x_conn(request, test_db_args, test_db_database)\n[Test/test]   | \n[Test/test]   | memsql/common/test/test_database_adapters.py:48: \n[Test/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test/test]   | memsql/common/test/test_database_adapters.py:51: in _x_conn\n[Test/test]   |     conn = database.connect(**test_db_args)\n[Test/test]   | memsql/common/database.py:20: in connect\n[Test/test]   |     return Connection(*args, **kwargs)\n[Test/test]   | memsql/common/database.py:71: in __init__\n[Test/test]   |     self.reconnect()\n[Test/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test/test]   | \n[Test/test]   | self = <memsql.common.database.Connection object at 0x7f95ed2a5610>\n[Test/test]   | \n[Test/test]   |     def reconnect(self):\n[Test/test]   |         \"\"\"Closes the existing database connection and re-opens it.\"\"\"\n[Test/test]   | >       conn = _mysql.connect(**self._db_args)\n[Test/test]   | E       MySQLdb.OperationalError: (2003, \"Can't connect to MySQL server on '127.0.0.1:3306' (111)\")\n[Test/test]   | \n[Test/test]   | memsql/common/database.py:102: OperationalError\n[Test/test]   | __________________ ERROR at setup of TestQueries.test_select ___________________\n[Test/test]   | \n[Test/test]   | self = <memsql.common.test.test_database_adapters.TestQueries object at 0x7f95ed451dc0>\n[Test/test]   | request = <SubRequest 'x_conn' for <Function test_insert>>\n[Test/test]   | test_db_args = {'host': '127.0.0.1', 'password': 'mysql', 'port': 3306, 'user': 'root'}\n[Test/test]   | test_db_database = 'memsql_python_tests'\n[Test/test]   | \n[Test/test]   |     @pytest.fixture(scope=\"class\")\n[Test/test]   |     def x_conn(self, request, test_db_args, test_db_database):\n[Test/test]   | >       return self._x_conn(request, test_db_args, test_db_database)\n[Test/test]   | \n[Test/test]   | memsql/common/test/test_database_adapters.py:48: \n[Test/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test/test]   | memsql/common/test/test_database_adapters.py:51: in _x_conn\n[Test/test]   |     conn = database.connect(**test_db_args)\n[Test/test]   | memsql/common/database.py:20: in connect\n[Test/test]   |     return Connection(*args, **kwargs)\n[Test/test]   | memsql/common/database.py:71: in __init__\n[Test/test]   |     self.reconnect()\n[Test/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test/test]   | \n[Test/test]   | self = <memsql.common.database.Connection object at 0x7f95ed2a5610>\n[Test/test]   | \n[Test/test]   |     def reconnect(self):\n[Test/test]   |         \"\"\"Closes the existing database connection and re-opens it.\"\"\"\n[Test/test]   | >       conn = _mysql.connect(**self._db_args)\n[Test/test]   | E       MySQLdb.OperationalError: (2003, \"Can't connect to MySQL server on '127.0.0.1:3306' (111)\")\n[Test/test]   | \n[Test/test]   | memsql/common/database.py:102: OperationalError\n[Test/test]   | __________________ ERROR at setup of TestQueries.test_unicode __________________\n[Test/test]   | \n[Test/test]   | self = <memsql.common.test.test_database_adapters.TestQueries object at 0x7f95ed451dc0>\n[Test/test]   | request = <SubRequest 'x_conn' for <Function test_insert>>\n[Test/test]   | test_db_args = {'host': '127.0.0.1', 'password': 'mysql', 'port': 3306, 'user': 'root'}\n[Test/test]   | test_db_database = 'memsql_python_tests'\n[Test/test]   | \n[Test/test]   |     @pytest.fixture(scope=\"class\")\n[Test/test]   |     def x_conn(self, request, test_db_args, test_db_database):\n[Test/test]   | >       return self._x_conn(request, test_db_args, test_db_database)\n[Test/test]   | \n[Test/test]   | memsql/common/test/test_database_adapters.py:48: \n[Test/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test/test]   | memsql/common/test/test_database_adapters.py:51: in _x_conn\n[Test/test]   |     conn = database.connect(**test_db_args)\n[Test/test]   | memsql/common/database.py:20: in connect\n[Test/test]   |     return Connection(*args, **kwargs)\n[Test/test]   | memsql/common/database.py:71: in __init__\n[Test/test]   |     self.reconnect()\n[Test/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test/test]   | \n[Test/test]   | self = <memsql.common.database.Connection object at 0x7f95ed2a5610>\n[Test/test]   | \n[Test/test]   |     def reconnect(self):\n[Test/test]   |         \"\"\"Closes the existing database connection and re-opens it.\"\"\"\n[Test/test]   | >       conn = _mysql.connect(**self._db_args)\n[Test/test]   | E       MySQLdb.OperationalError: (2003, \"Can't connect to MySQL server on '127.0.0.1:3306' (111)\")\n[Test/test]   | \n[Test/test]   | memsql/common/database.py:102: OperationalError\n[Test/test]   | ________________ ERROR at setup of TestQueries.test_queryparams ________________\n[Test/test]   | \n[Test/test]   | self = <memsql.common.test.test_database_adapters.TestQueries object at 0x7f95ed451dc0>\n[Test/test]   | request = <SubRequest 'x_conn' for <Function test_insert>>\n[Test/test]   | test_db_args = {'host': '127.0.0.1', 'password': 'mysql', 'port': 3306, 'user': 'root'}\n[Test/test]   | test_db_database = 'memsql_python_tests'\n[Test/test]   | \n[Test/test]   |     @pytest.fixture(scope=\"class\")\n[Test/test]   |     def x_conn(self, request, test_db_args, test_db_database):\n[Test/test]   | >       return self._x_conn(request, test_db_args, test_db_database)\n[Test/test]   | \n[Test/test]   | memsql/common/test/test_database_adapters.py:48: \n[Test/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test/test]   | memsql/common/test/test_database_adapters.py:51: in _x_conn\n[Test/test]   |     conn = database.connect(**test_db_args)\n[Test/test]   | memsql/common/database.py:20: in connect\n[Test/test]   |     return Connection(*args, **kwargs)\n[Test/test]   | memsql/common/database.py:71: in __init__\n[Test/test]   |     self.reconnect()\n[Test/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test/test]   | \n[Test/test]   | self = <memsql.common.database.Connection object at 0x7f95ed2a5610>\n[Test/test]   | \n[Test/test]   |     def reconnect(self):\n[Test/test]   |         \"\"\"Closes the existing database connection and re-opens it.\"\"\"\n[Test/test]   | >       conn = _mysql.connect(**self._db_args)\n[Test/test]   | E       MySQLdb.OperationalError: (2003, \"Can't connect to MySQL server on '127.0.0.1:3306' (111)\")\n[Test/test]   | \n[Test/test]   | memsql/common/database.py:102: OperationalError\n[Test/test]   | ______________ ERROR at setup of TestQueries.test_advanced_params ______________\n[Test/test]   | \n[Test/test]   | self = <memsql.common.test.test_database_adapters.TestQueries object at 0x7f95ed451dc0>\n[Test/test]   | request = <SubRequest 'x_conn' for <Function test_insert>>\n[Test/test]   | test_db_args = {'host': '127.0.0.1', 'password': 'mysql', 'port': 3306, 'user': 'root'}\n[Test/test]   | test_db_database = 'memsql_python_tests'\n[Test/test]   | \n[Test/test]   |     @pytest.fixture(scope=\"class\")\n[Test/test]   |     def x_conn(self, request, test_db_args, test_db_database):\n[Test/test]   | >       return self._x_conn(request, test_db_args, test_db_database)\n[Test/test]   | \n[Test/test]   | memsql/common/test/test_database_adapters.py:48: \n[Test/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test/test]   | memsql/common/test/test_database_adapters.py:51: in _x_conn\n[Test/test]   |     conn = database.connect(**test_db_args)\n[Test/test]   | memsql/common/database.py:20: in connect\n[Test/test]   |     return Connection(*args, **kwargs)\n[Test/test]   | memsql/common/database.py:71: in __init__\n[Test/test]   |     self.reconnect()\n[Test/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test/test]   | \n[Test/test]   | self = <memsql.common.database.Connection object at 0x7f95ed2a5610>\n[Test/test]   | \n[Test/test]   |     def reconnect(self):\n[Test/test]   |         \"\"\"Closes the existing database connection and re-opens it.\"\"\"\n[Test/test]   | >       conn = _mysql.connect(**self._db_args)\n[Test/test]   | E       MySQLdb.OperationalError: (2003, \"Can't connect to MySQL server on '127.0.0.1:3306' (111)\")\n[Test/test]   | \n[Test/test]   | memsql/common/database.py:102: OperationalError\n[Test/test]   | __________________ ERROR at setup of TestQueries.test_kwargs ___________________\n[Test/test]   | \n[Test/test]   | self = <memsql.common.test.test_database_adapters.TestQueries object at 0x7f95ed451dc0>\n[Test/test]   | request = <SubRequest 'x_conn' for <Function test_insert>>\n[Test/test]   | test_db_args = {'host': '127.0.0.1', 'password': 'mysql', 'port': 3306, 'user': 'root'}\n[Test/test]   | test_db_database = 'memsql_python_tests'\n[Test/test]   | \n[Test/test]   |     @pytest.fixture(scope=\"class\")\n[Test/test]   |     def x_conn(self, request, test_db_args, test_db_database):\n[Test/test]   | >       return self._x_conn(request, test_db_args, test_db_database)\n[Test/test]   | \n[Test/test]   | memsql/common/test/test_database_adapters.py:48: \n[Test/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test/test]   | memsql/common/test/test_database_adapters.py:51: in _x_conn\n[Test/test]   |     conn = database.connect(**test_db_args)\n[Test/test]   | memsql/common/database.py:20: in connect\n[Test/test]   |     return Connection(*args, **kwargs)\n[Test/test]   | memsql/common/database.py:71: in __init__\n[Test/test]   |     self.reconnect()\n[Test/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test/test]   | \n[Test/test]   | self = <memsql.common.database.Connection object at 0x7f95ed2a5610>\n[Test/test]   | \n[Test/test]   |     def reconnect(self):\n[Test/test]   |         \"\"\"Closes the existing database connection and re-opens it.\"\"\"\n[Test/test]   | >       conn = _mysql.connect(**self._db_args)\n[Test/test]   | E       MySQLdb.OperationalError: (2003, \"Can't connect to MySQL server on '127.0.0.1:3306' (111)\")\n[Test/test]   | \n[Test/test]   | memsql/common/database.py:102: OperationalError\n[Test/test]   | ________________ ERROR at setup of TestQueries.test_kwargs_all _________________\n[Test/test]   | \n[Test/test]   | self = <memsql.common.test.test_database_adapters.TestQueries object at 0x7f95ed451dc0>\n[Test/test]   | request = <SubRequest 'x_conn' for <Function test_insert>>\n[Test/test]   | test_db_args = {'host': '127.0.0.1', 'password': 'mysql', 'port': 3306, 'user': 'root'}\n[Test/test]   | test_db_database = 'memsql_python_tests'\n[Test/test]   | \n[Test/test]   |     @pytest.fixture(scope=\"class\")\n[Test/test]   |     def x_conn(self, request, test_db_args, test_db_database):\n[Test/test]   | >       return self._x_conn(request, test_db_args, test_db_database)\n[Test/test]   | \n[Test/test]   | memsql/common/test/test_database_adapters.py:48: \n[Test/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test/test]   | memsql/common/test/test_database_adapters.py:51: in _x_conn\n[Test/test]   |     conn = database.connect(**test_db_args)\n[Test/test]   | memsql/common/database.py:20: in connect\n[Test/test]   |     return Connection(*args, **kwargs)\n[Test/test]   | memsql/common/database.py:71: in __init__\n[Test/test]   |     self.reconnect()\n[Test/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test/test]   | \n[Test/test]   | self = <memsql.common.database.Connection object at 0x7f95ed2a5610>\n[Test/test]   | \n[Test/test]   |     def reconnect(self):\n[Test/test]   |         \"\"\"Closes the existing database connection and re-opens it.\"\"\"\n[Test/test]   | >       conn = _mysql.connect(**self._db_args)\n[Test/test]   | E       MySQLdb.OperationalError: (2003, \"Can't connect to MySQL server on '127.0.0.1:3306' (111)\")\n[Test/test]   | \n[Test/test]   | memsql/common/database.py:102: OperationalError\n[Test/test]   | ____________ ERROR at setup of TestQueries.test_kwparams_exclusive _____________\n[Test/test]   | \n[Test/test]   | self = <memsql.common.test.test_database_adapters.TestQueries object at 0x7f95ed451dc0>\n[Test/test]   | request = <SubRequest 'x_conn' for <Function test_insert>>\n[Test/test]   | test_db_args = {'host': '127.0.0.1', 'password': 'mysql', 'port': 3306, 'user': 'root'}\n[Test/test]   | test_db_database = 'memsql_python_tests'\n[Test/test]   | \n[Test/test]   |     @pytest.fixture(scope=\"class\")\n[Test/test]   |     def x_conn(self, request, test_db_args, test_db_database):\n[Test/test]   | >       return self._x_conn(request, test_db_args, test_db_database)\n[Test/test]   | \n[Test/test]   | memsql/common/test/test_database_adapters.py:48: \n[Test/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test/test]   | memsql/common/test/test_database_adapters.py:51: in _x_conn\n[Test/test]   |     conn = database.connect(**test_db_args)\n[Test/test]   | memsql/common/database.py:20: in connect\n[Test/test]   |     return Connection(*args, **kwargs)\n[Test/test]   | memsql/common/database.py:71: in __init__\n[Test/test]   |     self.reconnect()\n[Test/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test/test]   | \n[Test/test]   | self = <memsql.common.database.Connection object at 0x7f95ed2a5610>\n[Test/test]   | \n[Test/test]   |     def reconnect(self):\n[Test/test]   |         \"\"\"Closes the existing database connection and re-opens it.\"\"\"\n[Test/test]   | >       conn = _mysql.connect(**self._db_args)\n[Test/test]   | E       MySQLdb.OperationalError: (2003, \"Can't connect to MySQL server on '127.0.0.1:3306' (111)\")\n[Test/test]   | \n[Test/test]   | memsql/common/database.py:102: OperationalError\n[Test/test]   | _______________ ERROR at setup of TestQueries.test_single_format _______________\n[Test/test]   | \n[Test/test]   | self = <memsql.common.test.test_database_adapters.TestQueries object at 0x7f95ed451dc0>\n[Test/test]   | request = <SubRequest 'x_conn' for <Function test_insert>>\n[Test/test]   | test_db_args = {'host': '127.0.0.1', 'password': 'mysql', 'port': 3306, 'user': 'root'}\n[Test/test]   | test_db_database = 'memsql_python_tests'\n[Test/test]   | \n[Test/test]   |     @pytest.fixture(scope=\"class\")\n[Test/test]   |     def x_conn(self, request, test_db_args, test_db_database):\n[Test/test]   | >       return self._x_conn(request, test_db_args, test_db_database)\n[Test/test]   | \n[Test/test]   | memsql/common/test/test_database_adapters.py:48: \n[Test/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test/test]   | memsql/common/test/test_database_adapters.py:51: in _x_conn\n[Test/test]   |     conn = database.connect(**test_db_args)\n[Test/test]   | memsql/common/database.py:20: in connect\n[Test/test]   |     return Connection(*args, **kwargs)\n[Test/test]   | memsql/common/database.py:71: in __init__\n[Test/test]   |     self.reconnect()\n[Test/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test/test]   | \n[Test/test]   | self = <memsql.common.database.Connection object at 0x7f95ed2a5610>\n[Test/test]   | \n[Test/test]   |     def reconnect(self):\n[Test/test]   |         \"\"\"Closes the existing database connection and re-opens it.\"\"\"\n[Test/test]   | >       conn = _mysql.connect(**self._db_args)\n[Test/test]   | E       MySQLdb.OperationalError: (2003, \"Can't connect to MySQL server on '127.0.0.1:3306' (111)\")\n[Test/test]   | \n[Test/test]   | memsql/common/database.py:102: OperationalError\n[Test/test]   | _____________ ERROR at setup of TestQueries.test_ensure_connected ______________\n[Test/test]   | \n[Test/test]   | self = <memsql.common.test.test_database_adapters.TestQueries object at 0x7f95ed451dc0>\n[Test/test]   | request = <SubRequest 'x_conn' for <Function test_insert>>\n[Test/test]   | test_db_args = {'host': '127.0.0.1', 'password': 'mysql', 'port': 3306, 'user': 'root'}\n[Test/test]   | test_db_database = 'memsql_python_tests'\n[Test/test]   | \n[Test/test]   |     @pytest.fixture(scope=\"class\")\n[Test/test]   |     def x_conn(self, request, test_db_args, test_db_database):\n[Test/test]   | >       return self._x_conn(request, test_db_args, test_db_database)\n[Test/test]   | \n[Test/test]   | memsql/common/test/test_database_adapters.py:48: \n[Test/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test/test]   | memsql/common/test/test_database_adapters.py:51: in _x_conn\n[Test/test]   |     conn = database.connect(**test_db_args)\n[Test/test]   | memsql/common/database.py:20: in connect\n[Test/test]   |     return Connection(*args, **kwargs)\n[Test/test]   | memsql/common/database.py:71: in __init__\n[Test/test]   |     self.reconnect()\n[Test/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test/test]   | \n[Test/test]   | self = <memsql.common.database.Connection object at 0x7f95ed2a5610>\n[Test/test]   | \n[Test/test]   |     def reconnect(self):\n[Test/test]   |         \"\"\"Closes the existing database connection and re-opens it.\"\"\"\n[Test/test]   | >       conn = _mysql.connect(**self._db_args)\n[Test/test]   | E       MySQLdb.OperationalError: (2003, \"Can't connect to MySQL server on '127.0.0.1:3306' (111)\")\n[Test/test]   | \n[Test/test]   | memsql/common/database.py:102: OperationalError\n[Test/test]   | =================================== FAILURES ===================================\n[Test/test]   | ________________________________ test_checkout _________________________________\n[Test/test]   | \n[Test/test]   | args = ()\n[Test/test]   | kwargs = {'_version': 0, 'database': 'information_schema', 'host': '127.0.0.1', 'options': None, ...}\n[Test/test]   | \n[Test/test]   |     def wrapped(*args, **kwargs):\n[Test/test]   |         try:\n[Test/test]   | >           return fn(*args, **kwargs)\n[Test/test]   | \n[Test/test]   | memsql/common/connection_pool.py:120: \n[Test/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test/test]   | \n[Test/test]   | args = ()\n[Test/test]   | kwargs = {'_version': 0, 'database': 'information_schema', 'host': '127.0.0.1', 'options': None, ...}\n[Test/test]   | \n[Test/test]   |     def connect(*args, **kwargs):\n[Test/test]   | >       return Connection(*args, **kwargs)\n[Test/test]   | \n[Test/test]   | memsql/common/database.py:20: \n[Test/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test/test]   | \n[Test/test]   | self = <memsql.common.database.Connection object at 0x7f95ed47b6d0>\n[Test/test]   | host = '127.0.0.1', port = 3306, database = 'information_schema', user = 'root'\n[Test/test]   | password = 'mysql', max_idle_time = 25200, _version = 0, options = None\n[Test/test]   | \n[Test/test]   |     def __init__(self, host, port=3306, database=\"information_schema\", user=None, password=None,\n[Test/test]   |                  max_idle_time=7 * 3600, _version=0, options=None):\n[Test/test]   |         self.max_idle_time = max_idle_time\n[Test/test]   |     \n[Test/test]   |         args = {\n[Test/test]   |             \"db\": database,\n[Test/test]   |             \"conv\": CONVERSIONS\n[Test/test]   |         }\n[Test/test]   |     \n[Test/test]   |         if user is not None:\n[Test/test]   |             args[\"user\"] = user\n[Test/test]   |         if password is not None:\n[Test/test]   |             args[\"passwd\"] = password\n[Test/test]   |     \n[Test/test]   |         args[\"host\"] = host\n[Test/test]   |         args[\"port\"] = int(port)\n[Test/test]   |     \n[Test/test]   |         if options is not None:\n[Test/test]   |             assert isinstance(options, dict), \"Options to database.Connection must be an dictionary of { str: value } pairs.\"\n[Test/test]   |             args.update(options)\n[Test/test]   |     \n[Test/test]   |         # Fix for parameter name changes in mysqlclient v2.1.0\n[Test/test]   |         if MySQLdb.version_info[:2] >= (2, 1):\n[Test/test]   |             if \"db\" in args:\n[Test/test]   |                 args[\"database\"] = args.pop(\"db\")\n[Test/test]   |             if \"passwd\" in args:\n[Test/test]   |                 args[\"password\"] = args.pop(\"passwd\")\n[Test/test]   |     \n[Test/test]   |         self._db = None\n[Test/test]   |         self._db_args = args\n[Test/test]   |     \n[Test/test]   |         self._last_use_time = time.time()\n[Test/test]   | >       self.reconnect()\n[Test/test]   | \n[Test/test]   | memsql/common/database.py:71: \n[Test/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test/test]   | \n[Test/test]   | self = <memsql.common.database.Connection object at 0x7f95ed47b6d0>\n[Test/test]   | \n[Test/test]   |     def reconnect(self):\n[Test/test]   |         \"\"\"Closes the existing database connection and re-opens it.\"\"\"\n[Test/test]   | >       conn = _mysql.connect(**self._db_args)\n[Test/test]   | E       MySQLdb.OperationalError: (2003, \"Can't connect to MySQL server on '127.0.0.1:3306' (111)\")\n[Test/test]   | \n[Test/test]   | memsql/common/database.py:102: OperationalError\n[Test/test]   | \n[Test/test]   | During handling of the above exception, another exception occurred:\n[Test/test]   | \n[Test/test]   | pool = <memsql.common.connection_pool.ConnectionPool object at 0x7f95ed3a7430>\n[Test/test]   | test_key = ('127.0.0.1', 3306, 'root', 'mysql', 'information_schema', None, ...)\n[Test/test]   | db_args = ('127.0.0.1', 3306, 'root', 'mysql', 'information_schema')\n[Test/test]   | \n[Test/test]   |     def test_checkout(pool, test_key, db_args):\n[Test/test]   | >       fairy = pool.connect(*db_args)\n[Test/test]   | \n[Test/test]   | memsql/common/test/test_connection_pool.py:31: \n[Test/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test/test]   | memsql/common/connection_pool.py:54: in connect\n[Test/test]   |     fairy.connect(self._current_version)\n[Test/test]   | memsql/common/connection_pool.py:183: in connect\n[Test/test]   |     self._conn = _connect(\n[Test/test]   | memsql/common/connection_pool.py:132: in wrapped\n[Test/test]   |     self.__handle_connection_failure(e)\n[Test/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test/test]   | \n[Test/test]   | self = <memsql.common.connection_pool._PoolConnectionFairy object at 0x7f95ed3a7fa0>\n[Test/test]   | e = OperationalError(2003, \"Can't connect to MySQL server on '127.0.0.1:3306' (111)\")\n[Test/test]   | \n[Test/test]   |     def __handle_connection_failure(self, e):\n[Test/test]   |         # expire the connection so we don't return it to the pool accidentally\n[Test/test]   |         self.expire()\n[Test/test]   |     \n[Test/test]   |         # build and raise the new consolidated exception\n[Test/test]   |         message = None\n[Test/test]   |         if isinstance(e, _mysql.OperationalError) or (hasattr(e, 'args') and len(e.args) >= 2):\n[Test/test]   |             err_num = e.args[0]\n[Test/test]   |             message = e.args[1]\n[Test/test]   |         elif hasattr(e, 'errno'):\n[Test/test]   |             err_num = e.errno\n[Test/test]   |         else:\n[Test/test]   |             err_num = errno.ECONNABORTED\n[Test/test]   |     \n[Test/test]   | >       raise PoolConnectionException(err_num, message, self._key)\n[Test/test]   | E       memsql.common.connection_pool.PoolConnectionException: [Errno 2003] Can't connect to MySQL server on '127.0.0.1:3306' (111)\n[Test/test]   | \n[Test/test]   | memsql/common/connection_pool.py:164: PoolConnectionException\n[Test/test]   | ____________________________ test_connection_reuse _____________________________\n[Test/test]   | \n[Test/test]   | args = ()\n[Test/test]   | kwargs = {'_version': 0, 'database': 'information_schema', 'host': '127.0.0.1', 'options': None, ...}\n[Test/test]   | \n[Test/test]   |     def wrapped(*args, **kwargs):\n[Test/test]   |         try:\n[Test/test]   | >           return fn(*args, **kwargs)\n[Test/test]   | \n[Test/test]   | memsql/common/connection_pool.py:120: \n[Test/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test/test]   | \n[Test/test]   | args = ()\n[Test/test]   | kwargs = {'_version': 0, 'database': 'information_schema', 'host': '127.0.0.1', 'options': None, ...}\n[Test/test]   | \n[Test/test]   |     def connect(*args, **kwargs):\n[Test/test]   | >       return Connection(*args, **kwargs)\n[Test/test]   | \n[Test/test]   | memsql/common/database.py:20: \n[Test/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test/test]   | \n[Test/test]   | self = <memsql.common.database.Connection object at 0x7f95ed3bc0a0>\n[Test/test]   | host = '127.0.0.1', port = 3306, database = 'information_schema', user = 'root'\n[Test/test]   | password = 'mysql', max_idle_time = 25200, _version = 0, options = None\n[Test/test]   | \n[Test/test]   |     def __init__(self, host, port=3306, database=\"information_schema\", user=None, password=None,\n[Test/test]   |                  max_idle_time=7 * 3600, _version=0, options=None):\n[Test/test]   |         self.max_idle_time = max_idle_time\n[Test/test]   |     \n[Test/test]   |         args = {\n[Test/test]   |             \"db\": database,\n[Test/test]   |             \"conv\": CONVERSIONS\n[Test/test]   |         }\n[Test/test]   |     \n[Test/test]   |         if user is not None:\n[Test/test]   |             args[\"user\"] = user\n[Test/test]   |         if password is not None:\n[Test/test]   |             args[\"passwd\"] = password\n[Test/test]   |     \n[Test/test]   |         args[\"host\"] = host\n[Test/test]   |         args[\"port\"] = int(port)\n[Test/test]   |     \n[Test/test]   |         if options is not None:\n[Test/test]   |             assert isinstance(options, dict), \"Options to database.Connection must be an dictionary of { str: value } pairs.\"\n[Test/test]   |             args.update(options)\n[Test/test]   |     \n[Test/test]   |         # Fix for parameter name changes in mysqlclient v2.1.0\n[Test/test]   |         if MySQLdb.version_info[:2] >= (2, 1):\n[Test/test]   |             if \"db\" in args:\n[Test/test]   |                 args[\"database\"] = args.pop(\"db\")\n[Test/test]   |             if \"passwd\" in args:\n[Test/test]   |                 args[\"password\"] = args.pop(\"passwd\")\n[Test/test]   |     \n[Test/test]   |         self._db = None\n[Test/test]   |         self._db_args = args\n[Test/test]   |     \n[Test/test]   |         self._last_use_time = time.time()\n[Test/test]   | >       self.reconnect()\n[Test/test]   | \n[Test/test]   | memsql/common/database.py:71: \n[Test/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test/test]   | \n[Test/test]   | self = <memsql.common.database.Connection object at 0x7f95ed3bc0a0>\n[Test/test]   | \n[Test/test]   |     def reconnect(self):\n[Test/test]   |         \"\"\"Closes the existing database connection and re-opens it.\"\"\"\n[Test/test]   | >       conn = _mysql.connect(**self._db_args)\n[Test/test]   | E       MySQLdb.OperationalError: (2003, \"Can't connect to MySQL server on '127.0.0.1:3306' (111)\")\n[Test/test]   | \n[Test/test]   | memsql/common/database.py:102: OperationalError\n[Test/test]   | \n[Test/test]   | During handling of the above exception, another exception occurred:\n[Test/test]   | \n[Test/test]   | pool = <memsql.common.connection_pool.ConnectionPool object at 0x7f95ed3bc5e0>\n[Test/test]   | test_key = ('127.0.0.1', 3306, 'root', 'mysql', 'information_schema', None, ...)\n[Test/test]   | db_args = ('127.0.0.1', 3306, 'root', 'mysql', 'information_schema')\n[Test/test]   | \n[Test/test]   |     def test_connection_reuse(pool, test_key, db_args):\n[Test/test]   | >       fairy = pool.connect(*db_args)\n[Test/test]   | \n[Test/test]   | memsql/common/test/test_connection_pool.py:53: \n[Test/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test/test]   | memsql/common/connection_pool.py:54: in connect\n[Test/test]   |     fairy.connect(self._current_version)\n[Test/test]   | memsql/common/connection_pool.py:183: in connect\n[Test/test]   |     self._conn = _connect(\n[Test/test]   | memsql/common/connection_pool.py:132: in wrapped\n[Test/test]   |     self.__handle_connection_failure(e)\n[Test/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test/test]   | \n[Test/test]   | self = <memsql.common.connection_pool._PoolConnectionFairy object at 0x7f95ed3bc100>\n[Test/test]   | e = OperationalError(2003, \"Can't connect to MySQL server on '127.0.0.1:3306' (111)\")\n[Test/test]   | \n[Test/test]   |     def __handle_connection_failure(self, e):\n[Test/test]   |         # expire the connection so we don't return it to the pool accidentally\n[Test/test]   |         self.expire()\n[Test/test]   |     \n[Test/test]   |         # build and raise the new consolidated exception\n[Test/test]   |         message = None\n[Test/test]   |         if isinstance(e, _mysql.OperationalError) or (hasattr(e, 'args') and len(e.args) >= 2):\n[Test/test]   |             err_num = e.args[0]\n[Test/test]   |             message = e.args[1]\n[Test/test]   |         elif hasattr(e, 'errno'):\n[Test/test]   |             err_num = e.errno\n[Test/test]   |         else:\n[Test/test]   |             err_num = errno.ECONNABORTED\n[Test/test]   |     \n[Test/test]   | >       raise PoolConnectionException(err_num, message, self._key)\n[Test/test]   | E       memsql.common.connection_pool.PoolConnectionException: [Errno 2003] Can't connect to MySQL server on '127.0.0.1:3306' (111)\n[Test/test]   | \n[Test/test]   | memsql/common/connection_pool.py:164: PoolConnectionException\n[Test/test]   | __________________ test_cant_checkout_old_fairy_after_restart __________________\n[Test/test]   | \n[Test/test]   | args = ()\n[Test/test]   | kwargs = {'_version': 0, 'database': 'information_schema', 'host': '127.0.0.1', 'options': None, ...}\n[Test/test]   | \n[Test/test]   |     def wrapped(*args, **kwargs):\n[Test/test]   |         try:\n[Test/test]   | >           return fn(*args, **kwargs)\n[Test/test]   | \n[Test/test]   | memsql/common/connection_pool.py:120: \n[Test/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test/test]   | \n[Test/test]   | args = ()\n[Test/test]   | kwargs = {'_version': 0, 'database': 'information_schema', 'host': '127.0.0.1', 'options': None, ...}\n[Test/test]   | \n[Test/test]   |     def connect(*args, **kwargs):\n[Test/test]   | >       return Connection(*args, **kwargs)\n[Test/test]   | \n[Test/test]   | memsql/common/database.py:20: \n[Test/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test/test]   | \n[Test/test]   | self = <memsql.common.database.Connection object at 0x7f95ed343dc0>\n[Test/test]   | host = '127.0.0.1', port = 3306, database = 'information_schema', user = 'root'\n[Test/test]   | password = 'mysql', max_idle_time = 25200, _version = 0, options = None\n[Test/test]   | \n[Test/test]   |     def __init__(self, host, port=3306, database=\"information_schema\", user=None, password=None,\n[Test/test]   |                  max_idle_time=7 * 3600, _version=0, options=None):\n[Test/test]   |         self.max_idle_time = max_idle_time\n[Test/test]   |     \n[Test/test]   |         args = {\n[Test/test]   |             \"db\": database,\n[Test/test]   |             \"conv\": CONVERSIONS\n[Test/test]   |         }\n[Test/test]   |     \n[Test/test]   |         if user is not None:\n[Test/test]   |             args[\"user\"] = user\n[Test/test]   |         if password is not None:\n[Test/test]   |             args[\"passwd\"] = password\n[Test/test]   |     \n[Test/test]   |         args[\"host\"] = host\n[Test/test]   |         args[\"port\"] = int(port)\n[Test/test]   |     \n[Test/test]   |         if options is not None:\n[Test/test]   |             assert isinstance(options, dict), \"Options to database.Connection must be an dictionary of { str: value } pairs.\"\n[Test/test]   |             args.update(options)\n[Test/test]   |     \n[Test/test]   |         # Fix for parameter name changes in mysqlclient v2.1.0\n[Test/test]   |         if MySQLdb.version_info[:2] >= (2, 1):\n[Test/test]   |             if \"db\" in args:\n[Test/test]   |                 args[\"database\"] = args.pop(\"db\")\n[Test/test]   |             if \"passwd\" in args:\n[Test/test]   |                 args[\"password\"] = args.pop(\"passwd\")\n[Test/test]   |     \n[Test/test]   |         self._db = None\n[Test/test]   |         self._db_args = args\n[Test/test]   |     \n[Test/test]   |         self._last_use_time = time.time()\n[Test/test]   | >       self.reconnect()\n[Test/test]   | \n[Test/test]   | memsql/common/database.py:71: \n[Test/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test/test]   | \n[Test/test]   | self = <memsql.common.database.Connection object at 0x7f95ed343dc0>\n[Test/test]   | \n[Test/test]   |     def reconnect(self):\n[Test/test]   |         \"\"\"Closes the existing database connection and re-opens it.\"\"\"\n[Test/test]   | >       conn = _mysql.connect(**self._db_args)\n[Test/test]   | E       MySQLdb.OperationalError: (2003, \"Can't connect to MySQL server on '127.0.0.1:3306' (111)\")\n[Test/test]   | \n[Test/test]   | memsql/common/database.py:102: OperationalError\n[Test/test]   | \n[Test/test]   | During handling of the above exception, another exception occurred:\n[Test/test]   | \n[Test/test]   | pool = <memsql.common.connection_pool.ConnectionPool object at 0x7f95ed303940>\n[Test/test]   | test_key = ('127.0.0.1', 3306, 'root', 'mysql', 'information_schema', None, ...)\n[Test/test]   | db_args = ('127.0.0.1', 3306, 'root', 'mysql', 'information_schema')\n[Test/test]   | \n[Test/test]   |     def test_cant_checkout_old_fairy_after_restart(pool, test_key, db_args):\n[Test/test]   | >       fairy = pool.connect(*db_args)\n[Test/test]   | \n[Test/test]   | memsql/common/test/test_connection_pool.py:66: \n[Test/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test/test]   | memsql/common/connection_pool.py:54: in connect\n[Test/test]   |     fairy.connect(self._current_version)\n[Test/test]   | memsql/common/connection_pool.py:183: in connect\n[Test/test]   |     self._conn = _connect(\n[Test/test]   | memsql/common/connection_pool.py:132: in wrapped\n[Test/test]   |     self.__handle_connection_failure(e)\n[Test/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test/test]   | \n[Test/test]   | self = <memsql.common.connection_pool._PoolConnectionFairy object at 0x7f95ed343940>\n[Test/test]   | e = OperationalError(2003, \"Can't connect to MySQL server on '127.0.0.1:3306' (111)\")\n[Test/test]   | \n[Test/test]   |     def __handle_connection_failure(self, e):\n[Test/test]   |         # expire the connection so we don't return it to the pool accidentally\n[Test/test]   |         self.expire()\n[Test/test]   |     \n[Test/test]   |         # build and raise the new consolidated exception\n[Test/test]   |         message = None\n[Test/test]   |         if isinstance(e, _mysql.OperationalError) or (hasattr(e, 'args') and len(e.args) >= 2):\n[Test/test]   |             err_num = e.args[0]\n[Test/test]   |             message = e.args[1]\n[Test/test]   |         elif hasattr(e, 'errno'):\n[Test/test]   |             err_num = e.errno\n[Test/test]   |         else:\n[Test/test]   |             err_num = errno.ECONNABORTED\n[Test/test]   |     \n[Test/test]   | >       raise PoolConnectionException(err_num, message, self._key)\n[Test/test]   | E       memsql.common.connection_pool.PoolConnectionException: [Errno 2003] Can't connect to MySQL server on '127.0.0.1:3306' (111)\n[Test/test]   | \n[Test/test]   | memsql/common/connection_pool.py:164: PoolConnectionException\n[Test/test]   | __________________ test_cant_checkin_old_fairy_after_restart ___________________\n[Test/test]   | \n[Test/test]   | args = ()\n[Test/test]   | kwargs = {'_version': 0, 'database': 'information_schema', 'host': '127.0.0.1', 'options': None, ...}\n[Test/test]   | \n[Test/test]   |     def wrapped(*args, **kwargs):\n[Test/test]   |         try:\n[Test/test]   | >           return fn(*args, **kwargs)\n[Test/test]   | \n[Test/test]   | memsql/common/connection_pool.py:120: \n[Test/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test/test]   | \n[Test/test]   | args = ()\n[Test/test]   | kwargs = {'_version': 0, 'database': 'information_schema', 'host': '127.0.0.1', 'options': None, ...}\n[Test/test]   | \n[Test/test]   |     def connect(*args, **kwargs):\n[Test/test]   | >       return Connection(*args, **kwargs)\n[Test/test]   | \n[Test/test]   | memsql/common/database.py:20: \n[Test/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test/test]   | \n[Test/test]   | self = <memsql.common.database.Connection object at 0x7f95ed32ab80>\n[Test/test]   | host = '127.0.0.1', port = 3306, database = 'information_schema', user = 'root'\n[Test/test]   | password = 'mysql', max_idle_time = 25200, _version = 0, options = None\n[Test/test]   | \n[Test/test]   |     def __init__(self, host, port=3306, database=\"information_schema\", user=None, password=None,\n[Test/test]   |                  max_idle_time=7 * 3600, _version=0, options=None):\n[Test/test]   |         self.max_idle_time = max_idle_time\n[Test/test]   |     \n[Test/test]   |         args = {\n[Test/test]   |             \"db\": database,\n[Test/test]   |             \"conv\": CONVERSIONS\n[Test/test]   |         }\n[Test/test]   |     \n[Test/test]   |         if user is not None:\n[Test/test]   |             args[\"user\"] = user\n[Test/test]   |         if password is not None:\n[Test/test]   |             args[\"passwd\"] = password\n[Test/test]   |     \n[Test/test]   |         args[\"host\"] = host\n[Test/test]   |         args[\"port\"] = int(port)\n[Test/test]   |     \n[Test/test]   |         if options is not None:\n[Test/test]   |             assert isinstance(options, dict), \"Options to database.Connection must be an dictionary of { str: value } pairs.\"\n[Test/test]   |             args.update(options)\n[Test/test]   |     \n[Test/test]   |         # Fix for parameter name changes in mysqlclient v2.1.0\n[Test/test]   |         if MySQLdb.version_info[:2] >= (2, 1):\n[Test/test]   |             if \"db\" in args:\n[Test/test]   |                 args[\"database\"] = args.pop(\"db\")\n[Test/test]   |             if \"passwd\" in args:\n[Test/test]   |                 args[\"password\"] = args.pop(\"passwd\")\n[Test/test]   |     \n[Test/test]   |         self._db = None\n[Test/test]   |         self._db_args = args\n[Test/test]   |     \n[Test/test]   |         self._last_use_time = time.time()\n[Test/test]   | >       self.reconnect()\n[Test/test]   | \n[Test/test]   | memsql/common/database.py:71: \n[Test/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test/test]   | \n[Test/test]   | self = <memsql.common.database.Connection object at 0x7f95ed32ab80>\n[Test/test]   | \n[Test/test]   |     def reconnect(self):\n[Test/test]   |         \"\"\"Closes the existing database connection and re-opens it.\"\"\"\n[Test/test]   | >       conn = _mysql.connect(**self._db_args)\n[Test/test]   | E       MySQLdb.OperationalError: (2003, \"Can't connect to MySQL server on '127.0.0.1:3306' (111)\")\n[Test/test]   | \n[Test/test]   | memsql/common/database.py:102: OperationalError\n[Test/test]   | \n[Test/test]   | During handling of the above exception, another exception occurred:\n[Test/test]   | \n[Test/test]   | pool = <memsql.common.connection_pool.ConnectionPool object at 0x7f95ed2c0c40>\n[Test/test]   | test_key = ('127.0.0.1', 3306, 'root', 'mysql', 'information_schema', None, ...)\n[Test/test]   | db_args = ('127.0.0.1', 3306, 'root', 'mysql', 'information_schema')\n[Test/test]   | \n[Test/test]   |     def test_cant_checkin_old_fairy_after_restart(pool, test_key, db_args):\n[Test/test]   | >       fairy = pool.connect(*db_args)\n[Test/test]   | \n[Test/test]   | memsql/common/test/test_connection_pool.py:87: \n[Test/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test/test]   | memsql/common/connection_pool.py:54: in connect\n[Test/test]   |     fairy.connect(self._current_version)\n[Test/test]   | memsql/common/connection_pool.py:183: in connect\n[Test/test]   |     self._conn = _connect(\n[Test/test]   | memsql/common/connection_pool.py:132: in wrapped\n[Test/test]   |     self.__handle_connection_failure(e)\n[Test/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test/test]   | \n[Test/test]   | self = <memsql.common.connection_pool._PoolConnectionFairy object at 0x7f95ed32ad60>\n[Test/test]   | e = OperationalError(2003, \"Can't connect to MySQL server on '127.0.0.1:3306' (111)\")\n[Test/test]   | \n[Test/test]   |     def __handle_connection_failure(self, e):\n[Test/test]   |         # expire the connection so we don't return it to the pool accidentally\n[Test/test]   |         self.expire()\n[Test/test]   |     \n[Test/test]   |         # build and raise the new consolidated exception\n[Test/test]   |         message = None\n[Test/test]   |         if isinstance(e, _mysql.OperationalError) or (hasattr(e, 'args') and len(e.args) >= 2):\n[Test/test]   |             err_num = e.args[0]\n[Test/test]   |             message = e.args[1]\n[Test/test]   |         elif hasattr(e, 'errno'):\n[Test/test]   |             err_num = e.errno\n[Test/test]   |         else:\n[Test/test]   |             err_num = errno.ECONNABORTED\n[Test/test]   |     \n[Test/test]   | >       raise PoolConnectionException(err_num, message, self._key)\n[Test/test]   | E       memsql.common.connection_pool.PoolConnectionException: [Errno 2003] Can't connect to MySQL server on '127.0.0.1:3306' (111)\n[Test/test]   | \n[Test/test]   | memsql/common/connection_pool.py:164: PoolConnectionException\n[Test/test]   | _________________________ test_connection_invalidation _________________________\n[Test/test]   | \n[Test/test]   | args = ()\n[Test/test]   | kwargs = {'_version': 0, 'database': 'information_schema', 'host': '127.0.0.1', 'options': None, ...}\n[Test/test]   | \n[Test/test]   |     def wrapped(*args, **kwargs):\n[Test/test]   |         try:\n[Test/test]   | >           return fn(*args, **kwargs)\n[Test/test]   | \n[Test/test]   | memsql/common/connection_pool.py:120: \n[Test/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test/test]   | \n[Test/test]   | args = ()\n[Test/test]   | kwargs = {'_version': 0, 'database': 'information_schema', 'host': '127.0.0.1', 'options': None, ...}\n[Test/test]   | \n[Test/test]   |     def connect(*args, **kwargs):\n[Test/test]   | >       return Connection(*args, **kwargs)\n[Test/test]   | \n[Test/test]   | memsql/common/database.py:20: \n[Test/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test/test]   | \n[Test/test]   | self = <memsql.common.database.Connection object at 0x7f95ed330ca0>\n[Test/test]   | host = '127.0.0.1', port = 3306, database = 'information_schema', user = 'root'\n[Test/test]   | password = 'mysql', max_idle_time = 25200, _version = 0, options = None\n[Test/test]   | \n[Test/test]   |     def __init__(self, host, port=3306, database=\"information_schema\", user=None, password=None,\n[Test/test]   |                  max_idle_time=7 * 3600, _version=0, options=None):\n[Test/test]   |         self.max_idle_time = max_idle_time\n[Test/test]   |     \n[Test/test]   |         args = {\n[Test/test]   |             \"db\": database,\n[Test/test]   |             \"conv\": CONVERSIONS\n[Test/test]   |         }\n[Test/test]   |     \n[Test/test]   |         if user is not None:\n[Test/test]   |             args[\"user\"] = user\n[Test/test]   |         if password is not None:\n[Test/test]   |             args[\"passwd\"] = password\n[Test/test]   |     \n[Test/test]   |         args[\"host\"] = host\n[Test/test]   |         args[\"port\"] = int(port)\n[Test/test]   |     \n[Test/test]   |         if options is not None:\n[Test/test]   |             assert isinstance(options, dict), \"Options to database.Connection must be an dictionary of { str: value } pairs.\"\n[Test/test]   |             args.update(options)\n[Test/test]   |     \n[Test/test]   |         # Fix for parameter name changes in mysqlclient v2.1.0\n[Test/test]   |         if MySQLdb.version_info[:2] >= (2, 1):\n[Test/test]   |             if \"db\" in args:\n[Test/test]   |                 args[\"database\"] = args.pop(\"db\")\n[Test/test]   |             if \"passwd\" in args:\n[Test/test]   |                 args[\"password\"] = args.pop(\"passwd\")\n[Test/test]   |     \n[Test/test]   |         self._db = None\n[Test/test]   |         self._db_args = args\n[Test/test]   |     \n[Test/test]   |         self._last_use_time = time.time()\n[Test/test]   | >       self.reconnect()\n[Test/test]   | \n[Test/test]   | memsql/common/database.py:71: \n[Test/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test/test]   | \n[Test/test]   | self = <memsql.common.database.Connection object at 0x7f95ed330ca0>\n[Test/test]   | \n[Test/test]   |     def reconnect(self):\n[Test/test]   |         \"\"\"Closes the existing database connection and re-opens it.\"\"\"\n[Test/test]   | >       conn = _mysql.connect(**self._db_args)\n[Test/test]   | E       MySQLdb.OperationalError: (2003, \"Can't connect to MySQL server on '127.0.0.1:3306' (111)\")\n[Test/test]   | \n[Test/test]   | memsql/common/database.py:102: OperationalError\n[Test/test]   | \n[Test/test]   | During handling of the above exception, another exception occurred:\n[Test/test]   | \n[Test/test]   | pool = <memsql.common.connection_pool.ConnectionPool object at 0x7f95ed330880>\n[Test/test]   | test_key = ('127.0.0.1', 3306, 'root', 'mysql', 'information_schema', None, ...)\n[Test/test]   | db_args = ('127.0.0.1', 3306, 'root', 'mysql', 'information_schema')\n[Test/test]   | \n[Test/test]   |     def test_connection_invalidation(pool, test_key, db_args):\n[Test/test]   | >       fairy = pool.connect(*db_args)\n[Test/test]   | \n[Test/test]   | memsql/common/test/test_connection_pool.py:102: \n[Test/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test/test]   | memsql/common/connection_pool.py:54: in connect\n[Test/test]   |     fairy.connect(self._current_version)\n[Test/test]   | memsql/common/connection_pool.py:183: in connect\n[Test/test]   |     self._conn = _connect(\n[Test/test]   | memsql/common/connection_pool.py:132: in wrapped\n[Test/test]   |     self.__handle_connection_failure(e)\n[Test/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test/test]   | \n[Test/test]   | self = <memsql.common.connection_pool._PoolConnectionFairy object at 0x7f95ed330d00>\n[Test/test]   | e = OperationalError(2003, \"Can't connect to MySQL server on '127.0.0.1:3306' (111)\")\n[Test/test]   | \n[Test/test]   |     def __handle_connection_failure(self, e):\n[Test/test]   |         # expire the connection so we don't return it to the pool accidentally\n[Test/test]   |         self.expire()\n[Test/test]   |     \n[Test/test]   |         # build and raise the new consolidated exception\n[Test/test]   |         message = None\n[Test/test]   |         if isinstance(e, _mysql.OperationalError) or (hasattr(e, 'args') and len(e.args) >= 2):\n[Test/test]   |             err_num = e.args[0]\n[Test/test]   |             message = e.args[1]\n[Test/test]   |         elif hasattr(e, 'errno'):\n[Test/test]   |             err_num = e.errno\n[Test/test]   |         else:\n[Test/test]   |             err_num = errno.ECONNABORTED\n[Test/test]   |     \n[Test/test]   | >       raise PoolConnectionException(err_num, message, self._key)\n[Test/test]   | E       memsql.common.connection_pool.PoolConnectionException: [Errno 2003] Can't connect to MySQL server on '127.0.0.1:3306' (111)\n[Test/test]   | \n[Test/test]   | memsql/common/connection_pool.py:164: PoolConnectionException\n[Test/test]   | ____________________________ test_connection_close _____________________________\n[Test/test]   | \n[Test/test]   | args = ()\n[Test/test]   | kwargs = {'_version': 0, 'database': 'information_schema', 'host': '127.0.0.1', 'options': None, ...}\n[Test/test]   | \n[Test/test]   |     def wrapped(*args, **kwargs):\n[Test/test]   |         try:\n[Test/test]   | >           return fn(*args, **kwargs)\n[Test/test]   | \n[Test/test]   | memsql/common/connection_pool.py:120: \n[Test/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test/test]   | \n[Test/test]   | args = ()\n[Test/test]   | kwargs = {'_version': 0, 'database': 'information_schema', 'host': '127.0.0.1', 'options': None, ...}\n[Test/test]   | \n[Test/test]   |     def connect(*args, **kwargs):\n[Test/test]   | >       return Connection(*args, **kwargs)\n[Test/test]   | \n[Test/test]   | memsql/common/database.py:20: \n[Test/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test/test]   | \n[Test/test]   | self = <memsql.common.database.Connection object at 0x7f95ed3ce130>\n[Test/test]   | host = '127.0.0.1', port = 3306, database = 'information_schema', user = 'root'\n[Test/test]   | password = 'mysql', max_idle_time = 25200, _version = 0, options = None\n[Test/test]   | \n[Test/test]   |     def __init__(self, host, port=3306, database=\"information_schema\", user=None, password=None,\n[Test/test]   |                  max_idle_time=7 * 3600, _version=0, options=None):\n[Test/test]   |         self.max_idle_time = max_idle_time\n[Test/test]   |     \n[Test/test]   |         args = {\n[Test/test]   |             \"db\": database,\n[Test/test]   |             \"conv\": CONVERSIONS\n[Test/test]   |         }\n[Test/test]   |     \n[Test/test]   |         if user is not None:\n[Test/test]   |             args[\"user\"] = user\n[Test/test]   |         if password is not None:\n[Test/test]   |             args[\"passwd\"] = password\n[Test/test]   |     \n[Test/test]   |         args[\"host\"] = host\n[Test/test]   |         args[\"port\"] = int(port)\n[Test/test]   |     \n[Test/test]   |         if options is not None:\n[Test/test]   |             assert isinstance(options, dict), \"Options to database.Connection must be an dictionary of { str: value } pairs.\"\n[Test/test]   |             args.update(options)\n[Test/test]   |     \n[Test/test]   |         # Fix for parameter name changes in mysqlclient v2.1.0\n[Test/test]   |         if MySQLdb.version_info[:2] >= (2, 1):\n[Test/test]   |             if \"db\" in args:\n[Test/test]   |                 args[\"database\"] = args.pop(\"db\")\n[Test/test]   |             if \"passwd\" in args:\n[Test/test]   |                 args[\"password\"] = args.pop(\"passwd\")\n[Test/test]   |     \n[Test/test]   |         self._db = None\n[Test/test]   |         self._db_args = args\n[Test/test]   |     \n[Test/test]   |         self._last_use_time = time.time()\n[Test/test]   | >       self.reconnect()\n[Test/test]   | \n[Test/test]   | memsql/common/database.py:71: \n[Test/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test/test]   | \n[Test/test]   | self = <memsql.common.database.Connection object at 0x7f95ed3ce130>\n[Test/test]   | \n[Test/test]   |     def reconnect(self):\n[Test/test]   |         \"\"\"Closes the existing database connection and re-opens it.\"\"\"\n[Test/test]   | >       conn = _mysql.connect(**self._db_args)\n[Test/test]   | E       MySQLdb.OperationalError: (2003, \"Can't connect to MySQL server on '127.0.0.1:3306' (111)\")\n[Test/test]   | \n[Test/test]   | memsql/common/database.py:102: OperationalError\n[Test/test]   | \n[Test/test]   | During handling of the above exception, another exception occurred:\n[Test/test]   | \n[Test/test]   | pool = <memsql.common.connection_pool.ConnectionPool object at 0x7f95ed39a940>\n[Test/test]   | db_args = ('127.0.0.1', 3306, 'root', 'mysql', 'information_schema')\n[Test/test]   | \n[Test/test]   |     def test_connection_close(pool, db_args):\n[Test/test]   | >       fairy = pool.connect(*db_args)\n[Test/test]   | \n[Test/test]   | memsql/common/test/test_connection_pool.py:117: \n[Test/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test/test]   | memsql/common/connection_pool.py:54: in connect\n[Test/test]   |     fairy.connect(self._current_version)\n[Test/test]   | memsql/common/connection_pool.py:183: in connect\n[Test/test]   |     self._conn = _connect(\n[Test/test]   | memsql/common/connection_pool.py:132: in wrapped\n[Test/test]   |     self.__handle_connection_failure(e)\n[Test/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test/test]   | \n[Test/test]   | self = <memsql.common.connection_pool._PoolConnectionFairy object at 0x7f95ed3cebe0>\n[Test/test]   | e = OperationalError(2003, \"Can't connect to MySQL server on '127.0.0.1:3306' (111)\")\n[Test/test]   | \n[Test/test]   |     def __handle_connection_failure(self, e):\n[Test/test]   |         # expire the connection so we don't return it to the pool accidentally\n[Test/test]   |         self.expire()\n[Test/test]   |     \n[Test/test]   |         # build and raise the new consolidated exception\n[Test/test]   |         message = None\n[Test/test]   |         if isinstance(e, _mysql.OperationalError) or (hasattr(e, 'args') and len(e.args) >= 2):\n[Test/test]   |             err_num = e.args[0]\n[Test/test]   |             message = e.args[1]\n[Test/test]   |         elif hasattr(e, 'errno'):\n[Test/test]   |             err_num = e.errno\n[Test/test]   |         else:\n[Test/test]   |             err_num = errno.ECONNABORTED\n[Test/test]   |     \n[Test/test]   | >       raise PoolConnectionException(err_num, message, self._key)\n[Test/test]   | E       memsql.common.connection_pool.PoolConnectionException: [Errno 2003] Can't connect to MySQL server on '127.0.0.1:3306' (111)\n[Test/test]   | \n[Test/test]   | memsql/common/connection_pool.py:164: PoolConnectionException\n[Test/test]   | ______________________________ test_fairy_expire _______________________________\n[Test/test]   | \n[Test/test]   | args = ()\n[Test/test]   | kwargs = {'_version': 0, 'database': 'information_schema', 'host': '127.0.0.1', 'options': None, ...}\n[Test/test]   | \n[Test/test]   |     def wrapped(*args, **kwargs):\n[Test/test]   |         try:\n[Test/test]   | >           return fn(*args, **kwargs)\n[Test/test]   | \n[Test/test]   | memsql/common/connection_pool.py:120: \n[Test/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test/test]   | \n[Test/test]   | args = ()\n[Test/test]   | kwargs = {'_version': 0, 'database': 'information_schema', 'host': '127.0.0.1', 'options': None, ...}\n[Test/test]   | \n[Test/test]   |     def connect(*args, **kwargs):\n[Test/test]   | >       return Connection(*args, **kwargs)\n[Test/test]   | \n[Test/test]   | memsql/common/database.py:20: \n[Test/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test/test]   | \n[Test/test]   | self = <memsql.common.database.Connection object at 0x7f95ed340640>\n[Test/test]   | host = '127.0.0.1', port = 3306, database = 'information_schema', user = 'root'\n[Test/test]   | password = 'mysql', max_idle_time = 25200, _version = 0, options = None\n[Test/test]   | \n[Test/test]   |     def __init__(self, host, port=3306, database=\"information_schema\", user=None, password=None,\n[Test/test]   |                  max_idle_time=7 * 3600, _version=0, options=None):\n[Test/test]   |         self.max_idle_time = max_idle_time\n[Test/test]   |     \n[Test/test]   |         args = {\n[Test/test]   |             \"db\": database,\n[Test/test]   |             \"conv\": CONVERSIONS\n[Test/test]   |         }\n[Test/test]   |     \n[Test/test]   |         if user is not None:\n[Test/test]   |             args[\"user\"] = user\n[Test/test]   |         if password is not None:\n[Test/test]   |             args[\"passwd\"] = password\n[Test/test]   |     \n[Test/test]   |         args[\"host\"] = host\n[Test/test]   |         args[\"port\"] = int(port)\n[Test/test]   |     \n[Test/test]   |         if options is not None:\n[Test/test]   |             assert isinstance(options, dict), \"Options to database.Connection must be an dictionary of { str: value } pairs.\"\n[Test/test]   |             args.update(options)\n[Test/test]   |     \n[Test/test]   |         # Fix for parameter name changes in mysqlclient v2.1.0\n[Test/test]   |         if MySQLdb.version_info[:2] >= (2, 1):\n[Test/test]   |             if \"db\" in args:\n[Test/test]   |                 args[\"database\"] = args.pop(\"db\")\n[Test/test]   |             if \"passwd\" in args:\n[Test/test]   |                 args[\"password\"] = args.pop(\"passwd\")\n[Test/test]   |     \n[Test/test]   |         self._db = None\n[Test/test]   |         self._db_args = args\n[Test/test]   |     \n[Test/test]   |         self._last_use_time = time.time()\n[Test/test]   | >       self.reconnect()\n[Test/test]   | \n[Test/test]   | memsql/common/database.py:71: \n[Test/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test/test]   | \n[Test/test]   | self = <memsql.common.database.Connection object at 0x7f95ed340640>\n[Test/test]   | \n[Test/test]   |     def reconnect(self):\n[Test/test]   |         \"\"\"Closes the existing database connection and re-opens it.\"\"\"\n[Test/test]   | >       conn = _mysql.connect(**self._db_args)\n[Test/test]   | E       MySQLdb.OperationalError: (2003, \"Can't connect to MySQL server on '127.0.0.1:3306' (111)\")\n[Test/test]   | \n[Test/test]   | memsql/common/database.py:102: OperationalError\n[Test/test]   | \n[Test/test]   | During handling of the above exception, another exception occurred:\n[Test/test]   | \n[Test/test]   | pool = <memsql.common.connection_pool.ConnectionPool object at 0x7f95ed340cd0>\n[Test/test]   | test_key = ('127.0.0.1', 3306, 'root', 'mysql', 'information_schema', None, ...)\n[Test/test]   | db_args = ('127.0.0.1', 3306, 'root', 'mysql', 'information_schema')\n[Test/test]   | \n[Test/test]   |     def test_fairy_expire(pool, test_key, db_args):\n[Test/test]   | >       fairy = pool.connect(*db_args)\n[Test/test]   | \n[Test/test]   | memsql/common/test/test_connection_pool.py:134: \n[Test/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test/test]   | memsql/common/connection_pool.py:54: in connect\n[Test/test]   |     fairy.connect(self._current_version)\n[Test/test]   | memsql/common/connection_pool.py:183: in connect\n[Test/test]   |     self._conn = _connect(\n[Test/test]   | memsql/common/connection_pool.py:132: in wrapped\n[Test/test]   |     self.__handle_connection_failure(e)\n[Test/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test/test]   | \n[Test/test]   | self = <memsql.common.connection_pool._PoolConnectionFairy object at 0x7f95ed340700>\n[Test/test]   | e = OperationalError(2003, \"Can't connect to MySQL server on '127.0.0.1:3306' (111)\")\n[Test/test]   | \n[Test/test]   |     def __handle_connection_failure(self, e):\n[Test/test]   |         # expire the connection so we don't return it to the pool accidentally\n[Test/test]   |         self.expire()\n[Test/test]   |     \n[Test/test]   |         # build and raise the new consolidated exception\n[Test/test]   |         message = None\n[Test/test]   |         if isinstance(e, _mysql.OperationalError) or (hasattr(e, 'args') and len(e.args) >= 2):\n[Test/test]   |             err_num = e.args[0]\n[Test/test]   |             message = e.args[1]\n[Test/test]   |         elif hasattr(e, 'errno'):\n[Test/test]   |             err_num = e.errno\n[Test/test]   |         else:\n[Test/test]   |             err_num = errno.ECONNABORTED\n[Test/test]   |     \n[Test/test]   | >       raise PoolConnectionException(err_num, message, self._key)\n[Test/test]   | E       memsql.common.connection_pool.PoolConnectionException: [Errno 2003] Can't connect to MySQL server on '127.0.0.1:3306' (111)\n[Test/test]   | \n[Test/test]   | memsql/common/connection_pool.py:164: PoolConnectionException\n[Test/test]   | ___________________________ test_exception_remapping ___________________________\n[Test/test]   | \n[Test/test]   | args = ()\n[Test/test]   | kwargs = {'_version': 0, 'database': 'information_schema', 'host': '127.0.0.1', 'options': None, ...}\n[Test/test]   | \n[Test/test]   |     def wrapped(*args, **kwargs):\n[Test/test]   |         try:\n[Test/test]   | >           return fn(*args, **kwargs)\n[Test/test]   | \n[Test/test]   | memsql/common/connection_pool.py:120: \n[Test/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test/test]   | \n[Test/test]   | args = ()\n[Test/test]   | kwargs = {'_version': 0, 'database': 'information_schema', 'host': '127.0.0.1', 'options': None, ...}\n[Test/test]   | \n[Test/test]   |     def connect(*args, **kwargs):\n[Test/test]   | >       return Connection(*args, **kwargs)\n[Test/test]   | \n[Test/test]   | memsql/common/database.py:20: \n[Test/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test/test]   | \n[Test/test]   | self = <memsql.common.database.Connection object at 0x7f95ed3323d0>\n[Test/test]   | host = '127.0.0.1', port = 3306, database = 'information_schema', user = 'root'\n[Test/test]   | password = 'mysql', max_idle_time = 25200, _version = 0, options = None\n[Test/test]   | \n[Test/test]   |     def __init__(self, host, port=3306, database=\"information_schema\", user=None, password=None,\n[Test/test]   |                  max_idle_time=7 * 3600, _version=0, options=None):\n[Test/test]   |         self.max_idle_time = max_idle_time\n[Test/test]   |     \n[Test/test]   |         args = {\n[Test/test]   |             \"db\": database,\n[Test/test]   |             \"conv\": CONVERSIONS\n[Test/test]   |         }\n[Test/test]   |     \n[Test/test]   |         if user is not None:\n[Test/test]   |             args[\"user\"] = user\n[Test/test]   |         if password is not None:\n[Test/test]   |             args[\"passwd\"] = password\n[Test/test]   |     \n[Test/test]   |         args[\"host\"] = host\n[Test/test]   |         args[\"port\"] = int(port)\n[Test/test]   |     \n[Test/test]   |         if options is not None:\n[Test/test]   |             assert isinstance(options, dict), \"Options to database.Connection must be an dictionary of { str: value } pairs.\"\n[Test/test]   |             args.update(options)\n[Test/test]   |     \n[Test/test]   |         # Fix for parameter name changes in mysqlclient v2.1.0\n[Test/test]   |         if MySQLdb.version_info[:2] >= (2, 1):\n[Test/test]   |             if \"db\" in args:\n[Test/test]   |                 args[\"database\"] = args.pop(\"db\")\n[Test/test]   |             if \"passwd\" in args:\n[Test/test]   |                 args[\"password\"] = args.pop(\"passwd\")\n[Test/test]   |     \n[Test/test]   |         self._db = None\n[Test/test]   |         self._db_args = args\n[Test/test]   |     \n[Test/test]   |         self._last_use_time = time.time()\n[Test/test]   | >       self.reconnect()\n[Test/test]   | \n[Test/test]   | memsql/common/database.py:71: \n[Test/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test/test]   | \n[Test/test]   | self = <memsql.common.database.Connection object at 0x7f95ed3323d0>\n[Test/test]   | \n[Test/test]   |     def reconnect(self):\n[Test/test]   |         \"\"\"Closes the existing database connection and re-opens it.\"\"\"\n[Test/test]   | >       conn = _mysql.connect(**self._db_args)\n[Test/test]   | E       MySQLdb.OperationalError: (2003, \"Can't connect to MySQL server on '127.0.0.1:3306' (111)\")\n[Test/test]   | \n[Test/test]   | memsql/common/database.py:102: OperationalError\n[Test/test]   | \n[Test/test]   | During handling of the above exception, another exception occurred:\n[Test/test]   | \n[Test/test]   | pool = <memsql.common.connection_pool.ConnectionPool object at 0x7f95ed3dd070>\n[Test/test]   | db_args = ('127.0.0.1', 3306, 'root', 'mysql', 'information_schema')\n[Test/test]   | test_db_database = 'memsql_python_tests'\n[Test/test]   | \n[Test/test]   |     def test_exception_remapping(pool, db_args, test_db_database):\n[Test/test]   |         from memsql.common.connection_pool import PoolConnectionException\n[Test/test]   |         from memsql.common import errorcodes\n[Test/test]   |         from MySQLdb import _mysql\n[Test/test]   |     \n[Test/test]   |         # check that some operationalerrors get mapped to PoolConnectionException\n[Test/test]   |         bad_db_args = db_args[:-1] + (\"aasjdkfjdoes_not_exist\",)\n[Test/test]   |         fairy = None\n[Test/test]   |         with pytest.raises(PoolConnectionException):\n[Test/test]   |             fairy = pool.connect(*bad_db_args)\n[Test/test]   |         assert fairy is None\n[Test/test]   |     \n[Test/test]   |         # other programmer errors should not be mapped\n[Test/test]   | >       fairy = pool.connect(*db_args)\n[Test/test]   | \n[Test/test]   | memsql/common/test/test_connection_pool.py:216: \n[Test/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test/test]   | memsql/common/connection_pool.py:54: in connect\n[Test/test]   |     fairy.connect(self._current_version)\n[Test/test]   | memsql/common/connection_pool.py:183: in connect\n[Test/test]   |     self._conn = _connect(\n[Test/test]   | memsql/common/connection_pool.py:132: in wrapped\n[Test/test]   |     self.__handle_connection_failure(e)\n[Test/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test/test]   | \n[Test/test]   | self = <memsql.common.connection_pool._PoolConnectionFairy object at 0x7f95ed33b550>\n[Test/test]   | e = OperationalError(2003, \"Can't connect to MySQL server on '127.0.0.1:3306' (111)\")\n[Test/test]   | \n[Test/test]   |     def __handle_connection_failure(self, e):\n[Test/test]   |         # expire the connection so we don't return it to the pool accidentally\n[Test/test]   |         self.expire()\n[Test/test]   |     \n[Test/test]   |         # build and raise the new consolidated exception\n[Test/test]   |         message = None\n[Test/test]   |         if isinstance(e, _mysql.OperationalError) or (hasattr(e, 'args') and len(e.args) >= 2):\n[Test/test]   |             err_num = e.args[0]\n[Test/test]   |             message = e.args[1]\n[Test/test]   |         elif hasattr(e, 'errno'):\n[Test/test]   |             err_num = e.errno\n[Test/test]   |         else:\n[Test/test]   |             err_num = errno.ECONNABORTED\n[Test/test]   |     \n[Test/test]   | >       raise PoolConnectionException(err_num, message, self._key)\n[Test/test]   | E       memsql.common.connection_pool.PoolConnectionException: [Errno 2003] Can't connect to MySQL server on '127.0.0.1:3306' (111)\n[Test/test]   | \n[Test/test]   | memsql/common/connection_pool.py:164: PoolConnectionException\n[Test/test]   | __________________________________ test_size ___________________________________\n[Test/test]   | \n[Test/test]   | args = ()\n[Test/test]   | kwargs = {'_version': 0, 'database': 'information_schema', 'host': '127.0.0.1', 'options': None, ...}\n[Test/test]   | \n[Test/test]   |     def wrapped(*args, **kwargs):\n[Test/test]   |         try:\n[Test/test]   | >           return fn(*args, **kwargs)\n[Test/test]   | \n[Test/test]   | memsql/common/connection_pool.py:120: \n[Test/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test/test]   | \n[Test/test]   | args = ()\n[Test/test]   | kwargs = {'_version': 0, 'database': 'information_schema', 'host': '127.0.0.1', 'options': None, ...}\n[Test/test]   | \n[Test/test]   |     def connect(*args, **kwargs):\n[Test/test]   | >       return Connection(*args, **kwargs)\n[Test/test]   | \n[Test/test]   | memsql/common/database.py:20: \n[Test/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test/test]   | \n[Test/test]   | self = <memsql.common.database.Connection object at 0x7f95ed35bfa0>\n[Test/test]   | host = '127.0.0.1', port = 3306, database = 'information_schema', user = 'root'\n[Test/test]   | password = 'mysql', max_idle_time = 25200, _version = 0, options = None\n[Test/test]   | \n[Test/test]   |     def __init__(self, host, port=3306, database=\"information_schema\", user=None, password=None,\n[Test/test]   |                  max_idle_time=7 * 3600, _version=0, options=None):\n[Test/test]   |         self.max_idle_time = max_idle_time\n[Test/test]   |     \n[Test/test]   |         args = {\n[Test/test]   |             \"db\": database,\n[Test/test]   |             \"conv\": CONVERSIONS\n[Test/test]   |         }\n[Test/test]   |     \n[Test/test]   |         if user is not None:\n[Test/test]   |             args[\"user\"] = user\n[Test/test]   |         if password is not None:\n[Test/test]   |             args[\"passwd\"] = password\n[Test/test]   |     \n[Test/test]   |         args[\"host\"] = host\n[Test/test]   |         args[\"port\"] = int(port)\n[Test/test]   |     \n[Test/test]   |         if options is not None:\n[Test/test]   |             assert isinstance(options, dict), \"Options to database.Connection must be an dictionary of { str: value } pairs.\"\n[Test/test]   |             args.update(options)\n[Test/test]   |     \n[Test/test]   |         # Fix for parameter name changes in mysqlclient v2.1.0\n[Test/test]   |         if MySQLdb.version_info[:2] >= (2, 1):\n[Test/test]   |             if \"db\" in args:\n[Test/test]   |                 args[\"database\"] = args.pop(\"db\")\n[Test/test]   |             if \"passwd\" in args:\n[Test/test]   |                 args[\"password\"] = args.pop(\"passwd\")\n[Test/test]   |     \n[Test/test]   |         self._db = None\n[Test/test]   |         self._db_args = args\n[Test/test]   |     \n[Test/test]   |         self._last_use_time = time.time()\n[Test/test]   | >       self.reconnect()\n[Test/test]   | \n[Test/test]   | memsql/common/database.py:71: \n[Test/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test/test]   | \n[Test/test]   | self = <memsql.common.database.Connection object at 0x7f95ed35bfa0>\n[Test/test]   | \n[Test/test]   |     def reconnect(self):\n[Test/test]   |         \"\"\"Closes the existing database connection and re-opens it.\"\"\"\n[Test/test]   | >       conn = _mysql.connect(**self._db_args)\n[Test/test]   | E       MySQLdb.OperationalError: (2003, \"Can't connect to MySQL server on '127.0.0.1:3306' (111)\")\n[Test/test]   | \n[Test/test]   | memsql/common/database.py:102: OperationalError\n[Test/test]   | \n[Test/test]   | During handling of the above exception, another exception occurred:\n[Test/test]   | \n[Test/test]   | pool = <memsql.common.connection_pool.ConnectionPool object at 0x7f95ed3432b0>\n[Test/test]   | test_key = ('127.0.0.1', 3306, 'root', 'mysql', 'information_schema', None, ...)\n[Test/test]   | db_args = ('127.0.0.1', 3306, 'root', 'mysql', 'information_schema')\n[Test/test]   | \n[Test/test]   |     def test_size(pool, test_key, db_args):\n[Test/test]   |         assert pool.size() == 0\n[Test/test]   |     \n[Test/test]   | >       fairy = pool.connect(*db_args)\n[Test/test]   | \n[Test/test]   | memsql/common/test/test_connection_pool.py:231: \n[Test/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test/test]   | memsql/common/connection_pool.py:54: in connect\n[Test/test]   |     fairy.connect(self._current_version)\n[Test/test]   | memsql/common/connection_pool.py:183: in connect\n[Test/test]   |     self._conn = _connect(\n[Test/test]   | memsql/common/connection_pool.py:132: in wrapped\n[Test/test]   |     self.__handle_connection_failure(e)\n[Test/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test/test]   | \n[Test/test]   | self = <memsql.common.connection_pool._PoolConnectionFairy object at 0x7f95ed35b1f0>\n[Test/test]   | e = OperationalError(2003, \"Can't connect to MySQL server on '127.0.0.1:3306' (111)\")\n[Test/test]   | \n[Test/test]   |     def __handle_connection_failure(self, e):\n[Test/test]   |         # expire the connection so we don't return it to the pool accidentally\n[Test/test]   |         self.expire()\n[Test/test]   |     \n[Test/test]   |         # build and raise the new consolidated exception\n[Test/test]   |         message = None\n[Test/test]   |         if isinstance(e, _mysql.OperationalError) or (hasattr(e, 'args') and len(e.args) >= 2):\n[Test/test]   |             err_num = e.args[0]\n[Test/test]   |             message = e.args[1]\n[Test/test]   |         elif hasattr(e, 'errno'):\n[Test/test]   |             err_num = e.errno\n[Test/test]   |         else:\n[Test/test]   |             err_num = errno.ECONNABORTED\n[Test/test]   |     \n[Test/test]   | >       raise PoolConnectionException(err_num, message, self._key)\n[Test/test]   | E       memsql.common.connection_pool.PoolConnectionException: [Errno 2003] Can't connect to MySQL server on '127.0.0.1:3306' (111)\n[Test/test]   | \n[Test/test]   | memsql/common/connection_pool.py:164: PoolConnectionException\n[Test/test]   | =========================== short test summary info ============================\n[Test/test]   | FAILED memsql/common/test/test_connection_pool.py::test_checkout - memsql.common.connection_pool.PoolConnectionException: [Errno 2003] Can't connect to MySQL server on '127.0.0.1:3306' (111)\n[Test/test]   | FAILED memsql/common/test/test_connection_pool.py::test_connection_reuse - memsql.common.connection_pool.PoolConnectionException: [Errno 2003] Can't connect to MySQL server on '127.0.0.1:3306' (111)\n[Test/test]   | FAILED memsql/common/test/test_connection_pool.py::test_cant_checkout_old_fairy_after_restart - memsql.common.connection_pool.PoolConnectionException: [Errno 2003] Can't connect to MySQL server on '127.0.0.1:3306' (111)\n[Test/test]   | FAILED memsql/common/test/test_connection_pool.py::test_cant_checkin_old_fairy_after_restart - memsql.common.connection_pool.PoolConnectionException: [Errno 2003] Can't connect to MySQL server on '127.0.0.1:3306' (111)\n[Test/test]   | FAILED memsql/common/test/test_connection_pool.py::test_connection_invalidation - memsql.common.connection_pool.PoolConnectionException: [Errno 2003] Can't connect to MySQL server on '127.0.0.1:3306' (111)\n[Test/test]   | FAILED memsql/common/test/test_connection_pool.py::test_connection_close - memsql.common.connection_pool.PoolConnectionException: [Errno 2003] Can't connect to MySQL server on '127.0.0.1:3306' (111)\n[Test/test]   | FAILED memsql/common/test/test_connection_pool.py::test_fairy_expire - memsql.common.connection_pool.PoolConnectionException: [Errno 2003] Can't connect to MySQL server on '127.0.0.1:3306' (111)\n[Test/test]   | FAILED memsql/common/test/test_connection_pool.py::test_exception_remapping - memsql.common.connection_pool.PoolConnectionException: [Errno 2003] Can't connect to MySQL server on '127.0.0.1:3306' (111)\n[Test/test]   | FAILED memsql/common/test/test_connection_pool.py::test_size - memsql.common.connection_pool.PoolConnectionException: [Errno 2003] Can't connect to MySQL server on '127.0.0.1:3306' (111)\n[Test/test]   | ERROR memsql/common/test/test_connection_pool.py::TestQueries::test_insert - MySQLdb.OperationalError: (2003, \"Can't connect to MySQL server on '127.0.0.1:3306' (111)\")\n[Test/test]   | ERROR memsql/common/test/test_connection_pool.py::TestQueries::test_insert_qb - MySQLdb.OperationalError: (2003, \"Can't connect to MySQL server on '127.0.0.1:3306' (111)\")\n[Test/test]   | ERROR memsql/common/test/test_connection_pool.py::TestQueries::test_select - MySQLdb.OperationalError: (2003, \"Can't connect to MySQL server on '127.0.0.1:3306' (111)\")\n[Test/test]   | ERROR memsql/common/test/test_connection_pool.py::TestQueries::test_unicode - MySQLdb.OperationalError: (2003, \"Can't connect to MySQL server on '127.0.0.1:3306' (111)\")\n[Test/test]   | ERROR memsql/common/test/test_connection_pool.py::TestQueries::test_queryparams - MySQLdb.OperationalError: (2003, \"Can't connect to MySQL server on '127.0.0.1:3306' (111)\")\n[Test/test]   | ERROR memsql/common/test/test_connection_pool.py::TestQueries::test_advanced_params - MySQLdb.OperationalError: (2003, \"Can't connect to MySQL server on '127.0.0.1:3306' (111)\")\n[Test/test]   | ERROR memsql/common/test/test_connection_pool.py::TestQueries::test_kwargs - MySQLdb.OperationalError: (2003, \"Can't connect to MySQL server on '127.0.0.1:3306' (111)\")\n[Test/test]   | ERROR memsql/common/test/test_connection_pool.py::TestQueries::test_kwargs_all - MySQLdb.OperationalError: (2003, \"Can't connect to MySQL server on '127.0.0.1:3306' (111)\")\n[Test/test]   | ERROR memsql/common/test/test_connection_pool.py::TestQueries::test_kwparams_exclusive - MySQLdb.OperationalError: (2003, \"Can't connect to MySQL server on '127.0.0.1:3306' (111)\")\n[Test/test]   | ERROR memsql/common/test/test_connection_pool.py::TestQueries::test_single_format - MySQLdb.OperationalError: (2003, \"Can't connect to MySQL server on '127.0.0.1:3306' (111)\")\n[Test/test]   | ERROR memsql/common/test/test_connection_pool.py::TestQueries::test_ensure_connected - MySQLdb.OperationalError: (2003, \"Can't connect to MySQL server on '127.0.0.1:3306' (111)\")\n[Test/test]   | ERROR memsql/common/test/test_connection_pool.py::test_checkin - memsql.common.connection_pool.PoolConnectionException: [Errno 2003] Can't connect to MySQL server on '127.0.0.1:3306' (111)\n[Test/test]   | ERROR memsql/common/test/test_connection_pool.py::test_connection_info - memsql.common.connection_pool.PoolConnectionException: [Errno 2003] Can't connect to MySQL server on '127.0.0.1:3306' (111)\n[Test/test]   | ERROR memsql/common/test/test_connection_pool.py::test_fairy_reconnect - memsql.common.connection_pool.PoolConnectionException: [Errno 2003] Can't connect to MySQL server on '127.0.0.1:3306' (111)\n[Test/test]   | ERROR memsql/common/test/test_connection_pool.py::test_fairy_queries - memsql.common.connection_pool.PoolConnectionException: [Errno 2003] Can't connect to MySQL server on '127.0.0.1:3306' (111)\n[Test/test]   | ERROR memsql/common/test/test_connection_pool.py::test_fairy_query - memsql.common.connection_pool.PoolConnectionException: [Errno 2003] Can't connect to MySQL server on '127.0.0.1:3306' (111)\n[Test/test]   | ERROR memsql/common/test/test_connection_pool.py::test_fairy_get - memsql.common.connection_pool.PoolConnectionException: [Errno 2003] Can't connect to MySQL server on '127.0.0.1:3306' (111)\n[Test/test]   | ERROR memsql/common/test/test_connection_pool.py::test_fairy_execute - memsql.common.connection_pool.PoolConnectionException: [Errno 2003] Can't connect to MySQL server on '127.0.0.1:3306' (111)\n[Test/test]   | ERROR memsql/common/test/test_connection_pool.py::test_fairy_execute_lastrowid - memsql.common.connection_pool.PoolConnectionException: [Errno 2003] Can't connect to MySQL server on '127.0.0.1:3306' (111)\n[Test/test]   | ERROR memsql/common/test/test_connection_pool.py::test_sql_errors - memsql.common.connection_pool.PoolConnectionException: [Errno 2003] Can't connect to MySQL server on '127.0.0.1:3306' (111)\n[Test/test]   | ERROR memsql/common/test/test_database_adapters.py::test_connection_open - MySQLdb.OperationalError: (2003, \"Can't connect to MySQL server on '127.0.0.1:3306' (111)\")\n[Test/test]   | ERROR memsql/common/test/test_database_adapters.py::test_connection_close - MySQLdb.OperationalError: (2003, \"Can't connect to MySQL server on '127.0.0.1:3306' (111)\")\n[Test/test]   | ERROR memsql/common/test/test_database_adapters.py::test_reconnect - MySQLdb.OperationalError: (2003, \"Can't connect to MySQL server on '127.0.0.1:3306' (111)\")\n[Test/test]   | ERROR memsql/common/test/test_database_adapters.py::test_query - MySQLdb.OperationalError: (2003, \"Can't connect to MySQL server on '127.0.0.1:3306' (111)\")\n[Test/test]   | ERROR memsql/common/test/test_database_adapters.py::test_ping - MySQLdb.OperationalError: (2003, \"Can't connect to MySQL server on '127.0.0.1:3306' (111)\")\n[Test/test]   | ERROR memsql/common/test/test_database_adapters.py::test_thread_id - MySQLdb.OperationalError: (2003, \"Can't connect to MySQL server on '127.0.0.1:3306' (111)\")\n[Test/test]   | ERROR memsql/common/test/test_database_adapters.py::TestQueries::test_insert - MySQLdb.OperationalError: (2003, \"Can't connect to MySQL server on '127.0.0.1:3306' (111)\")\n[Test/test]   | ERROR memsql/common/test/test_database_adapters.py::TestQueries::test_insert_qb - MySQLdb.OperationalError: (2003, \"Can't connect to MySQL server on '127.0.0.1:3306' (111)\")\n[Test/test]   | ERROR memsql/common/test/test_database_adapters.py::TestQueries::test_select - MySQLdb.OperationalError: (2003, \"Can't connect to MySQL server on '127.0.0.1:3306' (111)\")\n[Test/test]   | ERROR memsql/common/test/test_database_adapters.py::TestQueries::test_unicode - MySQLdb.OperationalError: (2003, \"Can't connect to MySQL server on '127.0.0.1:3306' (111)\")\n[Test/test]   | ERROR memsql/common/test/test_database_adapters.py::TestQueries::test_queryparams - MySQLdb.OperationalError: (2003, \"Can't connect to MySQL server on '127.0.0.1:3306' (111)\")\n[Test/test]   | ERROR memsql/common/test/test_database_adapters.py::TestQueries::test_advanced_params - MySQLdb.OperationalError: (2003, \"Can't connect to MySQL server on '127.0.0.1:3306' (111)\")\n[Test/test]   | ERROR memsql/common/test/test_database_adapters.py::TestQueries::test_kwargs - MySQLdb.OperationalError: (2003, \"Can't connect to MySQL server on '127.0.0.1:3306' (111)\")\n[Test/test]   | ERROR memsql/common/test/test_database_adapters.py::TestQueries::test_kwargs_all - MySQLdb.OperationalError: (2003, \"Can't connect to MySQL server on '127.0.0.1:3306' (111)\")\n[Test/test]   | ERROR memsql/common/test/test_database_adapters.py::TestQueries::test_kwparams_exclusive - MySQLdb.OperationalError: (2003, \"Can't connect to MySQL server on '127.0.0.1:3306' (111)\")\n[Test/test]   | ERROR memsql/common/test/test_database_adapters.py::TestQueries::test_single_format - MySQLdb.OperationalError: (2003, \"Can't connect to MySQL server on '127.0.0.1:3306' (111)\")\n[Test/test]   | ERROR memsql/common/test/test_database_adapters.py::TestQueries::test_ensure_connected - MySQLdb.OperationalError: (2003, \"Can't connect to MySQL server on '127.0.0.1:3306' (111)\")\n[Test/test]   | ==================== 9 failed, 8 passed, 37 errors in 4.93s ====================\n[Test/test]   \u274c  Failure - Main Run tests\n[Test/test] exitcode '1': failure\n[Test/test] \ud83c\udfc1  Job failed\n",
    "actions_stderr": "Error: Job 'test' failed\n"
}