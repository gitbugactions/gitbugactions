{
    "repository": "thumbor/libthumbor",
    "clone_url": "https://github.com/thumbor/libthumbor.git",
    "timestamp": "2023-05-29T14:10:36.658343Z",
    "clone_success": true,
    "number of actions": 4,
    "number_of_test_actions": 1,
    "actions_successful": false,
    "actions_stdout": "[build/build] \ud83d\ude80  Start image=crawlergpt:latest\n[build/build]   \ud83d\udc33  docker pull image=crawlergpt:latest platform= username= forcePull=false\n[build/build]   \ud83d\udc33  docker create image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[build/build]   \ud83d\udc33  docker run image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[build/build]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/thumbor-libthumbor] user=0 workdir=\n[build/build]   \u2601  git clone 'https://github.com/actions/setup-python' # ref=v3\n[build/build]   \u2601  git clone 'https://github.com/snok/install-poetry' # ref=v1\n[build/build] \u2b50 Run Pre Install Poetry\n[build/build]   \u2705  Success - Pre Install Poetry\n[build/build]   \u2601  git clone 'https://github.com/actions/cache' # ref=v2\n[build/build]   \u2601  git clone 'https://github.com/coverallsapp/github-action' # ref=1.1.3\n[build/build] \ud83e\uddea  Matrix: map[python-version:3.7]\n[build/build] \u2b50 Run Main actions/checkout@v3\n[build/build]   \u2705  Success - Main actions/checkout@v3\n[build/build] \u2b50 Run Main Set up Python\n[build/build]   \ud83d\udc33  docker cp src=/home/andre-silva/.cache/act/actions-setup-python@v3/ dst=/var/run/act/actions/actions-setup-python@v3/\n[build/build]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /var/run/act/actions/actions-setup-python@v3/] user=0 workdir=\n[build/build]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/actions-setup-python@v3/dist/setup/index.js] user= workdir=\n[build/build]   \ud83d\udcac  ::debug::Semantic version spec of 3.7 is 3.7\n[build/build]   \ud83d\udcac  ::debug::isExplicit: \n[build/build]   \ud83d\udcac  ::debug::explicit? false\n[build/build]   \ud83d\udcac  ::debug::isExplicit: 2.7.18\n[build/build]   \ud83d\udcac  ::debug::explicit? true\n[build/build]   \ud83d\udcac  ::debug::isExplicit: 3.5.10\n[build/build]   \ud83d\udcac  ::debug::explicit? true\n[build/build]   \ud83d\udcac  ::debug::isExplicit: 3.6.14\n[build/build]   \ud83d\udcac  ::debug::explicit? true\n[build/build]   \ud83d\udcac  ::debug::isExplicit: 3.7.11\n[build/build]   \ud83d\udcac  ::debug::explicit? true\n[build/build]   \ud83d\udcac  ::debug::isExplicit: 3.8.11\n[build/build]   \ud83d\udcac  ::debug::explicit? true\n[build/build]   \ud83d\udcac  ::debug::isExplicit: 3.9.6\n[build/build]   \ud83d\udcac  ::debug::explicit? true\n[build/build]   \ud83d\udcac  ::debug::evaluating 6 versions\n[build/build]   \ud83d\udcac  ::debug::matched: 3.7.11\n[build/build]   \ud83d\udcac  ::debug::checking cache: /opt/hostedtoolcache/Python/3.7.11/x64\n[build/build]   \ud83d\udcac  ::debug::Found tool in cache Python 3.7.11 x64\n[build/build]   | Successfully setup CPython (3.7.11)\n[build/build]   \u2753 add-matcher /run/act/actions/actions-setup-python@v3/.github/python.json\n[build/build]   \u2705  Success - Main Set up Python\n[build/build]   \u2699  ::set-env:: pythonLocation=/opt/hostedtoolcache/Python/3.7.11/x64\n[build/build]   \u2699  ::set-env:: LD_LIBRARY_PATH=/opt/hostedtoolcache/Python/3.7.11/x64/lib\n[build/build]   \u2699  ::set-output:: python-version=3.7.11\n[build/build]   \u2699  ::add-path:: /opt/hostedtoolcache/Python/3.7.11/x64\n[build/build]   \u2699  ::add-path:: /opt/hostedtoolcache/Python/3.7.11/x64/bin\n[build/build] \u2b50 Run Main Install Poetry\n[build/build]   \ud83d\udc33  docker cp src=/home/andre-silva/.cache/act/snok-install-poetry@v1/ dst=/var/run/act/actions/snok-install-poetry@v1/\n[build/build]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /var/run/act/actions/snok-install-poetry@v1/] user=0 workdir=\n[build/build] \u2b50 Run Main Install and configure Poetry\n[build/build]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/2-composite-0.sh] user= workdir=\n[build/build]   | \n[build/build]   | \u001b[33mSetting Poetry installation path as /home/runneradmin/.local\u001b[0m\n[build/build]   | \n[build/build]   | \u001b[33mInstalling Poetry \ud83d\udc77\u001b[0m\n[build/build]   | \n[build/build]   | Retrieving Poetry metadata\n[build/build]   | \n[build/build]   | # Welcome to Poetry!\n[build/build]   | \n[build/build]   | This will download and install the latest version of Poetry,\n[build/build]   | a dependency and package manager for Python.\n[build/build]   | \n[build/build]   | It will add the `poetry` command to Poetry's bin directory, located at:\n[build/build]   | \n[build/build]   | /home/runneradmin/.local/bin\n[build/build]   | \n[build/build]   | You can uninstall at any time by executing this script with the --uninstall option,\n[build/build]   | and these changes will be reverted.\n[build/build]   | \n[build/build]   | Installing Poetry (1.5.0)\n[build/build]   | Installing Poetry (1.5.0): Creating environment\n[build/build]   | Installing Poetry (1.5.0): Installing Poetry\n[build/build]   | Installing Poetry (1.5.0): Creating script\n[build/build]   | Installing Poetry (1.5.0): Done\n[build/build]   | \n[build/build]   | Poetry (1.5.0) is installed now. Great!\n[build/build]   | \n[build/build]   | To get started you need Poetry's bin directory (/home/runneradmin/.local/bin) in your `PATH`\n[build/build]   | environment variable.\n[build/build]   | \n[build/build]   | Add `export PATH=\"/home/runneradmin/.local/bin:$PATH\"` to your shell configuration file.\n[build/build]   | \n[build/build]   | Alternatively, you can call Poetry explicitly with `/home/runneradmin/.local/bin/poetry`.\n[build/build]   | \n[build/build]   | You can test that everything is set up by executing:\n[build/build]   | \n[build/build]   | `poetry --version`\n[build/build]   | \n[build/build]   | \n[build/build]   | \u001b[33mInstallation completed. Configuring settings \ud83d\udee0\u001b[0m\n[build/build]   | \n[build/build]   | \u001b[33mDone \u2705\u001b[0m\n[build/build]   | \n[build/build]   | \u001b[33mIf you are creating a venv in your project, you can activate it by running 'source .venv/bin/activate'. If you're running this in an OS matrix, you can use 'source $VENV' instead, as an OS agnostic option\u001b[0m\n[build/build]   \u2705  Success - Main Install and configure Poetry\n[build/build]   \u2699  ::set-env:: VENV=.venv/bin/activate\n[build/build]   \u2699  ::add-path:: /home/runneradmin/.local/bin\n[build/build]   \u2705  Success - Main Install Poetry\n[build/build]   \u2699  ::set-env:: VENV=.venv/bin/activate\n[build/build]   \u2699  ::add-path:: /home/runneradmin/.local/bin\n[build/build] \u2b50 Run Main Load cached venv\n[build/build]   \ud83d\udc33  docker cp src=/home/andre-silva/.cache/act/actions-cache@v2/ dst=/var/run/act/actions/actions-cache@v2/\n[build/build]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /var/run/act/actions/actions-cache@v2/] user=0 workdir=\n[build/build]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/actions-cache@v2/dist/restore/index.js] user= workdir=\n[build/build]   \ud83d\udcac  ::debug::Resolved Keys:\n[build/build]   \ud83d\udcac  ::debug::[\"venv-Linux-3.7.11-2a800c283e370e841f37f5d7e3edc94b085f54e26f78ceb0622418f48cd41d63\"]\n[build/build]   \ud83d\udcac  ::debug::Checking zstd --version\n[build/build]   \ud83d\udcac  ::debug::*** zstd command line interface 64-bits v1.5.0, by Yann Collet ***\n[build/build]   \ud83d\udcac  ::debug::getCacheEntry - Attempt 1 of 2 failed with error: Cache Service Url not found, unable to restore cache.\n[build/build]   \ud83d\udcac  ::debug::getCacheEntry - Attempt 2 of 2 failed with error: Cache Service Url not found, unable to restore cache.\n[build/build]   | [warning]getCacheEntry failed: Cache Service Url not found, unable to restore cache.\n[build/build]   \u2705  Success - Main Load cached venv\n[build/build]   \u2699  ::set-output:: cache-hit=false\n[build/build] \u2b50 Run Main Install dependencies\n[build/build]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/4] user= workdir=\n[build/build]   | Creating virtualenv libthumbor in /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/thumbor-libthumbor/.venv\n[build/build]   | Installing dependencies from lock file\n[build/build]   | \n[build/build]   | Package operations: 37 installs, 0 updates, 0 removals\n[build/build]   | \n[build/build]   |   \u2022 Installing typing-extensions (4.1.1)\n[build/build]   |   \u2022 Installing zipp (3.7.0)\n[build/build]   |   \u2022 Installing importlib-metadata (4.2.0)\n[build/build]   |   \u2022 Installing pyparsing (3.0.7)\n[build/build]   |   \u2022 Installing attrs (21.4.0)\n[build/build]   |   \u2022 Installing iniconfig (1.1.1)\n[build/build]   |   \u2022 Installing lazy-object-proxy (1.7.1)\n[build/build]   |   \u2022 Installing packaging (21.3)\n[build/build]   |   \u2022 Installing pluggy (1.0.0)\n[build/build]   |   \u2022 Installing py (1.11.0)\n[build/build]   |   \u2022 Installing tomli (2.0.1)\n[build/build]   |   \u2022 Installing typed-ast (1.5.2)\n[build/build]   |   \u2022 Installing wrapt (1.14.0)\n[build/build]   |   \u2022 Installing asgiref (3.5.0)\n[build/build]   |   \u2022 Installing astroid (2.11.2)\n[build/build]   |   \u2022 Installing click (8.1.1)\n[build/build]   |   \u2022 Installing coverage (6.3.2)\n[build/build]   |   \u2022 Installing dill (0.3.4)\n[build/build]   |   \u2022 Installing isort (5.10.1)\n[build/build]   |   \u2022 Installing mccabe (0.6.1)\n[build/build]   |   \u2022 Installing mypy-extensions (0.4.3)\n[build/build]   |   \u2022 Installing pathspec (0.9.0)\n[build/build]   |   \u2022 Installing platformdirs (2.5.1)\n[build/build]   |   \u2022 Installing pycodestyle (2.8.0)\n[build/build]   |   \u2022 Installing pyflakes (2.4.0)\n[build/build]   |   \u2022 Installing pytest (7.1.1)\n[build/build]   |   \u2022 Installing pytz (2022.1)\n[build/build]   |   \u2022 Installing six (1.16.0)\n[build/build]   |   \u2022 Installing sqlparse (0.4.2)\n[build/build]   |   \u2022 Installing unidecode (1.3.4)\n[build/build]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[build/build]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[build/build]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[build/build]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[build/build]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[build/build]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[build/build]   |   \u2022 Installing black (22.3.0)\n[build/build]   |   \u2022 Installing django (3.2.12)\n[build/build]   |   \u2022 Installing flake8 (4.0.1)\n[build/build]   |   \u2022 Installing preggy (1.4.4)\n[build/build]   |   \u2022 Installing pylint (2.13.4)\n[build/build]   |   \u2022 Installing pytest-cov (3.0.0)\n[build/build]   |   \u2022 Installing pytest-tldr (0.2.4)\n[build/build]   \u2705  Success - Main Install dependencies\n[build/build] \u2b50 Run Main Install libthumbor\n[build/build]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/5] user= workdir=\n[build/build]   | Installing dependencies from lock file\n[build/build]   | \n[build/build]   | No dependencies to install or update\n[build/build]   | \n[build/build]   | Installing the current project: libthumbor (2.0.2)\n[build/build]   \u2705  Success - Main Install libthumbor\n[build/build] \u2b50 Run Main Run tests\n[build/build]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/6] user= workdir=\n[build/build]   | ................................................................................\n[build/build]   | ------------------------------------------------------------------------------\n[build/build]   | Ran 80 tests in 1.46s\n[build/build]   | \n[build/build]   | ---------- coverage: platform linux, python 3.7.11-final-0 -----------\n[build/build]   | Name                                         Stmts   Miss Branch BrPart  Cover\n[build/build]   | ------------------------------------------------------------------------------\n[build/build]   | libthumbor/__init__.py                           4      0      0      0   100%\n[build/build]   | libthumbor/crypto.py                            23      0      6      0   100%\n[build/build]   | libthumbor/django/__init__.py                    0      0      0      0   100%\n[build/build]   | libthumbor/django/urls.py                        3      0      0      0   100%\n[build/build]   | libthumbor/django/views.py                      40      0     12      0   100%\n[build/build]   | libthumbor/url.py                              176      0     88      0   100%\n[build/build]   | libthumbor/url_signers/__init__.py              10      0      4      0   100%\n[build/build]   | libthumbor/url_signers/base64_hmac_sha1.py       8      0      2      0   100%\n[build/build]   | ------------------------------------------------------------------------------\n[build/build]   | TOTAL                                          264      0    112      0   100%\n[build/build]   | \n[build/build]   | \n[build/build]   | OK\n[build/build]   \u2705  Success - Main Run tests\n[build/build] \u2b50 Run Main Run lint\n[build/build]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/7] user= workdir=\n[build/build]   | \n[build/build]   | ------------------------------------\n[build/build]   | Your code has been rated at 10.00/10\n[build/build]   | \n[build/build]   \u2705  Success - Main Run lint\n[build/build] \u2b50 Run Main Generate lcov\n[build/build]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/8] user= workdir=\n[build/build]   | Name                                         Stmts   Miss Branch BrPart  Cover   Missing\n[build/build]   | ----------------------------------------------------------------------------------------\n[build/build]   | libthumbor/__init__.py                           4      0      0      0   100%\n[build/build]   | libthumbor/crypto.py                            23      0      6      0   100%\n[build/build]   | libthumbor/django/__init__.py                    0      0      0      0   100%\n[build/build]   | libthumbor/django/urls.py                        3      0      0      0   100%\n[build/build]   | libthumbor/django/views.py                      40      0     12      0   100%\n[build/build]   | libthumbor/url.py                              176      0     88      0   100%\n[build/build]   | libthumbor/url_signers/__init__.py              10      0      4      0   100%\n[build/build]   | libthumbor/url_signers/base64_hmac_sha1.py       8      0      2      0   100%\n[build/build]   | ----------------------------------------------------------------------------------------\n[build/build]   | TOTAL                                          264      0    112      0   100%\n[build/build]   | Wrote LCOV report to coverage.lcov\n[build/build]   \u2705  Success - Main Generate lcov\n[build/build] \u2b50 Run Main Coveralls\n[build/build]   \ud83d\udc33  docker cp src=/home/andre-silva/.cache/act/coverallsapp-github-action@1.1.3/ dst=/var/run/act/actions/coverallsapp-github-action@1.1.3/\n[build/build]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /var/run/act/actions/coverallsapp-github-action@1.1.3/] user=0 workdir=\n[build/build]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/coverallsapp-github-action@1.1.3/lib/main.js] user= workdir=\n[build/build]   \u2757  ::error::'github-token' input missing, please include it in your workflow settings 'with' section as 'github-token: ${{ secrets.github_token }}'\n[build/build]   \u274c  Failure - Main Coveralls\n[build/build] exitcode '1': failure\n[build/build] \u2b50 Run Post Install Poetry\n[build/build]   \ud83d\udc33  docker cp src=/home/andre-silva/.cache/act/snok-install-poetry@v1/ dst=/var/run/act/actions/snok-install-poetry@v1/\n[build/build]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /var/run/act/actions/snok-install-poetry@v1/] user=0 workdir=\n[build/build]   \u2705  Success - Post Install Poetry\n[build/build] \ud83c\udfc1  Job failed\n",
    "actions_stderr": "Error: Job 'build' failed\n"
}