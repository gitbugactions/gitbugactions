{
    "repository": "xlcnd/isbntools",
    "clone_url": "https://github.com/xlcnd/isbntools.git",
    "timestamp": "2023-05-29T15:18:09.226548Z",
    "clone_success": true,
    "number of actions": 3,
    "number_of_test_actions": 1,
    "actions_successful": false,
    "actions_stdout": "[tests/basic-tests-linux  ] \ud83d\ude80  Start image=crawlergpt:latest\n[tests/basic-tests-macos  ] \ud83d\ude80  Start image=crawlergpt:latest\n[tests/basic-tests-windows] \ud83d\ude80  Start image=crawlergpt:latest\n[tests/basic-tests-linux  ]   \ud83d\udc33  docker pull image=crawlergpt:latest platform= username= forcePull=false\n[tests/basic-tests-macos  ]   \ud83d\udc33  docker pull image=crawlergpt:latest platform= username= forcePull=false\n[tests/basic-tests-windows]   \ud83d\udc33  docker pull image=crawlergpt:latest platform= username= forcePull=false\n[tests/basic-tests-linux  ]   \ud83d\udc33  docker create image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[tests/basic-tests-macos  ]   \ud83d\udc33  docker create image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[tests/basic-tests-windows]   \ud83d\udc33  docker create image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[tests/basic-tests-windows]   \ud83d\udc33  docker run image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[tests/basic-tests-linux  ]   \ud83d\udc33  docker run image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[tests/basic-tests-macos  ]   \ud83d\udc33  docker run image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[tests/basic-tests-windows]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/xlcnd-isbntools] user=0 workdir=\n[tests/basic-tests-linux  ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/xlcnd-isbntools] user=0 workdir=\n[tests/basic-tests-macos  ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/xlcnd-isbntools] user=0 workdir=\n[tests/basic-tests-windows]   \u2601  git clone 'https://github.com/actions/setup-python' # ref=v4\n[tests/basic-tests-windows] \ud83e\uddea  Matrix: map[python-version:3.x]\n[tests/basic-tests-windows] \u2b50 Run Main actions/checkout@v3\n[tests/basic-tests-macos  ]   \u2601  git clone 'https://github.com/actions/setup-python' # ref=v4\n[tests/basic-tests-windows]   \u2705  Success - Main actions/checkout@v3\n[tests/basic-tests-linux  ]   \u2601  git clone 'https://github.com/actions/setup-python' # ref=v4\n[tests/basic-tests-macos  ] \ud83e\uddea  Matrix: map[python-version:3.x]\n[tests/basic-tests-macos  ] \u2b50 Run Main actions/checkout@v3\n[tests/basic-tests-linux  ] \ud83e\uddea  Matrix: map[python-version:3.7]\n[tests/basic-tests-linux  ] \u2b50 Run Main actions/checkout@v3\n[tests/basic-tests-macos  ]   \u2705  Success - Main actions/checkout@v3\n[tests/basic-tests-linux  ]   \u2705  Success - Main actions/checkout@v3\n[tests/basic-tests-windows] \u2b50 Run Main Set up Python 3.x\n[tests/basic-tests-windows]   \ud83d\udc33  docker cp src=/home/andre-silva/.cache/act/actions-setup-python@v4/ dst=/var/run/act/actions/actions-setup-python@v4/\n[tests/basic-tests-macos  ] \u2b50 Run Main Set up Python 3.x\n[tests/basic-tests-macos  ]   \ud83d\udc33  docker cp src=/home/andre-silva/.cache/act/actions-setup-python@v4/ dst=/var/run/act/actions/actions-setup-python@v4/\n[tests/basic-tests-linux  ] \u2b50 Run Main Set up Python 3.7\n[tests/basic-tests-linux  ]   \ud83d\udc33  docker cp src=/home/andre-silva/.cache/act/actions-setup-python@v4/ dst=/var/run/act/actions/actions-setup-python@v4/\n[tests/basic-tests-macos  ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /var/run/act/actions/actions-setup-python@v4/] user=0 workdir=\n[tests/basic-tests-linux  ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /var/run/act/actions/actions-setup-python@v4/] user=0 workdir=\n[tests/basic-tests-macos  ]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/actions-setup-python@v4/dist/setup/index.js] user= workdir=\n[tests/basic-tests-linux  ]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/actions-setup-python@v4/dist/setup/index.js] user= workdir=\n[tests/basic-tests-windows]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /var/run/act/actions/actions-setup-python@v4/] user=0 workdir=\n[tests/basic-tests-windows]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/actions-setup-python@v4/dist/setup/index.js] user= workdir=\n[tests/basic-tests-linux  ]   \ud83d\udcac  ::debug::Python is expected to be installed into /opt/hostedtoolcache\n[tests/basic-tests-linux  ]   \u2753  ::group::Installed versions\n[tests/basic-tests-linux  ]   \ud83d\udcac  ::debug::Semantic version spec of 3.7 is 3.7\n[tests/basic-tests-linux  ]   \ud83d\udcac  ::debug::isExplicit: \n[tests/basic-tests-linux  ]   \ud83d\udcac  ::debug::explicit? false\n[tests/basic-tests-linux  ]   \ud83d\udcac  ::debug::isExplicit: 2.7.18\n[tests/basic-tests-linux  ]   \ud83d\udcac  ::debug::explicit? true\n[tests/basic-tests-linux  ]   \ud83d\udcac  ::debug::isExplicit: 3.5.10\n[tests/basic-tests-linux  ]   \ud83d\udcac  ::debug::explicit? true\n[tests/basic-tests-linux  ]   \ud83d\udcac  ::debug::isExplicit: 3.6.14\n[tests/basic-tests-linux  ]   \ud83d\udcac  ::debug::explicit? true\n[tests/basic-tests-linux  ]   \ud83d\udcac  ::debug::isExplicit: 3.7.11\n[tests/basic-tests-linux  ]   \ud83d\udcac  ::debug::explicit? true\n[tests/basic-tests-linux  ]   \ud83d\udcac  ::debug::isExplicit: 3.8.11\n[tests/basic-tests-linux  ]   \ud83d\udcac  ::debug::explicit? true\n[tests/basic-tests-linux  ]   \ud83d\udcac  ::debug::isExplicit: 3.9.6\n[tests/basic-tests-linux  ]   \ud83d\udcac  ::debug::explicit? true\n[tests/basic-tests-linux  ]   \ud83d\udcac  ::debug::evaluating 6 versions\n[tests/basic-tests-linux  ]   \ud83d\udcac  ::debug::matched: 3.7.11\n[tests/basic-tests-linux  ]   \ud83d\udcac  ::debug::checking cache: /opt/hostedtoolcache/Python/3.7.11/x64\n[tests/basic-tests-linux  ]   \ud83d\udcac  ::debug::Found tool in cache Python 3.7.11 x64\n[tests/basic-tests-linux  ]   | Successfully set up CPython (3.7.11)\n[tests/basic-tests-linux  ]   \u2753  ::endgroup::\n[tests/basic-tests-linux  ]   \u2753 add-matcher /run/act/actions/actions-setup-python@v4/.github/python.json\n[tests/basic-tests-macos  ]   \ud83d\udcac  ::debug::Python is expected to be installed into /opt/hostedtoolcache\n[tests/basic-tests-macos  ]   \u2753  ::group::Installed versions\n[tests/basic-tests-macos  ]   \ud83d\udcac  ::debug::Semantic version spec of 3.x is 3.x\n[tests/basic-tests-macos  ]   \ud83d\udcac  ::debug::isExplicit: \n[tests/basic-tests-macos  ]   \ud83d\udcac  ::debug::explicit? false\n[tests/basic-tests-macos  ]   \ud83d\udcac  ::debug::isExplicit: 2.7.18\n[tests/basic-tests-macos  ]   \ud83d\udcac  ::debug::explicit? true\n[tests/basic-tests-macos  ]   \ud83d\udcac  ::debug::isExplicit: 3.5.10\n[tests/basic-tests-macos  ]   \ud83d\udcac  ::debug::explicit? true\n[tests/basic-tests-macos  ]   \ud83d\udcac  ::debug::isExplicit: 3.6.14\n[tests/basic-tests-macos  ]   \ud83d\udcac  ::debug::explicit? true\n[tests/basic-tests-macos  ]   \ud83d\udcac  ::debug::isExplicit: 3.7.11\n[tests/basic-tests-macos  ]   \ud83d\udcac  ::debug::explicit? true\n[tests/basic-tests-macos  ]   \ud83d\udcac  ::debug::isExplicit: 3.8.11\n[tests/basic-tests-macos  ]   \ud83d\udcac  ::debug::explicit? true\n[tests/basic-tests-macos  ]   \ud83d\udcac  ::debug::isExplicit: 3.9.6\n[tests/basic-tests-macos  ]   \ud83d\udcac  ::debug::explicit? true\n[tests/basic-tests-macos  ]   \ud83d\udcac  ::debug::evaluating 6 versions\n[tests/basic-tests-macos  ]   \ud83d\udcac  ::debug::matched: 3.9.6\n[tests/basic-tests-macos  ]   \ud83d\udcac  ::debug::checking cache: /opt/hostedtoolcache/Python/3.9.6/x64\n[tests/basic-tests-macos  ]   \ud83d\udcac  ::debug::Found tool in cache Python 3.9.6 x64\n[tests/basic-tests-macos  ]   | Successfully set up CPython (3.9.6)\n[tests/basic-tests-macos  ]   \u2753  ::endgroup::\n[tests/basic-tests-macos  ]   \u2753 add-matcher /run/act/actions/actions-setup-python@v4/.github/python.json\n[tests/basic-tests-linux  ]   \u2705  Success - Main Set up Python 3.7\n[tests/basic-tests-macos  ]   \u2705  Success - Main Set up Python 3.x\n[tests/basic-tests-macos  ]   \u2699  ::set-env:: pythonLocation=/opt/hostedtoolcache/Python/3.9.6/x64\n[tests/basic-tests-macos  ]   \u2699  ::set-env:: PKG_CONFIG_PATH=/opt/hostedtoolcache/Python/3.9.6/x64/lib/pkgconfig\n[tests/basic-tests-macos  ]   \u2699  ::set-env:: Python_ROOT_DIR=/opt/hostedtoolcache/Python/3.9.6/x64\n[tests/basic-tests-macos  ]   \u2699  ::set-env:: Python2_ROOT_DIR=/opt/hostedtoolcache/Python/3.9.6/x64\n[tests/basic-tests-macos  ]   \u2699  ::set-env:: Python3_ROOT_DIR=/opt/hostedtoolcache/Python/3.9.6/x64\n[tests/basic-tests-macos  ]   \u2699  ::set-env:: LD_LIBRARY_PATH=/opt/hostedtoolcache/Python/3.9.6/x64/lib\n[tests/basic-tests-linux  ]   \u2699  ::set-env:: LD_LIBRARY_PATH=/opt/hostedtoolcache/Python/3.7.11/x64/lib\n[tests/basic-tests-linux  ]   \u2699  ::set-env:: pythonLocation=/opt/hostedtoolcache/Python/3.7.11/x64\n[tests/basic-tests-linux  ]   \u2699  ::set-env:: PKG_CONFIG_PATH=/opt/hostedtoolcache/Python/3.7.11/x64/lib/pkgconfig\n[tests/basic-tests-linux  ]   \u2699  ::set-env:: Python_ROOT_DIR=/opt/hostedtoolcache/Python/3.7.11/x64\n[tests/basic-tests-linux  ]   \u2699  ::set-env:: Python2_ROOT_DIR=/opt/hostedtoolcache/Python/3.7.11/x64\n[tests/basic-tests-linux  ]   \u2699  ::set-env:: Python3_ROOT_DIR=/opt/hostedtoolcache/Python/3.7.11/x64\n[tests/basic-tests-macos  ]   \u2699  ::set-output:: python-path=/opt/hostedtoolcache/Python/3.9.6/x64/bin/python\n[tests/basic-tests-macos  ]   \u2699  ::set-output:: python-version=3.9.6\n[tests/basic-tests-linux  ]   \u2699  ::set-output:: python-version=3.7.11\n[tests/basic-tests-linux  ]   \u2699  ::set-output:: python-path=/opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[tests/basic-tests-linux  ]   \u2699  ::add-path:: /opt/hostedtoolcache/Python/3.7.11/x64\n[tests/basic-tests-linux  ]   \u2699  ::add-path:: /opt/hostedtoolcache/Python/3.7.11/x64/bin\n[tests/basic-tests-macos  ]   \u2699  ::add-path:: /opt/hostedtoolcache/Python/3.9.6/x64\n[tests/basic-tests-macos  ]   \u2699  ::add-path:: /opt/hostedtoolcache/Python/3.9.6/x64/bin\n[tests/basic-tests-macos  ] \u2b50 Run Main Install dependencies\n[tests/basic-tests-linux  ] \u2b50 Run Main Install dependencies\n[tests/basic-tests-linux  ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/2] user= workdir=\n[tests/basic-tests-macos  ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/2] user= workdir=\n[tests/basic-tests-windows]   \ud83d\udcac  ::debug::Python is expected to be installed into /opt/hostedtoolcache\n[tests/basic-tests-windows]   \u2753  ::group::Installed versions\n[tests/basic-tests-windows]   \ud83d\udcac  ::debug::Semantic version spec of 3.x is 3.x\n[tests/basic-tests-windows]   \ud83d\udcac  ::debug::isExplicit: \n[tests/basic-tests-windows]   \ud83d\udcac  ::debug::explicit? false\n[tests/basic-tests-windows]   \ud83d\udcac  ::debug::isExplicit: 2.7.18\n[tests/basic-tests-windows]   \ud83d\udcac  ::debug::explicit? true\n[tests/basic-tests-windows]   \ud83d\udcac  ::debug::isExplicit: 3.5.10\n[tests/basic-tests-windows]   \ud83d\udcac  ::debug::explicit? true\n[tests/basic-tests-windows]   \ud83d\udcac  ::debug::isExplicit: 3.6.14\n[tests/basic-tests-windows]   \ud83d\udcac  ::debug::explicit? true\n[tests/basic-tests-windows]   \ud83d\udcac  ::debug::isExplicit: 3.7.11\n[tests/basic-tests-windows]   \ud83d\udcac  ::debug::explicit? true\n[tests/basic-tests-windows]   \ud83d\udcac  ::debug::isExplicit: 3.8.11\n[tests/basic-tests-windows]   \ud83d\udcac  ::debug::explicit? true\n[tests/basic-tests-windows]   \ud83d\udcac  ::debug::isExplicit: 3.9.6\n[tests/basic-tests-windows]   \ud83d\udcac  ::debug::explicit? true\n[tests/basic-tests-windows]   \ud83d\udcac  ::debug::evaluating 6 versions\n[tests/basic-tests-windows]   \ud83d\udcac  ::debug::matched: 3.9.6\n[tests/basic-tests-windows]   \ud83d\udcac  ::debug::checking cache: /opt/hostedtoolcache/Python/3.9.6/x64\n[tests/basic-tests-windows]   \ud83d\udcac  ::debug::Found tool in cache Python 3.9.6 x64\n[tests/basic-tests-windows]   | Successfully set up CPython (3.9.6)\n[tests/basic-tests-windows]   \u2753  ::endgroup::\n[tests/basic-tests-windows]   \u2753 add-matcher /run/act/actions/actions-setup-python@v4/.github/python.json\n[tests/basic-tests-windows]   \u2705  Success - Main Set up Python 3.x\n[tests/basic-tests-macos  ]   | Requirement already satisfied: pip in /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages (21.2.4)\n[tests/basic-tests-windows]   \u2699  ::set-env:: pythonLocation=/opt/hostedtoolcache/Python/3.9.6/x64\n[tests/basic-tests-windows]   \u2699  ::set-env:: PKG_CONFIG_PATH=/opt/hostedtoolcache/Python/3.9.6/x64/lib/pkgconfig\n[tests/basic-tests-windows]   \u2699  ::set-env:: Python_ROOT_DIR=/opt/hostedtoolcache/Python/3.9.6/x64\n[tests/basic-tests-windows]   \u2699  ::set-env:: Python2_ROOT_DIR=/opt/hostedtoolcache/Python/3.9.6/x64\n[tests/basic-tests-windows]   \u2699  ::set-env:: Python3_ROOT_DIR=/opt/hostedtoolcache/Python/3.9.6/x64\n[tests/basic-tests-windows]   \u2699  ::set-env:: LD_LIBRARY_PATH=/opt/hostedtoolcache/Python/3.9.6/x64/lib\n[tests/basic-tests-windows]   \u2699  ::set-output:: python-path=/opt/hostedtoolcache/Python/3.9.6/x64/bin/python\n[tests/basic-tests-windows]   \u2699  ::set-output:: python-version=3.9.6\n[tests/basic-tests-macos  ]   | Collecting pip\n[tests/basic-tests-linux  ]   | Requirement already satisfied: pip in /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages (21.2.4)\n[tests/basic-tests-macos  ]   |   Downloading pip-23.1.2-py3-none-any.whl (2.1 MB)\n[tests/basic-tests-windows]   \u2699  ::add-path:: /opt/hostedtoolcache/Python/3.9.6/x64\n[tests/basic-tests-windows]   \u2699  ::add-path:: /opt/hostedtoolcache/Python/3.9.6/x64/bin\n[tests/basic-tests-windows] \u2b50 Run Main Install dependencies\n[tests/basic-tests-linux  ]   | Collecting pip\n[tests/basic-tests-macos  ]   | Installing collected packages: pip\n[tests/basic-tests-macos  ]   |   Attempting uninstall: pip\n[tests/basic-tests-macos  ]   |     Found existing installation: pip 21.2.4\n[tests/basic-tests-linux  ]   |   Downloading pip-23.1.2-py3-none-any.whl (2.1 MB)\n[tests/basic-tests-linux  ]   | Installing collected packages: pip\n[tests/basic-tests-linux  ]   |   Attempting uninstall: pip\n[tests/basic-tests-linux  ]   |     Found existing installation: pip 21.2.4\n[tests/basic-tests-macos  ]   |     Uninstalling pip-21.2.4:\n[tests/basic-tests-windows]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/2] user= workdir=\n[tests/basic-tests-linux  ]   |     Uninstalling pip-21.2.4:\n[tests/basic-tests-macos  ]   |       Successfully uninstalled pip-21.2.4\n[tests/basic-tests-linux  ]   |       Successfully uninstalled pip-21.2.4\n[tests/basic-tests-macos  ]   | Successfully installed pip-23.1.2\n[tests/basic-tests-macos  ]   | Collecting isbnlib<3.11.0,>=3.10.9 (from -r requirements.txt (line 1))\n[tests/basic-tests-macos  ]   |   Downloading isbnlib-3.10.14-py2.py3-none-any.whl (52 kB)\n[tests/basic-tests-macos  ]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 52.5/52.5 kB 1.7 MB/s eta 0:00:00\n[tests/basic-tests-macos  ]   | Installing collected packages: isbnlib\n[tests/basic-tests-linux  ]   | Successfully installed pip-23.1.2\n[tests/basic-tests-macos  ]   | Successfully installed isbnlib-3.10.14\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | [notice] A new release of pip is available: 21.1.3 -> 23.1.2\n[tests/basic-tests-macos  ]   | [notice] To update, run: pip install --upgrade pip\n[tests/basic-tests-macos  ]   \u2705  Success - Main Install dependencies\n[tests/basic-tests-macos  ] \u2b50 Run Main Run pytest tests\n[tests/basic-tests-macos  ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/3] user= workdir=\n[tests/basic-tests-linux  ]   | Collecting isbnlib<3.11.0,>=3.10.9 (from -r requirements.txt (line 1))\n[tests/basic-tests-linux  ]   |   Downloading isbnlib-3.10.14-py2.py3-none-any.whl (52 kB)\n[tests/basic-tests-linux  ]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 52.5/52.5 kB 6.3 MB/s eta 0:00:00\n[tests/basic-tests-linux  ]   | Installing collected packages: isbnlib\n[tests/basic-tests-linux  ]   | Successfully installed isbnlib-3.10.14\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | [notice] A new release of pip is available: 20.1.1 -> 23.1.2\n[tests/basic-tests-linux  ]   | [notice] To update, run: pip install --upgrade pip\n[tests/basic-tests-linux  ]   \u2705  Success - Main Install dependencies\n[tests/basic-tests-linux  ] \u2b50 Run Main Lint with flake8\n[tests/basic-tests-linux  ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/3] user= workdir=\n[tests/basic-tests-windows]   | Requirement already satisfied: pip in /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages (21.2.4)\n[tests/basic-tests-windows]   | Collecting pip\n[tests/basic-tests-windows]   |   Downloading pip-23.1.2-py3-none-any.whl (2.1 MB)\n[tests/basic-tests-macos  ]   | Collecting wheel\n[tests/basic-tests-macos  ]   |   Downloading wheel-0.40.0-py3-none-any.whl (64 kB)\n[tests/basic-tests-macos  ]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 64.5/64.5 kB 3.4 MB/s eta 0:00:00\n[tests/basic-tests-linux  ]   | Collecting flake8\n[tests/basic-tests-windows]   | Installing collected packages: pip\n[tests/basic-tests-windows]   |   Attempting uninstall: pip\n[tests/basic-tests-windows]   |     Found existing installation: pip 21.2.4\n[tests/basic-tests-linux  ]   |   Downloading flake8-5.0.4-py2.py3-none-any.whl (61 kB)\n[tests/basic-tests-linux  ]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 61.9/61.9 kB 1.9 MB/s eta 0:00:00\n[tests/basic-tests-macos  ]   | Collecting pytest\n[tests/basic-tests-macos  ]   |   Downloading pytest-7.3.1-py3-none-any.whl (320 kB)\n[tests/basic-tests-macos  ]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 320.5/320.5 kB 3.5 MB/s eta 0:00:00\n[tests/basic-tests-linux  ]   | Collecting mccabe<0.8.0,>=0.7.0 (from flake8)\n[tests/basic-tests-linux  ]   |   Downloading mccabe-0.7.0-py2.py3-none-any.whl (7.3 kB)\n[tests/basic-tests-macos  ]   | Collecting pytest-cov\n[tests/basic-tests-macos  ]   |   Downloading pytest_cov-4.1.0-py3-none-any.whl (21 kB)\n[tests/basic-tests-linux  ]   | Collecting pycodestyle<2.10.0,>=2.9.0 (from flake8)\n[tests/basic-tests-windows]   |     Uninstalling pip-21.2.4:\n[tests/basic-tests-linux  ]   |   Downloading pycodestyle-2.9.1-py2.py3-none-any.whl (41 kB)\n[tests/basic-tests-linux  ]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 41.5/41.5 kB 2.5 MB/s eta 0:00:00\n[tests/basic-tests-linux  ]   | Collecting pyflakes<2.6.0,>=2.5.0 (from flake8)\n[tests/basic-tests-linux  ]   |   Downloading pyflakes-2.5.0-py2.py3-none-any.whl (66 kB)\n[tests/basic-tests-linux  ]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 66.1/66.1 kB 1.1 MB/s eta 0:00:00\n[tests/basic-tests-linux  ]   | Collecting importlib-metadata<4.3,>=1.1.0 (from flake8)\n[tests/basic-tests-linux  ]   |   Downloading importlib_metadata-4.2.0-py3-none-any.whl (16 kB)\n[tests/basic-tests-linux  ]   | Collecting zipp>=0.5 (from importlib-metadata<4.3,>=1.1.0->flake8)\n[tests/basic-tests-linux  ]   |   Downloading zipp-3.15.0-py3-none-any.whl (6.8 kB)\n[tests/basic-tests-linux  ]   | Collecting typing-extensions>=3.6.4 (from importlib-metadata<4.3,>=1.1.0->flake8)\n[tests/basic-tests-linux  ]   |   Downloading typing_extensions-4.6.2-py3-none-any.whl (31 kB)\n[tests/basic-tests-macos  ]   | Collecting coverage\n[tests/basic-tests-macos  ]   |   Downloading coverage-7.2.6-cp39-cp39-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl (228 kB)\n[tests/basic-tests-macos  ]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 228.2/228.2 kB 7.2 MB/s eta 0:00:00\n[tests/basic-tests-linux  ]   | Installing collected packages: zipp, typing-extensions, pyflakes, pycodestyle, mccabe, importlib-metadata, flake8\n[tests/basic-tests-macos  ]   | Collecting iniconfig (from pytest)\n[tests/basic-tests-macos  ]   |   Downloading iniconfig-2.0.0-py3-none-any.whl (5.9 kB)\n[tests/basic-tests-macos  ]   | Collecting packaging (from pytest)\n[tests/basic-tests-macos  ]   |   Downloading packaging-23.1-py3-none-any.whl (48 kB)\n[tests/basic-tests-macos  ]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 48.9/48.9 kB 1.4 MB/s eta 0:00:00\n[tests/basic-tests-macos  ]   | Collecting pluggy<2.0,>=0.12 (from pytest)\n[tests/basic-tests-macos  ]   |   Downloading pluggy-1.0.0-py2.py3-none-any.whl (13 kB)\n[tests/basic-tests-macos  ]   | Collecting exceptiongroup>=1.0.0rc8 (from pytest)\n[tests/basic-tests-macos  ]   |   Downloading exceptiongroup-1.1.1-py3-none-any.whl (14 kB)\n[tests/basic-tests-windows]   |       Successfully uninstalled pip-21.2.4\n[tests/basic-tests-macos  ]   | Collecting tomli>=1.0.0 (from pytest)\n[tests/basic-tests-macos  ]   |   Downloading tomli-2.0.1-py3-none-any.whl (12 kB)\n[tests/basic-tests-macos  ]   | Installing collected packages: wheel, tomli, pluggy, packaging, iniconfig, exceptiongroup, coverage, pytest, pytest-cov\n[tests/basic-tests-linux  ]   | Successfully installed flake8-5.0.4 importlib-metadata-4.2.0 mccabe-0.7.0 pycodestyle-2.9.1 pyflakes-2.5.0 typing-extensions-4.6.2 zipp-3.15.0\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | [notice] A new release of pip is available: 20.1.1 -> 23.1.2\n[tests/basic-tests-linux  ]   | [notice] To update, run: pip install --upgrade pip\n[tests/basic-tests-macos  ]   | Successfully installed coverage-7.2.6 exceptiongroup-1.1.1 iniconfig-2.0.0 packaging-23.1 pluggy-1.0.0 pytest-7.3.1 pytest-cov-4.1.0 tomli-2.0.1 wheel-0.40.0\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | [notice] A new release of pip is available: 21.1.3 -> 23.1.2\n[tests/basic-tests-macos  ]   | [notice] To update, run: pip install --upgrade pip\n[tests/basic-tests-windows]   | Successfully installed pip-23.1.2\n[tests/basic-tests-macos  ]   | ============================= test session starts ==============================\n[tests/basic-tests-macos  ]   | platform linux -- Python 3.9.6, pytest-7.3.1, pluggy-1.0.0\n[tests/basic-tests-macos  ]   | rootdir: /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/xlcnd-isbntools\n[tests/basic-tests-macos  ]   | configfile: setup.cfg\n[tests/basic-tests-macos  ]   | plugins: cov-4.1.0\n[tests/basic-tests-macos  ]   | collected 12 items\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | isbntools/contrib/test/test_audit.py .                                   [  8%]\n[tests/basic-tests-linux  ]   | 0\n[tests/basic-tests-windows]   | Collecting isbnlib<3.11.0,>=3.10.9 (from -r requirements.txt (line 1))\n[tests/basic-tests-windows]   |   Downloading isbnlib-3.10.14-py2.py3-none-any.whl (52 kB)\n[tests/basic-tests-windows]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 52.5/52.5 kB 2.1 MB/s eta 0:00:00\n[tests/basic-tests-windows]   | Installing collected packages: isbnlib\n[tests/basic-tests-linux  ]   | 0\n[tests/basic-tests-linux  ]   \u2705  Success - Main Lint with flake8\n[tests/basic-tests-windows]   | Successfully installed isbnlib-3.10.14\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | [notice] A new release of pip is available: 21.1.3 -> 23.1.2\n[tests/basic-tests-windows]   | [notice] To update, run: pip install --upgrade pip\n[tests/basic-tests-macos  ]   | isbntools/contrib/test/test_rename.py ....FF                             [ 58%]\n[tests/basic-tests-windows]   \u2705  Success - Main Install dependencies\n[tests/basic-tests-windows] \u2b50 Run Main Run pytest tests\n[tests/basic-tests-linux  ] \u2b50 Run Main Run pytest tests\n[tests/basic-tests-macos  ]   | isbntools/test/test_cache.py EEEE                                        [ 91%]\n[tests/basic-tests-linux  ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/4] user= workdir=\n[tests/basic-tests-windows]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/3] user= workdir=\n[tests/basic-tests-macos  ]   | isbntools/test/test_doi2tex.py .                                         [100%]\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | ==================================== ERRORS ====================================\n[tests/basic-tests-macos  ]   | ___________________ ERROR at setup of test_shelvecache_meta ____________________\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | self = <isbnlib.dev.webservice.WEBService object at 0x7f77d5da9be0>\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   |     def response(self):\n[tests/basic-tests-macos  ]   |         \"\"\"Check errors on response.\"\"\"\n[tests/basic-tests-macos  ]   |         # TODO(http 102)\n[tests/basic-tests-macos  ]   |         # How to handle \"102 http's code\"?\n[tests/basic-tests-macos  ]   |         # - urlopen doesn't catch a 102 code!\n[tests/basic-tests-macos  ]   |         #   https://docs.python.org/3/howto/urllib2.html#error-codes\n[tests/basic-tests-macos  ]   |         try:\n[tests/basic-tests-macos  ]   | >           response = urlopen(\n[tests/basic-tests-macos  ]   |                 self._request,\n[tests/basic-tests-macos  ]   |                 timeout=options.get('URLOPEN_TIMEOUT'),\n[tests/basic-tests-macos  ]   |             )\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/isbnlib/dev/webservice.py:56: \n[tests/basic-tests-macos  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | url = <urllib.request.Request object at 0x7f77d5da9a30>, data = None\n[tests/basic-tests-macos  ]   | timeout = 10.0\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   |     def urlopen(url, data=None, timeout=socket._GLOBAL_DEFAULT_TIMEOUT,\n[tests/basic-tests-macos  ]   |                 *, cafile=None, capath=None, cadefault=False, context=None):\n[tests/basic-tests-macos  ]   |         '''Open the URL url, which can be either a string or a Request object.\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         *data* must be an object specifying additional data to be sent to\n[tests/basic-tests-macos  ]   |         the server, or None if no such data is needed.  See Request for\n[tests/basic-tests-macos  ]   |         details.\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         urllib.request module uses HTTP/1.1 and includes a \"Connection:close\"\n[tests/basic-tests-macos  ]   |         header in its HTTP requests.\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         The optional *timeout* parameter specifies a timeout in seconds for\n[tests/basic-tests-macos  ]   |         blocking operations like the connection attempt (if not specified, the\n[tests/basic-tests-macos  ]   |         global default timeout setting will be used). This only works for HTTP,\n[tests/basic-tests-macos  ]   |         HTTPS and FTP connections.\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         If *context* is specified, it must be a ssl.SSLContext instance describing\n[tests/basic-tests-macos  ]   |         the various SSL options. See HTTPSConnection for more details.\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         The optional *cafile* and *capath* parameters specify a set of trusted CA\n[tests/basic-tests-macos  ]   |         certificates for HTTPS requests. cafile should point to a single file\n[tests/basic-tests-macos  ]   |         containing a bundle of CA certificates, whereas capath should point to a\n[tests/basic-tests-macos  ]   |         directory of hashed certificate files. More information can be found in\n[tests/basic-tests-macos  ]   |         ssl.SSLContext.load_verify_locations().\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         The *cadefault* parameter is ignored.\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         This function always returns an object which can work as a\n[tests/basic-tests-macos  ]   |         context manager and has the properties url, headers, and status.\n[tests/basic-tests-macos  ]   |         See urllib.response.addinfourl for more detail on these properties.\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         For HTTP and HTTPS URLs, this function returns a http.client.HTTPResponse\n[tests/basic-tests-macos  ]   |         object slightly modified. In addition to the three new methods above, the\n[tests/basic-tests-macos  ]   |         msg attribute contains the same information as the reason attribute ---\n[tests/basic-tests-macos  ]   |         the reason phrase returned by the server --- instead of the response\n[tests/basic-tests-macos  ]   |         headers as it is specified in the documentation for HTTPResponse.\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         For FTP, file, and data URLs and requests explicitly handled by legacy\n[tests/basic-tests-macos  ]   |         URLopener and FancyURLopener classes, this function returns a\n[tests/basic-tests-macos  ]   |         urllib.response.addinfourl object.\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         Note that None may be returned if no handler handles the request (though\n[tests/basic-tests-macos  ]   |         the default installed global OpenerDirector uses UnknownHandler to ensure\n[tests/basic-tests-macos  ]   |         this never happens).\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         In addition, if proxy settings are detected (for example, when a *_proxy\n[tests/basic-tests-macos  ]   |         environment variable like http_proxy is set), ProxyHandler is default\n[tests/basic-tests-macos  ]   |         installed and makes sure the requests are handled through the proxy.\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         '''\n[tests/basic-tests-macos  ]   |         global _opener\n[tests/basic-tests-macos  ]   |         if cafile or capath or cadefault:\n[tests/basic-tests-macos  ]   |             import warnings\n[tests/basic-tests-macos  ]   |             warnings.warn(\"cafile, capath and cadefault are deprecated, use a \"\n[tests/basic-tests-macos  ]   |                           \"custom context instead.\", DeprecationWarning, 2)\n[tests/basic-tests-macos  ]   |             if context is not None:\n[tests/basic-tests-macos  ]   |                 raise ValueError(\n[tests/basic-tests-macos  ]   |                     \"You can't pass both context and any of cafile, capath, and \"\n[tests/basic-tests-macos  ]   |                     \"cadefault\"\n[tests/basic-tests-macos  ]   |                 )\n[tests/basic-tests-macos  ]   |             if not _have_ssl:\n[tests/basic-tests-macos  ]   |                 raise ValueError('SSL support not available')\n[tests/basic-tests-macos  ]   |             context = ssl.create_default_context(ssl.Purpose.SERVER_AUTH,\n[tests/basic-tests-macos  ]   |                                                  cafile=cafile,\n[tests/basic-tests-macos  ]   |                                                  capath=capath)\n[tests/basic-tests-macos  ]   |             https_handler = HTTPSHandler(context=context)\n[tests/basic-tests-macos  ]   |             opener = build_opener(https_handler)\n[tests/basic-tests-macos  ]   |         elif context:\n[tests/basic-tests-macos  ]   |             https_handler = HTTPSHandler(context=context)\n[tests/basic-tests-macos  ]   |             opener = build_opener(https_handler)\n[tests/basic-tests-macos  ]   |         elif _opener is None:\n[tests/basic-tests-macos  ]   |             _opener = opener = build_opener()\n[tests/basic-tests-macos  ]   |         else:\n[tests/basic-tests-macos  ]   |             opener = _opener\n[tests/basic-tests-macos  ]   | >       return opener.open(url, data, timeout)\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/urllib/request.py:214: \n[tests/basic-tests-macos  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | self = <urllib.request.OpenerDirector object at 0x7f77d5f50280>\n[tests/basic-tests-macos  ]   | fullurl = <urllib.request.Request object at 0x7f77d5da9a30>, data = None\n[tests/basic-tests-macos  ]   | timeout = 10.0\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   |     def open(self, fullurl, data=None, timeout=socket._GLOBAL_DEFAULT_TIMEOUT):\n[tests/basic-tests-macos  ]   |         # accept a URL or a Request object\n[tests/basic-tests-macos  ]   |         if isinstance(fullurl, str):\n[tests/basic-tests-macos  ]   |             req = Request(fullurl, data)\n[tests/basic-tests-macos  ]   |         else:\n[tests/basic-tests-macos  ]   |             req = fullurl\n[tests/basic-tests-macos  ]   |             if data is not None:\n[tests/basic-tests-macos  ]   |                 req.data = data\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         req.timeout = timeout\n[tests/basic-tests-macos  ]   |         protocol = req.type\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         # pre-process request\n[tests/basic-tests-macos  ]   |         meth_name = protocol+\"_request\"\n[tests/basic-tests-macos  ]   |         for processor in self.process_request.get(protocol, []):\n[tests/basic-tests-macos  ]   |             meth = getattr(processor, meth_name)\n[tests/basic-tests-macos  ]   |             req = meth(req)\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         sys.audit('urllib.Request', req.full_url, req.data, req.headers, req.get_method())\n[tests/basic-tests-macos  ]   |         response = self._open(req, data)\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         # post-process response\n[tests/basic-tests-macos  ]   |         meth_name = protocol+\"_response\"\n[tests/basic-tests-macos  ]   |         for processor in self.process_response.get(protocol, []):\n[tests/basic-tests-macos  ]   |             meth = getattr(processor, meth_name)\n[tests/basic-tests-macos  ]   | >           response = meth(req, response)\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/urllib/request.py:523: \n[tests/basic-tests-macos  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | self = <urllib.request.HTTPErrorProcessor object at 0x7f77d5f502b0>\n[tests/basic-tests-macos  ]   | request = <urllib.request.Request object at 0x7f77d5da9a30>\n[tests/basic-tests-macos  ]   | response = <http.client.HTTPResponse object at 0x7f77d5da99a0>\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   |     def http_response(self, request, response):\n[tests/basic-tests-macos  ]   |         code, msg, hdrs = response.code, response.msg, response.info()\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         # According to RFC 2616, \"2xx\" code indicates that the client's\n[tests/basic-tests-macos  ]   |         # request was successfully received, understood, and accepted.\n[tests/basic-tests-macos  ]   |         if not (200 <= code < 300):\n[tests/basic-tests-macos  ]   | >           response = self.parent.error(\n[tests/basic-tests-macos  ]   |                 'http', request, response, code, msg, hdrs)\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/urllib/request.py:632: \n[tests/basic-tests-macos  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | self = <urllib.request.OpenerDirector object at 0x7f77d5f50280>, proto = 403\n[tests/basic-tests-macos  ]   | args = ({'default': [<urllib.request.HTTPDefaultErrorHandler object at 0x7f77d5f50df0>], 301: [<urllib.request.HTTPRedirectHa...ult', <urllib.request.Request object at 0x7f77d5da9a30>, <http.client.HTTPResponse object at 0x7f77d5da99a0>, 403, ...)\n[tests/basic-tests-macos  ]   | dict = {'default': [<urllib.request.HTTPDefaultErrorHandler object at 0x7f77d5f50df0>], 301: [<urllib.request.HTTPRedirectHan...PRedirectHandler object at 0x7f77d5f50f70>], 303: [<urllib.request.HTTPRedirectHandler object at 0x7f77d5f50f70>], ...}\n[tests/basic-tests-macos  ]   | meth_name = 'http_error_403', http_err = 1\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   |     def error(self, proto, *args):\n[tests/basic-tests-macos  ]   |         if proto in ('http', 'https'):\n[tests/basic-tests-macos  ]   |             # XXX http[s] protocols are special-cased\n[tests/basic-tests-macos  ]   |             dict = self.handle_error['http'] # https is not different than http\n[tests/basic-tests-macos  ]   |             proto = args[2]  # YUCK!\n[tests/basic-tests-macos  ]   |             meth_name = 'http_error_%s' % proto\n[tests/basic-tests-macos  ]   |             http_err = 1\n[tests/basic-tests-macos  ]   |             orig_args = args\n[tests/basic-tests-macos  ]   |         else:\n[tests/basic-tests-macos  ]   |             dict = self.handle_error\n[tests/basic-tests-macos  ]   |             meth_name = proto + '_error'\n[tests/basic-tests-macos  ]   |             http_err = 0\n[tests/basic-tests-macos  ]   |         args = (dict, proto, meth_name) + args\n[tests/basic-tests-macos  ]   |         result = self._call_chain(*args)\n[tests/basic-tests-macos  ]   |         if result:\n[tests/basic-tests-macos  ]   |             return result\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         if http_err:\n[tests/basic-tests-macos  ]   |             args = (dict, 'default', 'http_error_default') + orig_args\n[tests/basic-tests-macos  ]   | >           return self._call_chain(*args)\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/urllib/request.py:561: \n[tests/basic-tests-macos  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | self = <urllib.request.OpenerDirector object at 0x7f77d5f50280>\n[tests/basic-tests-macos  ]   | chain = {'default': [<urllib.request.HTTPDefaultErrorHandler object at 0x7f77d5f50df0>], 301: [<urllib.request.HTTPRedirectHan...PRedirectHandler object at 0x7f77d5f50f70>], 303: [<urllib.request.HTTPRedirectHandler object at 0x7f77d5f50f70>], ...}\n[tests/basic-tests-macos  ]   | kind = 'default', meth_name = 'http_error_default'\n[tests/basic-tests-macos  ]   | args = (<urllib.request.Request object at 0x7f77d5da9a30>, <http.client.HTTPResponse object at 0x7f77d5da99a0>, 403, 'Forbidden', <http.client.HTTPMessage object at 0x7f77d5da9460>)\n[tests/basic-tests-macos  ]   | handlers = [<urllib.request.HTTPDefaultErrorHandler object at 0x7f77d5f50df0>]\n[tests/basic-tests-macos  ]   | handler = <urllib.request.HTTPDefaultErrorHandler object at 0x7f77d5f50df0>\n[tests/basic-tests-macos  ]   | func = <bound method HTTPDefaultErrorHandler.http_error_default of <urllib.request.HTTPDefaultErrorHandler object at 0x7f77d5f50df0>>\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   |     def _call_chain(self, chain, kind, meth_name, *args):\n[tests/basic-tests-macos  ]   |         # Handlers raise an exception if no one else should try to handle\n[tests/basic-tests-macos  ]   |         # the request, or return None if they can't but another handler\n[tests/basic-tests-macos  ]   |         # could.  Otherwise, they return the response.\n[tests/basic-tests-macos  ]   |         handlers = chain.get(kind, ())\n[tests/basic-tests-macos  ]   |         for handler in handlers:\n[tests/basic-tests-macos  ]   |             func = getattr(handler, meth_name)\n[tests/basic-tests-macos  ]   | >           result = func(*args)\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/urllib/request.py:494: \n[tests/basic-tests-macos  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | self = <urllib.request.HTTPDefaultErrorHandler object at 0x7f77d5f50df0>\n[tests/basic-tests-macos  ]   | req = <urllib.request.Request object at 0x7f77d5da9a30>\n[tests/basic-tests-macos  ]   | fp = <http.client.HTTPResponse object at 0x7f77d5da99a0>, code = 403\n[tests/basic-tests-macos  ]   | msg = 'Forbidden', hdrs = <http.client.HTTPMessage object at 0x7f77d5da9460>\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   |     def http_error_default(self, req, fp, code, msg, hdrs):\n[tests/basic-tests-macos  ]   | >       raise HTTPError(req.full_url, code, msg, hdrs, fp)\n[tests/basic-tests-macos  ]   | E       urllib.error.HTTPError: HTTP Error 403: Forbidden\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/urllib/request.py:641: HTTPError\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | During handling of the above exception, another exception occurred:\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   |     def setup_module():\n[tests/basic-tests-macos  ]   | >       meta('9780375869020')  #  <-- set\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | isbntools/test/test_cache.py:14: \n[tests/basic-tests-macos  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-macos  ]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/isbnlib/_ext.py:25: in meta\n[tests/basic-tests-macos  ]   |     return query(isbn, service) if isbn else {}\n[tests/basic-tests-macos  ]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/isbnlib/dev/_decorators.py:27: in memoized_func\n[tests/basic-tests-macos  ]   |     value = func(*args, **kwargs)\n[tests/basic-tests-macos  ]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/isbnlib/_metadata.py:33: in query\n[tests/basic-tests-macos  ]   |     meta = services[service](isbn)\n[tests/basic-tests-macos  ]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/isbnlib/_goob.py:72: in query\n[tests/basic-tests-macos  ]   |     data = wquery(SERVICE_URL.format(isbn='isbn:' + isbn), user_agent=UA)\n[tests/basic-tests-macos  ]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/isbnlib/dev/webquery.py:65: in query\n[tests/basic-tests-macos  ]   |     wq = WEBQuery(url, user_agent, throttling)\n[tests/basic-tests-macos  ]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/isbnlib/dev/webquery.py:32: in __init__\n[tests/basic-tests-macos  ]   |     self.data = webservice.query(service_url, ua)\n[tests/basic-tests-macos  ]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/isbnlib/dev/_decorators.py:47: in memoized_func\n[tests/basic-tests-macos  ]   |     value = func(*args, **kwargs)\n[tests/basic-tests-macos  ]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/isbnlib/dev/webservice.py:113: in query\n[tests/basic-tests-macos  ]   |     data = service.data()\n[tests/basic-tests-macos  ]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/isbnlib/dev/webservice.py:93: in data\n[tests/basic-tests-macos  ]   |     res = self.response()\n[tests/basic-tests-macos  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | self = <isbnlib.dev.webservice.WEBService object at 0x7f77d5da9be0>\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   |     def response(self):\n[tests/basic-tests-macos  ]   |         \"\"\"Check errors on response.\"\"\"\n[tests/basic-tests-macos  ]   |         # TODO(http 102)\n[tests/basic-tests-macos  ]   |         # How to handle \"102 http's code\"?\n[tests/basic-tests-macos  ]   |         # - urlopen doesn't catch a 102 code!\n[tests/basic-tests-macos  ]   |         #   https://docs.python.org/3/howto/urllib2.html#error-codes\n[tests/basic-tests-macos  ]   |         try:\n[tests/basic-tests-macos  ]   |             response = urlopen(\n[tests/basic-tests-macos  ]   |                 self._request,\n[tests/basic-tests-macos  ]   |                 timeout=options.get('URLOPEN_TIMEOUT'),\n[tests/basic-tests-macos  ]   |             )\n[tests/basic-tests-macos  ]   |             LOGGER.debug('Request headers:\\n%s', self._request.header_items())\n[tests/basic-tests-macos  ]   |         except HTTPError as e:  # pragma: no cover\n[tests/basic-tests-macos  ]   |             LOGGER.critical(\n[tests/basic-tests-macos  ]   |                 'ISBNLibHTTPError for %s with code %s [%s]',\n[tests/basic-tests-macos  ]   |                 self._url,\n[tests/basic-tests-macos  ]   |                 e.code,\n[tests/basic-tests-macos  ]   |                 e.msg,\n[tests/basic-tests-macos  ]   |             )\n[tests/basic-tests-macos  ]   |             if e.code in (401, 403, 429):\n[tests/basic-tests-macos  ]   | >               raise ISBNLibHTTPError('%s Are you making many requests?' %\n[tests/basic-tests-macos  ]   |                                        e.code)\n[tests/basic-tests-macos  ]   | E               isbnlib.dev._exceptions.ISBNLibHTTPError: an HTTP error has ocurred (403 Are you making many requests?)\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/isbnlib/dev/webservice.py:69: ISBNLibHTTPError\n[tests/basic-tests-macos  ]   | ------------------------------ Captured log setup ------------------------------\n[tests/basic-tests-macos  ]   | CRITICAL isbnlib.dev.webservice:webservice.py:62 ISBNLibHTTPError for https://www.googleapis.com/books/v1/volumes?q=isbn:9780375869020&fields=items/volumeInfo(title,subtitle,authors,publisher,publishedDate,language,industryIdentifiers,description,imageLinks)&maxResults=1 with code 403 [Forbidden]\n[tests/basic-tests-macos  ]   | _________________ ERROR at setup of test_shelvecache_editions __________________\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | self = <isbnlib.dev.webservice.WEBService object at 0x7f77d5da9be0>\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   |     def response(self):\n[tests/basic-tests-macos  ]   |         \"\"\"Check errors on response.\"\"\"\n[tests/basic-tests-macos  ]   |         # TODO(http 102)\n[tests/basic-tests-macos  ]   |         # How to handle \"102 http's code\"?\n[tests/basic-tests-macos  ]   |         # - urlopen doesn't catch a 102 code!\n[tests/basic-tests-macos  ]   |         #   https://docs.python.org/3/howto/urllib2.html#error-codes\n[tests/basic-tests-macos  ]   |         try:\n[tests/basic-tests-macos  ]   | >           response = urlopen(\n[tests/basic-tests-macos  ]   |                 self._request,\n[tests/basic-tests-macos  ]   |                 timeout=options.get('URLOPEN_TIMEOUT'),\n[tests/basic-tests-macos  ]   |             )\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/isbnlib/dev/webservice.py:56: \n[tests/basic-tests-macos  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | url = <urllib.request.Request object at 0x7f77d5da9a30>, data = None\n[tests/basic-tests-macos  ]   | timeout = 10.0\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   |     def urlopen(url, data=None, timeout=socket._GLOBAL_DEFAULT_TIMEOUT,\n[tests/basic-tests-macos  ]   |                 *, cafile=None, capath=None, cadefault=False, context=None):\n[tests/basic-tests-macos  ]   |         '''Open the URL url, which can be either a string or a Request object.\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         *data* must be an object specifying additional data to be sent to\n[tests/basic-tests-macos  ]   |         the server, or None if no such data is needed.  See Request for\n[tests/basic-tests-macos  ]   |         details.\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         urllib.request module uses HTTP/1.1 and includes a \"Connection:close\"\n[tests/basic-tests-macos  ]   |         header in its HTTP requests.\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         The optional *timeout* parameter specifies a timeout in seconds for\n[tests/basic-tests-macos  ]   |         blocking operations like the connection attempt (if not specified, the\n[tests/basic-tests-macos  ]   |         global default timeout setting will be used). This only works for HTTP,\n[tests/basic-tests-macos  ]   |         HTTPS and FTP connections.\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         If *context* is specified, it must be a ssl.SSLContext instance describing\n[tests/basic-tests-macos  ]   |         the various SSL options. See HTTPSConnection for more details.\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         The optional *cafile* and *capath* parameters specify a set of trusted CA\n[tests/basic-tests-macos  ]   |         certificates for HTTPS requests. cafile should point to a single file\n[tests/basic-tests-macos  ]   |         containing a bundle of CA certificates, whereas capath should point to a\n[tests/basic-tests-macos  ]   |         directory of hashed certificate files. More information can be found in\n[tests/basic-tests-macos  ]   |         ssl.SSLContext.load_verify_locations().\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         The *cadefault* parameter is ignored.\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         This function always returns an object which can work as a\n[tests/basic-tests-macos  ]   |         context manager and has the properties url, headers, and status.\n[tests/basic-tests-macos  ]   |         See urllib.response.addinfourl for more detail on these properties.\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         For HTTP and HTTPS URLs, this function returns a http.client.HTTPResponse\n[tests/basic-tests-macos  ]   |         object slightly modified. In addition to the three new methods above, the\n[tests/basic-tests-macos  ]   |         msg attribute contains the same information as the reason attribute ---\n[tests/basic-tests-macos  ]   |         the reason phrase returned by the server --- instead of the response\n[tests/basic-tests-macos  ]   |         headers as it is specified in the documentation for HTTPResponse.\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         For FTP, file, and data URLs and requests explicitly handled by legacy\n[tests/basic-tests-macos  ]   |         URLopener and FancyURLopener classes, this function returns a\n[tests/basic-tests-macos  ]   |         urllib.response.addinfourl object.\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         Note that None may be returned if no handler handles the request (though\n[tests/basic-tests-macos  ]   |         the default installed global OpenerDirector uses UnknownHandler to ensure\n[tests/basic-tests-macos  ]   |         this never happens).\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         In addition, if proxy settings are detected (for example, when a *_proxy\n[tests/basic-tests-macos  ]   |         environment variable like http_proxy is set), ProxyHandler is default\n[tests/basic-tests-macos  ]   |         installed and makes sure the requests are handled through the proxy.\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         '''\n[tests/basic-tests-macos  ]   |         global _opener\n[tests/basic-tests-macos  ]   |         if cafile or capath or cadefault:\n[tests/basic-tests-macos  ]   |             import warnings\n[tests/basic-tests-macos  ]   |             warnings.warn(\"cafile, capath and cadefault are deprecated, use a \"\n[tests/basic-tests-macos  ]   |                           \"custom context instead.\", DeprecationWarning, 2)\n[tests/basic-tests-macos  ]   |             if context is not None:\n[tests/basic-tests-macos  ]   |                 raise ValueError(\n[tests/basic-tests-macos  ]   |                     \"You can't pass both context and any of cafile, capath, and \"\n[tests/basic-tests-macos  ]   |                     \"cadefault\"\n[tests/basic-tests-macos  ]   |                 )\n[tests/basic-tests-macos  ]   |             if not _have_ssl:\n[tests/basic-tests-macos  ]   |                 raise ValueError('SSL support not available')\n[tests/basic-tests-macos  ]   |             context = ssl.create_default_context(ssl.Purpose.SERVER_AUTH,\n[tests/basic-tests-macos  ]   |                                                  cafile=cafile,\n[tests/basic-tests-macos  ]   |                                                  capath=capath)\n[tests/basic-tests-macos  ]   |             https_handler = HTTPSHandler(context=context)\n[tests/basic-tests-macos  ]   |             opener = build_opener(https_handler)\n[tests/basic-tests-macos  ]   |         elif context:\n[tests/basic-tests-macos  ]   |             https_handler = HTTPSHandler(context=context)\n[tests/basic-tests-macos  ]   |             opener = build_opener(https_handler)\n[tests/basic-tests-macos  ]   |         elif _opener is None:\n[tests/basic-tests-macos  ]   |             _opener = opener = build_opener()\n[tests/basic-tests-macos  ]   |         else:\n[tests/basic-tests-macos  ]   |             opener = _opener\n[tests/basic-tests-macos  ]   | >       return opener.open(url, data, timeout)\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/urllib/request.py:214: \n[tests/basic-tests-macos  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | self = <urllib.request.OpenerDirector object at 0x7f77d5f50280>\n[tests/basic-tests-macos  ]   | fullurl = <urllib.request.Request object at 0x7f77d5da9a30>, data = None\n[tests/basic-tests-macos  ]   | timeout = 10.0\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   |     def open(self, fullurl, data=None, timeout=socket._GLOBAL_DEFAULT_TIMEOUT):\n[tests/basic-tests-macos  ]   |         # accept a URL or a Request object\n[tests/basic-tests-macos  ]   |         if isinstance(fullurl, str):\n[tests/basic-tests-macos  ]   |             req = Request(fullurl, data)\n[tests/basic-tests-macos  ]   |         else:\n[tests/basic-tests-macos  ]   |             req = fullurl\n[tests/basic-tests-macos  ]   |             if data is not None:\n[tests/basic-tests-macos  ]   |                 req.data = data\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         req.timeout = timeout\n[tests/basic-tests-macos  ]   |         protocol = req.type\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         # pre-process request\n[tests/basic-tests-macos  ]   |         meth_name = protocol+\"_request\"\n[tests/basic-tests-macos  ]   |         for processor in self.process_request.get(protocol, []):\n[tests/basic-tests-macos  ]   |             meth = getattr(processor, meth_name)\n[tests/basic-tests-macos  ]   |             req = meth(req)\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         sys.audit('urllib.Request', req.full_url, req.data, req.headers, req.get_method())\n[tests/basic-tests-macos  ]   |         response = self._open(req, data)\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         # post-process response\n[tests/basic-tests-macos  ]   |         meth_name = protocol+\"_response\"\n[tests/basic-tests-macos  ]   |         for processor in self.process_response.get(protocol, []):\n[tests/basic-tests-macos  ]   |             meth = getattr(processor, meth_name)\n[tests/basic-tests-macos  ]   | >           response = meth(req, response)\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/urllib/request.py:523: \n[tests/basic-tests-macos  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | self = <urllib.request.HTTPErrorProcessor object at 0x7f77d5f502b0>\n[tests/basic-tests-macos  ]   | request = <urllib.request.Request object at 0x7f77d5da9a30>\n[tests/basic-tests-macos  ]   | response = <http.client.HTTPResponse object at 0x7f77d5da99a0>\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   |     def http_response(self, request, response):\n[tests/basic-tests-macos  ]   |         code, msg, hdrs = response.code, response.msg, response.info()\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         # According to RFC 2616, \"2xx\" code indicates that the client's\n[tests/basic-tests-macos  ]   |         # request was successfully received, understood, and accepted.\n[tests/basic-tests-macos  ]   |         if not (200 <= code < 300):\n[tests/basic-tests-macos  ]   | >           response = self.parent.error(\n[tests/basic-tests-macos  ]   |                 'http', request, response, code, msg, hdrs)\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/urllib/request.py:632: \n[tests/basic-tests-macos  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | self = <urllib.request.OpenerDirector object at 0x7f77d5f50280>, proto = 403\n[tests/basic-tests-macos  ]   | args = ({'default': [<urllib.request.HTTPDefaultErrorHandler object at 0x7f77d5f50df0>], 301: [<urllib.request.HTTPRedirectHa...ult', <urllib.request.Request object at 0x7f77d5da9a30>, <http.client.HTTPResponse object at 0x7f77d5da99a0>, 403, ...)\n[tests/basic-tests-macos  ]   | dict = {'default': [<urllib.request.HTTPDefaultErrorHandler object at 0x7f77d5f50df0>], 301: [<urllib.request.HTTPRedirectHan...PRedirectHandler object at 0x7f77d5f50f70>], 303: [<urllib.request.HTTPRedirectHandler object at 0x7f77d5f50f70>], ...}\n[tests/basic-tests-macos  ]   | meth_name = 'http_error_403', http_err = 1\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   |     def error(self, proto, *args):\n[tests/basic-tests-macos  ]   |         if proto in ('http', 'https'):\n[tests/basic-tests-macos  ]   |             # XXX http[s] protocols are special-cased\n[tests/basic-tests-macos  ]   |             dict = self.handle_error['http'] # https is not different than http\n[tests/basic-tests-macos  ]   |             proto = args[2]  # YUCK!\n[tests/basic-tests-macos  ]   |             meth_name = 'http_error_%s' % proto\n[tests/basic-tests-macos  ]   |             http_err = 1\n[tests/basic-tests-macos  ]   |             orig_args = args\n[tests/basic-tests-macos  ]   |         else:\n[tests/basic-tests-macos  ]   |             dict = self.handle_error\n[tests/basic-tests-macos  ]   |             meth_name = proto + '_error'\n[tests/basic-tests-macos  ]   |             http_err = 0\n[tests/basic-tests-macos  ]   |         args = (dict, proto, meth_name) + args\n[tests/basic-tests-macos  ]   |         result = self._call_chain(*args)\n[tests/basic-tests-macos  ]   |         if result:\n[tests/basic-tests-macos  ]   |             return result\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         if http_err:\n[tests/basic-tests-macos  ]   |             args = (dict, 'default', 'http_error_default') + orig_args\n[tests/basic-tests-macos  ]   | >           return self._call_chain(*args)\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/urllib/request.py:561: \n[tests/basic-tests-macos  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | self = <urllib.request.OpenerDirector object at 0x7f77d5f50280>\n[tests/basic-tests-macos  ]   | chain = {'default': [<urllib.request.HTTPDefaultErrorHandler object at 0x7f77d5f50df0>], 301: [<urllib.request.HTTPRedirectHan...PRedirectHandler object at 0x7f77d5f50f70>], 303: [<urllib.request.HTTPRedirectHandler object at 0x7f77d5f50f70>], ...}\n[tests/basic-tests-macos  ]   | kind = 'default', meth_name = 'http_error_default'\n[tests/basic-tests-macos  ]   | args = (<urllib.request.Request object at 0x7f77d5da9a30>, <http.client.HTTPResponse object at 0x7f77d5da99a0>, 403, 'Forbidden', <http.client.HTTPMessage object at 0x7f77d5da9460>)\n[tests/basic-tests-macos  ]   | handlers = [<urllib.request.HTTPDefaultErrorHandler object at 0x7f77d5f50df0>]\n[tests/basic-tests-macos  ]   | handler = <urllib.request.HTTPDefaultErrorHandler object at 0x7f77d5f50df0>\n[tests/basic-tests-macos  ]   | func = <bound method HTTPDefaultErrorHandler.http_error_default of <urllib.request.HTTPDefaultErrorHandler object at 0x7f77d5f50df0>>\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   |     def _call_chain(self, chain, kind, meth_name, *args):\n[tests/basic-tests-macos  ]   |         # Handlers raise an exception if no one else should try to handle\n[tests/basic-tests-macos  ]   |         # the request, or return None if they can't but another handler\n[tests/basic-tests-macos  ]   |         # could.  Otherwise, they return the response.\n[tests/basic-tests-macos  ]   |         handlers = chain.get(kind, ())\n[tests/basic-tests-macos  ]   |         for handler in handlers:\n[tests/basic-tests-macos  ]   |             func = getattr(handler, meth_name)\n[tests/basic-tests-macos  ]   | >           result = func(*args)\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/urllib/request.py:494: \n[tests/basic-tests-macos  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | self = <urllib.request.HTTPDefaultErrorHandler object at 0x7f77d5f50df0>\n[tests/basic-tests-macos  ]   | req = <urllib.request.Request object at 0x7f77d5da9a30>\n[tests/basic-tests-macos  ]   | fp = <http.client.HTTPResponse object at 0x7f77d5da99a0>, code = 403\n[tests/basic-tests-macos  ]   | msg = 'Forbidden', hdrs = <http.client.HTTPMessage object at 0x7f77d5da9460>\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   |     def http_error_default(self, req, fp, code, msg, hdrs):\n[tests/basic-tests-macos  ]   | >       raise HTTPError(req.full_url, code, msg, hdrs, fp)\n[tests/basic-tests-macos  ]   | E       urllib.error.HTTPError: HTTP Error 403: Forbidden\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/urllib/request.py:641: HTTPError\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | During handling of the above exception, another exception occurred:\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   |     def setup_module():\n[tests/basic-tests-macos  ]   | >       meta('9780375869020')  #  <-- set\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | isbntools/test/test_cache.py:14: \n[tests/basic-tests-macos  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-macos  ]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/isbnlib/_ext.py:25: in meta\n[tests/basic-tests-macos  ]   |     return query(isbn, service) if isbn else {}\n[tests/basic-tests-macos  ]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/isbnlib/dev/_decorators.py:27: in memoized_func\n[tests/basic-tests-macos  ]   |     value = func(*args, **kwargs)\n[tests/basic-tests-macos  ]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/isbnlib/_metadata.py:33: in query\n[tests/basic-tests-macos  ]   |     meta = services[service](isbn)\n[tests/basic-tests-macos  ]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/isbnlib/_goob.py:72: in query\n[tests/basic-tests-macos  ]   |     data = wquery(SERVICE_URL.format(isbn='isbn:' + isbn), user_agent=UA)\n[tests/basic-tests-macos  ]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/isbnlib/dev/webquery.py:65: in query\n[tests/basic-tests-macos  ]   |     wq = WEBQuery(url, user_agent, throttling)\n[tests/basic-tests-macos  ]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/isbnlib/dev/webquery.py:32: in __init__\n[tests/basic-tests-macos  ]   |     self.data = webservice.query(service_url, ua)\n[tests/basic-tests-macos  ]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/isbnlib/dev/_decorators.py:47: in memoized_func\n[tests/basic-tests-macos  ]   |     value = func(*args, **kwargs)\n[tests/basic-tests-macos  ]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/isbnlib/dev/webservice.py:113: in query\n[tests/basic-tests-macos  ]   |     data = service.data()\n[tests/basic-tests-macos  ]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/isbnlib/dev/webservice.py:93: in data\n[tests/basic-tests-macos  ]   |     res = self.response()\n[tests/basic-tests-macos  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | self = <isbnlib.dev.webservice.WEBService object at 0x7f77d5da9be0>\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   |     def response(self):\n[tests/basic-tests-macos  ]   |         \"\"\"Check errors on response.\"\"\"\n[tests/basic-tests-macos  ]   |         # TODO(http 102)\n[tests/basic-tests-macos  ]   |         # How to handle \"102 http's code\"?\n[tests/basic-tests-macos  ]   |         # - urlopen doesn't catch a 102 code!\n[tests/basic-tests-macos  ]   |         #   https://docs.python.org/3/howto/urllib2.html#error-codes\n[tests/basic-tests-macos  ]   |         try:\n[tests/basic-tests-macos  ]   |             response = urlopen(\n[tests/basic-tests-macos  ]   |                 self._request,\n[tests/basic-tests-macos  ]   |                 timeout=options.get('URLOPEN_TIMEOUT'),\n[tests/basic-tests-macos  ]   |             )\n[tests/basic-tests-macos  ]   |             LOGGER.debug('Request headers:\\n%s', self._request.header_items())\n[tests/basic-tests-macos  ]   |         except HTTPError as e:  # pragma: no cover\n[tests/basic-tests-macos  ]   |             LOGGER.critical(\n[tests/basic-tests-macos  ]   |                 'ISBNLibHTTPError for %s with code %s [%s]',\n[tests/basic-tests-macos  ]   |                 self._url,\n[tests/basic-tests-macos  ]   |                 e.code,\n[tests/basic-tests-macos  ]   |                 e.msg,\n[tests/basic-tests-macos  ]   |             )\n[tests/basic-tests-macos  ]   |             if e.code in (401, 403, 429):\n[tests/basic-tests-macos  ]   | >               raise ISBNLibHTTPError('%s Are you making many requests?' %\n[tests/basic-tests-macos  ]   |                                        e.code)\n[tests/basic-tests-macos  ]   | E               isbnlib.dev._exceptions.ISBNLibHTTPError: an HTTP error has ocurred (403 Are you making many requests?)\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/isbnlib/dev/webservice.py:69: ISBNLibHTTPError\n[tests/basic-tests-macos  ]   | __________________ ERROR at setup of test_shelvecache_setget ___________________\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | self = <isbnlib.dev.webservice.WEBService object at 0x7f77d5da9be0>\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   |     def response(self):\n[tests/basic-tests-macos  ]   |         \"\"\"Check errors on response.\"\"\"\n[tests/basic-tests-macos  ]   |         # TODO(http 102)\n[tests/basic-tests-macos  ]   |         # How to handle \"102 http's code\"?\n[tests/basic-tests-macos  ]   |         # - urlopen doesn't catch a 102 code!\n[tests/basic-tests-macos  ]   |         #   https://docs.python.org/3/howto/urllib2.html#error-codes\n[tests/basic-tests-macos  ]   |         try:\n[tests/basic-tests-macos  ]   | >           response = urlopen(\n[tests/basic-tests-macos  ]   |                 self._request,\n[tests/basic-tests-macos  ]   |                 timeout=options.get('URLOPEN_TIMEOUT'),\n[tests/basic-tests-macos  ]   |             )\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/isbnlib/dev/webservice.py:56: \n[tests/basic-tests-macos  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | url = <urllib.request.Request object at 0x7f77d5da9a30>, data = None\n[tests/basic-tests-macos  ]   | timeout = 10.0\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   |     def urlopen(url, data=None, timeout=socket._GLOBAL_DEFAULT_TIMEOUT,\n[tests/basic-tests-macos  ]   |                 *, cafile=None, capath=None, cadefault=False, context=None):\n[tests/basic-tests-macos  ]   |         '''Open the URL url, which can be either a string or a Request object.\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         *data* must be an object specifying additional data to be sent to\n[tests/basic-tests-macos  ]   |         the server, or None if no such data is needed.  See Request for\n[tests/basic-tests-macos  ]   |         details.\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         urllib.request module uses HTTP/1.1 and includes a \"Connection:close\"\n[tests/basic-tests-macos  ]   |         header in its HTTP requests.\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         The optional *timeout* parameter specifies a timeout in seconds for\n[tests/basic-tests-macos  ]   |         blocking operations like the connection attempt (if not specified, the\n[tests/basic-tests-macos  ]   |         global default timeout setting will be used). This only works for HTTP,\n[tests/basic-tests-macos  ]   |         HTTPS and FTP connections.\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         If *context* is specified, it must be a ssl.SSLContext instance describing\n[tests/basic-tests-macos  ]   |         the various SSL options. See HTTPSConnection for more details.\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         The optional *cafile* and *capath* parameters specify a set of trusted CA\n[tests/basic-tests-macos  ]   |         certificates for HTTPS requests. cafile should point to a single file\n[tests/basic-tests-macos  ]   |         containing a bundle of CA certificates, whereas capath should point to a\n[tests/basic-tests-macos  ]   |         directory of hashed certificate files. More information can be found in\n[tests/basic-tests-macos  ]   |         ssl.SSLContext.load_verify_locations().\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         The *cadefault* parameter is ignored.\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         This function always returns an object which can work as a\n[tests/basic-tests-macos  ]   |         context manager and has the properties url, headers, and status.\n[tests/basic-tests-macos  ]   |         See urllib.response.addinfourl for more detail on these properties.\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         For HTTP and HTTPS URLs, this function returns a http.client.HTTPResponse\n[tests/basic-tests-macos  ]   |         object slightly modified. In addition to the three new methods above, the\n[tests/basic-tests-macos  ]   |         msg attribute contains the same information as the reason attribute ---\n[tests/basic-tests-macos  ]   |         the reason phrase returned by the server --- instead of the response\n[tests/basic-tests-macos  ]   |         headers as it is specified in the documentation for HTTPResponse.\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         For FTP, file, and data URLs and requests explicitly handled by legacy\n[tests/basic-tests-macos  ]   |         URLopener and FancyURLopener classes, this function returns a\n[tests/basic-tests-macos  ]   |         urllib.response.addinfourl object.\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         Note that None may be returned if no handler handles the request (though\n[tests/basic-tests-macos  ]   |         the default installed global OpenerDirector uses UnknownHandler to ensure\n[tests/basic-tests-macos  ]   |         this never happens).\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         In addition, if proxy settings are detected (for example, when a *_proxy\n[tests/basic-tests-macos  ]   |         environment variable like http_proxy is set), ProxyHandler is default\n[tests/basic-tests-macos  ]   |         installed and makes sure the requests are handled through the proxy.\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         '''\n[tests/basic-tests-macos  ]   |         global _opener\n[tests/basic-tests-macos  ]   |         if cafile or capath or cadefault:\n[tests/basic-tests-macos  ]   |             import warnings\n[tests/basic-tests-macos  ]   |             warnings.warn(\"cafile, capath and cadefault are deprecated, use a \"\n[tests/basic-tests-macos  ]   |                           \"custom context instead.\", DeprecationWarning, 2)\n[tests/basic-tests-macos  ]   |             if context is not None:\n[tests/basic-tests-macos  ]   |                 raise ValueError(\n[tests/basic-tests-macos  ]   |                     \"You can't pass both context and any of cafile, capath, and \"\n[tests/basic-tests-macos  ]   |                     \"cadefault\"\n[tests/basic-tests-macos  ]   |                 )\n[tests/basic-tests-macos  ]   |             if not _have_ssl:\n[tests/basic-tests-macos  ]   |                 raise ValueError('SSL support not available')\n[tests/basic-tests-macos  ]   |             context = ssl.create_default_context(ssl.Purpose.SERVER_AUTH,\n[tests/basic-tests-macos  ]   |                                                  cafile=cafile,\n[tests/basic-tests-macos  ]   |                                                  capath=capath)\n[tests/basic-tests-macos  ]   |             https_handler = HTTPSHandler(context=context)\n[tests/basic-tests-macos  ]   |             opener = build_opener(https_handler)\n[tests/basic-tests-macos  ]   |         elif context:\n[tests/basic-tests-macos  ]   |             https_handler = HTTPSHandler(context=context)\n[tests/basic-tests-macos  ]   |             opener = build_opener(https_handler)\n[tests/basic-tests-macos  ]   |         elif _opener is None:\n[tests/basic-tests-macos  ]   |             _opener = opener = build_opener()\n[tests/basic-tests-macos  ]   |         else:\n[tests/basic-tests-macos  ]   |             opener = _opener\n[tests/basic-tests-macos  ]   | >       return opener.open(url, data, timeout)\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/urllib/request.py:214: \n[tests/basic-tests-macos  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | self = <urllib.request.OpenerDirector object at 0x7f77d5f50280>\n[tests/basic-tests-macos  ]   | fullurl = <urllib.request.Request object at 0x7f77d5da9a30>, data = None\n[tests/basic-tests-macos  ]   | timeout = 10.0\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   |     def open(self, fullurl, data=None, timeout=socket._GLOBAL_DEFAULT_TIMEOUT):\n[tests/basic-tests-macos  ]   |         # accept a URL or a Request object\n[tests/basic-tests-macos  ]   |         if isinstance(fullurl, str):\n[tests/basic-tests-macos  ]   |             req = Request(fullurl, data)\n[tests/basic-tests-macos  ]   |         else:\n[tests/basic-tests-macos  ]   |             req = fullurl\n[tests/basic-tests-macos  ]   |             if data is not None:\n[tests/basic-tests-macos  ]   |                 req.data = data\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         req.timeout = timeout\n[tests/basic-tests-macos  ]   |         protocol = req.type\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         # pre-process request\n[tests/basic-tests-macos  ]   |         meth_name = protocol+\"_request\"\n[tests/basic-tests-macos  ]   |         for processor in self.process_request.get(protocol, []):\n[tests/basic-tests-macos  ]   |             meth = getattr(processor, meth_name)\n[tests/basic-tests-macos  ]   |             req = meth(req)\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         sys.audit('urllib.Request', req.full_url, req.data, req.headers, req.get_method())\n[tests/basic-tests-macos  ]   |         response = self._open(req, data)\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         # post-process response\n[tests/basic-tests-macos  ]   |         meth_name = protocol+\"_response\"\n[tests/basic-tests-macos  ]   |         for processor in self.process_response.get(protocol, []):\n[tests/basic-tests-macos  ]   |             meth = getattr(processor, meth_name)\n[tests/basic-tests-macos  ]   | >           response = meth(req, response)\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/urllib/request.py:523: \n[tests/basic-tests-macos  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | self = <urllib.request.HTTPErrorProcessor object at 0x7f77d5f502b0>\n[tests/basic-tests-macos  ]   | request = <urllib.request.Request object at 0x7f77d5da9a30>\n[tests/basic-tests-macos  ]   | response = <http.client.HTTPResponse object at 0x7f77d5da99a0>\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   |     def http_response(self, request, response):\n[tests/basic-tests-macos  ]   |         code, msg, hdrs = response.code, response.msg, response.info()\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         # According to RFC 2616, \"2xx\" code indicates that the client's\n[tests/basic-tests-macos  ]   |         # request was successfully received, understood, and accepted.\n[tests/basic-tests-macos  ]   |         if not (200 <= code < 300):\n[tests/basic-tests-macos  ]   | >           response = self.parent.error(\n[tests/basic-tests-macos  ]   |                 'http', request, response, code, msg, hdrs)\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/urllib/request.py:632: \n[tests/basic-tests-macos  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | self = <urllib.request.OpenerDirector object at 0x7f77d5f50280>, proto = 403\n[tests/basic-tests-macos  ]   | args = ({'default': [<urllib.request.HTTPDefaultErrorHandler object at 0x7f77d5f50df0>], 301: [<urllib.request.HTTPRedirectHa...ult', <urllib.request.Request object at 0x7f77d5da9a30>, <http.client.HTTPResponse object at 0x7f77d5da99a0>, 403, ...)\n[tests/basic-tests-macos  ]   | dict = {'default': [<urllib.request.HTTPDefaultErrorHandler object at 0x7f77d5f50df0>], 301: [<urllib.request.HTTPRedirectHan...PRedirectHandler object at 0x7f77d5f50f70>], 303: [<urllib.request.HTTPRedirectHandler object at 0x7f77d5f50f70>], ...}\n[tests/basic-tests-macos  ]   | meth_name = 'http_error_403', http_err = 1\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   |     def error(self, proto, *args):\n[tests/basic-tests-macos  ]   |         if proto in ('http', 'https'):\n[tests/basic-tests-macos  ]   |             # XXX http[s] protocols are special-cased\n[tests/basic-tests-macos  ]   |             dict = self.handle_error['http'] # https is not different than http\n[tests/basic-tests-macos  ]   |             proto = args[2]  # YUCK!\n[tests/basic-tests-macos  ]   |             meth_name = 'http_error_%s' % proto\n[tests/basic-tests-macos  ]   |             http_err = 1\n[tests/basic-tests-macos  ]   |             orig_args = args\n[tests/basic-tests-macos  ]   |         else:\n[tests/basic-tests-macos  ]   |             dict = self.handle_error\n[tests/basic-tests-macos  ]   |             meth_name = proto + '_error'\n[tests/basic-tests-macos  ]   |             http_err = 0\n[tests/basic-tests-macos  ]   |         args = (dict, proto, meth_name) + args\n[tests/basic-tests-macos  ]   |         result = self._call_chain(*args)\n[tests/basic-tests-macos  ]   |         if result:\n[tests/basic-tests-macos  ]   |             return result\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         if http_err:\n[tests/basic-tests-macos  ]   |             args = (dict, 'default', 'http_error_default') + orig_args\n[tests/basic-tests-macos  ]   | >           return self._call_chain(*args)\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/urllib/request.py:561: \n[tests/basic-tests-macos  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | self = <urllib.request.OpenerDirector object at 0x7f77d5f50280>\n[tests/basic-tests-macos  ]   | chain = {'default': [<urllib.request.HTTPDefaultErrorHandler object at 0x7f77d5f50df0>], 301: [<urllib.request.HTTPRedirectHan...PRedirectHandler object at 0x7f77d5f50f70>], 303: [<urllib.request.HTTPRedirectHandler object at 0x7f77d5f50f70>], ...}\n[tests/basic-tests-macos  ]   | kind = 'default', meth_name = 'http_error_default'\n[tests/basic-tests-macos  ]   | args = (<urllib.request.Request object at 0x7f77d5da9a30>, <http.client.HTTPResponse object at 0x7f77d5da99a0>, 403, 'Forbidden', <http.client.HTTPMessage object at 0x7f77d5da9460>)\n[tests/basic-tests-macos  ]   | handlers = [<urllib.request.HTTPDefaultErrorHandler object at 0x7f77d5f50df0>]\n[tests/basic-tests-macos  ]   | handler = <urllib.request.HTTPDefaultErrorHandler object at 0x7f77d5f50df0>\n[tests/basic-tests-macos  ]   | func = <bound method HTTPDefaultErrorHandler.http_error_default of <urllib.request.HTTPDefaultErrorHandler object at 0x7f77d5f50df0>>\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   |     def _call_chain(self, chain, kind, meth_name, *args):\n[tests/basic-tests-macos  ]   |         # Handlers raise an exception if no one else should try to handle\n[tests/basic-tests-macos  ]   |         # the request, or return None if they can't but another handler\n[tests/basic-tests-macos  ]   |         # could.  Otherwise, they return the response.\n[tests/basic-tests-macos  ]   |         handlers = chain.get(kind, ())\n[tests/basic-tests-macos  ]   |         for handler in handlers:\n[tests/basic-tests-macos  ]   |             func = getattr(handler, meth_name)\n[tests/basic-tests-macos  ]   | >           result = func(*args)\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/urllib/request.py:494: \n[tests/basic-tests-macos  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | self = <urllib.request.HTTPDefaultErrorHandler object at 0x7f77d5f50df0>\n[tests/basic-tests-macos  ]   | req = <urllib.request.Request object at 0x7f77d5da9a30>\n[tests/basic-tests-macos  ]   | fp = <http.client.HTTPResponse object at 0x7f77d5da99a0>, code = 403\n[tests/basic-tests-macos  ]   | msg = 'Forbidden', hdrs = <http.client.HTTPMessage object at 0x7f77d5da9460>\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   |     def http_error_default(self, req, fp, code, msg, hdrs):\n[tests/basic-tests-macos  ]   | >       raise HTTPError(req.full_url, code, msg, hdrs, fp)\n[tests/basic-tests-macos  ]   | E       urllib.error.HTTPError: HTTP Error 403: Forbidden\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/urllib/request.py:641: HTTPError\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | During handling of the above exception, another exception occurred:\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   |     def setup_module():\n[tests/basic-tests-macos  ]   | >       meta('9780375869020')  #  <-- set\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | isbntools/test/test_cache.py:14: \n[tests/basic-tests-macos  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-macos  ]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/isbnlib/_ext.py:25: in meta\n[tests/basic-tests-macos  ]   |     return query(isbn, service) if isbn else {}\n[tests/basic-tests-macos  ]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/isbnlib/dev/_decorators.py:27: in memoized_func\n[tests/basic-tests-macos  ]   |     value = func(*args, **kwargs)\n[tests/basic-tests-macos  ]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/isbnlib/_metadata.py:33: in query\n[tests/basic-tests-macos  ]   |     meta = services[service](isbn)\n[tests/basic-tests-macos  ]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/isbnlib/_goob.py:72: in query\n[tests/basic-tests-macos  ]   |     data = wquery(SERVICE_URL.format(isbn='isbn:' + isbn), user_agent=UA)\n[tests/basic-tests-macos  ]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/isbnlib/dev/webquery.py:65: in query\n[tests/basic-tests-macos  ]   |     wq = WEBQuery(url, user_agent, throttling)\n[tests/basic-tests-macos  ]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/isbnlib/dev/webquery.py:32: in __init__\n[tests/basic-tests-macos  ]   |     self.data = webservice.query(service_url, ua)\n[tests/basic-tests-macos  ]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/isbnlib/dev/_decorators.py:47: in memoized_func\n[tests/basic-tests-macos  ]   |     value = func(*args, **kwargs)\n[tests/basic-tests-macos  ]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/isbnlib/dev/webservice.py:113: in query\n[tests/basic-tests-macos  ]   |     data = service.data()\n[tests/basic-tests-macos  ]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/isbnlib/dev/webservice.py:93: in data\n[tests/basic-tests-macos  ]   |     res = self.response()\n[tests/basic-tests-macos  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | self = <isbnlib.dev.webservice.WEBService object at 0x7f77d5da9be0>\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   |     def response(self):\n[tests/basic-tests-macos  ]   |         \"\"\"Check errors on response.\"\"\"\n[tests/basic-tests-macos  ]   |         # TODO(http 102)\n[tests/basic-tests-macos  ]   |         # How to handle \"102 http's code\"?\n[tests/basic-tests-macos  ]   |         # - urlopen doesn't catch a 102 code!\n[tests/basic-tests-macos  ]   |         #   https://docs.python.org/3/howto/urllib2.html#error-codes\n[tests/basic-tests-macos  ]   |         try:\n[tests/basic-tests-macos  ]   |             response = urlopen(\n[tests/basic-tests-macos  ]   |                 self._request,\n[tests/basic-tests-macos  ]   |                 timeout=options.get('URLOPEN_TIMEOUT'),\n[tests/basic-tests-macos  ]   |             )\n[tests/basic-tests-macos  ]   |             LOGGER.debug('Request headers:\\n%s', self._request.header_items())\n[tests/basic-tests-macos  ]   |         except HTTPError as e:  # pragma: no cover\n[tests/basic-tests-macos  ]   |             LOGGER.critical(\n[tests/basic-tests-macos  ]   |                 'ISBNLibHTTPError for %s with code %s [%s]',\n[tests/basic-tests-macos  ]   |                 self._url,\n[tests/basic-tests-macos  ]   |                 e.code,\n[tests/basic-tests-macos  ]   |                 e.msg,\n[tests/basic-tests-macos  ]   |             )\n[tests/basic-tests-macos  ]   |             if e.code in (401, 403, 429):\n[tests/basic-tests-macos  ]   | >               raise ISBNLibHTTPError('%s Are you making many requests?' %\n[tests/basic-tests-macos  ]   |                                        e.code)\n[tests/basic-tests-macos  ]   | E               isbnlib.dev._exceptions.ISBNLibHTTPError: an HTTP error has ocurred (403 Are you making many requests?)\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/isbnlib/dev/webservice.py:69: ISBNLibHTTPError\n[tests/basic-tests-macos  ]   | _________________ ERROR at setup of test_shelvecache_contains __________________\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | self = <isbnlib.dev.webservice.WEBService object at 0x7f77d5da9be0>\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   |     def response(self):\n[tests/basic-tests-macos  ]   |         \"\"\"Check errors on response.\"\"\"\n[tests/basic-tests-macos  ]   |         # TODO(http 102)\n[tests/basic-tests-macos  ]   |         # How to handle \"102 http's code\"?\n[tests/basic-tests-macos  ]   |         # - urlopen doesn't catch a 102 code!\n[tests/basic-tests-macos  ]   |         #   https://docs.python.org/3/howto/urllib2.html#error-codes\n[tests/basic-tests-macos  ]   |         try:\n[tests/basic-tests-macos  ]   | >           response = urlopen(\n[tests/basic-tests-macos  ]   |                 self._request,\n[tests/basic-tests-macos  ]   |                 timeout=options.get('URLOPEN_TIMEOUT'),\n[tests/basic-tests-macos  ]   |             )\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/isbnlib/dev/webservice.py:56: \n[tests/basic-tests-macos  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | url = <urllib.request.Request object at 0x7f77d5da9a30>, data = None\n[tests/basic-tests-macos  ]   | timeout = 10.0\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   |     def urlopen(url, data=None, timeout=socket._GLOBAL_DEFAULT_TIMEOUT,\n[tests/basic-tests-macos  ]   |                 *, cafile=None, capath=None, cadefault=False, context=None):\n[tests/basic-tests-macos  ]   |         '''Open the URL url, which can be either a string or a Request object.\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         *data* must be an object specifying additional data to be sent to\n[tests/basic-tests-macos  ]   |         the server, or None if no such data is needed.  See Request for\n[tests/basic-tests-macos  ]   |         details.\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         urllib.request module uses HTTP/1.1 and includes a \"Connection:close\"\n[tests/basic-tests-macos  ]   |         header in its HTTP requests.\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         The optional *timeout* parameter specifies a timeout in seconds for\n[tests/basic-tests-macos  ]   |         blocking operations like the connection attempt (if not specified, the\n[tests/basic-tests-macos  ]   |         global default timeout setting will be used). This only works for HTTP,\n[tests/basic-tests-macos  ]   |         HTTPS and FTP connections.\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         If *context* is specified, it must be a ssl.SSLContext instance describing\n[tests/basic-tests-macos  ]   |         the various SSL options. See HTTPSConnection for more details.\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         The optional *cafile* and *capath* parameters specify a set of trusted CA\n[tests/basic-tests-macos  ]   |         certificates for HTTPS requests. cafile should point to a single file\n[tests/basic-tests-macos  ]   |         containing a bundle of CA certificates, whereas capath should point to a\n[tests/basic-tests-macos  ]   |         directory of hashed certificate files. More information can be found in\n[tests/basic-tests-macos  ]   |         ssl.SSLContext.load_verify_locations().\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         The *cadefault* parameter is ignored.\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         This function always returns an object which can work as a\n[tests/basic-tests-macos  ]   |         context manager and has the properties url, headers, and status.\n[tests/basic-tests-macos  ]   |         See urllib.response.addinfourl for more detail on these properties.\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         For HTTP and HTTPS URLs, this function returns a http.client.HTTPResponse\n[tests/basic-tests-macos  ]   |         object slightly modified. In addition to the three new methods above, the\n[tests/basic-tests-macos  ]   |         msg attribute contains the same information as the reason attribute ---\n[tests/basic-tests-macos  ]   |         the reason phrase returned by the server --- instead of the response\n[tests/basic-tests-macos  ]   |         headers as it is specified in the documentation for HTTPResponse.\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         For FTP, file, and data URLs and requests explicitly handled by legacy\n[tests/basic-tests-macos  ]   |         URLopener and FancyURLopener classes, this function returns a\n[tests/basic-tests-macos  ]   |         urllib.response.addinfourl object.\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         Note that None may be returned if no handler handles the request (though\n[tests/basic-tests-macos  ]   |         the default installed global OpenerDirector uses UnknownHandler to ensure\n[tests/basic-tests-macos  ]   |         this never happens).\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         In addition, if proxy settings are detected (for example, when a *_proxy\n[tests/basic-tests-macos  ]   |         environment variable like http_proxy is set), ProxyHandler is default\n[tests/basic-tests-macos  ]   |         installed and makes sure the requests are handled through the proxy.\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         '''\n[tests/basic-tests-macos  ]   |         global _opener\n[tests/basic-tests-macos  ]   |         if cafile or capath or cadefault:\n[tests/basic-tests-macos  ]   |             import warnings\n[tests/basic-tests-macos  ]   |             warnings.warn(\"cafile, capath and cadefault are deprecated, use a \"\n[tests/basic-tests-macos  ]   |                           \"custom context instead.\", DeprecationWarning, 2)\n[tests/basic-tests-macos  ]   |             if context is not None:\n[tests/basic-tests-macos  ]   |                 raise ValueError(\n[tests/basic-tests-macos  ]   |                     \"You can't pass both context and any of cafile, capath, and \"\n[tests/basic-tests-macos  ]   |                     \"cadefault\"\n[tests/basic-tests-macos  ]   |                 )\n[tests/basic-tests-macos  ]   |             if not _have_ssl:\n[tests/basic-tests-macos  ]   |                 raise ValueError('SSL support not available')\n[tests/basic-tests-macos  ]   |             context = ssl.create_default_context(ssl.Purpose.SERVER_AUTH,\n[tests/basic-tests-macos  ]   |                                                  cafile=cafile,\n[tests/basic-tests-macos  ]   |                                                  capath=capath)\n[tests/basic-tests-macos  ]   |             https_handler = HTTPSHandler(context=context)\n[tests/basic-tests-macos  ]   |             opener = build_opener(https_handler)\n[tests/basic-tests-macos  ]   |         elif context:\n[tests/basic-tests-macos  ]   |             https_handler = HTTPSHandler(context=context)\n[tests/basic-tests-macos  ]   |             opener = build_opener(https_handler)\n[tests/basic-tests-macos  ]   |         elif _opener is None:\n[tests/basic-tests-macos  ]   |             _opener = opener = build_opener()\n[tests/basic-tests-macos  ]   |         else:\n[tests/basic-tests-macos  ]   |             opener = _opener\n[tests/basic-tests-macos  ]   | >       return opener.open(url, data, timeout)\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/urllib/request.py:214: \n[tests/basic-tests-macos  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | self = <urllib.request.OpenerDirector object at 0x7f77d5f50280>\n[tests/basic-tests-macos  ]   | fullurl = <urllib.request.Request object at 0x7f77d5da9a30>, data = None\n[tests/basic-tests-macos  ]   | timeout = 10.0\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   |     def open(self, fullurl, data=None, timeout=socket._GLOBAL_DEFAULT_TIMEOUT):\n[tests/basic-tests-macos  ]   |         # accept a URL or a Request object\n[tests/basic-tests-macos  ]   |         if isinstance(fullurl, str):\n[tests/basic-tests-macos  ]   |             req = Request(fullurl, data)\n[tests/basic-tests-macos  ]   |         else:\n[tests/basic-tests-macos  ]   |             req = fullurl\n[tests/basic-tests-macos  ]   |             if data is not None:\n[tests/basic-tests-macos  ]   |                 req.data = data\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         req.timeout = timeout\n[tests/basic-tests-macos  ]   |         protocol = req.type\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         # pre-process request\n[tests/basic-tests-macos  ]   |         meth_name = protocol+\"_request\"\n[tests/basic-tests-macos  ]   |         for processor in self.process_request.get(protocol, []):\n[tests/basic-tests-macos  ]   |             meth = getattr(processor, meth_name)\n[tests/basic-tests-macos  ]   |             req = meth(req)\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         sys.audit('urllib.Request', req.full_url, req.data, req.headers, req.get_method())\n[tests/basic-tests-macos  ]   |         response = self._open(req, data)\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         # post-process response\n[tests/basic-tests-macos  ]   |         meth_name = protocol+\"_response\"\n[tests/basic-tests-macos  ]   |         for processor in self.process_response.get(protocol, []):\n[tests/basic-tests-macos  ]   |             meth = getattr(processor, meth_name)\n[tests/basic-tests-macos  ]   | >           response = meth(req, response)\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/urllib/request.py:523: \n[tests/basic-tests-macos  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | self = <urllib.request.HTTPErrorProcessor object at 0x7f77d5f502b0>\n[tests/basic-tests-macos  ]   | request = <urllib.request.Request object at 0x7f77d5da9a30>\n[tests/basic-tests-macos  ]   | response = <http.client.HTTPResponse object at 0x7f77d5da99a0>\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   |     def http_response(self, request, response):\n[tests/basic-tests-macos  ]   |         code, msg, hdrs = response.code, response.msg, response.info()\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         # According to RFC 2616, \"2xx\" code indicates that the client's\n[tests/basic-tests-macos  ]   |         # request was successfully received, understood, and accepted.\n[tests/basic-tests-macos  ]   |         if not (200 <= code < 300):\n[tests/basic-tests-macos  ]   | >           response = self.parent.error(\n[tests/basic-tests-macos  ]   |                 'http', request, response, code, msg, hdrs)\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/urllib/request.py:632: \n[tests/basic-tests-macos  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | self = <urllib.request.OpenerDirector object at 0x7f77d5f50280>, proto = 403\n[tests/basic-tests-macos  ]   | args = ({'default': [<urllib.request.HTTPDefaultErrorHandler object at 0x7f77d5f50df0>], 301: [<urllib.request.HTTPRedirectHa...ult', <urllib.request.Request object at 0x7f77d5da9a30>, <http.client.HTTPResponse object at 0x7f77d5da99a0>, 403, ...)\n[tests/basic-tests-macos  ]   | dict = {'default': [<urllib.request.HTTPDefaultErrorHandler object at 0x7f77d5f50df0>], 301: [<urllib.request.HTTPRedirectHan...PRedirectHandler object at 0x7f77d5f50f70>], 303: [<urllib.request.HTTPRedirectHandler object at 0x7f77d5f50f70>], ...}\n[tests/basic-tests-macos  ]   | meth_name = 'http_error_403', http_err = 1\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   |     def error(self, proto, *args):\n[tests/basic-tests-macos  ]   |         if proto in ('http', 'https'):\n[tests/basic-tests-macos  ]   |             # XXX http[s] protocols are special-cased\n[tests/basic-tests-macos  ]   |             dict = self.handle_error['http'] # https is not different than http\n[tests/basic-tests-macos  ]   |             proto = args[2]  # YUCK!\n[tests/basic-tests-macos  ]   |             meth_name = 'http_error_%s' % proto\n[tests/basic-tests-macos  ]   |             http_err = 1\n[tests/basic-tests-macos  ]   |             orig_args = args\n[tests/basic-tests-macos  ]   |         else:\n[tests/basic-tests-macos  ]   |             dict = self.handle_error\n[tests/basic-tests-macos  ]   |             meth_name = proto + '_error'\n[tests/basic-tests-macos  ]   |             http_err = 0\n[tests/basic-tests-macos  ]   |         args = (dict, proto, meth_name) + args\n[tests/basic-tests-macos  ]   |         result = self._call_chain(*args)\n[tests/basic-tests-macos  ]   |         if result:\n[tests/basic-tests-macos  ]   |             return result\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         if http_err:\n[tests/basic-tests-macos  ]   |             args = (dict, 'default', 'http_error_default') + orig_args\n[tests/basic-tests-macos  ]   | >           return self._call_chain(*args)\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/urllib/request.py:561: \n[tests/basic-tests-macos  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | self = <urllib.request.OpenerDirector object at 0x7f77d5f50280>\n[tests/basic-tests-macos  ]   | chain = {'default': [<urllib.request.HTTPDefaultErrorHandler object at 0x7f77d5f50df0>], 301: [<urllib.request.HTTPRedirectHan...PRedirectHandler object at 0x7f77d5f50f70>], 303: [<urllib.request.HTTPRedirectHandler object at 0x7f77d5f50f70>], ...}\n[tests/basic-tests-macos  ]   | kind = 'default', meth_name = 'http_error_default'\n[tests/basic-tests-macos  ]   | args = (<urllib.request.Request object at 0x7f77d5da9a30>, <http.client.HTTPResponse object at 0x7f77d5da99a0>, 403, 'Forbidden', <http.client.HTTPMessage object at 0x7f77d5da9460>)\n[tests/basic-tests-macos  ]   | handlers = [<urllib.request.HTTPDefaultErrorHandler object at 0x7f77d5f50df0>]\n[tests/basic-tests-macos  ]   | handler = <urllib.request.HTTPDefaultErrorHandler object at 0x7f77d5f50df0>\n[tests/basic-tests-macos  ]   | func = <bound method HTTPDefaultErrorHandler.http_error_default of <urllib.request.HTTPDefaultErrorHandler object at 0x7f77d5f50df0>>\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   |     def _call_chain(self, chain, kind, meth_name, *args):\n[tests/basic-tests-macos  ]   |         # Handlers raise an exception if no one else should try to handle\n[tests/basic-tests-macos  ]   |         # the request, or return None if they can't but another handler\n[tests/basic-tests-macos  ]   |         # could.  Otherwise, they return the response.\n[tests/basic-tests-macos  ]   |         handlers = chain.get(kind, ())\n[tests/basic-tests-macos  ]   |         for handler in handlers:\n[tests/basic-tests-macos  ]   |             func = getattr(handler, meth_name)\n[tests/basic-tests-macos  ]   | >           result = func(*args)\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/urllib/request.py:494: \n[tests/basic-tests-macos  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | self = <urllib.request.HTTPDefaultErrorHandler object at 0x7f77d5f50df0>\n[tests/basic-tests-macos  ]   | req = <urllib.request.Request object at 0x7f77d5da9a30>\n[tests/basic-tests-macos  ]   | fp = <http.client.HTTPResponse object at 0x7f77d5da99a0>, code = 403\n[tests/basic-tests-macos  ]   | msg = 'Forbidden', hdrs = <http.client.HTTPMessage object at 0x7f77d5da9460>\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   |     def http_error_default(self, req, fp, code, msg, hdrs):\n[tests/basic-tests-macos  ]   | >       raise HTTPError(req.full_url, code, msg, hdrs, fp)\n[tests/basic-tests-macos  ]   | E       urllib.error.HTTPError: HTTP Error 403: Forbidden\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/urllib/request.py:641: HTTPError\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | During handling of the above exception, another exception occurred:\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   |     def setup_module():\n[tests/basic-tests-macos  ]   | >       meta('9780375869020')  #  <-- set\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | isbntools/test/test_cache.py:14: \n[tests/basic-tests-macos  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-macos  ]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/isbnlib/_ext.py:25: in meta\n[tests/basic-tests-macos  ]   |     return query(isbn, service) if isbn else {}\n[tests/basic-tests-macos  ]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/isbnlib/dev/_decorators.py:27: in memoized_func\n[tests/basic-tests-macos  ]   |     value = func(*args, **kwargs)\n[tests/basic-tests-macos  ]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/isbnlib/_metadata.py:33: in query\n[tests/basic-tests-macos  ]   |     meta = services[service](isbn)\n[tests/basic-tests-macos  ]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/isbnlib/_goob.py:72: in query\n[tests/basic-tests-macos  ]   |     data = wquery(SERVICE_URL.format(isbn='isbn:' + isbn), user_agent=UA)\n[tests/basic-tests-macos  ]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/isbnlib/dev/webquery.py:65: in query\n[tests/basic-tests-macos  ]   |     wq = WEBQuery(url, user_agent, throttling)\n[tests/basic-tests-macos  ]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/isbnlib/dev/webquery.py:32: in __init__\n[tests/basic-tests-macos  ]   |     self.data = webservice.query(service_url, ua)\n[tests/basic-tests-macos  ]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/isbnlib/dev/_decorators.py:47: in memoized_func\n[tests/basic-tests-macos  ]   |     value = func(*args, **kwargs)\n[tests/basic-tests-macos  ]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/isbnlib/dev/webservice.py:113: in query\n[tests/basic-tests-macos  ]   |     data = service.data()\n[tests/basic-tests-macos  ]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/isbnlib/dev/webservice.py:93: in data\n[tests/basic-tests-macos  ]   |     res = self.response()\n[tests/basic-tests-macos  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | self = <isbnlib.dev.webservice.WEBService object at 0x7f77d5da9be0>\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   |     def response(self):\n[tests/basic-tests-macos  ]   |         \"\"\"Check errors on response.\"\"\"\n[tests/basic-tests-macos  ]   |         # TODO(http 102)\n[tests/basic-tests-macos  ]   |         # How to handle \"102 http's code\"?\n[tests/basic-tests-macos  ]   |         # - urlopen doesn't catch a 102 code!\n[tests/basic-tests-macos  ]   |         #   https://docs.python.org/3/howto/urllib2.html#error-codes\n[tests/basic-tests-macos  ]   |         try:\n[tests/basic-tests-macos  ]   |             response = urlopen(\n[tests/basic-tests-macos  ]   |                 self._request,\n[tests/basic-tests-macos  ]   |                 timeout=options.get('URLOPEN_TIMEOUT'),\n[tests/basic-tests-macos  ]   |             )\n[tests/basic-tests-macos  ]   |             LOGGER.debug('Request headers:\\n%s', self._request.header_items())\n[tests/basic-tests-macos  ]   |         except HTTPError as e:  # pragma: no cover\n[tests/basic-tests-macos  ]   |             LOGGER.critical(\n[tests/basic-tests-macos  ]   |                 'ISBNLibHTTPError for %s with code %s [%s]',\n[tests/basic-tests-macos  ]   |                 self._url,\n[tests/basic-tests-macos  ]   |                 e.code,\n[tests/basic-tests-macos  ]   |                 e.msg,\n[tests/basic-tests-macos  ]   |             )\n[tests/basic-tests-macos  ]   |             if e.code in (401, 403, 429):\n[tests/basic-tests-macos  ]   | >               raise ISBNLibHTTPError('%s Are you making many requests?' %\n[tests/basic-tests-macos  ]   |                                        e.code)\n[tests/basic-tests-macos  ]   | E               isbnlib.dev._exceptions.ISBNLibHTTPError: an HTTP error has ocurred (403 Are you making many requests?)\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/isbnlib/dev/webservice.py:69: ISBNLibHTTPError\n[tests/basic-tests-macos  ]   | =================================== FAILURES ===================================\n[tests/basic-tests-macos  ]   | _________________________________ test_renfile _________________________________\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | self = <isbnlib.dev.webservice.WEBService object at 0x7f77d5f50460>\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   |     def response(self):\n[tests/basic-tests-macos  ]   |         \"\"\"Check errors on response.\"\"\"\n[tests/basic-tests-macos  ]   |         # TODO(http 102)\n[tests/basic-tests-macos  ]   |         # How to handle \"102 http's code\"?\n[tests/basic-tests-macos  ]   |         # - urlopen doesn't catch a 102 code!\n[tests/basic-tests-macos  ]   |         #   https://docs.python.org/3/howto/urllib2.html#error-codes\n[tests/basic-tests-macos  ]   |         try:\n[tests/basic-tests-macos  ]   | >           response = urlopen(\n[tests/basic-tests-macos  ]   |                 self._request,\n[tests/basic-tests-macos  ]   |                 timeout=options.get('URLOPEN_TIMEOUT'),\n[tests/basic-tests-macos  ]   |             )\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/isbnlib/dev/webservice.py:56: \n[tests/basic-tests-macos  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | url = <urllib.request.Request object at 0x7f77d5f505b0>, data = None\n[tests/basic-tests-macos  ]   | timeout = 10.0\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   |     def urlopen(url, data=None, timeout=socket._GLOBAL_DEFAULT_TIMEOUT,\n[tests/basic-tests-macos  ]   |                 *, cafile=None, capath=None, cadefault=False, context=None):\n[tests/basic-tests-macos  ]   |         '''Open the URL url, which can be either a string or a Request object.\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         *data* must be an object specifying additional data to be sent to\n[tests/basic-tests-macos  ]   |         the server, or None if no such data is needed.  See Request for\n[tests/basic-tests-macos  ]   |         details.\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         urllib.request module uses HTTP/1.1 and includes a \"Connection:close\"\n[tests/basic-tests-macos  ]   |         header in its HTTP requests.\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         The optional *timeout* parameter specifies a timeout in seconds for\n[tests/basic-tests-macos  ]   |         blocking operations like the connection attempt (if not specified, the\n[tests/basic-tests-macos  ]   |         global default timeout setting will be used). This only works for HTTP,\n[tests/basic-tests-macos  ]   |         HTTPS and FTP connections.\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         If *context* is specified, it must be a ssl.SSLContext instance describing\n[tests/basic-tests-macos  ]   |         the various SSL options. See HTTPSConnection for more details.\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         The optional *cafile* and *capath* parameters specify a set of trusted CA\n[tests/basic-tests-macos  ]   |         certificates for HTTPS requests. cafile should point to a single file\n[tests/basic-tests-macos  ]   |         containing a bundle of CA certificates, whereas capath should point to a\n[tests/basic-tests-macos  ]   |         directory of hashed certificate files. More information can be found in\n[tests/basic-tests-macos  ]   |         ssl.SSLContext.load_verify_locations().\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         The *cadefault* parameter is ignored.\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         This function always returns an object which can work as a\n[tests/basic-tests-macos  ]   |         context manager and has the properties url, headers, and status.\n[tests/basic-tests-macos  ]   |         See urllib.response.addinfourl for more detail on these properties.\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         For HTTP and HTTPS URLs, this function returns a http.client.HTTPResponse\n[tests/basic-tests-macos  ]   |         object slightly modified. In addition to the three new methods above, the\n[tests/basic-tests-macos  ]   |         msg attribute contains the same information as the reason attribute ---\n[tests/basic-tests-macos  ]   |         the reason phrase returned by the server --- instead of the response\n[tests/basic-tests-macos  ]   |         headers as it is specified in the documentation for HTTPResponse.\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         For FTP, file, and data URLs and requests explicitly handled by legacy\n[tests/basic-tests-macos  ]   |         URLopener and FancyURLopener classes, this function returns a\n[tests/basic-tests-macos  ]   |         urllib.response.addinfourl object.\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         Note that None may be returned if no handler handles the request (though\n[tests/basic-tests-macos  ]   |         the default installed global OpenerDirector uses UnknownHandler to ensure\n[tests/basic-tests-macos  ]   |         this never happens).\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         In addition, if proxy settings are detected (for example, when a *_proxy\n[tests/basic-tests-macos  ]   |         environment variable like http_proxy is set), ProxyHandler is default\n[tests/basic-tests-macos  ]   |         installed and makes sure the requests are handled through the proxy.\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         '''\n[tests/basic-tests-macos  ]   |         global _opener\n[tests/basic-tests-macos  ]   |         if cafile or capath or cadefault:\n[tests/basic-tests-macos  ]   |             import warnings\n[tests/basic-tests-macos  ]   |             warnings.warn(\"cafile, capath and cadefault are deprecated, use a \"\n[tests/basic-tests-macos  ]   |                           \"custom context instead.\", DeprecationWarning, 2)\n[tests/basic-tests-macos  ]   |             if context is not None:\n[tests/basic-tests-macos  ]   |                 raise ValueError(\n[tests/basic-tests-macos  ]   |                     \"You can't pass both context and any of cafile, capath, and \"\n[tests/basic-tests-macos  ]   |                     \"cadefault\"\n[tests/basic-tests-macos  ]   |                 )\n[tests/basic-tests-macos  ]   |             if not _have_ssl:\n[tests/basic-tests-macos  ]   |                 raise ValueError('SSL support not available')\n[tests/basic-tests-macos  ]   |             context = ssl.create_default_context(ssl.Purpose.SERVER_AUTH,\n[tests/basic-tests-macos  ]   |                                                  cafile=cafile,\n[tests/basic-tests-macos  ]   |                                                  capath=capath)\n[tests/basic-tests-macos  ]   |             https_handler = HTTPSHandler(context=context)\n[tests/basic-tests-macos  ]   |             opener = build_opener(https_handler)\n[tests/basic-tests-macos  ]   |         elif context:\n[tests/basic-tests-macos  ]   |             https_handler = HTTPSHandler(context=context)\n[tests/basic-tests-macos  ]   |             opener = build_opener(https_handler)\n[tests/basic-tests-macos  ]   |         elif _opener is None:\n[tests/basic-tests-macos  ]   |             _opener = opener = build_opener()\n[tests/basic-tests-macos  ]   |         else:\n[tests/basic-tests-macos  ]   |             opener = _opener\n[tests/basic-tests-macos  ]   | >       return opener.open(url, data, timeout)\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/urllib/request.py:214: \n[tests/basic-tests-macos  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | self = <urllib.request.OpenerDirector object at 0x7f77d5f50280>\n[tests/basic-tests-macos  ]   | fullurl = <urllib.request.Request object at 0x7f77d5f505b0>, data = None\n[tests/basic-tests-macos  ]   | timeout = 10.0\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   |     def open(self, fullurl, data=None, timeout=socket._GLOBAL_DEFAULT_TIMEOUT):\n[tests/basic-tests-macos  ]   |         # accept a URL or a Request object\n[tests/basic-tests-macos  ]   |         if isinstance(fullurl, str):\n[tests/basic-tests-macos  ]   |             req = Request(fullurl, data)\n[tests/basic-tests-macos  ]   |         else:\n[tests/basic-tests-macos  ]   |             req = fullurl\n[tests/basic-tests-macos  ]   |             if data is not None:\n[tests/basic-tests-macos  ]   |                 req.data = data\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         req.timeout = timeout\n[tests/basic-tests-macos  ]   |         protocol = req.type\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         # pre-process request\n[tests/basic-tests-macos  ]   |         meth_name = protocol+\"_request\"\n[tests/basic-tests-macos  ]   |         for processor in self.process_request.get(protocol, []):\n[tests/basic-tests-macos  ]   |             meth = getattr(processor, meth_name)\n[tests/basic-tests-macos  ]   |             req = meth(req)\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         sys.audit('urllib.Request', req.full_url, req.data, req.headers, req.get_method())\n[tests/basic-tests-macos  ]   |         response = self._open(req, data)\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         # post-process response\n[tests/basic-tests-macos  ]   |         meth_name = protocol+\"_response\"\n[tests/basic-tests-macos  ]   |         for processor in self.process_response.get(protocol, []):\n[tests/basic-tests-macos  ]   |             meth = getattr(processor, meth_name)\n[tests/basic-tests-macos  ]   | >           response = meth(req, response)\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/urllib/request.py:523: \n[tests/basic-tests-macos  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | self = <urllib.request.HTTPErrorProcessor object at 0x7f77d5f502b0>\n[tests/basic-tests-macos  ]   | request = <urllib.request.Request object at 0x7f77d5f505b0>\n[tests/basic-tests-macos  ]   | response = <http.client.HTTPResponse object at 0x7f77d5f662b0>\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   |     def http_response(self, request, response):\n[tests/basic-tests-macos  ]   |         code, msg, hdrs = response.code, response.msg, response.info()\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         # According to RFC 2616, \"2xx\" code indicates that the client's\n[tests/basic-tests-macos  ]   |         # request was successfully received, understood, and accepted.\n[tests/basic-tests-macos  ]   |         if not (200 <= code < 300):\n[tests/basic-tests-macos  ]   | >           response = self.parent.error(\n[tests/basic-tests-macos  ]   |                 'http', request, response, code, msg, hdrs)\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/urllib/request.py:632: \n[tests/basic-tests-macos  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | self = <urllib.request.OpenerDirector object at 0x7f77d5f50280>, proto = 403\n[tests/basic-tests-macos  ]   | args = ({'default': [<urllib.request.HTTPDefaultErrorHandler object at 0x7f77d5f50df0>], 301: [<urllib.request.HTTPRedirectHa...ult', <urllib.request.Request object at 0x7f77d5f505b0>, <http.client.HTTPResponse object at 0x7f77d5f662b0>, 403, ...)\n[tests/basic-tests-macos  ]   | dict = {'default': [<urllib.request.HTTPDefaultErrorHandler object at 0x7f77d5f50df0>], 301: [<urllib.request.HTTPRedirectHan...PRedirectHandler object at 0x7f77d5f50f70>], 303: [<urllib.request.HTTPRedirectHandler object at 0x7f77d5f50f70>], ...}\n[tests/basic-tests-macos  ]   | meth_name = 'http_error_403', http_err = 1\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   |     def error(self, proto, *args):\n[tests/basic-tests-macos  ]   |         if proto in ('http', 'https'):\n[tests/basic-tests-macos  ]   |             # XXX http[s] protocols are special-cased\n[tests/basic-tests-macos  ]   |             dict = self.handle_error['http'] # https is not different than http\n[tests/basic-tests-macos  ]   |             proto = args[2]  # YUCK!\n[tests/basic-tests-macos  ]   |             meth_name = 'http_error_%s' % proto\n[tests/basic-tests-macos  ]   |             http_err = 1\n[tests/basic-tests-macos  ]   |             orig_args = args\n[tests/basic-tests-macos  ]   |         else:\n[tests/basic-tests-macos  ]   |             dict = self.handle_error\n[tests/basic-tests-macos  ]   |             meth_name = proto + '_error'\n[tests/basic-tests-macos  ]   |             http_err = 0\n[tests/basic-tests-macos  ]   |         args = (dict, proto, meth_name) + args\n[tests/basic-tests-macos  ]   |         result = self._call_chain(*args)\n[tests/basic-tests-macos  ]   |         if result:\n[tests/basic-tests-macos  ]   |             return result\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         if http_err:\n[tests/basic-tests-macos  ]   |             args = (dict, 'default', 'http_error_default') + orig_args\n[tests/basic-tests-macos  ]   | >           return self._call_chain(*args)\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/urllib/request.py:561: \n[tests/basic-tests-macos  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | self = <urllib.request.OpenerDirector object at 0x7f77d5f50280>\n[tests/basic-tests-macos  ]   | chain = {'default': [<urllib.request.HTTPDefaultErrorHandler object at 0x7f77d5f50df0>], 301: [<urllib.request.HTTPRedirectHan...PRedirectHandler object at 0x7f77d5f50f70>], 303: [<urllib.request.HTTPRedirectHandler object at 0x7f77d5f50f70>], ...}\n[tests/basic-tests-macos  ]   | kind = 'default', meth_name = 'http_error_default'\n[tests/basic-tests-macos  ]   | args = (<urllib.request.Request object at 0x7f77d5f505b0>, <http.client.HTTPResponse object at 0x7f77d5f662b0>, 403, 'Forbidden', <http.client.HTTPMessage object at 0x7f77d5f50c70>)\n[tests/basic-tests-macos  ]   | handlers = [<urllib.request.HTTPDefaultErrorHandler object at 0x7f77d5f50df0>]\n[tests/basic-tests-macos  ]   | handler = <urllib.request.HTTPDefaultErrorHandler object at 0x7f77d5f50df0>\n[tests/basic-tests-macos  ]   | func = <bound method HTTPDefaultErrorHandler.http_error_default of <urllib.request.HTTPDefaultErrorHandler object at 0x7f77d5f50df0>>\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   |     def _call_chain(self, chain, kind, meth_name, *args):\n[tests/basic-tests-macos  ]   |         # Handlers raise an exception if no one else should try to handle\n[tests/basic-tests-macos  ]   |         # the request, or return None if they can't but another handler\n[tests/basic-tests-macos  ]   |         # could.  Otherwise, they return the response.\n[tests/basic-tests-macos  ]   |         handlers = chain.get(kind, ())\n[tests/basic-tests-macos  ]   |         for handler in handlers:\n[tests/basic-tests-macos  ]   |             func = getattr(handler, meth_name)\n[tests/basic-tests-macos  ]   | >           result = func(*args)\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/urllib/request.py:494: \n[tests/basic-tests-macos  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | self = <urllib.request.HTTPDefaultErrorHandler object at 0x7f77d5f50df0>\n[tests/basic-tests-macos  ]   | req = <urllib.request.Request object at 0x7f77d5f505b0>\n[tests/basic-tests-macos  ]   | fp = <http.client.HTTPResponse object at 0x7f77d5f662b0>, code = 403\n[tests/basic-tests-macos  ]   | msg = 'Forbidden', hdrs = <http.client.HTTPMessage object at 0x7f77d5f50c70>\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   |     def http_error_default(self, req, fp, code, msg, hdrs):\n[tests/basic-tests-macos  ]   | >       raise HTTPError(req.full_url, code, msg, hdrs, fp)\n[tests/basic-tests-macos  ]   | E       urllib.error.HTTPError: HTTP Error 403: Forbidden\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/urllib/request.py:641: HTTPError\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | During handling of the above exception, another exception occurred:\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   |     def test_renfile():\n[tests/basic-tests-macos  ]   |         \"\"\"Test the renaming of a file\"\"\"\n[tests/basic-tests-macos  ]   | >       renfile(F11, '9781593271923', 'default', PATT0)\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | isbntools/contrib/test/test_rename.py:145: \n[tests/basic-tests-macos  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-macos  ]   | isbntools/contrib/modules/rename/_rename.py:116: in renfile\n[tests/basic-tests-macos  ]   |     metadata = meta(isbn, service)\n[tests/basic-tests-macos  ]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/isbnlib/_ext.py:25: in meta\n[tests/basic-tests-macos  ]   |     return query(isbn, service) if isbn else {}\n[tests/basic-tests-macos  ]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/isbnlib/dev/_decorators.py:27: in memoized_func\n[tests/basic-tests-macos  ]   |     value = func(*args, **kwargs)\n[tests/basic-tests-macos  ]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/isbnlib/_metadata.py:33: in query\n[tests/basic-tests-macos  ]   |     meta = services[service](isbn)\n[tests/basic-tests-macos  ]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/isbnlib/_goob.py:72: in query\n[tests/basic-tests-macos  ]   |     data = wquery(SERVICE_URL.format(isbn='isbn:' + isbn), user_agent=UA)\n[tests/basic-tests-macos  ]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/isbnlib/dev/webquery.py:65: in query\n[tests/basic-tests-macos  ]   |     wq = WEBQuery(url, user_agent, throttling)\n[tests/basic-tests-macos  ]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/isbnlib/dev/webquery.py:32: in __init__\n[tests/basic-tests-macos  ]   |     self.data = webservice.query(service_url, ua)\n[tests/basic-tests-macos  ]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/isbnlib/dev/_decorators.py:47: in memoized_func\n[tests/basic-tests-macos  ]   |     value = func(*args, **kwargs)\n[tests/basic-tests-macos  ]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/isbnlib/dev/webservice.py:113: in query\n[tests/basic-tests-macos  ]   |     data = service.data()\n[tests/basic-tests-macos  ]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/isbnlib/dev/webservice.py:93: in data\n[tests/basic-tests-macos  ]   |     res = self.response()\n[tests/basic-tests-macos  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | self = <isbnlib.dev.webservice.WEBService object at 0x7f77d5f50460>\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   |     def response(self):\n[tests/basic-tests-macos  ]   |         \"\"\"Check errors on response.\"\"\"\n[tests/basic-tests-macos  ]   |         # TODO(http 102)\n[tests/basic-tests-macos  ]   |         # How to handle \"102 http's code\"?\n[tests/basic-tests-macos  ]   |         # - urlopen doesn't catch a 102 code!\n[tests/basic-tests-macos  ]   |         #   https://docs.python.org/3/howto/urllib2.html#error-codes\n[tests/basic-tests-macos  ]   |         try:\n[tests/basic-tests-macos  ]   |             response = urlopen(\n[tests/basic-tests-macos  ]   |                 self._request,\n[tests/basic-tests-macos  ]   |                 timeout=options.get('URLOPEN_TIMEOUT'),\n[tests/basic-tests-macos  ]   |             )\n[tests/basic-tests-macos  ]   |             LOGGER.debug('Request headers:\\n%s', self._request.header_items())\n[tests/basic-tests-macos  ]   |         except HTTPError as e:  # pragma: no cover\n[tests/basic-tests-macos  ]   |             LOGGER.critical(\n[tests/basic-tests-macos  ]   |                 'ISBNLibHTTPError for %s with code %s [%s]',\n[tests/basic-tests-macos  ]   |                 self._url,\n[tests/basic-tests-macos  ]   |                 e.code,\n[tests/basic-tests-macos  ]   |                 e.msg,\n[tests/basic-tests-macos  ]   |             )\n[tests/basic-tests-macos  ]   |             if e.code in (401, 403, 429):\n[tests/basic-tests-macos  ]   | >               raise ISBNLibHTTPError('%s Are you making many requests?' %\n[tests/basic-tests-macos  ]   |                                        e.code)\n[tests/basic-tests-macos  ]   | E               isbnlib.dev._exceptions.ISBNLibHTTPError: an HTTP error has ocurred (403 Are you making many requests?)\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/isbnlib/dev/webservice.py:69: ISBNLibHTTPError\n[tests/basic-tests-macos  ]   | ------------------------------ Captured log call -------------------------------\n[tests/basic-tests-macos  ]   | CRITICAL isbnlib.dev.webservice:webservice.py:62 ISBNLibHTTPError for https://www.googleapis.com/books/v1/volumes?q=isbn:9781593271923&fields=items/volumeInfo(title,subtitle,authors,publisher,publishedDate,language,industryIdentifiers,description,imageLinks)&maxResults=1 with code 403 [Forbidden]\n[tests/basic-tests-macos  ]   | _______________________________ test_rencwdfiles _______________________________\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | self = <isbnlib.dev.webservice.WEBService object at 0x7f77d5e31640>\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   |     def response(self):\n[tests/basic-tests-macos  ]   |         \"\"\"Check errors on response.\"\"\"\n[tests/basic-tests-macos  ]   |         # TODO(http 102)\n[tests/basic-tests-macos  ]   |         # How to handle \"102 http's code\"?\n[tests/basic-tests-macos  ]   |         # - urlopen doesn't catch a 102 code!\n[tests/basic-tests-macos  ]   |         #   https://docs.python.org/3/howto/urllib2.html#error-codes\n[tests/basic-tests-macos  ]   |         try:\n[tests/basic-tests-macos  ]   | >           response = urlopen(\n[tests/basic-tests-macos  ]   |                 self._request,\n[tests/basic-tests-macos  ]   |                 timeout=options.get('URLOPEN_TIMEOUT'),\n[tests/basic-tests-macos  ]   |             )\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/isbnlib/dev/webservice.py:56: \n[tests/basic-tests-macos  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | url = <urllib.request.Request object at 0x7f77d5e31760>, data = None\n[tests/basic-tests-macos  ]   | timeout = 10.0\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   |     def urlopen(url, data=None, timeout=socket._GLOBAL_DEFAULT_TIMEOUT,\n[tests/basic-tests-macos  ]   |                 *, cafile=None, capath=None, cadefault=False, context=None):\n[tests/basic-tests-macos  ]   |         '''Open the URL url, which can be either a string or a Request object.\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         *data* must be an object specifying additional data to be sent to\n[tests/basic-tests-macos  ]   |         the server, or None if no such data is needed.  See Request for\n[tests/basic-tests-macos  ]   |         details.\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         urllib.request module uses HTTP/1.1 and includes a \"Connection:close\"\n[tests/basic-tests-macos  ]   |         header in its HTTP requests.\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         The optional *timeout* parameter specifies a timeout in seconds for\n[tests/basic-tests-macos  ]   |         blocking operations like the connection attempt (if not specified, the\n[tests/basic-tests-macos  ]   |         global default timeout setting will be used). This only works for HTTP,\n[tests/basic-tests-macos  ]   |         HTTPS and FTP connections.\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         If *context* is specified, it must be a ssl.SSLContext instance describing\n[tests/basic-tests-macos  ]   |         the various SSL options. See HTTPSConnection for more details.\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         The optional *cafile* and *capath* parameters specify a set of trusted CA\n[tests/basic-tests-macos  ]   |         certificates for HTTPS requests. cafile should point to a single file\n[tests/basic-tests-macos  ]   |         containing a bundle of CA certificates, whereas capath should point to a\n[tests/basic-tests-macos  ]   |         directory of hashed certificate files. More information can be found in\n[tests/basic-tests-macos  ]   |         ssl.SSLContext.load_verify_locations().\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         The *cadefault* parameter is ignored.\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         This function always returns an object which can work as a\n[tests/basic-tests-macos  ]   |         context manager and has the properties url, headers, and status.\n[tests/basic-tests-macos  ]   |         See urllib.response.addinfourl for more detail on these properties.\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         For HTTP and HTTPS URLs, this function returns a http.client.HTTPResponse\n[tests/basic-tests-macos  ]   |         object slightly modified. In addition to the three new methods above, the\n[tests/basic-tests-macos  ]   |         msg attribute contains the same information as the reason attribute ---\n[tests/basic-tests-macos  ]   |         the reason phrase returned by the server --- instead of the response\n[tests/basic-tests-macos  ]   |         headers as it is specified in the documentation for HTTPResponse.\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         For FTP, file, and data URLs and requests explicitly handled by legacy\n[tests/basic-tests-macos  ]   |         URLopener and FancyURLopener classes, this function returns a\n[tests/basic-tests-macos  ]   |         urllib.response.addinfourl object.\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         Note that None may be returned if no handler handles the request (though\n[tests/basic-tests-macos  ]   |         the default installed global OpenerDirector uses UnknownHandler to ensure\n[tests/basic-tests-macos  ]   |         this never happens).\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         In addition, if proxy settings are detected (for example, when a *_proxy\n[tests/basic-tests-macos  ]   |         environment variable like http_proxy is set), ProxyHandler is default\n[tests/basic-tests-macos  ]   |         installed and makes sure the requests are handled through the proxy.\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         '''\n[tests/basic-tests-macos  ]   |         global _opener\n[tests/basic-tests-macos  ]   |         if cafile or capath or cadefault:\n[tests/basic-tests-macos  ]   |             import warnings\n[tests/basic-tests-macos  ]   |             warnings.warn(\"cafile, capath and cadefault are deprecated, use a \"\n[tests/basic-tests-macos  ]   |                           \"custom context instead.\", DeprecationWarning, 2)\n[tests/basic-tests-macos  ]   |             if context is not None:\n[tests/basic-tests-macos  ]   |                 raise ValueError(\n[tests/basic-tests-macos  ]   |                     \"You can't pass both context and any of cafile, capath, and \"\n[tests/basic-tests-macos  ]   |                     \"cadefault\"\n[tests/basic-tests-macos  ]   |                 )\n[tests/basic-tests-macos  ]   |             if not _have_ssl:\n[tests/basic-tests-macos  ]   |                 raise ValueError('SSL support not available')\n[tests/basic-tests-macos  ]   |             context = ssl.create_default_context(ssl.Purpose.SERVER_AUTH,\n[tests/basic-tests-macos  ]   |                                                  cafile=cafile,\n[tests/basic-tests-macos  ]   |                                                  capath=capath)\n[tests/basic-tests-macos  ]   |             https_handler = HTTPSHandler(context=context)\n[tests/basic-tests-macos  ]   |             opener = build_opener(https_handler)\n[tests/basic-tests-macos  ]   |         elif context:\n[tests/basic-tests-macos  ]   |             https_handler = HTTPSHandler(context=context)\n[tests/basic-tests-macos  ]   |             opener = build_opener(https_handler)\n[tests/basic-tests-macos  ]   |         elif _opener is None:\n[tests/basic-tests-macos  ]   |             _opener = opener = build_opener()\n[tests/basic-tests-macos  ]   |         else:\n[tests/basic-tests-macos  ]   |             opener = _opener\n[tests/basic-tests-macos  ]   | >       return opener.open(url, data, timeout)\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/urllib/request.py:214: \n[tests/basic-tests-macos  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | self = <urllib.request.OpenerDirector object at 0x7f77d5f50280>\n[tests/basic-tests-macos  ]   | fullurl = <urllib.request.Request object at 0x7f77d5e31760>, data = None\n[tests/basic-tests-macos  ]   | timeout = 10.0\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   |     def open(self, fullurl, data=None, timeout=socket._GLOBAL_DEFAULT_TIMEOUT):\n[tests/basic-tests-macos  ]   |         # accept a URL or a Request object\n[tests/basic-tests-macos  ]   |         if isinstance(fullurl, str):\n[tests/basic-tests-macos  ]   |             req = Request(fullurl, data)\n[tests/basic-tests-macos  ]   |         else:\n[tests/basic-tests-macos  ]   |             req = fullurl\n[tests/basic-tests-macos  ]   |             if data is not None:\n[tests/basic-tests-macos  ]   |                 req.data = data\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         req.timeout = timeout\n[tests/basic-tests-macos  ]   |         protocol = req.type\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         # pre-process request\n[tests/basic-tests-macos  ]   |         meth_name = protocol+\"_request\"\n[tests/basic-tests-macos  ]   |         for processor in self.process_request.get(protocol, []):\n[tests/basic-tests-macos  ]   |             meth = getattr(processor, meth_name)\n[tests/basic-tests-macos  ]   |             req = meth(req)\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         sys.audit('urllib.Request', req.full_url, req.data, req.headers, req.get_method())\n[tests/basic-tests-macos  ]   |         response = self._open(req, data)\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         # post-process response\n[tests/basic-tests-macos  ]   |         meth_name = protocol+\"_response\"\n[tests/basic-tests-macos  ]   |         for processor in self.process_response.get(protocol, []):\n[tests/basic-tests-macos  ]   |             meth = getattr(processor, meth_name)\n[tests/basic-tests-macos  ]   | >           response = meth(req, response)\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/urllib/request.py:523: \n[tests/basic-tests-macos  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | self = <urllib.request.HTTPErrorProcessor object at 0x7f77d5f502b0>\n[tests/basic-tests-macos  ]   | request = <urllib.request.Request object at 0x7f77d5e31760>\n[tests/basic-tests-macos  ]   | response = <http.client.HTTPResponse object at 0x7f77d5e318e0>\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   |     def http_response(self, request, response):\n[tests/basic-tests-macos  ]   |         code, msg, hdrs = response.code, response.msg, response.info()\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         # According to RFC 2616, \"2xx\" code indicates that the client's\n[tests/basic-tests-macos  ]   |         # request was successfully received, understood, and accepted.\n[tests/basic-tests-macos  ]   |         if not (200 <= code < 300):\n[tests/basic-tests-macos  ]   | >           response = self.parent.error(\n[tests/basic-tests-macos  ]   |                 'http', request, response, code, msg, hdrs)\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/urllib/request.py:632: \n[tests/basic-tests-macos  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | self = <urllib.request.OpenerDirector object at 0x7f77d5f50280>, proto = 403\n[tests/basic-tests-macos  ]   | args = ({'default': [<urllib.request.HTTPDefaultErrorHandler object at 0x7f77d5f50df0>], 301: [<urllib.request.HTTPRedirectHa...ult', <urllib.request.Request object at 0x7f77d5e31760>, <http.client.HTTPResponse object at 0x7f77d5e318e0>, 403, ...)\n[tests/basic-tests-macos  ]   | dict = {'default': [<urllib.request.HTTPDefaultErrorHandler object at 0x7f77d5f50df0>], 301: [<urllib.request.HTTPRedirectHan...PRedirectHandler object at 0x7f77d5f50f70>], 303: [<urllib.request.HTTPRedirectHandler object at 0x7f77d5f50f70>], ...}\n[tests/basic-tests-macos  ]   | meth_name = 'http_error_403', http_err = 1\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   |     def error(self, proto, *args):\n[tests/basic-tests-macos  ]   |         if proto in ('http', 'https'):\n[tests/basic-tests-macos  ]   |             # XXX http[s] protocols are special-cased\n[tests/basic-tests-macos  ]   |             dict = self.handle_error['http'] # https is not different than http\n[tests/basic-tests-macos  ]   |             proto = args[2]  # YUCK!\n[tests/basic-tests-macos  ]   |             meth_name = 'http_error_%s' % proto\n[tests/basic-tests-macos  ]   |             http_err = 1\n[tests/basic-tests-macos  ]   |             orig_args = args\n[tests/basic-tests-macos  ]   |         else:\n[tests/basic-tests-macos  ]   |             dict = self.handle_error\n[tests/basic-tests-macos  ]   |             meth_name = proto + '_error'\n[tests/basic-tests-macos  ]   |             http_err = 0\n[tests/basic-tests-macos  ]   |         args = (dict, proto, meth_name) + args\n[tests/basic-tests-macos  ]   |         result = self._call_chain(*args)\n[tests/basic-tests-macos  ]   |         if result:\n[tests/basic-tests-macos  ]   |             return result\n[tests/basic-tests-macos  ]   |     \n[tests/basic-tests-macos  ]   |         if http_err:\n[tests/basic-tests-macos  ]   |             args = (dict, 'default', 'http_error_default') + orig_args\n[tests/basic-tests-macos  ]   | >           return self._call_chain(*args)\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/urllib/request.py:561: \n[tests/basic-tests-macos  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | self = <urllib.request.OpenerDirector object at 0x7f77d5f50280>\n[tests/basic-tests-macos  ]   | chain = {'default': [<urllib.request.HTTPDefaultErrorHandler object at 0x7f77d5f50df0>], 301: [<urllib.request.HTTPRedirectHan...PRedirectHandler object at 0x7f77d5f50f70>], 303: [<urllib.request.HTTPRedirectHandler object at 0x7f77d5f50f70>], ...}\n[tests/basic-tests-macos  ]   | kind = 'default', meth_name = 'http_error_default'\n[tests/basic-tests-macos  ]   | args = (<urllib.request.Request object at 0x7f77d5e31760>, <http.client.HTTPResponse object at 0x7f77d5e318e0>, 403, 'Forbidden', <http.client.HTTPMessage object at 0x7f77d5e31550>)\n[tests/basic-tests-macos  ]   | handlers = [<urllib.request.HTTPDefaultErrorHandler object at 0x7f77d5f50df0>]\n[tests/basic-tests-macos  ]   | handler = <urllib.request.HTTPDefaultErrorHandler object at 0x7f77d5f50df0>\n[tests/basic-tests-macos  ]   | func = <bound method HTTPDefaultErrorHandler.http_error_default of <urllib.request.HTTPDefaultErrorHandler object at 0x7f77d5f50df0>>\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   |     def _call_chain(self, chain, kind, meth_name, *args):\n[tests/basic-tests-macos  ]   |         # Handlers raise an exception if no one else should try to handle\n[tests/basic-tests-macos  ]   |         # the request, or return None if they can't but another handler\n[tests/basic-tests-macos  ]   |         # could.  Otherwise, they return the response.\n[tests/basic-tests-macos  ]   |         handlers = chain.get(kind, ())\n[tests/basic-tests-macos  ]   |         for handler in handlers:\n[tests/basic-tests-macos  ]   |             func = getattr(handler, meth_name)\n[tests/basic-tests-macos  ]   | >           result = func(*args)\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/urllib/request.py:494: \n[tests/basic-tests-macos  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | self = <urllib.request.HTTPDefaultErrorHandler object at 0x7f77d5f50df0>\n[tests/basic-tests-macos  ]   | req = <urllib.request.Request object at 0x7f77d5e31760>\n[tests/basic-tests-macos  ]   | fp = <http.client.HTTPResponse object at 0x7f77d5e318e0>, code = 403\n[tests/basic-tests-macos  ]   | msg = 'Forbidden', hdrs = <http.client.HTTPMessage object at 0x7f77d5e31550>\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   |     def http_error_default(self, req, fp, code, msg, hdrs):\n[tests/basic-tests-macos  ]   | >       raise HTTPError(req.full_url, code, msg, hdrs, fp)\n[tests/basic-tests-macos  ]   | E       urllib.error.HTTPError: HTTP Error 403: Forbidden\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/urllib/request.py:641: HTTPError\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | During handling of the above exception, another exception occurred:\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   |     def test_rencwdfiles():\n[tests/basic-tests-macos  ]   |         \"\"\"Test the renaming of files in current directory\"\"\"\n[tests/basic-tests-macos  ]   |         delete_files('*deleteme*.pdf')\n[tests/basic-tests-macos  ]   | >       rencwdfiles('*.pdf', 'default', PATT0)\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | isbntools/contrib/test/test_rename.py:159: \n[tests/basic-tests-macos  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-macos  ]   | isbntools/contrib/modules/rename/_rename.py:147: in rencwdfiles\n[tests/basic-tests-macos  ]   |     renfile(f, isbn, service, pattern)\n[tests/basic-tests-macos  ]   | isbntools/contrib/modules/rename/_rename.py:116: in renfile\n[tests/basic-tests-macos  ]   |     metadata = meta(isbn, service)\n[tests/basic-tests-macos  ]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/isbnlib/_ext.py:25: in meta\n[tests/basic-tests-macos  ]   |     return query(isbn, service) if isbn else {}\n[tests/basic-tests-macos  ]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/isbnlib/dev/_decorators.py:27: in memoized_func\n[tests/basic-tests-macos  ]   |     value = func(*args, **kwargs)\n[tests/basic-tests-macos  ]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/isbnlib/_metadata.py:33: in query\n[tests/basic-tests-macos  ]   |     meta = services[service](isbn)\n[tests/basic-tests-macos  ]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/isbnlib/_goob.py:72: in query\n[tests/basic-tests-macos  ]   |     data = wquery(SERVICE_URL.format(isbn='isbn:' + isbn), user_agent=UA)\n[tests/basic-tests-macos  ]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/isbnlib/dev/webquery.py:65: in query\n[tests/basic-tests-macos  ]   |     wq = WEBQuery(url, user_agent, throttling)\n[tests/basic-tests-macos  ]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/isbnlib/dev/webquery.py:32: in __init__\n[tests/basic-tests-macos  ]   |     self.data = webservice.query(service_url, ua)\n[tests/basic-tests-macos  ]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/isbnlib/dev/_decorators.py:47: in memoized_func\n[tests/basic-tests-macos  ]   |     value = func(*args, **kwargs)\n[tests/basic-tests-macos  ]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/isbnlib/dev/webservice.py:113: in query\n[tests/basic-tests-macos  ]   |     data = service.data()\n[tests/basic-tests-macos  ]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/isbnlib/dev/webservice.py:93: in data\n[tests/basic-tests-macos  ]   |     res = self.response()\n[tests/basic-tests-macos  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | self = <isbnlib.dev.webservice.WEBService object at 0x7f77d5e31640>\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   |     def response(self):\n[tests/basic-tests-macos  ]   |         \"\"\"Check errors on response.\"\"\"\n[tests/basic-tests-macos  ]   |         # TODO(http 102)\n[tests/basic-tests-macos  ]   |         # How to handle \"102 http's code\"?\n[tests/basic-tests-macos  ]   |         # - urlopen doesn't catch a 102 code!\n[tests/basic-tests-macos  ]   |         #   https://docs.python.org/3/howto/urllib2.html#error-codes\n[tests/basic-tests-macos  ]   |         try:\n[tests/basic-tests-macos  ]   |             response = urlopen(\n[tests/basic-tests-macos  ]   |                 self._request,\n[tests/basic-tests-macos  ]   |                 timeout=options.get('URLOPEN_TIMEOUT'),\n[tests/basic-tests-macos  ]   |             )\n[tests/basic-tests-macos  ]   |             LOGGER.debug('Request headers:\\n%s', self._request.header_items())\n[tests/basic-tests-macos  ]   |         except HTTPError as e:  # pragma: no cover\n[tests/basic-tests-macos  ]   |             LOGGER.critical(\n[tests/basic-tests-macos  ]   |                 'ISBNLibHTTPError for %s with code %s [%s]',\n[tests/basic-tests-macos  ]   |                 self._url,\n[tests/basic-tests-macos  ]   |                 e.code,\n[tests/basic-tests-macos  ]   |                 e.msg,\n[tests/basic-tests-macos  ]   |             )\n[tests/basic-tests-macos  ]   |             if e.code in (401, 403, 429):\n[tests/basic-tests-macos  ]   | >               raise ISBNLibHTTPError('%s Are you making many requests?' %\n[tests/basic-tests-macos  ]   |                                        e.code)\n[tests/basic-tests-macos  ]   | E               isbnlib.dev._exceptions.ISBNLibHTTPError: an HTTP error has ocurred (403 Are you making many requests?)\n[tests/basic-tests-macos  ]   | \n[tests/basic-tests-macos  ]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/isbnlib/dev/webservice.py:69: ISBNLibHTTPError\n[tests/basic-tests-macos  ]   | ----------------------------- Captured stderr call -----------------------------\n[tests/basic-tests-macos  ]   | no ISBN found in name of file myfile.pdf \n[tests/basic-tests-macos  ]   | ------------------------------ Captured log call -------------------------------\n[tests/basic-tests-macos  ]   | WARNING  isbntools.contrib.modules.rename._rename:_rename.py:62 No ISBN found in name of file myfile.pdf\n[tests/basic-tests-macos  ]   | CRITICAL isbnlib.dev.webservice:webservice.py:62 ISBNLibHTTPError for https://www.googleapis.com/books/v1/volumes?q=isbn:9780743258074&fields=items/volumeInfo(title,subtitle,authors,publisher,publishedDate,language,industryIdentifiers,description,imageLinks)&maxResults=1 with code 403 [Forbidden]\n[tests/basic-tests-macos  ]   | =========================== short test summary info ============================\n[tests/basic-tests-macos  ]   | FAILED isbntools/contrib/test/test_rename.py::test_renfile - isbnlib.dev._exceptions.ISBNLibHTTPError: an HTTP error has ocurred (403 Are you making many requests?)\n[tests/basic-tests-macos  ]   | FAILED isbntools/contrib/test/test_rename.py::test_rencwdfiles - isbnlib.dev._exceptions.ISBNLibHTTPError: an HTTP error has ocurred (403 Are you making many requests?)\n[tests/basic-tests-macos  ]   | ERROR isbntools/test/test_cache.py::test_shelvecache_meta - isbnlib.dev._exceptions.ISBNLibHTTPError: an HTTP error has ocurred (403 Are you making many requests?)\n[tests/basic-tests-macos  ]   | ERROR isbntools/test/test_cache.py::test_shelvecache_editions - isbnlib.dev._exceptions.ISBNLibHTTPError: an HTTP error has ocurred (403 Are you making many requests?)\n[tests/basic-tests-macos  ]   | ERROR isbntools/test/test_cache.py::test_shelvecache_setget - isbnlib.dev._exceptions.ISBNLibHTTPError: an HTTP error has ocurred (403 Are you making many requests?)\n[tests/basic-tests-macos  ]   | ERROR isbntools/test/test_cache.py::test_shelvecache_contains - isbnlib.dev._exceptions.ISBNLibHTTPError: an HTTP error has ocurred (403 Are you making many requests?)\n[tests/basic-tests-macos  ]   | ==================== 2 failed, 6 passed, 4 errors in 6.01s =====================\n[tests/basic-tests-macos  ]   \u274c  Failure - Main Run pytest tests\n[tests/basic-tests-macos  ] exitcode '1': failure\n[tests/basic-tests-macos  ] \ud83c\udfc1  Job failed\n[tests/basic-tests-windows]   | Collecting wheel\n[tests/basic-tests-linux  ]   | Collecting wheel\n[tests/basic-tests-windows]   |   Downloading wheel-0.40.0-py3-none-any.whl (64 kB)\n[tests/basic-tests-windows]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 64.5/64.5 kB 2.4 MB/s eta 0:00:00\n[tests/basic-tests-linux  ]   |   Downloading wheel-0.40.0-py3-none-any.whl (64 kB)\n[tests/basic-tests-linux  ]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 64.5/64.5 kB 7.2 MB/s eta 0:00:00\n[tests/basic-tests-windows]   | Collecting pytest\n[tests/basic-tests-windows]   |   Downloading pytest-7.3.1-py3-none-any.whl (320 kB)\n[tests/basic-tests-windows]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 320.5/320.5 kB 4.9 MB/s eta 0:00:00\n[tests/basic-tests-linux  ]   | Collecting pytest\n[tests/basic-tests-linux  ]   |   Downloading pytest-7.3.1-py3-none-any.whl (320 kB)\n[tests/basic-tests-windows]   | Collecting pytest-cov\n[tests/basic-tests-windows]   |   Downloading pytest_cov-4.1.0-py3-none-any.whl (21 kB)\n[tests/basic-tests-linux  ]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 320.5/320.5 kB 5.0 MB/s eta 0:00:00\n[tests/basic-tests-linux  ]   | Collecting pytest-cov\n[tests/basic-tests-linux  ]   |   Downloading pytest_cov-4.1.0-py3-none-any.whl (21 kB)\n[tests/basic-tests-windows]   | Collecting coverage\n[tests/basic-tests-windows]   |   Downloading coverage-7.2.6-cp39-cp39-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl (228 kB)\n[tests/basic-tests-windows]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 228.2/228.2 kB 10.2 MB/s eta 0:00:00\n[tests/basic-tests-windows]   | Collecting iniconfig (from pytest)\n[tests/basic-tests-windows]   |   Downloading iniconfig-2.0.0-py3-none-any.whl (5.9 kB)\n[tests/basic-tests-windows]   | Collecting packaging (from pytest)\n[tests/basic-tests-windows]   |   Downloading packaging-23.1-py3-none-any.whl (48 kB)\n[tests/basic-tests-linux  ]   | Collecting coverage\n[tests/basic-tests-linux  ]   |   Downloading coverage-7.2.6-cp37-cp37m-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl (225 kB)\n[tests/basic-tests-windows]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 48.9/48.9 kB 350.0 kB/s eta 0:00:00\n[tests/basic-tests-linux  ]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 225.5/225.5 kB 5.0 MB/s eta 0:00:00\n[tests/basic-tests-windows]   | Collecting pluggy<2.0,>=0.12 (from pytest)\n[tests/basic-tests-windows]   |   Downloading pluggy-1.0.0-py2.py3-none-any.whl (13 kB)\n[tests/basic-tests-linux  ]   | Collecting iniconfig (from pytest)\n[tests/basic-tests-linux  ]   |   Downloading iniconfig-2.0.0-py3-none-any.whl (5.9 kB)\n[tests/basic-tests-windows]   | Collecting exceptiongroup>=1.0.0rc8 (from pytest)\n[tests/basic-tests-windows]   |   Downloading exceptiongroup-1.1.1-py3-none-any.whl (14 kB)\n[tests/basic-tests-linux  ]   | Collecting packaging (from pytest)\n[tests/basic-tests-linux  ]   |   Downloading packaging-23.1-py3-none-any.whl (48 kB)\n[tests/basic-tests-windows]   | Collecting tomli>=1.0.0 (from pytest)\n[tests/basic-tests-windows]   |   Downloading tomli-2.0.1-py3-none-any.whl (12 kB)\n[tests/basic-tests-linux  ]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 48.9/48.9 kB 1.7 MB/s eta 0:00:00\n[tests/basic-tests-linux  ]   | Collecting pluggy<2.0,>=0.12 (from pytest)\n[tests/basic-tests-linux  ]   |   Downloading pluggy-1.0.0-py2.py3-none-any.whl (13 kB)\n[tests/basic-tests-linux  ]   | Collecting exceptiongroup>=1.0.0rc8 (from pytest)\n[tests/basic-tests-linux  ]   |   Downloading exceptiongroup-1.1.1-py3-none-any.whl (14 kB)\n[tests/basic-tests-windows]   | Installing collected packages: wheel, tomli, pluggy, packaging, iniconfig, exceptiongroup, coverage, pytest, pytest-cov\n[tests/basic-tests-linux  ]   | Collecting tomli>=1.0.0 (from pytest)\n[tests/basic-tests-linux  ]   |   Downloading tomli-2.0.1-py3-none-any.whl (12 kB)\n[tests/basic-tests-linux  ]   | Requirement already satisfied: importlib-metadata>=0.12 in /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages (from pytest) (4.2.0)\n[tests/basic-tests-linux  ]   | Requirement already satisfied: zipp>=0.5 in /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages (from importlib-metadata>=0.12->pytest) (3.15.0)\n[tests/basic-tests-linux  ]   | Requirement already satisfied: typing-extensions>=3.6.4 in /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages (from importlib-metadata>=0.12->pytest) (4.6.2)\n[tests/basic-tests-linux  ]   | Installing collected packages: wheel, tomli, packaging, iniconfig, exceptiongroup, coverage, pluggy, pytest, pytest-cov\n[tests/basic-tests-windows]   | Successfully installed coverage-7.2.6 exceptiongroup-1.1.1 iniconfig-2.0.0 packaging-23.1 pluggy-1.0.0 pytest-7.3.1 pytest-cov-4.1.0 tomli-2.0.1 wheel-0.40.0\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | [notice] A new release of pip is available: 21.1.3 -> 23.1.2\n[tests/basic-tests-windows]   | [notice] To update, run: pip install --upgrade pip\n[tests/basic-tests-linux  ]   | Successfully installed coverage-7.2.6 exceptiongroup-1.1.1 iniconfig-2.0.0 packaging-23.1 pluggy-1.0.0 pytest-7.3.1 pytest-cov-4.1.0 tomli-2.0.1 wheel-0.40.0\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | [notice] A new release of pip is available: 20.1.1 -> 23.1.2\n[tests/basic-tests-linux  ]   | [notice] To update, run: pip install --upgrade pip\n[tests/basic-tests-windows]   | ============================= test session starts ==============================\n[tests/basic-tests-windows]   | platform linux -- Python 3.9.6, pytest-7.3.1, pluggy-1.0.0\n[tests/basic-tests-windows]   | rootdir: /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/xlcnd-isbntools\n[tests/basic-tests-windows]   | configfile: setup.cfg\n[tests/basic-tests-windows]   | plugins: cov-4.1.0\n[tests/basic-tests-windows]   | collected 12 items\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | isbntools/contrib/test/test_audit.py .                                   [  8%]\n[tests/basic-tests-linux  ]   | ============================= test session starts ==============================\n[tests/basic-tests-linux  ]   | platform linux -- Python 3.7.11, pytest-7.3.1, pluggy-1.0.0\n[tests/basic-tests-linux  ]   | rootdir: /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/xlcnd-isbntools\n[tests/basic-tests-linux  ]   | configfile: setup.cfg\n[tests/basic-tests-linux  ]   | plugins: cov-4.1.0\n[tests/basic-tests-linux  ]   | collected 12 items\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | isbntools/contrib/test/test_audit.py .                                   [  8%]\n[tests/basic-tests-windows]   | isbntools/contrib/test/test_rename.py ....FF                             [ 58%]\n[tests/basic-tests-linux  ]   | isbntools/contrib/test/test_rename.py ....FF                             [ 58%]\n[tests/basic-tests-windows]   | isbntools/test/test_cache.py EEEE                                        [ 91%]\n[tests/basic-tests-linux  ]   | isbntools/test/test_cache.py EEEE                                        [ 91%]\n[tests/basic-tests-windows]   | isbntools/test/test_doi2tex.py .                                         [100%]\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | ==================================== ERRORS ====================================\n[tests/basic-tests-windows]   | ___________________ ERROR at setup of test_shelvecache_meta ____________________\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | self = <isbnlib.dev.webservice.WEBService object at 0x7f7418638970>\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   |     def response(self):\n[tests/basic-tests-windows]   |         \"\"\"Check errors on response.\"\"\"\n[tests/basic-tests-windows]   |         # TODO(http 102)\n[tests/basic-tests-windows]   |         # How to handle \"102 http's code\"?\n[tests/basic-tests-windows]   |         # - urlopen doesn't catch a 102 code!\n[tests/basic-tests-windows]   |         #   https://docs.python.org/3/howto/urllib2.html#error-codes\n[tests/basic-tests-windows]   |         try:\n[tests/basic-tests-windows]   | >           response = urlopen(\n[tests/basic-tests-windows]   |                 self._request,\n[tests/basic-tests-windows]   |                 timeout=options.get('URLOPEN_TIMEOUT'),\n[tests/basic-tests-windows]   |             )\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/isbnlib/dev/webservice.py:56: \n[tests/basic-tests-windows]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | url = <urllib.request.Request object at 0x7f74186388e0>, data = None\n[tests/basic-tests-windows]   | timeout = 10.0\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   |     def urlopen(url, data=None, timeout=socket._GLOBAL_DEFAULT_TIMEOUT,\n[tests/basic-tests-windows]   |                 *, cafile=None, capath=None, cadefault=False, context=None):\n[tests/basic-tests-windows]   |         '''Open the URL url, which can be either a string or a Request object.\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         *data* must be an object specifying additional data to be sent to\n[tests/basic-tests-windows]   |         the server, or None if no such data is needed.  See Request for\n[tests/basic-tests-windows]   |         details.\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         urllib.request module uses HTTP/1.1 and includes a \"Connection:close\"\n[tests/basic-tests-windows]   |         header in its HTTP requests.\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         The optional *timeout* parameter specifies a timeout in seconds for\n[tests/basic-tests-windows]   |         blocking operations like the connection attempt (if not specified, the\n[tests/basic-tests-windows]   |         global default timeout setting will be used). This only works for HTTP,\n[tests/basic-tests-windows]   |         HTTPS and FTP connections.\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         If *context* is specified, it must be a ssl.SSLContext instance describing\n[tests/basic-tests-windows]   |         the various SSL options. See HTTPSConnection for more details.\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         The optional *cafile* and *capath* parameters specify a set of trusted CA\n[tests/basic-tests-windows]   |         certificates for HTTPS requests. cafile should point to a single file\n[tests/basic-tests-windows]   |         containing a bundle of CA certificates, whereas capath should point to a\n[tests/basic-tests-windows]   |         directory of hashed certificate files. More information can be found in\n[tests/basic-tests-windows]   |         ssl.SSLContext.load_verify_locations().\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         The *cadefault* parameter is ignored.\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         This function always returns an object which can work as a\n[tests/basic-tests-windows]   |         context manager and has the properties url, headers, and status.\n[tests/basic-tests-windows]   |         See urllib.response.addinfourl for more detail on these properties.\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         For HTTP and HTTPS URLs, this function returns a http.client.HTTPResponse\n[tests/basic-tests-windows]   |         object slightly modified. In addition to the three new methods above, the\n[tests/basic-tests-windows]   |         msg attribute contains the same information as the reason attribute ---\n[tests/basic-tests-windows]   |         the reason phrase returned by the server --- instead of the response\n[tests/basic-tests-windows]   |         headers as it is specified in the documentation for HTTPResponse.\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         For FTP, file, and data URLs and requests explicitly handled by legacy\n[tests/basic-tests-windows]   |         URLopener and FancyURLopener classes, this function returns a\n[tests/basic-tests-windows]   |         urllib.response.addinfourl object.\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         Note that None may be returned if no handler handles the request (though\n[tests/basic-tests-windows]   |         the default installed global OpenerDirector uses UnknownHandler to ensure\n[tests/basic-tests-windows]   |         this never happens).\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         In addition, if proxy settings are detected (for example, when a *_proxy\n[tests/basic-tests-windows]   |         environment variable like http_proxy is set), ProxyHandler is default\n[tests/basic-tests-windows]   |         installed and makes sure the requests are handled through the proxy.\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         '''\n[tests/basic-tests-windows]   |         global _opener\n[tests/basic-tests-windows]   |         if cafile or capath or cadefault:\n[tests/basic-tests-windows]   |             import warnings\n[tests/basic-tests-windows]   |             warnings.warn(\"cafile, capath and cadefault are deprecated, use a \"\n[tests/basic-tests-windows]   |                           \"custom context instead.\", DeprecationWarning, 2)\n[tests/basic-tests-windows]   |             if context is not None:\n[tests/basic-tests-windows]   |                 raise ValueError(\n[tests/basic-tests-windows]   |                     \"You can't pass both context and any of cafile, capath, and \"\n[tests/basic-tests-windows]   |                     \"cadefault\"\n[tests/basic-tests-windows]   |                 )\n[tests/basic-tests-windows]   |             if not _have_ssl:\n[tests/basic-tests-windows]   |                 raise ValueError('SSL support not available')\n[tests/basic-tests-windows]   |             context = ssl.create_default_context(ssl.Purpose.SERVER_AUTH,\n[tests/basic-tests-windows]   |                                                  cafile=cafile,\n[tests/basic-tests-windows]   |                                                  capath=capath)\n[tests/basic-tests-windows]   |             https_handler = HTTPSHandler(context=context)\n[tests/basic-tests-windows]   |             opener = build_opener(https_handler)\n[tests/basic-tests-windows]   |         elif context:\n[tests/basic-tests-windows]   |             https_handler = HTTPSHandler(context=context)\n[tests/basic-tests-windows]   |             opener = build_opener(https_handler)\n[tests/basic-tests-windows]   |         elif _opener is None:\n[tests/basic-tests-windows]   |             _opener = opener = build_opener()\n[tests/basic-tests-windows]   |         else:\n[tests/basic-tests-windows]   |             opener = _opener\n[tests/basic-tests-windows]   | >       return opener.open(url, data, timeout)\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/urllib/request.py:214: \n[tests/basic-tests-windows]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | self = <urllib.request.OpenerDirector object at 0x7f7418794f10>\n[tests/basic-tests-windows]   | fullurl = <urllib.request.Request object at 0x7f74186388e0>, data = None\n[tests/basic-tests-windows]   | timeout = 10.0\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   |     def open(self, fullurl, data=None, timeout=socket._GLOBAL_DEFAULT_TIMEOUT):\n[tests/basic-tests-windows]   |         # accept a URL or a Request object\n[tests/basic-tests-windows]   |         if isinstance(fullurl, str):\n[tests/basic-tests-windows]   |             req = Request(fullurl, data)\n[tests/basic-tests-windows]   |         else:\n[tests/basic-tests-windows]   |             req = fullurl\n[tests/basic-tests-windows]   |             if data is not None:\n[tests/basic-tests-windows]   |                 req.data = data\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         req.timeout = timeout\n[tests/basic-tests-windows]   |         protocol = req.type\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         # pre-process request\n[tests/basic-tests-windows]   |         meth_name = protocol+\"_request\"\n[tests/basic-tests-windows]   |         for processor in self.process_request.get(protocol, []):\n[tests/basic-tests-windows]   |             meth = getattr(processor, meth_name)\n[tests/basic-tests-windows]   |             req = meth(req)\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         sys.audit('urllib.Request', req.full_url, req.data, req.headers, req.get_method())\n[tests/basic-tests-windows]   |         response = self._open(req, data)\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         # post-process response\n[tests/basic-tests-windows]   |         meth_name = protocol+\"_response\"\n[tests/basic-tests-windows]   |         for processor in self.process_response.get(protocol, []):\n[tests/basic-tests-windows]   |             meth = getattr(processor, meth_name)\n[tests/basic-tests-windows]   | >           response = meth(req, response)\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/urllib/request.py:523: \n[tests/basic-tests-windows]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | self = <urllib.request.HTTPErrorProcessor object at 0x7f7418794bb0>\n[tests/basic-tests-windows]   | request = <urllib.request.Request object at 0x7f74186388e0>\n[tests/basic-tests-windows]   | response = <http.client.HTTPResponse object at 0x7f7418638850>\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   |     def http_response(self, request, response):\n[tests/basic-tests-windows]   |         code, msg, hdrs = response.code, response.msg, response.info()\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         # According to RFC 2616, \"2xx\" code indicates that the client's\n[tests/basic-tests-windows]   |         # request was successfully received, understood, and accepted.\n[tests/basic-tests-windows]   |         if not (200 <= code < 300):\n[tests/basic-tests-windows]   | >           response = self.parent.error(\n[tests/basic-tests-windows]   |                 'http', request, response, code, msg, hdrs)\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/urllib/request.py:632: \n[tests/basic-tests-windows]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | self = <urllib.request.OpenerDirector object at 0x7f7418794f10>, proto = 403\n[tests/basic-tests-windows]   | args = ({'default': [<urllib.request.HTTPDefaultErrorHandler object at 0x7f7418794b50>], 301: [<urllib.request.HTTPRedirectHa...ult', <urllib.request.Request object at 0x7f74186388e0>, <http.client.HTTPResponse object at 0x7f7418638850>, 403, ...)\n[tests/basic-tests-windows]   | dict = {'default': [<urllib.request.HTTPDefaultErrorHandler object at 0x7f7418794b50>], 301: [<urllib.request.HTTPRedirectHan...PRedirectHandler object at 0x7f7418794c40>], 303: [<urllib.request.HTTPRedirectHandler object at 0x7f7418794c40>], ...}\n[tests/basic-tests-windows]   | meth_name = 'http_error_403', http_err = 1\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   |     def error(self, proto, *args):\n[tests/basic-tests-windows]   |         if proto in ('http', 'https'):\n[tests/basic-tests-windows]   |             # XXX http[s] protocols are special-cased\n[tests/basic-tests-windows]   |             dict = self.handle_error['http'] # https is not different than http\n[tests/basic-tests-windows]   |             proto = args[2]  # YUCK!\n[tests/basic-tests-windows]   |             meth_name = 'http_error_%s' % proto\n[tests/basic-tests-windows]   |             http_err = 1\n[tests/basic-tests-windows]   |             orig_args = args\n[tests/basic-tests-windows]   |         else:\n[tests/basic-tests-windows]   |             dict = self.handle_error\n[tests/basic-tests-windows]   |             meth_name = proto + '_error'\n[tests/basic-tests-windows]   |             http_err = 0\n[tests/basic-tests-windows]   |         args = (dict, proto, meth_name) + args\n[tests/basic-tests-windows]   |         result = self._call_chain(*args)\n[tests/basic-tests-windows]   |         if result:\n[tests/basic-tests-windows]   |             return result\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         if http_err:\n[tests/basic-tests-windows]   |             args = (dict, 'default', 'http_error_default') + orig_args\n[tests/basic-tests-windows]   | >           return self._call_chain(*args)\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/urllib/request.py:561: \n[tests/basic-tests-windows]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | self = <urllib.request.OpenerDirector object at 0x7f7418794f10>\n[tests/basic-tests-windows]   | chain = {'default': [<urllib.request.HTTPDefaultErrorHandler object at 0x7f7418794b50>], 301: [<urllib.request.HTTPRedirectHan...PRedirectHandler object at 0x7f7418794c40>], 303: [<urllib.request.HTTPRedirectHandler object at 0x7f7418794c40>], ...}\n[tests/basic-tests-windows]   | kind = 'default', meth_name = 'http_error_default'\n[tests/basic-tests-windows]   | args = (<urllib.request.Request object at 0x7f74186388e0>, <http.client.HTTPResponse object at 0x7f7418638850>, 403, 'Forbidden', <http.client.HTTPMessage object at 0x7f74186385e0>)\n[tests/basic-tests-windows]   | handlers = [<urllib.request.HTTPDefaultErrorHandler object at 0x7f7418794b50>]\n[tests/basic-tests-windows]   | handler = <urllib.request.HTTPDefaultErrorHandler object at 0x7f7418794b50>\n[tests/basic-tests-windows]   | func = <bound method HTTPDefaultErrorHandler.http_error_default of <urllib.request.HTTPDefaultErrorHandler object at 0x7f7418794b50>>\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   |     def _call_chain(self, chain, kind, meth_name, *args):\n[tests/basic-tests-windows]   |         # Handlers raise an exception if no one else should try to handle\n[tests/basic-tests-windows]   |         # the request, or return None if they can't but another handler\n[tests/basic-tests-windows]   |         # could.  Otherwise, they return the response.\n[tests/basic-tests-windows]   |         handlers = chain.get(kind, ())\n[tests/basic-tests-windows]   |         for handler in handlers:\n[tests/basic-tests-windows]   |             func = getattr(handler, meth_name)\n[tests/basic-tests-windows]   | >           result = func(*args)\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/urllib/request.py:494: \n[tests/basic-tests-windows]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | self = <urllib.request.HTTPDefaultErrorHandler object at 0x7f7418794b50>\n[tests/basic-tests-windows]   | req = <urllib.request.Request object at 0x7f74186388e0>\n[tests/basic-tests-windows]   | fp = <http.client.HTTPResponse object at 0x7f7418638850>, code = 403\n[tests/basic-tests-windows]   | msg = 'Forbidden', hdrs = <http.client.HTTPMessage object at 0x7f74186385e0>\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   |     def http_error_default(self, req, fp, code, msg, hdrs):\n[tests/basic-tests-windows]   | >       raise HTTPError(req.full_url, code, msg, hdrs, fp)\n[tests/basic-tests-windows]   | E       urllib.error.HTTPError: HTTP Error 403: Forbidden\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/urllib/request.py:641: HTTPError\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | During handling of the above exception, another exception occurred:\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   |     def setup_module():\n[tests/basic-tests-windows]   | >       meta('9780375869020')  #  <-- set\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | isbntools/test/test_cache.py:14: \n[tests/basic-tests-windows]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-windows]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/isbnlib/_ext.py:25: in meta\n[tests/basic-tests-windows]   |     return query(isbn, service) if isbn else {}\n[tests/basic-tests-windows]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/isbnlib/dev/_decorators.py:27: in memoized_func\n[tests/basic-tests-windows]   |     value = func(*args, **kwargs)\n[tests/basic-tests-windows]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/isbnlib/_metadata.py:33: in query\n[tests/basic-tests-windows]   |     meta = services[service](isbn)\n[tests/basic-tests-windows]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/isbnlib/_goob.py:72: in query\n[tests/basic-tests-windows]   |     data = wquery(SERVICE_URL.format(isbn='isbn:' + isbn), user_agent=UA)\n[tests/basic-tests-windows]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/isbnlib/dev/webquery.py:65: in query\n[tests/basic-tests-windows]   |     wq = WEBQuery(url, user_agent, throttling)\n[tests/basic-tests-windows]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/isbnlib/dev/webquery.py:32: in __init__\n[tests/basic-tests-windows]   |     self.data = webservice.query(service_url, ua)\n[tests/basic-tests-windows]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/isbnlib/dev/_decorators.py:47: in memoized_func\n[tests/basic-tests-windows]   |     value = func(*args, **kwargs)\n[tests/basic-tests-windows]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/isbnlib/dev/webservice.py:113: in query\n[tests/basic-tests-windows]   |     data = service.data()\n[tests/basic-tests-windows]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/isbnlib/dev/webservice.py:93: in data\n[tests/basic-tests-windows]   |     res = self.response()\n[tests/basic-tests-windows]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | self = <isbnlib.dev.webservice.WEBService object at 0x7f7418638970>\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   |     def response(self):\n[tests/basic-tests-windows]   |         \"\"\"Check errors on response.\"\"\"\n[tests/basic-tests-windows]   |         # TODO(http 102)\n[tests/basic-tests-windows]   |         # How to handle \"102 http's code\"?\n[tests/basic-tests-windows]   |         # - urlopen doesn't catch a 102 code!\n[tests/basic-tests-windows]   |         #   https://docs.python.org/3/howto/urllib2.html#error-codes\n[tests/basic-tests-windows]   |         try:\n[tests/basic-tests-windows]   |             response = urlopen(\n[tests/basic-tests-windows]   |                 self._request,\n[tests/basic-tests-windows]   |                 timeout=options.get('URLOPEN_TIMEOUT'),\n[tests/basic-tests-windows]   |             )\n[tests/basic-tests-windows]   |             LOGGER.debug('Request headers:\\n%s', self._request.header_items())\n[tests/basic-tests-windows]   |         except HTTPError as e:  # pragma: no cover\n[tests/basic-tests-windows]   |             LOGGER.critical(\n[tests/basic-tests-windows]   |                 'ISBNLibHTTPError for %s with code %s [%s]',\n[tests/basic-tests-windows]   |                 self._url,\n[tests/basic-tests-windows]   |                 e.code,\n[tests/basic-tests-windows]   |                 e.msg,\n[tests/basic-tests-windows]   |             )\n[tests/basic-tests-windows]   |             if e.code in (401, 403, 429):\n[tests/basic-tests-windows]   | >               raise ISBNLibHTTPError('%s Are you making many requests?' %\n[tests/basic-tests-windows]   |                                        e.code)\n[tests/basic-tests-windows]   | E               isbnlib.dev._exceptions.ISBNLibHTTPError: an HTTP error has ocurred (403 Are you making many requests?)\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/isbnlib/dev/webservice.py:69: ISBNLibHTTPError\n[tests/basic-tests-windows]   | ------------------------------ Captured log setup ------------------------------\n[tests/basic-tests-windows]   | CRITICAL isbnlib.dev.webservice:webservice.py:62 ISBNLibHTTPError for https://www.googleapis.com/books/v1/volumes?q=isbn:9780375869020&fields=items/volumeInfo(title,subtitle,authors,publisher,publishedDate,language,industryIdentifiers,description,imageLinks)&maxResults=1 with code 403 [Forbidden]\n[tests/basic-tests-windows]   | _________________ ERROR at setup of test_shelvecache_editions __________________\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | self = <isbnlib.dev.webservice.WEBService object at 0x7f7418638970>\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   |     def response(self):\n[tests/basic-tests-windows]   |         \"\"\"Check errors on response.\"\"\"\n[tests/basic-tests-windows]   |         # TODO(http 102)\n[tests/basic-tests-windows]   |         # How to handle \"102 http's code\"?\n[tests/basic-tests-windows]   |         # - urlopen doesn't catch a 102 code!\n[tests/basic-tests-windows]   |         #   https://docs.python.org/3/howto/urllib2.html#error-codes\n[tests/basic-tests-windows]   |         try:\n[tests/basic-tests-windows]   | >           response = urlopen(\n[tests/basic-tests-windows]   |                 self._request,\n[tests/basic-tests-windows]   |                 timeout=options.get('URLOPEN_TIMEOUT'),\n[tests/basic-tests-windows]   |             )\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/isbnlib/dev/webservice.py:56: \n[tests/basic-tests-windows]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | url = <urllib.request.Request object at 0x7f74186388e0>, data = None\n[tests/basic-tests-windows]   | timeout = 10.0\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   |     def urlopen(url, data=None, timeout=socket._GLOBAL_DEFAULT_TIMEOUT,\n[tests/basic-tests-windows]   |                 *, cafile=None, capath=None, cadefault=False, context=None):\n[tests/basic-tests-windows]   |         '''Open the URL url, which can be either a string or a Request object.\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         *data* must be an object specifying additional data to be sent to\n[tests/basic-tests-windows]   |         the server, or None if no such data is needed.  See Request for\n[tests/basic-tests-windows]   |         details.\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         urllib.request module uses HTTP/1.1 and includes a \"Connection:close\"\n[tests/basic-tests-windows]   |         header in its HTTP requests.\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         The optional *timeout* parameter specifies a timeout in seconds for\n[tests/basic-tests-windows]   |         blocking operations like the connection attempt (if not specified, the\n[tests/basic-tests-windows]   |         global default timeout setting will be used). This only works for HTTP,\n[tests/basic-tests-windows]   |         HTTPS and FTP connections.\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         If *context* is specified, it must be a ssl.SSLContext instance describing\n[tests/basic-tests-windows]   |         the various SSL options. See HTTPSConnection for more details.\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         The optional *cafile* and *capath* parameters specify a set of trusted CA\n[tests/basic-tests-windows]   |         certificates for HTTPS requests. cafile should point to a single file\n[tests/basic-tests-windows]   |         containing a bundle of CA certificates, whereas capath should point to a\n[tests/basic-tests-windows]   |         directory of hashed certificate files. More information can be found in\n[tests/basic-tests-windows]   |         ssl.SSLContext.load_verify_locations().\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         The *cadefault* parameter is ignored.\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         This function always returns an object which can work as a\n[tests/basic-tests-windows]   |         context manager and has the properties url, headers, and status.\n[tests/basic-tests-windows]   |         See urllib.response.addinfourl for more detail on these properties.\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         For HTTP and HTTPS URLs, this function returns a http.client.HTTPResponse\n[tests/basic-tests-windows]   |         object slightly modified. In addition to the three new methods above, the\n[tests/basic-tests-windows]   |         msg attribute contains the same information as the reason attribute ---\n[tests/basic-tests-windows]   |         the reason phrase returned by the server --- instead of the response\n[tests/basic-tests-windows]   |         headers as it is specified in the documentation for HTTPResponse.\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         For FTP, file, and data URLs and requests explicitly handled by legacy\n[tests/basic-tests-windows]   |         URLopener and FancyURLopener classes, this function returns a\n[tests/basic-tests-windows]   |         urllib.response.addinfourl object.\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         Note that None may be returned if no handler handles the request (though\n[tests/basic-tests-windows]   |         the default installed global OpenerDirector uses UnknownHandler to ensure\n[tests/basic-tests-windows]   |         this never happens).\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         In addition, if proxy settings are detected (for example, when a *_proxy\n[tests/basic-tests-windows]   |         environment variable like http_proxy is set), ProxyHandler is default\n[tests/basic-tests-windows]   |         installed and makes sure the requests are handled through the proxy.\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         '''\n[tests/basic-tests-windows]   |         global _opener\n[tests/basic-tests-windows]   |         if cafile or capath or cadefault:\n[tests/basic-tests-windows]   |             import warnings\n[tests/basic-tests-windows]   |             warnings.warn(\"cafile, capath and cadefault are deprecated, use a \"\n[tests/basic-tests-windows]   |                           \"custom context instead.\", DeprecationWarning, 2)\n[tests/basic-tests-windows]   |             if context is not None:\n[tests/basic-tests-windows]   |                 raise ValueError(\n[tests/basic-tests-windows]   |                     \"You can't pass both context and any of cafile, capath, and \"\n[tests/basic-tests-windows]   |                     \"cadefault\"\n[tests/basic-tests-windows]   |                 )\n[tests/basic-tests-windows]   |             if not _have_ssl:\n[tests/basic-tests-windows]   |                 raise ValueError('SSL support not available')\n[tests/basic-tests-windows]   |             context = ssl.create_default_context(ssl.Purpose.SERVER_AUTH,\n[tests/basic-tests-windows]   |                                                  cafile=cafile,\n[tests/basic-tests-windows]   |                                                  capath=capath)\n[tests/basic-tests-windows]   |             https_handler = HTTPSHandler(context=context)\n[tests/basic-tests-windows]   |             opener = build_opener(https_handler)\n[tests/basic-tests-windows]   |         elif context:\n[tests/basic-tests-windows]   |             https_handler = HTTPSHandler(context=context)\n[tests/basic-tests-windows]   |             opener = build_opener(https_handler)\n[tests/basic-tests-windows]   |         elif _opener is None:\n[tests/basic-tests-windows]   |             _opener = opener = build_opener()\n[tests/basic-tests-windows]   |         else:\n[tests/basic-tests-windows]   |             opener = _opener\n[tests/basic-tests-windows]   | >       return opener.open(url, data, timeout)\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/urllib/request.py:214: \n[tests/basic-tests-windows]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | self = <urllib.request.OpenerDirector object at 0x7f7418794f10>\n[tests/basic-tests-windows]   | fullurl = <urllib.request.Request object at 0x7f74186388e0>, data = None\n[tests/basic-tests-windows]   | timeout = 10.0\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   |     def open(self, fullurl, data=None, timeout=socket._GLOBAL_DEFAULT_TIMEOUT):\n[tests/basic-tests-windows]   |         # accept a URL or a Request object\n[tests/basic-tests-windows]   |         if isinstance(fullurl, str):\n[tests/basic-tests-windows]   |             req = Request(fullurl, data)\n[tests/basic-tests-windows]   |         else:\n[tests/basic-tests-windows]   |             req = fullurl\n[tests/basic-tests-windows]   |             if data is not None:\n[tests/basic-tests-windows]   |                 req.data = data\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         req.timeout = timeout\n[tests/basic-tests-windows]   |         protocol = req.type\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         # pre-process request\n[tests/basic-tests-windows]   |         meth_name = protocol+\"_request\"\n[tests/basic-tests-windows]   |         for processor in self.process_request.get(protocol, []):\n[tests/basic-tests-windows]   |             meth = getattr(processor, meth_name)\n[tests/basic-tests-windows]   |             req = meth(req)\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         sys.audit('urllib.Request', req.full_url, req.data, req.headers, req.get_method())\n[tests/basic-tests-windows]   |         response = self._open(req, data)\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         # post-process response\n[tests/basic-tests-windows]   |         meth_name = protocol+\"_response\"\n[tests/basic-tests-windows]   |         for processor in self.process_response.get(protocol, []):\n[tests/basic-tests-windows]   |             meth = getattr(processor, meth_name)\n[tests/basic-tests-windows]   | >           response = meth(req, response)\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/urllib/request.py:523: \n[tests/basic-tests-windows]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | self = <urllib.request.HTTPErrorProcessor object at 0x7f7418794bb0>\n[tests/basic-tests-windows]   | request = <urllib.request.Request object at 0x7f74186388e0>\n[tests/basic-tests-windows]   | response = <http.client.HTTPResponse object at 0x7f7418638850>\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   |     def http_response(self, request, response):\n[tests/basic-tests-windows]   |         code, msg, hdrs = response.code, response.msg, response.info()\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         # According to RFC 2616, \"2xx\" code indicates that the client's\n[tests/basic-tests-windows]   |         # request was successfully received, understood, and accepted.\n[tests/basic-tests-windows]   |         if not (200 <= code < 300):\n[tests/basic-tests-windows]   | >           response = self.parent.error(\n[tests/basic-tests-windows]   |                 'http', request, response, code, msg, hdrs)\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/urllib/request.py:632: \n[tests/basic-tests-windows]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | self = <urllib.request.OpenerDirector object at 0x7f7418794f10>, proto = 403\n[tests/basic-tests-windows]   | args = ({'default': [<urllib.request.HTTPDefaultErrorHandler object at 0x7f7418794b50>], 301: [<urllib.request.HTTPRedirectHa...ult', <urllib.request.Request object at 0x7f74186388e0>, <http.client.HTTPResponse object at 0x7f7418638850>, 403, ...)\n[tests/basic-tests-windows]   | dict = {'default': [<urllib.request.HTTPDefaultErrorHandler object at 0x7f7418794b50>], 301: [<urllib.request.HTTPRedirectHan...PRedirectHandler object at 0x7f7418794c40>], 303: [<urllib.request.HTTPRedirectHandler object at 0x7f7418794c40>], ...}\n[tests/basic-tests-windows]   | meth_name = 'http_error_403', http_err = 1\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   |     def error(self, proto, *args):\n[tests/basic-tests-windows]   |         if proto in ('http', 'https'):\n[tests/basic-tests-windows]   |             # XXX http[s] protocols are special-cased\n[tests/basic-tests-windows]   |             dict = self.handle_error['http'] # https is not different than http\n[tests/basic-tests-windows]   |             proto = args[2]  # YUCK!\n[tests/basic-tests-windows]   |             meth_name = 'http_error_%s' % proto\n[tests/basic-tests-windows]   |             http_err = 1\n[tests/basic-tests-windows]   |             orig_args = args\n[tests/basic-tests-windows]   |         else:\n[tests/basic-tests-windows]   |             dict = self.handle_error\n[tests/basic-tests-windows]   |             meth_name = proto + '_error'\n[tests/basic-tests-windows]   |             http_err = 0\n[tests/basic-tests-windows]   |         args = (dict, proto, meth_name) + args\n[tests/basic-tests-windows]   |         result = self._call_chain(*args)\n[tests/basic-tests-windows]   |         if result:\n[tests/basic-tests-windows]   |             return result\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         if http_err:\n[tests/basic-tests-windows]   |             args = (dict, 'default', 'http_error_default') + orig_args\n[tests/basic-tests-windows]   | >           return self._call_chain(*args)\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/urllib/request.py:561: \n[tests/basic-tests-windows]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | self = <urllib.request.OpenerDirector object at 0x7f7418794f10>\n[tests/basic-tests-windows]   | chain = {'default': [<urllib.request.HTTPDefaultErrorHandler object at 0x7f7418794b50>], 301: [<urllib.request.HTTPRedirectHan...PRedirectHandler object at 0x7f7418794c40>], 303: [<urllib.request.HTTPRedirectHandler object at 0x7f7418794c40>], ...}\n[tests/basic-tests-windows]   | kind = 'default', meth_name = 'http_error_default'\n[tests/basic-tests-windows]   | args = (<urllib.request.Request object at 0x7f74186388e0>, <http.client.HTTPResponse object at 0x7f7418638850>, 403, 'Forbidden', <http.client.HTTPMessage object at 0x7f74186385e0>)\n[tests/basic-tests-windows]   | handlers = [<urllib.request.HTTPDefaultErrorHandler object at 0x7f7418794b50>]\n[tests/basic-tests-windows]   | handler = <urllib.request.HTTPDefaultErrorHandler object at 0x7f7418794b50>\n[tests/basic-tests-windows]   | func = <bound method HTTPDefaultErrorHandler.http_error_default of <urllib.request.HTTPDefaultErrorHandler object at 0x7f7418794b50>>\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   |     def _call_chain(self, chain, kind, meth_name, *args):\n[tests/basic-tests-windows]   |         # Handlers raise an exception if no one else should try to handle\n[tests/basic-tests-windows]   |         # the request, or return None if they can't but another handler\n[tests/basic-tests-windows]   |         # could.  Otherwise, they return the response.\n[tests/basic-tests-windows]   |         handlers = chain.get(kind, ())\n[tests/basic-tests-windows]   |         for handler in handlers:\n[tests/basic-tests-windows]   |             func = getattr(handler, meth_name)\n[tests/basic-tests-windows]   | >           result = func(*args)\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/urllib/request.py:494: \n[tests/basic-tests-windows]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | self = <urllib.request.HTTPDefaultErrorHandler object at 0x7f7418794b50>\n[tests/basic-tests-windows]   | req = <urllib.request.Request object at 0x7f74186388e0>\n[tests/basic-tests-windows]   | fp = <http.client.HTTPResponse object at 0x7f7418638850>, code = 403\n[tests/basic-tests-windows]   | msg = 'Forbidden', hdrs = <http.client.HTTPMessage object at 0x7f74186385e0>\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   |     def http_error_default(self, req, fp, code, msg, hdrs):\n[tests/basic-tests-windows]   | >       raise HTTPError(req.full_url, code, msg, hdrs, fp)\n[tests/basic-tests-windows]   | E       urllib.error.HTTPError: HTTP Error 403: Forbidden\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/urllib/request.py:641: HTTPError\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | During handling of the above exception, another exception occurred:\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   |     def setup_module():\n[tests/basic-tests-windows]   | >       meta('9780375869020')  #  <-- set\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | isbntools/test/test_cache.py:14: \n[tests/basic-tests-windows]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-windows]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/isbnlib/_ext.py:25: in meta\n[tests/basic-tests-windows]   |     return query(isbn, service) if isbn else {}\n[tests/basic-tests-windows]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/isbnlib/dev/_decorators.py:27: in memoized_func\n[tests/basic-tests-windows]   |     value = func(*args, **kwargs)\n[tests/basic-tests-windows]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/isbnlib/_metadata.py:33: in query\n[tests/basic-tests-windows]   |     meta = services[service](isbn)\n[tests/basic-tests-windows]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/isbnlib/_goob.py:72: in query\n[tests/basic-tests-windows]   |     data = wquery(SERVICE_URL.format(isbn='isbn:' + isbn), user_agent=UA)\n[tests/basic-tests-windows]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/isbnlib/dev/webquery.py:65: in query\n[tests/basic-tests-windows]   |     wq = WEBQuery(url, user_agent, throttling)\n[tests/basic-tests-windows]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/isbnlib/dev/webquery.py:32: in __init__\n[tests/basic-tests-windows]   |     self.data = webservice.query(service_url, ua)\n[tests/basic-tests-windows]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/isbnlib/dev/_decorators.py:47: in memoized_func\n[tests/basic-tests-windows]   |     value = func(*args, **kwargs)\n[tests/basic-tests-windows]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/isbnlib/dev/webservice.py:113: in query\n[tests/basic-tests-windows]   |     data = service.data()\n[tests/basic-tests-windows]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/isbnlib/dev/webservice.py:93: in data\n[tests/basic-tests-windows]   |     res = self.response()\n[tests/basic-tests-windows]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | self = <isbnlib.dev.webservice.WEBService object at 0x7f7418638970>\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   |     def response(self):\n[tests/basic-tests-windows]   |         \"\"\"Check errors on response.\"\"\"\n[tests/basic-tests-windows]   |         # TODO(http 102)\n[tests/basic-tests-windows]   |         # How to handle \"102 http's code\"?\n[tests/basic-tests-windows]   |         # - urlopen doesn't catch a 102 code!\n[tests/basic-tests-windows]   |         #   https://docs.python.org/3/howto/urllib2.html#error-codes\n[tests/basic-tests-windows]   |         try:\n[tests/basic-tests-windows]   |             response = urlopen(\n[tests/basic-tests-windows]   |                 self._request,\n[tests/basic-tests-windows]   |                 timeout=options.get('URLOPEN_TIMEOUT'),\n[tests/basic-tests-windows]   |             )\n[tests/basic-tests-windows]   |             LOGGER.debug('Request headers:\\n%s', self._request.header_items())\n[tests/basic-tests-windows]   |         except HTTPError as e:  # pragma: no cover\n[tests/basic-tests-windows]   |             LOGGER.critical(\n[tests/basic-tests-windows]   |                 'ISBNLibHTTPError for %s with code %s [%s]',\n[tests/basic-tests-windows]   |                 self._url,\n[tests/basic-tests-windows]   |                 e.code,\n[tests/basic-tests-windows]   |                 e.msg,\n[tests/basic-tests-windows]   |             )\n[tests/basic-tests-windows]   |             if e.code in (401, 403, 429):\n[tests/basic-tests-windows]   | >               raise ISBNLibHTTPError('%s Are you making many requests?' %\n[tests/basic-tests-windows]   |                                        e.code)\n[tests/basic-tests-windows]   | E               isbnlib.dev._exceptions.ISBNLibHTTPError: an HTTP error has ocurred (403 Are you making many requests?)\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/isbnlib/dev/webservice.py:69: ISBNLibHTTPError\n[tests/basic-tests-windows]   | __________________ ERROR at setup of test_shelvecache_setget ___________________\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | self = <isbnlib.dev.webservice.WEBService object at 0x7f7418638970>\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   |     def response(self):\n[tests/basic-tests-windows]   |         \"\"\"Check errors on response.\"\"\"\n[tests/basic-tests-windows]   |         # TODO(http 102)\n[tests/basic-tests-windows]   |         # How to handle \"102 http's code\"?\n[tests/basic-tests-windows]   |         # - urlopen doesn't catch a 102 code!\n[tests/basic-tests-windows]   |         #   https://docs.python.org/3/howto/urllib2.html#error-codes\n[tests/basic-tests-windows]   |         try:\n[tests/basic-tests-windows]   | >           response = urlopen(\n[tests/basic-tests-windows]   |                 self._request,\n[tests/basic-tests-windows]   |                 timeout=options.get('URLOPEN_TIMEOUT'),\n[tests/basic-tests-windows]   |             )\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/isbnlib/dev/webservice.py:56: \n[tests/basic-tests-windows]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | url = <urllib.request.Request object at 0x7f74186388e0>, data = None\n[tests/basic-tests-windows]   | timeout = 10.0\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   |     def urlopen(url, data=None, timeout=socket._GLOBAL_DEFAULT_TIMEOUT,\n[tests/basic-tests-windows]   |                 *, cafile=None, capath=None, cadefault=False, context=None):\n[tests/basic-tests-windows]   |         '''Open the URL url, which can be either a string or a Request object.\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         *data* must be an object specifying additional data to be sent to\n[tests/basic-tests-windows]   |         the server, or None if no such data is needed.  See Request for\n[tests/basic-tests-windows]   |         details.\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         urllib.request module uses HTTP/1.1 and includes a \"Connection:close\"\n[tests/basic-tests-windows]   |         header in its HTTP requests.\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         The optional *timeout* parameter specifies a timeout in seconds for\n[tests/basic-tests-windows]   |         blocking operations like the connection attempt (if not specified, the\n[tests/basic-tests-windows]   |         global default timeout setting will be used). This only works for HTTP,\n[tests/basic-tests-windows]   |         HTTPS and FTP connections.\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         If *context* is specified, it must be a ssl.SSLContext instance describing\n[tests/basic-tests-windows]   |         the various SSL options. See HTTPSConnection for more details.\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         The optional *cafile* and *capath* parameters specify a set of trusted CA\n[tests/basic-tests-windows]   |         certificates for HTTPS requests. cafile should point to a single file\n[tests/basic-tests-windows]   |         containing a bundle of CA certificates, whereas capath should point to a\n[tests/basic-tests-windows]   |         directory of hashed certificate files. More information can be found in\n[tests/basic-tests-windows]   |         ssl.SSLContext.load_verify_locations().\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         The *cadefault* parameter is ignored.\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         This function always returns an object which can work as a\n[tests/basic-tests-windows]   |         context manager and has the properties url, headers, and status.\n[tests/basic-tests-windows]   |         See urllib.response.addinfourl for more detail on these properties.\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         For HTTP and HTTPS URLs, this function returns a http.client.HTTPResponse\n[tests/basic-tests-windows]   |         object slightly modified. In addition to the three new methods above, the\n[tests/basic-tests-windows]   |         msg attribute contains the same information as the reason attribute ---\n[tests/basic-tests-windows]   |         the reason phrase returned by the server --- instead of the response\n[tests/basic-tests-windows]   |         headers as it is specified in the documentation for HTTPResponse.\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         For FTP, file, and data URLs and requests explicitly handled by legacy\n[tests/basic-tests-windows]   |         URLopener and FancyURLopener classes, this function returns a\n[tests/basic-tests-windows]   |         urllib.response.addinfourl object.\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         Note that None may be returned if no handler handles the request (though\n[tests/basic-tests-windows]   |         the default installed global OpenerDirector uses UnknownHandler to ensure\n[tests/basic-tests-windows]   |         this never happens).\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         In addition, if proxy settings are detected (for example, when a *_proxy\n[tests/basic-tests-windows]   |         environment variable like http_proxy is set), ProxyHandler is default\n[tests/basic-tests-windows]   |         installed and makes sure the requests are handled through the proxy.\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         '''\n[tests/basic-tests-windows]   |         global _opener\n[tests/basic-tests-windows]   |         if cafile or capath or cadefault:\n[tests/basic-tests-windows]   |             import warnings\n[tests/basic-tests-windows]   |             warnings.warn(\"cafile, capath and cadefault are deprecated, use a \"\n[tests/basic-tests-windows]   |                           \"custom context instead.\", DeprecationWarning, 2)\n[tests/basic-tests-windows]   |             if context is not None:\n[tests/basic-tests-windows]   |                 raise ValueError(\n[tests/basic-tests-windows]   |                     \"You can't pass both context and any of cafile, capath, and \"\n[tests/basic-tests-windows]   |                     \"cadefault\"\n[tests/basic-tests-windows]   |                 )\n[tests/basic-tests-windows]   |             if not _have_ssl:\n[tests/basic-tests-windows]   |                 raise ValueError('SSL support not available')\n[tests/basic-tests-windows]   |             context = ssl.create_default_context(ssl.Purpose.SERVER_AUTH,\n[tests/basic-tests-windows]   |                                                  cafile=cafile,\n[tests/basic-tests-windows]   |                                                  capath=capath)\n[tests/basic-tests-windows]   |             https_handler = HTTPSHandler(context=context)\n[tests/basic-tests-windows]   |             opener = build_opener(https_handler)\n[tests/basic-tests-windows]   |         elif context:\n[tests/basic-tests-windows]   |             https_handler = HTTPSHandler(context=context)\n[tests/basic-tests-windows]   |             opener = build_opener(https_handler)\n[tests/basic-tests-windows]   |         elif _opener is None:\n[tests/basic-tests-windows]   |             _opener = opener = build_opener()\n[tests/basic-tests-windows]   |         else:\n[tests/basic-tests-windows]   |             opener = _opener\n[tests/basic-tests-windows]   | >       return opener.open(url, data, timeout)\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/urllib/request.py:214: \n[tests/basic-tests-windows]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | self = <urllib.request.OpenerDirector object at 0x7f7418794f10>\n[tests/basic-tests-windows]   | fullurl = <urllib.request.Request object at 0x7f74186388e0>, data = None\n[tests/basic-tests-windows]   | timeout = 10.0\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   |     def open(self, fullurl, data=None, timeout=socket._GLOBAL_DEFAULT_TIMEOUT):\n[tests/basic-tests-windows]   |         # accept a URL or a Request object\n[tests/basic-tests-windows]   |         if isinstance(fullurl, str):\n[tests/basic-tests-windows]   |             req = Request(fullurl, data)\n[tests/basic-tests-windows]   |         else:\n[tests/basic-tests-windows]   |             req = fullurl\n[tests/basic-tests-windows]   |             if data is not None:\n[tests/basic-tests-windows]   |                 req.data = data\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         req.timeout = timeout\n[tests/basic-tests-windows]   |         protocol = req.type\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         # pre-process request\n[tests/basic-tests-windows]   |         meth_name = protocol+\"_request\"\n[tests/basic-tests-windows]   |         for processor in self.process_request.get(protocol, []):\n[tests/basic-tests-windows]   |             meth = getattr(processor, meth_name)\n[tests/basic-tests-windows]   |             req = meth(req)\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         sys.audit('urllib.Request', req.full_url, req.data, req.headers, req.get_method())\n[tests/basic-tests-windows]   |         response = self._open(req, data)\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         # post-process response\n[tests/basic-tests-windows]   |         meth_name = protocol+\"_response\"\n[tests/basic-tests-windows]   |         for processor in self.process_response.get(protocol, []):\n[tests/basic-tests-windows]   |             meth = getattr(processor, meth_name)\n[tests/basic-tests-windows]   | >           response = meth(req, response)\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/urllib/request.py:523: \n[tests/basic-tests-windows]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | self = <urllib.request.HTTPErrorProcessor object at 0x7f7418794bb0>\n[tests/basic-tests-windows]   | request = <urllib.request.Request object at 0x7f74186388e0>\n[tests/basic-tests-windows]   | response = <http.client.HTTPResponse object at 0x7f7418638850>\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   |     def http_response(self, request, response):\n[tests/basic-tests-windows]   |         code, msg, hdrs = response.code, response.msg, response.info()\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         # According to RFC 2616, \"2xx\" code indicates that the client's\n[tests/basic-tests-windows]   |         # request was successfully received, understood, and accepted.\n[tests/basic-tests-windows]   |         if not (200 <= code < 300):\n[tests/basic-tests-windows]   | >           response = self.parent.error(\n[tests/basic-tests-windows]   |                 'http', request, response, code, msg, hdrs)\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/urllib/request.py:632: \n[tests/basic-tests-windows]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | self = <urllib.request.OpenerDirector object at 0x7f7418794f10>, proto = 403\n[tests/basic-tests-windows]   | args = ({'default': [<urllib.request.HTTPDefaultErrorHandler object at 0x7f7418794b50>], 301: [<urllib.request.HTTPRedirectHa...ult', <urllib.request.Request object at 0x7f74186388e0>, <http.client.HTTPResponse object at 0x7f7418638850>, 403, ...)\n[tests/basic-tests-windows]   | dict = {'default': [<urllib.request.HTTPDefaultErrorHandler object at 0x7f7418794b50>], 301: [<urllib.request.HTTPRedirectHan...PRedirectHandler object at 0x7f7418794c40>], 303: [<urllib.request.HTTPRedirectHandler object at 0x7f7418794c40>], ...}\n[tests/basic-tests-windows]   | meth_name = 'http_error_403', http_err = 1\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   |     def error(self, proto, *args):\n[tests/basic-tests-windows]   |         if proto in ('http', 'https'):\n[tests/basic-tests-windows]   |             # XXX http[s] protocols are special-cased\n[tests/basic-tests-windows]   |             dict = self.handle_error['http'] # https is not different than http\n[tests/basic-tests-windows]   |             proto = args[2]  # YUCK!\n[tests/basic-tests-windows]   |             meth_name = 'http_error_%s' % proto\n[tests/basic-tests-windows]   |             http_err = 1\n[tests/basic-tests-windows]   |             orig_args = args\n[tests/basic-tests-windows]   |         else:\n[tests/basic-tests-windows]   |             dict = self.handle_error\n[tests/basic-tests-windows]   |             meth_name = proto + '_error'\n[tests/basic-tests-windows]   |             http_err = 0\n[tests/basic-tests-windows]   |         args = (dict, proto, meth_name) + args\n[tests/basic-tests-windows]   |         result = self._call_chain(*args)\n[tests/basic-tests-windows]   |         if result:\n[tests/basic-tests-windows]   |             return result\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         if http_err:\n[tests/basic-tests-windows]   |             args = (dict, 'default', 'http_error_default') + orig_args\n[tests/basic-tests-windows]   | >           return self._call_chain(*args)\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/urllib/request.py:561: \n[tests/basic-tests-windows]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | self = <urllib.request.OpenerDirector object at 0x7f7418794f10>\n[tests/basic-tests-windows]   | chain = {'default': [<urllib.request.HTTPDefaultErrorHandler object at 0x7f7418794b50>], 301: [<urllib.request.HTTPRedirectHan...PRedirectHandler object at 0x7f7418794c40>], 303: [<urllib.request.HTTPRedirectHandler object at 0x7f7418794c40>], ...}\n[tests/basic-tests-windows]   | kind = 'default', meth_name = 'http_error_default'\n[tests/basic-tests-windows]   | args = (<urllib.request.Request object at 0x7f74186388e0>, <http.client.HTTPResponse object at 0x7f7418638850>, 403, 'Forbidden', <http.client.HTTPMessage object at 0x7f74186385e0>)\n[tests/basic-tests-windows]   | handlers = [<urllib.request.HTTPDefaultErrorHandler object at 0x7f7418794b50>]\n[tests/basic-tests-windows]   | handler = <urllib.request.HTTPDefaultErrorHandler object at 0x7f7418794b50>\n[tests/basic-tests-windows]   | func = <bound method HTTPDefaultErrorHandler.http_error_default of <urllib.request.HTTPDefaultErrorHandler object at 0x7f7418794b50>>\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   |     def _call_chain(self, chain, kind, meth_name, *args):\n[tests/basic-tests-windows]   |         # Handlers raise an exception if no one else should try to handle\n[tests/basic-tests-windows]   |         # the request, or return None if they can't but another handler\n[tests/basic-tests-windows]   |         # could.  Otherwise, they return the response.\n[tests/basic-tests-windows]   |         handlers = chain.get(kind, ())\n[tests/basic-tests-windows]   |         for handler in handlers:\n[tests/basic-tests-windows]   |             func = getattr(handler, meth_name)\n[tests/basic-tests-windows]   | >           result = func(*args)\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/urllib/request.py:494: \n[tests/basic-tests-windows]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | self = <urllib.request.HTTPDefaultErrorHandler object at 0x7f7418794b50>\n[tests/basic-tests-windows]   | req = <urllib.request.Request object at 0x7f74186388e0>\n[tests/basic-tests-windows]   | fp = <http.client.HTTPResponse object at 0x7f7418638850>, code = 403\n[tests/basic-tests-windows]   | msg = 'Forbidden', hdrs = <http.client.HTTPMessage object at 0x7f74186385e0>\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   |     def http_error_default(self, req, fp, code, msg, hdrs):\n[tests/basic-tests-windows]   | >       raise HTTPError(req.full_url, code, msg, hdrs, fp)\n[tests/basic-tests-windows]   | E       urllib.error.HTTPError: HTTP Error 403: Forbidden\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/urllib/request.py:641: HTTPError\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | During handling of the above exception, another exception occurred:\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   |     def setup_module():\n[tests/basic-tests-windows]   | >       meta('9780375869020')  #  <-- set\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | isbntools/test/test_cache.py:14: \n[tests/basic-tests-windows]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-windows]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/isbnlib/_ext.py:25: in meta\n[tests/basic-tests-windows]   |     return query(isbn, service) if isbn else {}\n[tests/basic-tests-windows]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/isbnlib/dev/_decorators.py:27: in memoized_func\n[tests/basic-tests-windows]   |     value = func(*args, **kwargs)\n[tests/basic-tests-windows]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/isbnlib/_metadata.py:33: in query\n[tests/basic-tests-windows]   |     meta = services[service](isbn)\n[tests/basic-tests-windows]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/isbnlib/_goob.py:72: in query\n[tests/basic-tests-windows]   |     data = wquery(SERVICE_URL.format(isbn='isbn:' + isbn), user_agent=UA)\n[tests/basic-tests-windows]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/isbnlib/dev/webquery.py:65: in query\n[tests/basic-tests-windows]   |     wq = WEBQuery(url, user_agent, throttling)\n[tests/basic-tests-windows]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/isbnlib/dev/webquery.py:32: in __init__\n[tests/basic-tests-windows]   |     self.data = webservice.query(service_url, ua)\n[tests/basic-tests-windows]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/isbnlib/dev/_decorators.py:47: in memoized_func\n[tests/basic-tests-windows]   |     value = func(*args, **kwargs)\n[tests/basic-tests-windows]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/isbnlib/dev/webservice.py:113: in query\n[tests/basic-tests-windows]   |     data = service.data()\n[tests/basic-tests-windows]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/isbnlib/dev/webservice.py:93: in data\n[tests/basic-tests-windows]   |     res = self.response()\n[tests/basic-tests-windows]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | self = <isbnlib.dev.webservice.WEBService object at 0x7f7418638970>\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   |     def response(self):\n[tests/basic-tests-windows]   |         \"\"\"Check errors on response.\"\"\"\n[tests/basic-tests-windows]   |         # TODO(http 102)\n[tests/basic-tests-windows]   |         # How to handle \"102 http's code\"?\n[tests/basic-tests-windows]   |         # - urlopen doesn't catch a 102 code!\n[tests/basic-tests-windows]   |         #   https://docs.python.org/3/howto/urllib2.html#error-codes\n[tests/basic-tests-windows]   |         try:\n[tests/basic-tests-windows]   |             response = urlopen(\n[tests/basic-tests-windows]   |                 self._request,\n[tests/basic-tests-windows]   |                 timeout=options.get('URLOPEN_TIMEOUT'),\n[tests/basic-tests-windows]   |             )\n[tests/basic-tests-windows]   |             LOGGER.debug('Request headers:\\n%s', self._request.header_items())\n[tests/basic-tests-windows]   |         except HTTPError as e:  # pragma: no cover\n[tests/basic-tests-windows]   |             LOGGER.critical(\n[tests/basic-tests-windows]   |                 'ISBNLibHTTPError for %s with code %s [%s]',\n[tests/basic-tests-windows]   |                 self._url,\n[tests/basic-tests-windows]   |                 e.code,\n[tests/basic-tests-windows]   |                 e.msg,\n[tests/basic-tests-windows]   |             )\n[tests/basic-tests-windows]   |             if e.code in (401, 403, 429):\n[tests/basic-tests-windows]   | >               raise ISBNLibHTTPError('%s Are you making many requests?' %\n[tests/basic-tests-windows]   |                                        e.code)\n[tests/basic-tests-windows]   | E               isbnlib.dev._exceptions.ISBNLibHTTPError: an HTTP error has ocurred (403 Are you making many requests?)\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/isbnlib/dev/webservice.py:69: ISBNLibHTTPError\n[tests/basic-tests-windows]   | _________________ ERROR at setup of test_shelvecache_contains __________________\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | self = <isbnlib.dev.webservice.WEBService object at 0x7f7418638970>\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   |     def response(self):\n[tests/basic-tests-windows]   |         \"\"\"Check errors on response.\"\"\"\n[tests/basic-tests-windows]   |         # TODO(http 102)\n[tests/basic-tests-windows]   |         # How to handle \"102 http's code\"?\n[tests/basic-tests-windows]   |         # - urlopen doesn't catch a 102 code!\n[tests/basic-tests-windows]   |         #   https://docs.python.org/3/howto/urllib2.html#error-codes\n[tests/basic-tests-windows]   |         try:\n[tests/basic-tests-windows]   | >           response = urlopen(\n[tests/basic-tests-windows]   |                 self._request,\n[tests/basic-tests-windows]   |                 timeout=options.get('URLOPEN_TIMEOUT'),\n[tests/basic-tests-windows]   |             )\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/isbnlib/dev/webservice.py:56: \n[tests/basic-tests-windows]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | url = <urllib.request.Request object at 0x7f74186388e0>, data = None\n[tests/basic-tests-windows]   | timeout = 10.0\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   |     def urlopen(url, data=None, timeout=socket._GLOBAL_DEFAULT_TIMEOUT,\n[tests/basic-tests-windows]   |                 *, cafile=None, capath=None, cadefault=False, context=None):\n[tests/basic-tests-windows]   |         '''Open the URL url, which can be either a string or a Request object.\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         *data* must be an object specifying additional data to be sent to\n[tests/basic-tests-windows]   |         the server, or None if no such data is needed.  See Request for\n[tests/basic-tests-windows]   |         details.\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         urllib.request module uses HTTP/1.1 and includes a \"Connection:close\"\n[tests/basic-tests-windows]   |         header in its HTTP requests.\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         The optional *timeout* parameter specifies a timeout in seconds for\n[tests/basic-tests-windows]   |         blocking operations like the connection attempt (if not specified, the\n[tests/basic-tests-windows]   |         global default timeout setting will be used). This only works for HTTP,\n[tests/basic-tests-windows]   |         HTTPS and FTP connections.\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         If *context* is specified, it must be a ssl.SSLContext instance describing\n[tests/basic-tests-windows]   |         the various SSL options. See HTTPSConnection for more details.\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         The optional *cafile* and *capath* parameters specify a set of trusted CA\n[tests/basic-tests-windows]   |         certificates for HTTPS requests. cafile should point to a single file\n[tests/basic-tests-windows]   |         containing a bundle of CA certificates, whereas capath should point to a\n[tests/basic-tests-windows]   |         directory of hashed certificate files. More information can be found in\n[tests/basic-tests-windows]   |         ssl.SSLContext.load_verify_locations().\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         The *cadefault* parameter is ignored.\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         This function always returns an object which can work as a\n[tests/basic-tests-windows]   |         context manager and has the properties url, headers, and status.\n[tests/basic-tests-windows]   |         See urllib.response.addinfourl for more detail on these properties.\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         For HTTP and HTTPS URLs, this function returns a http.client.HTTPResponse\n[tests/basic-tests-windows]   |         object slightly modified. In addition to the three new methods above, the\n[tests/basic-tests-windows]   |         msg attribute contains the same information as the reason attribute ---\n[tests/basic-tests-windows]   |         the reason phrase returned by the server --- instead of the response\n[tests/basic-tests-windows]   |         headers as it is specified in the documentation for HTTPResponse.\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         For FTP, file, and data URLs and requests explicitly handled by legacy\n[tests/basic-tests-windows]   |         URLopener and FancyURLopener classes, this function returns a\n[tests/basic-tests-windows]   |         urllib.response.addinfourl object.\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         Note that None may be returned if no handler handles the request (though\n[tests/basic-tests-windows]   |         the default installed global OpenerDirector uses UnknownHandler to ensure\n[tests/basic-tests-windows]   |         this never happens).\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         In addition, if proxy settings are detected (for example, when a *_proxy\n[tests/basic-tests-windows]   |         environment variable like http_proxy is set), ProxyHandler is default\n[tests/basic-tests-windows]   |         installed and makes sure the requests are handled through the proxy.\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         '''\n[tests/basic-tests-windows]   |         global _opener\n[tests/basic-tests-windows]   |         if cafile or capath or cadefault:\n[tests/basic-tests-windows]   |             import warnings\n[tests/basic-tests-windows]   |             warnings.warn(\"cafile, capath and cadefault are deprecated, use a \"\n[tests/basic-tests-windows]   |                           \"custom context instead.\", DeprecationWarning, 2)\n[tests/basic-tests-windows]   |             if context is not None:\n[tests/basic-tests-windows]   |                 raise ValueError(\n[tests/basic-tests-windows]   |                     \"You can't pass both context and any of cafile, capath, and \"\n[tests/basic-tests-windows]   |                     \"cadefault\"\n[tests/basic-tests-windows]   |                 )\n[tests/basic-tests-windows]   |             if not _have_ssl:\n[tests/basic-tests-windows]   |                 raise ValueError('SSL support not available')\n[tests/basic-tests-windows]   |             context = ssl.create_default_context(ssl.Purpose.SERVER_AUTH,\n[tests/basic-tests-windows]   |                                                  cafile=cafile,\n[tests/basic-tests-windows]   |                                                  capath=capath)\n[tests/basic-tests-windows]   |             https_handler = HTTPSHandler(context=context)\n[tests/basic-tests-windows]   |             opener = build_opener(https_handler)\n[tests/basic-tests-windows]   |         elif context:\n[tests/basic-tests-windows]   |             https_handler = HTTPSHandler(context=context)\n[tests/basic-tests-windows]   |             opener = build_opener(https_handler)\n[tests/basic-tests-windows]   |         elif _opener is None:\n[tests/basic-tests-windows]   |             _opener = opener = build_opener()\n[tests/basic-tests-windows]   |         else:\n[tests/basic-tests-windows]   |             opener = _opener\n[tests/basic-tests-windows]   | >       return opener.open(url, data, timeout)\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/urllib/request.py:214: \n[tests/basic-tests-windows]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | self = <urllib.request.OpenerDirector object at 0x7f7418794f10>\n[tests/basic-tests-windows]   | fullurl = <urllib.request.Request object at 0x7f74186388e0>, data = None\n[tests/basic-tests-windows]   | timeout = 10.0\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   |     def open(self, fullurl, data=None, timeout=socket._GLOBAL_DEFAULT_TIMEOUT):\n[tests/basic-tests-windows]   |         # accept a URL or a Request object\n[tests/basic-tests-windows]   |         if isinstance(fullurl, str):\n[tests/basic-tests-windows]   |             req = Request(fullurl, data)\n[tests/basic-tests-windows]   |         else:\n[tests/basic-tests-windows]   |             req = fullurl\n[tests/basic-tests-windows]   |             if data is not None:\n[tests/basic-tests-windows]   |                 req.data = data\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         req.timeout = timeout\n[tests/basic-tests-windows]   |         protocol = req.type\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         # pre-process request\n[tests/basic-tests-windows]   |         meth_name = protocol+\"_request\"\n[tests/basic-tests-windows]   |         for processor in self.process_request.get(protocol, []):\n[tests/basic-tests-windows]   |             meth = getattr(processor, meth_name)\n[tests/basic-tests-windows]   |             req = meth(req)\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         sys.audit('urllib.Request', req.full_url, req.data, req.headers, req.get_method())\n[tests/basic-tests-windows]   |         response = self._open(req, data)\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         # post-process response\n[tests/basic-tests-windows]   |         meth_name = protocol+\"_response\"\n[tests/basic-tests-windows]   |         for processor in self.process_response.get(protocol, []):\n[tests/basic-tests-windows]   |             meth = getattr(processor, meth_name)\n[tests/basic-tests-windows]   | >           response = meth(req, response)\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/urllib/request.py:523: \n[tests/basic-tests-windows]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | self = <urllib.request.HTTPErrorProcessor object at 0x7f7418794bb0>\n[tests/basic-tests-windows]   | request = <urllib.request.Request object at 0x7f74186388e0>\n[tests/basic-tests-windows]   | response = <http.client.HTTPResponse object at 0x7f7418638850>\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   |     def http_response(self, request, response):\n[tests/basic-tests-windows]   |         code, msg, hdrs = response.code, response.msg, response.info()\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         # According to RFC 2616, \"2xx\" code indicates that the client's\n[tests/basic-tests-windows]   |         # request was successfully received, understood, and accepted.\n[tests/basic-tests-windows]   |         if not (200 <= code < 300):\n[tests/basic-tests-windows]   | >           response = self.parent.error(\n[tests/basic-tests-windows]   |                 'http', request, response, code, msg, hdrs)\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/urllib/request.py:632: \n[tests/basic-tests-windows]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | self = <urllib.request.OpenerDirector object at 0x7f7418794f10>, proto = 403\n[tests/basic-tests-windows]   | args = ({'default': [<urllib.request.HTTPDefaultErrorHandler object at 0x7f7418794b50>], 301: [<urllib.request.HTTPRedirectHa...ult', <urllib.request.Request object at 0x7f74186388e0>, <http.client.HTTPResponse object at 0x7f7418638850>, 403, ...)\n[tests/basic-tests-windows]   | dict = {'default': [<urllib.request.HTTPDefaultErrorHandler object at 0x7f7418794b50>], 301: [<urllib.request.HTTPRedirectHan...PRedirectHandler object at 0x7f7418794c40>], 303: [<urllib.request.HTTPRedirectHandler object at 0x7f7418794c40>], ...}\n[tests/basic-tests-windows]   | meth_name = 'http_error_403', http_err = 1\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   |     def error(self, proto, *args):\n[tests/basic-tests-windows]   |         if proto in ('http', 'https'):\n[tests/basic-tests-windows]   |             # XXX http[s] protocols are special-cased\n[tests/basic-tests-windows]   |             dict = self.handle_error['http'] # https is not different than http\n[tests/basic-tests-windows]   |             proto = args[2]  # YUCK!\n[tests/basic-tests-windows]   |             meth_name = 'http_error_%s' % proto\n[tests/basic-tests-windows]   |             http_err = 1\n[tests/basic-tests-windows]   |             orig_args = args\n[tests/basic-tests-windows]   |         else:\n[tests/basic-tests-windows]   |             dict = self.handle_error\n[tests/basic-tests-windows]   |             meth_name = proto + '_error'\n[tests/basic-tests-windows]   |             http_err = 0\n[tests/basic-tests-windows]   |         args = (dict, proto, meth_name) + args\n[tests/basic-tests-windows]   |         result = self._call_chain(*args)\n[tests/basic-tests-windows]   |         if result:\n[tests/basic-tests-windows]   |             return result\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         if http_err:\n[tests/basic-tests-windows]   |             args = (dict, 'default', 'http_error_default') + orig_args\n[tests/basic-tests-windows]   | >           return self._call_chain(*args)\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/urllib/request.py:561: \n[tests/basic-tests-windows]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | self = <urllib.request.OpenerDirector object at 0x7f7418794f10>\n[tests/basic-tests-windows]   | chain = {'default': [<urllib.request.HTTPDefaultErrorHandler object at 0x7f7418794b50>], 301: [<urllib.request.HTTPRedirectHan...PRedirectHandler object at 0x7f7418794c40>], 303: [<urllib.request.HTTPRedirectHandler object at 0x7f7418794c40>], ...}\n[tests/basic-tests-windows]   | kind = 'default', meth_name = 'http_error_default'\n[tests/basic-tests-windows]   | args = (<urllib.request.Request object at 0x7f74186388e0>, <http.client.HTTPResponse object at 0x7f7418638850>, 403, 'Forbidden', <http.client.HTTPMessage object at 0x7f74186385e0>)\n[tests/basic-tests-windows]   | handlers = [<urllib.request.HTTPDefaultErrorHandler object at 0x7f7418794b50>]\n[tests/basic-tests-windows]   | handler = <urllib.request.HTTPDefaultErrorHandler object at 0x7f7418794b50>\n[tests/basic-tests-windows]   | func = <bound method HTTPDefaultErrorHandler.http_error_default of <urllib.request.HTTPDefaultErrorHandler object at 0x7f7418794b50>>\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   |     def _call_chain(self, chain, kind, meth_name, *args):\n[tests/basic-tests-windows]   |         # Handlers raise an exception if no one else should try to handle\n[tests/basic-tests-windows]   |         # the request, or return None if they can't but another handler\n[tests/basic-tests-windows]   |         # could.  Otherwise, they return the response.\n[tests/basic-tests-windows]   |         handlers = chain.get(kind, ())\n[tests/basic-tests-windows]   |         for handler in handlers:\n[tests/basic-tests-windows]   |             func = getattr(handler, meth_name)\n[tests/basic-tests-windows]   | >           result = func(*args)\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/urllib/request.py:494: \n[tests/basic-tests-windows]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | self = <urllib.request.HTTPDefaultErrorHandler object at 0x7f7418794b50>\n[tests/basic-tests-windows]   | req = <urllib.request.Request object at 0x7f74186388e0>\n[tests/basic-tests-windows]   | fp = <http.client.HTTPResponse object at 0x7f7418638850>, code = 403\n[tests/basic-tests-windows]   | msg = 'Forbidden', hdrs = <http.client.HTTPMessage object at 0x7f74186385e0>\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   |     def http_error_default(self, req, fp, code, msg, hdrs):\n[tests/basic-tests-windows]   | >       raise HTTPError(req.full_url, code, msg, hdrs, fp)\n[tests/basic-tests-windows]   | E       urllib.error.HTTPError: HTTP Error 403: Forbidden\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/urllib/request.py:641: HTTPError\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | During handling of the above exception, another exception occurred:\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   |     def setup_module():\n[tests/basic-tests-windows]   | >       meta('9780375869020')  #  <-- set\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | isbntools/test/test_cache.py:14: \n[tests/basic-tests-windows]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-windows]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/isbnlib/_ext.py:25: in meta\n[tests/basic-tests-windows]   |     return query(isbn, service) if isbn else {}\n[tests/basic-tests-windows]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/isbnlib/dev/_decorators.py:27: in memoized_func\n[tests/basic-tests-windows]   |     value = func(*args, **kwargs)\n[tests/basic-tests-windows]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/isbnlib/_metadata.py:33: in query\n[tests/basic-tests-windows]   |     meta = services[service](isbn)\n[tests/basic-tests-windows]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/isbnlib/_goob.py:72: in query\n[tests/basic-tests-windows]   |     data = wquery(SERVICE_URL.format(isbn='isbn:' + isbn), user_agent=UA)\n[tests/basic-tests-windows]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/isbnlib/dev/webquery.py:65: in query\n[tests/basic-tests-windows]   |     wq = WEBQuery(url, user_agent, throttling)\n[tests/basic-tests-windows]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/isbnlib/dev/webquery.py:32: in __init__\n[tests/basic-tests-windows]   |     self.data = webservice.query(service_url, ua)\n[tests/basic-tests-windows]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/isbnlib/dev/_decorators.py:47: in memoized_func\n[tests/basic-tests-windows]   |     value = func(*args, **kwargs)\n[tests/basic-tests-windows]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/isbnlib/dev/webservice.py:113: in query\n[tests/basic-tests-windows]   |     data = service.data()\n[tests/basic-tests-windows]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/isbnlib/dev/webservice.py:93: in data\n[tests/basic-tests-windows]   |     res = self.response()\n[tests/basic-tests-windows]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | self = <isbnlib.dev.webservice.WEBService object at 0x7f7418638970>\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   |     def response(self):\n[tests/basic-tests-windows]   |         \"\"\"Check errors on response.\"\"\"\n[tests/basic-tests-windows]   |         # TODO(http 102)\n[tests/basic-tests-windows]   |         # How to handle \"102 http's code\"?\n[tests/basic-tests-windows]   |         # - urlopen doesn't catch a 102 code!\n[tests/basic-tests-windows]   |         #   https://docs.python.org/3/howto/urllib2.html#error-codes\n[tests/basic-tests-windows]   |         try:\n[tests/basic-tests-windows]   |             response = urlopen(\n[tests/basic-tests-windows]   |                 self._request,\n[tests/basic-tests-windows]   |                 timeout=options.get('URLOPEN_TIMEOUT'),\n[tests/basic-tests-windows]   |             )\n[tests/basic-tests-windows]   |             LOGGER.debug('Request headers:\\n%s', self._request.header_items())\n[tests/basic-tests-windows]   |         except HTTPError as e:  # pragma: no cover\n[tests/basic-tests-windows]   |             LOGGER.critical(\n[tests/basic-tests-windows]   |                 'ISBNLibHTTPError for %s with code %s [%s]',\n[tests/basic-tests-windows]   |                 self._url,\n[tests/basic-tests-windows]   |                 e.code,\n[tests/basic-tests-windows]   |                 e.msg,\n[tests/basic-tests-windows]   |             )\n[tests/basic-tests-windows]   |             if e.code in (401, 403, 429):\n[tests/basic-tests-windows]   | >               raise ISBNLibHTTPError('%s Are you making many requests?' %\n[tests/basic-tests-windows]   |                                        e.code)\n[tests/basic-tests-windows]   | E               isbnlib.dev._exceptions.ISBNLibHTTPError: an HTTP error has ocurred (403 Are you making many requests?)\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/isbnlib/dev/webservice.py:69: ISBNLibHTTPError\n[tests/basic-tests-windows]   | =================================== FAILURES ===================================\n[tests/basic-tests-windows]   | _________________________________ test_renfile _________________________________\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | self = <isbnlib.dev.webservice.WEBService object at 0x7f7418794250>\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   |     def response(self):\n[tests/basic-tests-windows]   |         \"\"\"Check errors on response.\"\"\"\n[tests/basic-tests-windows]   |         # TODO(http 102)\n[tests/basic-tests-windows]   |         # How to handle \"102 http's code\"?\n[tests/basic-tests-windows]   |         # - urlopen doesn't catch a 102 code!\n[tests/basic-tests-windows]   |         #   https://docs.python.org/3/howto/urllib2.html#error-codes\n[tests/basic-tests-windows]   |         try:\n[tests/basic-tests-windows]   | >           response = urlopen(\n[tests/basic-tests-windows]   |                 self._request,\n[tests/basic-tests-windows]   |                 timeout=options.get('URLOPEN_TIMEOUT'),\n[tests/basic-tests-windows]   |             )\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/isbnlib/dev/webservice.py:56: \n[tests/basic-tests-windows]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | url = <urllib.request.Request object at 0x7f7418794e50>, data = None\n[tests/basic-tests-windows]   | timeout = 10.0\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   |     def urlopen(url, data=None, timeout=socket._GLOBAL_DEFAULT_TIMEOUT,\n[tests/basic-tests-windows]   |                 *, cafile=None, capath=None, cadefault=False, context=None):\n[tests/basic-tests-windows]   |         '''Open the URL url, which can be either a string or a Request object.\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         *data* must be an object specifying additional data to be sent to\n[tests/basic-tests-windows]   |         the server, or None if no such data is needed.  See Request for\n[tests/basic-tests-windows]   |         details.\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         urllib.request module uses HTTP/1.1 and includes a \"Connection:close\"\n[tests/basic-tests-windows]   |         header in its HTTP requests.\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         The optional *timeout* parameter specifies a timeout in seconds for\n[tests/basic-tests-windows]   |         blocking operations like the connection attempt (if not specified, the\n[tests/basic-tests-windows]   |         global default timeout setting will be used). This only works for HTTP,\n[tests/basic-tests-windows]   |         HTTPS and FTP connections.\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         If *context* is specified, it must be a ssl.SSLContext instance describing\n[tests/basic-tests-windows]   |         the various SSL options. See HTTPSConnection for more details.\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         The optional *cafile* and *capath* parameters specify a set of trusted CA\n[tests/basic-tests-windows]   |         certificates for HTTPS requests. cafile should point to a single file\n[tests/basic-tests-windows]   |         containing a bundle of CA certificates, whereas capath should point to a\n[tests/basic-tests-windows]   |         directory of hashed certificate files. More information can be found in\n[tests/basic-tests-windows]   |         ssl.SSLContext.load_verify_locations().\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         The *cadefault* parameter is ignored.\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         This function always returns an object which can work as a\n[tests/basic-tests-windows]   |         context manager and has the properties url, headers, and status.\n[tests/basic-tests-windows]   |         See urllib.response.addinfourl for more detail on these properties.\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         For HTTP and HTTPS URLs, this function returns a http.client.HTTPResponse\n[tests/basic-tests-windows]   |         object slightly modified. In addition to the three new methods above, the\n[tests/basic-tests-windows]   |         msg attribute contains the same information as the reason attribute ---\n[tests/basic-tests-windows]   |         the reason phrase returned by the server --- instead of the response\n[tests/basic-tests-windows]   |         headers as it is specified in the documentation for HTTPResponse.\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         For FTP, file, and data URLs and requests explicitly handled by legacy\n[tests/basic-tests-windows]   |         URLopener and FancyURLopener classes, this function returns a\n[tests/basic-tests-windows]   |         urllib.response.addinfourl object.\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         Note that None may be returned if no handler handles the request (though\n[tests/basic-tests-windows]   |         the default installed global OpenerDirector uses UnknownHandler to ensure\n[tests/basic-tests-windows]   |         this never happens).\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         In addition, if proxy settings are detected (for example, when a *_proxy\n[tests/basic-tests-windows]   |         environment variable like http_proxy is set), ProxyHandler is default\n[tests/basic-tests-windows]   |         installed and makes sure the requests are handled through the proxy.\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         '''\n[tests/basic-tests-windows]   |         global _opener\n[tests/basic-tests-windows]   |         if cafile or capath or cadefault:\n[tests/basic-tests-windows]   |             import warnings\n[tests/basic-tests-windows]   |             warnings.warn(\"cafile, capath and cadefault are deprecated, use a \"\n[tests/basic-tests-windows]   |                           \"custom context instead.\", DeprecationWarning, 2)\n[tests/basic-tests-windows]   |             if context is not None:\n[tests/basic-tests-windows]   |                 raise ValueError(\n[tests/basic-tests-windows]   |                     \"You can't pass both context and any of cafile, capath, and \"\n[tests/basic-tests-windows]   |                     \"cadefault\"\n[tests/basic-tests-windows]   |                 )\n[tests/basic-tests-windows]   |             if not _have_ssl:\n[tests/basic-tests-windows]   |                 raise ValueError('SSL support not available')\n[tests/basic-tests-windows]   |             context = ssl.create_default_context(ssl.Purpose.SERVER_AUTH,\n[tests/basic-tests-windows]   |                                                  cafile=cafile,\n[tests/basic-tests-windows]   |                                                  capath=capath)\n[tests/basic-tests-windows]   |             https_handler = HTTPSHandler(context=context)\n[tests/basic-tests-windows]   |             opener = build_opener(https_handler)\n[tests/basic-tests-windows]   |         elif context:\n[tests/basic-tests-windows]   |             https_handler = HTTPSHandler(context=context)\n[tests/basic-tests-windows]   |             opener = build_opener(https_handler)\n[tests/basic-tests-windows]   |         elif _opener is None:\n[tests/basic-tests-windows]   |             _opener = opener = build_opener()\n[tests/basic-tests-windows]   |         else:\n[tests/basic-tests-windows]   |             opener = _opener\n[tests/basic-tests-windows]   | >       return opener.open(url, data, timeout)\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/urllib/request.py:214: \n[tests/basic-tests-windows]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | self = <urllib.request.OpenerDirector object at 0x7f7418794f10>\n[tests/basic-tests-windows]   | fullurl = <urllib.request.Request object at 0x7f7418794e50>, data = None\n[tests/basic-tests-windows]   | timeout = 10.0\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   |     def open(self, fullurl, data=None, timeout=socket._GLOBAL_DEFAULT_TIMEOUT):\n[tests/basic-tests-windows]   |         # accept a URL or a Request object\n[tests/basic-tests-windows]   |         if isinstance(fullurl, str):\n[tests/basic-tests-windows]   |             req = Request(fullurl, data)\n[tests/basic-tests-windows]   |         else:\n[tests/basic-tests-windows]   |             req = fullurl\n[tests/basic-tests-windows]   |             if data is not None:\n[tests/basic-tests-windows]   |                 req.data = data\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         req.timeout = timeout\n[tests/basic-tests-windows]   |         protocol = req.type\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         # pre-process request\n[tests/basic-tests-windows]   |         meth_name = protocol+\"_request\"\n[tests/basic-tests-windows]   |         for processor in self.process_request.get(protocol, []):\n[tests/basic-tests-windows]   |             meth = getattr(processor, meth_name)\n[tests/basic-tests-windows]   |             req = meth(req)\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         sys.audit('urllib.Request', req.full_url, req.data, req.headers, req.get_method())\n[tests/basic-tests-windows]   |         response = self._open(req, data)\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         # post-process response\n[tests/basic-tests-windows]   |         meth_name = protocol+\"_response\"\n[tests/basic-tests-windows]   |         for processor in self.process_response.get(protocol, []):\n[tests/basic-tests-windows]   |             meth = getattr(processor, meth_name)\n[tests/basic-tests-windows]   | >           response = meth(req, response)\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/urllib/request.py:523: \n[tests/basic-tests-windows]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | self = <urllib.request.HTTPErrorProcessor object at 0x7f7418794bb0>\n[tests/basic-tests-windows]   | request = <urllib.request.Request object at 0x7f7418794e50>\n[tests/basic-tests-windows]   | response = <http.client.HTTPResponse object at 0x7f7418794970>\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   |     def http_response(self, request, response):\n[tests/basic-tests-windows]   |         code, msg, hdrs = response.code, response.msg, response.info()\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         # According to RFC 2616, \"2xx\" code indicates that the client's\n[tests/basic-tests-windows]   |         # request was successfully received, understood, and accepted.\n[tests/basic-tests-windows]   |         if not (200 <= code < 300):\n[tests/basic-tests-windows]   | >           response = self.parent.error(\n[tests/basic-tests-windows]   |                 'http', request, response, code, msg, hdrs)\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/urllib/request.py:632: \n[tests/basic-tests-windows]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | self = <urllib.request.OpenerDirector object at 0x7f7418794f10>, proto = 403\n[tests/basic-tests-windows]   | args = ({'default': [<urllib.request.HTTPDefaultErrorHandler object at 0x7f7418794b50>], 301: [<urllib.request.HTTPRedirectHa...ult', <urllib.request.Request object at 0x7f7418794e50>, <http.client.HTTPResponse object at 0x7f7418794970>, 403, ...)\n[tests/basic-tests-windows]   | dict = {'default': [<urllib.request.HTTPDefaultErrorHandler object at 0x7f7418794b50>], 301: [<urllib.request.HTTPRedirectHan...PRedirectHandler object at 0x7f7418794c40>], 303: [<urllib.request.HTTPRedirectHandler object at 0x7f7418794c40>], ...}\n[tests/basic-tests-windows]   | meth_name = 'http_error_403', http_err = 1\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   |     def error(self, proto, *args):\n[tests/basic-tests-windows]   |         if proto in ('http', 'https'):\n[tests/basic-tests-windows]   |             # XXX http[s] protocols are special-cased\n[tests/basic-tests-windows]   |             dict = self.handle_error['http'] # https is not different than http\n[tests/basic-tests-windows]   |             proto = args[2]  # YUCK!\n[tests/basic-tests-windows]   |             meth_name = 'http_error_%s' % proto\n[tests/basic-tests-windows]   |             http_err = 1\n[tests/basic-tests-windows]   |             orig_args = args\n[tests/basic-tests-windows]   |         else:\n[tests/basic-tests-windows]   |             dict = self.handle_error\n[tests/basic-tests-windows]   |             meth_name = proto + '_error'\n[tests/basic-tests-windows]   |             http_err = 0\n[tests/basic-tests-windows]   |         args = (dict, proto, meth_name) + args\n[tests/basic-tests-windows]   |         result = self._call_chain(*args)\n[tests/basic-tests-windows]   |         if result:\n[tests/basic-tests-windows]   |             return result\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         if http_err:\n[tests/basic-tests-windows]   |             args = (dict, 'default', 'http_error_default') + orig_args\n[tests/basic-tests-windows]   | >           return self._call_chain(*args)\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/urllib/request.py:561: \n[tests/basic-tests-windows]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | self = <urllib.request.OpenerDirector object at 0x7f7418794f10>\n[tests/basic-tests-windows]   | chain = {'default': [<urllib.request.HTTPDefaultErrorHandler object at 0x7f7418794b50>], 301: [<urllib.request.HTTPRedirectHan...PRedirectHandler object at 0x7f7418794c40>], 303: [<urllib.request.HTTPRedirectHandler object at 0x7f7418794c40>], ...}\n[tests/basic-tests-windows]   | kind = 'default', meth_name = 'http_error_default'\n[tests/basic-tests-windows]   | args = (<urllib.request.Request object at 0x7f7418794e50>, <http.client.HTTPResponse object at 0x7f7418794970>, 403, 'Forbidden', <http.client.HTTPMessage object at 0x7f74187872e0>)\n[tests/basic-tests-windows]   | handlers = [<urllib.request.HTTPDefaultErrorHandler object at 0x7f7418794b50>]\n[tests/basic-tests-windows]   | handler = <urllib.request.HTTPDefaultErrorHandler object at 0x7f7418794b50>\n[tests/basic-tests-windows]   | func = <bound method HTTPDefaultErrorHandler.http_error_default of <urllib.request.HTTPDefaultErrorHandler object at 0x7f7418794b50>>\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   |     def _call_chain(self, chain, kind, meth_name, *args):\n[tests/basic-tests-windows]   |         # Handlers raise an exception if no one else should try to handle\n[tests/basic-tests-windows]   |         # the request, or return None if they can't but another handler\n[tests/basic-tests-windows]   |         # could.  Otherwise, they return the response.\n[tests/basic-tests-windows]   |         handlers = chain.get(kind, ())\n[tests/basic-tests-windows]   |         for handler in handlers:\n[tests/basic-tests-windows]   |             func = getattr(handler, meth_name)\n[tests/basic-tests-windows]   | >           result = func(*args)\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/urllib/request.py:494: \n[tests/basic-tests-windows]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | self = <urllib.request.HTTPDefaultErrorHandler object at 0x7f7418794b50>\n[tests/basic-tests-windows]   | req = <urllib.request.Request object at 0x7f7418794e50>\n[tests/basic-tests-windows]   | fp = <http.client.HTTPResponse object at 0x7f7418794970>, code = 403\n[tests/basic-tests-windows]   | msg = 'Forbidden', hdrs = <http.client.HTTPMessage object at 0x7f74187872e0>\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   |     def http_error_default(self, req, fp, code, msg, hdrs):\n[tests/basic-tests-windows]   | >       raise HTTPError(req.full_url, code, msg, hdrs, fp)\n[tests/basic-tests-windows]   | E       urllib.error.HTTPError: HTTP Error 403: Forbidden\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/urllib/request.py:641: HTTPError\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | During handling of the above exception, another exception occurred:\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   |     def test_renfile():\n[tests/basic-tests-windows]   |         \"\"\"Test the renaming of a file\"\"\"\n[tests/basic-tests-windows]   | >       renfile(F11, '9781593271923', 'default', PATT0)\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | isbntools/contrib/test/test_rename.py:145: \n[tests/basic-tests-windows]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-windows]   | isbntools/contrib/modules/rename/_rename.py:116: in renfile\n[tests/basic-tests-windows]   |     metadata = meta(isbn, service)\n[tests/basic-tests-windows]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/isbnlib/_ext.py:25: in meta\n[tests/basic-tests-windows]   |     return query(isbn, service) if isbn else {}\n[tests/basic-tests-windows]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/isbnlib/dev/_decorators.py:27: in memoized_func\n[tests/basic-tests-windows]   |     value = func(*args, **kwargs)\n[tests/basic-tests-windows]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/isbnlib/_metadata.py:33: in query\n[tests/basic-tests-windows]   |     meta = services[service](isbn)\n[tests/basic-tests-windows]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/isbnlib/_goob.py:72: in query\n[tests/basic-tests-windows]   |     data = wquery(SERVICE_URL.format(isbn='isbn:' + isbn), user_agent=UA)\n[tests/basic-tests-windows]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/isbnlib/dev/webquery.py:65: in query\n[tests/basic-tests-windows]   |     wq = WEBQuery(url, user_agent, throttling)\n[tests/basic-tests-windows]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/isbnlib/dev/webquery.py:32: in __init__\n[tests/basic-tests-windows]   |     self.data = webservice.query(service_url, ua)\n[tests/basic-tests-windows]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/isbnlib/dev/_decorators.py:47: in memoized_func\n[tests/basic-tests-windows]   |     value = func(*args, **kwargs)\n[tests/basic-tests-windows]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/isbnlib/dev/webservice.py:113: in query\n[tests/basic-tests-windows]   |     data = service.data()\n[tests/basic-tests-windows]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/isbnlib/dev/webservice.py:93: in data\n[tests/basic-tests-windows]   |     res = self.response()\n[tests/basic-tests-windows]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | self = <isbnlib.dev.webservice.WEBService object at 0x7f7418794250>\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   |     def response(self):\n[tests/basic-tests-windows]   |         \"\"\"Check errors on response.\"\"\"\n[tests/basic-tests-windows]   |         # TODO(http 102)\n[tests/basic-tests-windows]   |         # How to handle \"102 http's code\"?\n[tests/basic-tests-windows]   |         # - urlopen doesn't catch a 102 code!\n[tests/basic-tests-windows]   |         #   https://docs.python.org/3/howto/urllib2.html#error-codes\n[tests/basic-tests-windows]   |         try:\n[tests/basic-tests-windows]   |             response = urlopen(\n[tests/basic-tests-windows]   |                 self._request,\n[tests/basic-tests-windows]   |                 timeout=options.get('URLOPEN_TIMEOUT'),\n[tests/basic-tests-windows]   |             )\n[tests/basic-tests-windows]   |             LOGGER.debug('Request headers:\\n%s', self._request.header_items())\n[tests/basic-tests-windows]   |         except HTTPError as e:  # pragma: no cover\n[tests/basic-tests-windows]   |             LOGGER.critical(\n[tests/basic-tests-windows]   |                 'ISBNLibHTTPError for %s with code %s [%s]',\n[tests/basic-tests-windows]   |                 self._url,\n[tests/basic-tests-windows]   |                 e.code,\n[tests/basic-tests-windows]   |                 e.msg,\n[tests/basic-tests-windows]   |             )\n[tests/basic-tests-windows]   |             if e.code in (401, 403, 429):\n[tests/basic-tests-windows]   | >               raise ISBNLibHTTPError('%s Are you making many requests?' %\n[tests/basic-tests-windows]   |                                        e.code)\n[tests/basic-tests-windows]   | E               isbnlib.dev._exceptions.ISBNLibHTTPError: an HTTP error has ocurred (403 Are you making many requests?)\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/isbnlib/dev/webservice.py:69: ISBNLibHTTPError\n[tests/basic-tests-windows]   | ------------------------------ Captured log call -------------------------------\n[tests/basic-tests-windows]   | CRITICAL isbnlib.dev.webservice:webservice.py:62 ISBNLibHTTPError for https://www.googleapis.com/books/v1/volumes?q=isbn:9781593271923&fields=items/volumeInfo(title,subtitle,authors,publisher,publishedDate,language,industryIdentifiers,description,imageLinks)&maxResults=1 with code 403 [Forbidden]\n[tests/basic-tests-windows]   | _______________________________ test_rencwdfiles _______________________________\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | self = <isbnlib.dev.webservice.WEBService object at 0x7f74185c32b0>\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   |     def response(self):\n[tests/basic-tests-windows]   |         \"\"\"Check errors on response.\"\"\"\n[tests/basic-tests-windows]   |         # TODO(http 102)\n[tests/basic-tests-windows]   |         # How to handle \"102 http's code\"?\n[tests/basic-tests-windows]   |         # - urlopen doesn't catch a 102 code!\n[tests/basic-tests-windows]   |         #   https://docs.python.org/3/howto/urllib2.html#error-codes\n[tests/basic-tests-windows]   |         try:\n[tests/basic-tests-windows]   | >           response = urlopen(\n[tests/basic-tests-windows]   |                 self._request,\n[tests/basic-tests-windows]   |                 timeout=options.get('URLOPEN_TIMEOUT'),\n[tests/basic-tests-windows]   |             )\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/isbnlib/dev/webservice.py:56: \n[tests/basic-tests-windows]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | url = <urllib.request.Request object at 0x7f74185c3160>, data = None\n[tests/basic-tests-windows]   | timeout = 10.0\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   |     def urlopen(url, data=None, timeout=socket._GLOBAL_DEFAULT_TIMEOUT,\n[tests/basic-tests-windows]   |                 *, cafile=None, capath=None, cadefault=False, context=None):\n[tests/basic-tests-windows]   |         '''Open the URL url, which can be either a string or a Request object.\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         *data* must be an object specifying additional data to be sent to\n[tests/basic-tests-windows]   |         the server, or None if no such data is needed.  See Request for\n[tests/basic-tests-windows]   |         details.\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         urllib.request module uses HTTP/1.1 and includes a \"Connection:close\"\n[tests/basic-tests-windows]   |         header in its HTTP requests.\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         The optional *timeout* parameter specifies a timeout in seconds for\n[tests/basic-tests-windows]   |         blocking operations like the connection attempt (if not specified, the\n[tests/basic-tests-windows]   |         global default timeout setting will be used). This only works for HTTP,\n[tests/basic-tests-windows]   |         HTTPS and FTP connections.\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         If *context* is specified, it must be a ssl.SSLContext instance describing\n[tests/basic-tests-windows]   |         the various SSL options. See HTTPSConnection for more details.\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         The optional *cafile* and *capath* parameters specify a set of trusted CA\n[tests/basic-tests-windows]   |         certificates for HTTPS requests. cafile should point to a single file\n[tests/basic-tests-windows]   |         containing a bundle of CA certificates, whereas capath should point to a\n[tests/basic-tests-windows]   |         directory of hashed certificate files. More information can be found in\n[tests/basic-tests-windows]   |         ssl.SSLContext.load_verify_locations().\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         The *cadefault* parameter is ignored.\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         This function always returns an object which can work as a\n[tests/basic-tests-windows]   |         context manager and has the properties url, headers, and status.\n[tests/basic-tests-windows]   |         See urllib.response.addinfourl for more detail on these properties.\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         For HTTP and HTTPS URLs, this function returns a http.client.HTTPResponse\n[tests/basic-tests-windows]   |         object slightly modified. In addition to the three new methods above, the\n[tests/basic-tests-windows]   |         msg attribute contains the same information as the reason attribute ---\n[tests/basic-tests-windows]   |         the reason phrase returned by the server --- instead of the response\n[tests/basic-tests-windows]   |         headers as it is specified in the documentation for HTTPResponse.\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         For FTP, file, and data URLs and requests explicitly handled by legacy\n[tests/basic-tests-windows]   |         URLopener and FancyURLopener classes, this function returns a\n[tests/basic-tests-windows]   |         urllib.response.addinfourl object.\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         Note that None may be returned if no handler handles the request (though\n[tests/basic-tests-windows]   |         the default installed global OpenerDirector uses UnknownHandler to ensure\n[tests/basic-tests-windows]   |         this never happens).\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         In addition, if proxy settings are detected (for example, when a *_proxy\n[tests/basic-tests-windows]   |         environment variable like http_proxy is set), ProxyHandler is default\n[tests/basic-tests-windows]   |         installed and makes sure the requests are handled through the proxy.\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         '''\n[tests/basic-tests-windows]   |         global _opener\n[tests/basic-tests-windows]   |         if cafile or capath or cadefault:\n[tests/basic-tests-windows]   |             import warnings\n[tests/basic-tests-windows]   |             warnings.warn(\"cafile, capath and cadefault are deprecated, use a \"\n[tests/basic-tests-windows]   |                           \"custom context instead.\", DeprecationWarning, 2)\n[tests/basic-tests-windows]   |             if context is not None:\n[tests/basic-tests-windows]   |                 raise ValueError(\n[tests/basic-tests-windows]   |                     \"You can't pass both context and any of cafile, capath, and \"\n[tests/basic-tests-windows]   |                     \"cadefault\"\n[tests/basic-tests-windows]   |                 )\n[tests/basic-tests-windows]   |             if not _have_ssl:\n[tests/basic-tests-windows]   |                 raise ValueError('SSL support not available')\n[tests/basic-tests-windows]   |             context = ssl.create_default_context(ssl.Purpose.SERVER_AUTH,\n[tests/basic-tests-windows]   |                                                  cafile=cafile,\n[tests/basic-tests-windows]   |                                                  capath=capath)\n[tests/basic-tests-windows]   |             https_handler = HTTPSHandler(context=context)\n[tests/basic-tests-windows]   |             opener = build_opener(https_handler)\n[tests/basic-tests-windows]   |         elif context:\n[tests/basic-tests-windows]   |             https_handler = HTTPSHandler(context=context)\n[tests/basic-tests-windows]   |             opener = build_opener(https_handler)\n[tests/basic-tests-windows]   |         elif _opener is None:\n[tests/basic-tests-windows]   |             _opener = opener = build_opener()\n[tests/basic-tests-windows]   |         else:\n[tests/basic-tests-windows]   |             opener = _opener\n[tests/basic-tests-windows]   | >       return opener.open(url, data, timeout)\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/urllib/request.py:214: \n[tests/basic-tests-windows]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | self = <urllib.request.OpenerDirector object at 0x7f7418794f10>\n[tests/basic-tests-windows]   | fullurl = <urllib.request.Request object at 0x7f74185c3160>, data = None\n[tests/basic-tests-windows]   | timeout = 10.0\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   |     def open(self, fullurl, data=None, timeout=socket._GLOBAL_DEFAULT_TIMEOUT):\n[tests/basic-tests-windows]   |         # accept a URL or a Request object\n[tests/basic-tests-windows]   |         if isinstance(fullurl, str):\n[tests/basic-tests-windows]   |             req = Request(fullurl, data)\n[tests/basic-tests-windows]   |         else:\n[tests/basic-tests-windows]   |             req = fullurl\n[tests/basic-tests-windows]   |             if data is not None:\n[tests/basic-tests-windows]   |                 req.data = data\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         req.timeout = timeout\n[tests/basic-tests-windows]   |         protocol = req.type\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         # pre-process request\n[tests/basic-tests-windows]   |         meth_name = protocol+\"_request\"\n[tests/basic-tests-windows]   |         for processor in self.process_request.get(protocol, []):\n[tests/basic-tests-windows]   |             meth = getattr(processor, meth_name)\n[tests/basic-tests-windows]   |             req = meth(req)\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         sys.audit('urllib.Request', req.full_url, req.data, req.headers, req.get_method())\n[tests/basic-tests-windows]   |         response = self._open(req, data)\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         # post-process response\n[tests/basic-tests-windows]   |         meth_name = protocol+\"_response\"\n[tests/basic-tests-windows]   |         for processor in self.process_response.get(protocol, []):\n[tests/basic-tests-windows]   |             meth = getattr(processor, meth_name)\n[tests/basic-tests-windows]   | >           response = meth(req, response)\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/urllib/request.py:523: \n[tests/basic-tests-windows]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | self = <urllib.request.HTTPErrorProcessor object at 0x7f7418794bb0>\n[tests/basic-tests-windows]   | request = <urllib.request.Request object at 0x7f74185c3160>\n[tests/basic-tests-windows]   | response = <http.client.HTTPResponse object at 0x7f74185c3310>\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   |     def http_response(self, request, response):\n[tests/basic-tests-windows]   |         code, msg, hdrs = response.code, response.msg, response.info()\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         # According to RFC 2616, \"2xx\" code indicates that the client's\n[tests/basic-tests-windows]   |         # request was successfully received, understood, and accepted.\n[tests/basic-tests-windows]   |         if not (200 <= code < 300):\n[tests/basic-tests-windows]   | >           response = self.parent.error(\n[tests/basic-tests-windows]   |                 'http', request, response, code, msg, hdrs)\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/urllib/request.py:632: \n[tests/basic-tests-windows]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | self = <urllib.request.OpenerDirector object at 0x7f7418794f10>, proto = 403\n[tests/basic-tests-windows]   | args = ({'default': [<urllib.request.HTTPDefaultErrorHandler object at 0x7f7418794b50>], 301: [<urllib.request.HTTPRedirectHa...ult', <urllib.request.Request object at 0x7f74185c3160>, <http.client.HTTPResponse object at 0x7f74185c3310>, 403, ...)\n[tests/basic-tests-windows]   | dict = {'default': [<urllib.request.HTTPDefaultErrorHandler object at 0x7f7418794b50>], 301: [<urllib.request.HTTPRedirectHan...PRedirectHandler object at 0x7f7418794c40>], 303: [<urllib.request.HTTPRedirectHandler object at 0x7f7418794c40>], ...}\n[tests/basic-tests-windows]   | meth_name = 'http_error_403', http_err = 1\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   |     def error(self, proto, *args):\n[tests/basic-tests-windows]   |         if proto in ('http', 'https'):\n[tests/basic-tests-windows]   |             # XXX http[s] protocols are special-cased\n[tests/basic-tests-windows]   |             dict = self.handle_error['http'] # https is not different than http\n[tests/basic-tests-windows]   |             proto = args[2]  # YUCK!\n[tests/basic-tests-windows]   |             meth_name = 'http_error_%s' % proto\n[tests/basic-tests-windows]   |             http_err = 1\n[tests/basic-tests-windows]   |             orig_args = args\n[tests/basic-tests-windows]   |         else:\n[tests/basic-tests-windows]   |             dict = self.handle_error\n[tests/basic-tests-windows]   |             meth_name = proto + '_error'\n[tests/basic-tests-windows]   |             http_err = 0\n[tests/basic-tests-windows]   |         args = (dict, proto, meth_name) + args\n[tests/basic-tests-windows]   |         result = self._call_chain(*args)\n[tests/basic-tests-windows]   |         if result:\n[tests/basic-tests-windows]   |             return result\n[tests/basic-tests-windows]   |     \n[tests/basic-tests-windows]   |         if http_err:\n[tests/basic-tests-windows]   |             args = (dict, 'default', 'http_error_default') + orig_args\n[tests/basic-tests-windows]   | >           return self._call_chain(*args)\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/urllib/request.py:561: \n[tests/basic-tests-windows]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | self = <urllib.request.OpenerDirector object at 0x7f7418794f10>\n[tests/basic-tests-windows]   | chain = {'default': [<urllib.request.HTTPDefaultErrorHandler object at 0x7f7418794b50>], 301: [<urllib.request.HTTPRedirectHan...PRedirectHandler object at 0x7f7418794c40>], 303: [<urllib.request.HTTPRedirectHandler object at 0x7f7418794c40>], ...}\n[tests/basic-tests-windows]   | kind = 'default', meth_name = 'http_error_default'\n[tests/basic-tests-windows]   | args = (<urllib.request.Request object at 0x7f74185c3160>, <http.client.HTTPResponse object at 0x7f74185c3310>, 403, 'Forbidden', <http.client.HTTPMessage object at 0x7f74185c3cd0>)\n[tests/basic-tests-windows]   | handlers = [<urllib.request.HTTPDefaultErrorHandler object at 0x7f7418794b50>]\n[tests/basic-tests-windows]   | handler = <urllib.request.HTTPDefaultErrorHandler object at 0x7f7418794b50>\n[tests/basic-tests-windows]   | func = <bound method HTTPDefaultErrorHandler.http_error_default of <urllib.request.HTTPDefaultErrorHandler object at 0x7f7418794b50>>\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   |     def _call_chain(self, chain, kind, meth_name, *args):\n[tests/basic-tests-windows]   |         # Handlers raise an exception if no one else should try to handle\n[tests/basic-tests-windows]   |         # the request, or return None if they can't but another handler\n[tests/basic-tests-windows]   |         # could.  Otherwise, they return the response.\n[tests/basic-tests-windows]   |         handlers = chain.get(kind, ())\n[tests/basic-tests-windows]   |         for handler in handlers:\n[tests/basic-tests-windows]   |             func = getattr(handler, meth_name)\n[tests/basic-tests-windows]   | >           result = func(*args)\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/urllib/request.py:494: \n[tests/basic-tests-windows]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | self = <urllib.request.HTTPDefaultErrorHandler object at 0x7f7418794b50>\n[tests/basic-tests-windows]   | req = <urllib.request.Request object at 0x7f74185c3160>\n[tests/basic-tests-windows]   | fp = <http.client.HTTPResponse object at 0x7f74185c3310>, code = 403\n[tests/basic-tests-windows]   | msg = 'Forbidden', hdrs = <http.client.HTTPMessage object at 0x7f74185c3cd0>\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   |     def http_error_default(self, req, fp, code, msg, hdrs):\n[tests/basic-tests-windows]   | >       raise HTTPError(req.full_url, code, msg, hdrs, fp)\n[tests/basic-tests-windows]   | E       urllib.error.HTTPError: HTTP Error 403: Forbidden\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/urllib/request.py:641: HTTPError\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | During handling of the above exception, another exception occurred:\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   |     def test_rencwdfiles():\n[tests/basic-tests-windows]   |         \"\"\"Test the renaming of files in current directory\"\"\"\n[tests/basic-tests-windows]   |         delete_files('*deleteme*.pdf')\n[tests/basic-tests-windows]   | >       rencwdfiles('*.pdf', 'default', PATT0)\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | isbntools/contrib/test/test_rename.py:159: \n[tests/basic-tests-windows]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-windows]   | isbntools/contrib/modules/rename/_rename.py:147: in rencwdfiles\n[tests/basic-tests-windows]   |     renfile(f, isbn, service, pattern)\n[tests/basic-tests-windows]   | isbntools/contrib/modules/rename/_rename.py:116: in renfile\n[tests/basic-tests-windows]   |     metadata = meta(isbn, service)\n[tests/basic-tests-windows]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/isbnlib/_ext.py:25: in meta\n[tests/basic-tests-windows]   |     return query(isbn, service) if isbn else {}\n[tests/basic-tests-windows]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/isbnlib/dev/_decorators.py:27: in memoized_func\n[tests/basic-tests-windows]   |     value = func(*args, **kwargs)\n[tests/basic-tests-windows]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/isbnlib/_metadata.py:33: in query\n[tests/basic-tests-windows]   |     meta = services[service](isbn)\n[tests/basic-tests-windows]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/isbnlib/_goob.py:72: in query\n[tests/basic-tests-windows]   |     data = wquery(SERVICE_URL.format(isbn='isbn:' + isbn), user_agent=UA)\n[tests/basic-tests-windows]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/isbnlib/dev/webquery.py:65: in query\n[tests/basic-tests-windows]   |     wq = WEBQuery(url, user_agent, throttling)\n[tests/basic-tests-windows]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/isbnlib/dev/webquery.py:32: in __init__\n[tests/basic-tests-windows]   |     self.data = webservice.query(service_url, ua)\n[tests/basic-tests-windows]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/isbnlib/dev/_decorators.py:47: in memoized_func\n[tests/basic-tests-windows]   |     value = func(*args, **kwargs)\n[tests/basic-tests-windows]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/isbnlib/dev/webservice.py:113: in query\n[tests/basic-tests-windows]   |     data = service.data()\n[tests/basic-tests-windows]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/isbnlib/dev/webservice.py:93: in data\n[tests/basic-tests-windows]   |     res = self.response()\n[tests/basic-tests-windows]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | self = <isbnlib.dev.webservice.WEBService object at 0x7f74185c32b0>\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   |     def response(self):\n[tests/basic-tests-windows]   |         \"\"\"Check errors on response.\"\"\"\n[tests/basic-tests-windows]   |         # TODO(http 102)\n[tests/basic-tests-windows]   |         # How to handle \"102 http's code\"?\n[tests/basic-tests-windows]   |         # - urlopen doesn't catch a 102 code!\n[tests/basic-tests-windows]   |         #   https://docs.python.org/3/howto/urllib2.html#error-codes\n[tests/basic-tests-windows]   |         try:\n[tests/basic-tests-windows]   |             response = urlopen(\n[tests/basic-tests-windows]   |                 self._request,\n[tests/basic-tests-windows]   |                 timeout=options.get('URLOPEN_TIMEOUT'),\n[tests/basic-tests-windows]   |             )\n[tests/basic-tests-windows]   |             LOGGER.debug('Request headers:\\n%s', self._request.header_items())\n[tests/basic-tests-windows]   |         except HTTPError as e:  # pragma: no cover\n[tests/basic-tests-windows]   |             LOGGER.critical(\n[tests/basic-tests-windows]   |                 'ISBNLibHTTPError for %s with code %s [%s]',\n[tests/basic-tests-windows]   |                 self._url,\n[tests/basic-tests-windows]   |                 e.code,\n[tests/basic-tests-windows]   |                 e.msg,\n[tests/basic-tests-windows]   |             )\n[tests/basic-tests-windows]   |             if e.code in (401, 403, 429):\n[tests/basic-tests-windows]   | >               raise ISBNLibHTTPError('%s Are you making many requests?' %\n[tests/basic-tests-windows]   |                                        e.code)\n[tests/basic-tests-windows]   | E               isbnlib.dev._exceptions.ISBNLibHTTPError: an HTTP error has ocurred (403 Are you making many requests?)\n[tests/basic-tests-windows]   | \n[tests/basic-tests-windows]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/isbnlib/dev/webservice.py:69: ISBNLibHTTPError\n[tests/basic-tests-windows]   | ----------------------------- Captured stderr call -----------------------------\n[tests/basic-tests-windows]   | no ISBN found in name of file myfile.pdf \n[tests/basic-tests-windows]   | ------------------------------ Captured log call -------------------------------\n[tests/basic-tests-windows]   | WARNING  isbntools.contrib.modules.rename._rename:_rename.py:62 No ISBN found in name of file myfile.pdf\n[tests/basic-tests-windows]   | CRITICAL isbnlib.dev.webservice:webservice.py:62 ISBNLibHTTPError for https://www.googleapis.com/books/v1/volumes?q=isbn:9780743258074&fields=items/volumeInfo(title,subtitle,authors,publisher,publishedDate,language,industryIdentifiers,description,imageLinks)&maxResults=1 with code 403 [Forbidden]\n[tests/basic-tests-windows]   | =========================== short test summary info ============================\n[tests/basic-tests-windows]   | FAILED isbntools/contrib/test/test_rename.py::test_renfile - isbnlib.dev._exceptions.ISBNLibHTTPError: an HTTP error has ocurred (403 Are you making many requests?)\n[tests/basic-tests-windows]   | FAILED isbntools/contrib/test/test_rename.py::test_rencwdfiles - isbnlib.dev._exceptions.ISBNLibHTTPError: an HTTP error has ocurred (403 Are you making many requests?)\n[tests/basic-tests-windows]   | ERROR isbntools/test/test_cache.py::test_shelvecache_meta - isbnlib.dev._exceptions.ISBNLibHTTPError: an HTTP error has ocurred (403 Are you making many requests?)\n[tests/basic-tests-windows]   | ERROR isbntools/test/test_cache.py::test_shelvecache_editions - isbnlib.dev._exceptions.ISBNLibHTTPError: an HTTP error has ocurred (403 Are you making many requests?)\n[tests/basic-tests-windows]   | ERROR isbntools/test/test_cache.py::test_shelvecache_setget - isbnlib.dev._exceptions.ISBNLibHTTPError: an HTTP error has ocurred (403 Are you making many requests?)\n[tests/basic-tests-windows]   | ERROR isbntools/test/test_cache.py::test_shelvecache_contains - isbnlib.dev._exceptions.ISBNLibHTTPError: an HTTP error has ocurred (403 Are you making many requests?)\n[tests/basic-tests-windows]   | ==================== 2 failed, 6 passed, 4 errors in 3.96s =====================\n[tests/basic-tests-windows]   \u274c  Failure - Main Run pytest tests\n[tests/basic-tests-linux  ]   | isbntools/test/test_doi2tex.py .                                         [100%]\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | ==================================== ERRORS ====================================\n[tests/basic-tests-linux  ]   | ___________________ ERROR at setup of test_shelvecache_meta ____________________\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | self = <isbnlib.dev.webservice.WEBService object at 0x7f14e394b090>\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   |     def response(self):\n[tests/basic-tests-linux  ]   |         \"\"\"Check errors on response.\"\"\"\n[tests/basic-tests-linux  ]   |         # TODO(http 102)\n[tests/basic-tests-linux  ]   |         # How to handle \"102 http's code\"?\n[tests/basic-tests-linux  ]   |         # - urlopen doesn't catch a 102 code!\n[tests/basic-tests-linux  ]   |         #   https://docs.python.org/3/howto/urllib2.html#error-codes\n[tests/basic-tests-linux  ]   |         try:\n[tests/basic-tests-linux  ]   |             response = urlopen(\n[tests/basic-tests-linux  ]   |                 self._request,\n[tests/basic-tests-linux  ]   | >               timeout=options.get('URLOPEN_TIMEOUT'),\n[tests/basic-tests-linux  ]   |             )\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/isbnlib/dev/webservice.py:58: \n[tests/basic-tests-linux  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | url = <urllib.request.Request object at 0x7f14e394b110>, data = None\n[tests/basic-tests-linux  ]   | timeout = 10.0\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   |     def urlopen(url, data=None, timeout=socket._GLOBAL_DEFAULT_TIMEOUT,\n[tests/basic-tests-linux  ]   |                 *, cafile=None, capath=None, cadefault=False, context=None):\n[tests/basic-tests-linux  ]   |         '''Open the URL url, which can be either a string or a Request object.\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         *data* must be an object specifying additional data to be sent to\n[tests/basic-tests-linux  ]   |         the server, or None if no such data is needed.  See Request for\n[tests/basic-tests-linux  ]   |         details.\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         urllib.request module uses HTTP/1.1 and includes a \"Connection:close\"\n[tests/basic-tests-linux  ]   |         header in its HTTP requests.\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         The optional *timeout* parameter specifies a timeout in seconds for\n[tests/basic-tests-linux  ]   |         blocking operations like the connection attempt (if not specified, the\n[tests/basic-tests-linux  ]   |         global default timeout setting will be used). This only works for HTTP,\n[tests/basic-tests-linux  ]   |         HTTPS and FTP connections.\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         If *context* is specified, it must be a ssl.SSLContext instance describing\n[tests/basic-tests-linux  ]   |         the various SSL options. See HTTPSConnection for more details.\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         The optional *cafile* and *capath* parameters specify a set of trusted CA\n[tests/basic-tests-linux  ]   |         certificates for HTTPS requests. cafile should point to a single file\n[tests/basic-tests-linux  ]   |         containing a bundle of CA certificates, whereas capath should point to a\n[tests/basic-tests-linux  ]   |         directory of hashed certificate files. More information can be found in\n[tests/basic-tests-linux  ]   |         ssl.SSLContext.load_verify_locations().\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         The *cadefault* parameter is ignored.\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         This function always returns an object which can work as a context\n[tests/basic-tests-linux  ]   |         manager and has methods such as\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         * geturl() - return the URL of the resource retrieved, commonly used to\n[tests/basic-tests-linux  ]   |           determine if a redirect was followed\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         * info() - return the meta-information of the page, such as headers, in the\n[tests/basic-tests-linux  ]   |           form of an email.message_from_string() instance (see Quick Reference to\n[tests/basic-tests-linux  ]   |           HTTP Headers)\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         * getcode() - return the HTTP status code of the response.  Raises URLError\n[tests/basic-tests-linux  ]   |           on errors.\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         For HTTP and HTTPS URLs, this function returns a http.client.HTTPResponse\n[tests/basic-tests-linux  ]   |         object slightly modified. In addition to the three new methods above, the\n[tests/basic-tests-linux  ]   |         msg attribute contains the same information as the reason attribute ---\n[tests/basic-tests-linux  ]   |         the reason phrase returned by the server --- instead of the response\n[tests/basic-tests-linux  ]   |         headers as it is specified in the documentation for HTTPResponse.\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         For FTP, file, and data URLs and requests explicitly handled by legacy\n[tests/basic-tests-linux  ]   |         URLopener and FancyURLopener classes, this function returns a\n[tests/basic-tests-linux  ]   |         urllib.response.addinfourl object.\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         Note that None may be returned if no handler handles the request (though\n[tests/basic-tests-linux  ]   |         the default installed global OpenerDirector uses UnknownHandler to ensure\n[tests/basic-tests-linux  ]   |         this never happens).\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         In addition, if proxy settings are detected (for example, when a *_proxy\n[tests/basic-tests-linux  ]   |         environment variable like http_proxy is set), ProxyHandler is default\n[tests/basic-tests-linux  ]   |         installed and makes sure the requests are handled through the proxy.\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         '''\n[tests/basic-tests-linux  ]   |         global _opener\n[tests/basic-tests-linux  ]   |         if cafile or capath or cadefault:\n[tests/basic-tests-linux  ]   |             import warnings\n[tests/basic-tests-linux  ]   |             warnings.warn(\"cafile, capath and cadefault are deprecated, use a \"\n[tests/basic-tests-linux  ]   |                           \"custom context instead.\", DeprecationWarning, 2)\n[tests/basic-tests-linux  ]   |             if context is not None:\n[tests/basic-tests-linux  ]   |                 raise ValueError(\n[tests/basic-tests-linux  ]   |                     \"You can't pass both context and any of cafile, capath, and \"\n[tests/basic-tests-linux  ]   |                     \"cadefault\"\n[tests/basic-tests-linux  ]   |                 )\n[tests/basic-tests-linux  ]   |             if not _have_ssl:\n[tests/basic-tests-linux  ]   |                 raise ValueError('SSL support not available')\n[tests/basic-tests-linux  ]   |             context = ssl.create_default_context(ssl.Purpose.SERVER_AUTH,\n[tests/basic-tests-linux  ]   |                                                  cafile=cafile,\n[tests/basic-tests-linux  ]   |                                                  capath=capath)\n[tests/basic-tests-linux  ]   |             https_handler = HTTPSHandler(context=context)\n[tests/basic-tests-linux  ]   |             opener = build_opener(https_handler)\n[tests/basic-tests-linux  ]   |         elif context:\n[tests/basic-tests-linux  ]   |             https_handler = HTTPSHandler(context=context)\n[tests/basic-tests-linux  ]   |             opener = build_opener(https_handler)\n[tests/basic-tests-linux  ]   |         elif _opener is None:\n[tests/basic-tests-linux  ]   |             _opener = opener = build_opener()\n[tests/basic-tests-linux  ]   |         else:\n[tests/basic-tests-linux  ]   |             opener = _opener\n[tests/basic-tests-linux  ]   | >       return opener.open(url, data, timeout)\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/urllib/request.py:222: \n[tests/basic-tests-linux  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | self = <urllib.request.OpenerDirector object at 0x7f14e3cc4050>\n[tests/basic-tests-linux  ]   | fullurl = <urllib.request.Request object at 0x7f14e394b110>, data = None\n[tests/basic-tests-linux  ]   | timeout = 10.0\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   |     def open(self, fullurl, data=None, timeout=socket._GLOBAL_DEFAULT_TIMEOUT):\n[tests/basic-tests-linux  ]   |         # accept a URL or a Request object\n[tests/basic-tests-linux  ]   |         if isinstance(fullurl, str):\n[tests/basic-tests-linux  ]   |             req = Request(fullurl, data)\n[tests/basic-tests-linux  ]   |         else:\n[tests/basic-tests-linux  ]   |             req = fullurl\n[tests/basic-tests-linux  ]   |             if data is not None:\n[tests/basic-tests-linux  ]   |                 req.data = data\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         req.timeout = timeout\n[tests/basic-tests-linux  ]   |         protocol = req.type\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         # pre-process request\n[tests/basic-tests-linux  ]   |         meth_name = protocol+\"_request\"\n[tests/basic-tests-linux  ]   |         for processor in self.process_request.get(protocol, []):\n[tests/basic-tests-linux  ]   |             meth = getattr(processor, meth_name)\n[tests/basic-tests-linux  ]   |             req = meth(req)\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         response = self._open(req, data)\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         # post-process response\n[tests/basic-tests-linux  ]   |         meth_name = protocol+\"_response\"\n[tests/basic-tests-linux  ]   |         for processor in self.process_response.get(protocol, []):\n[tests/basic-tests-linux  ]   |             meth = getattr(processor, meth_name)\n[tests/basic-tests-linux  ]   | >           response = meth(req, response)\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/urllib/request.py:531: \n[tests/basic-tests-linux  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | self = <urllib.request.HTTPErrorProcessor object at 0x7f14e3cc4dd0>\n[tests/basic-tests-linux  ]   | request = <urllib.request.Request object at 0x7f14e394b110>\n[tests/basic-tests-linux  ]   | response = <http.client.HTTPResponse object at 0x7f14e394b350>\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   |     def http_response(self, request, response):\n[tests/basic-tests-linux  ]   |         code, msg, hdrs = response.code, response.msg, response.info()\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         # According to RFC 2616, \"2xx\" code indicates that the client's\n[tests/basic-tests-linux  ]   |         # request was successfully received, understood, and accepted.\n[tests/basic-tests-linux  ]   |         if not (200 <= code < 300):\n[tests/basic-tests-linux  ]   |             response = self.parent.error(\n[tests/basic-tests-linux  ]   | >               'http', request, response, code, msg, hdrs)\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/urllib/request.py:641: \n[tests/basic-tests-linux  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | self = <urllib.request.OpenerDirector object at 0x7f14e3cc4050>, proto = 403\n[tests/basic-tests-linux  ]   | args = ({'default': [<urllib.request.HTTPDefaultErrorHandler object at 0x7f14e3cc4450>], 301: [<urllib.request.HTTPRedirectHa...ult', <urllib.request.Request object at 0x7f14e394b110>, <http.client.HTTPResponse object at 0x7f14e394b350>, 403, ...)\n[tests/basic-tests-linux  ]   | dict = {'default': [<urllib.request.HTTPDefaultErrorHandler object at 0x7f14e3cc4450>], 301: [<urllib.request.HTTPRedirectHan...PRedirectHandler object at 0x7f14e3cc4410>], 303: [<urllib.request.HTTPRedirectHandler object at 0x7f14e3cc4410>], ...}\n[tests/basic-tests-linux  ]   | meth_name = 'http_error_403', http_err = 1\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   |     def error(self, proto, *args):\n[tests/basic-tests-linux  ]   |         if proto in ('http', 'https'):\n[tests/basic-tests-linux  ]   |             # XXX http[s] protocols are special-cased\n[tests/basic-tests-linux  ]   |             dict = self.handle_error['http'] # https is not different than http\n[tests/basic-tests-linux  ]   |             proto = args[2]  # YUCK!\n[tests/basic-tests-linux  ]   |             meth_name = 'http_error_%s' % proto\n[tests/basic-tests-linux  ]   |             http_err = 1\n[tests/basic-tests-linux  ]   |             orig_args = args\n[tests/basic-tests-linux  ]   |         else:\n[tests/basic-tests-linux  ]   |             dict = self.handle_error\n[tests/basic-tests-linux  ]   |             meth_name = proto + '_error'\n[tests/basic-tests-linux  ]   |             http_err = 0\n[tests/basic-tests-linux  ]   |         args = (dict, proto, meth_name) + args\n[tests/basic-tests-linux  ]   |         result = self._call_chain(*args)\n[tests/basic-tests-linux  ]   |         if result:\n[tests/basic-tests-linux  ]   |             return result\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         if http_err:\n[tests/basic-tests-linux  ]   |             args = (dict, 'default', 'http_error_default') + orig_args\n[tests/basic-tests-linux  ]   | >           return self._call_chain(*args)\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/urllib/request.py:569: \n[tests/basic-tests-linux  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | self = <urllib.request.OpenerDirector object at 0x7f14e3cc4050>\n[tests/basic-tests-linux  ]   | chain = {'default': [<urllib.request.HTTPDefaultErrorHandler object at 0x7f14e3cc4450>], 301: [<urllib.request.HTTPRedirectHan...PRedirectHandler object at 0x7f14e3cc4410>], 303: [<urllib.request.HTTPRedirectHandler object at 0x7f14e3cc4410>], ...}\n[tests/basic-tests-linux  ]   | kind = 'default', meth_name = 'http_error_default'\n[tests/basic-tests-linux  ]   | args = (<urllib.request.Request object at 0x7f14e394b110>, <http.client.HTTPResponse object at 0x7f14e394b350>, 403, 'Forbidden', <http.client.HTTPMessage object at 0x7f14e394ba90>)\n[tests/basic-tests-linux  ]   | handlers = [<urllib.request.HTTPDefaultErrorHandler object at 0x7f14e3cc4450>]\n[tests/basic-tests-linux  ]   | handler = <urllib.request.HTTPDefaultErrorHandler object at 0x7f14e3cc4450>\n[tests/basic-tests-linux  ]   | func = <bound method HTTPDefaultErrorHandler.http_error_default of <urllib.request.HTTPDefaultErrorHandler object at 0x7f14e3cc4450>>\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   |     def _call_chain(self, chain, kind, meth_name, *args):\n[tests/basic-tests-linux  ]   |         # Handlers raise an exception if no one else should try to handle\n[tests/basic-tests-linux  ]   |         # the request, or return None if they can't but another handler\n[tests/basic-tests-linux  ]   |         # could.  Otherwise, they return the response.\n[tests/basic-tests-linux  ]   |         handlers = chain.get(kind, ())\n[tests/basic-tests-linux  ]   |         for handler in handlers:\n[tests/basic-tests-linux  ]   |             func = getattr(handler, meth_name)\n[tests/basic-tests-linux  ]   | >           result = func(*args)\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/urllib/request.py:503: \n[tests/basic-tests-linux  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | self = <urllib.request.HTTPDefaultErrorHandler object at 0x7f14e3cc4450>\n[tests/basic-tests-linux  ]   | req = <urllib.request.Request object at 0x7f14e394b110>\n[tests/basic-tests-linux  ]   | fp = <http.client.HTTPResponse object at 0x7f14e394b350>, code = 403\n[tests/basic-tests-linux  ]   | msg = 'Forbidden', hdrs = <http.client.HTTPMessage object at 0x7f14e394ba90>\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   |     def http_error_default(self, req, fp, code, msg, hdrs):\n[tests/basic-tests-linux  ]   | >       raise HTTPError(req.full_url, code, msg, hdrs, fp)\n[tests/basic-tests-linux  ]   | E       urllib.error.HTTPError: HTTP Error 403: Forbidden\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/urllib/request.py:649: HTTPError\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | During handling of the above exception, another exception occurred:\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   |     def setup_module():\n[tests/basic-tests-linux  ]   | >       meta('9780375869020')  #  <-- set\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | isbntools/test/test_cache.py:14: \n[tests/basic-tests-linux  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-linux  ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/isbnlib/_ext.py:25: in meta\n[tests/basic-tests-linux  ]   |     return query(isbn, service) if isbn else {}\n[tests/basic-tests-linux  ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/isbnlib/dev/_decorators.py:27: in memoized_func\n[tests/basic-tests-linux  ]   |     value = func(*args, **kwargs)\n[tests/basic-tests-linux  ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/isbnlib/_metadata.py:33: in query\n[tests/basic-tests-linux  ]   |     meta = services[service](isbn)\n[tests/basic-tests-linux  ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/isbnlib/_goob.py:72: in query\n[tests/basic-tests-linux  ]   |     data = wquery(SERVICE_URL.format(isbn='isbn:' + isbn), user_agent=UA)\n[tests/basic-tests-linux  ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/isbnlib/dev/webquery.py:65: in query\n[tests/basic-tests-linux  ]   |     wq = WEBQuery(url, user_agent, throttling)\n[tests/basic-tests-linux  ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/isbnlib/dev/webquery.py:32: in __init__\n[tests/basic-tests-linux  ]   |     self.data = webservice.query(service_url, ua)\n[tests/basic-tests-linux  ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/isbnlib/dev/_decorators.py:47: in memoized_func\n[tests/basic-tests-linux  ]   |     value = func(*args, **kwargs)\n[tests/basic-tests-linux  ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/isbnlib/dev/webservice.py:113: in query\n[tests/basic-tests-linux  ]   |     data = service.data()\n[tests/basic-tests-linux  ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/isbnlib/dev/webservice.py:93: in data\n[tests/basic-tests-linux  ]   |     res = self.response()\n[tests/basic-tests-linux  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | self = <isbnlib.dev.webservice.WEBService object at 0x7f14e394b090>\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   |     def response(self):\n[tests/basic-tests-linux  ]   |         \"\"\"Check errors on response.\"\"\"\n[tests/basic-tests-linux  ]   |         # TODO(http 102)\n[tests/basic-tests-linux  ]   |         # How to handle \"102 http's code\"?\n[tests/basic-tests-linux  ]   |         # - urlopen doesn't catch a 102 code!\n[tests/basic-tests-linux  ]   |         #   https://docs.python.org/3/howto/urllib2.html#error-codes\n[tests/basic-tests-linux  ]   |         try:\n[tests/basic-tests-linux  ]   |             response = urlopen(\n[tests/basic-tests-linux  ]   |                 self._request,\n[tests/basic-tests-linux  ]   |                 timeout=options.get('URLOPEN_TIMEOUT'),\n[tests/basic-tests-linux  ]   |             )\n[tests/basic-tests-linux  ]   |             LOGGER.debug('Request headers:\\n%s', self._request.header_items())\n[tests/basic-tests-linux  ]   |         except HTTPError as e:  # pragma: no cover\n[tests/basic-tests-linux  ]   |             LOGGER.critical(\n[tests/basic-tests-linux  ]   |                 'ISBNLibHTTPError for %s with code %s [%s]',\n[tests/basic-tests-linux  ]   |                 self._url,\n[tests/basic-tests-linux  ]   |                 e.code,\n[tests/basic-tests-linux  ]   |                 e.msg,\n[tests/basic-tests-linux  ]   |             )\n[tests/basic-tests-linux  ]   |             if e.code in (401, 403, 429):\n[tests/basic-tests-linux  ]   |                 raise ISBNLibHTTPError('%s Are you making many requests?' %\n[tests/basic-tests-linux  ]   | >                                      e.code)\n[tests/basic-tests-linux  ]   | E               isbnlib.dev._exceptions.ISBNLibHTTPError: an HTTP error has ocurred (403 Are you making many requests?)\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/isbnlib/dev/webservice.py:70: ISBNLibHTTPError\n[tests/basic-tests-linux  ]   | ------------------------------ Captured log setup ------------------------------\n[tests/basic-tests-linux  ]   | CRITICAL isbnlib.dev.webservice:webservice.py:66 ISBNLibHTTPError for https://www.googleapis.com/books/v1/volumes?q=isbn:9780375869020&fields=items/volumeInfo(title,subtitle,authors,publisher,publishedDate,language,industryIdentifiers,description,imageLinks)&maxResults=1 with code 403 [Forbidden]\n[tests/basic-tests-linux  ]   | _________________ ERROR at setup of test_shelvecache_editions __________________\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | self = <isbnlib.dev.webservice.WEBService object at 0x7f14e394b090>\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   |     def response(self):\n[tests/basic-tests-linux  ]   |         \"\"\"Check errors on response.\"\"\"\n[tests/basic-tests-linux  ]   |         # TODO(http 102)\n[tests/basic-tests-linux  ]   |         # How to handle \"102 http's code\"?\n[tests/basic-tests-linux  ]   |         # - urlopen doesn't catch a 102 code!\n[tests/basic-tests-linux  ]   |         #   https://docs.python.org/3/howto/urllib2.html#error-codes\n[tests/basic-tests-linux  ]   |         try:\n[tests/basic-tests-linux  ]   |             response = urlopen(\n[tests/basic-tests-linux  ]   |                 self._request,\n[tests/basic-tests-linux  ]   | >               timeout=options.get('URLOPEN_TIMEOUT'),\n[tests/basic-tests-linux  ]   |             )\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/isbnlib/dev/webservice.py:58: \n[tests/basic-tests-linux  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | url = <urllib.request.Request object at 0x7f14e394b110>, data = None\n[tests/basic-tests-linux  ]   | timeout = 10.0\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   |     def urlopen(url, data=None, timeout=socket._GLOBAL_DEFAULT_TIMEOUT,\n[tests/basic-tests-linux  ]   |                 *, cafile=None, capath=None, cadefault=False, context=None):\n[tests/basic-tests-linux  ]   |         '''Open the URL url, which can be either a string or a Request object.\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         *data* must be an object specifying additional data to be sent to\n[tests/basic-tests-linux  ]   |         the server, or None if no such data is needed.  See Request for\n[tests/basic-tests-linux  ]   |         details.\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         urllib.request module uses HTTP/1.1 and includes a \"Connection:close\"\n[tests/basic-tests-linux  ]   |         header in its HTTP requests.\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         The optional *timeout* parameter specifies a timeout in seconds for\n[tests/basic-tests-linux  ]   |         blocking operations like the connection attempt (if not specified, the\n[tests/basic-tests-linux  ]   |         global default timeout setting will be used). This only works for HTTP,\n[tests/basic-tests-linux  ]   |         HTTPS and FTP connections.\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         If *context* is specified, it must be a ssl.SSLContext instance describing\n[tests/basic-tests-linux  ]   |         the various SSL options. See HTTPSConnection for more details.\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         The optional *cafile* and *capath* parameters specify a set of trusted CA\n[tests/basic-tests-linux  ]   |         certificates for HTTPS requests. cafile should point to a single file\n[tests/basic-tests-linux  ]   |         containing a bundle of CA certificates, whereas capath should point to a\n[tests/basic-tests-linux  ]   |         directory of hashed certificate files. More information can be found in\n[tests/basic-tests-linux  ]   |         ssl.SSLContext.load_verify_locations().\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         The *cadefault* parameter is ignored.\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         This function always returns an object which can work as a context\n[tests/basic-tests-linux  ]   |         manager and has methods such as\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         * geturl() - return the URL of the resource retrieved, commonly used to\n[tests/basic-tests-linux  ]   |           determine if a redirect was followed\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         * info() - return the meta-information of the page, such as headers, in the\n[tests/basic-tests-linux  ]   |           form of an email.message_from_string() instance (see Quick Reference to\n[tests/basic-tests-linux  ]   |           HTTP Headers)\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         * getcode() - return the HTTP status code of the response.  Raises URLError\n[tests/basic-tests-linux  ]   |           on errors.\n[tests/basic-tests-windows] exitcode '1': failure\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         For HTTP and HTTPS URLs, this function returns a http.client.HTTPResponse\n[tests/basic-tests-linux  ]   |         object slightly modified. In addition to the three new methods above, the\n[tests/basic-tests-linux  ]   |         msg attribute contains the same information as the reason attribute ---\n[tests/basic-tests-linux  ]   |         the reason phrase returned by the server --- instead of the response\n[tests/basic-tests-linux  ]   |         headers as it is specified in the documentation for HTTPResponse.\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         For FTP, file, and data URLs and requests explicitly handled by legacy\n[tests/basic-tests-linux  ]   |         URLopener and FancyURLopener classes, this function returns a\n[tests/basic-tests-linux  ]   |         urllib.response.addinfourl object.\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         Note that None may be returned if no handler handles the request (though\n[tests/basic-tests-linux  ]   |         the default installed global OpenerDirector uses UnknownHandler to ensure\n[tests/basic-tests-linux  ]   |         this never happens).\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         In addition, if proxy settings are detected (for example, when a *_proxy\n[tests/basic-tests-linux  ]   |         environment variable like http_proxy is set), ProxyHandler is default\n[tests/basic-tests-linux  ]   |         installed and makes sure the requests are handled through the proxy.\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         '''\n[tests/basic-tests-linux  ]   |         global _opener\n[tests/basic-tests-linux  ]   |         if cafile or capath or cadefault:\n[tests/basic-tests-linux  ]   |             import warnings\n[tests/basic-tests-linux  ]   |             warnings.warn(\"cafile, capath and cadefault are deprecated, use a \"\n[tests/basic-tests-linux  ]   |                           \"custom context instead.\", DeprecationWarning, 2)\n[tests/basic-tests-linux  ]   |             if context is not None:\n[tests/basic-tests-linux  ]   |                 raise ValueError(\n[tests/basic-tests-linux  ]   |                     \"You can't pass both context and any of cafile, capath, and \"\n[tests/basic-tests-linux  ]   |                     \"cadefault\"\n[tests/basic-tests-linux  ]   |                 )\n[tests/basic-tests-linux  ]   |             if not _have_ssl:\n[tests/basic-tests-linux  ]   |                 raise ValueError('SSL support not available')\n[tests/basic-tests-linux  ]   |             context = ssl.create_default_context(ssl.Purpose.SERVER_AUTH,\n[tests/basic-tests-linux  ]   |                                                  cafile=cafile,\n[tests/basic-tests-linux  ]   |                                                  capath=capath)\n[tests/basic-tests-linux  ]   |             https_handler = HTTPSHandler(context=context)\n[tests/basic-tests-linux  ]   |             opener = build_opener(https_handler)\n[tests/basic-tests-linux  ]   |         elif context:\n[tests/basic-tests-linux  ]   |             https_handler = HTTPSHandler(context=context)\n[tests/basic-tests-linux  ]   |             opener = build_opener(https_handler)\n[tests/basic-tests-linux  ]   |         elif _opener is None:\n[tests/basic-tests-linux  ]   |             _opener = opener = build_opener()\n[tests/basic-tests-linux  ]   |         else:\n[tests/basic-tests-linux  ]   |             opener = _opener\n[tests/basic-tests-linux  ]   | >       return opener.open(url, data, timeout)\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/urllib/request.py:222: \n[tests/basic-tests-linux  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | self = <urllib.request.OpenerDirector object at 0x7f14e3cc4050>\n[tests/basic-tests-linux  ]   | fullurl = <urllib.request.Request object at 0x7f14e394b110>, data = None\n[tests/basic-tests-linux  ]   | timeout = 10.0\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   |     def open(self, fullurl, data=None, timeout=socket._GLOBAL_DEFAULT_TIMEOUT):\n[tests/basic-tests-linux  ]   |         # accept a URL or a Request object\n[tests/basic-tests-linux  ]   |         if isinstance(fullurl, str):\n[tests/basic-tests-linux  ]   |             req = Request(fullurl, data)\n[tests/basic-tests-linux  ]   |         else:\n[tests/basic-tests-linux  ]   |             req = fullurl\n[tests/basic-tests-linux  ]   |             if data is not None:\n[tests/basic-tests-linux  ]   |                 req.data = data\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         req.timeout = timeout\n[tests/basic-tests-linux  ]   |         protocol = req.type\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         # pre-process request\n[tests/basic-tests-linux  ]   |         meth_name = protocol+\"_request\"\n[tests/basic-tests-linux  ]   |         for processor in self.process_request.get(protocol, []):\n[tests/basic-tests-linux  ]   |             meth = getattr(processor, meth_name)\n[tests/basic-tests-linux  ]   |             req = meth(req)\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         response = self._open(req, data)\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         # post-process response\n[tests/basic-tests-linux  ]   |         meth_name = protocol+\"_response\"\n[tests/basic-tests-linux  ]   |         for processor in self.process_response.get(protocol, []):\n[tests/basic-tests-linux  ]   |             meth = getattr(processor, meth_name)\n[tests/basic-tests-linux  ]   | >           response = meth(req, response)\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/urllib/request.py:531: \n[tests/basic-tests-linux  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | self = <urllib.request.HTTPErrorProcessor object at 0x7f14e3cc4dd0>\n[tests/basic-tests-linux  ]   | request = <urllib.request.Request object at 0x7f14e394b110>\n[tests/basic-tests-linux  ]   | response = <http.client.HTTPResponse object at 0x7f14e394b350>\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   |     def http_response(self, request, response):\n[tests/basic-tests-linux  ]   |         code, msg, hdrs = response.code, response.msg, response.info()\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         # According to RFC 2616, \"2xx\" code indicates that the client's\n[tests/basic-tests-linux  ]   |         # request was successfully received, understood, and accepted.\n[tests/basic-tests-linux  ]   |         if not (200 <= code < 300):\n[tests/basic-tests-linux  ]   |             response = self.parent.error(\n[tests/basic-tests-linux  ]   | >               'http', request, response, code, msg, hdrs)\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/urllib/request.py:641: \n[tests/basic-tests-linux  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | self = <urllib.request.OpenerDirector object at 0x7f14e3cc4050>, proto = 403\n[tests/basic-tests-linux  ]   | args = ({'default': [<urllib.request.HTTPDefaultErrorHandler object at 0x7f14e3cc4450>], 301: [<urllib.request.HTTPRedirectHa...ult', <urllib.request.Request object at 0x7f14e394b110>, <http.client.HTTPResponse object at 0x7f14e394b350>, 403, ...)\n[tests/basic-tests-linux  ]   | dict = {'default': [<urllib.request.HTTPDefaultErrorHandler object at 0x7f14e3cc4450>], 301: [<urllib.request.HTTPRedirectHan...PRedirectHandler object at 0x7f14e3cc4410>], 303: [<urllib.request.HTTPRedirectHandler object at 0x7f14e3cc4410>], ...}\n[tests/basic-tests-linux  ]   | meth_name = 'http_error_403', http_err = 1\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   |     def error(self, proto, *args):\n[tests/basic-tests-linux  ]   |         if proto in ('http', 'https'):\n[tests/basic-tests-linux  ]   |             # XXX http[s] protocols are special-cased\n[tests/basic-tests-linux  ]   |             dict = self.handle_error['http'] # https is not different than http\n[tests/basic-tests-linux  ]   |             proto = args[2]  # YUCK!\n[tests/basic-tests-linux  ]   |             meth_name = 'http_error_%s' % proto\n[tests/basic-tests-linux  ]   |             http_err = 1\n[tests/basic-tests-linux  ]   |             orig_args = args\n[tests/basic-tests-linux  ]   |         else:\n[tests/basic-tests-linux  ]   |             dict = self.handle_error\n[tests/basic-tests-linux  ]   |             meth_name = proto + '_error'\n[tests/basic-tests-linux  ]   |             http_err = 0\n[tests/basic-tests-linux  ]   |         args = (dict, proto, meth_name) + args\n[tests/basic-tests-linux  ]   |         result = self._call_chain(*args)\n[tests/basic-tests-linux  ]   |         if result:\n[tests/basic-tests-linux  ]   |             return result\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         if http_err:\n[tests/basic-tests-linux  ]   |             args = (dict, 'default', 'http_error_default') + orig_args\n[tests/basic-tests-linux  ]   | >           return self._call_chain(*args)\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/urllib/request.py:569: \n[tests/basic-tests-linux  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | self = <urllib.request.OpenerDirector object at 0x7f14e3cc4050>\n[tests/basic-tests-linux  ]   | chain = {'default': [<urllib.request.HTTPDefaultErrorHandler object at 0x7f14e3cc4450>], 301: [<urllib.request.HTTPRedirectHan...PRedirectHandler object at 0x7f14e3cc4410>], 303: [<urllib.request.HTTPRedirectHandler object at 0x7f14e3cc4410>], ...}\n[tests/basic-tests-linux  ]   | kind = 'default', meth_name = 'http_error_default'\n[tests/basic-tests-linux  ]   | args = (<urllib.request.Request object at 0x7f14e394b110>, <http.client.HTTPResponse object at 0x7f14e394b350>, 403, 'Forbidden', <http.client.HTTPMessage object at 0x7f14e394ba90>)\n[tests/basic-tests-linux  ]   | handlers = [<urllib.request.HTTPDefaultErrorHandler object at 0x7f14e3cc4450>]\n[tests/basic-tests-linux  ]   | handler = <urllib.request.HTTPDefaultErrorHandler object at 0x7f14e3cc4450>\n[tests/basic-tests-linux  ]   | func = <bound method HTTPDefaultErrorHandler.http_error_default of <urllib.request.HTTPDefaultErrorHandler object at 0x7f14e3cc4450>>\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   |     def _call_chain(self, chain, kind, meth_name, *args):\n[tests/basic-tests-linux  ]   |         # Handlers raise an exception if no one else should try to handle\n[tests/basic-tests-linux  ]   |         # the request, or return None if they can't but another handler\n[tests/basic-tests-linux  ]   |         # could.  Otherwise, they return the response.\n[tests/basic-tests-linux  ]   |         handlers = chain.get(kind, ())\n[tests/basic-tests-linux  ]   |         for handler in handlers:\n[tests/basic-tests-linux  ]   |             func = getattr(handler, meth_name)\n[tests/basic-tests-linux  ]   | >           result = func(*args)\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/urllib/request.py:503: \n[tests/basic-tests-linux  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | self = <urllib.request.HTTPDefaultErrorHandler object at 0x7f14e3cc4450>\n[tests/basic-tests-linux  ]   | req = <urllib.request.Request object at 0x7f14e394b110>\n[tests/basic-tests-linux  ]   | fp = <http.client.HTTPResponse object at 0x7f14e394b350>, code = 403\n[tests/basic-tests-linux  ]   | msg = 'Forbidden', hdrs = <http.client.HTTPMessage object at 0x7f14e394ba90>\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   |     def http_error_default(self, req, fp, code, msg, hdrs):\n[tests/basic-tests-linux  ]   | >       raise HTTPError(req.full_url, code, msg, hdrs, fp)\n[tests/basic-tests-linux  ]   | E       urllib.error.HTTPError: HTTP Error 403: Forbidden\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/urllib/request.py:649: HTTPError\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | During handling of the above exception, another exception occurred:\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   |     def setup_module():\n[tests/basic-tests-linux  ]   | >       meta('9780375869020')  #  <-- set\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | isbntools/test/test_cache.py:14: \n[tests/basic-tests-linux  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-linux  ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/isbnlib/_ext.py:25: in meta\n[tests/basic-tests-linux  ]   |     return query(isbn, service) if isbn else {}\n[tests/basic-tests-linux  ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/isbnlib/dev/_decorators.py:27: in memoized_func\n[tests/basic-tests-linux  ]   |     value = func(*args, **kwargs)\n[tests/basic-tests-linux  ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/isbnlib/_metadata.py:33: in query\n[tests/basic-tests-linux  ]   |     meta = services[service](isbn)\n[tests/basic-tests-linux  ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/isbnlib/_goob.py:72: in query\n[tests/basic-tests-linux  ]   |     data = wquery(SERVICE_URL.format(isbn='isbn:' + isbn), user_agent=UA)\n[tests/basic-tests-linux  ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/isbnlib/dev/webquery.py:65: in query\n[tests/basic-tests-linux  ]   |     wq = WEBQuery(url, user_agent, throttling)\n[tests/basic-tests-linux  ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/isbnlib/dev/webquery.py:32: in __init__\n[tests/basic-tests-linux  ]   |     self.data = webservice.query(service_url, ua)\n[tests/basic-tests-linux  ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/isbnlib/dev/_decorators.py:47: in memoized_func\n[tests/basic-tests-linux  ]   |     value = func(*args, **kwargs)\n[tests/basic-tests-linux  ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/isbnlib/dev/webservice.py:113: in query\n[tests/basic-tests-linux  ]   |     data = service.data()\n[tests/basic-tests-linux  ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/isbnlib/dev/webservice.py:93: in data\n[tests/basic-tests-linux  ]   |     res = self.response()\n[tests/basic-tests-linux  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | self = <isbnlib.dev.webservice.WEBService object at 0x7f14e394b090>\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   |     def response(self):\n[tests/basic-tests-linux  ]   |         \"\"\"Check errors on response.\"\"\"\n[tests/basic-tests-linux  ]   |         # TODO(http 102)\n[tests/basic-tests-linux  ]   |         # How to handle \"102 http's code\"?\n[tests/basic-tests-linux  ]   |         # - urlopen doesn't catch a 102 code!\n[tests/basic-tests-linux  ]   |         #   https://docs.python.org/3/howto/urllib2.html#error-codes\n[tests/basic-tests-linux  ]   |         try:\n[tests/basic-tests-linux  ]   |             response = urlopen(\n[tests/basic-tests-linux  ]   |                 self._request,\n[tests/basic-tests-linux  ]   |                 timeout=options.get('URLOPEN_TIMEOUT'),\n[tests/basic-tests-linux  ]   |             )\n[tests/basic-tests-linux  ]   |             LOGGER.debug('Request headers:\\n%s', self._request.header_items())\n[tests/basic-tests-linux  ]   |         except HTTPError as e:  # pragma: no cover\n[tests/basic-tests-linux  ]   |             LOGGER.critical(\n[tests/basic-tests-linux  ]   |                 'ISBNLibHTTPError for %s with code %s [%s]',\n[tests/basic-tests-linux  ]   |                 self._url,\n[tests/basic-tests-linux  ]   |                 e.code,\n[tests/basic-tests-linux  ]   |                 e.msg,\n[tests/basic-tests-linux  ]   |             )\n[tests/basic-tests-linux  ]   |             if e.code in (401, 403, 429):\n[tests/basic-tests-linux  ]   |                 raise ISBNLibHTTPError('%s Are you making many requests?' %\n[tests/basic-tests-linux  ]   | >                                      e.code)\n[tests/basic-tests-linux  ]   | E               isbnlib.dev._exceptions.ISBNLibHTTPError: an HTTP error has ocurred (403 Are you making many requests?)\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/isbnlib/dev/webservice.py:70: ISBNLibHTTPError\n[tests/basic-tests-linux  ]   | __________________ ERROR at setup of test_shelvecache_setget ___________________\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | self = <isbnlib.dev.webservice.WEBService object at 0x7f14e394b090>\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   |     def response(self):\n[tests/basic-tests-linux  ]   |         \"\"\"Check errors on response.\"\"\"\n[tests/basic-tests-linux  ]   |         # TODO(http 102)\n[tests/basic-tests-linux  ]   |         # How to handle \"102 http's code\"?\n[tests/basic-tests-linux  ]   |         # - urlopen doesn't catch a 102 code!\n[tests/basic-tests-linux  ]   |         #   https://docs.python.org/3/howto/urllib2.html#error-codes\n[tests/basic-tests-linux  ]   |         try:\n[tests/basic-tests-linux  ]   |             response = urlopen(\n[tests/basic-tests-linux  ]   |                 self._request,\n[tests/basic-tests-linux  ]   | >               timeout=options.get('URLOPEN_TIMEOUT'),\n[tests/basic-tests-linux  ]   |             )\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/isbnlib/dev/webservice.py:58: \n[tests/basic-tests-linux  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | url = <urllib.request.Request object at 0x7f14e394b110>, data = None\n[tests/basic-tests-linux  ]   | timeout = 10.0\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   |     def urlopen(url, data=None, timeout=socket._GLOBAL_DEFAULT_TIMEOUT,\n[tests/basic-tests-linux  ]   |                 *, cafile=None, capath=None, cadefault=False, context=None):\n[tests/basic-tests-linux  ]   |         '''Open the URL url, which can be either a string or a Request object.\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         *data* must be an object specifying additional data to be sent to\n[tests/basic-tests-linux  ]   |         the server, or None if no such data is needed.  See Request for\n[tests/basic-tests-linux  ]   |         details.\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         urllib.request module uses HTTP/1.1 and includes a \"Connection:close\"\n[tests/basic-tests-linux  ]   |         header in its HTTP requests.\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         The optional *timeout* parameter specifies a timeout in seconds for\n[tests/basic-tests-linux  ]   |         blocking operations like the connection attempt (if not specified, the\n[tests/basic-tests-linux  ]   |         global default timeout setting will be used). This only works for HTTP,\n[tests/basic-tests-linux  ]   |         HTTPS and FTP connections.\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         If *context* is specified, it must be a ssl.SSLContext instance describing\n[tests/basic-tests-linux  ]   |         the various SSL options. See HTTPSConnection for more details.\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         The optional *cafile* and *capath* parameters specify a set of trusted CA\n[tests/basic-tests-linux  ]   |         certificates for HTTPS requests. cafile should point to a single file\n[tests/basic-tests-linux  ]   |         containing a bundle of CA certificates, whereas capath should point to a\n[tests/basic-tests-linux  ]   |         directory of hashed certificate files. More information can be found in\n[tests/basic-tests-linux  ]   |         ssl.SSLContext.load_verify_locations().\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         The *cadefault* parameter is ignored.\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         This function always returns an object which can work as a context\n[tests/basic-tests-linux  ]   |         manager and has methods such as\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         * geturl() - return the URL of the resource retrieved, commonly used to\n[tests/basic-tests-linux  ]   |           determine if a redirect was followed\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         * info() - return the meta-information of the page, such as headers, in the\n[tests/basic-tests-linux  ]   |           form of an email.message_from_string() instance (see Quick Reference to\n[tests/basic-tests-linux  ]   |           HTTP Headers)\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         * getcode() - return the HTTP status code of the response.  Raises URLError\n[tests/basic-tests-linux  ]   |           on errors.\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         For HTTP and HTTPS URLs, this function returns a http.client.HTTPResponse\n[tests/basic-tests-linux  ]   |         object slightly modified. In addition to the three new methods above, the\n[tests/basic-tests-linux  ]   |         msg attribute contains the same information as the reason attribute ---\n[tests/basic-tests-linux  ]   |         the reason phrase returned by the server --- instead of the response\n[tests/basic-tests-linux  ]   |         headers as it is specified in the documentation for HTTPResponse.\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         For FTP, file, and data URLs and requests explicitly handled by legacy\n[tests/basic-tests-linux  ]   |         URLopener and FancyURLopener classes, this function returns a\n[tests/basic-tests-linux  ]   |         urllib.response.addinfourl object.\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         Note that None may be returned if no handler handles the request (though\n[tests/basic-tests-linux  ]   |         the default installed global OpenerDirector uses UnknownHandler to ensure\n[tests/basic-tests-linux  ]   |         this never happens).\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         In addition, if proxy settings are detected (for example, when a *_proxy\n[tests/basic-tests-linux  ]   |         environment variable like http_proxy is set), ProxyHandler is default\n[tests/basic-tests-linux  ]   |         installed and makes sure the requests are handled through the proxy.\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         '''\n[tests/basic-tests-linux  ]   |         global _opener\n[tests/basic-tests-linux  ]   |         if cafile or capath or cadefault:\n[tests/basic-tests-linux  ]   |             import warnings\n[tests/basic-tests-linux  ]   |             warnings.warn(\"cafile, capath and cadefault are deprecated, use a \"\n[tests/basic-tests-linux  ]   |                           \"custom context instead.\", DeprecationWarning, 2)\n[tests/basic-tests-linux  ]   |             if context is not None:\n[tests/basic-tests-linux  ]   |                 raise ValueError(\n[tests/basic-tests-linux  ]   |                     \"You can't pass both context and any of cafile, capath, and \"\n[tests/basic-tests-linux  ]   |                     \"cadefault\"\n[tests/basic-tests-linux  ]   |                 )\n[tests/basic-tests-linux  ]   |             if not _have_ssl:\n[tests/basic-tests-linux  ]   |                 raise ValueError('SSL support not available')\n[tests/basic-tests-linux  ]   |             context = ssl.create_default_context(ssl.Purpose.SERVER_AUTH,\n[tests/basic-tests-linux  ]   |                                                  cafile=cafile,\n[tests/basic-tests-linux  ]   |                                                  capath=capath)\n[tests/basic-tests-linux  ]   |             https_handler = HTTPSHandler(context=context)\n[tests/basic-tests-linux  ]   |             opener = build_opener(https_handler)\n[tests/basic-tests-linux  ]   |         elif context:\n[tests/basic-tests-linux  ]   |             https_handler = HTTPSHandler(context=context)\n[tests/basic-tests-linux  ]   |             opener = build_opener(https_handler)\n[tests/basic-tests-linux  ]   |         elif _opener is None:\n[tests/basic-tests-linux  ]   |             _opener = opener = build_opener()\n[tests/basic-tests-linux  ]   |         else:\n[tests/basic-tests-linux  ]   |             opener = _opener\n[tests/basic-tests-linux  ]   | >       return opener.open(url, data, timeout)\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/urllib/request.py:222: \n[tests/basic-tests-linux  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | self = <urllib.request.OpenerDirector object at 0x7f14e3cc4050>\n[tests/basic-tests-linux  ]   | fullurl = <urllib.request.Request object at 0x7f14e394b110>, data = None\n[tests/basic-tests-linux  ]   | timeout = 10.0\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   |     def open(self, fullurl, data=None, timeout=socket._GLOBAL_DEFAULT_TIMEOUT):\n[tests/basic-tests-linux  ]   |         # accept a URL or a Request object\n[tests/basic-tests-linux  ]   |         if isinstance(fullurl, str):\n[tests/basic-tests-linux  ]   |             req = Request(fullurl, data)\n[tests/basic-tests-linux  ]   |         else:\n[tests/basic-tests-linux  ]   |             req = fullurl\n[tests/basic-tests-linux  ]   |             if data is not None:\n[tests/basic-tests-linux  ]   |                 req.data = data\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         req.timeout = timeout\n[tests/basic-tests-linux  ]   |         protocol = req.type\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         # pre-process request\n[tests/basic-tests-linux  ]   |         meth_name = protocol+\"_request\"\n[tests/basic-tests-linux  ]   |         for processor in self.process_request.get(protocol, []):\n[tests/basic-tests-linux  ]   |             meth = getattr(processor, meth_name)\n[tests/basic-tests-linux  ]   |             req = meth(req)\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         response = self._open(req, data)\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         # post-process response\n[tests/basic-tests-linux  ]   |         meth_name = protocol+\"_response\"\n[tests/basic-tests-linux  ]   |         for processor in self.process_response.get(protocol, []):\n[tests/basic-tests-linux  ]   |             meth = getattr(processor, meth_name)\n[tests/basic-tests-linux  ]   | >           response = meth(req, response)\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/urllib/request.py:531: \n[tests/basic-tests-linux  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | self = <urllib.request.HTTPErrorProcessor object at 0x7f14e3cc4dd0>\n[tests/basic-tests-linux  ]   | request = <urllib.request.Request object at 0x7f14e394b110>\n[tests/basic-tests-linux  ]   | response = <http.client.HTTPResponse object at 0x7f14e394b350>\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   |     def http_response(self, request, response):\n[tests/basic-tests-linux  ]   |         code, msg, hdrs = response.code, response.msg, response.info()\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         # According to RFC 2616, \"2xx\" code indicates that the client's\n[tests/basic-tests-linux  ]   |         # request was successfully received, understood, and accepted.\n[tests/basic-tests-linux  ]   |         if not (200 <= code < 300):\n[tests/basic-tests-linux  ]   |             response = self.parent.error(\n[tests/basic-tests-linux  ]   | >               'http', request, response, code, msg, hdrs)\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/urllib/request.py:641: \n[tests/basic-tests-linux  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | self = <urllib.request.OpenerDirector object at 0x7f14e3cc4050>, proto = 403\n[tests/basic-tests-linux  ]   | args = ({'default': [<urllib.request.HTTPDefaultErrorHandler object at 0x7f14e3cc4450>], 301: [<urllib.request.HTTPRedirectHa...ult', <urllib.request.Request object at 0x7f14e394b110>, <http.client.HTTPResponse object at 0x7f14e394b350>, 403, ...)\n[tests/basic-tests-linux  ]   | dict = {'default': [<urllib.request.HTTPDefaultErrorHandler object at 0x7f14e3cc4450>], 301: [<urllib.request.HTTPRedirectHan...PRedirectHandler object at 0x7f14e3cc4410>], 303: [<urllib.request.HTTPRedirectHandler object at 0x7f14e3cc4410>], ...}\n[tests/basic-tests-linux  ]   | meth_name = 'http_error_403', http_err = 1\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   |     def error(self, proto, *args):\n[tests/basic-tests-linux  ]   |         if proto in ('http', 'https'):\n[tests/basic-tests-linux  ]   |             # XXX http[s] protocols are special-cased\n[tests/basic-tests-linux  ]   |             dict = self.handle_error['http'] # https is not different than http\n[tests/basic-tests-linux  ]   |             proto = args[2]  # YUCK!\n[tests/basic-tests-linux  ]   |             meth_name = 'http_error_%s' % proto\n[tests/basic-tests-linux  ]   |             http_err = 1\n[tests/basic-tests-linux  ]   |             orig_args = args\n[tests/basic-tests-linux  ]   |         else:\n[tests/basic-tests-linux  ]   |             dict = self.handle_error\n[tests/basic-tests-linux  ]   |             meth_name = proto + '_error'\n[tests/basic-tests-linux  ]   |             http_err = 0\n[tests/basic-tests-linux  ]   |         args = (dict, proto, meth_name) + args\n[tests/basic-tests-linux  ]   |         result = self._call_chain(*args)\n[tests/basic-tests-linux  ]   |         if result:\n[tests/basic-tests-linux  ]   |             return result\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         if http_err:\n[tests/basic-tests-linux  ]   |             args = (dict, 'default', 'http_error_default') + orig_args\n[tests/basic-tests-linux  ]   | >           return self._call_chain(*args)\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/urllib/request.py:569: \n[tests/basic-tests-linux  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | self = <urllib.request.OpenerDirector object at 0x7f14e3cc4050>\n[tests/basic-tests-linux  ]   | chain = {'default': [<urllib.request.HTTPDefaultErrorHandler object at 0x7f14e3cc4450>], 301: [<urllib.request.HTTPRedirectHan...PRedirectHandler object at 0x7f14e3cc4410>], 303: [<urllib.request.HTTPRedirectHandler object at 0x7f14e3cc4410>], ...}\n[tests/basic-tests-linux  ]   | kind = 'default', meth_name = 'http_error_default'\n[tests/basic-tests-linux  ]   | args = (<urllib.request.Request object at 0x7f14e394b110>, <http.client.HTTPResponse object at 0x7f14e394b350>, 403, 'Forbidden', <http.client.HTTPMessage object at 0x7f14e394ba90>)\n[tests/basic-tests-linux  ]   | handlers = [<urllib.request.HTTPDefaultErrorHandler object at 0x7f14e3cc4450>]\n[tests/basic-tests-linux  ]   | handler = <urllib.request.HTTPDefaultErrorHandler object at 0x7f14e3cc4450>\n[tests/basic-tests-linux  ]   | func = <bound method HTTPDefaultErrorHandler.http_error_default of <urllib.request.HTTPDefaultErrorHandler object at 0x7f14e3cc4450>>\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   |     def _call_chain(self, chain, kind, meth_name, *args):\n[tests/basic-tests-linux  ]   |         # Handlers raise an exception if no one else should try to handle\n[tests/basic-tests-linux  ]   |         # the request, or return None if they can't but another handler\n[tests/basic-tests-linux  ]   |         # could.  Otherwise, they return the response.\n[tests/basic-tests-linux  ]   |         handlers = chain.get(kind, ())\n[tests/basic-tests-linux  ]   |         for handler in handlers:\n[tests/basic-tests-linux  ]   |             func = getattr(handler, meth_name)\n[tests/basic-tests-linux  ]   | >           result = func(*args)\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/urllib/request.py:503: \n[tests/basic-tests-linux  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | self = <urllib.request.HTTPDefaultErrorHandler object at 0x7f14e3cc4450>\n[tests/basic-tests-linux  ]   | req = <urllib.request.Request object at 0x7f14e394b110>\n[tests/basic-tests-linux  ]   | fp = <http.client.HTTPResponse object at 0x7f14e394b350>, code = 403\n[tests/basic-tests-linux  ]   | msg = 'Forbidden', hdrs = <http.client.HTTPMessage object at 0x7f14e394ba90>\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   |     def http_error_default(self, req, fp, code, msg, hdrs):\n[tests/basic-tests-linux  ]   | >       raise HTTPError(req.full_url, code, msg, hdrs, fp)\n[tests/basic-tests-linux  ]   | E       urllib.error.HTTPError: HTTP Error 403: Forbidden\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/urllib/request.py:649: HTTPError\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | During handling of the above exception, another exception occurred:\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   |     def setup_module():\n[tests/basic-tests-linux  ]   | >       meta('9780375869020')  #  <-- set\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | isbntools/test/test_cache.py:14: \n[tests/basic-tests-linux  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-linux  ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/isbnlib/_ext.py:25: in meta\n[tests/basic-tests-linux  ]   |     return query(isbn, service) if isbn else {}\n[tests/basic-tests-linux  ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/isbnlib/dev/_decorators.py:27: in memoized_func\n[tests/basic-tests-linux  ]   |     value = func(*args, **kwargs)\n[tests/basic-tests-linux  ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/isbnlib/_metadata.py:33: in query\n[tests/basic-tests-linux  ]   |     meta = services[service](isbn)\n[tests/basic-tests-linux  ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/isbnlib/_goob.py:72: in query\n[tests/basic-tests-linux  ]   |     data = wquery(SERVICE_URL.format(isbn='isbn:' + isbn), user_agent=UA)\n[tests/basic-tests-linux  ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/isbnlib/dev/webquery.py:65: in query\n[tests/basic-tests-linux  ]   |     wq = WEBQuery(url, user_agent, throttling)\n[tests/basic-tests-linux  ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/isbnlib/dev/webquery.py:32: in __init__\n[tests/basic-tests-linux  ]   |     self.data = webservice.query(service_url, ua)\n[tests/basic-tests-linux  ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/isbnlib/dev/_decorators.py:47: in memoized_func\n[tests/basic-tests-linux  ]   |     value = func(*args, **kwargs)\n[tests/basic-tests-linux  ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/isbnlib/dev/webservice.py:113: in query\n[tests/basic-tests-linux  ]   |     data = service.data()\n[tests/basic-tests-linux  ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/isbnlib/dev/webservice.py:93: in data\n[tests/basic-tests-linux  ]   |     res = self.response()\n[tests/basic-tests-linux  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | self = <isbnlib.dev.webservice.WEBService object at 0x7f14e394b090>\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   |     def response(self):\n[tests/basic-tests-linux  ]   |         \"\"\"Check errors on response.\"\"\"\n[tests/basic-tests-linux  ]   |         # TODO(http 102)\n[tests/basic-tests-linux  ]   |         # How to handle \"102 http's code\"?\n[tests/basic-tests-linux  ]   |         # - urlopen doesn't catch a 102 code!\n[tests/basic-tests-linux  ]   |         #   https://docs.python.org/3/howto/urllib2.html#error-codes\n[tests/basic-tests-linux  ]   |         try:\n[tests/basic-tests-linux  ]   |             response = urlopen(\n[tests/basic-tests-linux  ]   |                 self._request,\n[tests/basic-tests-linux  ]   |                 timeout=options.get('URLOPEN_TIMEOUT'),\n[tests/basic-tests-linux  ]   |             )\n[tests/basic-tests-linux  ]   |             LOGGER.debug('Request headers:\\n%s', self._request.header_items())\n[tests/basic-tests-linux  ]   |         except HTTPError as e:  # pragma: no cover\n[tests/basic-tests-linux  ]   |             LOGGER.critical(\n[tests/basic-tests-linux  ]   |                 'ISBNLibHTTPError for %s with code %s [%s]',\n[tests/basic-tests-linux  ]   |                 self._url,\n[tests/basic-tests-linux  ]   |                 e.code,\n[tests/basic-tests-linux  ]   |                 e.msg,\n[tests/basic-tests-linux  ]   |             )\n[tests/basic-tests-linux  ]   |             if e.code in (401, 403, 429):\n[tests/basic-tests-linux  ]   |                 raise ISBNLibHTTPError('%s Are you making many requests?' %\n[tests/basic-tests-linux  ]   | >                                      e.code)\n[tests/basic-tests-linux  ]   | E               isbnlib.dev._exceptions.ISBNLibHTTPError: an HTTP error has ocurred (403 Are you making many requests?)\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/isbnlib/dev/webservice.py:70: ISBNLibHTTPError\n[tests/basic-tests-linux  ]   | _________________ ERROR at setup of test_shelvecache_contains __________________\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | self = <isbnlib.dev.webservice.WEBService object at 0x7f14e394b090>\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   |     def response(self):\n[tests/basic-tests-linux  ]   |         \"\"\"Check errors on response.\"\"\"\n[tests/basic-tests-linux  ]   |         # TODO(http 102)\n[tests/basic-tests-linux  ]   |         # How to handle \"102 http's code\"?\n[tests/basic-tests-linux  ]   |         # - urlopen doesn't catch a 102 code!\n[tests/basic-tests-linux  ]   |         #   https://docs.python.org/3/howto/urllib2.html#error-codes\n[tests/basic-tests-linux  ]   |         try:\n[tests/basic-tests-linux  ]   |             response = urlopen(\n[tests/basic-tests-linux  ]   |                 self._request,\n[tests/basic-tests-linux  ]   | >               timeout=options.get('URLOPEN_TIMEOUT'),\n[tests/basic-tests-linux  ]   |             )\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/isbnlib/dev/webservice.py:58: \n[tests/basic-tests-linux  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | url = <urllib.request.Request object at 0x7f14e394b110>, data = None\n[tests/basic-tests-linux  ]   | timeout = 10.0\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   |     def urlopen(url, data=None, timeout=socket._GLOBAL_DEFAULT_TIMEOUT,\n[tests/basic-tests-linux  ]   |                 *, cafile=None, capath=None, cadefault=False, context=None):\n[tests/basic-tests-linux  ]   |         '''Open the URL url, which can be either a string or a Request object.\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         *data* must be an object specifying additional data to be sent to\n[tests/basic-tests-linux  ]   |         the server, or None if no such data is needed.  See Request for\n[tests/basic-tests-linux  ]   |         details.\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         urllib.request module uses HTTP/1.1 and includes a \"Connection:close\"\n[tests/basic-tests-linux  ]   |         header in its HTTP requests.\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         The optional *timeout* parameter specifies a timeout in seconds for\n[tests/basic-tests-linux  ]   |         blocking operations like the connection attempt (if not specified, the\n[tests/basic-tests-linux  ]   |         global default timeout setting will be used). This only works for HTTP,\n[tests/basic-tests-linux  ]   |         HTTPS and FTP connections.\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         If *context* is specified, it must be a ssl.SSLContext instance describing\n[tests/basic-tests-linux  ]   |         the various SSL options. See HTTPSConnection for more details.\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         The optional *cafile* and *capath* parameters specify a set of trusted CA\n[tests/basic-tests-linux  ]   |         certificates for HTTPS requests. cafile should point to a single file\n[tests/basic-tests-linux  ]   |         containing a bundle of CA certificates, whereas capath should point to a\n[tests/basic-tests-linux  ]   |         directory of hashed certificate files. More information can be found in\n[tests/basic-tests-linux  ]   |         ssl.SSLContext.load_verify_locations().\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         The *cadefault* parameter is ignored.\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         This function always returns an object which can work as a context\n[tests/basic-tests-linux  ]   |         manager and has methods such as\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         * geturl() - return the URL of the resource retrieved, commonly used to\n[tests/basic-tests-linux  ]   |           determine if a redirect was followed\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         * info() - return the meta-information of the page, such as headers, in the\n[tests/basic-tests-linux  ]   |           form of an email.message_from_string() instance (see Quick Reference to\n[tests/basic-tests-linux  ]   |           HTTP Headers)\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         * getcode() - return the HTTP status code of the response.  Raises URLError\n[tests/basic-tests-linux  ]   |           on errors.\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         For HTTP and HTTPS URLs, this function returns a http.client.HTTPResponse\n[tests/basic-tests-linux  ]   |         object slightly modified. In addition to the three new methods above, the\n[tests/basic-tests-linux  ]   |         msg attribute contains the same information as the reason attribute ---\n[tests/basic-tests-linux  ]   |         the reason phrase returned by the server --- instead of the response\n[tests/basic-tests-linux  ]   |         headers as it is specified in the documentation for HTTPResponse.\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         For FTP, file, and data URLs and requests explicitly handled by legacy\n[tests/basic-tests-linux  ]   |         URLopener and FancyURLopener classes, this function returns a\n[tests/basic-tests-linux  ]   |         urllib.response.addinfourl object.\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         Note that None may be returned if no handler handles the request (though\n[tests/basic-tests-linux  ]   |         the default installed global OpenerDirector uses UnknownHandler to ensure\n[tests/basic-tests-linux  ]   |         this never happens).\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         In addition, if proxy settings are detected (for example, when a *_proxy\n[tests/basic-tests-linux  ]   |         environment variable like http_proxy is set), ProxyHandler is default\n[tests/basic-tests-linux  ]   |         installed and makes sure the requests are handled through the proxy.\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         '''\n[tests/basic-tests-linux  ]   |         global _opener\n[tests/basic-tests-linux  ]   |         if cafile or capath or cadefault:\n[tests/basic-tests-linux  ]   |             import warnings\n[tests/basic-tests-linux  ]   |             warnings.warn(\"cafile, capath and cadefault are deprecated, use a \"\n[tests/basic-tests-linux  ]   |                           \"custom context instead.\", DeprecationWarning, 2)\n[tests/basic-tests-linux  ]   |             if context is not None:\n[tests/basic-tests-linux  ]   |                 raise ValueError(\n[tests/basic-tests-linux  ]   |                     \"You can't pass both context and any of cafile, capath, and \"\n[tests/basic-tests-linux  ]   |                     \"cadefault\"\n[tests/basic-tests-linux  ]   |                 )\n[tests/basic-tests-linux  ]   |             if not _have_ssl:\n[tests/basic-tests-linux  ]   |                 raise ValueError('SSL support not available')\n[tests/basic-tests-linux  ]   |             context = ssl.create_default_context(ssl.Purpose.SERVER_AUTH,\n[tests/basic-tests-linux  ]   |                                                  cafile=cafile,\n[tests/basic-tests-linux  ]   |                                                  capath=capath)\n[tests/basic-tests-linux  ]   |             https_handler = HTTPSHandler(context=context)\n[tests/basic-tests-linux  ]   |             opener = build_opener(https_handler)\n[tests/basic-tests-linux  ]   |         elif context:\n[tests/basic-tests-linux  ]   |             https_handler = HTTPSHandler(context=context)\n[tests/basic-tests-linux  ]   |             opener = build_opener(https_handler)\n[tests/basic-tests-linux  ]   |         elif _opener is None:\n[tests/basic-tests-linux  ]   |             _opener = opener = build_opener()\n[tests/basic-tests-linux  ]   |         else:\n[tests/basic-tests-linux  ]   |             opener = _opener\n[tests/basic-tests-linux  ]   | >       return opener.open(url, data, timeout)\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/urllib/request.py:222: \n[tests/basic-tests-linux  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | self = <urllib.request.OpenerDirector object at 0x7f14e3cc4050>\n[tests/basic-tests-linux  ]   | fullurl = <urllib.request.Request object at 0x7f14e394b110>, data = None\n[tests/basic-tests-linux  ]   | timeout = 10.0\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   |     def open(self, fullurl, data=None, timeout=socket._GLOBAL_DEFAULT_TIMEOUT):\n[tests/basic-tests-linux  ]   |         # accept a URL or a Request object\n[tests/basic-tests-linux  ]   |         if isinstance(fullurl, str):\n[tests/basic-tests-linux  ]   |             req = Request(fullurl, data)\n[tests/basic-tests-linux  ]   |         else:\n[tests/basic-tests-linux  ]   |             req = fullurl\n[tests/basic-tests-linux  ]   |             if data is not None:\n[tests/basic-tests-linux  ]   |                 req.data = data\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         req.timeout = timeout\n[tests/basic-tests-linux  ]   |         protocol = req.type\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         # pre-process request\n[tests/basic-tests-linux  ]   |         meth_name = protocol+\"_request\"\n[tests/basic-tests-linux  ]   |         for processor in self.process_request.get(protocol, []):\n[tests/basic-tests-linux  ]   |             meth = getattr(processor, meth_name)\n[tests/basic-tests-linux  ]   |             req = meth(req)\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         response = self._open(req, data)\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         # post-process response\n[tests/basic-tests-linux  ]   |         meth_name = protocol+\"_response\"\n[tests/basic-tests-linux  ]   |         for processor in self.process_response.get(protocol, []):\n[tests/basic-tests-linux  ]   |             meth = getattr(processor, meth_name)\n[tests/basic-tests-linux  ]   | >           response = meth(req, response)\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/urllib/request.py:531: \n[tests/basic-tests-linux  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | self = <urllib.request.HTTPErrorProcessor object at 0x7f14e3cc4dd0>\n[tests/basic-tests-linux  ]   | request = <urllib.request.Request object at 0x7f14e394b110>\n[tests/basic-tests-linux  ]   | response = <http.client.HTTPResponse object at 0x7f14e394b350>\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   |     def http_response(self, request, response):\n[tests/basic-tests-linux  ]   |         code, msg, hdrs = response.code, response.msg, response.info()\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         # According to RFC 2616, \"2xx\" code indicates that the client's\n[tests/basic-tests-linux  ]   |         # request was successfully received, understood, and accepted.\n[tests/basic-tests-linux  ]   |         if not (200 <= code < 300):\n[tests/basic-tests-linux  ]   |             response = self.parent.error(\n[tests/basic-tests-linux  ]   | >               'http', request, response, code, msg, hdrs)\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/urllib/request.py:641: \n[tests/basic-tests-linux  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | self = <urllib.request.OpenerDirector object at 0x7f14e3cc4050>, proto = 403\n[tests/basic-tests-linux  ]   | args = ({'default': [<urllib.request.HTTPDefaultErrorHandler object at 0x7f14e3cc4450>], 301: [<urllib.request.HTTPRedirectHa...ult', <urllib.request.Request object at 0x7f14e394b110>, <http.client.HTTPResponse object at 0x7f14e394b350>, 403, ...)\n[tests/basic-tests-linux  ]   | dict = {'default': [<urllib.request.HTTPDefaultErrorHandler object at 0x7f14e3cc4450>], 301: [<urllib.request.HTTPRedirectHan...PRedirectHandler object at 0x7f14e3cc4410>], 303: [<urllib.request.HTTPRedirectHandler object at 0x7f14e3cc4410>], ...}\n[tests/basic-tests-linux  ]   | meth_name = 'http_error_403', http_err = 1\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   |     def error(self, proto, *args):\n[tests/basic-tests-linux  ]   |         if proto in ('http', 'https'):\n[tests/basic-tests-linux  ]   |             # XXX http[s] protocols are special-cased\n[tests/basic-tests-linux  ]   |             dict = self.handle_error['http'] # https is not different than http\n[tests/basic-tests-linux  ]   |             proto = args[2]  # YUCK!\n[tests/basic-tests-linux  ]   |             meth_name = 'http_error_%s' % proto\n[tests/basic-tests-linux  ]   |             http_err = 1\n[tests/basic-tests-linux  ]   |             orig_args = args\n[tests/basic-tests-linux  ]   |         else:\n[tests/basic-tests-linux  ]   |             dict = self.handle_error\n[tests/basic-tests-linux  ]   |             meth_name = proto + '_error'\n[tests/basic-tests-linux  ]   |             http_err = 0\n[tests/basic-tests-linux  ]   |         args = (dict, proto, meth_name) + args\n[tests/basic-tests-linux  ]   |         result = self._call_chain(*args)\n[tests/basic-tests-linux  ]   |         if result:\n[tests/basic-tests-linux  ]   |             return result\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         if http_err:\n[tests/basic-tests-linux  ]   |             args = (dict, 'default', 'http_error_default') + orig_args\n[tests/basic-tests-linux  ]   | >           return self._call_chain(*args)\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/urllib/request.py:569: \n[tests/basic-tests-linux  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | self = <urllib.request.OpenerDirector object at 0x7f14e3cc4050>\n[tests/basic-tests-linux  ]   | chain = {'default': [<urllib.request.HTTPDefaultErrorHandler object at 0x7f14e3cc4450>], 301: [<urllib.request.HTTPRedirectHan...PRedirectHandler object at 0x7f14e3cc4410>], 303: [<urllib.request.HTTPRedirectHandler object at 0x7f14e3cc4410>], ...}\n[tests/basic-tests-linux  ]   | kind = 'default', meth_name = 'http_error_default'\n[tests/basic-tests-linux  ]   | args = (<urllib.request.Request object at 0x7f14e394b110>, <http.client.HTTPResponse object at 0x7f14e394b350>, 403, 'Forbidden', <http.client.HTTPMessage object at 0x7f14e394ba90>)\n[tests/basic-tests-linux  ]   | handlers = [<urllib.request.HTTPDefaultErrorHandler object at 0x7f14e3cc4450>]\n[tests/basic-tests-linux  ]   | handler = <urllib.request.HTTPDefaultErrorHandler object at 0x7f14e3cc4450>\n[tests/basic-tests-linux  ]   | func = <bound method HTTPDefaultErrorHandler.http_error_default of <urllib.request.HTTPDefaultErrorHandler object at 0x7f14e3cc4450>>\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   |     def _call_chain(self, chain, kind, meth_name, *args):\n[tests/basic-tests-linux  ]   |         # Handlers raise an exception if no one else should try to handle\n[tests/basic-tests-linux  ]   |         # the request, or return None if they can't but another handler\n[tests/basic-tests-linux  ]   |         # could.  Otherwise, they return the response.\n[tests/basic-tests-linux  ]   |         handlers = chain.get(kind, ())\n[tests/basic-tests-linux  ]   |         for handler in handlers:\n[tests/basic-tests-linux  ]   |             func = getattr(handler, meth_name)\n[tests/basic-tests-linux  ]   | >           result = func(*args)\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/urllib/request.py:503: \n[tests/basic-tests-linux  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | self = <urllib.request.HTTPDefaultErrorHandler object at 0x7f14e3cc4450>\n[tests/basic-tests-linux  ]   | req = <urllib.request.Request object at 0x7f14e394b110>\n[tests/basic-tests-linux  ]   | fp = <http.client.HTTPResponse object at 0x7f14e394b350>, code = 403\n[tests/basic-tests-linux  ]   | msg = 'Forbidden', hdrs = <http.client.HTTPMessage object at 0x7f14e394ba90>\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   |     def http_error_default(self, req, fp, code, msg, hdrs):\n[tests/basic-tests-linux  ]   | >       raise HTTPError(req.full_url, code, msg, hdrs, fp)\n[tests/basic-tests-linux  ]   | E       urllib.error.HTTPError: HTTP Error 403: Forbidden\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/urllib/request.py:649: HTTPError\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | During handling of the above exception, another exception occurred:\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   |     def setup_module():\n[tests/basic-tests-linux  ]   | >       meta('9780375869020')  #  <-- set\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | isbntools/test/test_cache.py:14: \n[tests/basic-tests-linux  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-linux  ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/isbnlib/_ext.py:25: in meta\n[tests/basic-tests-linux  ]   |     return query(isbn, service) if isbn else {}\n[tests/basic-tests-linux  ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/isbnlib/dev/_decorators.py:27: in memoized_func\n[tests/basic-tests-linux  ]   |     value = func(*args, **kwargs)\n[tests/basic-tests-linux  ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/isbnlib/_metadata.py:33: in query\n[tests/basic-tests-linux  ]   |     meta = services[service](isbn)\n[tests/basic-tests-linux  ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/isbnlib/_goob.py:72: in query\n[tests/basic-tests-linux  ]   |     data = wquery(SERVICE_URL.format(isbn='isbn:' + isbn), user_agent=UA)\n[tests/basic-tests-linux  ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/isbnlib/dev/webquery.py:65: in query\n[tests/basic-tests-linux  ]   |     wq = WEBQuery(url, user_agent, throttling)\n[tests/basic-tests-linux  ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/isbnlib/dev/webquery.py:32: in __init__\n[tests/basic-tests-linux  ]   |     self.data = webservice.query(service_url, ua)\n[tests/basic-tests-linux  ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/isbnlib/dev/_decorators.py:47: in memoized_func\n[tests/basic-tests-linux  ]   |     value = func(*args, **kwargs)\n[tests/basic-tests-linux  ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/isbnlib/dev/webservice.py:113: in query\n[tests/basic-tests-linux  ]   |     data = service.data()\n[tests/basic-tests-linux  ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/isbnlib/dev/webservice.py:93: in data\n[tests/basic-tests-linux  ]   |     res = self.response()\n[tests/basic-tests-linux  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | self = <isbnlib.dev.webservice.WEBService object at 0x7f14e394b090>\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   |     def response(self):\n[tests/basic-tests-linux  ]   |         \"\"\"Check errors on response.\"\"\"\n[tests/basic-tests-linux  ]   |         # TODO(http 102)\n[tests/basic-tests-linux  ]   |         # How to handle \"102 http's code\"?\n[tests/basic-tests-linux  ]   |         # - urlopen doesn't catch a 102 code!\n[tests/basic-tests-linux  ]   |         #   https://docs.python.org/3/howto/urllib2.html#error-codes\n[tests/basic-tests-linux  ]   |         try:\n[tests/basic-tests-linux  ]   |             response = urlopen(\n[tests/basic-tests-linux  ]   |                 self._request,\n[tests/basic-tests-linux  ]   |                 timeout=options.get('URLOPEN_TIMEOUT'),\n[tests/basic-tests-linux  ]   |             )\n[tests/basic-tests-linux  ]   |             LOGGER.debug('Request headers:\\n%s', self._request.header_items())\n[tests/basic-tests-linux  ]   |         except HTTPError as e:  # pragma: no cover\n[tests/basic-tests-linux  ]   |             LOGGER.critical(\n[tests/basic-tests-linux  ]   |                 'ISBNLibHTTPError for %s with code %s [%s]',\n[tests/basic-tests-linux  ]   |                 self._url,\n[tests/basic-tests-linux  ]   |                 e.code,\n[tests/basic-tests-linux  ]   |                 e.msg,\n[tests/basic-tests-linux  ]   |             )\n[tests/basic-tests-linux  ]   |             if e.code in (401, 403, 429):\n[tests/basic-tests-linux  ]   |                 raise ISBNLibHTTPError('%s Are you making many requests?' %\n[tests/basic-tests-linux  ]   | >                                      e.code)\n[tests/basic-tests-linux  ]   | E               isbnlib.dev._exceptions.ISBNLibHTTPError: an HTTP error has ocurred (403 Are you making many requests?)\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/isbnlib/dev/webservice.py:70: ISBNLibHTTPError\n[tests/basic-tests-linux  ]   | =================================== FAILURES ===================================\n[tests/basic-tests-linux  ]   | _________________________________ test_renfile _________________________________\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | self = <isbnlib.dev.webservice.WEBService object at 0x7f14e3cc4250>\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   |     def response(self):\n[tests/basic-tests-linux  ]   |         \"\"\"Check errors on response.\"\"\"\n[tests/basic-tests-linux  ]   |         # TODO(http 102)\n[tests/basic-tests-linux  ]   |         # How to handle \"102 http's code\"?\n[tests/basic-tests-linux  ]   |         # - urlopen doesn't catch a 102 code!\n[tests/basic-tests-linux  ]   |         #   https://docs.python.org/3/howto/urllib2.html#error-codes\n[tests/basic-tests-linux  ]   |         try:\n[tests/basic-tests-linux  ]   |             response = urlopen(\n[tests/basic-tests-linux  ]   |                 self._request,\n[tests/basic-tests-linux  ]   | >               timeout=options.get('URLOPEN_TIMEOUT'),\n[tests/basic-tests-linux  ]   |             )\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/isbnlib/dev/webservice.py:58: \n[tests/basic-tests-linux  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | url = <urllib.request.Request object at 0x7f14e3cc4210>, data = None\n[tests/basic-tests-linux  ]   | timeout = 10.0\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   |     def urlopen(url, data=None, timeout=socket._GLOBAL_DEFAULT_TIMEOUT,\n[tests/basic-tests-linux  ]   |                 *, cafile=None, capath=None, cadefault=False, context=None):\n[tests/basic-tests-linux  ]   |         '''Open the URL url, which can be either a string or a Request object.\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         *data* must be an object specifying additional data to be sent to\n[tests/basic-tests-linux  ]   |         the server, or None if no such data is needed.  See Request for\n[tests/basic-tests-linux  ]   |         details.\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         urllib.request module uses HTTP/1.1 and includes a \"Connection:close\"\n[tests/basic-tests-linux  ]   |         header in its HTTP requests.\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         The optional *timeout* parameter specifies a timeout in seconds for\n[tests/basic-tests-linux  ]   |         blocking operations like the connection attempt (if not specified, the\n[tests/basic-tests-linux  ]   |         global default timeout setting will be used). This only works for HTTP,\n[tests/basic-tests-linux  ]   |         HTTPS and FTP connections.\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         If *context* is specified, it must be a ssl.SSLContext instance describing\n[tests/basic-tests-linux  ]   |         the various SSL options. See HTTPSConnection for more details.\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         The optional *cafile* and *capath* parameters specify a set of trusted CA\n[tests/basic-tests-linux  ]   |         certificates for HTTPS requests. cafile should point to a single file\n[tests/basic-tests-linux  ]   |         containing a bundle of CA certificates, whereas capath should point to a\n[tests/basic-tests-linux  ]   |         directory of hashed certificate files. More information can be found in\n[tests/basic-tests-linux  ]   |         ssl.SSLContext.load_verify_locations().\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         The *cadefault* parameter is ignored.\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         This function always returns an object which can work as a context\n[tests/basic-tests-linux  ]   |         manager and has methods such as\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         * geturl() - return the URL of the resource retrieved, commonly used to\n[tests/basic-tests-linux  ]   |           determine if a redirect was followed\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         * info() - return the meta-information of the page, such as headers, in the\n[tests/basic-tests-linux  ]   |           form of an email.message_from_string() instance (see Quick Reference to\n[tests/basic-tests-linux  ]   |           HTTP Headers)\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         * getcode() - return the HTTP status code of the response.  Raises URLError\n[tests/basic-tests-linux  ]   |           on errors.\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         For HTTP and HTTPS URLs, this function returns a http.client.HTTPResponse\n[tests/basic-tests-linux  ]   |         object slightly modified. In addition to the three new methods above, the\n[tests/basic-tests-linux  ]   |         msg attribute contains the same information as the reason attribute ---\n[tests/basic-tests-linux  ]   |         the reason phrase returned by the server --- instead of the response\n[tests/basic-tests-linux  ]   |         headers as it is specified in the documentation for HTTPResponse.\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         For FTP, file, and data URLs and requests explicitly handled by legacy\n[tests/basic-tests-linux  ]   |         URLopener and FancyURLopener classes, this function returns a\n[tests/basic-tests-linux  ]   |         urllib.response.addinfourl object.\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         Note that None may be returned if no handler handles the request (though\n[tests/basic-tests-linux  ]   |         the default installed global OpenerDirector uses UnknownHandler to ensure\n[tests/basic-tests-linux  ]   |         this never happens).\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         In addition, if proxy settings are detected (for example, when a *_proxy\n[tests/basic-tests-linux  ]   |         environment variable like http_proxy is set), ProxyHandler is default\n[tests/basic-tests-linux  ]   |         installed and makes sure the requests are handled through the proxy.\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         '''\n[tests/basic-tests-linux  ]   |         global _opener\n[tests/basic-tests-linux  ]   |         if cafile or capath or cadefault:\n[tests/basic-tests-linux  ]   |             import warnings\n[tests/basic-tests-linux  ]   |             warnings.warn(\"cafile, capath and cadefault are deprecated, use a \"\n[tests/basic-tests-linux  ]   |                           \"custom context instead.\", DeprecationWarning, 2)\n[tests/basic-tests-linux  ]   |             if context is not None:\n[tests/basic-tests-linux  ]   |                 raise ValueError(\n[tests/basic-tests-linux  ]   |                     \"You can't pass both context and any of cafile, capath, and \"\n[tests/basic-tests-linux  ]   |                     \"cadefault\"\n[tests/basic-tests-linux  ]   |                 )\n[tests/basic-tests-linux  ]   |             if not _have_ssl:\n[tests/basic-tests-linux  ]   |                 raise ValueError('SSL support not available')\n[tests/basic-tests-linux  ]   |             context = ssl.create_default_context(ssl.Purpose.SERVER_AUTH,\n[tests/basic-tests-linux  ]   |                                                  cafile=cafile,\n[tests/basic-tests-linux  ]   |                                                  capath=capath)\n[tests/basic-tests-linux  ]   |             https_handler = HTTPSHandler(context=context)\n[tests/basic-tests-linux  ]   |             opener = build_opener(https_handler)\n[tests/basic-tests-linux  ]   |         elif context:\n[tests/basic-tests-linux  ]   |             https_handler = HTTPSHandler(context=context)\n[tests/basic-tests-linux  ]   |             opener = build_opener(https_handler)\n[tests/basic-tests-linux  ]   |         elif _opener is None:\n[tests/basic-tests-linux  ]   |             _opener = opener = build_opener()\n[tests/basic-tests-linux  ]   |         else:\n[tests/basic-tests-linux  ]   |             opener = _opener\n[tests/basic-tests-linux  ]   | >       return opener.open(url, data, timeout)\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/urllib/request.py:222: \n[tests/basic-tests-linux  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | self = <urllib.request.OpenerDirector object at 0x7f14e3cc4050>\n[tests/basic-tests-linux  ]   | fullurl = <urllib.request.Request object at 0x7f14e3cc4210>, data = None\n[tests/basic-tests-linux  ]   | timeout = 10.0\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   |     def open(self, fullurl, data=None, timeout=socket._GLOBAL_DEFAULT_TIMEOUT):\n[tests/basic-tests-linux  ]   |         # accept a URL or a Request object\n[tests/basic-tests-linux  ]   |         if isinstance(fullurl, str):\n[tests/basic-tests-linux  ]   |             req = Request(fullurl, data)\n[tests/basic-tests-linux  ]   |         else:\n[tests/basic-tests-linux  ]   |             req = fullurl\n[tests/basic-tests-linux  ]   |             if data is not None:\n[tests/basic-tests-linux  ]   |                 req.data = data\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         req.timeout = timeout\n[tests/basic-tests-linux  ]   |         protocol = req.type\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         # pre-process request\n[tests/basic-tests-linux  ]   |         meth_name = protocol+\"_request\"\n[tests/basic-tests-linux  ]   |         for processor in self.process_request.get(protocol, []):\n[tests/basic-tests-linux  ]   |             meth = getattr(processor, meth_name)\n[tests/basic-tests-linux  ]   |             req = meth(req)\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         response = self._open(req, data)\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         # post-process response\n[tests/basic-tests-linux  ]   |         meth_name = protocol+\"_response\"\n[tests/basic-tests-linux  ]   |         for processor in self.process_response.get(protocol, []):\n[tests/basic-tests-linux  ]   |             meth = getattr(processor, meth_name)\n[tests/basic-tests-linux  ]   | >           response = meth(req, response)\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/urllib/request.py:531: \n[tests/basic-tests-linux  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | self = <urllib.request.HTTPErrorProcessor object at 0x7f14e3cc4dd0>\n[tests/basic-tests-linux  ]   | request = <urllib.request.Request object at 0x7f14e3cc4210>\n[tests/basic-tests-linux  ]   | response = <http.client.HTTPResponse object at 0x7f14e45d4350>\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   |     def http_response(self, request, response):\n[tests/basic-tests-linux  ]   |         code, msg, hdrs = response.code, response.msg, response.info()\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         # According to RFC 2616, \"2xx\" code indicates that the client's\n[tests/basic-tests-linux  ]   |         # request was successfully received, understood, and accepted.\n[tests/basic-tests-linux  ]   |         if not (200 <= code < 300):\n[tests/basic-tests-linux  ]   |             response = self.parent.error(\n[tests/basic-tests-linux  ]   | >               'http', request, response, code, msg, hdrs)\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/urllib/request.py:641: \n[tests/basic-tests-linux  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | self = <urllib.request.OpenerDirector object at 0x7f14e3cc4050>, proto = 403\n[tests/basic-tests-linux  ]   | args = ({'default': [<urllib.request.HTTPDefaultErrorHandler object at 0x7f14e3cc4450>], 301: [<urllib.request.HTTPRedirectHa...ult', <urllib.request.Request object at 0x7f14e3cc4210>, <http.client.HTTPResponse object at 0x7f14e45d4350>, 403, ...)\n[tests/basic-tests-linux  ]   | dict = {'default': [<urllib.request.HTTPDefaultErrorHandler object at 0x7f14e3cc4450>], 301: [<urllib.request.HTTPRedirectHan...PRedirectHandler object at 0x7f14e3cc4410>], 303: [<urllib.request.HTTPRedirectHandler object at 0x7f14e3cc4410>], ...}\n[tests/basic-tests-linux  ]   | meth_name = 'http_error_403', http_err = 1\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   |     def error(self, proto, *args):\n[tests/basic-tests-linux  ]   |         if proto in ('http', 'https'):\n[tests/basic-tests-linux  ]   |             # XXX http[s] protocols are special-cased\n[tests/basic-tests-linux  ]   |             dict = self.handle_error['http'] # https is not different than http\n[tests/basic-tests-linux  ]   |             proto = args[2]  # YUCK!\n[tests/basic-tests-linux  ]   |             meth_name = 'http_error_%s' % proto\n[tests/basic-tests-linux  ]   |             http_err = 1\n[tests/basic-tests-linux  ]   |             orig_args = args\n[tests/basic-tests-linux  ]   |         else:\n[tests/basic-tests-linux  ]   |             dict = self.handle_error\n[tests/basic-tests-linux  ]   |             meth_name = proto + '_error'\n[tests/basic-tests-linux  ]   |             http_err = 0\n[tests/basic-tests-linux  ]   |         args = (dict, proto, meth_name) + args\n[tests/basic-tests-linux  ]   |         result = self._call_chain(*args)\n[tests/basic-tests-linux  ]   |         if result:\n[tests/basic-tests-linux  ]   |             return result\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         if http_err:\n[tests/basic-tests-linux  ]   |             args = (dict, 'default', 'http_error_default') + orig_args\n[tests/basic-tests-linux  ]   | >           return self._call_chain(*args)\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/urllib/request.py:569: \n[tests/basic-tests-linux  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | self = <urllib.request.OpenerDirector object at 0x7f14e3cc4050>\n[tests/basic-tests-linux  ]   | chain = {'default': [<urllib.request.HTTPDefaultErrorHandler object at 0x7f14e3cc4450>], 301: [<urllib.request.HTTPRedirectHan...PRedirectHandler object at 0x7f14e3cc4410>], 303: [<urllib.request.HTTPRedirectHandler object at 0x7f14e3cc4410>], ...}\n[tests/basic-tests-linux  ]   | kind = 'default', meth_name = 'http_error_default'\n[tests/basic-tests-linux  ]   | args = (<urllib.request.Request object at 0x7f14e3cc4210>, <http.client.HTTPResponse object at 0x7f14e45d4350>, 403, 'Forbidden', <http.client.HTTPMessage object at 0x7f14e3cc2c90>)\n[tests/basic-tests-linux  ]   | handlers = [<urllib.request.HTTPDefaultErrorHandler object at 0x7f14e3cc4450>]\n[tests/basic-tests-linux  ]   | handler = <urllib.request.HTTPDefaultErrorHandler object at 0x7f14e3cc4450>\n[tests/basic-tests-linux  ]   | func = <bound method HTTPDefaultErrorHandler.http_error_default of <urllib.request.HTTPDefaultErrorHandler object at 0x7f14e3cc4450>>\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   |     def _call_chain(self, chain, kind, meth_name, *args):\n[tests/basic-tests-linux  ]   |         # Handlers raise an exception if no one else should try to handle\n[tests/basic-tests-linux  ]   |         # the request, or return None if they can't but another handler\n[tests/basic-tests-linux  ]   |         # could.  Otherwise, they return the response.\n[tests/basic-tests-linux  ]   |         handlers = chain.get(kind, ())\n[tests/basic-tests-linux  ]   |         for handler in handlers:\n[tests/basic-tests-linux  ]   |             func = getattr(handler, meth_name)\n[tests/basic-tests-linux  ]   | >           result = func(*args)\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/urllib/request.py:503: \n[tests/basic-tests-linux  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | self = <urllib.request.HTTPDefaultErrorHandler object at 0x7f14e3cc4450>\n[tests/basic-tests-linux  ]   | req = <urllib.request.Request object at 0x7f14e3cc4210>\n[tests/basic-tests-linux  ]   | fp = <http.client.HTTPResponse object at 0x7f14e45d4350>, code = 403\n[tests/basic-tests-linux  ]   | msg = 'Forbidden', hdrs = <http.client.HTTPMessage object at 0x7f14e3cc2c90>\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   |     def http_error_default(self, req, fp, code, msg, hdrs):\n[tests/basic-tests-linux  ]   | >       raise HTTPError(req.full_url, code, msg, hdrs, fp)\n[tests/basic-tests-linux  ]   | E       urllib.error.HTTPError: HTTP Error 403: Forbidden\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/urllib/request.py:649: HTTPError\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | During handling of the above exception, another exception occurred:\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   |     def test_renfile():\n[tests/basic-tests-linux  ]   |         \"\"\"Test the renaming of a file\"\"\"\n[tests/basic-tests-linux  ]   | >       renfile(F11, '9781593271923', 'default', PATT0)\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | isbntools/contrib/test/test_rename.py:145: \n[tests/basic-tests-linux  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-linux  ]   | isbntools/contrib/modules/rename/_rename.py:116: in renfile\n[tests/basic-tests-linux  ]   |     metadata = meta(isbn, service)\n[tests/basic-tests-linux  ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/isbnlib/_ext.py:25: in meta\n[tests/basic-tests-linux  ]   |     return query(isbn, service) if isbn else {}\n[tests/basic-tests-linux  ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/isbnlib/dev/_decorators.py:27: in memoized_func\n[tests/basic-tests-linux  ]   |     value = func(*args, **kwargs)\n[tests/basic-tests-linux  ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/isbnlib/_metadata.py:33: in query\n[tests/basic-tests-linux  ]   |     meta = services[service](isbn)\n[tests/basic-tests-linux  ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/isbnlib/_goob.py:72: in query\n[tests/basic-tests-linux  ]   |     data = wquery(SERVICE_URL.format(isbn='isbn:' + isbn), user_agent=UA)\n[tests/basic-tests-linux  ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/isbnlib/dev/webquery.py:65: in query\n[tests/basic-tests-linux  ]   |     wq = WEBQuery(url, user_agent, throttling)\n[tests/basic-tests-linux  ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/isbnlib/dev/webquery.py:32: in __init__\n[tests/basic-tests-linux  ]   |     self.data = webservice.query(service_url, ua)\n[tests/basic-tests-linux  ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/isbnlib/dev/_decorators.py:47: in memoized_func\n[tests/basic-tests-linux  ]   |     value = func(*args, **kwargs)\n[tests/basic-tests-linux  ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/isbnlib/dev/webservice.py:113: in query\n[tests/basic-tests-linux  ]   |     data = service.data()\n[tests/basic-tests-linux  ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/isbnlib/dev/webservice.py:93: in data\n[tests/basic-tests-linux  ]   |     res = self.response()\n[tests/basic-tests-linux  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | self = <isbnlib.dev.webservice.WEBService object at 0x7f14e3cc4250>\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   |     def response(self):\n[tests/basic-tests-linux  ]   |         \"\"\"Check errors on response.\"\"\"\n[tests/basic-tests-linux  ]   |         # TODO(http 102)\n[tests/basic-tests-linux  ]   |         # How to handle \"102 http's code\"?\n[tests/basic-tests-linux  ]   |         # - urlopen doesn't catch a 102 code!\n[tests/basic-tests-linux  ]   |         #   https://docs.python.org/3/howto/urllib2.html#error-codes\n[tests/basic-tests-linux  ]   |         try:\n[tests/basic-tests-linux  ]   |             response = urlopen(\n[tests/basic-tests-linux  ]   |                 self._request,\n[tests/basic-tests-linux  ]   |                 timeout=options.get('URLOPEN_TIMEOUT'),\n[tests/basic-tests-linux  ]   |             )\n[tests/basic-tests-linux  ]   |             LOGGER.debug('Request headers:\\n%s', self._request.header_items())\n[tests/basic-tests-linux  ]   |         except HTTPError as e:  # pragma: no cover\n[tests/basic-tests-linux  ]   |             LOGGER.critical(\n[tests/basic-tests-linux  ]   |                 'ISBNLibHTTPError for %s with code %s [%s]',\n[tests/basic-tests-linux  ]   |                 self._url,\n[tests/basic-tests-linux  ]   |                 e.code,\n[tests/basic-tests-linux  ]   |                 e.msg,\n[tests/basic-tests-linux  ]   |             )\n[tests/basic-tests-linux  ]   |             if e.code in (401, 403, 429):\n[tests/basic-tests-linux  ]   |                 raise ISBNLibHTTPError('%s Are you making many requests?' %\n[tests/basic-tests-linux  ]   | >                                      e.code)\n[tests/basic-tests-linux  ]   | E               isbnlib.dev._exceptions.ISBNLibHTTPError: an HTTP error has ocurred (403 Are you making many requests?)\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/isbnlib/dev/webservice.py:70: ISBNLibHTTPError\n[tests/basic-tests-linux  ]   | ------------------------------ Captured log call -------------------------------\n[tests/basic-tests-linux  ]   | CRITICAL isbnlib.dev.webservice:webservice.py:66 ISBNLibHTTPError for https://www.googleapis.com/books/v1/volumes?q=isbn:9781593271923&fields=items/volumeInfo(title,subtitle,authors,publisher,publishedDate,language,industryIdentifiers,description,imageLinks)&maxResults=1 with code 403 [Forbidden]\n[tests/basic-tests-linux  ]   | _______________________________ test_rencwdfiles _______________________________\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | self = <isbnlib.dev.webservice.WEBService object at 0x7f14e3a935d0>\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   |     def response(self):\n[tests/basic-tests-linux  ]   |         \"\"\"Check errors on response.\"\"\"\n[tests/basic-tests-linux  ]   |         # TODO(http 102)\n[tests/basic-tests-linux  ]   |         # How to handle \"102 http's code\"?\n[tests/basic-tests-linux  ]   |         # - urlopen doesn't catch a 102 code!\n[tests/basic-tests-linux  ]   |         #   https://docs.python.org/3/howto/urllib2.html#error-codes\n[tests/basic-tests-linux  ]   |         try:\n[tests/basic-tests-linux  ]   |             response = urlopen(\n[tests/basic-tests-linux  ]   |                 self._request,\n[tests/basic-tests-linux  ]   | >               timeout=options.get('URLOPEN_TIMEOUT'),\n[tests/basic-tests-linux  ]   |             )\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/isbnlib/dev/webservice.py:58: \n[tests/basic-tests-linux  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | url = <urllib.request.Request object at 0x7f14e3a93510>, data = None\n[tests/basic-tests-linux  ]   | timeout = 10.0\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   |     def urlopen(url, data=None, timeout=socket._GLOBAL_DEFAULT_TIMEOUT,\n[tests/basic-tests-linux  ]   |                 *, cafile=None, capath=None, cadefault=False, context=None):\n[tests/basic-tests-linux  ]   |         '''Open the URL url, which can be either a string or a Request object.\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         *data* must be an object specifying additional data to be sent to\n[tests/basic-tests-linux  ]   |         the server, or None if no such data is needed.  See Request for\n[tests/basic-tests-linux  ]   |         details.\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         urllib.request module uses HTTP/1.1 and includes a \"Connection:close\"\n[tests/basic-tests-linux  ]   |         header in its HTTP requests.\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         The optional *timeout* parameter specifies a timeout in seconds for\n[tests/basic-tests-linux  ]   |         blocking operations like the connection attempt (if not specified, the\n[tests/basic-tests-linux  ]   |         global default timeout setting will be used). This only works for HTTP,\n[tests/basic-tests-linux  ]   |         HTTPS and FTP connections.\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         If *context* is specified, it must be a ssl.SSLContext instance describing\n[tests/basic-tests-linux  ]   |         the various SSL options. See HTTPSConnection for more details.\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         The optional *cafile* and *capath* parameters specify a set of trusted CA\n[tests/basic-tests-linux  ]   |         certificates for HTTPS requests. cafile should point to a single file\n[tests/basic-tests-linux  ]   |         containing a bundle of CA certificates, whereas capath should point to a\n[tests/basic-tests-linux  ]   |         directory of hashed certificate files. More information can be found in\n[tests/basic-tests-linux  ]   |         ssl.SSLContext.load_verify_locations().\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         The *cadefault* parameter is ignored.\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         This function always returns an object which can work as a context\n[tests/basic-tests-linux  ]   |         manager and has methods such as\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         * geturl() - return the URL of the resource retrieved, commonly used to\n[tests/basic-tests-linux  ]   |           determine if a redirect was followed\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         * info() - return the meta-information of the page, such as headers, in the\n[tests/basic-tests-linux  ]   |           form of an email.message_from_string() instance (see Quick Reference to\n[tests/basic-tests-linux  ]   |           HTTP Headers)\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         * getcode() - return the HTTP status code of the response.  Raises URLError\n[tests/basic-tests-linux  ]   |           on errors.\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         For HTTP and HTTPS URLs, this function returns a http.client.HTTPResponse\n[tests/basic-tests-linux  ]   |         object slightly modified. In addition to the three new methods above, the\n[tests/basic-tests-linux  ]   |         msg attribute contains the same information as the reason attribute ---\n[tests/basic-tests-linux  ]   |         the reason phrase returned by the server --- instead of the response\n[tests/basic-tests-linux  ]   |         headers as it is specified in the documentation for HTTPResponse.\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         For FTP, file, and data URLs and requests explicitly handled by legacy\n[tests/basic-tests-linux  ]   |         URLopener and FancyURLopener classes, this function returns a\n[tests/basic-tests-linux  ]   |         urllib.response.addinfourl object.\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         Note that None may be returned if no handler handles the request (though\n[tests/basic-tests-linux  ]   |         the default installed global OpenerDirector uses UnknownHandler to ensure\n[tests/basic-tests-linux  ]   |         this never happens).\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         In addition, if proxy settings are detected (for example, when a *_proxy\n[tests/basic-tests-linux  ]   |         environment variable like http_proxy is set), ProxyHandler is default\n[tests/basic-tests-linux  ]   |         installed and makes sure the requests are handled through the proxy.\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         '''\n[tests/basic-tests-linux  ]   |         global _opener\n[tests/basic-tests-linux  ]   |         if cafile or capath or cadefault:\n[tests/basic-tests-linux  ]   |             import warnings\n[tests/basic-tests-linux  ]   |             warnings.warn(\"cafile, capath and cadefault are deprecated, use a \"\n[tests/basic-tests-linux  ]   |                           \"custom context instead.\", DeprecationWarning, 2)\n[tests/basic-tests-linux  ]   |             if context is not None:\n[tests/basic-tests-linux  ]   |                 raise ValueError(\n[tests/basic-tests-linux  ]   |                     \"You can't pass both context and any of cafile, capath, and \"\n[tests/basic-tests-linux  ]   |                     \"cadefault\"\n[tests/basic-tests-linux  ]   |                 )\n[tests/basic-tests-linux  ]   |             if not _have_ssl:\n[tests/basic-tests-linux  ]   |                 raise ValueError('SSL support not available')\n[tests/basic-tests-linux  ]   |             context = ssl.create_default_context(ssl.Purpose.SERVER_AUTH,\n[tests/basic-tests-linux  ]   |                                                  cafile=cafile,\n[tests/basic-tests-linux  ]   |                                                  capath=capath)\n[tests/basic-tests-linux  ]   |             https_handler = HTTPSHandler(context=context)\n[tests/basic-tests-linux  ]   |             opener = build_opener(https_handler)\n[tests/basic-tests-linux  ]   |         elif context:\n[tests/basic-tests-linux  ]   |             https_handler = HTTPSHandler(context=context)\n[tests/basic-tests-linux  ]   |             opener = build_opener(https_handler)\n[tests/basic-tests-linux  ]   |         elif _opener is None:\n[tests/basic-tests-linux  ]   |             _opener = opener = build_opener()\n[tests/basic-tests-linux  ]   |         else:\n[tests/basic-tests-linux  ]   |             opener = _opener\n[tests/basic-tests-linux  ]   | >       return opener.open(url, data, timeout)\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/urllib/request.py:222: \n[tests/basic-tests-linux  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | self = <urllib.request.OpenerDirector object at 0x7f14e3cc4050>\n[tests/basic-tests-linux  ]   | fullurl = <urllib.request.Request object at 0x7f14e3a93510>, data = None\n[tests/basic-tests-linux  ]   | timeout = 10.0\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   |     def open(self, fullurl, data=None, timeout=socket._GLOBAL_DEFAULT_TIMEOUT):\n[tests/basic-tests-linux  ]   |         # accept a URL or a Request object\n[tests/basic-tests-linux  ]   |         if isinstance(fullurl, str):\n[tests/basic-tests-linux  ]   |             req = Request(fullurl, data)\n[tests/basic-tests-linux  ]   |         else:\n[tests/basic-tests-linux  ]   |             req = fullurl\n[tests/basic-tests-linux  ]   |             if data is not None:\n[tests/basic-tests-linux  ]   |                 req.data = data\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         req.timeout = timeout\n[tests/basic-tests-linux  ]   |         protocol = req.type\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         # pre-process request\n[tests/basic-tests-linux  ]   |         meth_name = protocol+\"_request\"\n[tests/basic-tests-linux  ]   |         for processor in self.process_request.get(protocol, []):\n[tests/basic-tests-linux  ]   |             meth = getattr(processor, meth_name)\n[tests/basic-tests-linux  ]   |             req = meth(req)\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         response = self._open(req, data)\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         # post-process response\n[tests/basic-tests-linux  ]   |         meth_name = protocol+\"_response\"\n[tests/basic-tests-linux  ]   |         for processor in self.process_response.get(protocol, []):\n[tests/basic-tests-linux  ]   |             meth = getattr(processor, meth_name)\n[tests/basic-tests-linux  ]   | >           response = meth(req, response)\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/urllib/request.py:531: \n[tests/basic-tests-linux  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | self = <urllib.request.HTTPErrorProcessor object at 0x7f14e3cc4dd0>\n[tests/basic-tests-linux  ]   | request = <urllib.request.Request object at 0x7f14e3a93510>\n[tests/basic-tests-linux  ]   | response = <http.client.HTTPResponse object at 0x7f14e3a93f50>\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   |     def http_response(self, request, response):\n[tests/basic-tests-linux  ]   |         code, msg, hdrs = response.code, response.msg, response.info()\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         # According to RFC 2616, \"2xx\" code indicates that the client's\n[tests/basic-tests-linux  ]   |         # request was successfully received, understood, and accepted.\n[tests/basic-tests-linux  ]   |         if not (200 <= code < 300):\n[tests/basic-tests-linux  ]   |             response = self.parent.error(\n[tests/basic-tests-linux  ]   | >               'http', request, response, code, msg, hdrs)\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/urllib/request.py:641: \n[tests/basic-tests-linux  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | self = <urllib.request.OpenerDirector object at 0x7f14e3cc4050>, proto = 403\n[tests/basic-tests-linux  ]   | args = ({'default': [<urllib.request.HTTPDefaultErrorHandler object at 0x7f14e3cc4450>], 301: [<urllib.request.HTTPRedirectHa...ult', <urllib.request.Request object at 0x7f14e3a93510>, <http.client.HTTPResponse object at 0x7f14e3a93f50>, 403, ...)\n[tests/basic-tests-linux  ]   | dict = {'default': [<urllib.request.HTTPDefaultErrorHandler object at 0x7f14e3cc4450>], 301: [<urllib.request.HTTPRedirectHan...PRedirectHandler object at 0x7f14e3cc4410>], 303: [<urllib.request.HTTPRedirectHandler object at 0x7f14e3cc4410>], ...}\n[tests/basic-tests-linux  ]   | meth_name = 'http_error_403', http_err = 1\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   |     def error(self, proto, *args):\n[tests/basic-tests-linux  ]   |         if proto in ('http', 'https'):\n[tests/basic-tests-linux  ]   |             # XXX http[s] protocols are special-cased\n[tests/basic-tests-linux  ]   |             dict = self.handle_error['http'] # https is not different than http\n[tests/basic-tests-linux  ]   |             proto = args[2]  # YUCK!\n[tests/basic-tests-linux  ]   |             meth_name = 'http_error_%s' % proto\n[tests/basic-tests-linux  ]   |             http_err = 1\n[tests/basic-tests-linux  ]   |             orig_args = args\n[tests/basic-tests-linux  ]   |         else:\n[tests/basic-tests-linux  ]   |             dict = self.handle_error\n[tests/basic-tests-linux  ]   |             meth_name = proto + '_error'\n[tests/basic-tests-linux  ]   |             http_err = 0\n[tests/basic-tests-linux  ]   |         args = (dict, proto, meth_name) + args\n[tests/basic-tests-linux  ]   |         result = self._call_chain(*args)\n[tests/basic-tests-linux  ]   |         if result:\n[tests/basic-tests-linux  ]   |             return result\n[tests/basic-tests-linux  ]   |     \n[tests/basic-tests-linux  ]   |         if http_err:\n[tests/basic-tests-linux  ]   |             args = (dict, 'default', 'http_error_default') + orig_args\n[tests/basic-tests-linux  ]   | >           return self._call_chain(*args)\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/urllib/request.py:569: \n[tests/basic-tests-linux  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | self = <urllib.request.OpenerDirector object at 0x7f14e3cc4050>\n[tests/basic-tests-linux  ]   | chain = {'default': [<urllib.request.HTTPDefaultErrorHandler object at 0x7f14e3cc4450>], 301: [<urllib.request.HTTPRedirectHan...PRedirectHandler object at 0x7f14e3cc4410>], 303: [<urllib.request.HTTPRedirectHandler object at 0x7f14e3cc4410>], ...}\n[tests/basic-tests-linux  ]   | kind = 'default', meth_name = 'http_error_default'\n[tests/basic-tests-linux  ]   | args = (<urllib.request.Request object at 0x7f14e3a93510>, <http.client.HTTPResponse object at 0x7f14e3a93f50>, 403, 'Forbidden', <http.client.HTTPMessage object at 0x7f14e3b0f250>)\n[tests/basic-tests-linux  ]   | handlers = [<urllib.request.HTTPDefaultErrorHandler object at 0x7f14e3cc4450>]\n[tests/basic-tests-linux  ]   | handler = <urllib.request.HTTPDefaultErrorHandler object at 0x7f14e3cc4450>\n[tests/basic-tests-linux  ]   | func = <bound method HTTPDefaultErrorHandler.http_error_default of <urllib.request.HTTPDefaultErrorHandler object at 0x7f14e3cc4450>>\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   |     def _call_chain(self, chain, kind, meth_name, *args):\n[tests/basic-tests-linux  ]   |         # Handlers raise an exception if no one else should try to handle\n[tests/basic-tests-linux  ]   |         # the request, or return None if they can't but another handler\n[tests/basic-tests-linux  ]   |         # could.  Otherwise, they return the response.\n[tests/basic-tests-linux  ]   |         handlers = chain.get(kind, ())\n[tests/basic-tests-linux  ]   |         for handler in handlers:\n[tests/basic-tests-linux  ]   |             func = getattr(handler, meth_name)\n[tests/basic-tests-linux  ]   | >           result = func(*args)\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/urllib/request.py:503: \n[tests/basic-tests-linux  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | self = <urllib.request.HTTPDefaultErrorHandler object at 0x7f14e3cc4450>\n[tests/basic-tests-linux  ]   | req = <urllib.request.Request object at 0x7f14e3a93510>\n[tests/basic-tests-linux  ]   | fp = <http.client.HTTPResponse object at 0x7f14e3a93f50>, code = 403\n[tests/basic-tests-linux  ]   | msg = 'Forbidden', hdrs = <http.client.HTTPMessage object at 0x7f14e3b0f250>\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   |     def http_error_default(self, req, fp, code, msg, hdrs):\n[tests/basic-tests-linux  ]   | >       raise HTTPError(req.full_url, code, msg, hdrs, fp)\n[tests/basic-tests-linux  ]   | E       urllib.error.HTTPError: HTTP Error 403: Forbidden\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/urllib/request.py:649: HTTPError\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | During handling of the above exception, another exception occurred:\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   |     def test_rencwdfiles():\n[tests/basic-tests-linux  ]   |         \"\"\"Test the renaming of files in current directory\"\"\"\n[tests/basic-tests-linux  ]   |         delete_files('*deleteme*.pdf')\n[tests/basic-tests-linux  ]   | >       rencwdfiles('*.pdf', 'default', PATT0)\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | isbntools/contrib/test/test_rename.py:159: \n[tests/basic-tests-linux  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-linux  ]   | isbntools/contrib/modules/rename/_rename.py:147: in rencwdfiles\n[tests/basic-tests-linux  ]   |     renfile(f, isbn, service, pattern)\n[tests/basic-tests-linux  ]   | isbntools/contrib/modules/rename/_rename.py:116: in renfile\n[tests/basic-tests-linux  ]   |     metadata = meta(isbn, service)\n[tests/basic-tests-linux  ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/isbnlib/_ext.py:25: in meta\n[tests/basic-tests-linux  ]   |     return query(isbn, service) if isbn else {}\n[tests/basic-tests-linux  ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/isbnlib/dev/_decorators.py:27: in memoized_func\n[tests/basic-tests-linux  ]   |     value = func(*args, **kwargs)\n[tests/basic-tests-linux  ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/isbnlib/_metadata.py:33: in query\n[tests/basic-tests-linux  ]   |     meta = services[service](isbn)\n[tests/basic-tests-linux  ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/isbnlib/_goob.py:72: in query\n[tests/basic-tests-linux  ]   |     data = wquery(SERVICE_URL.format(isbn='isbn:' + isbn), user_agent=UA)\n[tests/basic-tests-linux  ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/isbnlib/dev/webquery.py:65: in query\n[tests/basic-tests-linux  ]   |     wq = WEBQuery(url, user_agent, throttling)\n[tests/basic-tests-linux  ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/isbnlib/dev/webquery.py:32: in __init__\n[tests/basic-tests-linux  ]   |     self.data = webservice.query(service_url, ua)\n[tests/basic-tests-linux  ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/isbnlib/dev/_decorators.py:47: in memoized_func\n[tests/basic-tests-linux  ]   |     value = func(*args, **kwargs)\n[tests/basic-tests-linux  ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/isbnlib/dev/webservice.py:113: in query\n[tests/basic-tests-linux  ]   |     data = service.data()\n[tests/basic-tests-linux  ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/isbnlib/dev/webservice.py:93: in data\n[tests/basic-tests-linux  ]   |     res = self.response()\n[tests/basic-tests-linux  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | self = <isbnlib.dev.webservice.WEBService object at 0x7f14e3a935d0>\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   |     def response(self):\n[tests/basic-tests-linux  ]   |         \"\"\"Check errors on response.\"\"\"\n[tests/basic-tests-linux  ]   |         # TODO(http 102)\n[tests/basic-tests-linux  ]   |         # How to handle \"102 http's code\"?\n[tests/basic-tests-linux  ]   |         # - urlopen doesn't catch a 102 code!\n[tests/basic-tests-linux  ]   |         #   https://docs.python.org/3/howto/urllib2.html#error-codes\n[tests/basic-tests-linux  ]   |         try:\n[tests/basic-tests-linux  ]   |             response = urlopen(\n[tests/basic-tests-linux  ]   |                 self._request,\n[tests/basic-tests-linux  ]   |                 timeout=options.get('URLOPEN_TIMEOUT'),\n[tests/basic-tests-linux  ]   |             )\n[tests/basic-tests-linux  ]   |             LOGGER.debug('Request headers:\\n%s', self._request.header_items())\n[tests/basic-tests-linux  ]   |         except HTTPError as e:  # pragma: no cover\n[tests/basic-tests-linux  ]   |             LOGGER.critical(\n[tests/basic-tests-linux  ]   |                 'ISBNLibHTTPError for %s with code %s [%s]',\n[tests/basic-tests-linux  ]   |                 self._url,\n[tests/basic-tests-linux  ]   |                 e.code,\n[tests/basic-tests-linux  ]   |                 e.msg,\n[tests/basic-tests-linux  ]   |             )\n[tests/basic-tests-linux  ]   |             if e.code in (401, 403, 429):\n[tests/basic-tests-linux  ]   |                 raise ISBNLibHTTPError('%s Are you making many requests?' %\n[tests/basic-tests-linux  ]   | >                                      e.code)\n[tests/basic-tests-linux  ]   | E               isbnlib.dev._exceptions.ISBNLibHTTPError: an HTTP error has ocurred (403 Are you making many requests?)\n[tests/basic-tests-linux  ]   | \n[tests/basic-tests-linux  ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/isbnlib/dev/webservice.py:70: ISBNLibHTTPError\n[tests/basic-tests-linux  ]   | ----------------------------- Captured stderr call -----------------------------\n[tests/basic-tests-linux  ]   | no ISBN found in name of file myfile.pdf \n[tests/basic-tests-linux  ]   | ------------------------------ Captured log call -------------------------------\n[tests/basic-tests-linux  ]   | WARNING  isbntools.contrib.modules.rename._rename:_rename.py:62 No ISBN found in name of file myfile.pdf\n[tests/basic-tests-linux  ]   | CRITICAL isbnlib.dev.webservice:webservice.py:66 ISBNLibHTTPError for https://www.googleapis.com/books/v1/volumes?q=isbn:9780743258074&fields=items/volumeInfo(title,subtitle,authors,publisher,publishedDate,language,industryIdentifiers,description,imageLinks)&maxResults=1 with code 403 [Forbidden]\n[tests/basic-tests-linux  ]   | =========================== short test summary info ============================\n[tests/basic-tests-linux  ]   | FAILED isbntools/contrib/test/test_rename.py::test_renfile - isbnlib.dev._exceptions.ISBNLibHTTPError: an HTTP error has ocurred (403 Are you making many requests?)\n[tests/basic-tests-linux  ]   | FAILED isbntools/contrib/test/test_rename.py::test_rencwdfiles - isbnlib.dev._exceptions.ISBNLibHTTPError: an HTTP error has ocurred (403 Are you making many requests?)\n[tests/basic-tests-linux  ]   | ERROR isbntools/test/test_cache.py::test_shelvecache_meta - isbnlib.dev._exceptions.ISBNLibHTTPError: an HTTP error has ocurred (403 Are you making many requests?)\n[tests/basic-tests-linux  ]   | ERROR isbntools/test/test_cache.py::test_shelvecache_editions - isbnlib.dev._exceptions.ISBNLibHTTPError: an HTTP error has ocurred (403 Are you making many requests?)\n[tests/basic-tests-linux  ]   | ERROR isbntools/test/test_cache.py::test_shelvecache_setget - isbnlib.dev._exceptions.ISBNLibHTTPError: an HTTP error has ocurred (403 Are you making many requests?)\n[tests/basic-tests-linux  ]   | ERROR isbntools/test/test_cache.py::test_shelvecache_contains - isbnlib.dev._exceptions.ISBNLibHTTPError: an HTTP error has ocurred (403 Are you making many requests?)\n[tests/basic-tests-linux  ]   | ==================== 2 failed, 6 passed, 4 errors in 4.33s =====================\n[tests/basic-tests-linux  ]   \u274c  Failure - Main Run pytest tests\n[tests/basic-tests-linux  ] exitcode '1': failure\n[tests/basic-tests-windows] \ud83c\udfc1  Job failed\n[tests/basic-tests-linux  ] \ud83c\udfc1  Job failed\n",
    "actions_stderr": "Error: Job 'basic-tests-linux' failed\n"
}