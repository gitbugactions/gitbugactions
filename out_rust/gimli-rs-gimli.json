{
    "repository": "gimli-rs/gimli",
    "clone_url": "https://github.com/gimli-rs/gimli.git",
    "timestamp": "2023-05-30T09:05:38.374605Z",
    "clone_success": true,
    "number of actions": 1,
    "number_of_test_actions": 1,
    "actions_successful": false,
    "actions_stdout": "[Rust/rustfmt           ] \ud83d\ude80  Start image=crawlergpt:latest\n[Rust/cross             ] \ud83d\ude80  Start image=crawlergpt:latest\n[Rust/doc               ] \ud83d\ude80  Start image=crawlergpt:latest\n[Rust/bench             ] \ud83d\ude80  Start image=crawlergpt:latest\n[Rust/build             ] \ud83d\ude80  Start image=crawlergpt:latest\n[Rust/coverage          ] \ud83d\ude80  Start image=xd009642/tarpaulin\n[Rust/features          ] \ud83d\ude80  Start image=crawlergpt:latest\n[Rust/Build fuzz targets] \ud83d\ude80  Start image=crawlergpt:latest\n[Rust/rustfmt           ]   \ud83d\udc33  docker pull image=crawlergpt:latest platform= username= forcePull=false\n[Rust/doc               ]   \ud83d\udc33  docker pull image=crawlergpt:latest platform= username= forcePull=false\n[Rust/cross             ]   \ud83d\udc33  docker pull image=crawlergpt:latest platform= username= forcePull=false\n[Rust/build             ]   \ud83d\udc33  docker pull image=crawlergpt:latest platform= username= forcePull=false\n[Rust/features          ]   \ud83d\udc33  docker pull image=crawlergpt:latest platform= username= forcePull=false\n[Rust/coverage          ]   \ud83d\udc33  docker pull image=xd009642/tarpaulin platform= username= forcePull=false\n[Rust/bench             ]   \ud83d\udc33  docker pull image=crawlergpt:latest platform= username= forcePull=false\n[Rust/Build fuzz targets]   \ud83d\udc33  docker pull image=crawlergpt:latest platform= username= forcePull=false\n[Rust/doc               ]   \ud83d\udc33  docker create image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[Rust/features          ]   \ud83d\udc33  docker create image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[Rust/cross             ]   \ud83d\udc33  docker create image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[Rust/bench             ]   \ud83d\udc33  docker create image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[Rust/Build fuzz targets]   \ud83d\udc33  docker create image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[Rust/rustfmt           ]   \ud83d\udc33  docker create image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[Rust/coverage          ]   \ud83d\udc33  docker create image=xd009642/tarpaulin platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[Rust/build             ] failed to remove container: Error response from daemon: removal of container f01b2b42f513950597347649bb18e909f8078b97293c91ef07d7acc243b64d5b is already in progress\n[Rust/features          ]   \ud83d\udc33  docker run image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[Rust/cross             ]   \ud83d\udc33  docker run image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[Rust/bench             ]   \ud83d\udc33  docker run image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[Rust/Build fuzz targets]   \ud83d\udc33  docker run image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[Rust/coverage          ]   \ud83d\udc33  docker run image=xd009642/tarpaulin platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[Rust/rustfmt           ]   \ud83d\udc33  docker run image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[Rust/doc               ]   \ud83d\udc33  docker run image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[Rust/rustfmt           ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/gimli-rs-gimli] user=0 workdir=\n[Rust/features          ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/gimli-rs-gimli] user=0 workdir=\n[Rust/cross             ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/gimli-rs-gimli] user=0 workdir=\n[Rust/features          ]   \u2601  git clone 'https://github.com/dtolnay/rust-toolchain' # ref=stable\n[Rust/cross             ]   \u2601  git clone 'https://github.com/dtolnay/rust-toolchain' # ref=stable\n[Rust/coverage          ]   \u2601  git clone 'https://github.com/dtolnay/rust-toolchain' # ref=stable\n[Rust/rustfmt           ]   \u2601  git clone 'https://github.com/dtolnay/rust-toolchain' # ref=stable\n[Rust/Build fuzz targets]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/gimli-rs-gimli] user=0 workdir=\n[Rust/features          ] \u2b50 Run Pre Install rust stable\n[Rust/cross             ] \u2b50 Run Pre Install rust stable\n[Rust/Build fuzz targets]   \u2601  git clone 'https://github.com/dtolnay/rust-toolchain' # ref=nightly\n[Rust/coverage          ] \u2b50 Run Pre Install rust stable\n[Rust/features          ]   \u2705  Success - Pre Install rust stable\n[Rust/cross             ]   \u2705  Success - Pre Install rust stable\n[Rust/coverage          ]   \u2705  Success - Pre Install rust stable\n[Rust/cross             ]   \u2601  git clone 'https://github.com/taiki-e/install-action' # ref=v2\n[Rust/features          ]   \u2601  git clone 'https://github.com/taiki-e/install-action' # ref=v2\n[Rust/coverage          ]   \u2601  git clone 'https://github.com/coverallsapp/github-action' # ref=master\n[Rust/rustfmt           ] \u2b50 Run Pre Install rust stable\n[Rust/rustfmt           ]   \u2705  Success - Pre Install rust stable\n[Rust/Build fuzz targets] \u2b50 Run Pre Install rust nightly\n[Rust/rustfmt           ] \u2b50 Run Main actions/checkout@v3\n[Rust/rustfmt           ]   \u2705  Success - Main actions/checkout@v3\n[Rust/Build fuzz targets]   \u2705  Success - Pre Install rust nightly\n[Rust/Build fuzz targets]   \u2601  git clone 'https://github.com/actions/upload-artifact' # ref=v3\n[Rust/rustfmt           ] \u2b50 Run Main Install rust stable\n[Rust/rustfmt           ]   \ud83d\udc33  docker cp src=/home/andre-silva/.cache/act/dtolnay-rust-toolchain@stable/ dst=/var/run/act/actions/dtolnay-rust-toolchain@stable/\n[Rust/rustfmt           ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /var/run/act/actions/dtolnay-rust-toolchain@stable/] user=0 workdir=\n[Rust/cross             ] \u2b50 Run Pre taiki-e/install-action@v2\n[Rust/cross             ]   \u2705  Success - Pre taiki-e/install-action@v2\n[Rust/features          ] \u2b50 Run Pre taiki-e/install-action@v2\n[Rust/cross             ] \ud83e\uddea  Matrix: map[target:i686-unknown-linux-gnu]\n[Rust/features          ]   \u2705  Success - Pre taiki-e/install-action@v2\n[Rust/cross             ] \u2b50 Run Main actions/checkout@v3\n[Rust/coverage          ] \u2b50 Run Main actions/checkout@v3\n[Rust/coverage          ]   \u2705  Success - Main actions/checkout@v3\n[Rust/cross             ]   \u2705  Success - Main actions/checkout@v3\n[Rust/Build fuzz targets]   \u2601  git clone 'https://github.com/actions/upload-artifact' # ref=v3\n[Rust/features          ] \u2b50 Run Main actions/checkout@v3\n[Rust/Build fuzz targets] \u2b50 Run Main actions/checkout@v3\n[Rust/features          ]   \u2705  Success - Main actions/checkout@v3\n[Rust/cross             ] \u2b50 Run Main Install rust stable\n[Rust/coverage          ] \u2b50 Run Main Install rust stable\n[Rust/Build fuzz targets]   \u2705  Success - Main actions/checkout@v3\n[Rust/coverage          ]   \ud83d\udc33  docker cp src=/home/andre-silva/.cache/act/dtolnay-rust-toolchain@stable/ dst=/var/run/act/actions/dtolnay-rust-toolchain@stable/\n[Rust/cross             ]   \ud83d\udc33  docker cp src=/home/andre-silva/.cache/act/dtolnay-rust-toolchain@stable/ dst=/var/run/act/actions/dtolnay-rust-toolchain@stable/\n[Rust/cross             ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /var/run/act/actions/dtolnay-rust-toolchain@stable/] user=0 workdir=\n[Rust/coverage          ] \u2b50 Run Main : parse toolchain version\nif [[ $toolchain =~ ^stable' '[0-9]+' '(year|month|week|day)s?' 'ago$ ]]; then\n  if [[ Linux == macOS ]]; then\n    echo \"toolchain=1.$((($(date -v-$(sed 's/stable \\([0-9]*\\) \\(.\\).*/\\1\\2/' <<< $toolchain) +%s)/60/60/24-16569)/7/6))\" >> $GITHUB_OUTPUT\n  else\n    echo \"toolchain=1.$((($(date --date \"${toolchain#stable }\" +%s)/60/60/24-16569)/7/6))\" >> $GITHUB_OUTPUT\n  fi\nelif [[ $toolchain =~ ^stable' 'minus' '[0-9]+' 'releases?$ ]]; then\n  echo \"toolchain=1.$((($(date +%s)/60/60/24-16569)/7/6-${toolchain//[^0-9]/}))\" >> $GITHUB_OUTPUT\nelse\n  echo \"toolchain=$toolchain\" >> $GITHUB_OUTPUT\nfi\n[Rust/features          ] \u2b50 Run Main Install rust stable\n[Rust/Build fuzz targets] \u2b50 Run Main Install rust nightly\n[Rust/features          ]   \ud83d\udc33  docker cp src=/home/andre-silva/.cache/act/dtolnay-rust-toolchain@stable/ dst=/var/run/act/actions/dtolnay-rust-toolchain@stable/\n[Rust/Build fuzz targets]   \ud83d\udc33  docker cp src=/home/andre-silva/.cache/act/dtolnay-rust-toolchain@nightly/ dst=/var/run/act/actions/dtolnay-rust-toolchain@nightly/\n[Rust/coverage          ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-parse.sh] user= workdir=\n[Rust/features          ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /var/run/act/actions/dtolnay-rust-toolchain@stable/] user=0 workdir=\n[Rust/Build fuzz targets]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /var/run/act/actions/dtolnay-rust-toolchain@nightly/] user=0 workdir=\n[Rust/coverage          ]   \u2705  Success - Main : parse toolchain version\nif [[ $toolchain =~ ^stable' '[0-9]+' '(year|month|week|day)s?' 'ago$ ]]; then\n  if [[ Linux == macOS ]]; then\n    echo \"toolchain=1.$((($(date -v-$(sed 's/stable \\([0-9]*\\) \\(.\\).*/\\1\\2/' <<< $toolchain) +%s)/60/60/24-16569)/7/6))\" >> $GITHUB_OUTPUT\n  else\n    echo \"toolchain=1.$((($(date --date \"${toolchain#stable }\" +%s)/60/60/24-16569)/7/6))\" >> $GITHUB_OUTPUT\n  fi\nelif [[ $toolchain =~ ^stable' 'minus' '[0-9]+' 'releases?$ ]]; then\n  echo \"toolchain=1.$((($(date +%s)/60/60/24-16569)/7/6-${toolchain//[^0-9]/}))\" >> $GITHUB_OUTPUT\nelse\n  echo \"toolchain=$toolchain\" >> $GITHUB_OUTPUT\nfi\n[Rust/cross             ] \u2b50 Run Main : parse toolchain version\nif [[ $toolchain =~ ^stable' '[0-9]+' '(year|month|week|day)s?' 'ago$ ]]; then\n  if [[ Linux == macOS ]]; then\n    echo \"toolchain=1.$((($(date -v-$(sed 's/stable \\([0-9]*\\) \\(.\\).*/\\1\\2/' <<< $toolchain) +%s)/60/60/24-16569)/7/6))\" >> $GITHUB_OUTPUT\n  else\n    echo \"toolchain=1.$((($(date --date \"${toolchain#stable }\" +%s)/60/60/24-16569)/7/6))\" >> $GITHUB_OUTPUT\n  fi\nelif [[ $toolchain =~ ^stable' 'minus' '[0-9]+' 'releases?$ ]]; then\n  echo \"toolchain=1.$((($(date +%s)/60/60/24-16569)/7/6-${toolchain//[^0-9]/}))\" >> $GITHUB_OUTPUT\nelse\n  echo \"toolchain=$toolchain\" >> $GITHUB_OUTPUT\nfi\n[Rust/Build fuzz targets] \u2b50 Run Main : parse toolchain version\nif [[ $toolchain =~ ^stable' '[0-9]+' '(year|month|week|day)s?' 'ago$ ]]; then\n  if [[ Linux == macOS ]]; then\n    echo \"toolchain=1.$((($(date -v-$(sed 's/stable \\([0-9]*\\) \\(.\\).*/\\1\\2/' <<< $toolchain) +%s)/60/60/24-16569)/7/6))\" >> $GITHUB_OUTPUT\n  else\n    echo \"toolchain=1.$((($(date --date \"${toolchain#stable }\" +%s)/60/60/24-16569)/7/6))\" >> $GITHUB_OUTPUT\n  fi\nelif [[ $toolchain =~ ^stable' 'minus' '[0-9]+' 'releases?$ ]]; then\n  echo \"toolchain=1.$((($(date +%s)/60/60/24-16569)/7/6-${toolchain//[^0-9]/}))\" >> $GITHUB_OUTPUT\nelse\n  echo \"toolchain=$toolchain\" >> $GITHUB_OUTPUT\nfi\n[Rust/rustfmt           ] \u2b50 Run Main : parse toolchain version\nif [[ $toolchain =~ ^stable' '[0-9]+' '(year|month|week|day)s?' 'ago$ ]]; then\n  if [[ Linux == macOS ]]; then\n    echo \"toolchain=1.$((($(date -v-$(sed 's/stable \\([0-9]*\\) \\(.\\).*/\\1\\2/' <<< $toolchain) +%s)/60/60/24-16569)/7/6))\" >> $GITHUB_OUTPUT\n  else\n    echo \"toolchain=1.$((($(date --date \"${toolchain#stable }\" +%s)/60/60/24-16569)/7/6))\" >> $GITHUB_OUTPUT\n  fi\nelif [[ $toolchain =~ ^stable' 'minus' '[0-9]+' 'releases?$ ]]; then\n  echo \"toolchain=1.$((($(date +%s)/60/60/24-16569)/7/6-${toolchain//[^0-9]/}))\" >> $GITHUB_OUTPUT\nelse\n  echo \"toolchain=$toolchain\" >> $GITHUB_OUTPUT\nfi\n[Rust/features          ] \u2b50 Run Main : parse toolchain version\nif [[ $toolchain =~ ^stable' '[0-9]+' '(year|month|week|day)s?' 'ago$ ]]; then\n  if [[ Linux == macOS ]]; then\n    echo \"toolchain=1.$((($(date -v-$(sed 's/stable \\([0-9]*\\) \\(.\\).*/\\1\\2/' <<< $toolchain) +%s)/60/60/24-16569)/7/6))\" >> $GITHUB_OUTPUT\n  else\n    echo \"toolchain=1.$((($(date --date \"${toolchain#stable }\" +%s)/60/60/24-16569)/7/6))\" >> $GITHUB_OUTPUT\n  fi\nelif [[ $toolchain =~ ^stable' 'minus' '[0-9]+' 'releases?$ ]]; then\n  echo \"toolchain=1.$((($(date +%s)/60/60/24-16569)/7/6-${toolchain//[^0-9]/}))\" >> $GITHUB_OUTPUT\nelse\n  echo \"toolchain=$toolchain\" >> $GITHUB_OUTPUT\nfi\n[Rust/coverage          ]   \u2699  ::set-output:: toolchain=stable\n[Rust/coverage          ] \u2b50 Run Main : construct rustup command line\necho \"targets=$(for t in ${targets//,/ }; do echo -n ' --target' $t; done)\" >> $GITHUB_OUTPUT\necho \"components=$(for c in ${components//,/ }; do echo -n ' --component' $c; done)\" >> $GITHUB_OUTPUT\necho \"downgrade=\" >> $GITHUB_OUTPUT\n[Rust/cross             ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-parse.sh] user= workdir=\n[Rust/features          ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-parse.sh] user= workdir=\n[Rust/Build fuzz targets]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-parse.sh] user= workdir=\n[Rust/rustfmt           ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-parse.sh] user= workdir=\n[Rust/coverage          ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-flags.sh] user= workdir=\n[Rust/coverage          ]   \u2705  Success - Main : construct rustup command line\necho \"targets=$(for t in ${targets//,/ }; do echo -n ' --target' $t; done)\" >> $GITHUB_OUTPUT\necho \"components=$(for c in ${components//,/ }; do echo -n ' --component' $c; done)\" >> $GITHUB_OUTPUT\necho \"downgrade=\" >> $GITHUB_OUTPUT\n[Rust/features          ]   \u2705  Success - Main : parse toolchain version\nif [[ $toolchain =~ ^stable' '[0-9]+' '(year|month|week|day)s?' 'ago$ ]]; then\n  if [[ Linux == macOS ]]; then\n    echo \"toolchain=1.$((($(date -v-$(sed 's/stable \\([0-9]*\\) \\(.\\).*/\\1\\2/' <<< $toolchain) +%s)/60/60/24-16569)/7/6))\" >> $GITHUB_OUTPUT\n  else\n    echo \"toolchain=1.$((($(date --date \"${toolchain#stable }\" +%s)/60/60/24-16569)/7/6))\" >> $GITHUB_OUTPUT\n  fi\nelif [[ $toolchain =~ ^stable' 'minus' '[0-9]+' 'releases?$ ]]; then\n  echo \"toolchain=1.$((($(date +%s)/60/60/24-16569)/7/6-${toolchain//[^0-9]/}))\" >> $GITHUB_OUTPUT\nelse\n  echo \"toolchain=$toolchain\" >> $GITHUB_OUTPUT\nfi\n[Rust/bench             ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/gimli-rs-gimli] user=0 workdir=\n[Rust/rustfmt           ]   \u2705  Success - Main : parse toolchain version\nif [[ $toolchain =~ ^stable' '[0-9]+' '(year|month|week|day)s?' 'ago$ ]]; then\n  if [[ Linux == macOS ]]; then\n    echo \"toolchain=1.$((($(date -v-$(sed 's/stable \\([0-9]*\\) \\(.\\).*/\\1\\2/' <<< $toolchain) +%s)/60/60/24-16569)/7/6))\" >> $GITHUB_OUTPUT\n  else\n    echo \"toolchain=1.$((($(date --date \"${toolchain#stable }\" +%s)/60/60/24-16569)/7/6))\" >> $GITHUB_OUTPUT\n  fi\nelif [[ $toolchain =~ ^stable' 'minus' '[0-9]+' 'releases?$ ]]; then\n  echo \"toolchain=1.$((($(date +%s)/60/60/24-16569)/7/6-${toolchain//[^0-9]/}))\" >> $GITHUB_OUTPUT\nelse\n  echo \"toolchain=$toolchain\" >> $GITHUB_OUTPUT\nfi\n[Rust/cross             ]   \u2705  Success - Main : parse toolchain version\nif [[ $toolchain =~ ^stable' '[0-9]+' '(year|month|week|day)s?' 'ago$ ]]; then\n  if [[ Linux == macOS ]]; then\n    echo \"toolchain=1.$((($(date -v-$(sed 's/stable \\([0-9]*\\) \\(.\\).*/\\1\\2/' <<< $toolchain) +%s)/60/60/24-16569)/7/6))\" >> $GITHUB_OUTPUT\n  else\n    echo \"toolchain=1.$((($(date --date \"${toolchain#stable }\" +%s)/60/60/24-16569)/7/6))\" >> $GITHUB_OUTPUT\n  fi\nelif [[ $toolchain =~ ^stable' 'minus' '[0-9]+' 'releases?$ ]]; then\n  echo \"toolchain=1.$((($(date +%s)/60/60/24-16569)/7/6-${toolchain//[^0-9]/}))\" >> $GITHUB_OUTPUT\nelse\n  echo \"toolchain=$toolchain\" >> $GITHUB_OUTPUT\nfi\n[Rust/Build fuzz targets]   \u2705  Success - Main : parse toolchain version\nif [[ $toolchain =~ ^stable' '[0-9]+' '(year|month|week|day)s?' 'ago$ ]]; then\n  if [[ Linux == macOS ]]; then\n    echo \"toolchain=1.$((($(date -v-$(sed 's/stable \\([0-9]*\\) \\(.\\).*/\\1\\2/' <<< $toolchain) +%s)/60/60/24-16569)/7/6))\" >> $GITHUB_OUTPUT\n  else\n    echo \"toolchain=1.$((($(date --date \"${toolchain#stable }\" +%s)/60/60/24-16569)/7/6))\" >> $GITHUB_OUTPUT\n  fi\nelif [[ $toolchain =~ ^stable' 'minus' '[0-9]+' 'releases?$ ]]; then\n  echo \"toolchain=1.$((($(date +%s)/60/60/24-16569)/7/6-${toolchain//[^0-9]/}))\" >> $GITHUB_OUTPUT\nelse\n  echo \"toolchain=$toolchain\" >> $GITHUB_OUTPUT\nfi\n[Rust/doc               ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/gimli-rs-gimli] user=0 workdir=\n[Rust/coverage          ]   \u2699  ::set-output:: targets=\n[Rust/coverage          ]   \u2699  ::set-output:: components=\n[Rust/coverage          ]   \u2699  ::set-output:: downgrade=\n[Rust/features          ]   \u2699  ::set-output:: toolchain=stable\n[Rust/bench             ]   \u2601  git clone 'https://github.com/dtolnay/rust-toolchain' # ref=nightly\n[Rust/doc               ]   \u2601  git clone 'https://github.com/dtolnay/rust-toolchain' # ref=stable\n[Rust/cross             ]   \u2699  ::set-output:: toolchain=stable\n[Rust/rustfmt           ]   \u2699  ::set-output:: toolchain=stable\n[Rust/bench             ] \u2b50 Run Pre Install rust nightly\n[Rust/features          ] \u2b50 Run Main : construct rustup command line\necho \"targets=$(for t in ${targets//,/ }; do echo -n ' --target' $t; done)\" >> $GITHUB_OUTPUT\necho \"components=$(for c in ${components//,/ }; do echo -n ' --component' $c; done)\" >> $GITHUB_OUTPUT\necho \"downgrade=\" >> $GITHUB_OUTPUT\n[Rust/coverage          ] \u2b50 Run Main : install rustup if needed\nif ! command -v rustup &>/dev/null; then\n  curl --proto '=https' --tlsv1.2 --retry 10 --retry-connrefused -fsSL \"https://sh.rustup.rs\" | sh -s -- --default-toolchain none -y\n  echo \"${CARGO_HOME:-$HOME/.cargo}/bin\" >> $GITHUB_PATH\nfi\n[Rust/Build fuzz targets]   \u2699  ::set-output:: toolchain=nightly\n[Rust/doc               ] \u2b50 Run Pre Install rust stable\n[Rust/rustfmt           ] \u2b50 Run Main : construct rustup command line\necho \"targets=$(for t in ${targets//,/ }; do echo -n ' --target' $t; done)\" >> $GITHUB_OUTPUT\necho \"components=$(for c in ${components//,/ }; do echo -n ' --component' $c; done)\" >> $GITHUB_OUTPUT\necho \"downgrade=\" >> $GITHUB_OUTPUT\n[Rust/cross             ] \u2b50 Run Main : construct rustup command line\necho \"targets=$(for t in ${targets//,/ }; do echo -n ' --target' $t; done)\" >> $GITHUB_OUTPUT\necho \"components=$(for c in ${components//,/ }; do echo -n ' --component' $c; done)\" >> $GITHUB_OUTPUT\necho \"downgrade=\" >> $GITHUB_OUTPUT\n[Rust/bench             ]   \u2705  Success - Pre Install rust nightly\n[Rust/doc               ]   \u2705  Success - Pre Install rust stable\n[Rust/Build fuzz targets] \u2b50 Run Main : construct rustup command line\necho \"targets=$(for t in ${targets//,/ }; do echo -n ' --target' $t; done)\" >> $GITHUB_OUTPUT\necho \"components=$(for c in ${components//,/ }; do echo -n ' --component' $c; done)\" >> $GITHUB_OUTPUT\necho \"downgrade=\" >> $GITHUB_OUTPUT\n[Rust/features          ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-flags.sh] user= workdir=\n[Rust/coverage          ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-2.sh] user= workdir=\n[Rust/cross             ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-flags.sh] user= workdir=\n[Rust/rustfmt           ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-flags.sh] user= workdir=\n[Rust/bench             ] \u2b50 Run Main actions/checkout@v3\n[Rust/Build fuzz targets]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-flags.sh] user= workdir=\n[Rust/bench             ]   \u2705  Success - Main actions/checkout@v3\n[Rust/doc               ] \u2b50 Run Main actions/checkout@v3\n[Rust/doc               ]   \u2705  Success - Main actions/checkout@v3\n[Rust/bench             ] \u2b50 Run Main Install rust nightly\n[Rust/bench             ]   \ud83d\udc33  docker cp src=/home/andre-silva/.cache/act/dtolnay-rust-toolchain@nightly/ dst=/var/run/act/actions/dtolnay-rust-toolchain@nightly/\n[Rust/bench             ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /var/run/act/actions/dtolnay-rust-toolchain@nightly/] user=0 workdir=\n[Rust/doc               ] \u2b50 Run Main Install rust stable\n[Rust/doc               ]   \ud83d\udc33  docker cp src=/home/andre-silva/.cache/act/dtolnay-rust-toolchain@stable/ dst=/var/run/act/actions/dtolnay-rust-toolchain@stable/\n[Rust/doc               ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /var/run/act/actions/dtolnay-rust-toolchain@stable/] user=0 workdir=\n[Rust/coverage          ]   | OCI runtime exec failed: exec failed: unable to start container process: error executing setns process: exit status 1: unknown\r\n[Rust/cross             ]   | OCI runtime exec failed: exec failed: unable to start container process: error executing setns process: exit status 1: unknown\r\n[Rust/coverage          ]   \u274c  Failure - Main : install rustup if needed\nif ! command -v rustup &>/dev/null; then\n  curl --proto '=https' --tlsv1.2 --retry 10 --retry-connrefused -fsSL \"https://sh.rustup.rs\" | sh -s -- --default-toolchain none -y\n  echo \"${CARGO_HOME:-$HOME/.cargo}/bin\" >> $GITHUB_PATH\nfi\n[Rust/cross             ]   \u274c  Failure - Main : construct rustup command line\necho \"targets=$(for t in ${targets//,/ }; do echo -n ' --target' $t; done)\" >> $GITHUB_OUTPUT\necho \"components=$(for c in ${components//,/ }; do echo -n ' --component' $c; done)\" >> $GITHUB_OUTPUT\necho \"downgrade=\" >> $GITHUB_OUTPUT\n[Rust/rustfmt           ]   | OCI runtime exec failed: exec failed: unable to start container process: error executing setns process: exit status 1: unknown\r\n[Rust/rustfmt           ]   \u274c  Failure - Main : construct rustup command line\necho \"targets=$(for t in ${targets//,/ }; do echo -n ' --target' $t; done)\" >> $GITHUB_OUTPUT\necho \"components=$(for c in ${components//,/ }; do echo -n ' --component' $c; done)\" >> $GITHUB_OUTPUT\necho \"downgrade=\" >> $GITHUB_OUTPUT\n[Rust/doc               ]   | OCI runtime exec failed: exec failed: unable to start container process: error executing setns process: exit status 1: unknown\r\n[Rust/features          ]   | OCI runtime exec failed: exec failed: unable to start container process: error executing setns process: exit status 1: unknown\r\n[Rust/features          ]   \u274c  Failure - Main : construct rustup command line\necho \"targets=$(for t in ${targets//,/ }; do echo -n ' --target' $t; done)\" >> $GITHUB_OUTPUT\necho \"components=$(for c in ${components//,/ }; do echo -n ' --component' $c; done)\" >> $GITHUB_OUTPUT\necho \"downgrade=\" >> $GITHUB_OUTPUT\n[Rust/Build fuzz targets]   \u2705  Success - Main : construct rustup command line\necho \"targets=$(for t in ${targets//,/ }; do echo -n ' --target' $t; done)\" >> $GITHUB_OUTPUT\necho \"components=$(for c in ${components//,/ }; do echo -n ' --component' $c; done)\" >> $GITHUB_OUTPUT\necho \"downgrade=\" >> $GITHUB_OUTPUT\n[Rust/doc               ] \u2b50 Run Main : parse toolchain version\nif [[ $toolchain =~ ^stable' '[0-9]+' '(year|month|week|day)s?' 'ago$ ]]; then\n  if [[ Linux == macOS ]]; then\n    echo \"toolchain=1.$((($(date -v-$(sed 's/stable \\([0-9]*\\) \\(.\\).*/\\1\\2/' <<< $toolchain) +%s)/60/60/24-16569)/7/6))\" >> $GITHUB_OUTPUT\n  else\n    echo \"toolchain=1.$((($(date --date \"${toolchain#stable }\" +%s)/60/60/24-16569)/7/6))\" >> $GITHUB_OUTPUT\n  fi\nelif [[ $toolchain =~ ^stable' 'minus' '[0-9]+' 'releases?$ ]]; then\n  echo \"toolchain=1.$((($(date +%s)/60/60/24-16569)/7/6-${toolchain//[^0-9]/}))\" >> $GITHUB_OUTPUT\nelse\n  echo \"toolchain=$toolchain\" >> $GITHUB_OUTPUT\nfi\n[Rust/bench             ] \u2b50 Run Main : parse toolchain version\nif [[ $toolchain =~ ^stable' '[0-9]+' '(year|month|week|day)s?' 'ago$ ]]; then\n  if [[ Linux == macOS ]]; then\n    echo \"toolchain=1.$((($(date -v-$(sed 's/stable \\([0-9]*\\) \\(.\\).*/\\1\\2/' <<< $toolchain) +%s)/60/60/24-16569)/7/6))\" >> $GITHUB_OUTPUT\n  else\n    echo \"toolchain=1.$((($(date --date \"${toolchain#stable }\" +%s)/60/60/24-16569)/7/6))\" >> $GITHUB_OUTPUT\n  fi\nelif [[ $toolchain =~ ^stable' 'minus' '[0-9]+' 'releases?$ ]]; then\n  echo \"toolchain=1.$((($(date +%s)/60/60/24-16569)/7/6-${toolchain//[^0-9]/}))\" >> $GITHUB_OUTPUT\nelse\n  echo \"toolchain=$toolchain\" >> $GITHUB_OUTPUT\nfi\n[Rust/rustfmt           ] Error response from daemon: Could not find the file /var/run/act/workflow/pathcmd.txt in container 4ffd3b8e59721addb356ef063207e3ed21053cccf9aad6a2d060c26d69b5a8b2\n[Rust/coverage          ] Error response from daemon: Could not find the file /var/run/act/workflow/pathcmd.txt in container 5404f27584d09c5ea1b33c5c3e0d4cc7e556b3ef20348022ba5819a87c3dbc32\n[Rust/features          ] Error response from daemon: Could not find the file /var/run/act/workflow/pathcmd.txt in container a1c774aea96c6d55a0038bb4de50a1f9f154c68ed980da5c9bdfee3410b85771\n[Rust/doc               ]   \u274c  Failure - Main : parse toolchain version\nif [[ $toolchain =~ ^stable' '[0-9]+' '(year|month|week|day)s?' 'ago$ ]]; then\n  if [[ Linux == macOS ]]; then\n    echo \"toolchain=1.$((($(date -v-$(sed 's/stable \\([0-9]*\\) \\(.\\).*/\\1\\2/' <<< $toolchain) +%s)/60/60/24-16569)/7/6))\" >> $GITHUB_OUTPUT\n  else\n    echo \"toolchain=1.$((($(date --date \"${toolchain#stable }\" +%s)/60/60/24-16569)/7/6))\" >> $GITHUB_OUTPUT\n  fi\nelif [[ $toolchain =~ ^stable' 'minus' '[0-9]+' 'releases?$ ]]; then\n  echo \"toolchain=1.$((($(date +%s)/60/60/24-16569)/7/6-${toolchain//[^0-9]/}))\" >> $GITHUB_OUTPUT\nelse\n  echo \"toolchain=$toolchain\" >> $GITHUB_OUTPUT\nfi\n[Rust/doc               ] Error response from daemon: No such container: adda43f124662cb903e237a89a2fd6d68dafc6b5759a76360ef2f977cfad3d33\n[Rust/Build fuzz targets]   \u2699  ::set-output:: components=\n[Rust/Build fuzz targets]   \u2699  ::set-output:: downgrade=\n[Rust/Build fuzz targets]   \u2699  ::set-output:: targets=\n[Rust/bench             ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-parse.sh] user= workdir=\n[Rust/coverage          ]   \u2699  ::set-output:: cachekey=\n[Rust/coverage          ]   \u2699  ::set-output:: name=stable\n[Rust/coverage          ]   \u274c  Failure - Main Install rust stable\n[Rust/coverage          ] Error response from daemon: No such container: 5404f27584d09c5ea1b33c5c3e0d4cc7e556b3ef20348022ba5819a87c3dbc32\n[Rust/rustfmt           ]   \u2699  ::set-output:: cachekey=\n[Rust/rustfmt           ]   \u2699  ::set-output:: name=stable\n[Rust/rustfmt           ]   \u274c  Failure - Main Install rust stable\n[Rust/rustfmt           ] Error response from daemon: No such container: 4ffd3b8e59721addb356ef063207e3ed21053cccf9aad6a2d060c26d69b5a8b2\n[Rust/features          ]   \u2699  ::set-output:: cachekey=\n[Rust/features          ]   \u2699  ::set-output:: name=stable\n[Rust/features          ]   \u274c  Failure - Main Install rust stable\n[Rust/features          ] Error response from daemon: No such container: a1c774aea96c6d55a0038bb4de50a1f9f154c68ed980da5c9bdfee3410b85771\n[Rust/rustfmt           ] \u2b50 Run Post Install rust stable\n[Rust/rustfmt           ]   \ud83d\udc33  docker cp src=/home/andre-silva/.cache/act/dtolnay-rust-toolchain@stable/ dst=/var/run/act/actions/dtolnay-rust-toolchain@stable/\n[Rust/rustfmt           ]   \u274c  Failure - Post Install rust stable\n[Rust/rustfmt           ] failed to remove container: Error response from daemon: No such container: 4ffd3b8e59721addb356ef063207e3ed21053cccf9aad6a2d060c26d69b5a8b2\n[Rust/rustfmt           ] \ud83c\udfc1  Job failed\n[Rust/doc               ]   \u2699  ::set-output:: cachekey=\n[Rust/doc               ]   \u2699  ::set-output:: name=\n[Rust/doc               ]   \u274c  Failure - Main Install rust stable\n[Rust/doc               ] Error response from daemon: No such container: adda43f124662cb903e237a89a2fd6d68dafc6b5759a76360ef2f977cfad3d33\n[Rust/coverage          ] \u2b50 Run Post Install rust stable\n[Rust/coverage          ]   \ud83d\udc33  docker cp src=/home/andre-silva/.cache/act/dtolnay-rust-toolchain@stable/ dst=/var/run/act/actions/dtolnay-rust-toolchain@stable/\n[Rust/coverage          ]   \u274c  Failure - Post Install rust stable\n[Rust/coverage          ] failed to remove container: Error response from daemon: No such container: 5404f27584d09c5ea1b33c5c3e0d4cc7e556b3ef20348022ba5819a87c3dbc32\n[Rust/coverage          ] \ud83c\udfc1  Job failed\n[Rust/Build fuzz targets] \u2b50 Run Main : install rustup if needed\nif ! command -v rustup &>/dev/null; then\n  curl --proto '=https' --tlsv1.2 --retry 10 --retry-connrefused -fsSL \"https://sh.rustup.rs\" | sh -s -- --default-toolchain none -y\n  echo \"${CARGO_HOME:-$HOME/.cargo}/bin\" >> $GITHUB_PATH\nfi\n[Rust/doc               ] \u2b50 Run Post Install rust stable\n[Rust/doc               ]   \ud83d\udc33  docker cp src=/home/andre-silva/.cache/act/dtolnay-rust-toolchain@stable/ dst=/var/run/act/actions/dtolnay-rust-toolchain@stable/\n[Rust/doc               ]   \u274c  Failure - Post Install rust stable\n[Rust/doc               ] failed to remove container: Error response from daemon: No such container: adda43f124662cb903e237a89a2fd6d68dafc6b5759a76360ef2f977cfad3d33\n[Rust/doc               ] \ud83c\udfc1  Job failed\n[Rust/features          ] \u2b50 Run Post Install rust stable\n[Rust/features          ]   \ud83d\udc33  docker cp src=/home/andre-silva/.cache/act/dtolnay-rust-toolchain@stable/ dst=/var/run/act/actions/dtolnay-rust-toolchain@stable/\n[Rust/features          ]   \u274c  Failure - Post Install rust stable\n[Rust/features          ] failed to remove container: Error response from daemon: No such container: a1c774aea96c6d55a0038bb4de50a1f9f154c68ed980da5c9bdfee3410b85771\n[Rust/features          ] \ud83c\udfc1  Job failed\n[Rust/cross             ] Error response from daemon: Could not find the file /var/run/act/workflow/pathcmd.txt in container 53b5bfa8caaf0da33bebf19951dfb2de5cc41d5359dd11e753d36de91d8475b5\n[Rust/bench             ]   \u2705  Success - Main : parse toolchain version\nif [[ $toolchain =~ ^stable' '[0-9]+' '(year|month|week|day)s?' 'ago$ ]]; then\n  if [[ Linux == macOS ]]; then\n    echo \"toolchain=1.$((($(date -v-$(sed 's/stable \\([0-9]*\\) \\(.\\).*/\\1\\2/' <<< $toolchain) +%s)/60/60/24-16569)/7/6))\" >> $GITHUB_OUTPUT\n  else\n    echo \"toolchain=1.$((($(date --date \"${toolchain#stable }\" +%s)/60/60/24-16569)/7/6))\" >> $GITHUB_OUTPUT\n  fi\nelif [[ $toolchain =~ ^stable' 'minus' '[0-9]+' 'releases?$ ]]; then\n  echo \"toolchain=1.$((($(date +%s)/60/60/24-16569)/7/6-${toolchain//[^0-9]/}))\" >> $GITHUB_OUTPUT\nelse\n  echo \"toolchain=$toolchain\" >> $GITHUB_OUTPUT\nfi\n[Rust/Build fuzz targets]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-2.sh] user= workdir=\n[Rust/cross             ]   \u2699  ::set-output:: cachekey=\n[Rust/cross             ]   \u2699  ::set-output:: name=stable\n[Rust/cross             ]   \u274c  Failure - Main Install rust stable\n[Rust/cross             ] Error response from daemon: No such container: 53b5bfa8caaf0da33bebf19951dfb2de5cc41d5359dd11e753d36de91d8475b5\n[Rust/bench             ]   \u2699  ::set-output:: toolchain=nightly\n[Rust/cross             ] \u2b50 Run Post Install rust stable\n[Rust/cross             ]   \ud83d\udc33  docker cp src=/home/andre-silva/.cache/act/dtolnay-rust-toolchain@stable/ dst=/var/run/act/actions/dtolnay-rust-toolchain@stable/\n[Rust/cross             ]   \u274c  Failure - Post Install rust stable\n[Rust/cross             ] failed to remove container: Error response from daemon: No such container: 53b5bfa8caaf0da33bebf19951dfb2de5cc41d5359dd11e753d36de91d8475b5\n[Rust/cross             ] \ud83c\udfc1  Job failed\n[Rust/bench             ] \u2b50 Run Main : construct rustup command line\necho \"targets=$(for t in ${targets//,/ }; do echo -n ' --target' $t; done)\" >> $GITHUB_OUTPUT\necho \"components=$(for c in ${components//,/ }; do echo -n ' --component' $c; done)\" >> $GITHUB_OUTPUT\necho \"downgrade=\" >> $GITHUB_OUTPUT\n[Rust/bench             ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-flags.sh] user= workdir=\n[Rust/bench             ]   \u2705  Success - Main : construct rustup command line\necho \"targets=$(for t in ${targets//,/ }; do echo -n ' --target' $t; done)\" >> $GITHUB_OUTPUT\necho \"components=$(for c in ${components//,/ }; do echo -n ' --component' $c; done)\" >> $GITHUB_OUTPUT\necho \"downgrade=\" >> $GITHUB_OUTPUT\n[Rust/Build fuzz targets]   | info: downloading installer\n[Rust/Build fuzz targets]   | info: profile set to 'default'\n[Rust/Build fuzz targets]   | info: default host triple is x86_64-unknown-linux-gnu\n[Rust/Build fuzz targets]   | info: skipping toolchain installation\n[Rust/Build fuzz targets]   | \n[Rust/Build fuzz targets]   | \n[Rust/Build fuzz targets]   | Rust is installed now. Great!\n[Rust/Build fuzz targets]   | \n[Rust/Build fuzz targets]   | To get started you may need to restart your current shell.\n[Rust/Build fuzz targets]   | This would reload your PATH environment variable to include\n[Rust/Build fuzz targets]   | Cargo's bin directory ($HOME/.cargo/bin).\n[Rust/Build fuzz targets]   | \n[Rust/Build fuzz targets]   | To configure your current shell, run:\n[Rust/Build fuzz targets]   | source \"$HOME/.cargo/env\"\n[Rust/Build fuzz targets]   \u2705  Success - Main : install rustup if needed\nif ! command -v rustup &>/dev/null; then\n  curl --proto '=https' --tlsv1.2 --retry 10 --retry-connrefused -fsSL \"https://sh.rustup.rs\" | sh -s -- --default-toolchain none -y\n  echo \"${CARGO_HOME:-$HOME/.cargo}/bin\" >> $GITHUB_PATH\nfi\n[Rust/bench             ]   \u2699  ::set-output:: targets=\n[Rust/bench             ]   \u2699  ::set-output:: components=\n[Rust/bench             ]   \u2699  ::set-output:: downgrade=\n[Rust/bench             ] \u2b50 Run Main : install rustup if needed\nif ! command -v rustup &>/dev/null; then\n  curl --proto '=https' --tlsv1.2 --retry 10 --retry-connrefused -fsSL \"https://sh.rustup.rs\" | sh -s -- --default-toolchain none -y\n  echo \"${CARGO_HOME:-$HOME/.cargo}/bin\" >> $GITHUB_PATH\nfi\n[Rust/Build fuzz targets]   \u2699  ::add-path:: /home/runneradmin/.cargo/bin\n[Rust/Build fuzz targets] \u2b50 Run Main rustup toolchain install nightly\n[Rust/bench             ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-2.sh] user= workdir=\n[Rust/Build fuzz targets]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-3.sh] user= workdir=\n[Rust/bench             ]   | info: downloading installer\n[Rust/Build fuzz targets]   | info: syncing channel updates for 'nightly-x86_64-unknown-linux-gnu'\n[Rust/Build fuzz targets]   | info: latest update on 2023-05-30, rust version 1.72.0-nightly (498553fc0 2023-05-29)\n[Rust/Build fuzz targets]   | info: downloading component 'cargo'\n[Rust/Build fuzz targets]   | info: downloading component 'rust-std'\n[Rust/bench             ]   | info: profile set to 'default'\n[Rust/bench             ]   | info: default host triple is x86_64-unknown-linux-gnu\n[Rust/bench             ]   | info: skipping toolchain installation\n[Rust/bench             ]   | \n[Rust/bench             ]   | \n[Rust/bench             ]   | Rust is installed now. Great!\n[Rust/bench             ]   | \n[Rust/bench             ]   | To get started you may need to restart your current shell.\n[Rust/bench             ]   | This would reload your PATH environment variable to include\n[Rust/bench             ]   | Cargo's bin directory ($HOME/.cargo/bin).\n[Rust/bench             ]   | \n[Rust/bench             ]   | To configure your current shell, run:\n[Rust/bench             ]   | source \"$HOME/.cargo/env\"\n[Rust/bench             ]   \u2705  Success - Main : install rustup if needed\nif ! command -v rustup &>/dev/null; then\n  curl --proto '=https' --tlsv1.2 --retry 10 --retry-connrefused -fsSL \"https://sh.rustup.rs\" | sh -s -- --default-toolchain none -y\n  echo \"${CARGO_HOME:-$HOME/.cargo}/bin\" >> $GITHUB_PATH\nfi\n[Rust/Build fuzz targets]   | info: downloading component 'rustc'\n[Rust/Build fuzz targets]   | info: installing component 'cargo'\n[Rust/bench             ]   \u2699  ::add-path:: /home/runneradmin/.cargo/bin\n[Rust/bench             ] \u2b50 Run Main rustup toolchain install nightly\n[Rust/Build fuzz targets]   | info: installing component 'rust-std'\n[Rust/bench             ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-3.sh] user= workdir=\n[Rust/Build fuzz targets]   | info: installing component 'rustc'\n[Rust/bench             ]   | info: syncing channel updates for 'nightly-x86_64-unknown-linux-gnu'\n[Rust/bench             ]   | info: latest update on 2023-05-30, rust version 1.72.0-nightly (498553fc0 2023-05-29)\n[Rust/bench             ]   | info: downloading component 'cargo'\n[Rust/bench             ]   | info: downloading component 'rust-std'\n[Rust/Build fuzz targets]   | \n[Rust/Build fuzz targets]   |   nightly-x86_64-unknown-linux-gnu installed - rustc 1.72.0-nightly (498553fc0 2023-05-29)\n[Rust/Build fuzz targets]   | \n[Rust/Build fuzz targets]   | info: default toolchain set to 'nightly-x86_64-unknown-linux-gnu'\n[Rust/Build fuzz targets]   \u2705  Success - Main rustup toolchain install nightly\n[Rust/bench             ]   | info: downloading component 'rustc'\n[Rust/Build fuzz targets] \u2b50 Run Main rustup default nightly\n[Rust/Build fuzz targets]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-4.sh] user= workdir=\n[Rust/bench             ]   | info: installing component 'cargo'\n[Rust/bench             ]   | info: installing component 'rust-std'\n[Rust/bench             ]   | info: installing component 'rustc'\n[Rust/bench             ]   | \n[Rust/bench             ]   |   nightly-x86_64-unknown-linux-gnu installed - rustc 1.72.0-nightly (498553fc0 2023-05-29)\n[Rust/bench             ]   | \n[Rust/bench             ]   | info: default toolchain set to 'nightly-x86_64-unknown-linux-gnu'\n[Rust/bench             ]   \u2705  Success - Main rustup toolchain install nightly\n[Rust/bench             ] \u2b50 Run Main rustup default nightly\n[Rust/bench             ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-4.sh] user= workdir=\n[Rust/Build fuzz targets]   | info: using existing install for 'nightly-x86_64-unknown-linux-gnu'\n[Rust/bench             ]   | info: using existing install for 'nightly-x86_64-unknown-linux-gnu'\n[Rust/Build fuzz targets]   | info: default toolchain set to 'nightly-x86_64-unknown-linux-gnu'\n[Rust/Build fuzz targets]   | \n[Rust/bench             ]   | info: default toolchain set to 'nightly-x86_64-unknown-linux-gnu'\n[Rust/bench             ]   | \n[Rust/Build fuzz targets]   |   nightly-x86_64-unknown-linux-gnu unchanged - rustc 1.72.0-nightly (498553fc0 2023-05-29)\n[Rust/Build fuzz targets]   | \n[Rust/bench             ]   |   nightly-x86_64-unknown-linux-gnu unchanged - rustc 1.72.0-nightly (498553fc0 2023-05-29)\n[Rust/bench             ]   | \n[Rust/Build fuzz targets]   \u2705  Success - Main rustup default nightly\n[Rust/bench             ]   \u2705  Success - Main rustup default nightly\n[Rust/Build fuzz targets] \u2b50 Run Main : create cachekey\nDATE=$(rustc +nightly --version --verbose | sed -ne 's/^commit-date: \\(20[0-9][0-9]\\)-\\([01][0-9]\\)-\\([0-3][0-9]\\)$/\\1\\2\\3/p')\nHASH=$(rustc +nightly --version --verbose | sed -ne 's/^commit-hash: //p')\necho \"cachekey=$(echo $DATE$HASH | head -c12)\" >> $GITHUB_OUTPUT\n[Rust/bench             ] \u2b50 Run Main : create cachekey\nDATE=$(rustc +nightly --version --verbose | sed -ne 's/^commit-date: \\(20[0-9][0-9]\\)-\\([01][0-9]\\)-\\([0-3][0-9]\\)$/\\1\\2\\3/p')\nHASH=$(rustc +nightly --version --verbose | sed -ne 's/^commit-hash: //p')\necho \"cachekey=$(echo $DATE$HASH | head -c12)\" >> $GITHUB_OUTPUT\n[Rust/Build fuzz targets]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-rustc-version.sh] user= workdir=\n[Rust/bench             ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-rustc-version.sh] user= workdir=\n[Rust/bench             ]   \u2705  Success - Main : create cachekey\nDATE=$(rustc +nightly --version --verbose | sed -ne 's/^commit-date: \\(20[0-9][0-9]\\)-\\([01][0-9]\\)-\\([0-3][0-9]\\)$/\\1\\2\\3/p')\nHASH=$(rustc +nightly --version --verbose | sed -ne 's/^commit-hash: //p')\necho \"cachekey=$(echo $DATE$HASH | head -c12)\" >> $GITHUB_OUTPUT\n[Rust/Build fuzz targets]   \u2705  Success - Main : create cachekey\nDATE=$(rustc +nightly --version --verbose | sed -ne 's/^commit-date: \\(20[0-9][0-9]\\)-\\([01][0-9]\\)-\\([0-3][0-9]\\)$/\\1\\2\\3/p')\nHASH=$(rustc +nightly --version --verbose | sed -ne 's/^commit-hash: //p')\necho \"cachekey=$(echo $DATE$HASH | head -c12)\" >> $GITHUB_OUTPUT\n[Rust/Build fuzz targets]   \u2699  ::set-output:: cachekey=202305294985\n[Rust/bench             ]   \u2699  ::set-output:: cachekey=202305294985\n[Rust/Build fuzz targets] \u2b50 Run Main : disable incremental compilation\nif [ -z \"${CARGO_INCREMENTAL+set}\" ]; then\n  echo CARGO_INCREMENTAL=0 >> $GITHUB_ENV\nfi\n[Rust/bench             ] \u2b50 Run Main : disable incremental compilation\nif [ -z \"${CARGO_INCREMENTAL+set}\" ]; then\n  echo CARGO_INCREMENTAL=0 >> $GITHUB_ENV\nfi\n[Rust/Build fuzz targets]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-6.sh] user= workdir=\n[Rust/bench             ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-6.sh] user= workdir=\n[Rust/Build fuzz targets]   \u2705  Success - Main : disable incremental compilation\nif [ -z \"${CARGO_INCREMENTAL+set}\" ]; then\n  echo CARGO_INCREMENTAL=0 >> $GITHUB_ENV\nfi\n[Rust/bench             ]   \u2705  Success - Main : disable incremental compilation\nif [ -z \"${CARGO_INCREMENTAL+set}\" ]; then\n  echo CARGO_INCREMENTAL=0 >> $GITHUB_ENV\nfi\n[Rust/Build fuzz targets]   \u2699  ::set-env:: CARGO_INCREMENTAL=0\n[Rust/bench             ]   \u2699  ::set-env:: CARGO_INCREMENTAL=0\n[Rust/Build fuzz targets] \u2b50 Run Main : enable colors in Cargo output\nif [ -z \"${CARGO_TERM_COLOR+set}\" ]; then\n  echo CARGO_TERM_COLOR=always >> $GITHUB_ENV\nfi\n[Rust/bench             ] \u2b50 Run Main : enable colors in Cargo output\nif [ -z \"${CARGO_TERM_COLOR+set}\" ]; then\n  echo CARGO_TERM_COLOR=always >> $GITHUB_ENV\nfi\n[Rust/Build fuzz targets]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-7.sh] user= workdir=\n[Rust/Build fuzz targets]   \u2705  Success - Main : enable colors in Cargo output\nif [ -z \"${CARGO_TERM_COLOR+set}\" ]; then\n  echo CARGO_TERM_COLOR=always >> $GITHUB_ENV\nfi\n[Rust/Build fuzz targets]   \u2699  ::set-env:: CARGO_TERM_COLOR=always\n[Rust/bench             ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-7.sh] user= workdir=\n[Rust/bench             ]   \u2705  Success - Main : enable colors in Cargo output\nif [ -z \"${CARGO_TERM_COLOR+set}\" ]; then\n  echo CARGO_TERM_COLOR=always >> $GITHUB_ENV\nfi\n[Rust/bench             ]   \u2699  ::set-env:: CARGO_TERM_COLOR=always\n[Rust/Build fuzz targets] \u2b50 Run Main : enable Cargo sparse registry\n# except on 1.66 and 1.67, on which it is unstable\nif [ -z \"${CARGO_REGISTRIES_CRATES_IO_PROTOCOL+set}\" -o -f \"/tmp\"/.implicit_cargo_registries_crates_io_protocol ]; then\n  touch \"/tmp\"/.implicit_cargo_registries_crates_io_protocol || true\n  if rustc +nightly --version --verbose | (! grep -q '^release: 1\\.6[67]\\.'); then\n    echo CARGO_REGISTRIES_CRATES_IO_PROTOCOL=sparse >> $GITHUB_ENV\n  else\n    echo CARGO_REGISTRIES_CRATES_IO_PROTOCOL=git >> $GITHUB_ENV\n  fi\nfi\n[Rust/bench             ] \u2b50 Run Main : enable Cargo sparse registry\n# except on 1.66 and 1.67, on which it is unstable\nif [ -z \"${CARGO_REGISTRIES_CRATES_IO_PROTOCOL+set}\" -o -f \"/tmp\"/.implicit_cargo_registries_crates_io_protocol ]; then\n  touch \"/tmp\"/.implicit_cargo_registries_crates_io_protocol || true\n  if rustc +nightly --version --verbose | (! grep -q '^release: 1\\.6[67]\\.'); then\n    echo CARGO_REGISTRIES_CRATES_IO_PROTOCOL=sparse >> $GITHUB_ENV\n  else\n    echo CARGO_REGISTRIES_CRATES_IO_PROTOCOL=git >> $GITHUB_ENV\n  fi\nfi\n[Rust/Build fuzz targets]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-8.sh] user= workdir=\n[Rust/bench             ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-8.sh] user= workdir=\n[Rust/Build fuzz targets]   \u2705  Success - Main : enable Cargo sparse registry\n# except on 1.66 and 1.67, on which it is unstable\nif [ -z \"${CARGO_REGISTRIES_CRATES_IO_PROTOCOL+set}\" -o -f \"/tmp\"/.implicit_cargo_registries_crates_io_protocol ]; then\n  touch \"/tmp\"/.implicit_cargo_registries_crates_io_protocol || true\n  if rustc +nightly --version --verbose | (! grep -q '^release: 1\\.6[67]\\.'); then\n    echo CARGO_REGISTRIES_CRATES_IO_PROTOCOL=sparse >> $GITHUB_ENV\n  else\n    echo CARGO_REGISTRIES_CRATES_IO_PROTOCOL=git >> $GITHUB_ENV\n  fi\nfi\n[Rust/bench             ]   \u2705  Success - Main : enable Cargo sparse registry\n# except on 1.66 and 1.67, on which it is unstable\nif [ -z \"${CARGO_REGISTRIES_CRATES_IO_PROTOCOL+set}\" -o -f \"/tmp\"/.implicit_cargo_registries_crates_io_protocol ]; then\n  touch \"/tmp\"/.implicit_cargo_registries_crates_io_protocol || true\n  if rustc +nightly --version --verbose | (! grep -q '^release: 1\\.6[67]\\.'); then\n    echo CARGO_REGISTRIES_CRATES_IO_PROTOCOL=sparse >> $GITHUB_ENV\n  else\n    echo CARGO_REGISTRIES_CRATES_IO_PROTOCOL=git >> $GITHUB_ENV\n  fi\nfi\n[Rust/bench             ]   \u2699  ::set-env:: CARGO_REGISTRIES_CRATES_IO_PROTOCOL=sparse\n[Rust/Build fuzz targets]   \u2699  ::set-env:: CARGO_REGISTRIES_CRATES_IO_PROTOCOL=sparse\n[Rust/Build fuzz targets] \u2b50 Run Main rustc +nightly --version --verbose\n[Rust/bench             ] \u2b50 Run Main rustc +nightly --version --verbose\n[Rust/Build fuzz targets]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-9.sh] user= workdir=\n[Rust/bench             ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-9.sh] user= workdir=\n[Rust/bench             ]   \u274c  Failure - Main rustc +nightly --version --verbose\n[Rust/Build fuzz targets]   \u274c  Failure - Main rustc +nightly --version --verbose\n[Rust/Build fuzz targets] Get \"http://%2Fvar%2Frun%2Fdocker.sock/v1.41/containers/0ce19ba6a46f7d3a84b0935074fa49a498dcfbfa0f6f2a7959d51c3afeb29578/archive?path=%2Fvar%2Frun%2Fact%2Fworkflow%2Fpathcmd.txt\": context canceled\n[Rust/bench             ] Get \"http://%2Fvar%2Frun%2Fdocker.sock/v1.41/containers/22cdd5db3de99cb98a0720c035e83afc2c8fdd35d65b0a3d5aaf8dee47a56483/archive?path=%2Fvar%2Frun%2Fact%2Fworkflow%2Fpathcmd.txt\": context canceled\n[Rust/Build fuzz targets]   \u2699  ::set-output:: cachekey=202305294985\n[Rust/Build fuzz targets]   \u2699  ::set-output:: name=nightly\n[Rust/Build fuzz targets]   \u274c  Failure - Main Install rust nightly\n[Rust/Build fuzz targets] Get \"http://%2Fvar%2Frun%2Fdocker.sock/v1.41/containers/0ce19ba6a46f7d3a84b0935074fa49a498dcfbfa0f6f2a7959d51c3afeb29578/archive?path=%2Fvar%2Frun%2Fact%2Fworkflow%2Fpathcmd.txt\": context canceled\n[Rust/bench             ]   \u2699  ::set-output:: cachekey=202305294985\n[Rust/bench             ]   \u2699  ::set-output:: name=nightly\n[Rust/bench             ]   \u274c  Failure - Main Install rust nightly\n[Rust/bench             ] Get \"http://%2Fvar%2Frun%2Fdocker.sock/v1.41/containers/22cdd5db3de99cb98a0720c035e83afc2c8fdd35d65b0a3d5aaf8dee47a56483/archive?path=%2Fvar%2Frun%2Fact%2Fworkflow%2Fpathcmd.txt\": context canceled\n[Rust/bench             ] \u2b50 Run Post Install rust nightly\n[Rust/Build fuzz targets] \u2b50 Run Post Install rust nightly\n[Rust/Build fuzz targets]   \ud83d\udc33  docker cp src=/home/andre-silva/.cache/act/dtolnay-rust-toolchain@nightly/ dst=/var/run/act/actions/dtolnay-rust-toolchain@nightly/\n[Rust/bench             ]   \ud83d\udc33  docker cp src=/home/andre-silva/.cache/act/dtolnay-rust-toolchain@nightly/ dst=/var/run/act/actions/dtolnay-rust-toolchain@nightly/\n[Rust/Build fuzz targets]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /var/run/act/actions/dtolnay-rust-toolchain@nightly/] user=0 workdir=\n[Rust/bench             ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /var/run/act/actions/dtolnay-rust-toolchain@nightly/] user=0 workdir=\n[Rust/Build fuzz targets]   \u2705  Success - Post Install rust nightly\n[Rust/bench             ]   \u2705  Success - Post Install rust nightly\n[Rust/Build fuzz targets] \ud83c\udfc1  Job succeeded\n[Rust/bench             ] \ud83c\udfc1  Job succeeded\n",
    "actions_stderr": "Error: context canceled\n"
}