{
    "repository": "google/shaderc-rs",
    "clone_url": "https://github.com/google/shaderc-rs.git",
    "timestamp": "2023-05-30T09:18:31.515452Z",
    "clone_success": true,
    "number of actions": 2,
    "number_of_test_actions": 1,
    "actions_successful": false,
    "actions_stdout": "[Build and Test/Windows (Stable, MSVC, static CRT)  ] \ud83d\ude80  Start image=crawlergpt:latest\n[Build and Test/Windows (Stable, MSVC)              ] \ud83d\ude80  Start image=crawlergpt:latest\n[Build and Test/Windows (Stable, GNU)               ] \ud83d\ude80  Start image=crawlergpt:latest\n[Build and Test/macOS (Stable)                      ] \ud83d\ude80  Start image=crawlergpt:latest\n[Build and Test/Linux (Nightly)                     ] \ud83d\ude80  Start image=crawlergpt:latest\n[Build and Test/Linux (Stable)                      ] \ud83d\ude80  Start image=crawlergpt:latest\n[Build and Test/iOS (Stable, ARM, Cross Compilation)] \ud83d\ude80  Start image=crawlergpt:latest\n[Build and Test/Linux (Stable)                      ]   \ud83d\udc33  docker pull image=crawlergpt:latest platform= username= forcePull=false\n[Build and Test/Linux (Nightly)                     ]   \ud83d\udc33  docker pull image=crawlergpt:latest platform= username= forcePull=false\n[Build and Test/Windows (Stable, MSVC)              ]   \ud83d\udc33  docker pull image=crawlergpt:latest platform= username= forcePull=false\n[Build and Test/Windows (Stable, GNU)               ]   \ud83d\udc33  docker pull image=crawlergpt:latest platform= username= forcePull=false\n[Build and Test/iOS (Stable, ARM, Cross Compilation)]   \ud83d\udc33  docker pull image=crawlergpt:latest platform= username= forcePull=false\n[Build and Test/macOS (Stable)                      ]   \ud83d\udc33  docker pull image=crawlergpt:latest platform= username= forcePull=false\n[Build and Test/Windows (Stable, MSVC, static CRT)  ]   \ud83d\udc33  docker pull image=crawlergpt:latest platform= username= forcePull=false\n[Build and Test/Linux (Stable)                      ]   \ud83d\udc33  docker create image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[Build and Test/Linux (Nightly)                     ]   \ud83d\udc33  docker create image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[Build and Test/Windows (Stable, MSVC, static CRT)  ]   \ud83d\udc33  docker create image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[Build and Test/macOS (Stable)                      ]   \ud83d\udc33  docker create image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[Build and Test/Windows (Stable, GNU)               ]   \ud83d\udc33  docker create image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[Build and Test/Windows (Stable, MSVC)              ]   \ud83d\udc33  docker create image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[Build and Test/iOS (Stable, ARM, Cross Compilation)]   \ud83d\udc33  docker create image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[Build and Test/Linux (Stable)                      ]   \ud83d\udc33  docker run image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[Build and Test/Windows (Stable, MSVC)              ]   \ud83d\udc33  docker run image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[Build and Test/Windows (Stable, MSVC, static CRT)  ]   \ud83d\udc33  docker run image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[Build and Test/Linux (Nightly)                     ]   \ud83d\udc33  docker run image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[Build and Test/iOS (Stable, ARM, Cross Compilation)]   \ud83d\udc33  docker run image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[Build and Test/Windows (Stable, GNU)               ]   \ud83d\udc33  docker run image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[Build and Test/macOS (Stable)                      ]   \ud83d\udc33  docker run image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[Build and Test/Linux (Stable)                      ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/google-shaderc-rs] user=0 workdir=\n[Build and Test/iOS (Stable, ARM, Cross Compilation)]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/google-shaderc-rs] user=0 workdir=\n[Build and Test/Windows (Stable, MSVC, static CRT)  ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/google-shaderc-rs] user=0 workdir=\n[Build and Test/Windows (Stable, MSVC)              ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/google-shaderc-rs] user=0 workdir=\n[Build and Test/Linux (Nightly)                     ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/google-shaderc-rs] user=0 workdir=\n[Build and Test/Windows (Stable, MSVC, static CRT)  ]   \u2601  git clone 'https://github.com/seanmiddleditch/gha-setup-ninja' # ref=master\n[Build and Test/iOS (Stable, ARM, Cross Compilation)]   \u2601  git clone 'https://github.com/actions-rs/toolchain' # ref=v1\n[Build and Test/Linux (Stable)                      ]   \u2601  git clone 'https://github.com/actions-rs/toolchain' # ref=v1\n[Build and Test/Windows (Stable, MSVC)              ]   \u2601  git clone 'https://github.com/seanmiddleditch/gha-setup-ninja' # ref=master\n[Build and Test/Linux (Nightly)                     ]   \u2601  git clone 'https://github.com/actions-rs/toolchain' # ref=v1\n[Build and Test/Windows (Stable, MSVC, static CRT)  ]   \u2601  git clone 'https://github.com/actions-rs/toolchain' # ref=v1\n[Build and Test/iOS (Stable, ARM, Cross Compilation)]   \u2601  git clone 'https://github.com/actions-rs/cargo' # ref=v1\n[Build and Test/Linux (Stable)                      ]   \u2601  git clone 'https://github.com/actions-rs/cargo' # ref=v1\n[Build and Test/Windows (Stable, MSVC)              ]   \u2601  git clone 'https://github.com/actions-rs/toolchain' # ref=v1\n[Build and Test/Windows (Stable, GNU)               ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/google-shaderc-rs] user=0 workdir=\n[Build and Test/Linux (Nightly)                     ]   \u2601  git clone 'https://github.com/actions-rs/cargo' # ref=v1\n[Build and Test/Windows (Stable, MSVC, static CRT)  ]   \u2601  git clone 'https://github.com/actions-rs/cargo' # ref=v1\n[Build and Test/iOS (Stable, ARM, Cross Compilation)] \u2b50 Run Main Checkout out repository\n[Build and Test/Linux (Stable)                      ]   \u2601  git clone 'https://github.com/actions-rs/cargo' # ref=v1\n[Build and Test/Windows (Stable, MSVC)              ]   \u2601  git clone 'https://github.com/actions-rs/cargo' # ref=v1\n[Build and Test/iOS (Stable, ARM, Cross Compilation)]   \u2705  Success - Main Checkout out repository\n[Build and Test/Linux (Nightly)                     ]   \u2601  git clone 'https://github.com/actions-rs/cargo' # ref=v1\n[Build and Test/Windows (Stable, MSVC, static CRT)  ]   \u2601  git clone 'https://github.com/actions-rs/cargo' # ref=v1\n[Build and Test/Linux (Stable)                      ] \u2b50 Run Main Checkout out repository\n[Build and Test/Windows (Stable, MSVC)              ]   \u2601  git clone 'https://github.com/actions-rs/cargo' # ref=v1\n[Build and Test/Linux (Stable)                      ]   \u2705  Success - Main Checkout out repository\n[Build and Test/iOS (Stable, ARM, Cross Compilation)] \u2b50 Run Main Install latest stable Rust toolchain\n[Build and Test/iOS (Stable, ARM, Cross Compilation)]   \ud83d\udc33  docker cp src=/home/andre-silva/.cache/act/actions-rs-toolchain@v1/ dst=/var/run/act/actions/actions-rs-toolchain@v1/\n[Build and Test/Linux (Nightly)                     ] \u2b50 Run Main Checkout out repository\n[Build and Test/Windows (Stable, MSVC, static CRT)  ] \u2b50 Run Main Checkout out repository\n[Build and Test/Linux (Nightly)                     ]   \u2705  Success - Main Checkout out repository\n[Build and Test/iOS (Stable, ARM, Cross Compilation)]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /var/run/act/actions/actions-rs-toolchain@v1/] user=0 workdir=\n[Build and Test/Windows (Stable, GNU)               ]   \u2601  git clone 'https://github.com/seanmiddleditch/gha-setup-ninja' # ref=master\n[Build and Test/Windows (Stable, MSVC)              ] \u2b50 Run Main Checkout out repository\n[Build and Test/Windows (Stable, GNU)               ]   \u2601  git clone 'https://github.com/actions-rs/toolchain' # ref=v1\n[Build and Test/Windows (Stable, MSVC, static CRT)  ]   \u2705  Success - Main Checkout out repository\n[Build and Test/Windows (Stable, MSVC)              ]   \u2705  Success - Main Checkout out repository\n[Build and Test/Windows (Stable, GNU)               ]   \u2601  git clone 'https://github.com/actions-rs/cargo' # ref=v1\n[Build and Test/Linux (Stable)                      ] \u2b50 Run Main Install latest stable Rust toolchain\n[Build and Test/Windows (Stable, GNU)               ]   \u2601  git clone 'https://github.com/actions-rs/cargo' # ref=v1\n[Build and Test/Linux (Stable)                      ]   \ud83d\udc33  docker cp src=/home/andre-silva/.cache/act/actions-rs-toolchain@v1/ dst=/var/run/act/actions/actions-rs-toolchain@v1/\n[Build and Test/Linux (Nightly)                     ] \u2b50 Run Main Install latest nightly Rust toolchain\n[Build and Test/Windows (Stable, GNU)               ] \u2b50 Run Main Checkout out repository\n[Build and Test/Windows (Stable, MSVC, static CRT)  ] \u2b50 Run Main Install Ninja\n[Build and Test/Linux (Stable)                      ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /var/run/act/actions/actions-rs-toolchain@v1/] user=0 workdir=\n[Build and Test/Linux (Nightly)                     ]   \ud83d\udc33  docker cp src=/home/andre-silva/.cache/act/actions-rs-toolchain@v1/ dst=/var/run/act/actions/actions-rs-toolchain@v1/\n[Build and Test/Windows (Stable, MSVC)              ] \u2b50 Run Main Install Ninja\n[Build and Test/Windows (Stable, GNU)               ]   \u2705  Success - Main Checkout out repository\n[Build and Test/Linux (Nightly)                     ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /var/run/act/actions/actions-rs-toolchain@v1/] user=0 workdir=\n[Build and Test/Windows (Stable, MSVC, static CRT)  ]   \ud83d\udc33  docker cp src=/home/andre-silva/.cache/act/seanmiddleditch-gha-setup-ninja@master/ dst=/var/run/act/actions/seanmiddleditch-gha-setup-ninja@master/\n[Build and Test/Windows (Stable, MSVC)              ]   \ud83d\udc33  docker cp src=/home/andre-silva/.cache/act/seanmiddleditch-gha-setup-ninja@master/ dst=/var/run/act/actions/seanmiddleditch-gha-setup-ninja@master/\n[Build and Test/Windows (Stable, MSVC)              ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /var/run/act/actions/seanmiddleditch-gha-setup-ninja@master/] user=0 workdir=\n[Build and Test/Windows (Stable, MSVC, static CRT)  ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /var/run/act/actions/seanmiddleditch-gha-setup-ninja@master/] user=0 workdir=\n[Build and Test/Windows (Stable, GNU)               ] \u2b50 Run Main Install Ninja\n[Build and Test/Windows (Stable, GNU)               ]   \ud83d\udc33  docker cp src=/home/andre-silva/.cache/act/seanmiddleditch-gha-setup-ninja@master/ dst=/var/run/act/actions/seanmiddleditch-gha-setup-ninja@master/\n[Build and Test/Windows (Stable, GNU)               ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /var/run/act/actions/seanmiddleditch-gha-setup-ninja@master/] user=0 workdir=\n[Build and Test/Windows (Stable, MSVC, static CRT)  ]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/seanmiddleditch-gha-setup-ninja@master/dist/index.js] user= workdir=\n[Build and Test/iOS (Stable, ARM, Cross Compilation)]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/actions-rs-toolchain@v1/dist/index.js] user= workdir=\n[Build and Test/Linux (Nightly)                     ]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/actions-rs-toolchain@v1/dist/index.js] user= workdir=\n[Build and Test/macOS (Stable)                      ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/google-shaderc-rs] user=0 workdir=\n[Build and Test/Windows (Stable, GNU)               ]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/seanmiddleditch-gha-setup-ninja@master/dist/index.js] user= workdir=\n[Build and Test/Linux (Stable)                      ]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/actions-rs-toolchain@v1/dist/index.js] user= workdir=\n[Build and Test/Windows (Stable, MSVC)              ]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/seanmiddleditch-gha-setup-ninja@master/dist/index.js] user= workdir=\n[Build and Test/Windows (Stable, MSVC, static CRT)  ]   | downloading https://github.com/ninja-build/ninja/releases/download/v1.10.2/ninja-linux.zip\n[Build and Test/Windows (Stable, GNU)               ]   | downloading https://github.com/ninja-build/ninja/releases/download/v1.10.2/ninja-linux.zip\n[Build and Test/Linux (Stable)                      ]   \ud83d\udcac  ::debug::using toolchain from input: stable\n[Build and Test/Linux (Stable)                      ]   \ud83d\udcac  ::debug::Unable to find \"rustup\" executable, installing it now. Reason: Error: Unable to locate executable file: rustup. Please verify either the file path exists or the file can be found within a directory specified by the PATH environment variable. Also check the file mode to verify the file is executable.\n[Build and Test/Linux (Stable)                      ]   \ud83d\udcac  ::debug::Downloading https://sh.rustup.rs\n[Build and Test/Linux (Stable)                      ]   \ud83d\udcac  ::debug::Destination /tmp/493d4ab8-fbe8-4d4f-b45f-3fcb93c79ae7\n[Build and Test/iOS (Stable, ARM, Cross Compilation)]   \ud83d\udcac  ::debug::using toolchain from input: stable\n[Build and Test/iOS (Stable, ARM, Cross Compilation)]   \ud83d\udcac  ::debug::Unable to find \"rustup\" executable, installing it now. Reason: Error: Unable to locate executable file: rustup. Please verify either the file path exists or the file can be found within a directory specified by the PATH environment variable. Also check the file mode to verify the file is executable.\n[Build and Test/iOS (Stable, ARM, Cross Compilation)]   \ud83d\udcac  ::debug::Downloading https://sh.rustup.rs\n[Build and Test/iOS (Stable, ARM, Cross Compilation)]   \ud83d\udcac  ::debug::Destination /tmp/3cb625b8-0d0f-474c-b4e3-f34dfd03ca52\n[Build and Test/Linux (Stable)                      ]   \ud83d\udcac  ::debug::download complete\n[Build and Test/Linux (Stable)                      ]   \ud83d\udcac  ::debug::Executing chmod 755 on the /tmp/493d4ab8-fbe8-4d4f-b45f-3fcb93c79ae7\n[Build and Test/Linux (Stable)                      ]   | [command]/tmp/493d4ab8-fbe8-4d4f-b45f-3fcb93c79ae7 --default-toolchain none -y\n[Build and Test/Linux (Nightly)                     ]   \ud83d\udcac  ::debug::using toolchain from input: nightly\n[Build and Test/Linux (Nightly)                     ]   \ud83d\udcac  ::debug::Unable to find \"rustup\" executable, installing it now. Reason: Error: Unable to locate executable file: rustup. Please verify either the file path exists or the file can be found within a directory specified by the PATH environment variable. Also check the file mode to verify the file is executable.\n[Build and Test/Linux (Nightly)                     ]   \ud83d\udcac  ::debug::Downloading https://sh.rustup.rs\n[Build and Test/Linux (Nightly)                     ]   \ud83d\udcac  ::debug::Destination /tmp/6347b2f2-2aae-44e8-91bb-fc32253bb8b8\n[Build and Test/Linux (Stable)                      ]   | info: downloading installer\n[Build and Test/iOS (Stable, ARM, Cross Compilation)]   \ud83d\udcac  ::debug::download complete\n[Build and Test/iOS (Stable, ARM, Cross Compilation)]   \ud83d\udcac  ::debug::Executing chmod 755 on the /tmp/3cb625b8-0d0f-474c-b4e3-f34dfd03ca52\n[Build and Test/iOS (Stable, ARM, Cross Compilation)]   | [command]/tmp/3cb625b8-0d0f-474c-b4e3-f34dfd03ca52 --default-toolchain none -y\n[Build and Test/Linux (Nightly)                     ]   \ud83d\udcac  ::debug::download complete\n[Build and Test/Linux (Nightly)                     ]   \ud83d\udcac  ::debug::Executing chmod 755 on the /tmp/6347b2f2-2aae-44e8-91bb-fc32253bb8b8\n[Build and Test/Linux (Nightly)                     ]   | [command]/tmp/6347b2f2-2aae-44e8-91bb-fc32253bb8b8 --default-toolchain none -y\n[Build and Test/Linux (Nightly)                     ]   | info: downloading installer\n[Build and Test/iOS (Stable, ARM, Cross Compilation)]   | info: downloading installer\n[Build and Test/Windows (Stable, GNU)               ]   | extracted 'ninja' to '/tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/google-shaderc-rs/ninja-build/ninja'\n[Build and Test/Windows (Stable, GNU)               ]   | added '/tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/google-shaderc-rs/ninja-build' to PATH\n[Build and Test/Windows (Stable, GNU)               ]   | $ ninja --version\n[Build and Test/Windows (Stable, GNU)               ]   | 1.10.2\n[Build and Test/Windows (Stable, GNU)               ]   \u2705  Success - Main Install Ninja\n[Build and Test/Windows (Stable, MSVC)              ]   | downloading https://github.com/ninja-build/ninja/releases/download/v1.10.2/ninja-linux.zip\n[Build and Test/macOS (Stable)                      ]   \u2601  git clone 'https://github.com/actions-rs/toolchain' # ref=v1\n[Build and Test/macOS (Stable)                      ]   \u2601  git clone 'https://github.com/actions-rs/cargo' # ref=v1\n[Build and Test/iOS (Stable, ARM, Cross Compilation)]   | info: profile set to 'default'\n[Build and Test/iOS (Stable, ARM, Cross Compilation)]   | info: default host triple is x86_64-unknown-linux-gnu\n[Build and Test/iOS (Stable, ARM, Cross Compilation)]   | info: skipping toolchain installation\n[Build and Test/iOS (Stable, ARM, Cross Compilation)]   | \n[Build and Test/iOS (Stable, ARM, Cross Compilation)]   | \n[Build and Test/iOS (Stable, ARM, Cross Compilation)]   | Rust is installed now. Great!\n[Build and Test/iOS (Stable, ARM, Cross Compilation)]   | \n[Build and Test/iOS (Stable, ARM, Cross Compilation)]   | To get started you may need to restart your current shell.\n[Build and Test/iOS (Stable, ARM, Cross Compilation)]   | This would reload your PATH environment variable to include\n[Build and Test/iOS (Stable, ARM, Cross Compilation)]   | Cargo's bin directory ($HOME/.cargo/bin).\n[Build and Test/iOS (Stable, ARM, Cross Compilation)]   | \n[Build and Test/iOS (Stable, ARM, Cross Compilation)]   | To configure your current shell, run:\n[Build and Test/iOS (Stable, ARM, Cross Compilation)]   | source \"$HOME/.cargo/env\"\n[Build and Test/iOS (Stable, ARM, Cross Compilation)]   | [command]/home/runneradmin/.cargo/bin/rustup show\n[Build and Test/iOS (Stable, ARM, Cross Compilation)]   | Default host: x86_64-unknown-linux-gnu\n[Build and Test/iOS (Stable, ARM, Cross Compilation)]   | rustup home:  /home/runneradmin/.rustup\n[Build and Test/iOS (Stable, ARM, Cross Compilation)]   | \n[Build and Test/iOS (Stable, ARM, Cross Compilation)]   | no active toolchain\n[Build and Test/iOS (Stable, ARM, Cross Compilation)]   | [command]/home/runneradmin/.cargo/bin/rustup toolchain install stable\n[Build and Test/Linux (Stable)                      ]   | info: profile set to 'default'\n[Build and Test/Linux (Stable)                      ]   | info: default host triple is x86_64-unknown-linux-gnu\n[Build and Test/Linux (Stable)                      ]   | info: skipping toolchain installation\n[Build and Test/Linux (Stable)                      ]   | \n[Build and Test/Linux (Stable)                      ]   | \n[Build and Test/Linux (Stable)                      ]   | Rust is installed now. Great!\n[Build and Test/Linux (Stable)                      ]   | \n[Build and Test/Linux (Stable)                      ]   | To get started you may need to restart your current shell.\n[Build and Test/Linux (Stable)                      ]   | This would reload your PATH environment variable to include\n[Build and Test/Linux (Stable)                      ]   | Cargo's bin directory ($HOME/.cargo/bin).\n[Build and Test/Linux (Stable)                      ]   | \n[Build and Test/Linux (Stable)                      ]   | To configure your current shell, run:\n[Build and Test/Linux (Stable)                      ]   | source \"$HOME/.cargo/env\"\n[Build and Test/iOS (Stable, ARM, Cross Compilation)]   | info: syncing channel updates for 'stable-x86_64-unknown-linux-gnu'\n[Build and Test/Linux (Stable)                      ]   | [command]/home/runneradmin/.cargo/bin/rustup show\n[Build and Test/Linux (Stable)                      ]   | Default host: x86_64-unknown-linux-gnu\n[Build and Test/Linux (Stable)                      ]   | rustup home:  /home/runneradmin/.rustup\n[Build and Test/Linux (Stable)                      ]   | \n[Build and Test/Linux (Stable)                      ]   | no active toolchain\n[Build and Test/Linux (Stable)                      ]   | [command]/home/runneradmin/.cargo/bin/rustup toolchain install stable\n[Build and Test/Linux (Stable)                      ]   | info: syncing channel updates for 'stable-x86_64-unknown-linux-gnu'\n[Build and Test/macOS (Stable)                      ] Unable to checkout 844f36862e911db73fe0815f00a4a2602c279505: EOF\n[Build and Test/iOS (Stable, ARM, Cross Compilation)]   | info: latest update on 2023-04-20, rust version 1.69.0 (84c898d65 2023-04-16)\n[Build and Test/iOS (Stable, ARM, Cross Compilation)]   | info: downloading component 'cargo'\n[Build and Test/Linux (Nightly)                     ]   | info: profile set to 'default'\n[Build and Test/Linux (Nightly)                     ]   | info: default host triple is x86_64-unknown-linux-gnu\n[Build and Test/Linux (Nightly)                     ]   | info: skipping toolchain installation\n[Build and Test/Linux (Nightly)                     ]   | \n[Build and Test/Linux (Nightly)                     ]   | \n[Build and Test/Linux (Nightly)                     ]   | Rust is installed now. Great!\n[Build and Test/Linux (Nightly)                     ]   | \n[Build and Test/Linux (Nightly)                     ]   | To get started you may need to restart your current shell.\n[Build and Test/Linux (Nightly)                     ]   | This would reload your PATH environment variable to include\n[Build and Test/Linux (Nightly)                     ]   | Cargo's bin directory ($HOME/.cargo/bin).\n[Build and Test/Linux (Nightly)                     ]   | \n[Build and Test/Linux (Nightly)                     ]   | To configure your current shell, run:\n[Build and Test/Linux (Nightly)                     ]   | source \"$HOME/.cargo/env\"\n[Build and Test/Linux (Nightly)                     ]   | [command]/home/runneradmin/.cargo/bin/rustup show\n[Build and Test/Linux (Nightly)                     ]   | Default host: x86_64-unknown-linux-gnu\n[Build and Test/Linux (Nightly)                     ]   | rustup home:  /home/runneradmin/.rustup\n[Build and Test/Linux (Nightly)                     ]   | \n[Build and Test/Linux (Nightly)                     ]   | no active toolchain\n[Build and Test/Linux (Nightly)                     ]   | [command]/home/runneradmin/.cargo/bin/rustup toolchain install nightly\n[Build and Test/Linux (Nightly)                     ]   | info: syncing channel updates for 'nightly-x86_64-unknown-linux-gnu'\n[Build and Test/Linux (Stable)                      ]   | info: latest update on 2023-04-20, rust version 1.69.0 (84c898d65 2023-04-16)\n[Build and Test/Linux (Stable)                      ]   | info: downloading component 'cargo'\n[Build and Test/iOS (Stable, ARM, Cross Compilation)]   | info: downloading component 'clippy'\n[Build and Test/Linux (Stable)                      ]   | info: downloading component 'clippy'\n[Build and Test/iOS (Stable, ARM, Cross Compilation)]   | info: downloading component 'rust-docs'\n[Build and Test/Linux (Stable)                      ]   | info: downloading component 'rust-docs'\n[Build and Test/Linux (Stable)                      ]   | info: downloading component 'rust-std'\n[Build and Test/Linux (Nightly)                     ]   | info: latest update on 2023-05-30, rust version 1.72.0-nightly (498553fc0 2023-05-29)\n[Build and Test/Linux (Nightly)                     ]   | info: downloading component 'cargo'\n[Build and Test/iOS (Stable, ARM, Cross Compilation)]   | info: downloading component 'rust-std'\n[Build and Test/Linux (Nightly)                     ]   | info: downloading component 'clippy'\n[Build and Test/Linux (Nightly)                     ]   | info: downloading component 'rust-docs'\n[Build and Test/Linux (Stable)                      ]   | info: downloading component 'rustc'\n[Build and Test/Windows (Stable, MSVC)              ]   | extracted 'ninja' to '/tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/google-shaderc-rs/ninja-build/ninja'\n[Build and Test/Windows (Stable, MSVC)              ]   | added '/tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/google-shaderc-rs/ninja-build' to PATH\n[Build and Test/Windows (Stable, MSVC)              ]   | $ ninja --version\n[Build and Test/Windows (Stable, MSVC)              ]   | 1.10.2\n[Build and Test/Windows (Stable, MSVC)              ]   \u2705  Success - Main Install Ninja\n[Build and Test/Linux (Nightly)                     ]   | info: downloading component 'rust-std'\n[Build and Test/Windows (Stable, GNU)               ]   \u2699  ::add-path:: /tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/google-shaderc-rs/ninja-build\n[Build and Test/Windows (Stable, GNU)               ] \u2b50 Run Main Install latest stable Rust toolchain\n[Build and Test/iOS (Stable, ARM, Cross Compilation)]   | info: downloading component 'rustc'\n[Build and Test/Linux (Nightly)                     ]   | info: downloading component 'rustc'\n[Build and Test/Windows (Stable, GNU)               ]   \ud83d\udc33  docker cp src=/home/andre-silva/.cache/act/actions-rs-toolchain@v1/ dst=/var/run/act/actions/actions-rs-toolchain@v1/\n[Build and Test/Windows (Stable, MSVC, static CRT)  ]   | extracted 'ninja' to '/tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/google-shaderc-rs/ninja-build/ninja'\n[Build and Test/Windows (Stable, MSVC, static CRT)  ]   | added '/tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/google-shaderc-rs/ninja-build' to PATH\n[Build and Test/Windows (Stable, MSVC, static CRT)  ]   | $ ninja --version\n[Build and Test/Windows (Stable, MSVC, static CRT)  ]   | 1.10.2\n[Build and Test/Windows (Stable, MSVC, static CRT)  ]   \u2705  Success - Main Install Ninja\n[Build and Test/Windows (Stable, MSVC)              ]   \u2699  ::add-path:: /tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/google-shaderc-rs/ninja-build\n[Build and Test/Windows (Stable, GNU)               ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /var/run/act/actions/actions-rs-toolchain@v1/] user=0 workdir=\n[Build and Test/Windows (Stable, MSVC)              ] \u2b50 Run Main Install latest stable Rust toolchain\n[Build and Test/Windows (Stable, MSVC)              ]   \ud83d\udc33  docker cp src=/home/andre-silva/.cache/act/actions-rs-toolchain@v1/ dst=/var/run/act/actions/actions-rs-toolchain@v1/\n[Build and Test/Windows (Stable, MSVC, static CRT)  ]   \u2699  ::add-path:: /tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/google-shaderc-rs/ninja-build\n[Build and Test/Windows (Stable, MSVC)              ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /var/run/act/actions/actions-rs-toolchain@v1/] user=0 workdir=\n[Build and Test/Windows (Stable, MSVC, static CRT)  ] \u2b50 Run Main Install latest stable Rust toolchain\n[Build and Test/Windows (Stable, MSVC, static CRT)  ]   \ud83d\udc33  docker cp src=/home/andre-silva/.cache/act/actions-rs-toolchain@v1/ dst=/var/run/act/actions/actions-rs-toolchain@v1/\n[Build and Test/Windows (Stable, MSVC, static CRT)  ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /var/run/act/actions/actions-rs-toolchain@v1/] user=0 workdir=\n[Build and Test/Linux (Stable)                      ]   | info: downloading component 'rustfmt'\n[Build and Test/Linux (Stable)                      ]   | info: installing component 'cargo'\n[Build and Test/Linux (Stable)                      ]   | info: installing component 'clippy'\n[Build and Test/Linux (Stable)                      ]   | info: installing component 'rust-docs'\n[Build and Test/iOS (Stable, ARM, Cross Compilation)]   | info: downloading component 'rustfmt'\n[Build and Test/Linux (Nightly)                     ]   | info: downloading component 'rustfmt'\n[Build and Test/iOS (Stable, ARM, Cross Compilation)]   | info: installing component 'cargo'\n[Build and Test/Linux (Nightly)                     ]   | info: installing component 'cargo'\n[Build and Test/Linux (Nightly)                     ]   | info: installing component 'clippy'\n[Build and Test/iOS (Stable, ARM, Cross Compilation)]   | info: installing component 'clippy'\n[Build and Test/Linux (Nightly)                     ]   | info: installing component 'rust-docs'\n[Build and Test/iOS (Stable, ARM, Cross Compilation)]   | info: installing component 'rust-docs'\n[Build and Test/Linux (Stable)                      ]   | info: installing component 'rust-std'\n[Build and Test/Linux (Stable)                      ]   | info: installing component 'rustc'\n[Build and Test/Linux (Stable)                      ]   | info: installing component 'rustfmt'\n[Build and Test/Linux (Stable)                      ]   | \n[Build and Test/Linux (Stable)                      ]   |   stable-x86_64-unknown-linux-gnu installed - rustc 1.69.0 (84c898d65 2023-04-16)\n[Build and Test/Linux (Stable)                      ]   | \n[Build and Test/Linux (Stable)                      ]   | info: default toolchain set to 'stable-x86_64-unknown-linux-gnu'\n[Build and Test/Linux (Stable)                      ]   | info: checking for self-update\n[Build and Test/Linux (Stable)                      ]   | [command]/home/runneradmin/.cargo/bin/rustup override set stable\n[Build and Test/Linux (Stable)                      ]   | info: using existing install for 'stable-x86_64-unknown-linux-gnu'\n[Build and Test/Linux (Stable)                      ]   | info: override toolchain for '/tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/google-shaderc-rs' set to 'stable-x86_64-unknown-linux-gnu'\n[Build and Test/Linux (Stable)                      ]   | \n[Build and Test/Linux (Stable)                      ]   |   stable-x86_64-unknown-linux-gnu unchanged - rustc 1.69.0 (84c898d65 2023-04-16)\n[Build and Test/Linux (Stable)                      ]   | \n[Build and Test/Linux (Stable)                      ]   \u2753  ::group::Gathering installed versions\n[Build and Test/Linux (Stable)                      ]   | [command]/home/runneradmin/.cargo/bin/rustc -V\n[Build and Test/Linux (Stable)                      ]   | rustc 1.69.0 (84c898d65 2023-04-16)\n[Build and Test/Linux (Stable)                      ]   \u2699  ::set-output:: rustc=1.69.0 (84c898d65 2023-04-16)\n[Build and Test/Linux (Stable)                      ]   \u2699  ::set-output:: rustc_hash=84c898d65\n[Build and Test/Linux (Stable)                      ]   | [command]/home/runneradmin/.cargo/bin/cargo -V\n[Build and Test/Linux (Stable)                      ]   | cargo 1.69.0 (6e9a83356 2023-04-12)\n[Build and Test/Linux (Stable)                      ]   \u2699  ::set-output:: cargo=1.69.0 (6e9a83356 2023-04-12)\n[Build and Test/Linux (Stable)                      ]   | [command]/home/runneradmin/.cargo/bin/rustup -V\n[Build and Test/Linux (Stable)                      ]   | rustup 1.26.0 (5af9b9484 2023-04-05)\n[Build and Test/Linux (Stable)                      ]   | info: This is the version for the rustup toolchain manager, not the rustc compiler.\n[Build and Test/Linux (Stable)                      ]   | info: The currently active `rustc` version is `rustc 1.69.0 (84c898d65 2023-04-16)`\n[Build and Test/Linux (Stable)                      ]   \u2699  ::set-output:: rustup=1.26.0 (5af9b9484 2023-04-05)\n[Build and Test/Linux (Stable)                      ]   \u2753  ::endgroup::\n[Build and Test/Linux (Stable)                      ]   \u2705  Success - Main Install latest stable Rust toolchain\n[Build and Test/Linux (Nightly)                     ]   | info: installing component 'rust-std'\n[Build and Test/iOS (Stable, ARM, Cross Compilation)]   | info: installing component 'rust-std'\n[Build and Test/Linux (Stable)                      ]   \u2699  ::add-path:: /home/runneradmin/.cargo/bin\n[Build and Test/Linux (Stable)                      ] \u2b50 Run Main Run cargo build\n[Build and Test/Linux (Stable)                      ]   \ud83d\udc33  docker cp src=/home/andre-silva/.cache/act/actions-rs-cargo@v1/ dst=/var/run/act/actions/actions-rs-cargo@v1/\n[Build and Test/Linux (Stable)                      ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /var/run/act/actions/actions-rs-cargo@v1/] user=0 workdir=\n[Build and Test/Linux (Nightly)                     ]   | info: installing component 'rustc'\n[Build and Test/iOS (Stable, ARM, Cross Compilation)]   | info: installing component 'rustc'\n[Build and Test/Linux (Nightly)                     ]   | info: installing component 'rustfmt'\n[Build and Test/Linux (Nightly)                     ]   | \n[Build and Test/Linux (Nightly)                     ]   |   nightly-x86_64-unknown-linux-gnu installed - rustc 1.72.0-nightly (498553fc0 2023-05-29)\n[Build and Test/Linux (Nightly)                     ]   | \n[Build and Test/Linux (Nightly)                     ]   | info: default toolchain set to 'nightly-x86_64-unknown-linux-gnu'\n[Build and Test/Linux (Nightly)                     ]   | info: checking for self-update\n[Build and Test/Linux (Nightly)                     ]   | [command]/home/runneradmin/.cargo/bin/rustup override set nightly\n[Build and Test/Linux (Nightly)                     ]   | info: using existing install for 'nightly-x86_64-unknown-linux-gnu'\n[Build and Test/Linux (Nightly)                     ]   | info: override toolchain for '/tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/google-shaderc-rs' set to 'nightly-x86_64-unknown-linux-gnu'\n[Build and Test/Linux (Nightly)                     ]   | \n[Build and Test/Linux (Nightly)                     ]   |   nightly-x86_64-unknown-linux-gnu unchanged - rustc 1.72.0-nightly (498553fc0 2023-05-29)\n[Build and Test/Linux (Nightly)                     ]   | \n[Build and Test/Linux (Nightly)                     ]   \u2753  ::group::Gathering installed versions\n[Build and Test/Linux (Nightly)                     ]   | [command]/home/runneradmin/.cargo/bin/rustc -V\n[Build and Test/iOS (Stable, ARM, Cross Compilation)]   | info: installing component 'rustfmt'\n[Build and Test/Linux (Nightly)                     ]   | rustc 1.72.0-nightly (498553fc0 2023-05-29)\n[Build and Test/Linux (Nightly)                     ]   \u2699  ::set-output:: rustc=1.72.0-nightly (498553fc0 2023-05-29)\n[Build and Test/Linux (Nightly)                     ]   \u2699  ::set-output:: rustc_hash=498553fc0\n[Build and Test/Linux (Nightly)                     ]   | [command]/home/runneradmin/.cargo/bin/cargo -V\n[Build and Test/Linux (Nightly)                     ]   | cargo 1.72.0-nightly (64fb38c97 2023-05-23)\n[Build and Test/Linux (Nightly)                     ]   \u2699  ::set-output:: cargo=1.72.0-nightly (64fb38c97 2023-05-23)\n[Build and Test/Linux (Nightly)                     ]   | [command]/home/runneradmin/.cargo/bin/rustup -V\n[Build and Test/Linux (Nightly)                     ]   | rustup 1.26.0 (5af9b9484 2023-04-05)\n[Build and Test/Linux (Nightly)                     ]   | info: This is the version for the rustup toolchain manager, not the rustc compiler.\n[Build and Test/Linux (Nightly)                     ]   | info: The currently active `rustc` version is `rustc 1.72.0-nightly (498553fc0 2023-05-29)`\n[Build and Test/Linux (Nightly)                     ]   \u2699  ::set-output:: rustup=1.26.0 (5af9b9484 2023-04-05)\n[Build and Test/Linux (Nightly)                     ]   \u2753  ::endgroup::\n[Build and Test/Linux (Nightly)                     ]   \u2705  Success - Main Install latest nightly Rust toolchain\n[Build and Test/iOS (Stable, ARM, Cross Compilation)]   | \n[Build and Test/iOS (Stable, ARM, Cross Compilation)]   |   stable-x86_64-unknown-linux-gnu installed - rustc 1.69.0 (84c898d65 2023-04-16)\n[Build and Test/iOS (Stable, ARM, Cross Compilation)]   | \n[Build and Test/iOS (Stable, ARM, Cross Compilation)]   | info: default toolchain set to 'stable-x86_64-unknown-linux-gnu'\n[Build and Test/iOS (Stable, ARM, Cross Compilation)]   | info: checking for self-update\n[Build and Test/iOS (Stable, ARM, Cross Compilation)]   | [command]/home/runneradmin/.cargo/bin/rustup override set stable\n[Build and Test/iOS (Stable, ARM, Cross Compilation)]   | info: using existing install for 'stable-x86_64-unknown-linux-gnu'\n[Build and Test/iOS (Stable, ARM, Cross Compilation)]   | info: override toolchain for '/tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/google-shaderc-rs' set to 'stable-x86_64-unknown-linux-gnu'\n[Build and Test/iOS (Stable, ARM, Cross Compilation)]   | \n[Build and Test/iOS (Stable, ARM, Cross Compilation)]   |   stable-x86_64-unknown-linux-gnu unchanged - rustc 1.69.0 (84c898d65 2023-04-16)\n[Build and Test/iOS (Stable, ARM, Cross Compilation)]   | \n[Build and Test/iOS (Stable, ARM, Cross Compilation)]   | [command]/home/runneradmin/.cargo/bin/rustup target add --toolchain stable aarch64-apple-ios\n[Build and Test/Linux (Nightly)                     ]   \u2699  ::add-path:: /home/runneradmin/.cargo/bin\n[Build and Test/iOS (Stable, ARM, Cross Compilation)]   | info: downloading component 'rust-std' for 'aarch64-apple-ios'\n[Build and Test/Linux (Nightly)                     ] \u2b50 Run Main Run cargo build\n[Build and Test/Linux (Nightly)                     ]   \ud83d\udc33  docker cp src=/home/andre-silva/.cache/act/actions-rs-cargo@v1/ dst=/var/run/act/actions/actions-rs-cargo@v1/\n[Build and Test/iOS (Stable, ARM, Cross Compilation)]   | info: installing component 'rust-std' for 'aarch64-apple-ios'\n[Build and Test/Linux (Nightly)                     ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /var/run/act/actions/actions-rs-cargo@v1/] user=0 workdir=\n[Build and Test/iOS (Stable, ARM, Cross Compilation)]   \u2753  ::group::Gathering installed versions\n[Build and Test/iOS (Stable, ARM, Cross Compilation)]   | [command]/home/runneradmin/.cargo/bin/rustc -V\n[Build and Test/iOS (Stable, ARM, Cross Compilation)]   | rustc 1.69.0 (84c898d65 2023-04-16)\n[Build and Test/iOS (Stable, ARM, Cross Compilation)]   \u2699  ::set-output:: rustc=1.69.0 (84c898d65 2023-04-16)\n[Build and Test/iOS (Stable, ARM, Cross Compilation)]   \u2699  ::set-output:: rustc_hash=84c898d65\n[Build and Test/iOS (Stable, ARM, Cross Compilation)]   | [command]/home/runneradmin/.cargo/bin/cargo -V\n[Build and Test/iOS (Stable, ARM, Cross Compilation)]   | cargo 1.69.0 (6e9a83356 2023-04-12)\n[Build and Test/iOS (Stable, ARM, Cross Compilation)]   \u2699  ::set-output:: cargo=1.69.0 (6e9a83356 2023-04-12)\n[Build and Test/iOS (Stable, ARM, Cross Compilation)]   | [command]/home/runneradmin/.cargo/bin/rustup -V\n[Build and Test/iOS (Stable, ARM, Cross Compilation)]   | rustup 1.26.0 (5af9b9484 2023-04-05)\n[Build and Test/iOS (Stable, ARM, Cross Compilation)]   | info: This is the version for the rustup toolchain manager, not the rustc compiler.\n[Build and Test/iOS (Stable, ARM, Cross Compilation)]   | info: The currently active `rustc` version is `rustc 1.69.0 (84c898d65 2023-04-16)`\n[Build and Test/iOS (Stable, ARM, Cross Compilation)]   \u2699  ::set-output:: rustup=1.26.0 (5af9b9484 2023-04-05)\n[Build and Test/iOS (Stable, ARM, Cross Compilation)]   \u2753  ::endgroup::\n[Build and Test/iOS (Stable, ARM, Cross Compilation)]   \u2705  Success - Main Install latest stable Rust toolchain\n[Build and Test/iOS (Stable, ARM, Cross Compilation)]   \u2699  ::add-path:: /home/runneradmin/.cargo/bin\n[Build and Test/iOS (Stable, ARM, Cross Compilation)] \u2b50 Run Main Run cargo build\n[Build and Test/iOS (Stable, ARM, Cross Compilation)]   \ud83d\udc33  docker cp src=/home/andre-silva/.cache/act/actions-rs-cargo@v1/ dst=/var/run/act/actions/actions-rs-cargo@v1/\n[Build and Test/iOS (Stable, ARM, Cross Compilation)]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /var/run/act/actions/actions-rs-cargo@v1/] user=0 workdir=\n[Build and Test/macOS (Stable)                      ] failed to remove container: Delete \"http://%2Fvar%2Frun%2Fdocker.sock/v1.41/containers/9af08d5c85595cac57300ae2e19d1015050143b3dcfbdae2f4697a87eab44c52?force=1&v=1\": context deadline exceeded\n[Build and Test/macOS (Stable)                      ] \ud83c\udfc1  Job succeeded\n[Build and Test/Windows (Stable, GNU)               ]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/actions-rs-toolchain@v1/dist/index.js] user= workdir=\n[Build and Test/Windows (Stable, MSVC, static CRT)  ]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/actions-rs-toolchain@v1/dist/index.js] user= workdir=\n[Build and Test/Linux (Stable)                      ]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/actions-rs-cargo@v1/dist/index.js] user= workdir=\n[Build and Test/Linux (Nightly)                     ]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/actions-rs-cargo@v1/dist/index.js] user= workdir=\n[Build and Test/Windows (Stable, MSVC)              ]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/actions-rs-toolchain@v1/dist/index.js] user= workdir=\n[Build and Test/iOS (Stable, ARM, Cross Compilation)]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/actions-rs-cargo@v1/dist/index.js] user= workdir=\n[Build and Test/Windows (Stable, GNU)               ]   \ud83d\udcac  ::debug::using toolchain from input: stable\n[Build and Test/Windows (Stable, GNU)               ]   \ud83d\udcac  ::debug::Unable to find \"rustup\" executable, installing it now. Reason: Error: Unable to locate executable file: rustup. Please verify either the file path exists or the file can be found within a directory specified by the PATH environment variable. Also check the file mode to verify the file is executable.\n[Build and Test/Windows (Stable, GNU)               ]   \ud83d\udcac  ::debug::Downloading https://sh.rustup.rs\n[Build and Test/Windows (Stable, GNU)               ]   \ud83d\udcac  ::debug::Destination /tmp/c0b6f9c2-4c98-4649-9faa-8c12a5a772f7\n[Build and Test/Windows (Stable, MSVC, static CRT)  ]   \ud83d\udcac  ::debug::using toolchain from input: stable\n[Build and Test/Windows (Stable, MSVC, static CRT)  ]   \ud83d\udcac  ::debug::Unable to find \"rustup\" executable, installing it now. Reason: Error: Unable to locate executable file: rustup. Please verify either the file path exists or the file can be found within a directory specified by the PATH environment variable. Also check the file mode to verify the file is executable.\n[Build and Test/Windows (Stable, MSVC, static CRT)  ]   \ud83d\udcac  ::debug::Downloading https://sh.rustup.rs\n[Build and Test/Windows (Stable, MSVC, static CRT)  ]   \ud83d\udcac  ::debug::Destination /tmp/aa64e5f9-c53e-4adc-873c-f13ca31d0ffd\n[Build and Test/Linux (Nightly)                     ]   \u2753 add-matcher /run/act/actions/actions-rs-cargo@v1/dist/.matchers/rust.json\n[Build and Test/Linux (Stable)                      ]   \u2753 add-matcher /run/act/actions/actions-rs-cargo@v1/dist/.matchers/rust.json\n[Build and Test/Linux (Nightly)                     ]   | [command]/home/runneradmin/.cargo/bin/cargo build --verbose\n[Build and Test/Linux (Stable)                      ]   | [command]/home/runneradmin/.cargo/bin/cargo build --verbose\n[Build and Test/Windows (Stable, GNU)               ]   \ud83d\udcac  ::debug::download complete\n[Build and Test/Windows (Stable, GNU)               ]   \ud83d\udcac  ::debug::Executing chmod 755 on the /tmp/c0b6f9c2-4c98-4649-9faa-8c12a5a772f7\n[Build and Test/Windows (Stable, GNU)               ]   | [command]/tmp/c0b6f9c2-4c98-4649-9faa-8c12a5a772f7 --default-toolchain none -y\n[Build and Test/Windows (Stable, MSVC, static CRT)  ]   \ud83d\udcac  ::debug::download complete\n[Build and Test/Windows (Stable, MSVC, static CRT)  ]   \ud83d\udcac  ::debug::Executing chmod 755 on the /tmp/aa64e5f9-c53e-4adc-873c-f13ca31d0ffd\n[Build and Test/Windows (Stable, MSVC, static CRT)  ]   | [command]/tmp/aa64e5f9-c53e-4adc-873c-f13ca31d0ffd --default-toolchain none -y\n[Build and Test/Windows (Stable, MSVC, static CRT)  ]   | info: downloading installer\n[Build and Test/Windows (Stable, GNU)               ]   | info: downloading installer\n[Build and Test/Windows (Stable, MSVC)              ]   \ud83d\udcac  ::debug::using toolchain from input: stable\n[Build and Test/Windows (Stable, MSVC)              ]   \ud83d\udcac  ::debug::Unable to find \"rustup\" executable, installing it now. Reason: Error: Unable to locate executable file: rustup. Please verify either the file path exists or the file can be found within a directory specified by the PATH environment variable. Also check the file mode to verify the file is executable.\n[Build and Test/Windows (Stable, MSVC)              ]   \ud83d\udcac  ::debug::Downloading https://sh.rustup.rs\n[Build and Test/Windows (Stable, MSVC)              ]   \ud83d\udcac  ::debug::Destination /tmp/e2731cd3-1b89-4f85-8349-4eb6fac5afb7\n[Build and Test/Linux (Nightly)                     ]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m    Updating\u001b[0m crates.io index\n[Build and Test/Linux (Stable)                      ]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m    Updating\u001b[0m crates.io index\n[Build and Test/iOS (Stable, ARM, Cross Compilation)]   \u2753 add-matcher /run/act/actions/actions-rs-cargo@v1/dist/.matchers/rust.json\n[Build and Test/iOS (Stable, ARM, Cross Compilation)]   | [command]/home/runneradmin/.cargo/bin/cargo build --target aarch64-apple-ios --verbose\n[Build and Test/Windows (Stable, MSVC)              ]   \ud83d\udcac  ::debug::download complete\n[Build and Test/Windows (Stable, MSVC)              ]   \ud83d\udcac  ::debug::Executing chmod 755 on the /tmp/e2731cd3-1b89-4f85-8349-4eb6fac5afb7\n[Build and Test/Windows (Stable, MSVC)              ]   | [command]/tmp/e2731cd3-1b89-4f85-8349-4eb6fac5afb7 --default-toolchain none -y\n[Build and Test/Windows (Stable, MSVC)              ]   | info: downloading installer\n[Build and Test/Linux (Nightly)                     ]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m Downloading\u001b[0m crates ...\n[Build and Test/Linux (Nightly)                     ]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m  Downloaded\u001b[0m libc v0.2.144\n[Build and Test/Linux (Nightly)                     ]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m  Downloaded\u001b[0m xmlparser v0.13.5\n[Build and Test/Linux (Nightly)                     ]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m  Downloaded\u001b[0m cmake v0.1.50\n[Build and Test/Linux (Nightly)                     ]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m  Downloaded\u001b[0m roxmltree v0.14.1\n[Build and Test/Windows (Stable, GNU)               ]   | info: profile set to 'default'\n[Build and Test/Windows (Stable, GNU)               ]   | info: default host triple is x86_64-unknown-linux-gnu\n[Build and Test/Windows (Stable, GNU)               ]   | info: skipping toolchain installation\n[Build and Test/Windows (Stable, GNU)               ]   | \n[Build and Test/Windows (Stable, GNU)               ]   | \n[Build and Test/Windows (Stable, GNU)               ]   | Rust is installed now. Great!\n[Build and Test/Windows (Stable, GNU)               ]   | \n[Build and Test/Windows (Stable, GNU)               ]   | To get started you may need to restart your current shell.\n[Build and Test/Windows (Stable, GNU)               ]   | This would reload your PATH environment variable to include\n[Build and Test/Windows (Stable, GNU)               ]   | Cargo's bin directory ($HOME/.cargo/bin).\n[Build and Test/Windows (Stable, GNU)               ]   | \n[Build and Test/Windows (Stable, GNU)               ]   | To configure your current shell, run:\n[Build and Test/Windows (Stable, GNU)               ]   | source \"$HOME/.cargo/env\"\n[Build and Test/iOS (Stable, ARM, Cross Compilation)]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m    Updating\u001b[0m crates.io index\n[Build and Test/Linux (Nightly)                     ]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m  Downloaded\u001b[0m cc v1.0.79\n[Build and Test/Windows (Stable, GNU)               ]   | [command]/home/runneradmin/.cargo/bin/rustup show\n[Build and Test/Windows (Stable, GNU)               ]   | Default host: x86_64-unknown-linux-gnu\n[Build and Test/Windows (Stable, GNU)               ]   | rustup home:  /home/runneradmin/.rustup\n[Build and Test/Windows (Stable, GNU)               ]   | \n[Build and Test/Windows (Stable, GNU)               ]   | no active toolchain\n[Build and Test/Windows (Stable, GNU)               ]   | [command]/home/runneradmin/.cargo/bin/rustup toolchain install stable\n[Build and Test/Windows (Stable, GNU)               ]   | info: syncing channel updates for 'stable-x86_64-unknown-linux-gnu'\n[Build and Test/Linux (Nightly)                     ]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m   Compiling\u001b[0m cc v1.0.79\n[Build and Test/Linux (Nightly)                     ]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m   Compiling\u001b[0m xmlparser v0.13.5\n[Build and Test/Linux (Nightly)                     ]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m   Compiling\u001b[0m libc v0.2.144\n[Build and Test/Linux (Nightly)                     ]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m     Running\u001b[0m `/home/runneradmin/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/bin/rustc --crate-name cc --edition=2018 /home/runneradmin/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.0.79/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C embed-bitcode=no -C debuginfo=0 -C metadata=7f2ac32500a16f81 -C extra-filename=-7f2ac32500a16f81 --out-dir /tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/google-shaderc-rs/target/debug/deps -L dependency=/tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/google-shaderc-rs/target/debug/deps --cap-lints allow`\n[Build and Test/Linux (Nightly)                     ]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m     Running\u001b[0m `/home/runneradmin/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/bin/rustc --crate-name build_script_build /home/runneradmin/.cargo/registry/src/index.crates.io-6f17d22bba15001f/libc-0.2.144/build.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type bin --emit=dep-info,link -C embed-bitcode=no -C debuginfo=0 --cfg 'feature=\"default\"' --cfg 'feature=\"std\"' -C metadata=a473abba7ef97f8e -C extra-filename=-a473abba7ef97f8e --out-dir /tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/google-shaderc-rs/target/debug/build/libc-a473abba7ef97f8e -L dependency=/tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/google-shaderc-rs/target/debug/deps --cap-lints allow`\n[Build and Test/Linux (Nightly)                     ]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m     Running\u001b[0m `/home/runneradmin/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/bin/rustc --crate-name xmlparser --edition=2018 /home/runneradmin/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xmlparser-0.13.5/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C embed-bitcode=no -C debuginfo=0 --cfg 'feature=\"default\"' --cfg 'feature=\"std\"' -C metadata=6e38c0d20db37516 -C extra-filename=-6e38c0d20db37516 --out-dir /tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/google-shaderc-rs/target/debug/deps -L dependency=/tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/google-shaderc-rs/target/debug/deps --cap-lints allow`\n[Build and Test/Linux (Nightly)                     ]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m   Compiling\u001b[0m roxmltree v0.14.1\n[Build and Test/Windows (Stable, GNU)               ]   | info: latest update on 2023-04-20, rust version 1.69.0 (84c898d65 2023-04-16)\n[Build and Test/Windows (Stable, GNU)               ]   | info: downloading component 'cargo'\n[Build and Test/Linux (Nightly)                     ]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m     Running\u001b[0m `/home/runneradmin/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/bin/rustc --crate-name roxmltree --edition=2018 /home/runneradmin/.cargo/registry/src/index.crates.io-6f17d22bba15001f/roxmltree-0.14.1/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C embed-bitcode=no -C debuginfo=0 --cfg 'feature=\"default\"' --cfg 'feature=\"std\"' -C metadata=7b1e7442034c5fa8 -C extra-filename=-7b1e7442034c5fa8 --out-dir /tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/google-shaderc-rs/target/debug/deps -L dependency=/tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/google-shaderc-rs/target/debug/deps --extern xmlparser=/tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/google-shaderc-rs/target/debug/deps/libxmlparser-6e38c0d20db37516.rmeta --cap-lints allow`\n[Build and Test/Linux (Nightly)                     ]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m   Compiling\u001b[0m cmake v0.1.50\n[Build and Test/Linux (Nightly)                     ]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m     Running\u001b[0m `/home/runneradmin/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/bin/rustc --crate-name cmake --edition=2021 /home/runneradmin/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cmake-0.1.50/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C embed-bitcode=no -C debuginfo=0 -C metadata=da53270ef0ec19be -C extra-filename=-da53270ef0ec19be --out-dir /tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/google-shaderc-rs/target/debug/deps -L dependency=/tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/google-shaderc-rs/target/debug/deps --extern cc=/tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/google-shaderc-rs/target/debug/deps/libcc-7f2ac32500a16f81.rmeta --cap-lints allow`\n[Build and Test/Windows (Stable, MSVC, static CRT)  ]   | info: profile set to 'default'\n[Build and Test/Windows (Stable, MSVC, static CRT)  ]   | info: default host triple is x86_64-unknown-linux-gnu\n[Build and Test/Windows (Stable, MSVC, static CRT)  ]   | info: skipping toolchain installation\n[Build and Test/Windows (Stable, MSVC, static CRT)  ]   | \n[Build and Test/Windows (Stable, MSVC, static CRT)  ]   | \n[Build and Test/Windows (Stable, MSVC, static CRT)  ]   | Rust is installed now. Great!\n[Build and Test/Windows (Stable, MSVC, static CRT)  ]   | \n[Build and Test/Windows (Stable, MSVC, static CRT)  ]   | To get started you may need to restart your current shell.\n[Build and Test/Windows (Stable, MSVC, static CRT)  ]   | This would reload your PATH environment variable to include\n[Build and Test/Windows (Stable, MSVC, static CRT)  ]   | Cargo's bin directory ($HOME/.cargo/bin).\n[Build and Test/Windows (Stable, MSVC, static CRT)  ]   | \n[Build and Test/Windows (Stable, MSVC, static CRT)  ]   | To configure your current shell, run:\n[Build and Test/Windows (Stable, MSVC, static CRT)  ]   | source \"$HOME/.cargo/env\"\n[Build and Test/Windows (Stable, MSVC, static CRT)  ]   | [command]/home/runneradmin/.cargo/bin/rustup show\n[Build and Test/Windows (Stable, MSVC, static CRT)  ]   | Default host: x86_64-unknown-linux-gnu\n[Build and Test/Windows (Stable, MSVC, static CRT)  ]   | rustup home:  /home/runneradmin/.rustup\n[Build and Test/Windows (Stable, MSVC, static CRT)  ]   | \n[Build and Test/Windows (Stable, MSVC, static CRT)  ]   | no active toolchain\n[Build and Test/Windows (Stable, MSVC, static CRT)  ]   | [command]/home/runneradmin/.cargo/bin/rustup toolchain install stable\n[Build and Test/Windows (Stable, MSVC, static CRT)  ]   | info: syncing channel updates for 'stable-x86_64-unknown-linux-gnu'\n[Build and Test/Linux (Nightly)                     ]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m     Running\u001b[0m `/tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/google-shaderc-rs/target/debug/build/libc-a473abba7ef97f8e/build-script-build`\n[Build and Test/Linux (Nightly)                     ]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m     Running\u001b[0m `/home/runneradmin/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/bin/rustc --crate-name libc /home/runneradmin/.cargo/registry/src/index.crates.io-6f17d22bba15001f/libc-0.2.144/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C embed-bitcode=no -C debuginfo=2 --cfg 'feature=\"default\"' --cfg 'feature=\"std\"' -C metadata=741feb12f8edb9f5 -C extra-filename=-741feb12f8edb9f5 --out-dir /tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/google-shaderc-rs/target/debug/deps -L dependency=/tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/google-shaderc-rs/target/debug/deps --cap-lints allow --cfg freebsd11 --cfg libc_priv_mod_use --cfg libc_union --cfg libc_const_size_of --cfg libc_align --cfg libc_int128 --cfg libc_core_cvoid --cfg libc_packedN --cfg libc_cfg_target_vendor --cfg libc_non_exhaustive --cfg libc_long_array --cfg libc_ptr_addr_of --cfg libc_underscore_const_names --cfg libc_const_extern_fn`\n[Build and Test/Windows (Stable, GNU)               ]   | info: downloading component 'clippy'\n[Build and Test/Windows (Stable, GNU)               ]   | info: downloading component 'rust-docs'\n[Build and Test/Windows (Stable, MSVC)              ]   | info: profile set to 'default'\n[Build and Test/Windows (Stable, MSVC)              ]   | info: default host triple is x86_64-unknown-linux-gnu\n[Build and Test/Windows (Stable, MSVC)              ]   | info: skipping toolchain installation\n[Build and Test/Windows (Stable, MSVC)              ]   | \n[Build and Test/Windows (Stable, MSVC)              ]   | \n[Build and Test/Windows (Stable, MSVC)              ]   | Rust is installed now. Great!\n[Build and Test/Windows (Stable, MSVC)              ]   | \n[Build and Test/Windows (Stable, MSVC)              ]   | To get started you may need to restart your current shell.\n[Build and Test/Windows (Stable, MSVC)              ]   | This would reload your PATH environment variable to include\n[Build and Test/Windows (Stable, MSVC)              ]   | Cargo's bin directory ($HOME/.cargo/bin).\n[Build and Test/Windows (Stable, MSVC)              ]   | \n[Build and Test/Windows (Stable, MSVC)              ]   | To configure your current shell, run:\n[Build and Test/Windows (Stable, MSVC)              ]   | source \"$HOME/.cargo/env\"\n[Build and Test/Windows (Stable, MSVC, static CRT)  ]   | info: latest update on 2023-04-20, rust version 1.69.0 (84c898d65 2023-04-16)\n[Build and Test/Windows (Stable, MSVC, static CRT)  ]   | info: downloading component 'cargo'\n[Build and Test/Windows (Stable, MSVC)              ]   | [command]/home/runneradmin/.cargo/bin/rustup show\n[Build and Test/Windows (Stable, MSVC)              ]   | Default host: x86_64-unknown-linux-gnu\n[Build and Test/Windows (Stable, MSVC)              ]   | rustup home:  /home/runneradmin/.rustup\n[Build and Test/Windows (Stable, MSVC)              ]   | \n[Build and Test/Windows (Stable, MSVC)              ]   | no active toolchain\n[Build and Test/Windows (Stable, MSVC)              ]   | [command]/home/runneradmin/.cargo/bin/rustup toolchain install stable\n[Build and Test/Windows (Stable, MSVC)              ]   | info: syncing channel updates for 'stable-x86_64-unknown-linux-gnu'\n[Build and Test/Linux (Nightly)                     ]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m   Compiling\u001b[0m shaderc-sys v0.8.2 (/tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/google-shaderc-rs/shaderc-sys)\n[Build and Test/Linux (Nightly)                     ]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m     Running\u001b[0m `/home/runneradmin/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/bin/rustc --crate-name build_script_build shaderc-sys/build/build.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type bin --emit=dep-info,link -C embed-bitcode=no -C debuginfo=0 -C metadata=5a70685a161dce1a -C extra-filename=-5a70685a161dce1a --out-dir /tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/google-shaderc-rs/target/debug/build/shaderc-sys-5a70685a161dce1a -C incremental=/tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/google-shaderc-rs/target/debug/incremental -L dependency=/tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/google-shaderc-rs/target/debug/deps --extern cmake=/tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/google-shaderc-rs/target/debug/deps/libcmake-da53270ef0ec19be.rlib --extern roxmltree=/tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/google-shaderc-rs/target/debug/deps/libroxmltree-7b1e7442034c5fa8.rlib`\n[Build and Test/Windows (Stable, MSVC)              ]   | info: latest update on 2023-04-20, rust version 1.69.0 (84c898d65 2023-04-16)\n[Build and Test/Windows (Stable, MSVC)              ]   | info: downloading component 'cargo'\n[Build and Test/Windows (Stable, MSVC, static CRT)  ]   | info: downloading component 'clippy'\n[Build and Test/Windows (Stable, MSVC, static CRT)  ]   | info: downloading component 'rust-docs'\n[Build and Test/Linux (Nightly)                     ]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m     Running\u001b[0m `/tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/google-shaderc-rs/target/debug/build/shaderc-sys-5a70685a161dce1a/build-script-build`\n[Build and Test/Windows (Stable, MSVC)              ]   | info: downloading component 'clippy'\n[Build and Test/Windows (Stable, GNU)               ]   | info: downloading component 'rust-std'\n[Build and Test/Windows (Stable, MSVC)              ]   | info: downloading component 'rust-docs'\n[Build and Test/Windows (Stable, MSVC)              ]   | info: downloading component 'rust-std'\n[Build and Test/Linux (Nightly)                     ]   | The following warnings were emitted during compilation:\n[Build and Test/Linux (Nightly)                     ]   | \n[Build and Test/Linux (Nightly)                     ]   | \u001b[0m\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[1m:\u001b[0m shaderc: searching for native shaderc libraries on system;  use '--features build-from-source' to force building from source code\n[Build and Test/Linux (Nightly)                     ]   | \u001b[0m\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[1m:\u001b[0m shaderc: cannot find native shaderc library on system; falling back to build from source\n[Build and Test/Linux (Nightly)                     ]   | \n[Build and Test/Linux (Nightly)                     ]   | \u001b[0m\u001b[0m\u001b[1m\u001b[31merror\u001b[0m\u001b[1m:\u001b[0m failed to run custom build command for `shaderc-sys v0.8.2 (/tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/google-shaderc-rs/shaderc-sys)`\n[Build and Test/Linux (Nightly)                     ]   | \n[Build and Test/Linux (Nightly)                     ]   | Caused by:\n[Build and Test/Linux (Nightly)                     ]   |   process didn't exit successfully: `/tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/google-shaderc-rs/target/debug/build/shaderc-sys-5a70685a161dce1a/build-script-build` (exit status: 101)\n[Build and Test/Linux (Nightly)                     ]   |   --- stdout\n[Build and Test/Linux (Nightly)                     ]   |   cargo:warning=shaderc: searching for native shaderc libraries on system;  use '--features build-from-source' to force building from source code\n[Build and Test/Linux (Nightly)                     ]   |   cargo:warning=shaderc: cannot find native shaderc library on system; falling back to build from source\n[Build and Test/Linux (Nightly)                     ]   |   CMAKE_TOOLCHAIN_FILE_x86_64-unknown-linux-gnu = None\n[Build and Test/Linux (Nightly)                     ]   |   CMAKE_TOOLCHAIN_FILE_x86_64_unknown_linux_gnu = None\n[Build and Test/Linux (Nightly)                     ]   |   HOST_CMAKE_TOOLCHAIN_FILE = None\n[Build and Test/Linux (Nightly)                     ]   |   CMAKE_TOOLCHAIN_FILE = None\n[Build and Test/Linux (Nightly)                     ]   |   CMAKE_GENERATOR_x86_64-unknown-linux-gnu = None\n[Build and Test/Linux (Nightly)                     ]   |   CMAKE_GENERATOR_x86_64_unknown_linux_gnu = None\n[Build and Test/Linux (Nightly)                     ]   |   HOST_CMAKE_GENERATOR = None\n[Build and Test/Linux (Nightly)                     ]   |   CMAKE_GENERATOR = None\n[Build and Test/Linux (Nightly)                     ]   |   CMAKE_PREFIX_PATH_x86_64-unknown-linux-gnu = None\n[Build and Test/Linux (Nightly)                     ]   |   CMAKE_PREFIX_PATH_x86_64_unknown_linux_gnu = None\n[Build and Test/Linux (Nightly)                     ]   |   HOST_CMAKE_PREFIX_PATH = None\n[Build and Test/Linux (Nightly)                     ]   |   CMAKE_PREFIX_PATH = None\n[Build and Test/Linux (Nightly)                     ]   |   CMAKE_x86_64-unknown-linux-gnu = None\n[Build and Test/Linux (Nightly)                     ]   |   CMAKE_x86_64_unknown_linux_gnu = None\n[Build and Test/Linux (Nightly)                     ]   |   HOST_CMAKE = None\n[Build and Test/Linux (Nightly)                     ]   |   CMAKE = None\n[Build and Test/Linux (Nightly)                     ]   |   running: cd \"/tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/google-shaderc-rs/target/debug/build/shaderc-sys-7f9edafe8827a135/out/build\" && CMAKE_PREFIX_PATH=\"\" \"cmake\" \"/tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/google-shaderc-rs/shaderc-sys/build\" \"-DCMAKE_INSTALL_LIBDIR=lib\" \"-DCMAKE_POSITION_INDEPENDENT_CODE=ON\" \"-DENABLE_SPVREMAPPER=OFF\" \"-DENABLE_GLSLANG_BINARIES=OFF\" \"-DSHADERC_SKIP_TESTS=ON\" \"-DSPIRV_SKIP_EXECUTABLES=ON\" \"-DSPIRV_WERROR=OFF\" \"-DCMAKE_INSTALL_PREFIX=/tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/google-shaderc-rs/target/debug/build/shaderc-sys-7f9edafe8827a135/out\" \"-DCMAKE_C_FLAGS= -ffunction-sections -fdata-sections -fPIC -m64\" \"-DCMAKE_C_COMPILER=/usr/bin/cc\" \"-DCMAKE_CXX_FLAGS= -ffunction-sections -fdata-sections -fPIC -m64\" \"-DCMAKE_CXX_COMPILER=/usr/bin/c++\" \"-DCMAKE_ASM_FLAGS= -ffunction-sections -fdata-sections -fPIC -m64\" \"-DCMAKE_ASM_COMPILER=/usr/bin/cc\" \"-DCMAKE_BUILD_TYPE=Release\"\n[Build and Test/Linux (Nightly)                     ]   |   -- The C compiler identification is GNU 9.3.0\n[Build and Test/Linux (Nightly)                     ]   |   -- The CXX compiler identification is GNU 9.3.0\n[Build and Test/Linux (Nightly)                     ]   |   -- Detecting C compiler ABI info\n[Build and Test/Linux (Nightly)                     ]   |   -- Detecting C compiler ABI info - done\n[Build and Test/Linux (Nightly)                     ]   |   -- Check for working C compiler: /usr/bin/cc - skipped\n[Build and Test/Linux (Nightly)                     ]   |   -- Detecting C compile features\n[Build and Test/Linux (Nightly)                     ]   |   -- Detecting C compile features - done\n[Build and Test/Linux (Nightly)                     ]   |   -- Detecting CXX compiler ABI info\n[Build and Test/Linux (Nightly)                     ]   |   -- Detecting CXX compiler ABI info - done\n[Build and Test/Linux (Nightly)                     ]   |   -- Check for working CXX compiler: /usr/bin/c++ - skipped\n[Build and Test/Linux (Nightly)                     ]   |   -- Detecting CXX compile features\n[Build and Test/Linux (Nightly)                     ]   |   -- Detecting CXX compile features - done\n[Build and Test/Linux (Nightly)                     ]   |   -- Configuring incomplete, errors occurred!\n[Build and Test/Linux (Nightly)                     ]   |   See also \"/tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/google-shaderc-rs/target/debug/build/shaderc-sys-7f9edafe8827a135/out/build/CMakeFiles/CMakeOutput.log\".\n[Build and Test/Linux (Nightly)                     ]   | \n[Build and Test/Linux (Nightly)                     ]   |   --- stderr\n[Build and Test/Linux (Nightly)                     ]   |   CMake Error at CMakeLists.txt:10 (add_subdirectory):\n[Build and Test/Linux (Nightly)                     ]   |     The source directory\n[Build and Test/Linux (Nightly)                     ]   | \n[Build and Test/Linux (Nightly)                     ]   |       /tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/google-shaderc-rs/shaderc-sys/build/spirv-headers\n[Build and Test/Linux (Nightly)                     ]   | \n[Build and Test/Linux (Nightly)                     ]   |     does not contain a CMakeLists.txt file.\n[Build and Test/Linux (Nightly)                     ]   | \n[Build and Test/Linux (Nightly)                     ]   | \n[Build and Test/Linux (Nightly)                     ]   |   CMake Error at CMakeLists.txt:11 (add_subdirectory):\n[Build and Test/Linux (Nightly)                     ]   |     The source directory\n[Build and Test/Linux (Nightly)                     ]   | \n[Build and Test/Linux (Nightly)                     ]   |       /tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/google-shaderc-rs/shaderc-sys/build/spirv-tools\n[Build and Test/Linux (Nightly)                     ]   | \n[Build and Test/Linux (Nightly)                     ]   |     does not contain a CMakeLists.txt file.\n[Build and Test/Linux (Nightly)                     ]   | \n[Build and Test/Linux (Nightly)                     ]   | \n[Build and Test/Linux (Nightly)                     ]   |   CMake Error at CMakeLists.txt:12 (add_subdirectory):\n[Build and Test/Linux (Nightly)                     ]   |     The source directory\n[Build and Test/Linux (Nightly)                     ]   | \n[Build and Test/Linux (Nightly)                     ]   |       /tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/google-shaderc-rs/shaderc-sys/build/glslang\n[Build and Test/Linux (Nightly)                     ]   | \n[Build and Test/Linux (Nightly)                     ]   |     does not contain a CMakeLists.txt file.\n[Build and Test/Linux (Nightly)                     ]   | \n[Build and Test/Linux (Nightly)                     ]   | \n[Build and Test/Linux (Nightly)                     ]   |   CMake Error at CMakeLists.txt:13 (add_subdirectory):\n[Build and Test/Linux (Nightly)                     ]   |     The source directory\n[Build and Test/Linux (Nightly)                     ]   | \n[Build and Test/Linux (Nightly)                     ]   |       /tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/google-shaderc-rs/shaderc-sys/build/shaderc\n[Build and Test/Linux (Nightly)                     ]   | \n[Build and Test/Linux (Nightly)                     ]   |     does not contain a CMakeLists.txt file.\n[Build and Test/Linux (Nightly)                     ]   | \n[Build and Test/Linux (Nightly)                     ]   | \n[Build and Test/Linux (Nightly)                     ]   |   thread 'main' panicked at '\n[Build and Test/Linux (Nightly)                     ]   |   command did not execute successfully, got: exit status: 1\n[Build and Test/Linux (Nightly)                     ]   | \n[Build and Test/Linux (Nightly)                     ]   |   build script failed, must exit now', /home/runneradmin/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cmake-0.1.50/src/lib.rs:1098:5\n[Build and Test/Linux (Nightly)                     ]   |   note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n[Build and Test/Linux (Nightly)                     ]   \u2757  ::error::The process '/home/runneradmin/.cargo/bin/cargo' failed with exit code 101\n[Build and Test/Linux (Nightly)                     ]   \u274c  Failure - Main Run cargo build\n[Build and Test/Windows (Stable, MSVC, static CRT)  ]   | info: downloading component 'rust-std'\n[Build and Test/Windows (Stable, GNU)               ]   | info: downloading component 'rustc'\n[Build and Test/Windows (Stable, MSVC)              ]   | info: downloading component 'rustc'\n[Build and Test/Windows (Stable, MSVC, static CRT)  ]   | info: downloading component 'rustc'\n[Build and Test/Linux (Nightly)                     ] exitcode '1': failure\n[Build and Test/Windows (Stable, MSVC)              ]   | info: downloading component 'rustfmt'\n[Build and Test/Windows (Stable, MSVC)              ]   | info: installing component 'cargo'\n[Build and Test/Windows (Stable, GNU)               ]   | info: downloading component 'rustfmt'\n[Build and Test/Windows (Stable, MSVC, static CRT)  ]   | info: downloading component 'rustfmt'\n[Build and Test/Windows (Stable, GNU)               ]   | info: installing component 'cargo'\n[Build and Test/Windows (Stable, MSVC)              ]   | info: installing component 'clippy'\n[Build and Test/Windows (Stable, MSVC, static CRT)  ]   | info: installing component 'cargo'\n[Build and Test/Windows (Stable, MSVC)              ]   | info: installing component 'rust-docs'\n[Build and Test/Windows (Stable, GNU)               ]   | info: installing component 'clippy'\n[Build and Test/Windows (Stable, MSVC, static CRT)  ]   | info: installing component 'clippy'\n[Build and Test/Windows (Stable, GNU)               ]   | info: installing component 'rust-docs'\n[Build and Test/Windows (Stable, MSVC, static CRT)  ]   | info: installing component 'rust-docs'\n[Build and Test/Windows (Stable, MSVC)              ]   | info: installing component 'rust-std'\n[Build and Test/Windows (Stable, GNU)               ]   | info: installing component 'rust-std'\n[Build and Test/Windows (Stable, MSVC, static CRT)  ]   | info: installing component 'rust-std'\n[Build and Test/Windows (Stable, MSVC)              ]   | info: installing component 'rustc'\n[Build and Test/Windows (Stable, GNU)               ]   | info: installing component 'rustc'\n[Build and Test/Windows (Stable, MSVC, static CRT)  ]   | info: installing component 'rustc'\n[Build and Test/Windows (Stable, MSVC)              ]   | info: installing component 'rustfmt'\n[Build and Test/Windows (Stable, GNU)               ]   | info: installing component 'rustfmt'\n[Build and Test/Windows (Stable, GNU)               ]   | \n[Build and Test/Windows (Stable, GNU)               ]   |   stable-x86_64-unknown-linux-gnu installed - rustc 1.69.0 (84c898d65 2023-04-16)\n[Build and Test/Windows (Stable, GNU)               ]   | \n[Build and Test/Windows (Stable, GNU)               ]   | info: default toolchain set to 'stable-x86_64-unknown-linux-gnu'\n[Build and Test/Windows (Stable, GNU)               ]   | info: checking for self-update\n[Build and Test/Windows (Stable, GNU)               ]   | [command]/home/runneradmin/.cargo/bin/rustup override set stable\n[Build and Test/Windows (Stable, GNU)               ]   | info: using existing install for 'stable-x86_64-unknown-linux-gnu'\n[Build and Test/Windows (Stable, GNU)               ]   | info: override toolchain for '/tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/google-shaderc-rs' set to 'stable-x86_64-unknown-linux-gnu'\n[Build and Test/Windows (Stable, GNU)               ]   | \n[Build and Test/Windows (Stable, GNU)               ]   |   stable-x86_64-unknown-linux-gnu unchanged - rustc 1.69.0 (84c898d65 2023-04-16)\n[Build and Test/Windows (Stable, GNU)               ]   | \n[Build and Test/Windows (Stable, GNU)               ]   | [command]/home/runneradmin/.cargo/bin/rustup target add --toolchain stable x86_64-pc-windows-gnu\n[Build and Test/Windows (Stable, MSVC)              ]   | \n[Build and Test/Windows (Stable, MSVC)              ]   |   stable-x86_64-unknown-linux-gnu installed - rustc 1.69.0 (84c898d65 2023-04-16)\n[Build and Test/Windows (Stable, MSVC)              ]   | \n[Build and Test/Windows (Stable, MSVC)              ]   | info: default toolchain set to 'stable-x86_64-unknown-linux-gnu'\n[Build and Test/Windows (Stable, MSVC)              ]   | info: checking for self-update\n[Build and Test/Windows (Stable, GNU)               ]   | info: downloading component 'rust-std' for 'x86_64-pc-windows-gnu'\n[Build and Test/Windows (Stable, MSVC)              ]   | [command]/home/runneradmin/.cargo/bin/rustup override set stable\n[Build and Test/Windows (Stable, MSVC)              ]   | info: using existing install for 'stable-x86_64-unknown-linux-gnu'\n[Build and Test/Windows (Stable, MSVC)              ]   | info: override toolchain for '/tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/google-shaderc-rs' set to 'stable-x86_64-unknown-linux-gnu'\n[Build and Test/Windows (Stable, MSVC)              ]   | \n[Build and Test/Windows (Stable, MSVC)              ]   |   stable-x86_64-unknown-linux-gnu unchanged - rustc 1.69.0 (84c898d65 2023-04-16)\n[Build and Test/Windows (Stable, MSVC)              ]   | \n[Build and Test/Windows (Stable, MSVC)              ]   | [command]/home/runneradmin/.cargo/bin/rustup target add --toolchain stable x86_64-pc-windows-msvc\n[Build and Test/Windows (Stable, MSVC)              ]   | info: downloading component 'rust-std' for 'x86_64-pc-windows-msvc'\n[Build and Test/Windows (Stable, GNU)               ]   | info: installing component 'rust-std' for 'x86_64-pc-windows-gnu'\n[Build and Test/Windows (Stable, MSVC)              ]   | info: installing component 'rust-std' for 'x86_64-pc-windows-msvc'\n[Build and Test/Windows (Stable, MSVC, static CRT)  ]   | info: installing component 'rustfmt'\n[Build and Test/Windows (Stable, MSVC, static CRT)  ]   | \n[Build and Test/Windows (Stable, MSVC, static CRT)  ]   |   stable-x86_64-unknown-linux-gnu installed - rustc 1.69.0 (84c898d65 2023-04-16)\n[Build and Test/Windows (Stable, MSVC, static CRT)  ]   | \n[Build and Test/Windows (Stable, MSVC, static CRT)  ]   | info: default toolchain set to 'stable-x86_64-unknown-linux-gnu'\n[Build and Test/Windows (Stable, MSVC, static CRT)  ]   | info: checking for self-update\n[Build and Test/Windows (Stable, MSVC, static CRT)  ]   | [command]/home/runneradmin/.cargo/bin/rustup override set stable\n[Build and Test/Windows (Stable, MSVC, static CRT)  ]   | info: using existing install for 'stable-x86_64-unknown-linux-gnu'\n[Build and Test/Windows (Stable, MSVC, static CRT)  ]   | info: override toolchain for '/tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/google-shaderc-rs' set to 'stable-x86_64-unknown-linux-gnu'\n[Build and Test/Windows (Stable, MSVC, static CRT)  ]   | \n[Build and Test/Windows (Stable, MSVC, static CRT)  ]   |   stable-x86_64-unknown-linux-gnu unchanged - rustc 1.69.0 (84c898d65 2023-04-16)\n[Build and Test/Windows (Stable, MSVC, static CRT)  ]   | \n[Build and Test/Windows (Stable, MSVC, static CRT)  ]   | [command]/home/runneradmin/.cargo/bin/rustup target add --toolchain stable x86_64-pc-windows-msvc\n[Build and Test/Windows (Stable, MSVC, static CRT)  ]   | info: downloading component 'rust-std' for 'x86_64-pc-windows-msvc'\n[Build and Test/Windows (Stable, MSVC, static CRT)  ]   | info: installing component 'rust-std' for 'x86_64-pc-windows-msvc'\n[Build and Test/Windows (Stable, GNU)               ]   \u2753  ::group::Gathering installed versions\n[Build and Test/Windows (Stable, GNU)               ]   | [command]/home/runneradmin/.cargo/bin/rustc -V\n[Build and Test/Windows (Stable, GNU)               ]   | rustc 1.69.0 (84c898d65 2023-04-16)\n[Build and Test/Windows (Stable, GNU)               ]   \u2699  ::set-output:: rustc=1.69.0 (84c898d65 2023-04-16)\n[Build and Test/Windows (Stable, GNU)               ]   \u2699  ::set-output:: rustc_hash=84c898d65\n[Build and Test/Windows (Stable, GNU)               ]   | [command]/home/runneradmin/.cargo/bin/cargo -V\n[Build and Test/Windows (Stable, MSVC)              ]   \u2753  ::group::Gathering installed versions\n[Build and Test/Windows (Stable, MSVC)              ]   | [command]/home/runneradmin/.cargo/bin/rustc -V\n[Build and Test/Windows (Stable, GNU)               ]   | cargo 1.69.0 (6e9a83356 2023-04-12)\n[Build and Test/Windows (Stable, GNU)               ]   \u2699  ::set-output:: cargo=1.69.0 (6e9a83356 2023-04-12)\n[Build and Test/Windows (Stable, GNU)               ]   | [command]/home/runneradmin/.cargo/bin/rustup -V\n[Build and Test/Windows (Stable, GNU)               ]   | rustup 1.26.0 (5af9b9484 2023-04-05)\n[Build and Test/Windows (Stable, GNU)               ]   | info: This is the version for the rustup toolchain manager, not the rustc compiler.\n[Build and Test/Windows (Stable, MSVC)              ]   | rustc 1.69.0 (84c898d65 2023-04-16)\n[Build and Test/Windows (Stable, MSVC)              ]   \u2699  ::set-output:: rustc=1.69.0 (84c898d65 2023-04-16)\n[Build and Test/Windows (Stable, MSVC)              ]   \u2699  ::set-output:: rustc_hash=84c898d65\n[Build and Test/Windows (Stable, MSVC)              ]   | [command]/home/runneradmin/.cargo/bin/cargo -V\n[Build and Test/Windows (Stable, GNU)               ]   | info: The currently active `rustc` version is `rustc 1.69.0 (84c898d65 2023-04-16)`\n[Build and Test/Windows (Stable, GNU)               ]   \u2699  ::set-output:: rustup=1.26.0 (5af9b9484 2023-04-05)\n[Build and Test/Windows (Stable, GNU)               ]   \u2753  ::endgroup::\n[Build and Test/Windows (Stable, MSVC)              ]   | cargo 1.69.0 (6e9a83356 2023-04-12)\n[Build and Test/Windows (Stable, MSVC)              ]   \u2699  ::set-output:: cargo=1.69.0 (6e9a83356 2023-04-12)\n[Build and Test/Windows (Stable, MSVC)              ]   | [command]/home/runneradmin/.cargo/bin/rustup -V\n[Build and Test/Windows (Stable, GNU)               ]   \u2705  Success - Main Install latest stable Rust toolchain\n[Build and Test/Windows (Stable, MSVC)              ]   | rustup 1.26.0 (5af9b9484 2023-04-05)\n[Build and Test/Windows (Stable, MSVC)              ]   | info: This is the version for the rustup toolchain manager, not the rustc compiler.\n[Build and Test/Windows (Stable, MSVC)              ]   | info: The currently active `rustc` version is `rustc 1.69.0 (84c898d65 2023-04-16)`\n[Build and Test/Windows (Stable, MSVC)              ]   \u2699  ::set-output:: rustup=1.26.0 (5af9b9484 2023-04-05)\n[Build and Test/Windows (Stable, MSVC)              ]   \u2753  ::endgroup::\n[Build and Test/Windows (Stable, MSVC)              ]   \u2705  Success - Main Install latest stable Rust toolchain\n[Build and Test/Windows (Stable, MSVC)              ]   \u2699  ::add-path:: /home/runneradmin/.cargo/bin\n[Build and Test/Windows (Stable, GNU)               ]   \u2699  ::add-path:: /home/runneradmin/.cargo/bin\n[Build and Test/Windows (Stable, MSVC)              ] \u2b50 Run Main Run cargo build\n[Build and Test/Windows (Stable, GNU)               ] \u2b50 Run Main Run cargo build\n[Build and Test/Windows (Stable, GNU)               ]   \ud83d\udc33  docker cp src=/home/andre-silva/.cache/act/actions-rs-cargo@v1/ dst=/var/run/act/actions/actions-rs-cargo@v1/\n[Build and Test/Windows (Stable, MSVC)              ]   \ud83d\udc33  docker cp src=/home/andre-silva/.cache/act/actions-rs-cargo@v1/ dst=/var/run/act/actions/actions-rs-cargo@v1/\n[Build and Test/Windows (Stable, MSVC, static CRT)  ]   \u2753  ::group::Gathering installed versions\n[Build and Test/Windows (Stable, MSVC, static CRT)  ]   | [command]/home/runneradmin/.cargo/bin/rustc -V\n[Build and Test/Windows (Stable, MSVC, static CRT)  ]   | rustc 1.69.0 (84c898d65 2023-04-16)\n[Build and Test/Windows (Stable, MSVC, static CRT)  ]   \u2699  ::set-output:: rustc=1.69.0 (84c898d65 2023-04-16)\n[Build and Test/Windows (Stable, MSVC, static CRT)  ]   \u2699  ::set-output:: rustc_hash=84c898d65\n[Build and Test/Windows (Stable, MSVC, static CRT)  ]   | [command]/home/runneradmin/.cargo/bin/cargo -V\n[Build and Test/Windows (Stable, MSVC, static CRT)  ]   | cargo 1.69.0 (6e9a83356 2023-04-12)\n[Build and Test/Windows (Stable, MSVC, static CRT)  ]   \u2699  ::set-output:: cargo=1.69.0 (6e9a83356 2023-04-12)\n[Build and Test/Windows (Stable, MSVC, static CRT)  ]   | [command]/home/runneradmin/.cargo/bin/rustup -V\n[Build and Test/Windows (Stable, MSVC, static CRT)  ]   | rustup 1.26.0 (5af9b9484 2023-04-05)\n[Build and Test/Windows (Stable, MSVC, static CRT)  ]   | info: This is the version for the rustup toolchain manager, not the rustc compiler.\n[Build and Test/Windows (Stable, MSVC, static CRT)  ]   | info: The currently active `rustc` version is `rustc 1.69.0 (84c898d65 2023-04-16)`\n[Build and Test/Windows (Stable, MSVC, static CRT)  ]   \u2699  ::set-output:: rustup=1.26.0 (5af9b9484 2023-04-05)\n[Build and Test/Windows (Stable, MSVC, static CRT)  ]   \u2753  ::endgroup::\n[Build and Test/Windows (Stable, MSVC)              ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /var/run/act/actions/actions-rs-cargo@v1/] user=0 workdir=\n[Build and Test/Windows (Stable, MSVC, static CRT)  ]   \u2705  Success - Main Install latest stable Rust toolchain\n[Build and Test/Windows (Stable, GNU)               ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /var/run/act/actions/actions-rs-cargo@v1/] user=0 workdir=\n[Build and Test/Windows (Stable, MSVC, static CRT)  ]   \u2699  ::add-path:: /home/runneradmin/.cargo/bin\n[Build and Test/Windows (Stable, MSVC, static CRT)  ] \u2b50 Run Main Run cargo build\n[Build and Test/Windows (Stable, MSVC, static CRT)  ]   \ud83d\udc33  docker cp src=/home/andre-silva/.cache/act/actions-rs-cargo@v1/ dst=/var/run/act/actions/actions-rs-cargo@v1/\n[Build and Test/Windows (Stable, MSVC, static CRT)  ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /var/run/act/actions/actions-rs-cargo@v1/] user=0 workdir=\n[Build and Test/Linux (Nightly)                     ] failed to remove container: Delete \"http://%2Fvar%2Frun%2Fdocker.sock/v1.41/containers/67e39d1fdba80c9b9e35e7ffe73ccb3736fd4ddc802868ed08a68b45c0745394?force=1&v=1\": context deadline exceeded\n[Build and Test/Linux (Nightly)                     ] \ud83c\udfc1  Job failed\n[Build and Test/Windows (Stable, MSVC)              ]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/actions-rs-cargo@v1/dist/index.js] user= workdir=\n[Build and Test/Windows (Stable, GNU)               ]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/actions-rs-cargo@v1/dist/index.js] user= workdir=\n[Build and Test/Windows (Stable, MSVC, static CRT)  ]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/actions-rs-cargo@v1/dist/index.js] user= workdir=\n[Build and Test/Windows (Stable, MSVC, static CRT)  ]   \u2753 add-matcher /run/act/actions/actions-rs-cargo@v1/dist/.matchers/rust.json\n[Build and Test/Windows (Stable, MSVC, static CRT)  ]   | [command]/home/runneradmin/.cargo/bin/cargo build --target x86_64-pc-windows-msvc --verbose\n[Build and Test/Windows (Stable, GNU)               ]   \u2753 add-matcher /run/act/actions/actions-rs-cargo@v1/dist/.matchers/rust.json\n[Build and Test/Windows (Stable, MSVC)              ]   \u2753 add-matcher /run/act/actions/actions-rs-cargo@v1/dist/.matchers/rust.json\n[Build and Test/Windows (Stable, GNU)               ]   | [command]/home/runneradmin/.cargo/bin/cargo build --target x86_64-pc-windows-gnu --verbose\n[Build and Test/Windows (Stable, MSVC)              ]   | [command]/home/runneradmin/.cargo/bin/cargo build --target x86_64-pc-windows-msvc --verbose\n[Build and Test/Windows (Stable, MSVC, static CRT)  ]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m    Updating\u001b[0m crates.io index\n[Build and Test/Windows (Stable, MSVC)              ]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m    Updating\u001b[0m crates.io index\n[Build and Test/Windows (Stable, GNU)               ]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m    Updating\u001b[0m crates.io index\n[Build and Test/iOS (Stable, ARM, Cross Compilation)]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m Downloading\u001b[0m crates ...\n[Build and Test/iOS (Stable, ARM, Cross Compilation)]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m  Downloaded\u001b[0m roxmltree v0.14.1\n[Build and Test/iOS (Stable, ARM, Cross Compilation)]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m  Downloaded\u001b[0m xmlparser v0.13.5\n[Build and Test/iOS (Stable, ARM, Cross Compilation)]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m  Downloaded\u001b[0m libc v0.2.144\n[Build and Test/iOS (Stable, ARM, Cross Compilation)]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m  Downloaded\u001b[0m cc v1.0.79\n[Build and Test/iOS (Stable, ARM, Cross Compilation)]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m  Downloaded\u001b[0m cmake v0.1.50\n[Build and Test/iOS (Stable, ARM, Cross Compilation)]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m   Compiling\u001b[0m xmlparser v0.13.5\n[Build and Test/iOS (Stable, ARM, Cross Compilation)]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m   Compiling\u001b[0m cc v1.0.79\n[Build and Test/iOS (Stable, ARM, Cross Compilation)]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m   Compiling\u001b[0m libc v0.2.144\n[Build and Test/iOS (Stable, ARM, Cross Compilation)]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m     Running\u001b[0m `rustc --crate-name cc --edition=2018 /home/runneradmin/.cargo/registry/src/github.com-1ecc6299db9ec823/cc-1.0.79/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C embed-bitcode=no -C debuginfo=2 -C metadata=7c72c9c9e145981d -C extra-filename=-7c72c9c9e145981d --out-dir /tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/google-shaderc-rs/target/debug/deps -L dependency=/tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/google-shaderc-rs/target/debug/deps --cap-lints allow`\n[Build and Test/iOS (Stable, ARM, Cross Compilation)]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m     Running\u001b[0m `rustc --crate-name build_script_build /home/runneradmin/.cargo/registry/src/github.com-1ecc6299db9ec823/libc-0.2.144/build.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type bin --emit=dep-info,link -C embed-bitcode=no -C debuginfo=2 --cfg 'feature=\"default\"' --cfg 'feature=\"std\"' -C metadata=3f27a3cf1ea4e269 -C extra-filename=-3f27a3cf1ea4e269 --out-dir /tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/google-shaderc-rs/target/debug/build/libc-3f27a3cf1ea4e269 -L dependency=/tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/google-shaderc-rs/target/debug/deps --cap-lints allow`\n[Build and Test/iOS (Stable, ARM, Cross Compilation)]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m     Running\u001b[0m `rustc --crate-name xmlparser --edition=2018 /home/runneradmin/.cargo/registry/src/github.com-1ecc6299db9ec823/xmlparser-0.13.5/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C embed-bitcode=no -C debuginfo=2 --cfg 'feature=\"default\"' --cfg 'feature=\"std\"' -C metadata=d3269e7b99767005 -C extra-filename=-d3269e7b99767005 --out-dir /tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/google-shaderc-rs/target/debug/deps -L dependency=/tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/google-shaderc-rs/target/debug/deps --cap-lints allow`\n[Build and Test/iOS (Stable, ARM, Cross Compilation)]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m   Compiling\u001b[0m roxmltree v0.14.1\n[Build and Test/iOS (Stable, ARM, Cross Compilation)]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m     Running\u001b[0m `rustc --crate-name roxmltree --edition=2018 /home/runneradmin/.cargo/registry/src/github.com-1ecc6299db9ec823/roxmltree-0.14.1/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C embed-bitcode=no -C debuginfo=2 --cfg 'feature=\"default\"' --cfg 'feature=\"std\"' -C metadata=be1ea42d39ac3652 -C extra-filename=-be1ea42d39ac3652 --out-dir /tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/google-shaderc-rs/target/debug/deps -L dependency=/tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/google-shaderc-rs/target/debug/deps --extern xmlparser=/tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/google-shaderc-rs/target/debug/deps/libxmlparser-d3269e7b99767005.rmeta --cap-lints allow`\n[Build and Test/iOS (Stable, ARM, Cross Compilation)]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m     Running\u001b[0m `/tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/google-shaderc-rs/target/debug/build/libc-3f27a3cf1ea4e269/build-script-build`\n[Build and Test/iOS (Stable, ARM, Cross Compilation)]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m     Running\u001b[0m `rustc --crate-name libc /home/runneradmin/.cargo/registry/src/github.com-1ecc6299db9ec823/libc-0.2.144/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C embed-bitcode=no -C split-debuginfo=unpacked -C debuginfo=2 --cfg 'feature=\"default\"' --cfg 'feature=\"std\"' -C metadata=e786d02ea4a3f6a9 -C extra-filename=-e786d02ea4a3f6a9 --out-dir /tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/google-shaderc-rs/target/aarch64-apple-ios/debug/deps --target aarch64-apple-ios -L dependency=/tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/google-shaderc-rs/target/aarch64-apple-ios/debug/deps -L dependency=/tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/google-shaderc-rs/target/debug/deps --cap-lints allow --cfg freebsd11 --cfg libc_priv_mod_use --cfg libc_union --cfg libc_const_size_of --cfg libc_align --cfg libc_int128 --cfg libc_core_cvoid --cfg libc_packedN --cfg libc_cfg_target_vendor --cfg libc_non_exhaustive --cfg libc_long_array --cfg libc_ptr_addr_of --cfg libc_underscore_const_names --cfg libc_const_extern_fn`\n[Build and Test/iOS (Stable, ARM, Cross Compilation)]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m   Compiling\u001b[0m cmake v0.1.50\n[Build and Test/iOS (Stable, ARM, Cross Compilation)]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m     Running\u001b[0m `rustc --crate-name cmake --edition=2021 /home/runneradmin/.cargo/registry/src/github.com-1ecc6299db9ec823/cmake-0.1.50/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C embed-bitcode=no -C debuginfo=2 -C metadata=5eacbc2a2e23291c -C extra-filename=-5eacbc2a2e23291c --out-dir /tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/google-shaderc-rs/target/debug/deps -L dependency=/tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/google-shaderc-rs/target/debug/deps --extern cc=/tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/google-shaderc-rs/target/debug/deps/libcc-7c72c9c9e145981d.rmeta --cap-lints allow`\n[Build and Test/iOS (Stable, ARM, Cross Compilation)]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m   Compiling\u001b[0m shaderc-sys v0.8.2 (/tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/google-shaderc-rs/shaderc-sys)\n[Build and Test/iOS (Stable, ARM, Cross Compilation)]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m     Running\u001b[0m `rustc --crate-name build_script_build shaderc-sys/build/build.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type bin --emit=dep-info,link -C embed-bitcode=no -C debuginfo=2 -C metadata=18e8b994afee0b77 -C extra-filename=-18e8b994afee0b77 --out-dir /tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/google-shaderc-rs/target/debug/build/shaderc-sys-18e8b994afee0b77 -C incremental=/tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/google-shaderc-rs/target/debug/incremental -L dependency=/tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/google-shaderc-rs/target/debug/deps --extern cmake=/tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/google-shaderc-rs/target/debug/deps/libcmake-5eacbc2a2e23291c.rlib --extern roxmltree=/tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/google-shaderc-rs/target/debug/deps/libroxmltree-be1ea42d39ac3652.rlib`\n[Build and Test/iOS (Stable, ARM, Cross Compilation)]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m     Running\u001b[0m `/tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/google-shaderc-rs/target/debug/build/shaderc-sys-18e8b994afee0b77/build-script-build`\n[Build and Test/iOS (Stable, ARM, Cross Compilation)]   | The following warnings were emitted during compilation:\n[Build and Test/iOS (Stable, ARM, Cross Compilation)]   | \n[Build and Test/iOS (Stable, ARM, Cross Compilation)]   | \u001b[0m\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[1m:\u001b[0m shaderc: searching for native shaderc libraries on system;  use '--features build-from-source' to force building from source code\n[Build and Test/iOS (Stable, ARM, Cross Compilation)]   | \u001b[0m\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[1m:\u001b[0m shaderc: cannot find native shaderc library on system; falling back to build from source\n[Build and Test/iOS (Stable, ARM, Cross Compilation)]   | \n[Build and Test/iOS (Stable, ARM, Cross Compilation)]   | \u001b[0m\u001b[0m\u001b[1m\u001b[31merror\u001b[0m\u001b[1m:\u001b[0m failed to run custom build command for `shaderc-sys v0.8.2 (/tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/google-shaderc-rs/shaderc-sys)`\n[Build and Test/iOS (Stable, ARM, Cross Compilation)]   | \n[Build and Test/iOS (Stable, ARM, Cross Compilation)]   | Caused by:\n[Build and Test/iOS (Stable, ARM, Cross Compilation)]   |   process didn't exit successfully: `/tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/google-shaderc-rs/target/debug/build/shaderc-sys-18e8b994afee0b77/build-script-build` (exit status: 1)\n[Build and Test/iOS (Stable, ARM, Cross Compilation)]   |   --- stdout\n[Build and Test/iOS (Stable, ARM, Cross Compilation)]   |   cargo:warning=shaderc: searching for native shaderc libraries on system;  use '--features build-from-source' to force building from source code\n[Build and Test/iOS (Stable, ARM, Cross Compilation)]   |   cargo:warning=shaderc: cannot find native shaderc library on system; falling back to build from source\n[Build and Test/iOS (Stable, ARM, Cross Compilation)]   |   CMAKE_TOOLCHAIN_FILE_aarch64-apple-ios = None\n[Build and Test/iOS (Stable, ARM, Cross Compilation)]   |   CMAKE_TOOLCHAIN_FILE_aarch64_apple_ios = None\n[Build and Test/iOS (Stable, ARM, Cross Compilation)]   |   TARGET_CMAKE_TOOLCHAIN_FILE = None\n[Build and Test/iOS (Stable, ARM, Cross Compilation)]   |   CMAKE_TOOLCHAIN_FILE = None\n[Build and Test/iOS (Stable, ARM, Cross Compilation)]   |   CMAKE_GENERATOR_aarch64-apple-ios = None\n[Build and Test/iOS (Stable, ARM, Cross Compilation)]   |   CMAKE_GENERATOR_aarch64_apple_ios = None\n[Build and Test/iOS (Stable, ARM, Cross Compilation)]   |   TARGET_CMAKE_GENERATOR = None\n[Build and Test/iOS (Stable, ARM, Cross Compilation)]   |   CMAKE_GENERATOR = None\n[Build and Test/iOS (Stable, ARM, Cross Compilation)]   |   running: \"xcrun\" \"--show-sdk-path\" \"--sdk\" \"iphoneos\"\n[Build and Test/iOS (Stable, ARM, Cross Compilation)]   | \n[Build and Test/iOS (Stable, ARM, Cross Compilation)]   |   --- stderr\n[Build and Test/iOS (Stable, ARM, Cross Compilation)]   | \n[Build and Test/iOS (Stable, ARM, Cross Compilation)]   | \n[Build and Test/iOS (Stable, ARM, Cross Compilation)]   |   error occurred: Failed to find tool. Is `xcrun` installed?\n[Build and Test/iOS (Stable, ARM, Cross Compilation)]   | \n[Build and Test/iOS (Stable, ARM, Cross Compilation)]   | \n[Build and Test/iOS (Stable, ARM, Cross Compilation)]   \u2757  ::error::The process '/home/runneradmin/.cargo/bin/cargo' failed with exit code 101\n[Build and Test/iOS (Stable, ARM, Cross Compilation)]   \u274c  Failure - Main Run cargo build\n[Build and Test/iOS (Stable, ARM, Cross Compilation)] exitcode '1': failure\n[Build and Test/Linux (Stable)                      ]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m Downloading\u001b[0m crates ...\n[Build and Test/Linux (Stable)                      ]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m  Downloaded\u001b[0m cc v1.0.79\n[Build and Test/Linux (Stable)                      ]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m  Downloaded\u001b[0m cmake v0.1.50\n[Build and Test/Linux (Stable)                      ]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m  Downloaded\u001b[0m xmlparser v0.13.5\n[Build and Test/Linux (Stable)                      ]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m  Downloaded\u001b[0m roxmltree v0.14.1\n[Build and Test/Linux (Stable)                      ]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m  Downloaded\u001b[0m libc v0.2.144\n[Build and Test/Linux (Stable)                      ]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m   Compiling\u001b[0m cc v1.0.79\n[Build and Test/Linux (Stable)                      ]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m   Compiling\u001b[0m xmlparser v0.13.5\n[Build and Test/Linux (Stable)                      ]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m   Compiling\u001b[0m libc v0.2.144\n[Build and Test/Linux (Stable)                      ]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m     Running\u001b[0m `rustc --crate-name cc --edition=2018 /home/runneradmin/.cargo/registry/src/github.com-1ecc6299db9ec823/cc-1.0.79/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C embed-bitcode=no -C metadata=6d71334a69aaf663 -C extra-filename=-6d71334a69aaf663 --out-dir /tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/google-shaderc-rs/target/debug/deps -L dependency=/tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/google-shaderc-rs/target/debug/deps --cap-lints allow`\n[Build and Test/Linux (Stable)                      ]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m     Running\u001b[0m `rustc --crate-name build_script_build /home/runneradmin/.cargo/registry/src/github.com-1ecc6299db9ec823/libc-0.2.144/build.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type bin --emit=dep-info,link -C embed-bitcode=no --cfg 'feature=\"default\"' --cfg 'feature=\"std\"' -C metadata=846389a75a4e7e20 -C extra-filename=-846389a75a4e7e20 --out-dir /tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/google-shaderc-rs/target/debug/build/libc-846389a75a4e7e20 -L dependency=/tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/google-shaderc-rs/target/debug/deps --cap-lints allow`\n[Build and Test/Linux (Stable)                      ]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m     Running\u001b[0m `rustc --crate-name xmlparser --edition=2018 /home/runneradmin/.cargo/registry/src/github.com-1ecc6299db9ec823/xmlparser-0.13.5/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C embed-bitcode=no --cfg 'feature=\"default\"' --cfg 'feature=\"std\"' -C metadata=70afa9efbdc80be0 -C extra-filename=-70afa9efbdc80be0 --out-dir /tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/google-shaderc-rs/target/debug/deps -L dependency=/tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/google-shaderc-rs/target/debug/deps --cap-lints allow`\n[Build and Test/Linux (Stable)                      ]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m   Compiling\u001b[0m roxmltree v0.14.1\n[Build and Test/Linux (Stable)                      ]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m     Running\u001b[0m `rustc --crate-name roxmltree --edition=2018 /home/runneradmin/.cargo/registry/src/github.com-1ecc6299db9ec823/roxmltree-0.14.1/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C embed-bitcode=no --cfg 'feature=\"default\"' --cfg 'feature=\"std\"' -C metadata=553d88d1611a410b -C extra-filename=-553d88d1611a410b --out-dir /tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/google-shaderc-rs/target/debug/deps -L dependency=/tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/google-shaderc-rs/target/debug/deps --extern xmlparser=/tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/google-shaderc-rs/target/debug/deps/libxmlparser-70afa9efbdc80be0.rmeta --cap-lints allow`\n[Build and Test/Linux (Stable)                      ]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m     Running\u001b[0m `/tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/google-shaderc-rs/target/debug/build/libc-846389a75a4e7e20/build-script-build`\n[Build and Test/Linux (Stable)                      ]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m     Running\u001b[0m `rustc --crate-name libc /home/runneradmin/.cargo/registry/src/github.com-1ecc6299db9ec823/libc-0.2.144/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C embed-bitcode=no -C debuginfo=2 --cfg 'feature=\"default\"' --cfg 'feature=\"std\"' -C metadata=a0d5081a487339cb -C extra-filename=-a0d5081a487339cb --out-dir /tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/google-shaderc-rs/target/debug/deps -L dependency=/tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/google-shaderc-rs/target/debug/deps --cap-lints allow --cfg freebsd11 --cfg libc_priv_mod_use --cfg libc_union --cfg libc_const_size_of --cfg libc_align --cfg libc_int128 --cfg libc_core_cvoid --cfg libc_packedN --cfg libc_cfg_target_vendor --cfg libc_non_exhaustive --cfg libc_long_array --cfg libc_ptr_addr_of --cfg libc_underscore_const_names --cfg libc_const_extern_fn`\n[Build and Test/Linux (Stable)                      ]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m   Compiling\u001b[0m cmake v0.1.50\n[Build and Test/Linux (Stable)                      ]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m     Running\u001b[0m `rustc --crate-name cmake --edition=2021 /home/runneradmin/.cargo/registry/src/github.com-1ecc6299db9ec823/cmake-0.1.50/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C embed-bitcode=no -C metadata=87622b49db9304e9 -C extra-filename=-87622b49db9304e9 --out-dir /tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/google-shaderc-rs/target/debug/deps -L dependency=/tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/google-shaderc-rs/target/debug/deps --extern cc=/tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/google-shaderc-rs/target/debug/deps/libcc-6d71334a69aaf663.rmeta --cap-lints allow`\n[Build and Test/Linux (Stable)                      ]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m   Compiling\u001b[0m shaderc-sys v0.8.2 (/tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/google-shaderc-rs/shaderc-sys)\n[Build and Test/Linux (Stable)                      ]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m     Running\u001b[0m `rustc --crate-name build_script_build shaderc-sys/build/build.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type bin --emit=dep-info,link -C embed-bitcode=no -C metadata=a70407f8576c83e6 -C extra-filename=-a70407f8576c83e6 --out-dir /tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/google-shaderc-rs/target/debug/build/shaderc-sys-a70407f8576c83e6 -C incremental=/tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/google-shaderc-rs/target/debug/incremental -L dependency=/tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/google-shaderc-rs/target/debug/deps --extern cmake=/tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/google-shaderc-rs/target/debug/deps/libcmake-87622b49db9304e9.rlib --extern roxmltree=/tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/google-shaderc-rs/target/debug/deps/libroxmltree-553d88d1611a410b.rlib`\n[Build and Test/Linux (Stable)                      ]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m     Running\u001b[0m `/tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/google-shaderc-rs/target/debug/build/shaderc-sys-a70407f8576c83e6/build-script-build`\n[Build and Test/Linux (Stable)                      ]   | The following warnings were emitted during compilation:\n[Build and Test/Linux (Stable)                      ]   | \n[Build and Test/Linux (Stable)                      ]   | \u001b[0m\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[1m:\u001b[0m shaderc: searching for native shaderc libraries on system;  use '--features build-from-source' to force building from source code\n[Build and Test/Linux (Stable)                      ]   | \u001b[0m\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[1m:\u001b[0m shaderc: cannot find native shaderc library on system; falling back to build from source\n[Build and Test/Linux (Stable)                      ]   | \n[Build and Test/Linux (Stable)                      ]   | \u001b[0m\u001b[0m\u001b[1m\u001b[31merror\u001b[0m\u001b[1m:\u001b[0m failed to run custom build command for `shaderc-sys v0.8.2 (/tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/google-shaderc-rs/shaderc-sys)`\n[Build and Test/Linux (Stable)                      ]   | \n[Build and Test/Linux (Stable)                      ]   | Caused by:\n[Build and Test/Linux (Stable)                      ]   |   process didn't exit successfully: `/tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/google-shaderc-rs/target/debug/build/shaderc-sys-a70407f8576c83e6/build-script-build` (exit status: 101)\n[Build and Test/Linux (Stable)                      ]   |   --- stdout\n[Build and Test/Linux (Stable)                      ]   |   cargo:warning=shaderc: searching for native shaderc libraries on system;  use '--features build-from-source' to force building from source code\n[Build and Test/Linux (Stable)                      ]   |   cargo:warning=shaderc: cannot find native shaderc library on system; falling back to build from source\n[Build and Test/Linux (Stable)                      ]   |   CMAKE_TOOLCHAIN_FILE_x86_64-unknown-linux-gnu = None\n[Build and Test/Linux (Stable)                      ]   |   CMAKE_TOOLCHAIN_FILE_x86_64_unknown_linux_gnu = None\n[Build and Test/Linux (Stable)                      ]   |   HOST_CMAKE_TOOLCHAIN_FILE = None\n[Build and Test/Linux (Stable)                      ]   |   CMAKE_TOOLCHAIN_FILE = None\n[Build and Test/Linux (Stable)                      ]   |   CMAKE_GENERATOR_x86_64-unknown-linux-gnu = None\n[Build and Test/Linux (Stable)                      ]   |   CMAKE_GENERATOR_x86_64_unknown_linux_gnu = None\n[Build and Test/Linux (Stable)                      ]   |   HOST_CMAKE_GENERATOR = None\n[Build and Test/Linux (Stable)                      ]   |   CMAKE_GENERATOR = None\n[Build and Test/Linux (Stable)                      ]   |   CMAKE_PREFIX_PATH_x86_64-unknown-linux-gnu = None\n[Build and Test/Linux (Stable)                      ]   |   CMAKE_PREFIX_PATH_x86_64_unknown_linux_gnu = None\n[Build and Test/Linux (Stable)                      ]   |   HOST_CMAKE_PREFIX_PATH = None\n[Build and Test/Linux (Stable)                      ]   |   CMAKE_PREFIX_PATH = None\n[Build and Test/Linux (Stable)                      ]   |   CMAKE_x86_64-unknown-linux-gnu = None\n[Build and Test/Linux (Stable)                      ]   |   CMAKE_x86_64_unknown_linux_gnu = None\n[Build and Test/Linux (Stable)                      ]   |   HOST_CMAKE = None\n[Build and Test/Linux (Stable)                      ]   |   CMAKE = None\n[Build and Test/Linux (Stable)                      ]   |   running: cd \"/tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/google-shaderc-rs/target/debug/build/shaderc-sys-1d12385bd3775642/out/build\" && CMAKE_PREFIX_PATH=\"\" \"cmake\" \"/tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/google-shaderc-rs/shaderc-sys/build\" \"-DCMAKE_INSTALL_LIBDIR=lib\" \"-DCMAKE_POSITION_INDEPENDENT_CODE=ON\" \"-DENABLE_SPVREMAPPER=OFF\" \"-DENABLE_GLSLANG_BINARIES=OFF\" \"-DSHADERC_SKIP_TESTS=ON\" \"-DSPIRV_SKIP_EXECUTABLES=ON\" \"-DSPIRV_WERROR=OFF\" \"-DCMAKE_INSTALL_PREFIX=/tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/google-shaderc-rs/target/debug/build/shaderc-sys-1d12385bd3775642/out\" \"-DCMAKE_C_FLAGS= -ffunction-sections -fdata-sections -fPIC -m64\" \"-DCMAKE_C_COMPILER=/usr/bin/cc\" \"-DCMAKE_CXX_FLAGS= -ffunction-sections -fdata-sections -fPIC -m64\" \"-DCMAKE_CXX_COMPILER=/usr/bin/c++\" \"-DCMAKE_ASM_FLAGS= -ffunction-sections -fdata-sections -fPIC -m64\" \"-DCMAKE_ASM_COMPILER=/usr/bin/cc\" \"-DCMAKE_BUILD_TYPE=Release\"\n[Build and Test/Linux (Stable)                      ]   |   -- The C compiler identification is GNU 9.3.0\n[Build and Test/Linux (Stable)                      ]   |   -- The CXX compiler identification is GNU 9.3.0\n[Build and Test/Linux (Stable)                      ]   |   -- Detecting C compiler ABI info\n[Build and Test/Linux (Stable)                      ]   |   -- Detecting C compiler ABI info - done\n[Build and Test/Linux (Stable)                      ]   |   -- Check for working C compiler: /usr/bin/cc - skipped\n[Build and Test/Linux (Stable)                      ]   |   -- Detecting C compile features\n[Build and Test/Linux (Stable)                      ]   |   -- Detecting C compile features - done\n[Build and Test/Linux (Stable)                      ]   |   -- Detecting CXX compiler ABI info\n[Build and Test/Linux (Stable)                      ]   |   -- Detecting CXX compiler ABI info - done\n[Build and Test/Linux (Stable)                      ]   |   -- Check for working CXX compiler: /usr/bin/c++ - skipped\n[Build and Test/Linux (Stable)                      ]   |   -- Detecting CXX compile features\n[Build and Test/Linux (Stable)                      ]   |   -- Detecting CXX compile features - done\n[Build and Test/Linux (Stable)                      ]   |   -- Configuring incomplete, errors occurred!\n[Build and Test/Linux (Stable)                      ]   |   See also \"/tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/google-shaderc-rs/target/debug/build/shaderc-sys-1d12385bd3775642/out/build/CMakeFiles/CMakeOutput.log\".\n[Build and Test/Linux (Stable)                      ]   | \n[Build and Test/Linux (Stable)                      ]   |   --- stderr\n[Build and Test/Linux (Stable)                      ]   |   CMake Error at CMakeLists.txt:10 (add_subdirectory):\n[Build and Test/Linux (Stable)                      ]   |     The source directory\n[Build and Test/Linux (Stable)                      ]   | \n[Build and Test/Linux (Stable)                      ]   |       /tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/google-shaderc-rs/shaderc-sys/build/spirv-headers\n[Build and Test/Linux (Stable)                      ]   | \n[Build and Test/Linux (Stable)                      ]   |     does not contain a CMakeLists.txt file.\n[Build and Test/Linux (Stable)                      ]   | \n[Build and Test/Linux (Stable)                      ]   | \n[Build and Test/Linux (Stable)                      ]   |   CMake Error at CMakeLists.txt:11 (add_subdirectory):\n[Build and Test/Linux (Stable)                      ]   |     The source directory\n[Build and Test/Linux (Stable)                      ]   | \n[Build and Test/Linux (Stable)                      ]   |       /tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/google-shaderc-rs/shaderc-sys/build/spirv-tools\n[Build and Test/Linux (Stable)                      ]   | \n[Build and Test/Linux (Stable)                      ]   |     does not contain a CMakeLists.txt file.\n[Build and Test/Linux (Stable)                      ]   | \n[Build and Test/Linux (Stable)                      ]   | \n[Build and Test/Linux (Stable)                      ]   |   CMake Error at CMakeLists.txt:12 (add_subdirectory):\n[Build and Test/Linux (Stable)                      ]   |     The source directory\n[Build and Test/Linux (Stable)                      ]   | \n[Build and Test/Linux (Stable)                      ]   |       /tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/google-shaderc-rs/shaderc-sys/build/glslang\n[Build and Test/Linux (Stable)                      ]   | \n[Build and Test/Linux (Stable)                      ]   |     does not contain a CMakeLists.txt file.\n[Build and Test/Linux (Stable)                      ]   | \n[Build and Test/Linux (Stable)                      ]   | \n[Build and Test/Linux (Stable)                      ]   |   CMake Error at CMakeLists.txt:13 (add_subdirectory):\n[Build and Test/Linux (Stable)                      ]   |     The source directory\n[Build and Test/Linux (Stable)                      ]   | \n[Build and Test/Linux (Stable)                      ]   |       /tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/google-shaderc-rs/shaderc-sys/build/shaderc\n[Build and Test/Linux (Stable)                      ]   | \n[Build and Test/Linux (Stable)                      ]   |     does not contain a CMakeLists.txt file.\n[Build and Test/Linux (Stable)                      ]   | \n[Build and Test/Linux (Stable)                      ]   | \n[Build and Test/Linux (Stable)                      ]   |   thread 'main' panicked at '\n[Build and Test/Linux (Stable)                      ]   |   command did not execute successfully, got: exit status: 1\n[Build and Test/Linux (Stable)                      ]   | \n[Build and Test/Linux (Stable)                      ]   |   build script failed, must exit now', /home/runneradmin/.cargo/registry/src/github.com-1ecc6299db9ec823/cmake-0.1.50/src/lib.rs:1098:5\n[Build and Test/Linux (Stable)                      ]   |   note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n[Build and Test/Linux (Stable)                      ]   \u2757  ::error::The process '/home/runneradmin/.cargo/bin/cargo' failed with exit code 101\n[Build and Test/Linux (Stable)                      ]   \u274c  Failure - Main Run cargo build\n[Build and Test/Linux (Stable)                      ] exitcode '1': failure\n[Build and Test/iOS (Stable, ARM, Cross Compilation)] \ud83c\udfc1  Job failed\n[Build and Test/Linux (Stable)                      ] \ud83c\udfc1  Job failed\n[Build and Test/Windows (Stable, MSVC, static CRT)  ]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m Downloading\u001b[0m crates ...\n[Build and Test/Windows (Stable, MSVC, static CRT)  ]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m  Downloaded\u001b[0m roxmltree v0.14.1\n[Build and Test/Windows (Stable, MSVC, static CRT)  ]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m  Downloaded\u001b[0m xmlparser v0.13.5\n[Build and Test/Windows (Stable, MSVC, static CRT)  ]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m  Downloaded\u001b[0m cmake v0.1.50\n[Build and Test/Windows (Stable, MSVC, static CRT)  ]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m  Downloaded\u001b[0m cc v1.0.79\n[Build and Test/Windows (Stable, MSVC, static CRT)  ]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m  Downloaded\u001b[0m libc v0.2.144\n[Build and Test/Windows (Stable, MSVC, static CRT)  ]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m       Fresh\u001b[0m xmlparser v0.13.5\n[Build and Test/Windows (Stable, MSVC, static CRT)  ]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m       Fresh\u001b[0m cc v1.0.79\n[Build and Test/Windows (Stable, MSVC, static CRT)  ]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m       Fresh\u001b[0m roxmltree v0.14.1\n[Build and Test/Windows (Stable, MSVC, static CRT)  ]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m       Fresh\u001b[0m cmake v0.1.50\n[Build and Test/Windows (Stable, MSVC, static CRT)  ]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m   Compiling\u001b[0m libc v0.2.144\n[Build and Test/Windows (Stable, MSVC, static CRT)  ]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m   Compiling\u001b[0m shaderc-sys v0.8.2 (/tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/google-shaderc-rs/shaderc-sys)\n[Build and Test/Windows (Stable, MSVC, static CRT)  ]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m     Running\u001b[0m `/tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/google-shaderc-rs/target/debug/build/libc-3f27a3cf1ea4e269/build-script-build`\n[Build and Test/Windows (Stable, MSVC, static CRT)  ]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m     Running\u001b[0m `/tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/google-shaderc-rs/target/debug/build/shaderc-sys-18e8b994afee0b77/build-script-build`\n[Build and Test/Windows (Stable, MSVC, static CRT)  ]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m     Running\u001b[0m `rustc --crate-name libc /home/runneradmin/.cargo/registry/src/github.com-1ecc6299db9ec823/libc-0.2.144/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C embed-bitcode=no -C debuginfo=2 --cfg 'feature=\"default\"' --cfg 'feature=\"std\"' -C metadata=46339597e7f06484 -C extra-filename=-46339597e7f06484 --out-dir /tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/google-shaderc-rs/target/x86_64-pc-windows-msvc/debug/deps --target x86_64-pc-windows-msvc -L dependency=/tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/google-shaderc-rs/target/x86_64-pc-windows-msvc/debug/deps -L dependency=/tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/google-shaderc-rs/target/debug/deps --cap-lints allow -C target-feature=+crt-static --cfg freebsd11 --cfg libc_priv_mod_use --cfg libc_union --cfg libc_const_size_of --cfg libc_align --cfg libc_int128 --cfg libc_core_cvoid --cfg libc_packedN --cfg libc_cfg_target_vendor --cfg libc_non_exhaustive --cfg libc_long_array --cfg libc_ptr_addr_of --cfg libc_underscore_const_names --cfg libc_const_extern_fn`\n[Build and Test/Windows (Stable, MSVC)              ]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m Downloading\u001b[0m crates ...\n[Build and Test/Windows (Stable, MSVC)              ]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m  Downloaded\u001b[0m libc v0.2.144\n[Build and Test/Windows (Stable, MSVC)              ]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m  Downloaded\u001b[0m roxmltree v0.14.1\n[Build and Test/Windows (Stable, MSVC)              ]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m  Downloaded\u001b[0m xmlparser v0.13.5\n[Build and Test/Windows (Stable, MSVC)              ]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m  Downloaded\u001b[0m cc v1.0.79\n[Build and Test/Windows (Stable, MSVC)              ]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m  Downloaded\u001b[0m cmake v0.1.50\n[Build and Test/Windows (Stable, MSVC)              ]   | \u001b[0m\u001b[0m\u001b[1m\u001b[36m    Blocking\u001b[0m waiting for file lock on build directory\n[Build and Test/Windows (Stable, MSVC, static CRT)  ]   | The following warnings were emitted during compilation:\n[Build and Test/Windows (Stable, MSVC, static CRT)  ]   | \n[Build and Test/Windows (Stable, MSVC, static CRT)  ]   | \u001b[0m\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[1m:\u001b[0m shaderc: searching for native shaderc libraries on system;  use '--features build-from-source' to force building from source code\n[Build and Test/Windows (Stable, MSVC, static CRT)  ]   | \u001b[0m\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[1m:\u001b[0m shaderc: cannot find native shaderc library on system; falling back to build from source\n[Build and Test/Windows (Stable, MSVC, static CRT)  ]   | \n[Build and Test/Windows (Stable, MSVC, static CRT)  ]   | \u001b[0m\u001b[0m\u001b[1m\u001b[31merror\u001b[0m\u001b[1m:\u001b[0m failed to run custom build command for `shaderc-sys v0.8.2 (/tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/google-shaderc-rs/shaderc-sys)`\n[Build and Test/Windows (Stable, MSVC, static CRT)  ]   | \n[Build and Test/Windows (Stable, MSVC, static CRT)  ]   | Caused by:\n[Build and Test/Windows (Stable, MSVC, static CRT)  ]   |   process didn't exit successfully: `/tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/google-shaderc-rs/target/debug/build/shaderc-sys-18e8b994afee0b77/build-script-build` (exit status: 101)\n[Build and Test/Windows (Stable, MSVC, static CRT)  ]   |   --- stdout\n[Build and Test/Windows (Stable, MSVC, static CRT)  ]   |   cargo:warning=shaderc: searching for native shaderc libraries on system;  use '--features build-from-source' to force building from source code\n[Build and Test/Windows (Stable, MSVC, static CRT)  ]   |   cargo:warning=shaderc: cannot find native shaderc library on system; falling back to build from source\n[Build and Test/Windows (Stable, MSVC, static CRT)  ]   |   CMAKE_TOOLCHAIN_FILE_x86_64-pc-windows-msvc = None\n[Build and Test/Windows (Stable, MSVC, static CRT)  ]   |   CMAKE_TOOLCHAIN_FILE_x86_64_pc_windows_msvc = None\n[Build and Test/Windows (Stable, MSVC, static CRT)  ]   |   TARGET_CMAKE_TOOLCHAIN_FILE = None\n[Build and Test/Windows (Stable, MSVC, static CRT)  ]   |   CMAKE_TOOLCHAIN_FILE = None\n[Build and Test/Windows (Stable, MSVC, static CRT)  ]   |   CMAKE_PREFIX_PATH_x86_64-pc-windows-msvc = None\n[Build and Test/Windows (Stable, MSVC, static CRT)  ]   |   CMAKE_PREFIX_PATH_x86_64_pc_windows_msvc = None\n[Build and Test/Windows (Stable, MSVC, static CRT)  ]   |   TARGET_CMAKE_PREFIX_PATH = None\n[Build and Test/Windows (Stable, MSVC, static CRT)  ]   |   CMAKE_PREFIX_PATH = None\n[Build and Test/Windows (Stable, MSVC, static CRT)  ]   |   CMAKE_x86_64-pc-windows-msvc = None\n[Build and Test/Windows (Stable, MSVC, static CRT)  ]   |   CMAKE_x86_64_pc_windows_msvc = None\n[Build and Test/Windows (Stable, MSVC, static CRT)  ]   |   TARGET_CMAKE = None\n[Build and Test/Windows (Stable, MSVC, static CRT)  ]   |   CMAKE = None\n[Build and Test/Windows (Stable, MSVC, static CRT)  ]   |   running: cd \"/tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/google-shaderc-rs/target/x86_64-pc-windows-msvc/debug/build/shaderc-sys-254f136bb45d0f9e/out/build\" && CMAKE_PREFIX_PATH=\"\" \"cmake\" \"/tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/google-shaderc-rs/shaderc-sys/build\" \"-G\" \"Ninja\" \"-DCMAKE_INSTALL_LIBDIR=lib\" \"-DCMAKE_POSITION_INDEPENDENT_CODE=ON\" \"-DENABLE_SPVREMAPPER=OFF\" \"-DENABLE_GLSLANG_BINARIES=OFF\" \"-DSHADERC_SKIP_TESTS=ON\" \"-DSPIRV_SKIP_EXECUTABLES=ON\" \"-DSPIRV_WERROR=OFF\" \"-DCMAKE_C_FLAGS= /nologo /EHsc /MT\" \"-DCMAKE_CXX_FLAGS= /nologo /EHsc /MT\" \"-DCMAKE_C_FLAGS_RELEASE= /nologo /EHsc /MT\" \"-DCMAKE_CXX_FLAGS_RELEASE= /nologo /EHsc /MT\" \"-DCMAKE_SYSTEM_NAME=Windows\" \"-DCMAKE_SYSTEM_PROCESSOR=AMD64\" \"-DCMAKE_INSTALL_PREFIX=/tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/google-shaderc-rs/target/x86_64-pc-windows-msvc/debug/build/shaderc-sys-254f136bb45d0f9e/out\" \"-DCMAKE_C_COMPILER=/usr/bin/cc\" \"-DCMAKE_CXX_COMPILER=/usr/bin/c++\" \"-DCMAKE_ASM_FLAGS= -ffunction-sections -fdata-sections -m64 -static\" \"-DCMAKE_ASM_COMPILER=/usr/bin/cc\" \"-DCMAKE_BUILD_TYPE=Release\"\n[Build and Test/Windows (Stable, MSVC, static CRT)  ]   |   -- The C compiler identification is GNU 9.3.0\n[Build and Test/Windows (Stable, MSVC, static CRT)  ]   |   -- The CXX compiler identification is GNU 9.3.0\n[Build and Test/Windows (Stable, MSVC, static CRT)  ]   |   -- Detecting C compiler ABI info\n[Build and Test/Windows (Stable, MSVC, static CRT)  ]   |   -- Detecting C compiler ABI info - failed\n[Build and Test/Windows (Stable, MSVC, static CRT)  ]   |   -- Check for working C compiler: /usr/bin/cc\n[Build and Test/Windows (Stable, MSVC, static CRT)  ]   |   -- Check for working C compiler: /usr/bin/cc - broken\n[Build and Test/Windows (Stable, MSVC, static CRT)  ]   |   -- Configuring incomplete, errors occurred!\n[Build and Test/Windows (Stable, MSVC, static CRT)  ]   |   See also \"/tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/google-shaderc-rs/target/x86_64-pc-windows-msvc/debug/build/shaderc-sys-254f136bb45d0f9e/out/build/CMakeFiles/CMakeOutput.log\".\n[Build and Test/Windows (Stable, MSVC, static CRT)  ]   |   See also \"/tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/google-shaderc-rs/target/x86_64-pc-windows-msvc/debug/build/shaderc-sys-254f136bb45d0f9e/out/build/CMakeFiles/CMakeError.log\".\n[Build and Test/Windows (Stable, MSVC, static CRT)  ]   | \n[Build and Test/Windows (Stable, MSVC, static CRT)  ]   |   --- stderr\n[Build and Test/Windows (Stable, MSVC, static CRT)  ]   |   CMake Error at /usr/local/share/cmake-3.21/Modules/CMakeTestCCompiler.cmake:69 (message):\n[Build and Test/Windows (Stable, MSVC, static CRT)  ]   |     The C compiler\n[Build and Test/Windows (Stable, MSVC, static CRT)  ]   | \n[Build and Test/Windows (Stable, MSVC, static CRT)  ]   |       \"/usr/bin/cc\"\n[Build and Test/Windows (Stable, MSVC, static CRT)  ]   | \n[Build and Test/Windows (Stable, MSVC, static CRT)  ]   |     is not able to compile a simple test program.\n[Build and Test/Windows (Stable, MSVC, static CRT)  ]   | \n[Build and Test/Windows (Stable, MSVC, static CRT)  ]   |     It fails with the following output:\n[Build and Test/Windows (Stable, MSVC, static CRT)  ]   | \n[Build and Test/Windows (Stable, MSVC, static CRT)  ]   |       Change Dir: /tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/google-shaderc-rs/target/x86_64-pc-windows-msvc/debug/build/shaderc-sys-254f136bb45d0f9e/out/build/CMakeFiles/CMakeTmp\n[Build and Test/Windows (Stable, MSVC, static CRT)  ]   |       \n[Build and Test/Windows (Stable, MSVC, static CRT)  ]   |       Run Build Command(s):/tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/google-shaderc-rs/ninja-build/ninja cmTC_3049b && [1/2] Building C object CMakeFiles/cmTC_3049b.dir/testCCompiler.c.obj\n[Build and Test/Windows (Stable, MSVC, static CRT)  ]   |       FAILED: CMakeFiles/cmTC_3049b.dir/testCCompiler.c.obj \n[Build and Test/Windows (Stable, MSVC, static CRT)  ]   |       /usr/bin/cc   /nologo /EHsc /MT -o CMakeFiles/cmTC_3049b.dir/testCCompiler.c.obj -c /tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/google-shaderc-rs/target/x86_64-pc-windows-msvc/debug/build/shaderc-sys-254f136bb45d0f9e/out/build/CMakeFiles/CMakeTmp/testCCompiler.c\n[Build and Test/Windows (Stable, MSVC, static CRT)  ]   |       cc: error: /nologo: No such file or directory\n[Build and Test/Windows (Stable, MSVC, static CRT)  ]   |       cc: error: /EHsc: No such file or directory\n[Build and Test/Windows (Stable, MSVC, static CRT)  ]   |       cc: error: /MT: No such file or directory\n[Build and Test/Windows (Stable, MSVC, static CRT)  ]   |       ninja: build stopped: subcommand failed.\n[Build and Test/Windows (Stable, MSVC, static CRT)  ]   |       \n[Build and Test/Windows (Stable, MSVC, static CRT)  ]   |       \n[Build and Test/Windows (Stable, MSVC, static CRT)  ]   | \n[Build and Test/Windows (Stable, MSVC, static CRT)  ]   |     \n[Build and Test/Windows (Stable, MSVC, static CRT)  ]   | \n[Build and Test/Windows (Stable, MSVC, static CRT)  ]   |     CMake will not be able to correctly generate this project.\n[Build and Test/Windows (Stable, MSVC, static CRT)  ]   |   Call Stack (most recent call first):\n[Build and Test/Windows (Stable, MSVC, static CRT)  ]   |     CMakeLists.txt:8 (project)\n[Build and Test/Windows (Stable, MSVC, static CRT)  ]   | \n[Build and Test/Windows (Stable, MSVC, static CRT)  ]   | \n[Build and Test/Windows (Stable, MSVC, static CRT)  ]   |   thread 'main' panicked at '\n[Build and Test/Windows (Stable, MSVC, static CRT)  ]   |   command did not execute successfully, got: exit status: 1\n[Build and Test/Windows (Stable, MSVC, static CRT)  ]   | \n[Build and Test/Windows (Stable, MSVC, static CRT)  ]   |   build script failed, must exit now', /home/runneradmin/.cargo/registry/src/github.com-1ecc6299db9ec823/cmake-0.1.50/src/lib.rs:1098:5\n[Build and Test/Windows (Stable, MSVC, static CRT)  ]   |   note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n[Build and Test/Windows (Stable, MSVC)              ]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m       Fresh\u001b[0m xmlparser v0.13.5\n[Build and Test/Windows (Stable, MSVC)              ]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m       Fresh\u001b[0m cc v1.0.79\n[Build and Test/Windows (Stable, MSVC)              ]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m       Fresh\u001b[0m roxmltree v0.14.1\n[Build and Test/Windows (Stable, MSVC)              ]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m       Fresh\u001b[0m cmake v0.1.50\n[Build and Test/Windows (Stable, MSVC)              ]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m       Dirty\u001b[0m libc v0.2.144: the rustflags changed\n[Build and Test/Windows (Stable, MSVC)              ]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m   Compiling\u001b[0m libc v0.2.144\n[Build and Test/Windows (Stable, MSVC)              ]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m   Compiling\u001b[0m shaderc-sys v0.8.2 (/tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/google-shaderc-rs/shaderc-sys)\n[Build and Test/Windows (Stable, MSVC)              ]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m     Running\u001b[0m `/tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/google-shaderc-rs/target/debug/build/shaderc-sys-18e8b994afee0b77/build-script-build`\n[Build and Test/Windows (Stable, MSVC)              ]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m     Running\u001b[0m `rustc --crate-name libc /home/runneradmin/.cargo/registry/src/github.com-1ecc6299db9ec823/libc-0.2.144/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C embed-bitcode=no -C debuginfo=2 --cfg 'feature=\"default\"' --cfg 'feature=\"std\"' -C metadata=46339597e7f06484 -C extra-filename=-46339597e7f06484 --out-dir /tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/google-shaderc-rs/target/x86_64-pc-windows-msvc/debug/deps --target x86_64-pc-windows-msvc -L dependency=/tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/google-shaderc-rs/target/x86_64-pc-windows-msvc/debug/deps -L dependency=/tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/google-shaderc-rs/target/debug/deps --cap-lints allow --cfg freebsd11 --cfg libc_priv_mod_use --cfg libc_union --cfg libc_const_size_of --cfg libc_align --cfg libc_int128 --cfg libc_core_cvoid --cfg libc_packedN --cfg libc_cfg_target_vendor --cfg libc_non_exhaustive --cfg libc_long_array --cfg libc_ptr_addr_of --cfg libc_underscore_const_names --cfg libc_const_extern_fn`\n[Build and Test/Windows (Stable, MSVC, static CRT)  ]   \u2757  ::error::The process '/home/runneradmin/.cargo/bin/cargo' failed with exit code 101\n[Build and Test/Windows (Stable, MSVC, static CRT)  ]   \u274c  Failure - Main Run cargo build\n[Build and Test/Windows (Stable, MSVC, static CRT)  ] exitcode '1': failure\n[Build and Test/Windows (Stable, MSVC)              ]   | The following warnings were emitted during compilation:\n[Build and Test/Windows (Stable, MSVC)              ]   | \n[Build and Test/Windows (Stable, MSVC)              ]   | \u001b[0m\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[1m:\u001b[0m shaderc: searching for native shaderc libraries on system;  use '--features build-from-source' to force building from source code\n[Build and Test/Windows (Stable, MSVC)              ]   | \u001b[0m\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[1m:\u001b[0m shaderc: cannot find native shaderc library on system; falling back to build from source\n[Build and Test/Windows (Stable, MSVC)              ]   | \n[Build and Test/Windows (Stable, MSVC)              ]   | \u001b[0m\u001b[0m\u001b[1m\u001b[31merror\u001b[0m\u001b[1m:\u001b[0m failed to run custom build command for `shaderc-sys v0.8.2 (/tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/google-shaderc-rs/shaderc-sys)`\n[Build and Test/Windows (Stable, MSVC)              ]   | \n[Build and Test/Windows (Stable, MSVC)              ]   | Caused by:\n[Build and Test/Windows (Stable, MSVC)              ]   |   process didn't exit successfully: `/tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/google-shaderc-rs/target/debug/build/shaderc-sys-18e8b994afee0b77/build-script-build` (exit status: 101)\n[Build and Test/Windows (Stable, MSVC)              ]   |   --- stdout\n[Build and Test/Windows (Stable, MSVC)              ]   |   cargo:warning=shaderc: searching for native shaderc libraries on system;  use '--features build-from-source' to force building from source code\n[Build and Test/Windows (Stable, MSVC)              ]   |   cargo:warning=shaderc: cannot find native shaderc library on system; falling back to build from source\n[Build and Test/Windows (Stable, MSVC)              ]   |   CMAKE_TOOLCHAIN_FILE_x86_64-pc-windows-msvc = None\n[Build and Test/Windows (Stable, MSVC)              ]   |   CMAKE_TOOLCHAIN_FILE_x86_64_pc_windows_msvc = None\n[Build and Test/Windows (Stable, MSVC)              ]   |   TARGET_CMAKE_TOOLCHAIN_FILE = None\n[Build and Test/Windows (Stable, MSVC)              ]   |   CMAKE_TOOLCHAIN_FILE = None\n[Build and Test/Windows (Stable, MSVC)              ]   |   CMAKE_PREFIX_PATH_x86_64-pc-windows-msvc = None\n[Build and Test/Windows (Stable, MSVC)              ]   |   CMAKE_PREFIX_PATH_x86_64_pc_windows_msvc = None\n[Build and Test/Windows (Stable, MSVC)              ]   |   TARGET_CMAKE_PREFIX_PATH = None\n[Build and Test/Windows (Stable, MSVC)              ]   |   CMAKE_PREFIX_PATH = None\n[Build and Test/Windows (Stable, MSVC)              ]   |   CMAKE_x86_64-pc-windows-msvc = None\n[Build and Test/Windows (Stable, MSVC)              ]   |   CMAKE_x86_64_pc_windows_msvc = None\n[Build and Test/Windows (Stable, MSVC)              ]   |   TARGET_CMAKE = None\n[Build and Test/Windows (Stable, MSVC)              ]   |   CMAKE = None\n[Build and Test/Windows (Stable, MSVC)              ]   |   running: cd \"/tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/google-shaderc-rs/target/x86_64-pc-windows-msvc/debug/build/shaderc-sys-254f136bb45d0f9e/out/build\" && CMAKE_PREFIX_PATH=\"\" \"cmake\" \"/tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/google-shaderc-rs/shaderc-sys/build\" \"-G\" \"Ninja\" \"-DCMAKE_INSTALL_LIBDIR=lib\" \"-DCMAKE_POSITION_INDEPENDENT_CODE=ON\" \"-DENABLE_SPVREMAPPER=OFF\" \"-DENABLE_GLSLANG_BINARIES=OFF\" \"-DSHADERC_SKIP_TESTS=ON\" \"-DSPIRV_SKIP_EXECUTABLES=ON\" \"-DSPIRV_WERROR=OFF\" \"-DCMAKE_C_FLAGS= /nologo /EHsc /MD\" \"-DCMAKE_CXX_FLAGS= /nologo /EHsc /MD\" \"-DCMAKE_C_FLAGS_RELEASE= /nologo /EHsc /MD\" \"-DCMAKE_CXX_FLAGS_RELEASE= /nologo /EHsc /MD\" \"-DSHADERC_ENABLE_SHARED_CRT=ON\" \"-DCMAKE_SYSTEM_NAME=Windows\" \"-DCMAKE_SYSTEM_PROCESSOR=AMD64\" \"-DCMAKE_INSTALL_PREFIX=/tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/google-shaderc-rs/target/x86_64-pc-windows-msvc/debug/build/shaderc-sys-254f136bb45d0f9e/out\" \"-DCMAKE_C_COMPILER=/usr/bin/cc\" \"-DCMAKE_CXX_COMPILER=/usr/bin/c++\" \"-DCMAKE_ASM_FLAGS= -ffunction-sections -fdata-sections -m64\" \"-DCMAKE_ASM_COMPILER=/usr/bin/cc\" \"-DCMAKE_BUILD_TYPE=Release\"\n[Build and Test/Windows (Stable, MSVC)              ]   |   -- The C compiler identification is GNU 9.3.0\n[Build and Test/Windows (Stable, MSVC)              ]   |   -- The CXX compiler identification is GNU 9.3.0\n[Build and Test/Windows (Stable, MSVC)              ]   |   -- Detecting C compiler ABI info\n[Build and Test/Windows (Stable, MSVC)              ]   |   -- Detecting C compiler ABI info - failed\n[Build and Test/Windows (Stable, MSVC)              ]   |   -- Check for working C compiler: /usr/bin/cc\n[Build and Test/Windows (Stable, MSVC)              ]   |   -- Check for working C compiler: /usr/bin/cc - broken\n[Build and Test/Windows (Stable, MSVC)              ]   |   -- Configuring incomplete, errors occurred!\n[Build and Test/Windows (Stable, MSVC)              ]   |   See also \"/tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/google-shaderc-rs/target/x86_64-pc-windows-msvc/debug/build/shaderc-sys-254f136bb45d0f9e/out/build/CMakeFiles/CMakeOutput.log\".\n[Build and Test/Windows (Stable, MSVC)              ]   |   See also \"/tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/google-shaderc-rs/target/x86_64-pc-windows-msvc/debug/build/shaderc-sys-254f136bb45d0f9e/out/build/CMakeFiles/CMakeError.log\".\n[Build and Test/Windows (Stable, MSVC)              ]   | \n[Build and Test/Windows (Stable, MSVC)              ]   |   --- stderr\n[Build and Test/Windows (Stable, MSVC)              ]   |   CMake Error at /usr/local/share/cmake-3.21/Modules/CMakeTestCCompiler.cmake:69 (message):\n[Build and Test/Windows (Stable, MSVC)              ]   |     The C compiler\n[Build and Test/Windows (Stable, MSVC)              ]   | \n[Build and Test/Windows (Stable, MSVC)              ]   |       \"/usr/bin/cc\"\n[Build and Test/Windows (Stable, MSVC)              ]   | \n[Build and Test/Windows (Stable, MSVC)              ]   |     is not able to compile a simple test program.\n[Build and Test/Windows (Stable, MSVC)              ]   | \n[Build and Test/Windows (Stable, MSVC)              ]   |     It fails with the following output:\n[Build and Test/Windows (Stable, MSVC)              ]   | \n[Build and Test/Windows (Stable, MSVC)              ]   |       Change Dir: /tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/google-shaderc-rs/target/x86_64-pc-windows-msvc/debug/build/shaderc-sys-254f136bb45d0f9e/out/build/CMakeFiles/CMakeTmp\n[Build and Test/Windows (Stable, MSVC)              ]   |       \n[Build and Test/Windows (Stable, MSVC)              ]   |       Run Build Command(s):/tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/google-shaderc-rs/ninja-build/ninja cmTC_6f353 && [1/2] Building C object CMakeFiles/cmTC_6f353.dir/testCCompiler.c.obj\n[Build and Test/Windows (Stable, MSVC)              ]   |       FAILED: CMakeFiles/cmTC_6f353.dir/testCCompiler.c.obj \n[Build and Test/Windows (Stable, MSVC)              ]   |       /usr/bin/cc   /nologo /EHsc /MD -o CMakeFiles/cmTC_6f353.dir/testCCompiler.c.obj -c /tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/google-shaderc-rs/target/x86_64-pc-windows-msvc/debug/build/shaderc-sys-254f136bb45d0f9e/out/build/CMakeFiles/CMakeTmp/testCCompiler.c\n[Build and Test/Windows (Stable, MSVC)              ]   |       cc: error: /nologo: No such file or directory\n[Build and Test/Windows (Stable, MSVC)              ]   |       cc: error: /EHsc: No such file or directory\n[Build and Test/Windows (Stable, MSVC)              ]   |       cc: error: /MD: No such file or directory\n[Build and Test/Windows (Stable, MSVC)              ]   |       ninja: build stopped: subcommand failed.\n[Build and Test/Windows (Stable, MSVC)              ]   |       \n[Build and Test/Windows (Stable, MSVC)              ]   |       \n[Build and Test/Windows (Stable, MSVC)              ]   | \n[Build and Test/Windows (Stable, MSVC)              ]   |     \n[Build and Test/Windows (Stable, MSVC)              ]   | \n[Build and Test/Windows (Stable, MSVC)              ]   |     CMake will not be able to correctly generate this project.\n[Build and Test/Windows (Stable, MSVC)              ]   |   Call Stack (most recent call first):\n[Build and Test/Windows (Stable, MSVC)              ]   |     CMakeLists.txt:8 (project)\n[Build and Test/Windows (Stable, MSVC)              ]   | \n[Build and Test/Windows (Stable, MSVC)              ]   | \n[Build and Test/Windows (Stable, MSVC)              ]   |   thread 'main' panicked at '\n[Build and Test/Windows (Stable, MSVC)              ]   |   command did not execute successfully, got: exit status: 1\n[Build and Test/Windows (Stable, MSVC)              ]   | \n[Build and Test/Windows (Stable, MSVC)              ]   |   build script failed, must exit now', /home/runneradmin/.cargo/registry/src/github.com-1ecc6299db9ec823/cmake-0.1.50/src/lib.rs:1098:5\n[Build and Test/Windows (Stable, MSVC)              ]   |   note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n[Build and Test/Windows (Stable, MSVC)              ]   \u2757  ::error::The process '/home/runneradmin/.cargo/bin/cargo' failed with exit code 101\n[Build and Test/Windows (Stable, MSVC)              ]   \u274c  Failure - Main Run cargo build\n[Build and Test/Windows (Stable, MSVC)              ] exitcode '1': failure\n[Build and Test/Windows (Stable, MSVC, static CRT)  ] \ud83c\udfc1  Job failed\n[Build and Test/Windows (Stable, MSVC)              ] \ud83c\udfc1  Job failed\n[Build and Test/Windows (Stable, GNU)               ]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m Downloading\u001b[0m crates ...\n[Build and Test/Windows (Stable, GNU)               ]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m  Downloaded\u001b[0m cc v1.0.79\n[Build and Test/Windows (Stable, GNU)               ]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m  Downloaded\u001b[0m libc v0.2.144\n[Build and Test/Windows (Stable, GNU)               ]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m  Downloaded\u001b[0m xmlparser v0.13.5\n[Build and Test/Windows (Stable, GNU)               ]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m  Downloaded\u001b[0m cmake v0.1.50\n[Build and Test/Windows (Stable, GNU)               ]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m  Downloaded\u001b[0m roxmltree v0.14.1\n[Build and Test/Windows (Stable, GNU)               ]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m       Fresh\u001b[0m xmlparser v0.13.5\n[Build and Test/Windows (Stable, GNU)               ]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m       Fresh\u001b[0m cc v1.0.79\n[Build and Test/Windows (Stable, GNU)               ]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m       Fresh\u001b[0m roxmltree v0.14.1\n[Build and Test/Windows (Stable, GNU)               ]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m       Fresh\u001b[0m cmake v0.1.50\n[Build and Test/Windows (Stable, GNU)               ]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m   Compiling\u001b[0m libc v0.2.144\n[Build and Test/Windows (Stable, GNU)               ]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m   Compiling\u001b[0m shaderc-sys v0.8.2 (/tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/google-shaderc-rs/shaderc-sys)\n[Build and Test/Windows (Stable, GNU)               ]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m     Running\u001b[0m `/tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/google-shaderc-rs/target/debug/build/libc-3f27a3cf1ea4e269/build-script-build`\n[Build and Test/Windows (Stable, GNU)               ]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m     Running\u001b[0m `/tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/google-shaderc-rs/target/debug/build/shaderc-sys-18e8b994afee0b77/build-script-build`\n[Build and Test/Windows (Stable, GNU)               ]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m     Running\u001b[0m `rustc --crate-name libc /home/runneradmin/.cargo/registry/src/github.com-1ecc6299db9ec823/libc-0.2.144/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C embed-bitcode=no -C debuginfo=2 --cfg 'feature=\"default\"' --cfg 'feature=\"std\"' -C metadata=e2112e43f70f286a -C extra-filename=-e2112e43f70f286a --out-dir /tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/google-shaderc-rs/target/x86_64-pc-windows-gnu/debug/deps --target x86_64-pc-windows-gnu -L dependency=/tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/google-shaderc-rs/target/x86_64-pc-windows-gnu/debug/deps -L dependency=/tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/google-shaderc-rs/target/debug/deps --cap-lints allow --cfg freebsd11 --cfg libc_priv_mod_use --cfg libc_union --cfg libc_const_size_of --cfg libc_align --cfg libc_int128 --cfg libc_core_cvoid --cfg libc_packedN --cfg libc_cfg_target_vendor --cfg libc_non_exhaustive --cfg libc_long_array --cfg libc_ptr_addr_of --cfg libc_underscore_const_names --cfg libc_const_extern_fn`\n[Build and Test/Windows (Stable, GNU)               ]   | The following warnings were emitted during compilation:\n[Build and Test/Windows (Stable, GNU)               ]   | \n[Build and Test/Windows (Stable, GNU)               ]   | \u001b[0m\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[1m:\u001b[0m shaderc: searching for native shaderc libraries on system;  use '--features build-from-source' to force building from source code\n[Build and Test/Windows (Stable, GNU)               ]   | \u001b[0m\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[1m:\u001b[0m shaderc: cannot find native shaderc library on system; falling back to build from source\n[Build and Test/Windows (Stable, GNU)               ]   | \n[Build and Test/Windows (Stable, GNU)               ]   | \u001b[0m\u001b[0m\u001b[1m\u001b[31merror\u001b[0m\u001b[1m:\u001b[0m failed to run custom build command for `shaderc-sys v0.8.2 (/tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/google-shaderc-rs/shaderc-sys)`\n[Build and Test/Windows (Stable, GNU)               ]   | \n[Build and Test/Windows (Stable, GNU)               ]   | Caused by:\n[Build and Test/Windows (Stable, GNU)               ]   |   process didn't exit successfully: `/tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/google-shaderc-rs/target/debug/build/shaderc-sys-18e8b994afee0b77/build-script-build` (exit status: 101)\n[Build and Test/Windows (Stable, GNU)               ]   |   --- stdout\n[Build and Test/Windows (Stable, GNU)               ]   |   cargo:warning=shaderc: searching for native shaderc libraries on system;  use '--features build-from-source' to force building from source code\n[Build and Test/Windows (Stable, GNU)               ]   |   cargo:warning=shaderc: cannot find native shaderc library on system; falling back to build from source\n[Build and Test/Windows (Stable, GNU)               ]   |   CMAKE_TOOLCHAIN_FILE_x86_64-pc-windows-gnu = None\n[Build and Test/Windows (Stable, GNU)               ]   |   CMAKE_TOOLCHAIN_FILE_x86_64_pc_windows_gnu = None\n[Build and Test/Windows (Stable, GNU)               ]   |   TARGET_CMAKE_TOOLCHAIN_FILE = None\n[Build and Test/Windows (Stable, GNU)               ]   |   CMAKE_TOOLCHAIN_FILE = None\n[Build and Test/Windows (Stable, GNU)               ]   |   CMAKE_PREFIX_PATH_x86_64-pc-windows-gnu = None\n[Build and Test/Windows (Stable, GNU)               ]   |   CMAKE_PREFIX_PATH_x86_64_pc_windows_gnu = None\n[Build and Test/Windows (Stable, GNU)               ]   |   TARGET_CMAKE_PREFIX_PATH = None\n[Build and Test/Windows (Stable, GNU)               ]   |   CMAKE_PREFIX_PATH = None\n[Build and Test/Windows (Stable, GNU)               ]   |   CMAKE_x86_64-pc-windows-gnu = None\n[Build and Test/Windows (Stable, GNU)               ]   |   CMAKE_x86_64_pc_windows_gnu = None\n[Build and Test/Windows (Stable, GNU)               ]   |   TARGET_CMAKE = None\n[Build and Test/Windows (Stable, GNU)               ]   |   CMAKE = None\n[Build and Test/Windows (Stable, GNU)               ]   |   running: cd \"/tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/google-shaderc-rs/target/x86_64-pc-windows-gnu/debug/build/shaderc-sys-fbd2a38154806c30/out/build\" && CMAKE_PREFIX_PATH=\"\" \"cmake\" \"/tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/google-shaderc-rs/shaderc-sys/build\" \"-G\" \"Ninja\" \"-DCMAKE_INSTALL_LIBDIR=lib\" \"-DCMAKE_POSITION_INDEPENDENT_CODE=ON\" \"-DENABLE_SPVREMAPPER=OFF\" \"-DENABLE_GLSLANG_BINARIES=OFF\" \"-DSHADERC_SKIP_TESTS=ON\" \"-DSPIRV_SKIP_EXECUTABLES=ON\" \"-DSPIRV_WERROR=OFF\" \"-DCMAKE_SYSTEM_NAME=Windows\" \"-DCMAKE_SYSTEM_PROCESSOR=AMD64\" \"-DCMAKE_INSTALL_PREFIX=/tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/google-shaderc-rs/target/x86_64-pc-windows-gnu/debug/build/shaderc-sys-fbd2a38154806c30/out\" \"-DCMAKE_C_FLAGS= -ffunction-sections -fdata-sections -m64\" \"-DCMAKE_C_COMPILER=x86_64-w64-mingw32-gcc\" \"-DCMAKE_CXX_FLAGS= -ffunction-sections -fdata-sections -m64\" \"-DCMAKE_CXX_COMPILER=x86_64-w64-mingw32-g++\" \"-DCMAKE_ASM_FLAGS= -ffunction-sections -fdata-sections -m64\" \"-DCMAKE_ASM_COMPILER=x86_64-w64-mingw32-gcc\" \"-DCMAKE_BUILD_TYPE=Release\"\n[Build and Test/Windows (Stable, GNU)               ]   |   -- The C compiler identification is unknown\n[Build and Test/Windows (Stable, GNU)               ]   |   -- The CXX compiler identification is unknown\n[Build and Test/Windows (Stable, GNU)               ]   |   -- Configuring incomplete, errors occurred!\n[Build and Test/Windows (Stable, GNU)               ]   |   See also \"/tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/google-shaderc-rs/target/x86_64-pc-windows-gnu/debug/build/shaderc-sys-fbd2a38154806c30/out/build/CMakeFiles/CMakeOutput.log\".\n[Build and Test/Windows (Stable, GNU)               ]   |   See also \"/tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/google-shaderc-rs/target/x86_64-pc-windows-gnu/debug/build/shaderc-sys-fbd2a38154806c30/out/build/CMakeFiles/CMakeError.log\".\n[Build and Test/Windows (Stable, GNU)               ]   | \n[Build and Test/Windows (Stable, GNU)               ]   |   --- stderr\n[Build and Test/Windows (Stable, GNU)               ]   |   CMake Error at CMakeLists.txt:8 (project):\n[Build and Test/Windows (Stable, GNU)               ]   |     The CMAKE_C_COMPILER:\n[Build and Test/Windows (Stable, GNU)               ]   | \n[Build and Test/Windows (Stable, GNU)               ]   |       x86_64-w64-mingw32-gcc\n[Build and Test/Windows (Stable, GNU)               ]   | \n[Build and Test/Windows (Stable, GNU)               ]   |     is not a full path and was not found in the PATH.\n[Build and Test/Windows (Stable, GNU)               ]   | \n[Build and Test/Windows (Stable, GNU)               ]   |     Tell CMake where to find the compiler by setting either the environment\n[Build and Test/Windows (Stable, GNU)               ]   |     variable \"CC\" or the CMake cache entry CMAKE_C_COMPILER to the full path to\n[Build and Test/Windows (Stable, GNU)               ]   |     the compiler, or to the compiler name if it is in the PATH.\n[Build and Test/Windows (Stable, GNU)               ]   | \n[Build and Test/Windows (Stable, GNU)               ]   | \n[Build and Test/Windows (Stable, GNU)               ]   |   CMake Error at CMakeLists.txt:8 (project):\n[Build and Test/Windows (Stable, GNU)               ]   |     The CMAKE_CXX_COMPILER:\n[Build and Test/Windows (Stable, GNU)               ]   | \n[Build and Test/Windows (Stable, GNU)               ]   |       x86_64-w64-mingw32-g++\n[Build and Test/Windows (Stable, GNU)               ]   | \n[Build and Test/Windows (Stable, GNU)               ]   |     is not a full path and was not found in the PATH.\n[Build and Test/Windows (Stable, GNU)               ]   | \n[Build and Test/Windows (Stable, GNU)               ]   |     Tell CMake where to find the compiler by setting either the environment\n[Build and Test/Windows (Stable, GNU)               ]   |     variable \"CXX\" or the CMake cache entry CMAKE_CXX_COMPILER to the full path\n[Build and Test/Windows (Stable, GNU)               ]   |     to the compiler, or to the compiler name if it is in the PATH.\n[Build and Test/Windows (Stable, GNU)               ]   | \n[Build and Test/Windows (Stable, GNU)               ]   | \n[Build and Test/Windows (Stable, GNU)               ]   |   thread 'main' panicked at '\n[Build and Test/Windows (Stable, GNU)               ]   |   command did not execute successfully, got: exit status: 1\n[Build and Test/Windows (Stable, GNU)               ]   | \n[Build and Test/Windows (Stable, GNU)               ]   |   build script failed, must exit now', /home/runneradmin/.cargo/registry/src/github.com-1ecc6299db9ec823/cmake-0.1.50/src/lib.rs:1098:5\n[Build and Test/Windows (Stable, GNU)               ]   |   note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n[Build and Test/Windows (Stable, GNU)               ]   \u2757  ::error::The process '/home/runneradmin/.cargo/bin/cargo' failed with exit code 101\n[Build and Test/Windows (Stable, GNU)               ]   \u274c  Failure - Main Run cargo build\n[Build and Test/Windows (Stable, GNU)               ] exitcode '1': failure\n[Build and Test/Windows (Stable, GNU)               ] \ud83c\udfc1  Job failed\n",
    "actions_stderr": "Error: Error occurred running finally: Error occurred running finally: context deadline exceeded (original error: <nil>) (original error: EOF)\n"
}