{
    "repository": "tikv/rust-prometheus",
    "clone_url": "https://github.com/tikv/rust-prometheus.git",
    "timestamp": "2023-05-30T09:08:56.510761Z",
    "clone_success": true,
    "number of actions": 1,
    "number_of_test_actions": 1,
    "actions_successful": false,
    "actions_stdout": "[Rust/Tests, stable toolchain  ] \ud83d\ude80  Start image=crawlergpt:latest\n[Rust/Benchmarks (criterion)   ] \ud83d\ude80  Start image=crawlergpt:latest\n[Rust/Tests, unstable toolchain] \ud83d\ude80  Start image=crawlergpt:latest\n[Rust/Lints, pinned toolchain  ] \ud83d\ude80  Start image=crawlergpt:latest\n[Rust/Build, minimum toolchain ] \ud83d\ude80  Start image=crawlergpt:latest\n[Rust/Lints, pinned toolchain  ]   \ud83d\udc33  docker pull image=crawlergpt:latest platform= username= forcePull=false\n[Rust/Benchmarks (criterion)   ]   \ud83d\udc33  docker pull image=crawlergpt:latest platform= username= forcePull=false\n[Rust/Tests, stable toolchain  ]   \ud83d\udc33  docker pull image=crawlergpt:latest platform= username= forcePull=false\n[Rust/Tests, unstable toolchain]   \ud83d\udc33  docker pull image=crawlergpt:latest platform= username= forcePull=false\n[Rust/Build, minimum toolchain ]   \ud83d\udc33  docker pull image=crawlergpt:latest platform= username= forcePull=false\n[Rust/Build, minimum toolchain ]   \ud83d\udc33  docker create image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[Rust/Lints, pinned toolchain  ]   \ud83d\udc33  docker create image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[Rust/Benchmarks (criterion)   ]   \ud83d\udc33  docker create image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[Rust/Tests, unstable toolchain]   \ud83d\udc33  docker create image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[Rust/Tests, stable toolchain  ]   \ud83d\udc33  docker create image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[Rust/Tests, unstable toolchain]   \ud83d\udc33  docker run image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[Rust/Tests, stable toolchain  ]   \ud83d\udc33  docker run image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[Rust/Build, minimum toolchain ]   \ud83d\udc33  docker run image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[Rust/Benchmarks (criterion)   ]   \ud83d\udc33  docker run image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[Rust/Lints, pinned toolchain  ]   \ud83d\udc33  docker run image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[Rust/Tests, unstable toolchain]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/tikv-rust-prometheus] user=0 workdir=\n[Rust/Tests, unstable toolchain]   \u2601  git clone 'https://github.com/dtolnay/rust-toolchain' # ref=master\n[Rust/Tests, unstable toolchain] \u2b50 Run Pre Install toolchain\n[Rust/Tests, unstable toolchain]   \u2705  Success - Pre Install toolchain\n[Rust/Tests, unstable toolchain] \ud83e\uddea  Matrix: map[channel:beta]\n[Rust/Tests, unstable toolchain] \u2b50 Run Main Checkout repository\n[Rust/Tests, unstable toolchain]   \u2705  Success - Main Checkout repository\n[Rust/Tests, unstable toolchain] \u2b50 Run Main Install toolchain\n[Rust/Tests, unstable toolchain]   \ud83d\udc33  docker cp src=/home/andre-silva/.cache/act/dtolnay-rust-toolchain@master/ dst=/var/run/act/actions/dtolnay-rust-toolchain@master/\n[Rust/Tests, unstable toolchain]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /var/run/act/actions/dtolnay-rust-toolchain@master/] user=0 workdir=\n[Rust/Benchmarks (criterion)   ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/tikv-rust-prometheus] user=0 workdir=\n[Rust/Tests, stable toolchain  ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/tikv-rust-prometheus] user=0 workdir=\n[Rust/Lints, pinned toolchain  ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/tikv-rust-prometheus] user=0 workdir=\n[Rust/Build, minimum toolchain ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/tikv-rust-prometheus] user=0 workdir=\n[Rust/Tests, unstable toolchain] \u2b50 Run Main : parse toolchain version\nif [[ $toolchain =~ ^stable' '[0-9]+' '(year|month|week|day)s?' 'ago$ ]]; then\n  if [[ Linux == macOS ]]; then\n    echo \"toolchain=1.$((($(date -v-$(sed 's/stable \\([0-9]*\\) \\(.\\).*/\\1\\2/' <<< $toolchain) +%s)/60/60/24-16569)/7/6))\" >> $GITHUB_OUTPUT\n  else\n    echo \"toolchain=1.$((($(date --date \"${toolchain#stable }\" +%s)/60/60/24-16569)/7/6))\" >> $GITHUB_OUTPUT\n  fi\nelif [[ $toolchain =~ ^stable' 'minus' '[0-9]+' 'releases?$ ]]; then\n  echo \"toolchain=1.$((($(date +%s)/60/60/24-16569)/7/6-${toolchain//[^0-9]/}))\" >> $GITHUB_OUTPUT\nelse\n  echo \"toolchain=$toolchain\" >> $GITHUB_OUTPUT\nfi\n[Rust/Tests, unstable toolchain]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-parse.sh] user= workdir=\n[Rust/Tests, unstable toolchain]   \u2705  Success - Main : parse toolchain version\nif [[ $toolchain =~ ^stable' '[0-9]+' '(year|month|week|day)s?' 'ago$ ]]; then\n  if [[ Linux == macOS ]]; then\n    echo \"toolchain=1.$((($(date -v-$(sed 's/stable \\([0-9]*\\) \\(.\\).*/\\1\\2/' <<< $toolchain) +%s)/60/60/24-16569)/7/6))\" >> $GITHUB_OUTPUT\n  else\n    echo \"toolchain=1.$((($(date --date \"${toolchain#stable }\" +%s)/60/60/24-16569)/7/6))\" >> $GITHUB_OUTPUT\n  fi\nelif [[ $toolchain =~ ^stable' 'minus' '[0-9]+' 'releases?$ ]]; then\n  echo \"toolchain=1.$((($(date +%s)/60/60/24-16569)/7/6-${toolchain//[^0-9]/}))\" >> $GITHUB_OUTPUT\nelse\n  echo \"toolchain=$toolchain\" >> $GITHUB_OUTPUT\nfi\n[Rust/Build, minimum toolchain ]   \u2601  git clone 'https://github.com/dtolnay/rust-toolchain' # ref=master\n[Rust/Lints, pinned toolchain  ]   \u2601  git clone 'https://github.com/dtolnay/rust-toolchain' # ref=master\n[Rust/Benchmarks (criterion)   ]   \u2601  git clone 'https://github.com/dtolnay/rust-toolchain' # ref=master\n[Rust/Tests, stable toolchain  ]   \u2601  git clone 'https://github.com/dtolnay/rust-toolchain' # ref=stable\n[Rust/Tests, unstable toolchain]   \u2699  ::set-output:: toolchain=beta\n[Rust/Build, minimum toolchain ] \u2b50 Run Pre Install toolchain\n[Rust/Lints, pinned toolchain  ] \u2b50 Run Pre Install toolchain\n[Rust/Benchmarks (criterion)   ] \u2b50 Run Pre Install toolchain\n[Rust/Tests, unstable toolchain] \u2b50 Run Main : construct rustup command line\necho \"targets=$(for t in ${targets//,/ }; do echo -n ' --target' $t; done)\" >> $GITHUB_OUTPUT\necho \"components=$(for c in ${components//,/ }; do echo -n ' --component' $c; done)\" >> $GITHUB_OUTPUT\necho \"downgrade=\" >> $GITHUB_OUTPUT\n[Rust/Tests, stable toolchain  ] \u2b50 Run Pre Install toolchain\n[Rust/Build, minimum toolchain ]   \u2705  Success - Pre Install toolchain\n[Rust/Tests, stable toolchain  ]   \u2705  Success - Pre Install toolchain\n[Rust/Benchmarks (criterion)   ]   \u2705  Success - Pre Install toolchain\n[Rust/Lints, pinned toolchain  ]   \u2705  Success - Pre Install toolchain\n[Rust/Tests, unstable toolchain]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-flags.sh] user= workdir=\n[Rust/Tests, stable toolchain  ] \u2b50 Run Main Checkout repository\n[Rust/Benchmarks (criterion)   ] \u2b50 Run Main Checkout repository\n[Rust/Build, minimum toolchain ] \u2b50 Run Main Checkout repository\n[Rust/Lints, pinned toolchain  ] \u2b50 Run Main Checkout repository\n[Rust/Build, minimum toolchain ]   \u2705  Success - Main Checkout repository\n[Rust/Tests, stable toolchain  ]   \u2705  Success - Main Checkout repository\n[Rust/Benchmarks (criterion)   ]   \u2705  Success - Main Checkout repository\n[Rust/Lints, pinned toolchain  ]   \u2705  Success - Main Checkout repository\n[Rust/Build, minimum toolchain ] \u2b50 Run Main Install toolchain\n[Rust/Benchmarks (criterion)   ] \u2b50 Run Main Install toolchain\n[Rust/Tests, stable toolchain  ] \u2b50 Run Main Install toolchain\n[Rust/Lints, pinned toolchain  ] \u2b50 Run Main Install toolchain\n[Rust/Benchmarks (criterion)   ]   \ud83d\udc33  docker cp src=/home/andre-silva/.cache/act/dtolnay-rust-toolchain@master/ dst=/var/run/act/actions/dtolnay-rust-toolchain@master/\n[Rust/Build, minimum toolchain ]   \ud83d\udc33  docker cp src=/home/andre-silva/.cache/act/dtolnay-rust-toolchain@master/ dst=/var/run/act/actions/dtolnay-rust-toolchain@master/\n[Rust/Tests, stable toolchain  ]   \ud83d\udc33  docker cp src=/home/andre-silva/.cache/act/dtolnay-rust-toolchain@stable/ dst=/var/run/act/actions/dtolnay-rust-toolchain@stable/\n[Rust/Build, minimum toolchain ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /var/run/act/actions/dtolnay-rust-toolchain@master/] user=0 workdir=\n[Rust/Lints, pinned toolchain  ]   \ud83d\udc33  docker cp src=/home/andre-silva/.cache/act/dtolnay-rust-toolchain@master/ dst=/var/run/act/actions/dtolnay-rust-toolchain@master/\n[Rust/Tests, stable toolchain  ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /var/run/act/actions/dtolnay-rust-toolchain@stable/] user=0 workdir=\n[Rust/Benchmarks (criterion)   ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /var/run/act/actions/dtolnay-rust-toolchain@master/] user=0 workdir=\n[Rust/Lints, pinned toolchain  ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /var/run/act/actions/dtolnay-rust-toolchain@master/] user=0 workdir=\n[Rust/Tests, unstable toolchain]   \u2705  Success - Main : construct rustup command line\necho \"targets=$(for t in ${targets//,/ }; do echo -n ' --target' $t; done)\" >> $GITHUB_OUTPUT\necho \"components=$(for c in ${components//,/ }; do echo -n ' --component' $c; done)\" >> $GITHUB_OUTPUT\necho \"downgrade=\" >> $GITHUB_OUTPUT\n[Rust/Lints, pinned toolchain  ] \u2b50 Run Main : parse toolchain version\nif [[ $toolchain =~ ^stable' '[0-9]+' '(year|month|week|day)s?' 'ago$ ]]; then\n  if [[ Linux == macOS ]]; then\n    echo \"toolchain=1.$((($(date -v-$(sed 's/stable \\([0-9]*\\) \\(.\\).*/\\1\\2/' <<< $toolchain) +%s)/60/60/24-16569)/7/6))\" >> $GITHUB_OUTPUT\n  else\n    echo \"toolchain=1.$((($(date --date \"${toolchain#stable }\" +%s)/60/60/24-16569)/7/6))\" >> $GITHUB_OUTPUT\n  fi\nelif [[ $toolchain =~ ^stable' 'minus' '[0-9]+' 'releases?$ ]]; then\n  echo \"toolchain=1.$((($(date +%s)/60/60/24-16569)/7/6-${toolchain//[^0-9]/}))\" >> $GITHUB_OUTPUT\nelse\n  echo \"toolchain=$toolchain\" >> $GITHUB_OUTPUT\nfi\n[Rust/Build, minimum toolchain ] \u2b50 Run Main : parse toolchain version\nif [[ $toolchain =~ ^stable' '[0-9]+' '(year|month|week|day)s?' 'ago$ ]]; then\n  if [[ Linux == macOS ]]; then\n    echo \"toolchain=1.$((($(date -v-$(sed 's/stable \\([0-9]*\\) \\(.\\).*/\\1\\2/' <<< $toolchain) +%s)/60/60/24-16569)/7/6))\" >> $GITHUB_OUTPUT\n  else\n    echo \"toolchain=1.$((($(date --date \"${toolchain#stable }\" +%s)/60/60/24-16569)/7/6))\" >> $GITHUB_OUTPUT\n  fi\nelif [[ $toolchain =~ ^stable' 'minus' '[0-9]+' 'releases?$ ]]; then\n  echo \"toolchain=1.$((($(date +%s)/60/60/24-16569)/7/6-${toolchain//[^0-9]/}))\" >> $GITHUB_OUTPUT\nelse\n  echo \"toolchain=$toolchain\" >> $GITHUB_OUTPUT\nfi\n[Rust/Tests, stable toolchain  ] \u2b50 Run Main : parse toolchain version\nif [[ $toolchain =~ ^stable' '[0-9]+' '(year|month|week|day)s?' 'ago$ ]]; then\n  if [[ Linux == macOS ]]; then\n    echo \"toolchain=1.$((($(date -v-$(sed 's/stable \\([0-9]*\\) \\(.\\).*/\\1\\2/' <<< $toolchain) +%s)/60/60/24-16569)/7/6))\" >> $GITHUB_OUTPUT\n  else\n    echo \"toolchain=1.$((($(date --date \"${toolchain#stable }\" +%s)/60/60/24-16569)/7/6))\" >> $GITHUB_OUTPUT\n  fi\nelif [[ $toolchain =~ ^stable' 'minus' '[0-9]+' 'releases?$ ]]; then\n  echo \"toolchain=1.$((($(date +%s)/60/60/24-16569)/7/6-${toolchain//[^0-9]/}))\" >> $GITHUB_OUTPUT\nelse\n  echo \"toolchain=$toolchain\" >> $GITHUB_OUTPUT\nfi\n[Rust/Benchmarks (criterion)   ] \u2b50 Run Main : parse toolchain version\nif [[ $toolchain =~ ^stable' '[0-9]+' '(year|month|week|day)s?' 'ago$ ]]; then\n  if [[ Linux == macOS ]]; then\n    echo \"toolchain=1.$((($(date -v-$(sed 's/stable \\([0-9]*\\) \\(.\\).*/\\1\\2/' <<< $toolchain) +%s)/60/60/24-16569)/7/6))\" >> $GITHUB_OUTPUT\n  else\n    echo \"toolchain=1.$((($(date --date \"${toolchain#stable }\" +%s)/60/60/24-16569)/7/6))\" >> $GITHUB_OUTPUT\n  fi\nelif [[ $toolchain =~ ^stable' 'minus' '[0-9]+' 'releases?$ ]]; then\n  echo \"toolchain=1.$((($(date +%s)/60/60/24-16569)/7/6-${toolchain//[^0-9]/}))\" >> $GITHUB_OUTPUT\nelse\n  echo \"toolchain=$toolchain\" >> $GITHUB_OUTPUT\nfi\n[Rust/Lints, pinned toolchain  ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-parse.sh] user= workdir=\n[Rust/Tests, unstable toolchain]   \u2699  ::set-output:: components=\n[Rust/Tests, unstable toolchain]   \u2699  ::set-output:: downgrade=\n[Rust/Tests, unstable toolchain]   \u2699  ::set-output:: targets=\n[Rust/Lints, pinned toolchain  ]   \u2705  Success - Main : parse toolchain version\nif [[ $toolchain =~ ^stable' '[0-9]+' '(year|month|week|day)s?' 'ago$ ]]; then\n  if [[ Linux == macOS ]]; then\n    echo \"toolchain=1.$((($(date -v-$(sed 's/stable \\([0-9]*\\) \\(.\\).*/\\1\\2/' <<< $toolchain) +%s)/60/60/24-16569)/7/6))\" >> $GITHUB_OUTPUT\n  else\n    echo \"toolchain=1.$((($(date --date \"${toolchain#stable }\" +%s)/60/60/24-16569)/7/6))\" >> $GITHUB_OUTPUT\n  fi\nelif [[ $toolchain =~ ^stable' 'minus' '[0-9]+' 'releases?$ ]]; then\n  echo \"toolchain=1.$((($(date +%s)/60/60/24-16569)/7/6-${toolchain//[^0-9]/}))\" >> $GITHUB_OUTPUT\nelse\n  echo \"toolchain=$toolchain\" >> $GITHUB_OUTPUT\nfi\n[Rust/Benchmarks (criterion)   ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-parse.sh] user= workdir=\n[Rust/Build, minimum toolchain ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-parse.sh] user= workdir=\n[Rust/Tests, stable toolchain  ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-parse.sh] user= workdir=\n[Rust/Benchmarks (criterion)   ]   \u2705  Success - Main : parse toolchain version\nif [[ $toolchain =~ ^stable' '[0-9]+' '(year|month|week|day)s?' 'ago$ ]]; then\n  if [[ Linux == macOS ]]; then\n    echo \"toolchain=1.$((($(date -v-$(sed 's/stable \\([0-9]*\\) \\(.\\).*/\\1\\2/' <<< $toolchain) +%s)/60/60/24-16569)/7/6))\" >> $GITHUB_OUTPUT\n  else\n    echo \"toolchain=1.$((($(date --date \"${toolchain#stable }\" +%s)/60/60/24-16569)/7/6))\" >> $GITHUB_OUTPUT\n  fi\nelif [[ $toolchain =~ ^stable' 'minus' '[0-9]+' 'releases?$ ]]; then\n  echo \"toolchain=1.$((($(date +%s)/60/60/24-16569)/7/6-${toolchain//[^0-9]/}))\" >> $GITHUB_OUTPUT\nelse\n  echo \"toolchain=$toolchain\" >> $GITHUB_OUTPUT\nfi\n[Rust/Build, minimum toolchain ]   \u2705  Success - Main : parse toolchain version\nif [[ $toolchain =~ ^stable' '[0-9]+' '(year|month|week|day)s?' 'ago$ ]]; then\n  if [[ Linux == macOS ]]; then\n    echo \"toolchain=1.$((($(date -v-$(sed 's/stable \\([0-9]*\\) \\(.\\).*/\\1\\2/' <<< $toolchain) +%s)/60/60/24-16569)/7/6))\" >> $GITHUB_OUTPUT\n  else\n    echo \"toolchain=1.$((($(date --date \"${toolchain#stable }\" +%s)/60/60/24-16569)/7/6))\" >> $GITHUB_OUTPUT\n  fi\nelif [[ $toolchain =~ ^stable' 'minus' '[0-9]+' 'releases?$ ]]; then\n  echo \"toolchain=1.$((($(date +%s)/60/60/24-16569)/7/6-${toolchain//[^0-9]/}))\" >> $GITHUB_OUTPUT\nelse\n  echo \"toolchain=$toolchain\" >> $GITHUB_OUTPUT\nfi\n[Rust/Tests, stable toolchain  ]   \u2705  Success - Main : parse toolchain version\nif [[ $toolchain =~ ^stable' '[0-9]+' '(year|month|week|day)s?' 'ago$ ]]; then\n  if [[ Linux == macOS ]]; then\n    echo \"toolchain=1.$((($(date -v-$(sed 's/stable \\([0-9]*\\) \\(.\\).*/\\1\\2/' <<< $toolchain) +%s)/60/60/24-16569)/7/6))\" >> $GITHUB_OUTPUT\n  else\n    echo \"toolchain=1.$((($(date --date \"${toolchain#stable }\" +%s)/60/60/24-16569)/7/6))\" >> $GITHUB_OUTPUT\n  fi\nelif [[ $toolchain =~ ^stable' 'minus' '[0-9]+' 'releases?$ ]]; then\n  echo \"toolchain=1.$((($(date +%s)/60/60/24-16569)/7/6-${toolchain//[^0-9]/}))\" >> $GITHUB_OUTPUT\nelse\n  echo \"toolchain=$toolchain\" >> $GITHUB_OUTPUT\nfi\n[Rust/Tests, unstable toolchain] \u2b50 Run Main : install rustup if needed\nif ! command -v rustup &>/dev/null; then\n  curl --proto '=https' --tlsv1.2 --retry 10 --retry-connrefused -fsSL \"https://sh.rustup.rs\" | sh -s -- --default-toolchain none -y\n  echo \"${CARGO_HOME:-$HOME/.cargo}/bin\" >> $GITHUB_PATH\nfi\n[Rust/Lints, pinned toolchain  ]   \u2699  ::set-output:: toolchain=1.63.0\n[Rust/Lints, pinned toolchain  ] \u2b50 Run Main : construct rustup command line\necho \"targets=$(for t in ${targets//,/ }; do echo -n ' --target' $t; done)\" >> $GITHUB_OUTPUT\necho \"components=$(for c in ${components//,/ }; do echo -n ' --component' $c; done)\" >> $GITHUB_OUTPUT\necho \"downgrade=\" >> $GITHUB_OUTPUT\n[Rust/Build, minimum toolchain ]   \u2699  ::set-output:: toolchain=1.60.0\n[Rust/Tests, stable toolchain  ]   \u2699  ::set-output:: toolchain=stable\n[Rust/Tests, unstable toolchain]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-2.sh] user= workdir=\n[Rust/Benchmarks (criterion)   ]   \u2699  ::set-output:: toolchain=1.63.0\n[Rust/Tests, stable toolchain  ] \u2b50 Run Main : construct rustup command line\necho \"targets=$(for t in ${targets//,/ }; do echo -n ' --target' $t; done)\" >> $GITHUB_OUTPUT\necho \"components=$(for c in ${components//,/ }; do echo -n ' --component' $c; done)\" >> $GITHUB_OUTPUT\necho \"downgrade=\" >> $GITHUB_OUTPUT\n[Rust/Build, minimum toolchain ] \u2b50 Run Main : construct rustup command line\necho \"targets=$(for t in ${targets//,/ }; do echo -n ' --target' $t; done)\" >> $GITHUB_OUTPUT\necho \"components=$(for c in ${components//,/ }; do echo -n ' --component' $c; done)\" >> $GITHUB_OUTPUT\necho \"downgrade=\" >> $GITHUB_OUTPUT\n[Rust/Lints, pinned toolchain  ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-flags.sh] user= workdir=\n[Rust/Benchmarks (criterion)   ] \u2b50 Run Main : construct rustup command line\necho \"targets=$(for t in ${targets//,/ }; do echo -n ' --target' $t; done)\" >> $GITHUB_OUTPUT\necho \"components=$(for c in ${components//,/ }; do echo -n ' --component' $c; done)\" >> $GITHUB_OUTPUT\necho \"downgrade=\" >> $GITHUB_OUTPUT\n[Rust/Lints, pinned toolchain  ]   \u2705  Success - Main : construct rustup command line\necho \"targets=$(for t in ${targets//,/ }; do echo -n ' --target' $t; done)\" >> $GITHUB_OUTPUT\necho \"components=$(for c in ${components//,/ }; do echo -n ' --component' $c; done)\" >> $GITHUB_OUTPUT\necho \"downgrade=\" >> $GITHUB_OUTPUT\n[Rust/Tests, unstable toolchain]   | info: downloading installer\n[Rust/Tests, stable toolchain  ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-flags.sh] user= workdir=\n[Rust/Build, minimum toolchain ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-flags.sh] user= workdir=\n[Rust/Tests, stable toolchain  ]   \u2705  Success - Main : construct rustup command line\necho \"targets=$(for t in ${targets//,/ }; do echo -n ' --target' $t; done)\" >> $GITHUB_OUTPUT\necho \"components=$(for c in ${components//,/ }; do echo -n ' --component' $c; done)\" >> $GITHUB_OUTPUT\necho \"downgrade=\" >> $GITHUB_OUTPUT\n[Rust/Build, minimum toolchain ]   \u2705  Success - Main : construct rustup command line\necho \"targets=$(for t in ${targets//,/ }; do echo -n ' --target' $t; done)\" >> $GITHUB_OUTPUT\necho \"components=$(for c in ${components//,/ }; do echo -n ' --component' $c; done)\" >> $GITHUB_OUTPUT\necho \"downgrade=\" >> $GITHUB_OUTPUT\n[Rust/Benchmarks (criterion)   ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-flags.sh] user= workdir=\n[Rust/Benchmarks (criterion)   ]   \u2705  Success - Main : construct rustup command line\necho \"targets=$(for t in ${targets//,/ }; do echo -n ' --target' $t; done)\" >> $GITHUB_OUTPUT\necho \"components=$(for c in ${components//,/ }; do echo -n ' --component' $c; done)\" >> $GITHUB_OUTPUT\necho \"downgrade=\" >> $GITHUB_OUTPUT\n[Rust/Lints, pinned toolchain  ]   \u2699  ::set-output:: targets=\n[Rust/Lints, pinned toolchain  ]   \u2699  ::set-output:: components= --component rustfmt --component clippy\n[Rust/Lints, pinned toolchain  ]   \u2699  ::set-output:: downgrade=\n[Rust/Build, minimum toolchain ]   \u2699  ::set-output:: targets=\n[Rust/Build, minimum toolchain ]   \u2699  ::set-output:: components=\n[Rust/Build, minimum toolchain ]   \u2699  ::set-output:: downgrade=\n[Rust/Tests, stable toolchain  ]   \u2699  ::set-output:: targets=\n[Rust/Tests, stable toolchain  ]   \u2699  ::set-output:: components=\n[Rust/Tests, stable toolchain  ]   \u2699  ::set-output:: downgrade=\n[Rust/Tests, unstable toolchain]   | info: profile set to 'default'\n[Rust/Tests, unstable toolchain]   | info: default host triple is x86_64-unknown-linux-gnu\n[Rust/Tests, unstable toolchain]   | info: skipping toolchain installation\n[Rust/Tests, unstable toolchain]   | \n[Rust/Tests, unstable toolchain]   | \n[Rust/Tests, unstable toolchain]   | Rust is installed now. Great!\n[Rust/Tests, unstable toolchain]   | \n[Rust/Tests, unstable toolchain]   | To get started you may need to restart your current shell.\n[Rust/Tests, unstable toolchain]   | This would reload your PATH environment variable to include\n[Rust/Tests, unstable toolchain]   | Cargo's bin directory ($HOME/.cargo/bin).\n[Rust/Tests, unstable toolchain]   | \n[Rust/Tests, unstable toolchain]   | To configure your current shell, run:\n[Rust/Tests, unstable toolchain]   | source \"$HOME/.cargo/env\"\n[Rust/Tests, unstable toolchain]   \u2705  Success - Main : install rustup if needed\nif ! command -v rustup &>/dev/null; then\n  curl --proto '=https' --tlsv1.2 --retry 10 --retry-connrefused -fsSL \"https://sh.rustup.rs\" | sh -s -- --default-toolchain none -y\n  echo \"${CARGO_HOME:-$HOME/.cargo}/bin\" >> $GITHUB_PATH\nfi\n[Rust/Lints, pinned toolchain  ] \u2b50 Run Main : install rustup if needed\nif ! command -v rustup &>/dev/null; then\n  curl --proto '=https' --tlsv1.2 --retry 10 --retry-connrefused -fsSL \"https://sh.rustup.rs\" | sh -s -- --default-toolchain none -y\n  echo \"${CARGO_HOME:-$HOME/.cargo}/bin\" >> $GITHUB_PATH\nfi\n[Rust/Build, minimum toolchain ] \u2b50 Run Main : install rustup if needed\nif ! command -v rustup &>/dev/null; then\n  curl --proto '=https' --tlsv1.2 --retry 10 --retry-connrefused -fsSL \"https://sh.rustup.rs\" | sh -s -- --default-toolchain none -y\n  echo \"${CARGO_HOME:-$HOME/.cargo}/bin\" >> $GITHUB_PATH\nfi\n[Rust/Tests, stable toolchain  ] \u2b50 Run Main : install rustup if needed\nif ! command -v rustup &>/dev/null; then\n  curl --proto '=https' --tlsv1.2 --retry 10 --retry-connrefused -fsSL \"https://sh.rustup.rs\" | sh -s -- --default-toolchain none -y\n  echo \"${CARGO_HOME:-$HOME/.cargo}/bin\" >> $GITHUB_PATH\nfi\n[Rust/Benchmarks (criterion)   ]   \u2699  ::set-output:: targets=\n[Rust/Benchmarks (criterion)   ]   \u2699  ::set-output:: components=\n[Rust/Benchmarks (criterion)   ]   \u2699  ::set-output:: downgrade=\n[Rust/Benchmarks (criterion)   ] \u2b50 Run Main : install rustup if needed\nif ! command -v rustup &>/dev/null; then\n  curl --proto '=https' --tlsv1.2 --retry 10 --retry-connrefused -fsSL \"https://sh.rustup.rs\" | sh -s -- --default-toolchain none -y\n  echo \"${CARGO_HOME:-$HOME/.cargo}/bin\" >> $GITHUB_PATH\nfi\n[Rust/Tests, unstable toolchain]   \u2699  ::add-path:: /home/runneradmin/.cargo/bin\n[Rust/Tests, stable toolchain  ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-2.sh] user= workdir=\n[Rust/Lints, pinned toolchain  ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-2.sh] user= workdir=\n[Rust/Build, minimum toolchain ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-2.sh] user= workdir=\n[Rust/Tests, unstable toolchain] \u2b50 Run Main rustup toolchain install beta\n[Rust/Benchmarks (criterion)   ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-2.sh] user= workdir=\n[Rust/Tests, unstable toolchain]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-3.sh] user= workdir=\n[Rust/Tests, unstable toolchain]   | info: syncing channel updates for 'beta-x86_64-unknown-linux-gnu'\n[Rust/Tests, stable toolchain  ]   | info: downloading installer\n[Rust/Tests, unstable toolchain]   | info: latest update on 2023-05-30, rust version 1.71.0-beta.1 (eff24c06d 2023-05-29)\n[Rust/Tests, unstable toolchain]   | info: downloading component 'cargo'\n[Rust/Benchmarks (criterion)   ]   | info: downloading installer\n[Rust/Tests, unstable toolchain]   | info: downloading component 'rust-std'\n[Rust/Lints, pinned toolchain  ]   | info: downloading installer\n[Rust/Build, minimum toolchain ]   | info: downloading installer\n[Rust/Tests, unstable toolchain]   | info: downloading component 'rustc'\n[Rust/Tests, stable toolchain  ]   | info: profile set to 'default'\n[Rust/Tests, stable toolchain  ]   | info: default host triple is x86_64-unknown-linux-gnu\n[Rust/Tests, stable toolchain  ]   | info: skipping toolchain installation\n[Rust/Tests, stable toolchain  ]   | \n[Rust/Tests, stable toolchain  ]   | \n[Rust/Tests, stable toolchain  ]   | Rust is installed now. Great!\n[Rust/Tests, stable toolchain  ]   | \n[Rust/Tests, stable toolchain  ]   | To get started you may need to restart your current shell.\n[Rust/Tests, stable toolchain  ]   | This would reload your PATH environment variable to include\n[Rust/Tests, stable toolchain  ]   | Cargo's bin directory ($HOME/.cargo/bin).\n[Rust/Tests, stable toolchain  ]   | \n[Rust/Tests, stable toolchain  ]   | To configure your current shell, run:\n[Rust/Tests, stable toolchain  ]   | source \"$HOME/.cargo/env\"\n[Rust/Lints, pinned toolchain  ]   | info: profile set to 'default'\n[Rust/Lints, pinned toolchain  ]   | info: default host triple is x86_64-unknown-linux-gnu\n[Rust/Lints, pinned toolchain  ]   | info: skipping toolchain installation\n[Rust/Lints, pinned toolchain  ]   | \n[Rust/Lints, pinned toolchain  ]   | \n[Rust/Lints, pinned toolchain  ]   | Rust is installed now. Great!\n[Rust/Lints, pinned toolchain  ]   | \n[Rust/Lints, pinned toolchain  ]   | To get started you may need to restart your current shell.\n[Rust/Lints, pinned toolchain  ]   | This would reload your PATH environment variable to include\n[Rust/Lints, pinned toolchain  ]   | Cargo's bin directory ($HOME/.cargo/bin).\n[Rust/Lints, pinned toolchain  ]   | \n[Rust/Lints, pinned toolchain  ]   | To configure your current shell, run:\n[Rust/Lints, pinned toolchain  ]   | source \"$HOME/.cargo/env\"\n[Rust/Tests, stable toolchain  ]   \u2705  Success - Main : install rustup if needed\nif ! command -v rustup &>/dev/null; then\n  curl --proto '=https' --tlsv1.2 --retry 10 --retry-connrefused -fsSL \"https://sh.rustup.rs\" | sh -s -- --default-toolchain none -y\n  echo \"${CARGO_HOME:-$HOME/.cargo}/bin\" >> $GITHUB_PATH\nfi\n[Rust/Lints, pinned toolchain  ]   \u2705  Success - Main : install rustup if needed\nif ! command -v rustup &>/dev/null; then\n  curl --proto '=https' --tlsv1.2 --retry 10 --retry-connrefused -fsSL \"https://sh.rustup.rs\" | sh -s -- --default-toolchain none -y\n  echo \"${CARGO_HOME:-$HOME/.cargo}/bin\" >> $GITHUB_PATH\nfi\n[Rust/Build, minimum toolchain ]   | info: profile set to 'default'\n[Rust/Build, minimum toolchain ]   | info: default host triple is x86_64-unknown-linux-gnu\n[Rust/Build, minimum toolchain ]   | info: skipping toolchain installation\n[Rust/Build, minimum toolchain ]   | \n[Rust/Build, minimum toolchain ]   | \n[Rust/Build, minimum toolchain ]   | Rust is installed now. Great!\n[Rust/Build, minimum toolchain ]   | \n[Rust/Build, minimum toolchain ]   | To get started you may need to restart your current shell.\n[Rust/Build, minimum toolchain ]   | This would reload your PATH environment variable to include\n[Rust/Build, minimum toolchain ]   | Cargo's bin directory ($HOME/.cargo/bin).\n[Rust/Build, minimum toolchain ]   | \n[Rust/Build, minimum toolchain ]   | To configure your current shell, run:\n[Rust/Build, minimum toolchain ]   | source \"$HOME/.cargo/env\"\n[Rust/Build, minimum toolchain ]   \u2705  Success - Main : install rustup if needed\nif ! command -v rustup &>/dev/null; then\n  curl --proto '=https' --tlsv1.2 --retry 10 --retry-connrefused -fsSL \"https://sh.rustup.rs\" | sh -s -- --default-toolchain none -y\n  echo \"${CARGO_HOME:-$HOME/.cargo}/bin\" >> $GITHUB_PATH\nfi\n[Rust/Benchmarks (criterion)   ]   | \n[Rust/Benchmarks (criterion)   ]   | \n[Rust/Benchmarks (criterion)   ]   | Rust is installed now. Great!\n[Rust/Benchmarks (criterion)   ]   | \n[Rust/Benchmarks (criterion)   ]   | To get started you may need to restart your current shell.\n[Rust/Benchmarks (criterion)   ]   | This would reload your PATH environment variable to include\n[Rust/Benchmarks (criterion)   ]   | Cargo's bin directory ($HOME/.cargo/bin).\n[Rust/Benchmarks (criterion)   ]   | \n[Rust/Benchmarks (criterion)   ]   | To configure your current shell, run:\n[Rust/Benchmarks (criterion)   ]   | source \"$HOME/.cargo/env\"\n[Rust/Benchmarks (criterion)   ]   | info: profile set to 'default'\n[Rust/Benchmarks (criterion)   ]   | info: default host triple is x86_64-unknown-linux-gnu\n[Rust/Benchmarks (criterion)   ]   | info: skipping toolchain installation\n[Rust/Benchmarks (criterion)   ]   \u2705  Success - Main : install rustup if needed\nif ! command -v rustup &>/dev/null; then\n  curl --proto '=https' --tlsv1.2 --retry 10 --retry-connrefused -fsSL \"https://sh.rustup.rs\" | sh -s -- --default-toolchain none -y\n  echo \"${CARGO_HOME:-$HOME/.cargo}/bin\" >> $GITHUB_PATH\nfi\n[Rust/Tests, stable toolchain  ]   \u2699  ::add-path:: /home/runneradmin/.cargo/bin\n[Rust/Tests, unstable toolchain]   | info: installing component 'cargo'\n[Rust/Lints, pinned toolchain  ]   \u2699  ::add-path:: /home/runneradmin/.cargo/bin\n[Rust/Tests, stable toolchain  ] \u2b50 Run Main rustup toolchain install stable\n[Rust/Lints, pinned toolchain  ] \u2b50 Run Main rustup toolchain install 1.63.0\n[Rust/Build, minimum toolchain ]   \u2699  ::add-path:: /home/runneradmin/.cargo/bin\n[Rust/Tests, unstable toolchain]   | info: installing component 'rust-std'\n[Rust/Benchmarks (criterion)   ]   \u2699  ::add-path:: /home/runneradmin/.cargo/bin\n[Rust/Build, minimum toolchain ] \u2b50 Run Main rustup toolchain install 1.60.0\n[Rust/Benchmarks (criterion)   ] \u2b50 Run Main rustup toolchain install 1.63.0\n[Rust/Tests, stable toolchain  ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-3.sh] user= workdir=\n[Rust/Lints, pinned toolchain  ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-3.sh] user= workdir=\n[Rust/Benchmarks (criterion)   ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-3.sh] user= workdir=\n[Rust/Build, minimum toolchain ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-3.sh] user= workdir=\n[Rust/Tests, unstable toolchain]   | info: installing component 'rustc'\n[Rust/Tests, unstable toolchain]   | \n[Rust/Tests, unstable toolchain]   |   beta-x86_64-unknown-linux-gnu installed - rustc 1.71.0-beta.1 (eff24c06d 2023-05-29)\n[Rust/Tests, unstable toolchain]   | \n[Rust/Tests, unstable toolchain]   | info: default toolchain set to 'beta-x86_64-unknown-linux-gnu'\n[Rust/Tests, unstable toolchain]   \u2705  Success - Main rustup toolchain install beta\n[Rust/Tests, unstable toolchain] \u2b50 Run Main rustup default beta\n[Rust/Tests, unstable toolchain]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-4.sh] user= workdir=\n[Rust/Lints, pinned toolchain  ]   | info: syncing channel updates for '1.63.0-x86_64-unknown-linux-gnu'\n[Rust/Benchmarks (criterion)   ]   | info: syncing channel updates for '1.63.0-x86_64-unknown-linux-gnu'\n[Rust/Tests, unstable toolchain]   | info: using existing install for 'beta-x86_64-unknown-linux-gnu'\n[Rust/Tests, stable toolchain  ]   | info: syncing channel updates for 'stable-x86_64-unknown-linux-gnu'\n[Rust/Build, minimum toolchain ]   | info: syncing channel updates for '1.60.0-x86_64-unknown-linux-gnu'\n[Rust/Tests, unstable toolchain]   | info: default toolchain set to 'beta-x86_64-unknown-linux-gnu'\n[Rust/Tests, unstable toolchain]   | \n[Rust/Tests, unstable toolchain]   |   beta-x86_64-unknown-linux-gnu unchanged - rustc 1.71.0-beta.1 (eff24c06d 2023-05-29)\n[Rust/Tests, unstable toolchain]   | \n[Rust/Tests, unstable toolchain]   \u2705  Success - Main rustup default beta\n[Rust/Lints, pinned toolchain  ]   | info: latest update on 2022-08-11, rust version 1.63.0 (4b91a6ea7 2022-08-08)\n[Rust/Lints, pinned toolchain  ]   | info: downloading component 'cargo'\n[Rust/Benchmarks (criterion)   ]   | info: latest update on 2022-08-11, rust version 1.63.0 (4b91a6ea7 2022-08-08)\n[Rust/Benchmarks (criterion)   ]   | info: downloading component 'cargo'\n[Rust/Tests, stable toolchain  ]   | info: latest update on 2023-04-20, rust version 1.69.0 (84c898d65 2023-04-16)\n[Rust/Tests, stable toolchain  ]   | info: downloading component 'cargo'\n[Rust/Build, minimum toolchain ]   | info: latest update on 2022-04-07, rust version 1.60.0 (7737e0b5c 2022-04-04)\n[Rust/Build, minimum toolchain ]   | info: downloading component 'cargo'\n[Rust/Tests, stable toolchain  ]   | info: downloading component 'rust-std'\n[Rust/Lints, pinned toolchain  ]   | info: downloading component 'clippy'\n[Rust/Benchmarks (criterion)   ]   | info: downloading component 'rust-std'\n[Rust/Build, minimum toolchain ]   | info: downloading component 'rust-std'\n[Rust/Lints, pinned toolchain  ]   | info: downloading component 'rust-std'\n[Rust/Benchmarks (criterion)   ]   | info: downloading component 'rustc'\n[Rust/Build, minimum toolchain ]   | info: downloading component 'rustc'\n[Rust/Tests, unstable toolchain] \u2b50 Run Main : create cachekey\nDATE=$(rustc +beta --version --verbose | sed -ne 's/^commit-date: \\(20[0-9][0-9]\\)-\\([01][0-9]\\)-\\([0-3][0-9]\\)$/\\1\\2\\3/p')\nHASH=$(rustc +beta --version --verbose | sed -ne 's/^commit-hash: //p')\necho \"cachekey=$(echo $DATE$HASH | head -c12)\" >> $GITHUB_OUTPUT\n[Rust/Lints, pinned toolchain  ]   | info: downloading component 'rustc'\n[Rust/Tests, stable toolchain  ]   | info: downloading component 'rustc'\n[Rust/Benchmarks (criterion)   ]   | info: installing component 'cargo'\n[Rust/Build, minimum toolchain ]   | info: installing component 'cargo'\n[Rust/Benchmarks (criterion)   ]   | info: installing component 'rust-std'\n[Rust/Lints, pinned toolchain  ]   | info: downloading component 'rustfmt'\n[Rust/Tests, unstable toolchain]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-rustc-version.sh] user= workdir=\n[Rust/Lints, pinned toolchain  ]   | info: installing component 'cargo'\n[Rust/Tests, stable toolchain  ]   | info: installing component 'cargo'\n[Rust/Build, minimum toolchain ]   | info: installing component 'rust-std'\n[Rust/Lints, pinned toolchain  ]   | info: installing component 'clippy'\n[Rust/Tests, stable toolchain  ]   | info: installing component 'rust-std'\n[Rust/Lints, pinned toolchain  ]   | info: installing component 'rust-std'\n[Rust/Benchmarks (criterion)   ]   | info: installing component 'rustc'\n[Rust/Build, minimum toolchain ]   | info: installing component 'rustc'\n[Rust/Tests, stable toolchain  ]   | info: installing component 'rustc'\n[Rust/Lints, pinned toolchain  ]   | info: installing component 'rustc'\n[Rust/Benchmarks (criterion)   ]   | \n[Rust/Benchmarks (criterion)   ]   |   1.63.0-x86_64-unknown-linux-gnu installed - rustc 1.63.0 (4b91a6ea7 2022-08-08)\n[Rust/Benchmarks (criterion)   ]   | \n[Rust/Benchmarks (criterion)   ]   | info: default toolchain set to '1.63.0-x86_64-unknown-linux-gnu'\n[Rust/Benchmarks (criterion)   ]   \u2705  Success - Main rustup toolchain install 1.63.0\n[Rust/Benchmarks (criterion)   ] \u2b50 Run Main rustup default 1.63.0\n[Rust/Benchmarks (criterion)   ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-4.sh] user= workdir=\n[Rust/Build, minimum toolchain ]   | \n[Rust/Build, minimum toolchain ]   |   1.60.0-x86_64-unknown-linux-gnu installed - rustc 1.60.0 (7737e0b5c 2022-04-04)\n[Rust/Build, minimum toolchain ]   | \n[Rust/Build, minimum toolchain ]   | info: default toolchain set to '1.60.0-x86_64-unknown-linux-gnu'\n[Rust/Build, minimum toolchain ]   \u2705  Success - Main rustup toolchain install 1.60.0\n[Rust/Build, minimum toolchain ] \u2b50 Run Main rustup default 1.60.0\n[Rust/Lints, pinned toolchain  ]   | info: installing component 'rustfmt'\n[Rust/Build, minimum toolchain ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-4.sh] user= workdir=\n[Rust/Tests, stable toolchain  ]   | \n[Rust/Tests, stable toolchain  ]   |   stable-x86_64-unknown-linux-gnu installed - rustc 1.69.0 (84c898d65 2023-04-16)\n[Rust/Tests, stable toolchain  ]   | \n[Rust/Tests, stable toolchain  ]   | info: default toolchain set to 'stable-x86_64-unknown-linux-gnu'\n[Rust/Tests, stable toolchain  ]   \u2705  Success - Main rustup toolchain install stable\n[Rust/Lints, pinned toolchain  ]   | \n[Rust/Lints, pinned toolchain  ]   |   1.63.0-x86_64-unknown-linux-gnu installed - rustc 1.63.0 (4b91a6ea7 2022-08-08)\n[Rust/Lints, pinned toolchain  ]   | \n[Rust/Lints, pinned toolchain  ]   | info: default toolchain set to '1.63.0-x86_64-unknown-linux-gnu'\n[Rust/Lints, pinned toolchain  ]   \u2705  Success - Main rustup toolchain install 1.63.0\n[Rust/Tests, stable toolchain  ] \u2b50 Run Main rustup default stable\n[Rust/Lints, pinned toolchain  ] \u2b50 Run Main rustup default 1.63.0\n[Rust/Tests, stable toolchain  ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-4.sh] user= workdir=\n[Rust/Lints, pinned toolchain  ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-4.sh] user= workdir=\n[Rust/Lints, pinned toolchain  ]   | info: using existing install for '1.63.0-x86_64-unknown-linux-gnu'\n[Rust/Benchmarks (criterion)   ]   | info: using existing install for '1.63.0-x86_64-unknown-linux-gnu'\n[Rust/Lints, pinned toolchain  ]   | info: default toolchain set to '1.63.0-x86_64-unknown-linux-gnu'\n[Rust/Lints, pinned toolchain  ]   | \n[Rust/Benchmarks (criterion)   ]   | info: default toolchain set to '1.63.0-x86_64-unknown-linux-gnu'\n[Rust/Benchmarks (criterion)   ]   | \n[Rust/Lints, pinned toolchain  ]   |   1.63.0-x86_64-unknown-linux-gnu unchanged - rustc 1.63.0 (4b91a6ea7 2022-08-08)\n[Rust/Lints, pinned toolchain  ]   | \n[Rust/Benchmarks (criterion)   ]   |   1.63.0-x86_64-unknown-linux-gnu unchanged - rustc 1.63.0 (4b91a6ea7 2022-08-08)\n[Rust/Benchmarks (criterion)   ]   | \n[Rust/Tests, unstable toolchain]   \u2705  Success - Main : create cachekey\nDATE=$(rustc +beta --version --verbose | sed -ne 's/^commit-date: \\(20[0-9][0-9]\\)-\\([01][0-9]\\)-\\([0-3][0-9]\\)$/\\1\\2\\3/p')\nHASH=$(rustc +beta --version --verbose | sed -ne 's/^commit-hash: //p')\necho \"cachekey=$(echo $DATE$HASH | head -c12)\" >> $GITHUB_OUTPUT\n[Rust/Lints, pinned toolchain  ]   \u2705  Success - Main rustup default 1.63.0\n[Rust/Benchmarks (criterion)   ]   \u2705  Success - Main rustup default 1.63.0\n[Rust/Tests, stable toolchain  ]   | info: using existing install for 'stable-x86_64-unknown-linux-gnu'\n[Rust/Build, minimum toolchain ]   | info: using existing install for '1.60.0-x86_64-unknown-linux-gnu'\n[Rust/Tests, stable toolchain  ]   | info: default toolchain set to 'stable-x86_64-unknown-linux-gnu'\n[Rust/Tests, stable toolchain  ]   | \n[Rust/Tests, stable toolchain  ]   |   stable-x86_64-unknown-linux-gnu unchanged - rustc 1.69.0 (84c898d65 2023-04-16)\n[Rust/Tests, stable toolchain  ]   | \n[Rust/Tests, stable toolchain  ]   \u2705  Success - Main rustup default stable\n[Rust/Build, minimum toolchain ]   | info: default toolchain set to '1.60.0-x86_64-unknown-linux-gnu'\n[Rust/Build, minimum toolchain ]   | \n[Rust/Build, minimum toolchain ]   |   1.60.0-x86_64-unknown-linux-gnu unchanged - rustc 1.60.0 (7737e0b5c 2022-04-04)\n[Rust/Build, minimum toolchain ]   | \n[Rust/Build, minimum toolchain ]   \u2705  Success - Main rustup default 1.60.0\n[Rust/Tests, unstable toolchain]   \u2699  ::set-output:: cachekey=20230529eff2\n[Rust/Benchmarks (criterion)   ] \u2b50 Run Main : create cachekey\nDATE=$(rustc +1.63.0 --version --verbose | sed -ne 's/^commit-date: \\(20[0-9][0-9]\\)-\\([01][0-9]\\)-\\([0-3][0-9]\\)$/\\1\\2\\3/p')\nHASH=$(rustc +1.63.0 --version --verbose | sed -ne 's/^commit-hash: //p')\necho \"cachekey=$(echo $DATE$HASH | head -c12)\" >> $GITHUB_OUTPUT\n[Rust/Tests, stable toolchain  ] \u2b50 Run Main : create cachekey\nDATE=$(rustc +stable --version --verbose | sed -ne 's/^commit-date: \\(20[0-9][0-9]\\)-\\([01][0-9]\\)-\\([0-3][0-9]\\)$/\\1\\2\\3/p')\nHASH=$(rustc +stable --version --verbose | sed -ne 's/^commit-hash: //p')\necho \"cachekey=$(echo $DATE$HASH | head -c12)\" >> $GITHUB_OUTPUT\n[Rust/Lints, pinned toolchain  ] \u2b50 Run Main : create cachekey\nDATE=$(rustc +1.63.0 --version --verbose | sed -ne 's/^commit-date: \\(20[0-9][0-9]\\)-\\([01][0-9]\\)-\\([0-3][0-9]\\)$/\\1\\2\\3/p')\nHASH=$(rustc +1.63.0 --version --verbose | sed -ne 's/^commit-hash: //p')\necho \"cachekey=$(echo $DATE$HASH | head -c12)\" >> $GITHUB_OUTPUT\n[Rust/Tests, unstable toolchain] \u2b50 Run Main : disable incremental compilation\nif [ -z \"${CARGO_INCREMENTAL+set}\" ]; then\n  echo CARGO_INCREMENTAL=0 >> $GITHUB_ENV\nfi\n[Rust/Build, minimum toolchain ] \u2b50 Run Main : create cachekey\nDATE=$(rustc +1.60.0 --version --verbose | sed -ne 's/^commit-date: \\(20[0-9][0-9]\\)-\\([01][0-9]\\)-\\([0-3][0-9]\\)$/\\1\\2\\3/p')\nHASH=$(rustc +1.60.0 --version --verbose | sed -ne 's/^commit-hash: //p')\necho \"cachekey=$(echo $DATE$HASH | head -c12)\" >> $GITHUB_OUTPUT\n[Rust/Benchmarks (criterion)   ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-rustc-version.sh] user= workdir=\n[Rust/Benchmarks (criterion)   ]   \u2705  Success - Main : create cachekey\nDATE=$(rustc +1.63.0 --version --verbose | sed -ne 's/^commit-date: \\(20[0-9][0-9]\\)-\\([01][0-9]\\)-\\([0-3][0-9]\\)$/\\1\\2\\3/p')\nHASH=$(rustc +1.63.0 --version --verbose | sed -ne 's/^commit-hash: //p')\necho \"cachekey=$(echo $DATE$HASH | head -c12)\" >> $GITHUB_OUTPUT\n[Rust/Tests, stable toolchain  ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-rustc-version.sh] user= workdir=\n[Rust/Tests, unstable toolchain]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-6.sh] user= workdir=\n[Rust/Lints, pinned toolchain  ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-rustc-version.sh] user= workdir=\n[Rust/Build, minimum toolchain ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-rustc-version.sh] user= workdir=\n[Rust/Tests, unstable toolchain]   \u2705  Success - Main : disable incremental compilation\nif [ -z \"${CARGO_INCREMENTAL+set}\" ]; then\n  echo CARGO_INCREMENTAL=0 >> $GITHUB_ENV\nfi\n[Rust/Tests, stable toolchain  ]   \u2705  Success - Main : create cachekey\nDATE=$(rustc +stable --version --verbose | sed -ne 's/^commit-date: \\(20[0-9][0-9]\\)-\\([01][0-9]\\)-\\([0-3][0-9]\\)$/\\1\\2\\3/p')\nHASH=$(rustc +stable --version --verbose | sed -ne 's/^commit-hash: //p')\necho \"cachekey=$(echo $DATE$HASH | head -c12)\" >> $GITHUB_OUTPUT\n[Rust/Tests, unstable toolchain]   \u2699  ::set-env:: CARGO_INCREMENTAL=0\n[Rust/Lints, pinned toolchain  ]   \u2705  Success - Main : create cachekey\nDATE=$(rustc +1.63.0 --version --verbose | sed -ne 's/^commit-date: \\(20[0-9][0-9]\\)-\\([01][0-9]\\)-\\([0-3][0-9]\\)$/\\1\\2\\3/p')\nHASH=$(rustc +1.63.0 --version --verbose | sed -ne 's/^commit-hash: //p')\necho \"cachekey=$(echo $DATE$HASH | head -c12)\" >> $GITHUB_OUTPUT\n[Rust/Build, minimum toolchain ]   \u2705  Success - Main : create cachekey\nDATE=$(rustc +1.60.0 --version --verbose | sed -ne 's/^commit-date: \\(20[0-9][0-9]\\)-\\([01][0-9]\\)-\\([0-3][0-9]\\)$/\\1\\2\\3/p')\nHASH=$(rustc +1.60.0 --version --verbose | sed -ne 's/^commit-hash: //p')\necho \"cachekey=$(echo $DATE$HASH | head -c12)\" >> $GITHUB_OUTPUT\n[Rust/Benchmarks (criterion)   ]   \u2699  ::set-output:: cachekey=202208084b91\n[Rust/Tests, stable toolchain  ]   \u2699  ::set-output:: cachekey=2023041684c8\n[Rust/Benchmarks (criterion)   ] \u2b50 Run Main : disable incremental compilation\nif [ -z \"${CARGO_INCREMENTAL+set}\" ]; then\n  echo CARGO_INCREMENTAL=0 >> $GITHUB_ENV\nfi\n[Rust/Build, minimum toolchain ]   \u2699  ::set-output:: cachekey=202204047737\n[Rust/Lints, pinned toolchain  ]   \u2699  ::set-output:: cachekey=202208084b91\n[Rust/Tests, stable toolchain  ] \u2b50 Run Main : disable incremental compilation\nif [ -z \"${CARGO_INCREMENTAL+set}\" ]; then\n  echo CARGO_INCREMENTAL=0 >> $GITHUB_ENV\nfi\n[Rust/Tests, unstable toolchain] \u2b50 Run Main : enable colors in Cargo output\nif [ -z \"${CARGO_TERM_COLOR+set}\" ]; then\n  echo CARGO_TERM_COLOR=always >> $GITHUB_ENV\nfi\n[Rust/Lints, pinned toolchain  ] \u2b50 Run Main : disable incremental compilation\nif [ -z \"${CARGO_INCREMENTAL+set}\" ]; then\n  echo CARGO_INCREMENTAL=0 >> $GITHUB_ENV\nfi\n[Rust/Build, minimum toolchain ] \u2b50 Run Main : disable incremental compilation\nif [ -z \"${CARGO_INCREMENTAL+set}\" ]; then\n  echo CARGO_INCREMENTAL=0 >> $GITHUB_ENV\nfi\n[Rust/Benchmarks (criterion)   ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-6.sh] user= workdir=\n[Rust/Tests, unstable toolchain]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-7.sh] user= workdir=\n[Rust/Lints, pinned toolchain  ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-6.sh] user= workdir=\n[Rust/Tests, stable toolchain  ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-6.sh] user= workdir=\n[Rust/Build, minimum toolchain ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-6.sh] user= workdir=\n[Rust/Tests, unstable toolchain]   \u2705  Success - Main : enable colors in Cargo output\nif [ -z \"${CARGO_TERM_COLOR+set}\" ]; then\n  echo CARGO_TERM_COLOR=always >> $GITHUB_ENV\nfi\n[Rust/Build, minimum toolchain ]   \u2705  Success - Main : disable incremental compilation\nif [ -z \"${CARGO_INCREMENTAL+set}\" ]; then\n  echo CARGO_INCREMENTAL=0 >> $GITHUB_ENV\nfi\n[Rust/Benchmarks (criterion)   ]   \u2705  Success - Main : disable incremental compilation\nif [ -z \"${CARGO_INCREMENTAL+set}\" ]; then\n  echo CARGO_INCREMENTAL=0 >> $GITHUB_ENV\nfi\n[Rust/Tests, stable toolchain  ]   \u2705  Success - Main : disable incremental compilation\nif [ -z \"${CARGO_INCREMENTAL+set}\" ]; then\n  echo CARGO_INCREMENTAL=0 >> $GITHUB_ENV\nfi\n[Rust/Lints, pinned toolchain  ]   \u2705  Success - Main : disable incremental compilation\nif [ -z \"${CARGO_INCREMENTAL+set}\" ]; then\n  echo CARGO_INCREMENTAL=0 >> $GITHUB_ENV\nfi\n[Rust/Tests, stable toolchain  ]   \u2699  ::set-env:: CARGO_INCREMENTAL=0\n[Rust/Build, minimum toolchain ]   \u2699  ::set-env:: CARGO_INCREMENTAL=0\n[Rust/Lints, pinned toolchain  ]   \u2699  ::set-env:: CARGO_INCREMENTAL=0\n[Rust/Benchmarks (criterion)   ]   \u2699  ::set-env:: CARGO_INCREMENTAL=0\n[Rust/Tests, stable toolchain  ] \u2b50 Run Main : enable colors in Cargo output\nif [ -z \"${CARGO_TERM_COLOR+set}\" ]; then\n  echo CARGO_TERM_COLOR=always >> $GITHUB_ENV\nfi\n[Rust/Lints, pinned toolchain  ] \u2b50 Run Main : enable colors in Cargo output\nif [ -z \"${CARGO_TERM_COLOR+set}\" ]; then\n  echo CARGO_TERM_COLOR=always >> $GITHUB_ENV\nfi\n[Rust/Build, minimum toolchain ] \u2b50 Run Main : enable colors in Cargo output\nif [ -z \"${CARGO_TERM_COLOR+set}\" ]; then\n  echo CARGO_TERM_COLOR=always >> $GITHUB_ENV\nfi\n[Rust/Benchmarks (criterion)   ] \u2b50 Run Main : enable colors in Cargo output\nif [ -z \"${CARGO_TERM_COLOR+set}\" ]; then\n  echo CARGO_TERM_COLOR=always >> $GITHUB_ENV\nfi\n[Rust/Tests, unstable toolchain] \u2b50 Run Main : enable Cargo sparse registry\n# except on 1.66 and 1.67, on which it is unstable\nif [ -z \"${CARGO_REGISTRIES_CRATES_IO_PROTOCOL+set}\" -o -f \"/tmp\"/.implicit_cargo_registries_crates_io_protocol ]; then\n  touch \"/tmp\"/.implicit_cargo_registries_crates_io_protocol || true\n  if rustc +beta --version --verbose | (! grep -q '^release: 1\\.6[67]\\.'); then\n    echo CARGO_REGISTRIES_CRATES_IO_PROTOCOL=sparse >> $GITHUB_ENV\n  else\n    echo CARGO_REGISTRIES_CRATES_IO_PROTOCOL=git >> $GITHUB_ENV\n  fi\nfi\n[Rust/Tests, unstable toolchain]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-8.sh] user= workdir=\n[Rust/Tests, stable toolchain  ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-7.sh] user= workdir=\n[Rust/Build, minimum toolchain ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-7.sh] user= workdir=\n[Rust/Benchmarks (criterion)   ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-7.sh] user= workdir=\n[Rust/Lints, pinned toolchain  ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-7.sh] user= workdir=\n[Rust/Lints, pinned toolchain  ]   \u2705  Success - Main : enable colors in Cargo output\nif [ -z \"${CARGO_TERM_COLOR+set}\" ]; then\n  echo CARGO_TERM_COLOR=always >> $GITHUB_ENV\nfi\n[Rust/Benchmarks (criterion)   ]   \u2705  Success - Main : enable colors in Cargo output\nif [ -z \"${CARGO_TERM_COLOR+set}\" ]; then\n  echo CARGO_TERM_COLOR=always >> $GITHUB_ENV\nfi\n[Rust/Build, minimum toolchain ]   \u2705  Success - Main : enable colors in Cargo output\nif [ -z \"${CARGO_TERM_COLOR+set}\" ]; then\n  echo CARGO_TERM_COLOR=always >> $GITHUB_ENV\nfi\n[Rust/Tests, unstable toolchain]   \u2705  Success - Main : enable Cargo sparse registry\n# except on 1.66 and 1.67, on which it is unstable\nif [ -z \"${CARGO_REGISTRIES_CRATES_IO_PROTOCOL+set}\" -o -f \"/tmp\"/.implicit_cargo_registries_crates_io_protocol ]; then\n  touch \"/tmp\"/.implicit_cargo_registries_crates_io_protocol || true\n  if rustc +beta --version --verbose | (! grep -q '^release: 1\\.6[67]\\.'); then\n    echo CARGO_REGISTRIES_CRATES_IO_PROTOCOL=sparse >> $GITHUB_ENV\n  else\n    echo CARGO_REGISTRIES_CRATES_IO_PROTOCOL=git >> $GITHUB_ENV\n  fi\nfi\n[Rust/Tests, stable toolchain  ]   \u2705  Success - Main : enable colors in Cargo output\nif [ -z \"${CARGO_TERM_COLOR+set}\" ]; then\n  echo CARGO_TERM_COLOR=always >> $GITHUB_ENV\nfi\n[Rust/Tests, unstable toolchain]   \u2699  ::set-env:: CARGO_REGISTRIES_CRATES_IO_PROTOCOL=sparse\n[Rust/Tests, unstable toolchain] \u2b50 Run Main rustc +beta --version --verbose\n[Rust/Benchmarks (criterion)   ] \u2b50 Run Main : enable Cargo sparse registry\n# except on 1.66 and 1.67, on which it is unstable\nif [ -z \"${CARGO_REGISTRIES_CRATES_IO_PROTOCOL+set}\" -o -f \"/tmp\"/.implicit_cargo_registries_crates_io_protocol ]; then\n  touch \"/tmp\"/.implicit_cargo_registries_crates_io_protocol || true\n  if rustc +1.63.0 --version --verbose | (! grep -q '^release: 1\\.6[67]\\.'); then\n    echo CARGO_REGISTRIES_CRATES_IO_PROTOCOL=sparse >> $GITHUB_ENV\n  else\n    echo CARGO_REGISTRIES_CRATES_IO_PROTOCOL=git >> $GITHUB_ENV\n  fi\nfi\n[Rust/Tests, stable toolchain  ] \u2b50 Run Main : enable Cargo sparse registry\n# except on 1.66 and 1.67, on which it is unstable\nif [ -z \"${CARGO_REGISTRIES_CRATES_IO_PROTOCOL+set}\" -o -f \"/tmp\"/.implicit_cargo_registries_crates_io_protocol ]; then\n  touch \"/tmp\"/.implicit_cargo_registries_crates_io_protocol || true\n  if rustc +stable --version --verbose | (! grep -q '^release: 1\\.6[67]\\.'); then\n    echo CARGO_REGISTRIES_CRATES_IO_PROTOCOL=sparse >> $GITHUB_ENV\n  else\n    echo CARGO_REGISTRIES_CRATES_IO_PROTOCOL=git >> $GITHUB_ENV\n  fi\nfi\n[Rust/Build, minimum toolchain ] \u2b50 Run Main : enable Cargo sparse registry\n# except on 1.66 and 1.67, on which it is unstable\nif [ -z \"${CARGO_REGISTRIES_CRATES_IO_PROTOCOL+set}\" -o -f \"/tmp\"/.implicit_cargo_registries_crates_io_protocol ]; then\n  touch \"/tmp\"/.implicit_cargo_registries_crates_io_protocol || true\n  if rustc +1.60.0 --version --verbose | (! grep -q '^release: 1\\.6[67]\\.'); then\n    echo CARGO_REGISTRIES_CRATES_IO_PROTOCOL=sparse >> $GITHUB_ENV\n  else\n    echo CARGO_REGISTRIES_CRATES_IO_PROTOCOL=git >> $GITHUB_ENV\n  fi\nfi\n[Rust/Lints, pinned toolchain  ] \u2b50 Run Main : enable Cargo sparse registry\n# except on 1.66 and 1.67, on which it is unstable\nif [ -z \"${CARGO_REGISTRIES_CRATES_IO_PROTOCOL+set}\" -o -f \"/tmp\"/.implicit_cargo_registries_crates_io_protocol ]; then\n  touch \"/tmp\"/.implicit_cargo_registries_crates_io_protocol || true\n  if rustc +1.63.0 --version --verbose | (! grep -q '^release: 1\\.6[67]\\.'); then\n    echo CARGO_REGISTRIES_CRATES_IO_PROTOCOL=sparse >> $GITHUB_ENV\n  else\n    echo CARGO_REGISTRIES_CRATES_IO_PROTOCOL=git >> $GITHUB_ENV\n  fi\nfi\n[Rust/Benchmarks (criterion)   ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-8.sh] user= workdir=\n[Rust/Tests, unstable toolchain]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-9.sh] user= workdir=\n[Rust/Lints, pinned toolchain  ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-8.sh] user= workdir=\n[Rust/Build, minimum toolchain ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-8.sh] user= workdir=\n[Rust/Tests, stable toolchain  ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-8.sh] user= workdir=\n[Rust/Build, minimum toolchain ]   \u2705  Success - Main : enable Cargo sparse registry\n# except on 1.66 and 1.67, on which it is unstable\nif [ -z \"${CARGO_REGISTRIES_CRATES_IO_PROTOCOL+set}\" -o -f \"/tmp\"/.implicit_cargo_registries_crates_io_protocol ]; then\n  touch \"/tmp\"/.implicit_cargo_registries_crates_io_protocol || true\n  if rustc +1.60.0 --version --verbose | (! grep -q '^release: 1\\.6[67]\\.'); then\n    echo CARGO_REGISTRIES_CRATES_IO_PROTOCOL=sparse >> $GITHUB_ENV\n  else\n    echo CARGO_REGISTRIES_CRATES_IO_PROTOCOL=git >> $GITHUB_ENV\n  fi\nfi\n[Rust/Lints, pinned toolchain  ]   \u2705  Success - Main : enable Cargo sparse registry\n# except on 1.66 and 1.67, on which it is unstable\nif [ -z \"${CARGO_REGISTRIES_CRATES_IO_PROTOCOL+set}\" -o -f \"/tmp\"/.implicit_cargo_registries_crates_io_protocol ]; then\n  touch \"/tmp\"/.implicit_cargo_registries_crates_io_protocol || true\n  if rustc +1.63.0 --version --verbose | (! grep -q '^release: 1\\.6[67]\\.'); then\n    echo CARGO_REGISTRIES_CRATES_IO_PROTOCOL=sparse >> $GITHUB_ENV\n  else\n    echo CARGO_REGISTRIES_CRATES_IO_PROTOCOL=git >> $GITHUB_ENV\n  fi\nfi\n[Rust/Tests, unstable toolchain]   | rustc 1.71.0-beta.1 (eff24c06d 2023-05-29)\n[Rust/Tests, unstable toolchain]   | binary: rustc\n[Rust/Tests, unstable toolchain]   | commit-hash: eff24c06d8f4397802b546aa2e52450e1022fc02\n[Rust/Tests, unstable toolchain]   | commit-date: 2023-05-29\n[Rust/Tests, unstable toolchain]   | host: x86_64-unknown-linux-gnu\n[Rust/Tests, unstable toolchain]   | release: 1.71.0-beta.1\n[Rust/Tests, unstable toolchain]   | LLVM version: 16.0.4\n[Rust/Tests, unstable toolchain]   \u2705  Success - Main rustc +beta --version --verbose\n[Rust/Benchmarks (criterion)   ]   \u2705  Success - Main : enable Cargo sparse registry\n# except on 1.66 and 1.67, on which it is unstable\nif [ -z \"${CARGO_REGISTRIES_CRATES_IO_PROTOCOL+set}\" -o -f \"/tmp\"/.implicit_cargo_registries_crates_io_protocol ]; then\n  touch \"/tmp\"/.implicit_cargo_registries_crates_io_protocol || true\n  if rustc +1.63.0 --version --verbose | (! grep -q '^release: 1\\.6[67]\\.'); then\n    echo CARGO_REGISTRIES_CRATES_IO_PROTOCOL=sparse >> $GITHUB_ENV\n  else\n    echo CARGO_REGISTRIES_CRATES_IO_PROTOCOL=git >> $GITHUB_ENV\n  fi\nfi\n[Rust/Build, minimum toolchain ]   \u2699  ::set-env:: CARGO_REGISTRIES_CRATES_IO_PROTOCOL=sparse\n[Rust/Lints, pinned toolchain  ]   \u2699  ::set-env:: CARGO_REGISTRIES_CRATES_IO_PROTOCOL=sparse\n[Rust/Tests, stable toolchain  ]   \u2705  Success - Main : enable Cargo sparse registry\n# except on 1.66 and 1.67, on which it is unstable\nif [ -z \"${CARGO_REGISTRIES_CRATES_IO_PROTOCOL+set}\" -o -f \"/tmp\"/.implicit_cargo_registries_crates_io_protocol ]; then\n  touch \"/tmp\"/.implicit_cargo_registries_crates_io_protocol || true\n  if rustc +stable --version --verbose | (! grep -q '^release: 1\\.6[67]\\.'); then\n    echo CARGO_REGISTRIES_CRATES_IO_PROTOCOL=sparse >> $GITHUB_ENV\n  else\n    echo CARGO_REGISTRIES_CRATES_IO_PROTOCOL=git >> $GITHUB_ENV\n  fi\nfi\n[Rust/Benchmarks (criterion)   ]   \u2699  ::set-env:: CARGO_REGISTRIES_CRATES_IO_PROTOCOL=sparse\n[Rust/Tests, stable toolchain  ]   \u2699  ::set-env:: CARGO_REGISTRIES_CRATES_IO_PROTOCOL=sparse\n[Rust/Tests, unstable toolchain]   \u2699  ::set-output:: cachekey=20230529eff2\n[Rust/Tests, unstable toolchain]   \u2699  ::set-output:: name=beta\n[Rust/Tests, unstable toolchain]   \u2705  Success - Main Install toolchain\n[Rust/Lints, pinned toolchain  ] \u2b50 Run Main rustc +1.63.0 --version --verbose\n[Rust/Tests, stable toolchain  ] \u2b50 Run Main rustc +stable --version --verbose\n[Rust/Build, minimum toolchain ] \u2b50 Run Main rustc +1.60.0 --version --verbose\n[Rust/Benchmarks (criterion)   ] \u2b50 Run Main rustc +1.63.0 --version --verbose\n[Rust/Tests, unstable toolchain] \u2b50 Run Main cargo build\n[Rust/Benchmarks (criterion)   ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-9.sh] user= workdir=\n[Rust/Build, minimum toolchain ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-9.sh] user= workdir=\n[Rust/Tests, stable toolchain  ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-9.sh] user= workdir=\n[Rust/Lints, pinned toolchain  ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-9.sh] user= workdir=\n[Rust/Tests, unstable toolchain]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/2] user= workdir=\n[Rust/Build, minimum toolchain ]   | rustc 1.60.0 (7737e0b5c 2022-04-04)\n[Rust/Build, minimum toolchain ]   | binary: rustc\n[Rust/Build, minimum toolchain ]   | commit-hash: 7737e0b5c4103216d6fd8cf941b7ab9bdbaace7c\n[Rust/Build, minimum toolchain ]   | commit-date: 2022-04-04\n[Rust/Build, minimum toolchain ]   | host: x86_64-unknown-linux-gnu\n[Rust/Build, minimum toolchain ]   | release: 1.60.0\n[Rust/Build, minimum toolchain ]   | LLVM version: 14.0.0\n[Rust/Build, minimum toolchain ]   \u2705  Success - Main rustc +1.60.0 --version --verbose\n[Rust/Lints, pinned toolchain  ]   | rustc 1.63.0 (4b91a6ea7 2022-08-08)\n[Rust/Lints, pinned toolchain  ]   | binary: rustc\n[Rust/Lints, pinned toolchain  ]   | commit-hash: 4b91a6ea7258a947e59c6522cd5898e7c0a6a88f\n[Rust/Lints, pinned toolchain  ]   | commit-date: 2022-08-08\n[Rust/Lints, pinned toolchain  ]   | host: x86_64-unknown-linux-gnu\n[Rust/Lints, pinned toolchain  ]   | release: 1.63.0\n[Rust/Lints, pinned toolchain  ]   | LLVM version: 14.0.5\n[Rust/Lints, pinned toolchain  ]   \u2705  Success - Main rustc +1.63.0 --version --verbose\n[Rust/Tests, stable toolchain  ]   | rustc 1.69.0 (84c898d65 2023-04-16)\n[Rust/Tests, stable toolchain  ]   | binary: rustc\n[Rust/Tests, stable toolchain  ]   | commit-hash: 84c898d65adf2f39a5a98507f1fe0ce10a2b8dbc\n[Rust/Tests, stable toolchain  ]   | commit-date: 2023-04-16\n[Rust/Tests, stable toolchain  ]   | host: x86_64-unknown-linux-gnu\n[Rust/Tests, stable toolchain  ]   | release: 1.69.0\n[Rust/Tests, stable toolchain  ]   | LLVM version: 15.0.7\n[Rust/Tests, stable toolchain  ]   \u2705  Success - Main rustc +stable --version --verbose\n[Rust/Benchmarks (criterion)   ]   | rustc 1.63.0 (4b91a6ea7 2022-08-08)\n[Rust/Benchmarks (criterion)   ]   | binary: rustc\n[Rust/Benchmarks (criterion)   ]   | commit-hash: 4b91a6ea7258a947e59c6522cd5898e7c0a6a88f\n[Rust/Benchmarks (criterion)   ]   | commit-date: 2022-08-08\n[Rust/Benchmarks (criterion)   ]   | host: x86_64-unknown-linux-gnu\n[Rust/Benchmarks (criterion)   ]   | release: 1.63.0\n[Rust/Benchmarks (criterion)   ]   | LLVM version: 14.0.5\n[Rust/Benchmarks (criterion)   ]   \u2705  Success - Main rustc +1.63.0 --version --verbose\n[Rust/Tests, unstable toolchain]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m    Updating\u001b[0m crates.io index\n[Rust/Tests, unstable toolchain]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m Downloading\u001b[0m crates ...\n[Rust/Tests, unstable toolchain]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m  Downloaded\u001b[0m lazy_static v1.4.0\n[Rust/Tests, unstable toolchain]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m  Downloaded\u001b[0m fnv v1.0.7\n[Rust/Tests, unstable toolchain]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m  Downloaded\u001b[0m cfg-if v1.0.0\n[Rust/Tests, unstable toolchain]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m  Downloaded\u001b[0m lock_api v0.4.9\n[Rust/Tests, unstable toolchain]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m  Downloaded\u001b[0m proc-macro2 v1.0.59\n[Rust/Tests, unstable toolchain]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m  Downloaded\u001b[0m parking_lot_core v0.9.7\n[Rust/Tests, unstable toolchain]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m  Downloaded\u001b[0m unicode-ident v1.0.9\n[Rust/Tests, unstable toolchain]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m  Downloaded\u001b[0m quote v1.0.28\n[Rust/Tests, unstable toolchain]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m  Downloaded\u001b[0m thiserror-impl v1.0.40\n[Rust/Tests, unstable toolchain]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m  Downloaded\u001b[0m thiserror v1.0.40\n[Rust/Tests, unstable toolchain]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m  Downloaded\u001b[0m protobuf v2.28.0\n[Rust/Tests, unstable toolchain]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m  Downloaded\u001b[0m smallvec v1.10.0\n[Rust/Tests, unstable toolchain]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m  Downloaded\u001b[0m syn v2.0.18\n[Rust/Tests, unstable toolchain]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m  Downloaded\u001b[0m libc v0.2.144\n[Rust/Tests, unstable toolchain]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m  Downloaded\u001b[0m scopeguard v1.1.0\n[Rust/Tests, unstable toolchain]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m  Downloaded\u001b[0m autocfg v1.1.0\n[Rust/Tests, unstable toolchain]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m  Downloaded\u001b[0m parking_lot v0.12.1\n[Rust/Tests, unstable toolchain]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m  Downloaded\u001b[0m memchr v2.5.0\n[Rust/Tests, unstable toolchain]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m   Compiling\u001b[0m proc-macro2 v1.0.59\n[Rust/Tests, unstable toolchain]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m   Compiling\u001b[0m quote v1.0.28\n[Rust/Tests, unstable toolchain]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m   Compiling\u001b[0m unicode-ident v1.0.9\n[Rust/Tests, unstable toolchain]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m   Compiling\u001b[0m autocfg v1.1.0\n[Rust/Tests, unstable toolchain]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m   Compiling\u001b[0m libc v0.2.144\n[Rust/Tests, unstable toolchain]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m   Compiling\u001b[0m parking_lot_core v0.9.7\n[Rust/Tests, unstable toolchain]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m   Compiling\u001b[0m memchr v2.5.0\n[Rust/Tests, unstable toolchain]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m   Compiling\u001b[0m scopeguard v1.1.0\n[Rust/Tests, unstable toolchain]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m   Compiling\u001b[0m cfg-if v1.0.0\n[Rust/Tests, unstable toolchain]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m   Compiling\u001b[0m smallvec v1.10.0\n[Rust/Tests, unstable toolchain]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m   Compiling\u001b[0m thiserror v1.0.40\n[Rust/Tests, unstable toolchain]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m   Compiling\u001b[0m protobuf v2.28.0\n[Rust/Tests, unstable toolchain]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m   Compiling\u001b[0m prometheus v0.13.3 (/tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/tikv-rust-prometheus)\n[Rust/Tests, unstable toolchain]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m   Compiling\u001b[0m fnv v1.0.7\n[Rust/Tests, unstable toolchain]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m   Compiling\u001b[0m lazy_static v1.4.0\n[Rust/Tests, unstable toolchain]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m   Compiling\u001b[0m lock_api v0.4.9\n[Rust/Tests, unstable toolchain]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m   Compiling\u001b[0m syn v2.0.18\n[Rust/Tests, unstable toolchain]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m   Compiling\u001b[0m parking_lot v0.12.1\n[Rust/Lints, pinned toolchain  ]   \u2699  ::set-output:: cachekey=202208084b91\n[Rust/Lints, pinned toolchain  ]   \u2699  ::set-output:: name=1.63.0\n[Rust/Lints, pinned toolchain  ]   \u2705  Success - Main Install toolchain\n[Rust/Build, minimum toolchain ]   \u2699  ::set-output:: cachekey=202204047737\n[Rust/Build, minimum toolchain ]   \u2699  ::set-output:: name=1.60.0\n[Rust/Build, minimum toolchain ]   \u2705  Success - Main Install toolchain\n[Rust/Benchmarks (criterion)   ]   \u2699  ::set-output:: cachekey=202208084b91\n[Rust/Benchmarks (criterion)   ]   \u2699  ::set-output:: name=1.63.0\n[Rust/Benchmarks (criterion)   ]   \u2705  Success - Main Install toolchain\n[Rust/Tests, stable toolchain  ]   \u2699  ::set-output:: cachekey=2023041684c8\n[Rust/Tests, stable toolchain  ]   \u2699  ::set-output:: name=stable\n[Rust/Tests, stable toolchain  ]   \u2705  Success - Main Install toolchain\n[Rust/Tests, unstable toolchain]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m   Compiling\u001b[0m thiserror-impl v1.0.40\n[Rust/Tests, unstable toolchain]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m    Finished\u001b[0m dev [unoptimized + debuginfo] target(s) in 12.11s\n[Rust/Tests, unstable toolchain]   \u2705  Success - Main cargo build\n[Rust/Tests, stable toolchain  ] \u2b50 Run Main cargo build\n[Rust/Benchmarks (criterion)   ] \u2b50 Run Main cargo bench (prometheus)\n[Rust/Build, minimum toolchain ] \u2b50 Run Main cargo build\n[Rust/Lints, pinned toolchain  ] \u2b50 Run Main cargo fmt (check)\n[Rust/Tests, unstable toolchain] \u2b50 Run Main cargo test\n[Rust/Tests, stable toolchain  ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/2] user= workdir=\n[Rust/Tests, unstable toolchain]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/3] user= workdir=\n[Rust/Build, minimum toolchain ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/2] user= workdir=\n[Rust/Lints, pinned toolchain  ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/2] user= workdir=\n[Rust/Benchmarks (criterion)   ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/2] user= workdir=\n[Rust/Tests, unstable toolchain]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m Downloading\u001b[0m crates ...\n[Rust/Tests, stable toolchain  ]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m    Updating\u001b[0m crates.io index\n[Rust/Lints, pinned toolchain  ]   \u2705  Success - Main cargo fmt (check)\n[Rust/Build, minimum toolchain ]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m    Updating\u001b[0m crates.io index\n[Rust/Tests, unstable toolchain]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m  Downloaded\u001b[0m atty v0.2.14\n[Rust/Tests, unstable toolchain]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m  Downloaded\u001b[0m bytes v1.4.0\n[Rust/Tests, unstable toolchain]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m  Downloaded\u001b[0m ciborium v0.2.1\n[Rust/Tests, unstable toolchain]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m  Downloaded\u001b[0m criterion-plot v0.5.0\n[Rust/Tests, unstable toolchain]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m  Downloaded\u001b[0m crossbeam-epoch v0.9.14\n[Rust/Tests, unstable toolchain]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m  Downloaded\u001b[0m indexmap v1.9.3\n[Rust/Tests, unstable toolchain]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m  Downloaded\u001b[0m want v0.3.0\n[Rust/Tests, unstable toolchain]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m  Downloaded\u001b[0m plotters-svg v0.3.3\n[Rust/Tests, unstable toolchain]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m  Downloaded\u001b[0m anes v0.1.6\n[Rust/Tests, unstable toolchain]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m  Downloaded\u001b[0m regex v1.8.3\n[Rust/Tests, unstable toolchain]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m  Downloaded\u001b[0m serde_json v1.0.96\n[Rust/Tests, unstable toolchain]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m  Downloaded\u001b[0m walkdir v2.3.3\n[Rust/Tests, unstable toolchain]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m  Downloaded\u001b[0m getopts v0.2.21\n[Rust/Tests, unstable toolchain]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m  Downloaded\u001b[0m os_str_bytes v6.5.0\n[Rust/Tests, unstable toolchain]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m  Downloaded\u001b[0m http v0.2.9\n[Rust/Tests, unstable toolchain]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m  Downloaded\u001b[0m try-lock v0.2.4\n[Rust/Tests, unstable toolchain]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m  Downloaded\u001b[0m tokio v1.28.2\n[Rust/Tests, unstable toolchain]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m  Downloaded\u001b[0m http-body v0.4.5\n[Rust/Tests, unstable toolchain]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m  Downloaded\u001b[0m tracing-core v0.1.31\n[Rust/Tests, unstable toolchain]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m  Downloaded\u001b[0m tokio-macros v2.1.0\n[Rust/Tests, unstable toolchain]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m  Downloaded\u001b[0m hyper v0.14.26\n[Rust/Tests, unstable toolchain]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m  Downloaded\u001b[0m futures-util v0.3.28\n[Rust/Tests, unstable toolchain]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m  Downloaded\u001b[0m clap v3.2.25\n[Rust/Tests, unstable toolchain]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m  Downloaded\u001b[0m httpdate v1.0.2\n[Rust/Tests, unstable toolchain]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m  Downloaded\u001b[0m httparse v1.8.0\n[Rust/Tests, unstable toolchain]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m  Downloaded\u001b[0m futures-task v0.3.28\n[Rust/Tests, unstable toolchain]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m  Downloaded\u001b[0m futures-channel v0.3.28\n[Rust/Tests, unstable toolchain]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m  Downloaded\u001b[0m clap_lex v0.2.4\n[Rust/Tests, unstable toolchain]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m  Downloaded\u001b[0m ciborium-ll v0.2.1\n[Rust/Tests, unstable toolchain]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m  Downloaded\u001b[0m ciborium-io v0.2.1\n[Rust/Tests, unstable toolchain]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m  Downloaded\u001b[0m bitflags v1.3.2\n[Rust/Tests, unstable toolchain]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m  Downloaded\u001b[0m unicode-width v0.1.10\n[Rust/Tests, unstable toolchain]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m  Downloaded\u001b[0m tracing v0.1.37\n[Rust/Tests, unstable toolchain]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m  Downloaded\u001b[0m tower-service v0.3.2\n[Rust/Tests, unstable toolchain]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m  Downloaded\u001b[0m tinytemplate v1.2.1\n[Rust/Tests, unstable toolchain]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m  Downloaded\u001b[0m textwrap v0.16.0\n[Rust/Tests, unstable toolchain]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m  Downloaded\u001b[0m socket2 v0.4.9\n[Rust/Tests, unstable toolchain]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m  Downloaded\u001b[0m serde_derive v1.0.163\n[Rust/Tests, unstable toolchain]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m  Downloaded\u001b[0m serde v1.0.163\n[Rust/Tests, unstable toolchain]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m  Downloaded\u001b[0m same-file v1.0.6\n[Rust/Tests, unstable toolchain]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m  Downloaded\u001b[0m ryu v1.0.13\n[Rust/Tests, unstable toolchain]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m  Downloaded\u001b[0m regex-syntax v0.7.2\n[Rust/Tests, unstable toolchain]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m  Downloaded\u001b[0m rayon-core v1.11.0\n[Rust/Tests, unstable toolchain]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m  Downloaded\u001b[0m rayon v1.7.0\n[Rust/Tests, unstable toolchain]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m  Downloaded\u001b[0m plotters-backend v0.3.4\n[Rust/Tests, unstable toolchain]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m  Downloaded\u001b[0m plotters v0.3.4\n[Rust/Benchmarks (criterion)   ]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m    Updating\u001b[0m crates.io index\n[Rust/Tests, unstable toolchain]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m  Downloaded\u001b[0m pin-utils v0.1.0\n[Rust/Tests, unstable toolchain]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m  Downloaded\u001b[0m pin-project-lite v0.2.9\n[Rust/Tests, unstable toolchain]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m  Downloaded\u001b[0m oorandom v11.1.3\n[Rust/Tests, unstable toolchain]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m  Downloaded\u001b[0m once_cell v1.17.2\n[Rust/Tests, unstable toolchain]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m  Downloaded\u001b[0m num_cpus v1.15.0\n[Rust/Tests, unstable toolchain]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m  Downloaded\u001b[0m num-traits v0.2.15\n[Rust/Tests, unstable toolchain]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m  Downloaded\u001b[0m mio v0.8.7\n[Rust/Tests, unstable toolchain]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m  Downloaded\u001b[0m memoffset v0.8.0\n[Rust/Tests, unstable toolchain]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m  Downloaded\u001b[0m log v0.4.18\n[Rust/Tests, unstable toolchain]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m  Downloaded\u001b[0m itoa v1.0.6\n[Rust/Tests, unstable toolchain]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m  Downloaded\u001b[0m itertools v0.10.5\n[Rust/Tests, unstable toolchain]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m  Downloaded\u001b[0m hashbrown v0.12.3\n[Rust/Tests, stable toolchain  ]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m Downloading\u001b[0m crates ...\n[Rust/Tests, unstable toolchain]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m  Downloaded\u001b[0m half v1.8.2\n[Rust/Tests, unstable toolchain]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m  Downloaded\u001b[0m futures-core v0.3.28\n[Rust/Tests, unstable toolchain]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m  Downloaded\u001b[0m either v1.8.1\n[Rust/Tests, unstable toolchain]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m  Downloaded\u001b[0m crossbeam-utils v0.8.15\n[Rust/Tests, unstable toolchain]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m  Downloaded\u001b[0m crossbeam-deque v0.8.3\n[Rust/Tests, unstable toolchain]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m  Downloaded\u001b[0m crossbeam-channel v0.5.8\n[Rust/Tests, unstable toolchain]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m  Downloaded\u001b[0m criterion v0.4.0\n[Rust/Tests, unstable toolchain]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m  Downloaded\u001b[0m cast v0.3.0\n[Rust/Tests, unstable toolchain]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m   Compiling\u001b[0m crossbeam-utils v0.8.15\n[Rust/Tests, unstable toolchain]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m   Compiling\u001b[0m memoffset v0.8.0\n[Rust/Tests, unstable toolchain]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m   Compiling\u001b[0m crossbeam-epoch v0.9.14\n[Rust/Tests, unstable toolchain]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m   Compiling\u001b[0m serde v1.0.163\n[Rust/Tests, unstable toolchain]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m   Compiling\u001b[0m itoa v1.0.6\n[Rust/Tests, unstable toolchain]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m   Compiling\u001b[0m pin-project-lite v0.2.9\n[Rust/Tests, unstable toolchain]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m   Compiling\u001b[0m futures-core v0.3.28\n[Rust/Tests, unstable toolchain]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m   Compiling\u001b[0m num-traits v0.2.15\n[Rust/Tests, unstable toolchain]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m   Compiling\u001b[0m indexmap v1.9.3\n[Rust/Tests, unstable toolchain]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m   Compiling\u001b[0m rayon-core v1.11.0\n[Rust/Tests, unstable toolchain]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m   Compiling\u001b[0m log v0.4.18\n[Rust/Tests, unstable toolchain]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m   Compiling\u001b[0m either v1.8.1\n[Rust/Tests, unstable toolchain]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m   Compiling\u001b[0m serde_json v1.0.96\n[Rust/Tests, unstable toolchain]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m   Compiling\u001b[0m futures-task v0.3.28\n[Rust/Tests, unstable toolchain]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m   Compiling\u001b[0m tokio v1.28.2\n[Rust/Tests, unstable toolchain]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m   Compiling\u001b[0m httparse v1.8.0\n[Rust/Tests, unstable toolchain]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m   Compiling\u001b[0m bytes v1.4.0\n[Rust/Tests, unstable toolchain]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m   Compiling\u001b[0m ryu v1.0.13\n[Rust/Tests, unstable toolchain]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m   Compiling\u001b[0m half v1.8.2\n[Rust/Tests, unstable toolchain]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m   Compiling\u001b[0m hashbrown v0.12.3\n[Rust/Tests, unstable toolchain]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m   Compiling\u001b[0m ciborium-io v0.2.1\n[Rust/Tests, unstable toolchain]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m   Compiling\u001b[0m once_cell v1.17.2\n[Rust/Tests, unstable toolchain]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m   Compiling\u001b[0m plotters-backend v0.3.4\n[Rust/Tests, unstable toolchain]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m   Compiling\u001b[0m futures-util v0.3.28\n[Rust/Tests, unstable toolchain]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m   Compiling\u001b[0m os_str_bytes v6.5.0\n[Rust/Tests, unstable toolchain]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m   Compiling\u001b[0m futures-channel v0.3.28\n[Rust/Tests, unstable toolchain]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m   Compiling\u001b[0m textwrap v0.16.0\n[Rust/Tests, unstable toolchain]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m   Compiling\u001b[0m cast v0.3.0\n[Rust/Tests, unstable toolchain]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m   Compiling\u001b[0m try-lock v0.2.4\n[Rust/Tests, stable toolchain  ]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m  Downloaded\u001b[0m autocfg v1.1.0\n[Rust/Tests, unstable toolchain]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m   Compiling\u001b[0m bitflags v1.3.2\n[Rust/Tests, stable toolchain  ]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m  Downloaded\u001b[0m smallvec v1.10.0\n[Rust/Tests, stable toolchain  ]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m  Downloaded\u001b[0m scopeguard v1.1.0\n[Rust/Tests, stable toolchain  ]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m  Downloaded\u001b[0m quote v1.0.28\n[Rust/Tests, stable toolchain  ]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m  Downloaded\u001b[0m proc-macro2 v1.0.59\n[Rust/Tests, stable toolchain  ]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m  Downloaded\u001b[0m memchr v2.5.0\n[Rust/Tests, stable toolchain  ]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m  Downloaded\u001b[0m lazy_static v1.4.0\n[Rust/Tests, stable toolchain  ]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m  Downloaded\u001b[0m thiserror v1.0.40\n[Rust/Tests, stable toolchain  ]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m  Downloaded\u001b[0m thiserror-impl v1.0.40\n[Rust/Tests, stable toolchain  ]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m  Downloaded\u001b[0m unicode-ident v1.0.9\n[Rust/Tests, stable toolchain  ]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m  Downloaded\u001b[0m syn v2.0.18\n[Rust/Tests, unstable toolchain]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m   Compiling\u001b[0m regex-syntax v0.7.2\n[Rust/Tests, unstable toolchain]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m   Compiling\u001b[0m same-file v1.0.6\n[Rust/Tests, unstable toolchain]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m   Compiling\u001b[0m pin-utils v0.1.0\n[Rust/Tests, unstable toolchain]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m   Compiling\u001b[0m httpdate v1.0.2\n[Rust/Tests, unstable toolchain]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m   Compiling\u001b[0m oorandom v11.1.3\n[Rust/Tests, unstable toolchain]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m   Compiling\u001b[0m anes v0.1.6\n[Rust/Tests, stable toolchain  ]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m  Downloaded\u001b[0m libc v0.2.144\n[Rust/Tests, unstable toolchain]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m   Compiling\u001b[0m tower-service v0.3.2\n[Rust/Tests, unstable toolchain]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m   Compiling\u001b[0m unicode-width v0.1.10\n[Rust/Tests, stable toolchain  ]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m  Downloaded\u001b[0m parking_lot_core v0.9.7\n[Rust/Tests, stable toolchain  ]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m  Downloaded\u001b[0m parking_lot v0.12.1\n[Rust/Tests, stable toolchain  ]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m  Downloaded\u001b[0m lock_api v0.4.9\n[Rust/Tests, stable toolchain  ]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m  Downloaded\u001b[0m fnv v1.0.7\n[Rust/Tests, stable toolchain  ]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m  Downloaded\u001b[0m protobuf v2.28.0\n[Rust/Tests, unstable toolchain]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m   Compiling\u001b[0m ciborium-ll v0.2.1\n[Rust/Tests, unstable toolchain]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m   Compiling\u001b[0m itertools v0.10.5\n[Rust/Tests, unstable toolchain]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m   Compiling\u001b[0m num_cpus v1.15.0\n[Rust/Tests, unstable toolchain]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m   Compiling\u001b[0m socket2 v0.4.9\n[Rust/Tests, stable toolchain  ]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m  Downloaded\u001b[0m cfg-if v1.0.0\n[Rust/Tests, unstable toolchain]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m   Compiling\u001b[0m mio v0.8.7\n[Rust/Tests, unstable toolchain]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m   Compiling\u001b[0m atty v0.2.14\n[Rust/Tests, unstable toolchain]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m   Compiling\u001b[0m plotters-svg v0.3.3\n[Rust/Tests, unstable toolchain]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m   Compiling\u001b[0m clap_lex v0.2.4\n[Rust/Tests, unstable toolchain]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m   Compiling\u001b[0m tracing-core v0.1.31\n[Rust/Tests, unstable toolchain]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m   Compiling\u001b[0m walkdir v2.3.3\n[Rust/Tests, unstable toolchain]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m   Compiling\u001b[0m serde_derive v1.0.163\n[Rust/Tests, unstable toolchain]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m   Compiling\u001b[0m tokio-macros v2.1.0\n[Rust/Tests, unstable toolchain]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m   Compiling\u001b[0m http v0.2.9\n[Rust/Tests, stable toolchain  ]   | \u001b[0m\u001b[0m\u001b[1m\u001b[36m    Blocking\u001b[0m waiting for file lock on build directory\n[Rust/Tests, unstable toolchain]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m   Compiling\u001b[0m getopts v0.2.21\n[Rust/Tests, unstable toolchain]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m   Compiling\u001b[0m want v0.3.0\n[Rust/Tests, unstable toolchain]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m   Compiling\u001b[0m crossbeam-channel v0.5.8\n[Rust/Tests, unstable toolchain]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m   Compiling\u001b[0m tracing v0.1.37\n[Rust/Tests, unstable toolchain]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m   Compiling\u001b[0m clap v3.2.25\n[Rust/Tests, unstable toolchain]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m   Compiling\u001b[0m regex v1.8.3\n[Rust/Tests, unstable toolchain]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m   Compiling\u001b[0m http-body v0.4.5\n[Rust/Tests, unstable toolchain]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m   Compiling\u001b[0m crossbeam-deque v0.8.3\n[Rust/Tests, unstable toolchain]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m   Compiling\u001b[0m criterion-plot v0.5.0\n[Rust/Tests, unstable toolchain]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m   Compiling\u001b[0m plotters v0.3.4\n[Rust/Tests, unstable toolchain]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m   Compiling\u001b[0m rayon v1.7.0\n[Rust/Lints, pinned toolchain  ] \u2b50 Run Main cargo clippy\n[Rust/Tests, unstable toolchain]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m   Compiling\u001b[0m hyper v0.14.26\n[Rust/Lints, pinned toolchain  ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/3] user= workdir=\n[Rust/Tests, unstable toolchain]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m   Compiling\u001b[0m ciborium v0.2.1\n[Rust/Tests, unstable toolchain]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m   Compiling\u001b[0m tinytemplate v1.2.1\n[Rust/Tests, unstable toolchain]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m   Compiling\u001b[0m criterion v0.4.0\n[Rust/Tests, unstable toolchain]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m   Compiling\u001b[0m prometheus v0.13.3 (/tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/tikv-rust-prometheus)\n[Rust/Tests, unstable toolchain]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m    Finished\u001b[0m test [unoptimized + debuginfo] target(s) in 18.32s\n[Rust/Tests, unstable toolchain]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m     Running\u001b[0m unittests src/lib.rs (target/debug/deps/prometheus-bb8162ac70de3c70)\n[Rust/Tests, unstable toolchain]   | \n[Rust/Tests, unstable toolchain]   | running 77 tests\n[Rust/Tests, unstable toolchain]   | test atomic64::test::test_atomic_i64 ... ok\n[Rust/Tests, unstable toolchain]   | test atomic64::test::test_atomic_f64 ... ok\n[Rust/Tests, unstable toolchain]   | test atomic64::test::test_atomic_u64 ... ok\n[Rust/Tests, unstable toolchain]   | test counter::tests::test_counter ... ok\n[Rust/Tests, unstable toolchain]   | test counter::tests::test_counter_vec_local ... ok\n[Rust/Tests, unstable toolchain]   | test counter::tests::test_counter_vec_with_labels ... ok\n[Rust/Tests, unstable toolchain]   | test counter::tests::test_counter_vec_with_label_values ... ok\n[Rust/Tests, unstable toolchain]   | test counter::tests::test_counter_negative_inc - should panic ... ok\n[Rust/Tests, unstable toolchain]   | test counter::tests::test_int_counter_vec_local ... ok\n[Rust/Tests, unstable toolchain]   | test counter::tests::test_int_local_counter ... ok\n[Rust/Tests, unstable toolchain]   | test counter::tests::test_local_counter ... ok\n[Rust/Tests, unstable toolchain]   | test counter::tests::test_int_counter_vec ... ok\n[Rust/Tests, unstable toolchain]   | test desc::tests::test_invalid_const_label_name ... ok\n[Rust/Tests, unstable toolchain]   | test counter::tests::test_local_counter_negative_inc - should panic ... ok\n[Rust/Tests, unstable toolchain]   | test desc::tests::test_invalid_metric_name ... ok\n[Rust/Tests, unstable toolchain]   | test desc::tests::test_invalid_variable_label_name ... ok\n[Rust/Tests, unstable toolchain]   | test desc::tests::test_is_valid_label_name ... ok\n[Rust/Tests, unstable toolchain]   | test desc::tests::test_is_valid_metric_name ... ok\n[Rust/Tests, unstable toolchain]   | test encoder::pb::tests::test_protobuf_encoder ... ok\n[Rust/Tests, unstable toolchain]   | test counter::tests::test_int_counter ... ok\n[Rust/Tests, unstable toolchain]   | test encoder::text::tests::test_text_encoder ... ok\n[Rust/Tests, unstable toolchain]   | test encoder::text::tests::test_text_encoder_to_string ... ok\n[Rust/Tests, unstable toolchain]   | test encoder::text::tests::test_escape_string ... ok\n[Rust/Tests, unstable toolchain]   | test encoder::text::tests::test_text_encoder_histogram ... ok\n[Rust/Tests, unstable toolchain]   | test gauge::tests::test_gauge_vec_with_labels ... ok\n[Rust/Tests, unstable toolchain]   | test gauge::tests::test_gauge_vec_with_label_values ... ok\n[Rust/Tests, unstable toolchain]   | test histogram::tests::test_buckets_functions ... ok\n[Rust/Tests, unstable toolchain]   | test gauge::tests::test_gauge ... ok\n[Rust/Tests, unstable toolchain]   | test histogram::tests::test_buckets_invalidation ... ok\n[Rust/Tests, unstable toolchain]   | test encoder::text::tests::test_text_encoder_summary ... ok\n[Rust/Tests, unstable toolchain]   | test histogram::tests::test_duration_to_seconds ... ok\n[Rust/Tests, unstable toolchain]   | test histogram::tests::test_error_on_inconsistent_label_cardinality ... ok\n[Rust/Tests, unstable toolchain]   | test histogram::tests::test_histogram_local ... ok\n[Rust/Tests, unstable toolchain]   | test encoder::tests::test_bad_text_metrics ... ok\n[Rust/Tests, unstable toolchain]   | test encoder::tests::test_bad_proto_metrics ... ok\n[Rust/Tests, unstable toolchain]   | test histogram::tests::test_histogram_vec_local ... ok\n[Rust/Tests, unstable toolchain]   | test macros::test_labels_without_trailing_comma ... ok\n[Rust/Tests, unstable toolchain]   | test histogram::tests::test_histogram_vec_with_label_values ... ok\n[Rust/Tests, unstable toolchain]   | test macros::test_opts_trailing_comma ... ok\n[Rust/Tests, unstable toolchain]   | test macros::test_register_counter_trailing_comma ... ok\n[Rust/Tests, unstable toolchain]   | test macros::test_register_counter_vec_with_registry_trailing_comma ... ok\n[Rust/Tests, unstable toolchain]   | test macros::test_histogram_opts_trailing_comma ... ok\n[Rust/Tests, unstable toolchain]   | test macros::test_register_counter_with_registry_trailing_comma ... ok\n[Rust/Tests, unstable toolchain]   | test macros::test_register_gauge_trailing_comma ... ok\n[Rust/Tests, unstable toolchain]   | test macros::test_register_gauge_vec_with_registry_trailing_comma ... ok\n[Rust/Tests, unstable toolchain]   | test histogram::tests::test_histogram_vec_with_opts_buckets ... ok\n[Rust/Tests, unstable toolchain]   | test macros::test_register_gauge_vec_trailing_comma ... ok\n[Rust/Tests, unstable toolchain]   | test macros::test_register_gauge_with_registry_trailing_comma ... ok\n[Rust/Tests, unstable toolchain]   | test macros::test_register_histogram_trailing_comma ... ok\n[Rust/Tests, unstable toolchain]   | test macros::test_register_counter_vec_trailing_comma ... ok\n[Rust/Tests, unstable toolchain]   | test macros::test_register_histogram_with_registry_trailing_comma ... ok\n[Rust/Tests, unstable toolchain]   | test macros::test_register_histogram_vec_with_registry_trailing_comma ... ok\n[Rust/Tests, unstable toolchain]   | test macros::test_register_int_counter ... ok\n[Rust/Tests, unstable toolchain]   | test metrics::tests::test_different_generic_types ... ok\n[Rust/Tests, unstable toolchain]   | test metrics::tests::test_build_fq_name ... ok\n[Rust/Tests, unstable toolchain]   | test macros::test_register_int_counter_vec ... ok\n[Rust/Tests, unstable toolchain]   | test pulling_gauge::tests::test_pulling_gauge ... ok\n[Rust/Tests, unstable toolchain]   | test metrics::tests::test_label_cmp ... ok\n[Rust/Tests, unstable toolchain]   | test macros::test_register_histogram_vec_trailing_comma ... ok\n[Rust/Tests, unstable toolchain]   | test macros::test_register_int_gauge ... ok\n[Rust/Tests, unstable toolchain]   | test registry::tests::test_prune_empty_metric_family ... ok\n[Rust/Tests, unstable toolchain]   | test registry::tests::test_register_multiplecollector ... ok\n[Rust/Tests, unstable toolchain]   | test registry::tests::test_with_prefix_gather ... ok\n[Rust/Tests, unstable toolchain]   | test registry::tests::test_registry ... ok\n[Rust/Tests, unstable toolchain]   | test registry::tests::test_with_labels_gather ... ok\n[Rust/Tests, unstable toolchain]   | test macros::test_register_int_gauge_vec ... ok\n[Rust/Tests, unstable toolchain]   | test registry::tests::test_gather_order ... ok\n[Rust/Tests, unstable toolchain]   | test vec::tests::test_counter_vec_with_label_values ... ok\n[Rust/Tests, unstable toolchain]   | test vec::tests::test_counter_vec_with_labels ... ok\n[Rust/Tests, unstable toolchain]   | test vec::tests::test_gauge_vec_with_labels ... ok\n[Rust/Tests, unstable toolchain]   | test vec::tests::test_gauge_vec_with_label_values ... ok\n[Rust/Tests, unstable toolchain]   | test registry::tests::test_default_registry ... ok\n[Rust/Tests, unstable toolchain]   | test vec::tests::test_vec_get_metric_with ... ok\n[Rust/Tests, unstable toolchain]   | test timer::tests::test_duration_to_millis ... ok\n[Rust/Tests, stable toolchain  ]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m   Compiling\u001b[0m proc-macro2 v1.0.59\n[Rust/Tests, stable toolchain  ]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m   Compiling\u001b[0m quote v1.0.28\n[Rust/Tests, stable toolchain  ]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m   Compiling\u001b[0m unicode-ident v1.0.9\n[Rust/Tests, stable toolchain  ]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m   Compiling\u001b[0m autocfg v1.1.0\n[Rust/Tests, stable toolchain  ]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m   Compiling\u001b[0m libc v0.2.144\n[Rust/Tests, stable toolchain  ]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m   Compiling\u001b[0m parking_lot_core v0.9.7\n[Rust/Tests, stable toolchain  ]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m   Compiling\u001b[0m cfg-if v1.0.0\n[Rust/Tests, stable toolchain  ]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m   Compiling\u001b[0m scopeguard v1.1.0\n[Rust/Tests, stable toolchain  ]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m   Compiling\u001b[0m smallvec v1.10.0\n[Rust/Tests, stable toolchain  ]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m   Compiling\u001b[0m thiserror v1.0.40\n[Rust/Tests, stable toolchain  ]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m   Compiling\u001b[0m memchr v2.5.0\n[Rust/Tests, stable toolchain  ]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m   Compiling\u001b[0m protobuf v2.28.0\n[Rust/Tests, stable toolchain  ]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m   Compiling\u001b[0m prometheus v0.13.3 (/tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/tikv-rust-prometheus)\n[Rust/Tests, stable toolchain  ]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m   Compiling\u001b[0m lazy_static v1.4.0\n[Rust/Tests, stable toolchain  ]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m   Compiling\u001b[0m fnv v1.0.7\n[Rust/Tests, unstable toolchain]   | test timer::tests::test_time_update ... ok\n[Rust/Tests, unstable toolchain]   | test histogram::tests::test_histogram ... ok\n[Rust/Tests, stable toolchain  ]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m   Compiling\u001b[0m lock_api v0.4.9\n[Rust/Tests, stable toolchain  ]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m   Compiling\u001b[0m syn v2.0.18\n[Rust/Tests, stable toolchain  ]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m   Compiling\u001b[0m parking_lot v0.12.1\n[Rust/Tests, unstable toolchain]   | test histogram::tests::atomic_observe_across_collects ... ok\n[Rust/Tests, unstable toolchain]   | \n[Rust/Tests, unstable toolchain]   | test result: ok. 77 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 3.06s\n[Rust/Tests, unstable toolchain]   | \n[Rust/Tests, unstable toolchain]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m   Doc-tests\u001b[0m prometheus\n[Rust/Tests, unstable toolchain]   | \n[Rust/Tests, unstable toolchain]   | running 20 tests\n[Rust/Tests, unstable toolchain]   | test src/pulling_gauge.rs - pulling_gauge::PullingGauge (line 14) ... ok\n[Rust/Tests, unstable toolchain]   | test src/macros.rs - macros::register_counter_vec (line 379) ... ok\n[Rust/Tests, unstable toolchain]   | test src/macros.rs - macros::register_counter (line 202) ... ok\n[Rust/Tests, unstable toolchain]   | test src/macros.rs - macros::register_histogram_with_registry (line 941) ... ok\n[Rust/Tests, unstable toolchain]   | test src/macros.rs - macros::register_gauge (line 559) ... ok\n[Rust/Tests, unstable toolchain]   | test src/macros.rs - macros::labels (line 7) ... ok\n[Rust/Tests, unstable toolchain]   | test src/macros.rs - macros::histogram_opts (line 125) ... ok\n[Rust/Tests, unstable toolchain]   | test src/macros.rs - macros::opts (line 54) ... ok\n[Rust/Tests, unstable toolchain]   | test src/lib.rs - (line 20) ... ok\n[Rust/Tests, unstable toolchain]   | test src/macros.rs - macros::register_histogram_vec (line 1011) ... ok\n[Rust/Tests, unstable toolchain]   | test src/lib.rs - (line 54) ... ok\n[Rust/Tests, unstable toolchain]   | test src/macros.rs - macros::register_histogram (line 892) ... ok\n[Rust/Tests, unstable toolchain]   | test src/macros.rs - macros::register_gauge_vec (line 726) ... ok\n[Rust/Tests, unstable toolchain]   | test src/macros.rs - macros::register_gauge_vec_with_registry (line 762) ... ok\n[Rust/Tests, unstable toolchain]   | test src/lib.rs - (line 73) ... ok\n[Rust/Tests, unstable toolchain]   | test src/macros.rs - macros::register_gauge_with_registry (line 595) ... ok\n[Rust/Tests, unstable toolchain]   | test src/macros.rs - macros::register_counter_with_registry (line 243) ... ok\n[Rust/Tests, unstable toolchain]   | test src/vec.rs - vec::MetricVec<T>::with_label_values (line 249) ... ok\n[Rust/Tests, unstable toolchain]   | test src/macros.rs - macros::register_histogram_vec_with_registry (line 1067) ... ok\n[Rust/Tests, stable toolchain  ]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m   Compiling\u001b[0m thiserror-impl v1.0.40\n[Rust/Tests, unstable toolchain]   | test src/macros.rs - macros::register_counter_vec_with_registry (line 415) ... ok\n[Rust/Tests, unstable toolchain]   | \n[Rust/Tests, unstable toolchain]   | test result: ok. 20 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 1.87s\n[Rust/Tests, unstable toolchain]   | \n[Rust/Tests, unstable toolchain]   \u2705  Success - Main cargo test\n[Rust/Tests, unstable toolchain] \u2b50 Run Main cargo build (static-metric)\n[Rust/Tests, unstable toolchain]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/4] user= workdir=\n[Rust/Tests, stable toolchain  ]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m    Finished\u001b[0m dev [unoptimized + debuginfo] target(s) in 27.65s\n[Rust/Tests, stable toolchain  ]   \u2705  Success - Main cargo build\n[Rust/Tests, stable toolchain  ] \u2b50 Run Main cargo test\n[Rust/Tests, stable toolchain  ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/3] user= workdir=\n[Rust/Build, minimum toolchain ]   \u274c  Failure - Main cargo build\n[Rust/Tests, unstable toolchain]   \u274c  Failure - Main cargo build (static-metric)\n[Rust/Lints, pinned toolchain  ]   \u274c  Failure - Main cargo clippy\n[Rust/Benchmarks (criterion)   ]   \u274c  Failure - Main cargo bench (prometheus)\n[Rust/Tests, stable toolchain  ]   \u274c  Failure - Main cargo test\n[Rust/Tests, unstable toolchain] Get \"http://%2Fvar%2Frun%2Fdocker.sock/v1.41/containers/49c922ef7c8fb2f7f66ca325615bd2a936982f5ced2ecd5a9c1111aeb21c3962/archive?path=%2Fvar%2Frun%2Fact%2Fworkflow%2Fpathcmd.txt\": context canceled\n[Rust/Benchmarks (criterion)   ] Get \"http://%2Fvar%2Frun%2Fdocker.sock/v1.41/containers/129504cf97a681b6464d20dca5c1c4afadfcd9ab2c3d4d7bcaf3e6e41347c1d4/archive?path=%2Fvar%2Frun%2Fact%2Fworkflow%2Fpathcmd.txt\": context canceled\n[Rust/Lints, pinned toolchain  ] Get \"http://%2Fvar%2Frun%2Fdocker.sock/v1.41/containers/3be074371139c92aebd17f19688787c66fdb117c70ee3dbe7e183a2146c21dc6/archive?path=%2Fvar%2Frun%2Fact%2Fworkflow%2Fpathcmd.txt\": context canceled\n[Rust/Tests, stable toolchain  ] Get \"http://%2Fvar%2Frun%2Fdocker.sock/v1.41/containers/0753764a959ef1c98620d0d49c6f85dfc2141055b7ebef5ac404a2895d04fe7b/archive?path=%2Fvar%2Frun%2Fact%2Fworkflow%2Fpathcmd.txt\": context canceled\n[Rust/Build, minimum toolchain ] Get \"http://%2Fvar%2Frun%2Fdocker.sock/v1.41/containers/d53df2173f7224dfa2000fa7567781d73ba039740ccc8123c2b6fa3a0a33a121/archive?path=%2Fvar%2Frun%2Fact%2Fworkflow%2Fpathcmd.txt\": context canceled\n[Rust/Benchmarks (criterion)   ] \u2b50 Run Post Install toolchain\n[Rust/Tests, unstable toolchain] \u2b50 Run Post Install toolchain\n[Rust/Build, minimum toolchain ] \u2b50 Run Post Install toolchain\n[Rust/Tests, stable toolchain  ] \u2b50 Run Post Install toolchain\n[Rust/Lints, pinned toolchain  ] \u2b50 Run Post Install toolchain\n[Rust/Tests, unstable toolchain]   \ud83d\udc33  docker cp src=/home/andre-silva/.cache/act/dtolnay-rust-toolchain@master/ dst=/var/run/act/actions/dtolnay-rust-toolchain@master/\n[Rust/Tests, stable toolchain  ]   \ud83d\udc33  docker cp src=/home/andre-silva/.cache/act/dtolnay-rust-toolchain@stable/ dst=/var/run/act/actions/dtolnay-rust-toolchain@stable/\n[Rust/Lints, pinned toolchain  ]   \ud83d\udc33  docker cp src=/home/andre-silva/.cache/act/dtolnay-rust-toolchain@master/ dst=/var/run/act/actions/dtolnay-rust-toolchain@master/\n[Rust/Benchmarks (criterion)   ]   \ud83d\udc33  docker cp src=/home/andre-silva/.cache/act/dtolnay-rust-toolchain@master/ dst=/var/run/act/actions/dtolnay-rust-toolchain@master/\n[Rust/Build, minimum toolchain ]   \ud83d\udc33  docker cp src=/home/andre-silva/.cache/act/dtolnay-rust-toolchain@master/ dst=/var/run/act/actions/dtolnay-rust-toolchain@master/\n[Rust/Benchmarks (criterion)   ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /var/run/act/actions/dtolnay-rust-toolchain@master/] user=0 workdir=\n[Rust/Tests, unstable toolchain]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /var/run/act/actions/dtolnay-rust-toolchain@master/] user=0 workdir=\n[Rust/Lints, pinned toolchain  ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /var/run/act/actions/dtolnay-rust-toolchain@master/] user=0 workdir=\n[Rust/Tests, stable toolchain  ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /var/run/act/actions/dtolnay-rust-toolchain@stable/] user=0 workdir=\n[Rust/Build, minimum toolchain ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /var/run/act/actions/dtolnay-rust-toolchain@master/] user=0 workdir=\n[Rust/Build, minimum toolchain ]   \u2705  Success - Post Install toolchain\n[Rust/Benchmarks (criterion)   ]   \u2705  Success - Post Install toolchain\n[Rust/Tests, stable toolchain  ]   \u2705  Success - Post Install toolchain\n[Rust/Lints, pinned toolchain  ]   \u2705  Success - Post Install toolchain\n[Rust/Tests, unstable toolchain]   \u2705  Success - Post Install toolchain\n[Rust/Build, minimum toolchain ] \ud83c\udfc1  Job succeeded\n[Rust/Benchmarks (criterion)   ] \ud83c\udfc1  Job succeeded\n[Rust/Tests, stable toolchain  ] \ud83c\udfc1  Job succeeded\n[Rust/Lints, pinned toolchain  ] \ud83c\udfc1  Job succeeded\n[Rust/Tests, unstable toolchain] \ud83c\udfc1  Job succeeded\n",
    "actions_stderr": "Error: context canceled\n"
}