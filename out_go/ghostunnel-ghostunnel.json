{
    "repository": "ghostunnel/ghostunnel",
    "clone_url": "https://github.com/ghostunnel/ghostunnel.git",
    "timestamp": "2023-05-30T11:19:08.312305Z",
    "clone_success": true,
    "number of actions": 5,
    "number_of_test_actions": 1,
    "actions_successful": false,
    "actions_stdout": "[Test/Integration tests (Darwin)] \ud83d\ude80  Start image=crawlergpt:latest\n[Test/Unit tests                ] \ud83d\ude80  Start image=crawlergpt:latest\n[Test/Integration tests (Linux) ] \ud83d\ude80  Start image=crawlergpt:latest\n[Test/Integration tests (Darwin)]   \ud83d\udc33  docker pull image=crawlergpt:latest platform= username= forcePull=false\n[Test/Integration tests (Linux) ]   \ud83d\udc33  docker pull image=crawlergpt:latest platform= username= forcePull=false\n[Test/Unit tests                ]   \ud83d\udc33  docker pull image=crawlergpt:latest platform= username= forcePull=false\n[Test/Unit tests                ]   \ud83d\udc33  docker create image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[Test/Integration tests (Darwin)]   \ud83d\udc33  docker create image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[Test/Integration tests (Linux) ]   \ud83d\udc33  docker create image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[Test/Integration tests (Darwin)]   \ud83d\udc33  docker run image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[Test/Integration tests (Linux) ]   \ud83d\udc33  docker run image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[Test/Unit tests                ]   \ud83d\udc33  docker run image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[Test/Integration tests (Linux) ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/ghostunnel-ghostunnel] user=0 workdir=\n[Test/Unit tests                ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/ghostunnel-ghostunnel] user=0 workdir=\n[Test/Integration tests (Darwin)]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/ghostunnel-ghostunnel] user=0 workdir=\n[Test/Integration tests (Linux) ]   \u2601  git clone 'https://github.com/codecov/codecov-action' # ref=v3\n[Test/Integration tests (Linux) ] \ud83e\uddea  Matrix: map[os:ubuntu-latest version:1.19]\n[Test/Integration tests (Linux) ] \u2b50 Run Main Check out code\n[Test/Integration tests (Linux) ]   \u2705  Success - Main Check out code\n[Test/Integration tests (Linux) ] \u2b50 Run Main Run tests\n[Test/Integration tests (Linux) ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1] user= workdir=\n[Test/Unit tests                ]   \u2601  git clone 'https://github.com/actions/setup-go' # ref=v2\n[Test/Integration tests (Darwin)]   \u2601  git clone 'https://github.com/actions/setup-go' # ref=v2\n[Test/Unit tests                ] \ud83e\uddea  Matrix: map[os:ubuntu-latest version:1.19.x]\n[Test/Integration tests (Darwin)]   \u2601  git clone 'https://github.com/actions/setup-python' # ref=v2\n[Test/Integration tests (Darwin)] Unable to checkout 75f3110429a8c05be0e1bf360334e4cced2b63fa: invalid checksum\n[Test/Integration tests (Linux) ]   | docker build --build-arg GO_VERSION=1.19 -t ghostunnel/ghostunnel-test -f Dockerfile-test .\n[Test/Unit tests                ] \u2b50 Run Main Set up Go\n[Test/Integration tests (Linux) ]   | Got permission denied while trying to connect to the Docker daemon socket at unix:///var/run/docker.sock: Post \"http://%2Fvar%2Frun%2Fdocker.sock/v1.24/build?buildargs=%7B%22GO_VERSION%22%3A%221.19%22%7D&cachefrom=%5B%5D&cgroupparent=&cpuperiod=0&cpuquota=0&cpusetcpus=&cpusetmems=&cpushares=0&dockerfile=Dockerfile-test&labels=%7B%7D&memory=0&memswap=0&networkmode=default&rm=1&shmsize=0&t=ghostunnel%2Fghostunnel-test&target=&ulimits=null&version=1\": dial unix /var/run/docker.sock: connect: permission denied\n[Test/Integration tests (Linux) ]   | make: *** [Makefile:63: docker-test] Error 1\n[Test/Integration tests (Linux) ]   \u274c  Failure - Main Run tests\n[Test/Unit tests                ]   \ud83d\udc33  docker cp src=/home/andre-silva/.cache/act/actions-setup-go@v2/ dst=/var/run/act/actions/actions-setup-go@v2/\n[Test/Unit tests                ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /var/run/act/actions/actions-setup-go@v2/] user=0 workdir=\n[Test/Integration tests (Linux) ] exitcode '2': failure\n[Test/Integration tests (Darwin)] \ud83c\udfc1  Job succeeded\n[Test/Integration tests (Linux) ] \ud83c\udfc1  Job failed\n[Test/Unit tests                ]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/actions-setup-go@v2/dist/index.js] user= workdir=\n[Test/Unit tests                ]   | Setup go stable version spec 1.19.x\n[Test/Unit tests                ]   \ud83d\udcac  ::debug::isExplicit: \n[Test/Unit tests                ]   \ud83d\udcac  ::debug::explicit? false\n[Test/Unit tests                ]   \ud83d\udcac  ::debug::isExplicit: 1.14.15\n[Test/Unit tests                ]   \ud83d\udcac  ::debug::explicit? true\n[Test/Unit tests                ]   \ud83d\udcac  ::debug::isExplicit: 1.15.15\n[Test/Unit tests                ]   \ud83d\udcac  ::debug::explicit? true\n[Test/Unit tests                ]   \ud83d\udcac  ::debug::isExplicit: 1.16.7\n[Test/Unit tests                ]   \ud83d\udcac  ::debug::explicit? true\n[Test/Unit tests                ]   \ud83d\udcac  ::debug::evaluating 3 versions\n[Test/Unit tests                ]   \ud83d\udcac  ::debug::match not found\n[Test/Unit tests                ]   | Attempting to download 1.19.x...\n[Test/Unit tests                ]   | matching 1.19.x...\n[Test/Unit tests                ]   \ud83d\udcac  ::debug::check 1.20.4 satisfies 1.19.x\n[Test/Unit tests                ]   \ud83d\udcac  ::debug::check 1.20.3 satisfies 1.19.x\n[Test/Unit tests                ]   \ud83d\udcac  ::debug::check 1.20.2 satisfies 1.19.x\n[Test/Unit tests                ]   \ud83d\udcac  ::debug::check 1.20.1 satisfies 1.19.x\n[Test/Unit tests                ]   \ud83d\udcac  ::debug::check 1.20.0 satisfies 1.19.x\n[Test/Unit tests                ]   \ud83d\udcac  ::debug::check 1.19.9 satisfies 1.19.x\n[Test/Unit tests                ]   \ud83d\udcac  ::debug::x64===x64 && darwin===linux\n[Test/Unit tests                ]   \ud83d\udcac  ::debug::x64===x64 && linux===linux\n[Test/Unit tests                ]   \ud83d\udcac  ::debug::matched 1.19.9\n[Test/Unit tests                ]   | Acquiring 1.19.9 from https://github.com/actions/go-versions/releases/download/1.19.9-4868897838/go-1.19.9-linux-x64.tar.gz\n[Test/Unit tests                ]   \ud83d\udcac  ::debug::Downloading https://github.com/actions/go-versions/releases/download/1.19.9-4868897838/go-1.19.9-linux-x64.tar.gz\n[Test/Unit tests                ]   \ud83d\udcac  ::debug::Destination /tmp/1dd87466-3833-4834-aaa1-b526f1c5db60\n[Test/Unit tests                ]   \ud83d\udcac  ::debug::download complete\n[Test/Unit tests                ]   | Extracting Go...\n[Test/Unit tests                ]   \ud83d\udcac  ::debug::Checking tar --version\n[Test/Unit tests                ]   \ud83d\udcac  ::debug::tar (GNU tar) 1.30%0ACopyright (C) 2017 Free Software Foundation, Inc.%0ALicense GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.%0AThis is free software: you are free to change and redistribute it.%0AThere is NO WARRANTY, to the extent permitted by law.%0A%0AWritten by John Gilmore and Jay Fenlason.\n[Test/Unit tests                ]   | [command]/usr/bin/tar xz --warning=no-unknown-keyword -C /tmp/3b8f923e-3b9f-4e80-a904-ea44254bc282 -f /tmp/1dd87466-3833-4834-aaa1-b526f1c5db60\n[Test/Unit tests                ]   | Successfully extracted go to /tmp/3b8f923e-3b9f-4e80-a904-ea44254bc282\n[Test/Unit tests                ]   | Adding to the cache ...\n[Test/Unit tests                ]   \ud83d\udcac  ::debug::Caching tool go 1.19.9 x64\n[Test/Unit tests                ]   \ud83d\udcac  ::debug::source dir: /tmp/3b8f923e-3b9f-4e80-a904-ea44254bc282\n[Test/Unit tests                ]   \ud83d\udcac  ::debug::destination /opt/hostedtoolcache/go/1.19.9/x64\n[Test/Unit tests                ]   \ud83d\udcac  ::debug::finished caching tool\n[Test/Unit tests                ]   | Successfully cached go to /opt/hostedtoolcache/go/1.19.9/x64\n[Test/Unit tests                ]   | Added go to the path\n[Test/Unit tests                ]   \ud83d\udcac  ::debug::which go :/opt/hostedtoolcache/go/1.19.9/x64/bin/go:\n[Test/Unit tests                ]   \ud83d\udcac  ::debug::go env GOPATH :/home/runneradmin/go:\n[Test/Unit tests                ]   \ud83d\udcac  ::debug::creating /home/runneradmin/go\n[Test/Unit tests                ]   \ud83d\udcac  ::debug::creating /home/runneradmin/go/bin\n[Test/Unit tests                ]   \ud83d\udcac  ::debug::add bin true\n[Test/Unit tests                ]   | Successfully setup go version 1.19.x\n[Test/Unit tests                ]   \u2753 add-matcher /run/act/actions/actions-setup-go@v2/matchers.json\n[Test/Unit tests                ]   | go version go1.19.9 linux/amd64\n[Test/Unit tests                ]   | \n[Test/Unit tests                ]   \u2753  ::group::go env\n[Test/Unit tests                ]   | GO111MODULE=\"\"\n[Test/Unit tests                ]   | GOARCH=\"amd64\"\n[Test/Unit tests                ]   | GOBIN=\"\"\n[Test/Unit tests                ]   | GOCACHE=\"/home/runneradmin/.cache/go-build\"\n[Test/Unit tests                ]   | GOENV=\"/home/runneradmin/.config/go/env\"\n[Test/Unit tests                ]   | GOEXE=\"\"\n[Test/Unit tests                ]   | GOEXPERIMENT=\"\"\n[Test/Unit tests                ]   | GOFLAGS=\"\"\n[Test/Unit tests                ]   | GOHOSTARCH=\"amd64\"\n[Test/Unit tests                ]   | GOHOSTOS=\"linux\"\n[Test/Unit tests                ]   | GOINSECURE=\"\"\n[Test/Unit tests                ]   | GOMODCACHE=\"/home/runneradmin/go/pkg/mod\"\n[Test/Unit tests                ]   | GONOPROXY=\"\"\n[Test/Unit tests                ]   | GONOSUMDB=\"\"\n[Test/Unit tests                ]   | GOOS=\"linux\"\n[Test/Unit tests                ]   | GOPATH=\"/home/runneradmin/go\"\n[Test/Unit tests                ]   | GOPRIVATE=\"\"\n[Test/Unit tests                ]   | GOPROXY=\"https://proxy.golang.org,direct\"\n[Test/Unit tests                ]   | GOROOT=\"/opt/hostedtoolcache/go/1.19.9/x64\"\n[Test/Unit tests                ]   | GOSUMDB=\"sum.golang.org\"\n[Test/Unit tests                ]   | GOTMPDIR=\"\"\n[Test/Unit tests                ]   | GOTOOLDIR=\"/opt/hostedtoolcache/go/1.19.9/x64/pkg/tool/linux_amd64\"\n[Test/Unit tests                ]   | GOVCS=\"\"\n[Test/Unit tests                ]   | GOVERSION=\"go1.19.9\"\n[Test/Unit tests                ]   | GCCGO=\"gccgo\"\n[Test/Unit tests                ]   | GOAMD64=\"v1\"\n[Test/Unit tests                ]   | AR=\"ar\"\n[Test/Unit tests                ]   | CC=\"gcc\"\n[Test/Unit tests                ]   | CXX=\"g++\"\n[Test/Unit tests                ]   | CGO_ENABLED=\"1\"\n[Test/Unit tests                ]   | GOMOD=\"/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/ghostunnel-ghostunnel/go.mod\"\n[Test/Unit tests                ]   | GOWORK=\"\"\n[Test/Unit tests                ]   | CGO_CFLAGS=\"-g -O2\"\n[Test/Unit tests                ]   | CGO_CPPFLAGS=\"\"\n[Test/Unit tests                ]   | CGO_CXXFLAGS=\"-g -O2\"\n[Test/Unit tests                ]   | CGO_FFLAGS=\"-g -O2\"\n[Test/Unit tests                ]   | CGO_LDFLAGS=\"-g -O2\"\n[Test/Unit tests                ]   | PKG_CONFIG=\"pkg-config\"\n[Test/Unit tests                ]   | GOGCCFLAGS=\"-fPIC -m64 -pthread -Wl,--no-gc-sections -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build2791271059=/tmp/go-build -gno-record-gcc-switches\"\n[Test/Unit tests                ]   | \n[Test/Unit tests                ]   \u2753  ::endgroup::\n[Test/Unit tests                ]   \u2705  Success - Main Set up Go\n[Test/Unit tests                ]   \u2699  ::set-env:: GOROOT=/opt/hostedtoolcache/go/1.19.9/x64\n[Test/Unit tests                ]   \u2699  ::add-path:: /opt/hostedtoolcache/go/1.19.9/x64/bin\n[Test/Unit tests                ]   \u2699  ::add-path:: /home/runneradmin/go/bin\n[Test/Unit tests                ] \u2b50 Run Main Check out code\n[Test/Unit tests                ]   \u2705  Success - Main Check out code\n[Test/Unit tests                ] \u2b50 Run Main Build binary\n[Test/Unit tests                ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/2] user= workdir=\n[Test/Unit tests                ]   | go build -ldflags '-X main.version=v1.7.1-9-g9aadfff' -o ghostunnel .\n[Test/Unit tests                ]   \u2705  Success - Main Build binary\n[Test/Unit tests                ] \u2b50 Run Main Run tests\n[Test/Unit tests                ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/3] user= workdir=\n[Test/Unit tests                ]   | go test -v -covermode=count -coverprofile=coverage-unit-test.out ./...\n[Test/Unit tests                ]   | === RUN   TestGenerateManPage\n[Test/Unit tests                ]   | .TH ghostunnel 1  \"\"\n[Test/Unit tests                ]   | .SH \"NAME\"\n[Test/Unit tests                ]   | ghostunnel\n[Test/Unit tests                ]   | .SH \"SYNOPSIS\"\n[Test/Unit tests                ]   | .TP\n[Test/Unit tests                ]   | \\fBghostunnel [<flags>] <command> [<args> ...]\\fR\n[Test/Unit tests                ]   | \n[Test/Unit tests                ]   | .SH \"DESCRIPTION\"\n[Test/Unit tests                ]   | A simple SSL/TLS proxy with mutual authentication for securing non-TLS services.\n[Test/Unit tests                ]   | \n[Test/Unit tests                ]   | Ghostunnel supports two modes, client mode and server mode. Ghostunnel in\n[Test/Unit tests                ]   | server mode runs in front of a backend server and accepts TLS-secured\n[Test/Unit tests                ]   | connections, which are then proxied to the (insecure) backend. A backend can be\n[Test/Unit tests                ]   | a TCP domain/port or a UNIX domain socket. Ghostunnel in client mode accepts\n[Test/Unit tests                ]   | (insecure) connections through a TCP or UNIX domain socket and proxies them to\n[Test/Unit tests                ]   | a TLS-secured service.\n[Test/Unit tests                ]   | \n[Test/Unit tests                ]   | For a more in-depth explanation, please see the README.md file (and docs\n[Test/Unit tests                ]   | folder) that shipped with ghostunnel or view the latest docs on\n[Test/Unit tests                ]   | github.com/ghostunnel/ghostunnel.\n[Test/Unit tests                ]   | .SH \"CERTIFICATES & PRIVATE KEYS\"\n[Test/Unit tests                ]   | Ghostunnel accepts certificates in multiple different file formats.\n[Test/Unit tests                ]   | \n[Test/Unit tests                ]   | The \\fB--keystore\\fR flag can take a PKCS#12 keystore or a combined PEM file\n[Test/Unit tests                ]   | with the certificate chain and private key as input (format is auto-detected).\n[Test/Unit tests                ]   | The \\fB--cert\\fR and \\fB--key\\fR flags can be used to load a certificate chain\n[Test/Unit tests                ]   | and key from separate PEM files (instead of a combined one).\n[Test/Unit tests                ]   | \n[Test/Unit tests                ]   | Ghostunnel also supports loading identities from the macOS keychain and having\n[Test/Unit tests                ]   | private keys backed by PKCS#11 modules, see the documentation on GitHub for\n[Test/Unit tests                ]   | examples.\n[Test/Unit tests                ]   | \n[Test/Unit tests                ]   | In server mode, Ghostunnel supports automatically obtaining and renewing a\n[Test/Unit tests                ]   | public TLS certificate using the ACME protocol. This requires either Ghostunnel\n[Test/Unit tests                ]   | to listen on tcp/443 on a public interface, or somehow a public tcp/443\n[Test/Unit tests                ]   | interface needs to be forwarded to Ghostunnel's server listening port\n[Test/Unit tests                ]   | (e.g. - systemd socket, iptables, etc.). The URL to the ACME CA can be specified\n[Test/Unit tests                ]   | using the \\fB--auto-acme-ca=\\fR flag. If not specified, Ghostunnel defaults\n[Test/Unit tests                ]   | to using Let's Encrypt.\n[Test/Unit tests                ]   | .SH \"EXAMPLE: SERVER MODE\"\n[Test/Unit tests                ]   | Start a ghostunnel in server mode to proxy connections from localhost:8443\n[Test/Unit tests                ]   | to localhost:8080, while only allowing connections from client certificates\n[Test/Unit tests                ]   | with CN=client:\n[Test/Unit tests                ]   | \n[Test/Unit tests                ]   |     ghostunnel server \\\\\n[Test/Unit tests                ]   |         --listen localhost:8443 \\\\\n[Test/Unit tests                ]   |         --target localhost:8080 \\\\\n[Test/Unit tests                ]   |         --keystore server-keystore.p12 \\\\\n[Test/Unit tests                ]   |         --cacert cacert.pem \\\\\n[Test/Unit tests                ]   |         --allow-cn client\n[Test/Unit tests                ]   | \n[Test/Unit tests                ]   | To set allowed clients, you must specify at least one of \\fB--allow-all\\fR,\n[Test/Unit tests                ]   | \\fB--allow-cn\\fR, \\fB--allow-ou\\fR, \\fB--allow-dns\\fR or \\fB--allow-uri\\fR. All\n[Test/Unit tests                ]   | checks are made against the certificate of the client. Multiple flags are\n[Test/Unit tests                ]   | treated as a logical disjunction (OR), meaning clients can connect as long as\n[Test/Unit tests                ]   | any of the flags match. To disable requiring client certificates, use\n[Test/Unit tests                ]   | \\fB--disable-authentication\\fR.\n[Test/Unit tests                ]   | .SH \"EXAMPLE: CLIENT MODE\"\n[Test/Unit tests                ]   | Start a ghostunnel in client mode to proxy connections from localhost:8080\n[Test/Unit tests                ]   | to localhost:8443, doing only hostname verification to validate the server\n[Test/Unit tests                ]   | certificate:\n[Test/Unit tests                ]   | \n[Test/Unit tests                ]   |     ghostunnel client \\\\\n[Test/Unit tests                ]   |         --listen localhost:8080 \\\\\n[Test/Unit tests                ]   |         --target localhost:8443 \\\\\n[Test/Unit tests                ]   |         --cert client-cert.pem \\\\\n[Test/Unit tests                ]   |         --key client-key.pem \\\\\n[Test/Unit tests                ]   |         --cacert cacert.pem\n[Test/Unit tests                ]   | \n[Test/Unit tests                ]   | Use \\fB--override-server-name\\fR to overrides the server name used for hostname\n[Test/Unit tests                ]   | verification. Various access control flags exist to perform additional\n[Test/Unit tests                ]   | verification (on top of the regular hostname verification) of server\n[Test/Unit tests                ]   | certificates, such as \\fB--verify-cn\\fR, \\fB--verify-ou\\fR, \\fB--verify-dns\\fR\n[Test/Unit tests                ]   | and \\fB--verify-uri\\fR. Multiple flags are treated as a logical disjunction\n[Test/Unit tests                ]   | (OR), meaning clients will connect to the server as long as any of the flags\n[Test/Unit tests                ]   | match, assuming that hostname verification was also successful. To disable\n[Test/Unit tests                ]   | sending client certificates, use \\fB--disable-authentication\\fR.\n[Test/Unit tests                ]   | .SH \"OPTIONS\"\n[Test/Unit tests                ]   | .TP\n[Test/Unit tests                ]   | \\fB--help\\fR\n[Test/Unit tests                ]   | Show context-sensitive help (also try --help-long and --help-man).\n[Test/Unit tests                ]   | .TP\n[Test/Unit tests                ]   | \\fB--keystore=PATH\\fR\n[Test/Unit tests                ]   | Path to keystore (combined PEM with cert/key, or PKCS12 keystore).\n[Test/Unit tests                ]   | .TP\n[Test/Unit tests                ]   | \\fB--cert=PATH\\fR\n[Test/Unit tests                ]   | Path to certificate (PEM with certificate chain).\n[Test/Unit tests                ]   | .TP\n[Test/Unit tests                ]   | \\fB--key=PATH\\fR\n[Test/Unit tests                ]   | Path to certificate private key (PEM with private key).\n[Test/Unit tests                ]   | .TP\n[Test/Unit tests                ]   | \\fB--storepass=PASS\\fR\n[Test/Unit tests                ]   | Password for keystore (if using PKCS keystore, optional).\n[Test/Unit tests                ]   | .TP\n[Test/Unit tests                ]   | \\fB--cacert=CACERT\\fR\n[Test/Unit tests                ]   | Path to CA bundle file (PEM/X509). Uses system trust store by default.\n[Test/Unit tests                ]   | .TP\n[Test/Unit tests                ]   | \\fB--cipher-suites=\"AES,CHACHA\"\\fR\n[Test/Unit tests                ]   | Set of cipher suites to enable, comma-separated, in order of preference (AES, CHACHA).\n[Test/Unit tests                ]   | .TP\n[Test/Unit tests                ]   | \\fB--use-workload-api\\fR\n[Test/Unit tests                ]   | If true, certificate and root CAs are retrieved via the SPIFFE Workload API\n[Test/Unit tests                ]   | .TP\n[Test/Unit tests                ]   | \\fB--use-workload-api-addr=ADDR\\fR\n[Test/Unit tests                ]   | If set, certificates and root CAs are retrieved via the SPIFFE Workload API at the specified address (implies --use-workload-api)\n[Test/Unit tests                ]   | .TP\n[Test/Unit tests                ]   | \\fB--timed-reload=DURATION\\fR\n[Test/Unit tests                ]   | Reload keystores every given interval (e.g. 300s), refresh listener/client on changes.\n[Test/Unit tests                ]   | .TP\n[Test/Unit tests                ]   | \\fB--shutdown-timeout=5m\\fR\n[Test/Unit tests                ]   | Graceful shutdown timeout. Terminates after timeout even if connections still open.\n[Test/Unit tests                ]   | .TP\n[Test/Unit tests                ]   | \\fB--connect-timeout=10s\\fR\n[Test/Unit tests                ]   | Timeout for establishing connections, handshakes.\n[Test/Unit tests                ]   | .TP\n[Test/Unit tests                ]   | \\fB--metrics-graphite=ADDR\\fR\n[Test/Unit tests                ]   | Collect metrics and report them to the given graphite instance (raw TCP).\n[Test/Unit tests                ]   | .TP\n[Test/Unit tests                ]   | \\fB--metrics-url=URL\\fR\n[Test/Unit tests                ]   | Collect metrics and POST them periodically to the given URL (via HTTP/JSON).\n[Test/Unit tests                ]   | .TP\n[Test/Unit tests                ]   | \\fB--metrics-prefix=PREFIX\\fR\n[Test/Unit tests                ]   | Set prefix string for all reported metrics (default: ghostunnel).\n[Test/Unit tests                ]   | .TP\n[Test/Unit tests                ]   | \\fB--metrics-interval=30s\\fR\n[Test/Unit tests                ]   | Collect (and post/send) metrics every specified interval.\n[Test/Unit tests                ]   | .TP\n[Test/Unit tests                ]   | \\fB--status=ADDR\\fR\n[Test/Unit tests                ]   | Enable serving /_status and /_metrics on given HOST:PORT (or unix:SOCKET).\n[Test/Unit tests                ]   | .TP\n[Test/Unit tests                ]   | \\fB--enable-pprof\\fR\n[Test/Unit tests                ]   | Enable serving /debug/pprof endpoints alongside /_status (for profiling).\n[Test/Unit tests                ]   | .TP\n[Test/Unit tests                ]   | \\fB--quiet=\\fR\n[Test/Unit tests                ]   | Silence log messages (can be all, conns, conn-errs, handshake-errs; repeat flag for more than one)\n[Test/Unit tests                ]   | .TP\n[Test/Unit tests                ]   | \\fB--syslog\\fR\n[Test/Unit tests                ]   | Send logs to syslog instead of stderr.\n[Test/Unit tests                ]   | .TP\n[Test/Unit tests                ]   | \\fB--pkcs11-module=PATH\\fR\n[Test/Unit tests                ]   | Path to PKCS11 module (SO) file (optional).\n[Test/Unit tests                ]   | .TP\n[Test/Unit tests                ]   | \\fB--pkcs11-token-label=LABEL\\fR\n[Test/Unit tests                ]   | Token label for slot/key in PKCS11 module (optional).\n[Test/Unit tests                ]   | .TP\n[Test/Unit tests                ]   | \\fB--pkcs11-pin=PIN\\fR\n[Test/Unit tests                ]   | PIN code for slot/key in PKCS11 module (optional).\n[Test/Unit tests                ]   | .SH \"COMMANDS\"\n[Test/Unit tests                ]   | .SS\n[Test/Unit tests                ]   | \\fBhelp [<command>...]\\fR\n[Test/Unit tests                ]   | .PP\n[Test/Unit tests                ]   | Show help.\n[Test/Unit tests                ]   | .SS\n[Test/Unit tests                ]   | \\fBserver --listen=ADDR --target=ADDR [<flags>]\\fR\n[Test/Unit tests                ]   | .PP\n[Test/Unit tests                ]   | Server mode (TLS listener -> plain TCP/UNIX target).\n[Test/Unit tests                ]   | .TP\n[Test/Unit tests                ]   | \\fB--listen=ADDR\\fR\n[Test/Unit tests                ]   | Address and port to listen on (can be HOST:PORT, unix:PATH, systemd:NAME or launchd:NAME).\n[Test/Unit tests                ]   | .TP\n[Test/Unit tests                ]   | \\fB--target=ADDR\\fR\n[Test/Unit tests                ]   | Address to forward connections to (can be HOST:PORT or unix:PATH).\n[Test/Unit tests                ]   | .TP\n[Test/Unit tests                ]   | \\fB--target-status=\"\"\\fR\n[Test/Unit tests                ]   | Address to target for status checking downstream healthchecks. Defaults to a TCP healthcheck if this flag is not passed.\n[Test/Unit tests                ]   | .TP\n[Test/Unit tests                ]   | \\fB--proxy-protocol\\fR\n[Test/Unit tests                ]   | Enable PROXY protocol v2 to signal connection info to backend\n[Test/Unit tests                ]   | .TP\n[Test/Unit tests                ]   | \\fB--unsafe-target\\fR\n[Test/Unit tests                ]   | If set, does not limit target to localhost, 127.0.0.1, [::1], or UNIX sockets.\n[Test/Unit tests                ]   | .TP\n[Test/Unit tests                ]   | \\fB--allow-all\\fR\n[Test/Unit tests                ]   | Allow all clients, do not check client cert subject.\n[Test/Unit tests                ]   | .TP\n[Test/Unit tests                ]   | \\fB--allow-cn=CN\\fR\n[Test/Unit tests                ]   | Allow clients with given common name (can be repeated).\n[Test/Unit tests                ]   | .TP\n[Test/Unit tests                ]   | \\fB--allow-ou=OU\\fR\n[Test/Unit tests                ]   | Allow clients with given organizational unit name (can be repeated).\n[Test/Unit tests                ]   | .TP\n[Test/Unit tests                ]   | \\fB--allow-dns=DNS\\fR\n[Test/Unit tests                ]   | Allow clients with given DNS subject alternative name (can be repeated).\n[Test/Unit tests                ]   | .TP\n[Test/Unit tests                ]   | \\fB--allow-uri=URI\\fR\n[Test/Unit tests                ]   | Allow clients with given URI subject alternative name (can be repeated).\n[Test/Unit tests                ]   | .TP\n[Test/Unit tests                ]   | \\fB--allow-policy=POLICY\\fR\n[Test/Unit tests                ]   | Allow passing the location of an OPA rego file\n[Test/Unit tests                ]   | .TP\n[Test/Unit tests                ]   | \\fB--allow-query=QUERY\\fR\n[Test/Unit tests                ]   | Allow defining a query to validate against the client certificate and the rego policy.\n[Test/Unit tests                ]   | .TP\n[Test/Unit tests                ]   | \\fB--disable-authentication\\fR\n[Test/Unit tests                ]   | Disable client authentication, no client certificate will be required.\n[Test/Unit tests                ]   | .TP\n[Test/Unit tests                ]   | \\fB--auto-acme-cert=FQDN\\fR\n[Test/Unit tests                ]   | Automatically obtain a certificate via ACME for the specified FQDN\n[Test/Unit tests                ]   | .TP\n[Test/Unit tests                ]   | \\fB--auto-acme-email=EMAIL\\fR\n[Test/Unit tests                ]   | Email address associated with all ACME requests\n[Test/Unit tests                ]   | .TP\n[Test/Unit tests                ]   | \\fB--auto-acme-agree-to-tos\\fR\n[Test/Unit tests                ]   | Agree to the Terms of Service of the ACME CA\n[Test/Unit tests                ]   | .TP\n[Test/Unit tests                ]   | \\fB--auto-acme-ca=https://some-acme-ca.example.com/\\fR\n[Test/Unit tests                ]   | Specify the URL to the ACME CA. Defaults to Let's Encrypt if not specified.\n[Test/Unit tests                ]   | .TP\n[Test/Unit tests                ]   | \\fB--auto-acme-testca=https://testing.some-acme-ca.example.com/\\fR\n[Test/Unit tests                ]   | Specify the URL to the ACME CA's Test/Staging environemnt. If set, all requests will go to this CA and --auto-acme-ca will be ignored.\n[Test/Unit tests                ]   | .SS\n[Test/Unit tests                ]   | \\fBclient --listen=ADDR --target=ADDR [<flags>]\\fR\n[Test/Unit tests                ]   | .PP\n[Test/Unit tests                ]   | Client mode (plain TCP/UNIX listener -> TLS target).\n[Test/Unit tests                ]   | .TP\n[Test/Unit tests                ]   | \\fB--listen=ADDR\\fR\n[Test/Unit tests                ]   | Address and port to listen on (can be HOST:PORT, unix:PATH, systemd:NAME or launchd:NAME).\n[Test/Unit tests                ]   | .TP\n[Test/Unit tests                ]   | \\fB--target=ADDR\\fR\n[Test/Unit tests                ]   | Address to forward connections to (must be HOST:PORT).\n[Test/Unit tests                ]   | .TP\n[Test/Unit tests                ]   | \\fB--unsafe-listen\\fR\n[Test/Unit tests                ]   | If set, does not limit listen to localhost, 127.0.0.1, [::1], or UNIX sockets.\n[Test/Unit tests                ]   | .TP\n[Test/Unit tests                ]   | \\fB--override-server-name=NAME\\fR\n[Test/Unit tests                ]   | If set, overrides the server name used for hostname verification.\n[Test/Unit tests                ]   | .TP\n[Test/Unit tests                ]   | \\fB--connect-proxy=URL\\fR\n[Test/Unit tests                ]   | If set, connect to target over given HTTP CONNECT proxy. Must be HTTP/HTTPS URL.\n[Test/Unit tests                ]   | .TP\n[Test/Unit tests                ]   | \\fB--verify-cn=CN\\fR\n[Test/Unit tests                ]   | Allow servers with given common name (can be repeated).\n[Test/Unit tests                ]   | .TP\n[Test/Unit tests                ]   | \\fB--verify-ou=OU\\fR\n[Test/Unit tests                ]   | Allow servers with given organizational unit name (can be repeated).\n[Test/Unit tests                ]   | .TP\n[Test/Unit tests                ]   | \\fB--verify-dns=DNS\\fR\n[Test/Unit tests                ]   | Allow servers with given DNS subject alternative name (can be repeated).\n[Test/Unit tests                ]   | .TP\n[Test/Unit tests                ]   | \\fB--verify-uri=URI\\fR\n[Test/Unit tests                ]   | Allow servers with given URI subject alternative name (can be repeated).\n[Test/Unit tests                ]   | .TP\n[Test/Unit tests                ]   | \\fB--verify-policy=POLICY\\fR\n[Test/Unit tests                ]   | Allow passing the location of an OPA rego file\n[Test/Unit tests                ]   | .TP\n[Test/Unit tests                ]   | \\fB--verify-query=QUERY\\fR\n[Test/Unit tests                ]   | Allow defining a query to validate against the client certificate and the rego policy.\n[Test/Unit tests                ]   | .TP\n[Test/Unit tests                ]   | \\fB--disable-authentication\\fR\n[Test/Unit tests                ]   | Disable client authentication, no certificate will be provided to the server.\n[Test/Unit tests                ]   | --- PASS: TestGenerateManPage (0.00s)\n[Test/Unit tests                ]   | === RUN   TestIntegrationMain\n[Test/Unit tests                ]   | --- PASS: TestIntegrationMain (0.00s)\n[Test/Unit tests                ]   | === RUN   TestInitLoggerQuiet\n[Test/Unit tests                ]   | --- PASS: TestInitLoggerQuiet (0.00s)\n[Test/Unit tests                ]   | === RUN   TestInitLoggerSyslog\n[Test/Unit tests                ]   |     main_test.go:103: Error setting up syslog for test, skipping: Unix syslog delivery error\n[Test/Unit tests                ]   | --- SKIP: TestInitLoggerSyslog (0.00s)\n[Test/Unit tests                ]   | === RUN   TestPanicOnError\n[Test/Unit tests                ]   | --- PASS: TestPanicOnError (0.00s)\n[Test/Unit tests                ]   | === RUN   TestFlagValidation\n[Test/Unit tests                ]   | --- PASS: TestFlagValidation (0.00s)\n[Test/Unit tests                ]   | === RUN   TestServerFlagValidation\n[Test/Unit tests                ]   | --- PASS: TestServerFlagValidation (0.00s)\n[Test/Unit tests                ]   | === RUN   TestClientFlagValidation\n[Test/Unit tests                ]   | --- PASS: TestClientFlagValidation (0.00s)\n[Test/Unit tests                ]   | === RUN   TestAllowsLocalhost\n[Test/Unit tests                ]   | --- PASS: TestAllowsLocalhost (0.00s)\n[Test/Unit tests                ]   | === RUN   TestDisallowsFooDotCom\n[Test/Unit tests                ]   | --- PASS: TestDisallowsFooDotCom (0.00s)\n[Test/Unit tests                ]   | === RUN   TestServerBackendDialerError\n[Test/Unit tests                ]   | --- PASS: TestServerBackendDialerError (0.00s)\n[Test/Unit tests                ]   | === RUN   TestInvalidCABundle\n[Test/Unit tests                ]   | --- PASS: TestInvalidCABundle (0.00s)\n[Test/Unit tests                ]   | === RUN   TestProxyLoggingFlags\n[Test/Unit tests                ]   | --- PASS: TestProxyLoggingFlags (0.00s)\n[Test/Unit tests                ]   | === RUN   TestStatusHandlerNew\n[Test/Unit tests                ]   | --- PASS: TestStatusHandlerNew (0.00s)\n[Test/Unit tests                ]   | === RUN   TestStatusHandlerListeningTCP\n[Test/Unit tests                ]   | --- PASS: TestStatusHandlerListeningTCP (0.00s)\n[Test/Unit tests                ]   | === RUN   TestStatusHandlerListeningBackendDown\n[Test/Unit tests                ]   | --- PASS: TestStatusHandlerListeningBackendDown (0.00s)\n[Test/Unit tests                ]   | === RUN   TestStatusHandlerReloading\n[Test/Unit tests                ]   | --- PASS: TestStatusHandlerReloading (0.00s)\n[Test/Unit tests                ]   | === RUN   TestStatusTargetHTTP2XX\n[Test/Unit tests                ]   | --- PASS: TestStatusTargetHTTP2XX (0.00s)\n[Test/Unit tests                ]   | === RUN   TestStatusTargetHTTPNon2XX\n[Test/Unit tests                ]   | --- PASS: TestStatusTargetHTTPNon2XX (0.00s)\n[Test/Unit tests                ]   | === RUN   TestBuildConfig\n[Test/Unit tests                ]   | --- PASS: TestBuildConfig (0.02s)\n[Test/Unit tests                ]   | === RUN   TestCipherSuitePreference\n[Test/Unit tests                ]   | --- PASS: TestCipherSuitePreference (0.00s)\n[Test/Unit tests                ]   | === RUN   TestReload\n[Test/Unit tests                ]   | --- PASS: TestReload (0.03s)\n[Test/Unit tests                ]   | === RUN   TestBuildConfigSystemRoots\n[Test/Unit tests                ]   | --- PASS: TestBuildConfigSystemRoots (0.05s)\n[Test/Unit tests                ]   | PASS\n[Test/Unit tests                ]   | coverage: 39.6% of statements\n[Test/Unit tests                ]   | ok  \tgithub.com/ghostunnel/ghostunnel\t0.138s\tcoverage: 39.6% of statements\n[Test/Unit tests                ]   | === RUN   TestAuthorizeNotVerified\n[Test/Unit tests                ]   | --- PASS: TestAuthorizeNotVerified (0.00s)\n[Test/Unit tests                ]   | === RUN   TestAuthorizeReject\n[Test/Unit tests                ]   | --- PASS: TestAuthorizeReject (0.00s)\n[Test/Unit tests                ]   | === RUN   TestAuthorizeAllowAll\n[Test/Unit tests                ]   | --- PASS: TestAuthorizeAllowAll (0.00s)\n[Test/Unit tests                ]   | === RUN   TestAuthorizeAllowCN\n[Test/Unit tests                ]   | --- PASS: TestAuthorizeAllowCN (0.00s)\n[Test/Unit tests                ]   | === RUN   TestAuthorizeAllowOU\n[Test/Unit tests                ]   | --- PASS: TestAuthorizeAllowOU (0.00s)\n[Test/Unit tests                ]   | === RUN   TestAuthorizeAllowDNS\n[Test/Unit tests                ]   | --- PASS: TestAuthorizeAllowDNS (0.00s)\n[Test/Unit tests                ]   | === RUN   TestAuthorizeAllowIP\n[Test/Unit tests                ]   | --- PASS: TestAuthorizeAllowIP (0.00s)\n[Test/Unit tests                ]   | === RUN   TestAuthorizeAllowURI\n[Test/Unit tests                ]   | --- PASS: TestAuthorizeAllowURI (0.00s)\n[Test/Unit tests                ]   | === RUN   TestAuthorizeRejectURI\n[Test/Unit tests                ]   | --- PASS: TestAuthorizeRejectURI (0.00s)\n[Test/Unit tests                ]   | === RUN   TestAuthorizeOPARejectCommonName\n[Test/Unit tests                ]   | --- PASS: TestAuthorizeOPARejectCommonName (0.00s)\n[Test/Unit tests                ]   | === RUN   TestAuthorizeOPAAcceptCommonName\n[Test/Unit tests                ]   | --- PASS: TestAuthorizeOPAAcceptCommonName (0.00s)\n[Test/Unit tests                ]   | === RUN   TestAuthorizeOPAAcceptDNSn\n[Test/Unit tests                ]   | --- PASS: TestAuthorizeOPAAcceptDNSn (0.00s)\n[Test/Unit tests                ]   | === RUN   TestAuthorizeOPAAcceptURIs\n[Test/Unit tests                ]   | --- PASS: TestAuthorizeOPAAcceptURIs (0.00s)\n[Test/Unit tests                ]   | === RUN   TestAuthorizeOPAAcceptOneOU\n[Test/Unit tests                ]   | --- PASS: TestAuthorizeOPAAcceptOneOU (0.00s)\n[Test/Unit tests                ]   | === RUN   TestAuthorizeOPARejectAllOU\n[Test/Unit tests                ]   | --- PASS: TestAuthorizeOPARejectAllOU (0.00s)\n[Test/Unit tests                ]   | === RUN   TestVerifyAllowEmpty\n[Test/Unit tests                ]   | --- PASS: TestVerifyAllowEmpty (0.00s)\n[Test/Unit tests                ]   | === RUN   TestVerifyAllowCN\n[Test/Unit tests                ]   | --- PASS: TestVerifyAllowCN (0.00s)\n[Test/Unit tests                ]   | === RUN   TestVerifyAllowOU\n[Test/Unit tests                ]   | --- PASS: TestVerifyAllowOU (0.00s)\n[Test/Unit tests                ]   | === RUN   TestVerifyAllowDNS\n[Test/Unit tests                ]   | --- PASS: TestVerifyAllowDNS (0.00s)\n[Test/Unit tests                ]   | === RUN   TestVerifyAllowIP\n[Test/Unit tests                ]   | --- PASS: TestVerifyAllowIP (0.00s)\n[Test/Unit tests                ]   | === RUN   TestVerifyRejectCN\n[Test/Unit tests                ]   | --- PASS: TestVerifyRejectCN (0.00s)\n[Test/Unit tests                ]   | === RUN   TestVerifyRejectOU\n[Test/Unit tests                ]   | --- PASS: TestVerifyRejectOU (0.00s)\n[Test/Unit tests                ]   | === RUN   TestVerifyRejectDNS\n[Test/Unit tests                ]   | --- PASS: TestVerifyRejectDNS (0.00s)\n[Test/Unit tests                ]   | === RUN   TestVerifyRejectIP\n[Test/Unit tests                ]   | --- PASS: TestVerifyRejectIP (0.00s)\n[Test/Unit tests                ]   | === RUN   TestVerifyAllowURI\n[Test/Unit tests                ]   | --- PASS: TestVerifyAllowURI (0.00s)\n[Test/Unit tests                ]   | === RUN   TestVerifyRejectURI\n[Test/Unit tests                ]   | --- PASS: TestVerifyRejectURI (0.00s)\n[Test/Unit tests                ]   | === RUN   TestVerifyNoVerifiedChains\n[Test/Unit tests                ]   | --- PASS: TestVerifyNoVerifiedChains (0.00s)\n[Test/Unit tests                ]   | === RUN   TestVerifyOPARejectCommonName\n[Test/Unit tests                ]   | --- PASS: TestVerifyOPARejectCommonName (0.00s)\n[Test/Unit tests                ]   | === RUN   TestVerifyOPAAcceptCommonName\n[Test/Unit tests                ]   | --- PASS: TestVerifyOPAAcceptCommonName (0.00s)\n[Test/Unit tests                ]   | === RUN   TestVerifyOPAAcceptDNSn\n[Test/Unit tests                ]   | --- PASS: TestVerifyOPAAcceptDNSn (0.00s)\n[Test/Unit tests                ]   | === RUN   TestVerifyOPAAcceptURIs\n[Test/Unit tests                ]   | --- PASS: TestVerifyOPAAcceptURIs (0.00s)\n[Test/Unit tests                ]   | === RUN   TestVerifyOPAAcceptOneOU\n[Test/Unit tests                ]   | --- PASS: TestVerifyOPAAcceptOneOU (0.00s)\n[Test/Unit tests                ]   | === RUN   TestVerifyOPARejectAllOU\n[Test/Unit tests                ]   | --- PASS: TestVerifyOPARejectAllOU (0.00s)\n[Test/Unit tests                ]   | PASS\n[Test/Unit tests                ]   | coverage: 97.1% of statements\n[Test/Unit tests                ]   | ok  \tgithub.com/ghostunnel/ghostunnel/auth\t0.055s\tcoverage: 97.1% of statements\n[Test/Unit tests                ]   | === RUN   TestReadPEMValid\n[Test/Unit tests                ]   | --- PASS: TestReadPEMValid (0.00s)\n[Test/Unit tests                ]   | === RUN   TestReadPEMInvalid\n[Test/Unit tests                ]   | --- PASS: TestReadPEMInvalid (0.00s)\n[Test/Unit tests                ]   | === RUN   TestReadX509Valid\n[Test/Unit tests                ]   | --- PASS: TestReadX509Valid (0.00s)\n[Test/Unit tests                ]   | === RUN   TestReadX509Invalid\n[Test/Unit tests                ]   | --- PASS: TestReadX509Invalid (0.00s)\n[Test/Unit tests                ]   | === RUN   TestLoadTrustStoreSystemRoots\n[Test/Unit tests                ]   | --- PASS: TestLoadTrustStoreSystemRoots (0.03s)\n[Test/Unit tests                ]   | === RUN   TestLoadTrustStorePEM\n[Test/Unit tests                ]   | --- PASS: TestLoadTrustStorePEM (0.00s)\n[Test/Unit tests                ]   | === RUN   TestLoadTrustStoreInvalid\n[Test/Unit tests                ]   | --- PASS: TestLoadTrustStoreInvalid (0.00s)\n[Test/Unit tests                ]   | === RUN   TestInvalidKeychainIdentity\n[Test/Unit tests                ]   | --- PASS: TestInvalidKeychainIdentity (0.00s)\n[Test/Unit tests                ]   | === RUN   TestTimeoutError\n[Test/Unit tests                ]   | --- PASS: TestTimeoutError (0.00s)\n[Test/Unit tests                ]   | === RUN   TestBuildFlags\n[Test/Unit tests                ]   | --- PASS: TestBuildFlags (0.00s)\n[Test/Unit tests                ]   | === RUN   TestCertificateFromPEMFilesValid\n[Test/Unit tests                ]   | --- PASS: TestCertificateFromPEMFilesValid (0.00s)\n[Test/Unit tests                ]   | === RUN   TestCertificateFromPEMFilesInvalid\n[Test/Unit tests                ]   | --- PASS: TestCertificateFromPEMFilesInvalid (0.00s)\n[Test/Unit tests                ]   | === RUN   TestCertificateFromPEMFilesTrustStore\n[Test/Unit tests                ]   | --- PASS: TestCertificateFromPEMFilesTrustStore (0.00s)\n[Test/Unit tests                ]   | === RUN   TestGetCachedCertificateKeystore\n[Test/Unit tests                ]   | --- PASS: TestGetCachedCertificateKeystore (0.00s)\n[Test/Unit tests                ]   | === RUN   TestNoCertificate\n[Test/Unit tests                ]   | --- PASS: TestNoCertificate (0.00s)\n[Test/Unit tests                ]   | === RUN   TestNoCertificateInvalid\n[Test/Unit tests                ]   | --- PASS: TestNoCertificateInvalid (0.00s)\n[Test/Unit tests                ]   | === RUN   TestInvalidPKCS11Module\n[Test/Unit tests                ]   | --- PASS: TestInvalidPKCS11Module (0.00s)\n[Test/Unit tests                ]   | === RUN   TestGetCachedCertificatePKCS11\n[Test/Unit tests                ]   | --- PASS: TestGetCachedCertificatePKCS11 (0.00s)\n[Test/Unit tests                ]   | === RUN   TestSPIFFELogger\n[Test/Unit tests                ]   | 2023/05/30 11:29:13 spiffe/error: test\n[Test/Unit tests                ]   | 2023/05/30 11:29:13 spiffe/warn: test\n[Test/Unit tests                ]   | 2023/05/30 11:29:13 spiffe/info: test\n[Test/Unit tests                ]   | 2023/05/30 11:29:13 spiffe/debug: test\n[Test/Unit tests                ]   | --- PASS: TestSPIFFELogger (0.00s)\n[Test/Unit tests                ]   | === RUN   TestWorkloadAPITLSConfigSource\n[Test/Unit tests                ]   |     workload_api.go:65: WorkloadAPI address: tcp://127.0.0.1:34161\n[Test/Unit tests                ]   | 2023/05/30 11:29:13 spiffe/debug: Watching X.509 contexts\n[Test/Unit tests                ]   | 2023/05/30 11:29:13 spiffe/debug: Watching X.509 contexts\n[Test/Unit tests                ]   |     spiffe_tls_config_test.go:80: DIALING...\n[Test/Unit tests                ]   |     spiffe_tls_config_test.go:69: ACCEPTING...\n[Test/Unit tests                ]   |     spiffe_tls_config_test.go:71: ACCEPTED: err=<nil>\n[Test/Unit tests                ]   |     spiffe_tls_config_test.go:82: DIALED: err=<nil>\n[Test/Unit tests                ]   |     spiffe_tls_config_test.go:87: READING RESPONSE...\n[Test/Unit tests                ]   |     spiffe_tls_config_test.go:75: WROTE RESPONSE: err=<nil>\n[Test/Unit tests                ]   |     spiffe_tls_config_test.go:91: READ RESPONSE: response=\"PAYLOAD\\n\" err=<nil>\n[Test/Unit tests                ]   | --- PASS: TestWorkloadAPITLSConfigSource (0.01s)\n[Test/Unit tests                ]   | PASS\n[Test/Unit tests                ]   | coverage: 52.7% of statements\n[Test/Unit tests                ]   | ok  \tgithub.com/ghostunnel/ghostunnel/certloader\t0.068s\tcoverage: 52.7% of statements\n[Test/Unit tests                ]   | ?   \tgithub.com/ghostunnel/ghostunnel/certloader/internal/test\t[no test files]\n[Test/Unit tests                ]   | ?   \tgithub.com/ghostunnel/ghostunnel/certstore\t[no test files]\n[Test/Unit tests                ]   | === RUN   TestPolicyInitFail\n[Test/Unit tests                ]   | --- PASS: TestPolicyInitFail (0.00s)\n[Test/Unit tests                ]   | === RUN   TestPolicyReloadFail\n[Test/Unit tests                ]   | --- PASS: TestPolicyReloadFail (0.21s)\n[Test/Unit tests                ]   | === RUN   TestPolicyReloading\n[Test/Unit tests                ]   | --- PASS: TestPolicyReloading (0.10s)\n[Test/Unit tests                ]   | === RUN   TestStaticPolicy\n[Test/Unit tests                ]   | --- PASS: TestStaticPolicy (0.00s)\n[Test/Unit tests                ]   | PASS\n[Test/Unit tests                ]   | coverage: 100.0% of statements\n[Test/Unit tests                ]   | ok  \tgithub.com/ghostunnel/ghostunnel/policy\t0.361s\tcoverage: 100.0% of statements\n[Test/Unit tests                ]   | === RUN   TestMultipleShutdownCalls\n[Test/Unit tests                ]   | --- PASS: TestMultipleShutdownCalls (0.00s)\n[Test/Unit tests                ]   | === RUN   TestProxySuccess\n[Test/Unit tests                ]   | opening pipe: tcp:127.0.0.1:59316 [no tls] <-> tcp:127.0.0.1:33861 [no tls]\n[Test/Unit tests                ]   | closed pipe: tcp:127.0.0.1:59316 [no tls] <-> tcp:127.0.0.1:33861 [no tls]\n[Test/Unit tests                ]   | --- PASS: TestProxySuccess (0.00s)\n[Test/Unit tests                ]   | === RUN   TestProxyProtocolSuccess\n[Test/Unit tests                ]   | opening pipe: tcp:127.0.0.1:40270 [no tls] <-> tcp:127.0.0.1:43845 [no tls]\n[Test/Unit tests                ]   | closed pipe: tcp:127.0.0.1:40270 [no tls] <-> tcp:127.0.0.1:43845 [no tls]\n[Test/Unit tests                ]   | --- PASS: TestProxyProtocolSuccess (0.00s)\n[Test/Unit tests                ]   | === RUN   TestBackendDialError\n[Test/Unit tests                ]   | error on dial: failure for test\n[Test/Unit tests                ]   | --- PASS: TestBackendDialError (1.00s)\n[Test/Unit tests                ]   | PASS\n[Test/Unit tests                ]   | coverage: 66.7% of statements\n[Test/Unit tests                ]   | ok  \tgithub.com/ghostunnel/ghostunnel/proxy\t1.043s\tcoverage: 66.7% of statements\n[Test/Unit tests                ]   | === RUN   TestParseAddress\n[Test/Unit tests                ]   | --- PASS: TestParseAddress (0.00s)\n[Test/Unit tests                ]   | === RUN   TestParseHTTPAddress\n[Test/Unit tests                ]   | --- PASS: TestParseHTTPAddress (0.00s)\n[Test/Unit tests                ]   | PASS\n[Test/Unit tests                ]   | coverage: 57.7% of statements\n[Test/Unit tests                ]   | ok  \tgithub.com/ghostunnel/ghostunnel/socket\t0.056s\tcoverage: 57.7% of statements\n[Test/Unit tests                ]   | === RUN   TestMatchingSimple\n[Test/Unit tests                ]   |     matcher_test.go:56: testing pattern: 'spiffe://foo/*/bar' => '^spiffe://foo/[^/]+/bar/?$'\n[Test/Unit tests                ]   |     matcher_test.go:56: testing pattern: 'spiffe://*/*/bar' => '^spiffe://[^/]+/[^/]+/bar/?$'\n[Test/Unit tests                ]   |     matcher_test.go:56: testing pattern: 'spiffe://foo/*/*' => '^spiffe://foo/[^/]+/[^/]+/?$'\n[Test/Unit tests                ]   |     matcher_test.go:56: testing pattern: 'spiffe://*/*/*' => '^spiffe://[^/]+/[^/]+/[^/]+/?$'\n[Test/Unit tests                ]   | --- PASS: TestMatchingSimple (0.00s)\n[Test/Unit tests                ]   | === RUN   TestMatchingWithDouble\n[Test/Unit tests                ]   |     matcher_test.go:56: testing pattern: 'spiffe://foo/*/bar/**' => '^spiffe://foo/[^/]+/bar/?(|/.*)$'\n[Test/Unit tests                ]   |     matcher_test.go:56: testing pattern: 'spiffe://foo/*/bar/**' => '^spiffe://foo/[^/]+/bar/?(|/.*)$'\n[Test/Unit tests                ]   | --- PASS: TestMatchingWithDouble (0.00s)\n[Test/Unit tests                ]   | === RUN   TestMatchingWithMetaChars\n[Test/Unit tests                ]   |     matcher_test.go:56: testing pattern: 'spiffe://foo/./bar' => '^spiffe://foo/\\./bar/?$'\n[Test/Unit tests                ]   |     matcher_test.go:56: testing pattern: 'spiffe://././.' => '^spiffe://\\./\\./\\./?$'\n[Test/Unit tests                ]   |     matcher_test.go:56: testing pattern: '.+' => '^\\.\\+/?$'\n[Test/Unit tests                ]   | --- PASS: TestMatchingWithMetaChars (0.00s)\n[Test/Unit tests                ]   | === RUN   TestInvalidPatterns\n[Test/Unit tests                ]   | --- PASS: TestInvalidPatterns (0.00s)\n[Test/Unit tests                ]   | === RUN   TestMustCompile\n[Test/Unit tests                ]   | --- PASS: TestMustCompile (0.00s)\n[Test/Unit tests                ]   | === RUN   TestCompileList\n[Test/Unit tests                ]   | --- PASS: TestCompileList (0.00s)\n[Test/Unit tests                ]   | === RUN   ExampleCompile_simple\n[Test/Unit tests                ]   | --- PASS: ExampleCompile_simple (0.00s)\n[Test/Unit tests                ]   | === RUN   ExampleCompile_doubleWildcard\n[Test/Unit tests                ]   | --- PASS: ExampleCompile_doubleWildcard (0.00s)\n[Test/Unit tests                ]   | PASS\n[Test/Unit tests                ]   | coverage: 97.4% of statements\n[Test/Unit tests                ]   | ok  \tgithub.com/ghostunnel/ghostunnel/wildcard\t0.127s\tcoverage: 97.4% of statements\n[Test/Unit tests                ]   \u2705  Success - Main Run tests\n[Test/Unit tests                ] \ud83c\udfc1  Job succeeded\n",
    "actions_stderr": "Error: context canceled\n"
}