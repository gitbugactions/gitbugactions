{
    "repository": "yitsushi/totp-cli",
    "clone_url": "https://github.com/yitsushi/totp-cli.git",
    "timestamp": "2023-05-30T11:56:09.159382Z",
    "clone_success": true,
    "number of actions": 3,
    "number_of_test_actions": 1,
    "actions_successful": false,
    "actions_stdout": "[Quality Check/go vet and lint    ] \ud83d\ude80  Start image=crawlergpt:latest\n[Quality Check/golangci lint check] \ud83d\ude80  Start image=crawlergpt:latest\n[Quality Check/Test and coverage  ] \ud83d\ude80  Start image=crawlergpt:latest\n[Quality Check/go vet and lint    ]   \ud83d\udc33  docker pull image=crawlergpt:latest platform= username= forcePull=false\n[Quality Check/Test and coverage  ]   \ud83d\udc33  docker pull image=crawlergpt:latest platform= username= forcePull=false\n[Quality Check/golangci lint check]   \ud83d\udc33  docker pull image=crawlergpt:latest platform= username= forcePull=false\n[Quality Check/Test and coverage  ]   \ud83d\udc33  docker create image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[Quality Check/golangci lint check]   \ud83d\udc33  docker create image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[Quality Check/go vet and lint    ]   \ud83d\udc33  docker create image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[Quality Check/go vet and lint    ]   \ud83d\udc33  docker run image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[Quality Check/Test and coverage  ]   \ud83d\udc33  docker run image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[Quality Check/golangci lint check]   \ud83d\udc33  docker run image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[Quality Check/golangci lint check]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/yitsushi-totp-cli] user=0 workdir=\n[Quality Check/go vet and lint    ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/yitsushi-totp-cli] user=0 workdir=\n[Quality Check/Test and coverage  ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/yitsushi-totp-cli] user=0 workdir=\n[Quality Check/go vet and lint    ]   \u2601  git clone 'https://github.com/actions/setup-go' # ref=v3\n[Quality Check/golangci lint check]   \u2601  git clone 'https://github.com/golangci/golangci-lint-action' # ref=v3\n[Quality Check/Test and coverage  ]   \u2601  git clone 'https://github.com/actions/setup-go' # ref=v3\n[Quality Check/go vet and lint    ] \u2b50 Run Main Checkout code\n[Quality Check/golangci lint check] \u2b50 Run Main Checkout code\n[Quality Check/Test and coverage  ]   \u2601  git clone 'https://github.com/jandelgado/gcov2lcov-action' # ref=v1.0.9\n[Quality Check/go vet and lint    ]   \u2705  Success - Main Checkout code\n[Quality Check/Test and coverage  ] \u2b50 Run Pre Convert coverage.out to coverage.lcov\n[Quality Check/golangci lint check]   \u2705  Success - Main Checkout code\n[Quality Check/Test and coverage  ]   \u2705  Success - Pre Convert coverage.out to coverage.lcov\n[Quality Check/go vet and lint    ] \u2b50 Run Main Set up Go 1.x\n[Quality Check/golangci lint check] \u2b50 Run Main golangci-lint\n[Quality Check/go vet and lint    ]   \ud83d\udc33  docker cp src=/home/andre-silva/.cache/act/actions-setup-go@v3/ dst=/var/run/act/actions/actions-setup-go@v3/\n[Quality Check/Test and coverage  ]   \u2601  git clone 'https://github.com/coverallsapp/github-action' # ref=master\n[Quality Check/golangci lint check]   \ud83d\udc33  docker cp src=/home/andre-silva/.cache/act/golangci-golangci-lint-action@v3/ dst=/var/run/act/actions/golangci-golangci-lint-action@v3/\n[Quality Check/go vet and lint    ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /var/run/act/actions/actions-setup-go@v3/] user=0 workdir=\n[Quality Check/Test and coverage  ] \u2b50 Run Main Checkout code\n[Quality Check/golangci lint check]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /var/run/act/actions/golangci-golangci-lint-action@v3/] user=0 workdir=\n[Quality Check/Test and coverage  ]   \u2705  Success - Main Checkout code\n[Quality Check/Test and coverage  ] \u2b50 Run Main Set up Go 1.x\n[Quality Check/Test and coverage  ]   \ud83d\udc33  docker cp src=/home/andre-silva/.cache/act/actions-setup-go@v3/ dst=/var/run/act/actions/actions-setup-go@v3/\n[Quality Check/Test and coverage  ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /var/run/act/actions/actions-setup-go@v3/] user=0 workdir=\n[Quality Check/go vet and lint    ]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/actions-setup-go@v3/dist/setup/index.js] user= workdir=\n[Quality Check/Test and coverage  ]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/actions-setup-go@v3/dist/setup/index.js] user= workdir=\n[Quality Check/golangci lint check]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/golangci-golangci-lint-action@v3/dist/run/index.js] user= workdir=\n[Quality Check/go vet and lint    ]   | Setup go version spec ^1.19\n[Quality Check/go vet and lint    ]   \ud83d\udcac  ::debug::isExplicit: \n[Quality Check/go vet and lint    ]   \ud83d\udcac  ::debug::explicit? false\n[Quality Check/go vet and lint    ]   \ud83d\udcac  ::debug::isExplicit: 1.14.15\n[Quality Check/go vet and lint    ]   \ud83d\udcac  ::debug::explicit? true\n[Quality Check/go vet and lint    ]   \ud83d\udcac  ::debug::isExplicit: 1.15.15\n[Quality Check/go vet and lint    ]   \ud83d\udcac  ::debug::explicit? true\n[Quality Check/go vet and lint    ]   \ud83d\udcac  ::debug::isExplicit: 1.16.7\n[Quality Check/go vet and lint    ]   \ud83d\udcac  ::debug::explicit? true\n[Quality Check/go vet and lint    ]   \ud83d\udcac  ::debug::evaluating 3 versions\n[Quality Check/go vet and lint    ]   \ud83d\udcac  ::debug::match not found\n[Quality Check/go vet and lint    ]   | Attempting to download ^1.19...\n[Quality Check/go vet and lint    ]   \ud83d\udcac  ::debug::No manifest cached\n[Quality Check/go vet and lint    ]   | API rate limit exceeded for 130.242.72.40. (But here's the good news: Authenticated requests get a higher rate limit. Check out the documentation for more details.)\n[Quality Check/go vet and lint    ]   \ud83d\udcac  ::debug::HttpClientError: API rate limit exceeded for 130.242.72.40. (But here's the good news: Authenticated requests get a higher rate limit. Check out the documentation for more details.)%0A    at /run/act/actions/actions-setup-go@v3/dist/setup/index.js:8612:27%0A    at processTicksAndRejections (internal/process/task_queues.js:95:5)\n[Quality Check/go vet and lint    ]   | Falling back to download directly from Go\n[Quality Check/Test and coverage  ]   | Setup go version spec ^1.19\n[Quality Check/Test and coverage  ]   \ud83d\udcac  ::debug::isExplicit: \n[Quality Check/Test and coverage  ]   \ud83d\udcac  ::debug::explicit? false\n[Quality Check/Test and coverage  ]   \ud83d\udcac  ::debug::isExplicit: 1.14.15\n[Quality Check/Test and coverage  ]   \ud83d\udcac  ::debug::explicit? true\n[Quality Check/Test and coverage  ]   \ud83d\udcac  ::debug::isExplicit: 1.15.15\n[Quality Check/Test and coverage  ]   \ud83d\udcac  ::debug::explicit? true\n[Quality Check/Test and coverage  ]   \ud83d\udcac  ::debug::isExplicit: 1.16.7\n[Quality Check/Test and coverage  ]   \ud83d\udcac  ::debug::explicit? true\n[Quality Check/Test and coverage  ]   \ud83d\udcac  ::debug::evaluating 3 versions\n[Quality Check/Test and coverage  ]   \ud83d\udcac  ::debug::match not found\n[Quality Check/Test and coverage  ]   | Attempting to download ^1.19...\n[Quality Check/Test and coverage  ]   \ud83d\udcac  ::debug::No manifest cached\n[Quality Check/Test and coverage  ]   | API rate limit exceeded for 130.242.72.40. (But here's the good news: Authenticated requests get a higher rate limit. Check out the documentation for more details.)\n[Quality Check/Test and coverage  ]   \ud83d\udcac  ::debug::HttpClientError: API rate limit exceeded for 130.242.72.40. (But here's the good news: Authenticated requests get a higher rate limit. Check out the documentation for more details.)%0A    at /run/act/actions/actions-setup-go@v3/dist/setup/index.js:8612:27%0A    at processTicksAndRejections (internal/process/task_queues.js:95:5)\n[Quality Check/Test and coverage  ]   | Falling back to download directly from Go\n[Quality Check/go vet and lint    ]   \ud83d\udcac  ::debug::check 1.20.4 satisfies ^1.19\n[Quality Check/go vet and lint    ]   \ud83d\udcac  ::debug::===amd64 && ===linux\n[Quality Check/go vet and lint    ]   \ud83d\udcac  ::debug::amd64===amd64 && darwin===linux\n[Quality Check/go vet and lint    ]   \ud83d\udcac  ::debug::amd64===amd64 && darwin===linux\n[Quality Check/go vet and lint    ]   \ud83d\udcac  ::debug::arm64===amd64 && darwin===linux\n[Quality Check/go vet and lint    ]   \ud83d\udcac  ::debug::arm64===amd64 && darwin===linux\n[Quality Check/go vet and lint    ]   \ud83d\udcac  ::debug::386===amd64 && freebsd===linux\n[Quality Check/go vet and lint    ]   \ud83d\udcac  ::debug::amd64===amd64 && freebsd===linux\n[Quality Check/go vet and lint    ]   \ud83d\udcac  ::debug::386===amd64 && linux===linux\n[Quality Check/go vet and lint    ]   \ud83d\udcac  ::debug::amd64===amd64 && linux===linux\n[Quality Check/go vet and lint    ]   \ud83d\udcac  ::debug::matched go1.20.4\n[Quality Check/go vet and lint    ]   | Install from dist\n[Quality Check/go vet and lint    ]   | Acquiring go1.20.4 from https://storage.googleapis.com/golang/go1.20.4.linux-amd64.tar.gz\n[Quality Check/go vet and lint    ]   \ud83d\udcac  ::debug::Downloading https://storage.googleapis.com/golang/go1.20.4.linux-amd64.tar.gz\n[Quality Check/go vet and lint    ]   \ud83d\udcac  ::debug::Destination /tmp/49148a9b-74db-40f2-b6a8-5d62124554fd\n[Quality Check/Test and coverage  ]   \ud83d\udcac  ::debug::check 1.20.4 satisfies ^1.19\n[Quality Check/Test and coverage  ]   \ud83d\udcac  ::debug::===amd64 && ===linux\n[Quality Check/Test and coverage  ]   \ud83d\udcac  ::debug::amd64===amd64 && darwin===linux\n[Quality Check/Test and coverage  ]   \ud83d\udcac  ::debug::amd64===amd64 && darwin===linux\n[Quality Check/Test and coverage  ]   \ud83d\udcac  ::debug::arm64===amd64 && darwin===linux\n[Quality Check/Test and coverage  ]   \ud83d\udcac  ::debug::arm64===amd64 && darwin===linux\n[Quality Check/Test and coverage  ]   \ud83d\udcac  ::debug::386===amd64 && freebsd===linux\n[Quality Check/Test and coverage  ]   \ud83d\udcac  ::debug::amd64===amd64 && freebsd===linux\n[Quality Check/Test and coverage  ]   \ud83d\udcac  ::debug::386===amd64 && linux===linux\n[Quality Check/Test and coverage  ]   \ud83d\udcac  ::debug::amd64===amd64 && linux===linux\n[Quality Check/Test and coverage  ]   \ud83d\udcac  ::debug::matched go1.20.4\n[Quality Check/Test and coverage  ]   | Install from dist\n[Quality Check/Test and coverage  ]   | Acquiring go1.20.4 from https://storage.googleapis.com/golang/go1.20.4.linux-amd64.tar.gz\n[Quality Check/Test and coverage  ]   \ud83d\udcac  ::debug::Downloading https://storage.googleapis.com/golang/go1.20.4.linux-amd64.tar.gz\n[Quality Check/Test and coverage  ]   \ud83d\udcac  ::debug::Destination /tmp/947880c4-1962-44d7-9cfb-6ee971f718ab\n[Quality Check/golangci lint check]   \u2753  ::group::prepare environment\n[Quality Check/golangci lint check]   | Checking for go.mod: go.mod\n[Quality Check/golangci lint check]   | Finding needed golangci-lint version...\n[Quality Check/golangci lint check]   | Installing golangci-lint v1.51.0...\n[Quality Check/golangci lint check]   | Downloading https://github.com/golangci/golangci-lint/releases/download/v1.51.0/golangci-lint-1.51.0-linux-amd64.tar.gz ...\n[Quality Check/golangci lint check]   \ud83d\udcac  ::debug::Downloading https://github.com/golangci/golangci-lint/releases/download/v1.51.0/golangci-lint-1.51.0-linux-amd64.tar.gz\n[Quality Check/golangci lint check]   \ud83d\udcac  ::debug::Destination /tmp/19d27fe5-1583-4ce5-aca0-f13f08d20366\n[Quality Check/golangci lint check]   \ud83d\udcac  ::debug::Resolved Keys:\n[Quality Check/golangci lint check]   \ud83d\udcac  ::debug::[\"golangci-lint.cache-2786-1f59b2933617839cfa5fe2369fe704c896a4ff63\",\"golangci-lint.cache-2786-\"]\n[Quality Check/golangci lint check]   \ud83d\udcac  ::debug::Checking zstd --version\n[Quality Check/golangci lint check]   \ud83d\udcac  ::debug::*** zstd command line interface 64-bits v1.5.0, by Yann Collet ***\n[Quality Check/golangci lint check]   \ud83d\udcac  ::debug::getCacheEntry - Attempt 1 of 2 failed with error: Cache Service Url not found, unable to restore cache.\n[Quality Check/golangci lint check]   \ud83d\udcac  ::debug::getCacheEntry - Attempt 2 of 2 failed with error: Cache Service Url not found, unable to restore cache.\n[Quality Check/golangci lint check]   \ud83d\udcac  ::debug::download complete\n[Quality Check/golangci lint check]   \ud83d\udcac  ::debug::Checking tar --version\n[Quality Check/golangci lint check]   \ud83d\udcac  ::debug::tar (GNU tar) 1.30%0ACopyright (C) 2017 Free Software Foundation, Inc.%0ALicense GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.%0AThis is free software: you are free to change and redistribute it.%0AThere is NO WARRANTY, to the extent permitted by law.%0A%0AWritten by John Gilmore and Jay Fenlason.\n[Quality Check/golangci lint check]   | [command]/usr/bin/tar xz --overwrite --warning=no-unknown-keyword --overwrite -C /home/runneradmin -f /tmp/19d27fe5-1583-4ce5-aca0-f13f08d20366\n[Quality Check/golangci lint check]   | Installed golangci-lint into /home/runneradmin/golangci-lint-1.51.0-linux-amd64/golangci-lint in 6964ms\n[Quality Check/golangci lint check]   \ud83d\udea7  ::warning::Failed to restore: getCacheEntry failed: Cache Service Url not found, unable to restore cache.\n[Quality Check/golangci lint check]   \ud83d\udcac  ::debug::Failed to delete archive: Error: ENOENT: no such file or directory, unlink ''\n[Quality Check/golangci lint check]   | Cache not found for input keys: golangci-lint.cache-2786-1f59b2933617839cfa5fe2369fe704c896a4ff63, golangci-lint.cache-2786-\n[Quality Check/golangci lint check]   | Prepared env in 10549ms\n[Quality Check/golangci lint check]   \u2753  ::endgroup::\n[Quality Check/golangci lint check]   \u2753  ::group::run golangci-lint\n[Quality Check/golangci lint check]   | Running [/home/runneradmin/golangci-lint-1.51.0-linux-amd64/golangci-lint run --out-format=github-actions] in [] ...\n[Quality Check/go vet and lint    ]   \ud83d\udcac  ::debug::download complete\n[Quality Check/go vet and lint    ]   | Extracting Go...\n[Quality Check/go vet and lint    ]   \ud83d\udcac  ::debug::Checking tar --version\n[Quality Check/go vet and lint    ]   \ud83d\udcac  ::debug::tar (GNU tar) 1.30%0ACopyright (C) 2017 Free Software Foundation, Inc.%0ALicense GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.%0AThis is free software: you are free to change and redistribute it.%0AThere is NO WARRANTY, to the extent permitted by law.%0A%0AWritten by John Gilmore and Jay Fenlason.\n[Quality Check/go vet and lint    ]   | [command]/usr/bin/tar xz --warning=no-unknown-keyword --overwrite -C /tmp/e4be6868-1f07-4797-bcd0-7aa4b14d28f8 -f /tmp/49148a9b-74db-40f2-b6a8-5d62124554fd\n[Quality Check/Test and coverage  ]   \ud83d\udcac  ::debug::download complete\n[Quality Check/Test and coverage  ]   | Extracting Go...\n[Quality Check/Test and coverage  ]   \ud83d\udcac  ::debug::Checking tar --version\n[Quality Check/Test and coverage  ]   \ud83d\udcac  ::debug::tar (GNU tar) 1.30%0ACopyright (C) 2017 Free Software Foundation, Inc.%0ALicense GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.%0AThis is free software: you are free to change and redistribute it.%0AThere is NO WARRANTY, to the extent permitted by law.%0A%0AWritten by John Gilmore and Jay Fenlason.\n[Quality Check/Test and coverage  ]   | [command]/usr/bin/tar xz --warning=no-unknown-keyword --overwrite -C /tmp/b038cef2-12fb-4222-b3b5-5687d081890a -f /tmp/947880c4-1962-44d7-9cfb-6ee971f718ab\n[Quality Check/go vet and lint    ]   | Successfully extracted go to /tmp/e4be6868-1f07-4797-bcd0-7aa4b14d28f8\n[Quality Check/go vet and lint    ]   | Adding to the cache ...\n[Quality Check/go vet and lint    ]   \ud83d\udcac  ::debug::Caching tool go 1.20.4 x64\n[Quality Check/go vet and lint    ]   \ud83d\udcac  ::debug::source dir: /tmp/e4be6868-1f07-4797-bcd0-7aa4b14d28f8/go\n[Quality Check/go vet and lint    ]   \ud83d\udcac  ::debug::destination /opt/hostedtoolcache/go/1.20.4/x64\n[Quality Check/Test and coverage  ]   | Successfully extracted go to /tmp/b038cef2-12fb-4222-b3b5-5687d081890a\n[Quality Check/Test and coverage  ]   | Adding to the cache ...\n[Quality Check/Test and coverage  ]   \ud83d\udcac  ::debug::Caching tool go 1.20.4 x64\n[Quality Check/Test and coverage  ]   \ud83d\udcac  ::debug::source dir: /tmp/b038cef2-12fb-4222-b3b5-5687d081890a/go\n[Quality Check/Test and coverage  ]   \ud83d\udcac  ::debug::destination /opt/hostedtoolcache/go/1.20.4/x64\n[Quality Check/golangci lint check]   \u2757  ::error file=internal/storage/storage.go,line=45,col=27::undefined: os.ReadFile (typecheck)\n[Quality Check/golangci lint check]   \u2757  ::error file=internal/storage/storage.go,line=118,col=21::undefined: os.CreateTemp (typecheck)\n[Quality Check/golangci lint check]   \u2757  ::error file=internal/cmd/import.go,line=25,col=18::undefined: os.ReadFile (typecheck)\n[Quality Check/golangci lint check]   \u2757  ::error file=internal/cmd/update.go,line=106,col=18::undefined: os.CreateTemp (typecheck)\n[Quality Check/golangci lint check]   | \n[Quality Check/golangci lint check]   \u2757  ::error::issues found\n[Quality Check/golangci lint check]   | Ran golangci-lint in 39840ms\n[Quality Check/golangci lint check]   \u2753  ::endgroup::\n[Quality Check/golangci lint check]   \u274c  Failure - Main golangci-lint\n[Quality Check/golangci lint check]   \u2699  ::set-env:: MSYS=winsymlinks:nativestrict\n[Quality Check/golangci lint check]   \u2699  ::add-path:: /home/runneradmin/golangci-lint-1.51.0-linux-amd64\n[Quality Check/golangci lint check] exitcode '1': failure\n[Quality Check/golangci lint check] \u2b50 Run Post golangci-lint\n[Quality Check/golangci lint check]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/golangci-golangci-lint-action@v3/dist/post_run/index.js] user= workdir=\n[Quality Check/Test and coverage  ]   \ud83d\udcac  ::debug::finished caching tool\n[Quality Check/Test and coverage  ]   | Successfully cached go to /opt/hostedtoolcache/go/1.20.4/x64\n[Quality Check/Test and coverage  ]   | Added go to the path\n[Quality Check/Test and coverage  ]   \ud83d\udcac  ::debug::which go :/opt/hostedtoolcache/go/1.20.4/x64/bin/go:\n[Quality Check/Test and coverage  ]   \ud83d\udcac  ::debug::go env GOPATH :/home/runneradmin/go:\n[Quality Check/Test and coverage  ]   \ud83d\udcac  ::debug::creating /home/runneradmin/go\n[Quality Check/Test and coverage  ]   \ud83d\udcac  ::debug::creating /home/runneradmin/go/bin\n[Quality Check/Test and coverage  ]   \ud83d\udcac  ::debug::add bin true\n[Quality Check/Test and coverage  ]   | Successfully set up Go version ^1.19\n[Quality Check/Test and coverage  ]   \u2753 add-matcher /run/act/actions/actions-setup-go@v3/matchers.json\n[Quality Check/go vet and lint    ]   \ud83d\udcac  ::debug::finished caching tool\n[Quality Check/go vet and lint    ]   | Successfully cached go to /opt/hostedtoolcache/go/1.20.4/x64\n[Quality Check/go vet and lint    ]   | Added go to the path\n[Quality Check/go vet and lint    ]   \ud83d\udcac  ::debug::which go :/opt/hostedtoolcache/go/1.20.4/x64/bin/go:\n[Quality Check/Test and coverage  ]   | go version go1.20.4 linux/amd64\n[Quality Check/Test and coverage  ]   | \n[Quality Check/Test and coverage  ]   \u2753  ::group::go env\n[Quality Check/go vet and lint    ]   \ud83d\udcac  ::debug::go env GOPATH :/home/runneradmin/go:\n[Quality Check/go vet and lint    ]   \ud83d\udcac  ::debug::creating /home/runneradmin/go\n[Quality Check/go vet and lint    ]   \ud83d\udcac  ::debug::creating /home/runneradmin/go/bin\n[Quality Check/go vet and lint    ]   \ud83d\udcac  ::debug::add bin true\n[Quality Check/go vet and lint    ]   | Successfully set up Go version ^1.19\n[Quality Check/go vet and lint    ]   \u2753 add-matcher /run/act/actions/actions-setup-go@v3/matchers.json\n[Quality Check/go vet and lint    ]   | go version go1.20.4 linux/amd64\n[Quality Check/go vet and lint    ]   | \n[Quality Check/go vet and lint    ]   \u2753  ::group::go env\n[Quality Check/Test and coverage  ]   | GO111MODULE=\"\"\n[Quality Check/Test and coverage  ]   | GOARCH=\"amd64\"\n[Quality Check/Test and coverage  ]   | GOBIN=\"\"\n[Quality Check/Test and coverage  ]   | GOCACHE=\"/home/runneradmin/.cache/go-build\"\n[Quality Check/Test and coverage  ]   | GOENV=\"/home/runneradmin/.config/go/env\"\n[Quality Check/Test and coverage  ]   | GOEXE=\"\"\n[Quality Check/Test and coverage  ]   | GOEXPERIMENT=\"\"\n[Quality Check/Test and coverage  ]   | GOFLAGS=\"\"\n[Quality Check/Test and coverage  ]   | GOHOSTARCH=\"amd64\"\n[Quality Check/Test and coverage  ]   | GOHOSTOS=\"linux\"\n[Quality Check/Test and coverage  ]   | GOINSECURE=\"\"\n[Quality Check/Test and coverage  ]   | GOMODCACHE=\"/home/runneradmin/go/pkg/mod\"\n[Quality Check/Test and coverage  ]   | GONOPROXY=\"\"\n[Quality Check/Test and coverage  ]   | GONOSUMDB=\"\"\n[Quality Check/Test and coverage  ]   | GOOS=\"linux\"\n[Quality Check/Test and coverage  ]   | GOPATH=\"/home/runneradmin/go\"\n[Quality Check/Test and coverage  ]   | GOPRIVATE=\"\"\n[Quality Check/Test and coverage  ]   | GOPROXY=\"https://proxy.golang.org,direct\"\n[Quality Check/Test and coverage  ]   | GOROOT=\"/opt/hostedtoolcache/go/1.20.4/x64\"\n[Quality Check/Test and coverage  ]   | GOSUMDB=\"sum.golang.org\"\n[Quality Check/Test and coverage  ]   | GOTMPDIR=\"\"\n[Quality Check/Test and coverage  ]   | GOTOOLDIR=\"/opt/hostedtoolcache/go/1.20.4/x64/pkg/tool/linux_amd64\"\n[Quality Check/Test and coverage  ]   | GOVCS=\"\"\n[Quality Check/Test and coverage  ]   | GOVERSION=\"go1.20.4\"\n[Quality Check/Test and coverage  ]   | GCCGO=\"gccgo\"\n[Quality Check/Test and coverage  ]   | GOAMD64=\"v1\"\n[Quality Check/Test and coverage  ]   | AR=\"ar\"\n[Quality Check/Test and coverage  ]   | CC=\"gcc\"\n[Quality Check/Test and coverage  ]   | CXX=\"g++\"\n[Quality Check/Test and coverage  ]   | CGO_ENABLED=\"1\"\n[Quality Check/Test and coverage  ]   | GOMOD=\"/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/yitsushi-totp-cli/go.mod\"\n[Quality Check/Test and coverage  ]   | GOWORK=\"\"\n[Quality Check/Test and coverage  ]   | CGO_CFLAGS=\"-O2 -g\"\n[Quality Check/Test and coverage  ]   | CGO_CPPFLAGS=\"\"\n[Quality Check/Test and coverage  ]   | CGO_CXXFLAGS=\"-O2 -g\"\n[Quality Check/Test and coverage  ]   | CGO_FFLAGS=\"-O2 -g\"\n[Quality Check/Test and coverage  ]   | CGO_LDFLAGS=\"-O2 -g\"\n[Quality Check/Test and coverage  ]   | PKG_CONFIG=\"pkg-config\"\n[Quality Check/Test and coverage  ]   | GOGCCFLAGS=\"-fPIC -m64 -pthread -Wl,--no-gc-sections -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build90466431=/tmp/go-build -gno-record-gcc-switches\"\n[Quality Check/Test and coverage  ]   | \n[Quality Check/Test and coverage  ]   \u2753  ::endgroup::\n[Quality Check/Test and coverage  ]   \u2705  Success - Main Set up Go 1.x\n[Quality Check/go vet and lint    ]   | GO111MODULE=\"\"\n[Quality Check/go vet and lint    ]   | GOARCH=\"amd64\"\n[Quality Check/go vet and lint    ]   | GOBIN=\"\"\n[Quality Check/go vet and lint    ]   | GOCACHE=\"/home/runneradmin/.cache/go-build\"\n[Quality Check/go vet and lint    ]   | GOENV=\"/home/runneradmin/.config/go/env\"\n[Quality Check/go vet and lint    ]   | GOEXE=\"\"\n[Quality Check/go vet and lint    ]   | GOEXPERIMENT=\"\"\n[Quality Check/go vet and lint    ]   | GOFLAGS=\"\"\n[Quality Check/go vet and lint    ]   | GOHOSTARCH=\"amd64\"\n[Quality Check/go vet and lint    ]   | GOHOSTOS=\"linux\"\n[Quality Check/go vet and lint    ]   | GOINSECURE=\"\"\n[Quality Check/go vet and lint    ]   | GOMODCACHE=\"/home/runneradmin/go/pkg/mod\"\n[Quality Check/go vet and lint    ]   | GONOPROXY=\"\"\n[Quality Check/go vet and lint    ]   | GONOSUMDB=\"\"\n[Quality Check/go vet and lint    ]   | GOOS=\"linux\"\n[Quality Check/go vet and lint    ]   | GOPATH=\"/home/runneradmin/go\"\n[Quality Check/go vet and lint    ]   | GOPRIVATE=\"\"\n[Quality Check/go vet and lint    ]   | GOPROXY=\"https://proxy.golang.org,direct\"\n[Quality Check/go vet and lint    ]   | GOROOT=\"/opt/hostedtoolcache/go/1.20.4/x64\"\n[Quality Check/go vet and lint    ]   | GOSUMDB=\"sum.golang.org\"\n[Quality Check/go vet and lint    ]   | GOTMPDIR=\"\"\n[Quality Check/go vet and lint    ]   | GOTOOLDIR=\"/opt/hostedtoolcache/go/1.20.4/x64/pkg/tool/linux_amd64\"\n[Quality Check/go vet and lint    ]   | GOVCS=\"\"\n[Quality Check/go vet and lint    ]   | GOVERSION=\"go1.20.4\"\n[Quality Check/go vet and lint    ]   | GCCGO=\"gccgo\"\n[Quality Check/go vet and lint    ]   | GOAMD64=\"v1\"\n[Quality Check/go vet and lint    ]   | AR=\"ar\"\n[Quality Check/go vet and lint    ]   | CC=\"gcc\"\n[Quality Check/go vet and lint    ]   | CXX=\"g++\"\n[Quality Check/go vet and lint    ]   | CGO_ENABLED=\"1\"\n[Quality Check/go vet and lint    ]   | GOMOD=\"/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/yitsushi-totp-cli/go.mod\"\n[Quality Check/go vet and lint    ]   | GOWORK=\"\"\n[Quality Check/go vet and lint    ]   | CGO_CFLAGS=\"-O2 -g\"\n[Quality Check/go vet and lint    ]   | CGO_CPPFLAGS=\"\"\n[Quality Check/go vet and lint    ]   | CGO_CXXFLAGS=\"-O2 -g\"\n[Quality Check/go vet and lint    ]   | CGO_FFLAGS=\"-O2 -g\"\n[Quality Check/go vet and lint    ]   | CGO_LDFLAGS=\"-O2 -g\"\n[Quality Check/go vet and lint    ]   | PKG_CONFIG=\"pkg-config\"\n[Quality Check/go vet and lint    ]   | GOGCCFLAGS=\"-fPIC -m64 -pthread -Wl,--no-gc-sections -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build1615904274=/tmp/go-build -gno-record-gcc-switches\"\n[Quality Check/go vet and lint    ]   | \n[Quality Check/go vet and lint    ]   \u2753  ::endgroup::\n[Quality Check/go vet and lint    ]   \u2705  Success - Main Set up Go 1.x\n[Quality Check/Test and coverage  ]   \u2699  ::set-output:: go-version=1.20.4\n[Quality Check/go vet and lint    ]   \u2699  ::set-output:: go-version=1.20.4\n[Quality Check/go vet and lint    ]   \u2699  ::add-path:: /opt/hostedtoolcache/go/1.20.4/x64/bin\n[Quality Check/go vet and lint    ]   \u2699  ::add-path:: /home/runneradmin/go/bin\n[Quality Check/Test and coverage  ]   \u2699  ::add-path:: /opt/hostedtoolcache/go/1.20.4/x64/bin\n[Quality Check/Test and coverage  ]   \u2699  ::add-path:: /home/runneradmin/go/bin\n[Quality Check/go vet and lint    ] \u2b50 Run Main Get dependencies\n[Quality Check/Test and coverage  ] \u2b50 Run Main Get dependencies\n[Quality Check/Test and coverage  ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/2] user= workdir=\n[Quality Check/go vet and lint    ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/2] user= workdir=\n[Quality Check/golangci lint check]   \ud83d\udcac  ::debug::Checking zstd --version\n[Quality Check/go vet and lint    ]   | go: downloading github.com/stretchr/testify v1.7.1\n[Quality Check/go vet and lint    ]   | go: downloading github.com/kardianos/osext v0.0.0-20190222173326-2bc1f35cddc0\n[Quality Check/go vet and lint    ]   | go: downloading github.com/yitsushi/github-release-check v1.0.1\n[Quality Check/go vet and lint    ]   | go: downloading golang.org/x/term v0.3.0\n[Quality Check/go vet and lint    ]   | go: downloading github.com/yitsushi/go-commander v1.1.0\n[Quality Check/go vet and lint    ]   | go: downloading filippo.io/age v1.1.1\n[Quality Check/golangci lint check]   \ud83d\udcac  ::debug::*** zstd command line interface 64-bits v1.5.0, by Yann Collet ***\n[Quality Check/golangci lint check]   \ud83d\udcac  ::debug::implicitDescendants 'false'\n[Quality Check/golangci lint check]   \ud83d\udcac  ::debug::followSymbolicLinks 'true'\n[Quality Check/golangci lint check]   \ud83d\udcac  ::debug::implicitDescendants 'false'\n[Quality Check/golangci lint check]   \ud83d\udcac  ::debug::omitBrokenSymbolicLinks 'true'\n[Quality Check/golangci lint check]   \ud83d\udcac  ::debug::Search path '/home/runneradmin/.cache/golangci-lint'\n[Quality Check/golangci lint check]   \ud83d\udcac  ::debug::Search path '/home/runneradmin/.cache/go-build'\n[Quality Check/golangci lint check]   \ud83d\udcac  ::debug::Search path '/home/runneradmin/go/pkg'\n[Quality Check/golangci lint check]   \ud83d\udcac  ::debug::Matched: ../../../home/runneradmin/.cache/golangci-lint\n[Quality Check/go vet and lint    ]   | go: downloading gopkg.in/yaml.v3 v3.0.0-20210107192922-496545a6307b\n[Quality Check/golangci lint check]   \ud83d\udcac  ::debug::Matched: ../../../home/runneradmin/.cache/go-build\n[Quality Check/golangci lint check]   \ud83d\udcac  ::debug::Matched: ../../../home/runneradmin/go/pkg\n[Quality Check/golangci lint check]   \ud83d\udcac  ::debug::Cache Paths:\n[Quality Check/golangci lint check]   \ud83d\udcac  ::debug::[\"../../../home/runneradmin/.cache/golangci-lint\",\"../../../home/runneradmin/.cache/go-build\",\"../../../home/runneradmin/go/pkg\"]\n[Quality Check/golangci lint check]   \ud83d\udcac  ::debug::Archive Path: /tmp/d86b5c19-279f-4404-9da0-8754f5076171/cache.tzst\n[Quality Check/golangci lint check]   | [command]/usr/bin/tar --posix -cf cache.tzst --exclude cache.tzst -P -C /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/yitsushi-totp-cli --files-from manifest.txt --use-compress-program zstdmt\n[Quality Check/go vet and lint    ]   | go: downloading golang.org/x/sys v0.6.0\n[Quality Check/go vet and lint    ]   | go: downloading github.com/mitchellh/go-homedir v1.1.0\n[Quality Check/go vet and lint    ]   | go: downloading github.com/davecgh/go-spew v1.1.1\n[Quality Check/go vet and lint    ]   | go: downloading github.com/pmezard/go-difflib v1.0.0\n[Quality Check/go vet and lint    ]   | go: downloading golang.org/x/crypto v0.4.0\n[Quality Check/Test and coverage  ]   | go: downloading github.com/yitsushi/go-commander v1.1.0\n[Quality Check/Test and coverage  ]   | go: downloading golang.org/x/term v0.3.0\n[Quality Check/Test and coverage  ]   | go: downloading gopkg.in/yaml.v3 v3.0.0-20210107192922-496545a6307b\n[Quality Check/Test and coverage  ]   | go: downloading github.com/yitsushi/github-release-check v1.0.1\n[Quality Check/Test and coverage  ]   | go: downloading github.com/kardianos/osext v0.0.0-20190222173326-2bc1f35cddc0\n[Quality Check/Test and coverage  ]   | go: downloading filippo.io/age v1.1.1\n[Quality Check/Test and coverage  ]   | go: downloading github.com/stretchr/testify v1.7.1\n[Quality Check/Test and coverage  ]   | go: downloading golang.org/x/sys v0.6.0\n[Quality Check/Test and coverage  ]   | go: downloading github.com/mitchellh/go-homedir v1.1.0\n[Quality Check/Test and coverage  ]   | go: downloading github.com/davecgh/go-spew v1.1.1\n[Quality Check/Test and coverage  ]   | go: downloading github.com/pmezard/go-difflib v1.0.0\n[Quality Check/Test and coverage  ]   | go: downloading golang.org/x/crypto v0.4.0\n[Quality Check/golangci lint check]   \ud83d\udcac  ::debug::File Size: 8332046\n[Quality Check/golangci lint check]   \ud83d\udcac  ::debug::Reserving Cache\n[Quality Check/golangci lint check]   \ud83d\udcac  ::debug::reserveCache - Attempt 1 of 2 failed with error: Cache Service Url not found, unable to restore cache.\n[Quality Check/Test and coverage  ]   \u2705  Success - Main Get dependencies\n[Quality Check/go vet and lint    ]   | go: downloading golang.org/x/lint v0.0.0-20210508222113-6edffad5e616\n[Quality Check/go vet and lint    ]   | go: downloading golang.org/x/tools v0.0.0-20200130002326-2f3ba24bd6e7\n[Quality Check/Test and coverage  ] \u2b50 Run Main go test\n[Quality Check/golangci lint check]   \ud83d\udcac  ::debug::reserveCache - Attempt 2 of 2 failed with error: Cache Service Url not found, unable to restore cache.\n[Quality Check/Test and coverage  ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/3] user= workdir=\n[Quality Check/golangci lint check]   \ud83d\udea7  ::warning::Failed to save: reserveCache failed: Cache Service Url not found, unable to restore cache.\n[Quality Check/golangci lint check]   | Saved cache for golangci-lint from paths '/home/runneradmin/.cache/golangci-lint, /home/runneradmin/.cache/go-build, /home/runneradmin/go/pkg, zstd-without-long, 1.0' in 10961ms\n[Quality Check/golangci lint check]   \u2705  Success - Post golangci-lint\n[Quality Check/golangci lint check]   \u2699  ::set-env:: MSYS=winsymlinks:nativestrict\n[Quality Check/go vet and lint    ]   \u2705  Success - Main Get dependencies\n[Quality Check/go vet and lint    ] \u2b50 Run Main go vet\n[Quality Check/go vet and lint    ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/3] user= workdir=\n[Quality Check/golangci lint check] \ud83c\udfc1  Job failed\n[Quality Check/go vet and lint    ]   \u2705  Success - Main go vet\n[Quality Check/go vet and lint    ] \u2b50 Run Main go lint\n[Quality Check/Test and coverage  ]   | ?   \tgithub.com/yitsushi/totp-cli\t[no test files]\n[Quality Check/go vet and lint    ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/4] user= workdir=\n[Quality Check/Test and coverage  ]   | ?   \tgithub.com/yitsushi/totp-cli/internal/info\t[no test files]\n[Quality Check/Test and coverage  ]   | === RUN   TestCheckPasswordConfirm\n[Quality Check/Test and coverage  ]   | --- PASS: TestCheckPasswordConfirm (0.00s)\n[Quality Check/Test and coverage  ]   | PASS\n[Quality Check/Test and coverage  ]   | \tgithub.com/yitsushi/totp-cli/internal/cmd\tcoverage: 3.2% of statements\n[Quality Check/Test and coverage  ]   | ok  \tgithub.com/yitsushi/totp-cli/internal/cmd\t0.063s\tcoverage: 3.2% of statements\n[Quality Check/Test and coverage  ]   | === RUN   TestGenerateOTPCode\n[Quality Check/Test and coverage  ]   | --- PASS: TestGenerateOTPCode (0.00s)\n[Quality Check/Test and coverage  ]   | === RUN   TestGenerateOTPCode_SpaceSeparatedToken\n[Quality Check/Test and coverage  ]   | --- PASS: TestGenerateOTPCode_SpaceSeparatedToken (0.00s)\n[Quality Check/Test and coverage  ]   | === RUN   TestGenerateOTPCode_NonPaddedHashes\n[Quality Check/Test and coverage  ]   | --- PASS: TestGenerateOTPCode_NonPaddedHashes (0.00s)\n[Quality Check/Test and coverage  ]   | === RUN   TestGenerateOTPCode_InvaidPadding\n[Quality Check/Test and coverage  ]   | --- PASS: TestGenerateOTPCode_InvaidPadding (0.00s)\n[Quality Check/Test and coverage  ]   | === RUN   TestUnsecureSHA1\n[Quality Check/Test and coverage  ]   | --- PASS: TestUnsecureSHA1 (0.00s)\n[Quality Check/Test and coverage  ]   | PASS\n[Quality Check/Test and coverage  ]   | \tgithub.com/yitsushi/totp-cli/internal/security\tcoverage: 95.8% of statements\n[Quality Check/Test and coverage  ]   | ok  \tgithub.com/yitsushi/totp-cli/internal/security\t0.051s\tcoverage: 95.8% of statements\n[Quality Check/Test and coverage  ]   | === RUN   TestFindAccount\n[Quality Check/Test and coverage  ]   | --- PASS: TestFindAccount (0.00s)\n[Quality Check/Test and coverage  ]   | === RUN   TestFindAccount_NotFound\n[Quality Check/Test and coverage  ]   | --- PASS: TestFindAccount_NotFound (0.00s)\n[Quality Check/Test and coverage  ]   | === RUN   TestDeleteAccount\n[Quality Check/Test and coverage  ]   | --- PASS: TestDeleteAccount (0.00s)\n[Quality Check/Test and coverage  ]   | === RUN   TestFindNamespace\n[Quality Check/Test and coverage  ]   | --- PASS: TestFindNamespace (0.00s)\n[Quality Check/Test and coverage  ]   | === RUN   TestFindNamespace_NotFound\n[Quality Check/Test and coverage  ]   | --- PASS: TestFindNamespace_NotFound (0.00s)\n[Quality Check/Test and coverage  ]   | === RUN   TestDeleteNamespace\n[Quality Check/Test and coverage  ]   | --- PASS: TestDeleteNamespace (0.00s)\n[Quality Check/Test and coverage  ]   | PASS\n[Quality Check/Test and coverage  ]   | \tgithub.com/yitsushi/totp-cli/internal/storage\tcoverage: 17.4% of statements\n[Quality Check/Test and coverage  ]   | ok  \tgithub.com/yitsushi/totp-cli/internal/storage\t0.064s\tcoverage: 17.4% of statements\n[Quality Check/Test and coverage  ]   | === RUN   TestTerminal_Read\n[Quality Check/Test and coverage  ]   | --- PASS: TestTerminal_Read (0.00s)\n[Quality Check/Test and coverage  ]   | === RUN   TestTerminal_Confirm\n[Quality Check/Test and coverage  ]   | --- PASS: TestTerminal_Confirm (0.00s)\n[Quality Check/Test and coverage  ]   | === RUN   TestTerminal_Hidden\n[Quality Check/Test and coverage  ]   | --- PASS: TestTerminal_Hidden (0.00s)\n[Quality Check/Test and coverage  ]   | PASS\n[Quality Check/Test and coverage  ]   | \tgithub.com/yitsushi/totp-cli/internal/terminal\tcoverage: 88.0% of statements\n[Quality Check/Test and coverage  ]   | ok  \tgithub.com/yitsushi/totp-cli/internal/terminal\t0.067s\tcoverage: 88.0% of statements\n[Quality Check/Test and coverage  ]   \u2705  Success - Main go test\n[Quality Check/Test and coverage  ] \u2b50 Run Main Convert coverage.out to coverage.lcov\n[Quality Check/Test and coverage  ]   \ud83d\udc33  docker cp src=/home/andre-silva/.cache/act/jandelgado-gcov2lcov-action@v1.0.9/ dst=/var/run/act/actions/jandelgado-gcov2lcov-action@v1.0.9/\n[Quality Check/Test and coverage  ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /var/run/act/actions/jandelgado-gcov2lcov-action@v1.0.9/] user=0 workdir=\n[Quality Check/go vet and lint    ]   \u2705  Success - Main go lint\n[Quality Check/Test and coverage  ] \u2b50 Run Main set -x && curl -sLf \"$([ latest == latest ] && echo $LATEST_RELEASE || echo $RELEASE)/${NAME}.tar.gz\" | tar zxf - --strip 1\n[Quality Check/go vet and lint    ] \u2b50 Run Post Set up Go 1.x\n[Quality Check/go vet and lint    ]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/actions-setup-go@v3/dist/cache-save/index.js] user= workdir=\n[Quality Check/Test and coverage  ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/4-composite-0.sh] user= workdir=/tmp\n[Quality Check/Test and coverage  ]   | + tar zxf - --strip 1\n[Quality Check/Test and coverage  ]   | ++ '[' latest == latest ']'\n[Quality Check/Test and coverage  ]   | ++ echo https://github.com/jandelgado/gcov2lcov/releases/latest/download\n[Quality Check/Test and coverage  ]   | + curl -sLf https://github.com/jandelgado/gcov2lcov/releases/latest/download/gcov2lcov-linux-amd64.tar.gz\n[Quality Check/go vet and lint    ]   \u2705  Success - Post Set up Go 1.x\n[Quality Check/Test and coverage  ]   \u2705  Success - Main set -x && curl -sLf \"$([ latest == latest ] && echo $LATEST_RELEASE || echo $RELEASE)/${NAME}.tar.gz\" | tar zxf - --strip 1\n[Quality Check/Test and coverage  ] \u2b50 Run Main set -x && GOROOT=$(go env GOROOT) /tmp/gcov2lcov-linux-amd64 -infile \"coverage.out\" -outfile \"coverage.lcov\"\n[Quality Check/Test and coverage  ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/4-composite-1.sh] user= workdir=\n[Quality Check/Test and coverage  ]   | ++ go env GOROOT\n[Quality Check/Test and coverage  ]   | + GOROOT=/opt/hostedtoolcache/go/1.20.4/x64\n[Quality Check/Test and coverage  ]   | + /tmp/gcov2lcov-linux-amd64 -infile coverage.out -outfile coverage.lcov\n[Quality Check/go vet and lint    ] \ud83c\udfc1  Job succeeded\n[Quality Check/Test and coverage  ]   \u2705  Success - Main set -x && GOROOT=$(go env GOROOT) /tmp/gcov2lcov-linux-amd64 -infile \"coverage.out\" -outfile \"coverage.lcov\"\n[Quality Check/Test and coverage  ]   \u2705  Success - Main Convert coverage.out to coverage.lcov\n[Quality Check/Test and coverage  ] \u2b50 Run Main Coveralls\n[Quality Check/Test and coverage  ]   \ud83d\udc33  docker cp src=/home/andre-silva/.cache/act/coverallsapp-github-action@master/ dst=/var/run/act/actions/coverallsapp-github-action@master/\n[Quality Check/Test and coverage  ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /var/run/act/actions/coverallsapp-github-action@master/] user=0 workdir=\n[Quality Check/Test and coverage  ] Get \"http://%2Fvar%2Frun%2Fdocker.sock/v1.41/images/crawlergpt:latest/json\": context canceled\n",
    "actions_stderr": "panic: runtime error: invalid memory address or nil pointer dereference\n[signal SIGSEGV: segmentation violation code=0x1 addr=0x48 pc=0xa13542]\n\ngoroutine 308 [running]:\ngithub.com/nektos/act/pkg/container.(*containerReference).extractFromImageEnv.func1({0xd3dd88, 0xc00049bb60})\n\t/home/runner/work/act/act/pkg/container/docker_run.go:468 +0x1e2\ngithub.com/nektos/act/pkg/common.Executor.IfNot.func1({0xd3dd88, 0xc00049bb60})\n\t/home/runner/work/act/act/pkg/common/executor.go:159 +0x56\ngithub.com/nektos/act/pkg/runner.(*RunContext).ApplyExtraPath(0xc0005a8c00, {0xd3dd88, 0xc00049bb60}, 0xc00001a128)\n\t/home/runner/work/act/act/pkg/runner/run_context.go:305 +0x12b\ngithub.com/nektos/act/pkg/runner.runActionImpl.func1({0xd3dd88, 0xc00049bb60})\n\t/home/runner/work/act/act/pkg/runner/action.go:159 +0x71d\ngithub.com/nektos/act/pkg/runner.(*stepActionRemote).main.func1({0xd3dd88, 0xc00049bb60})\n\t/home/runner/work/act/act/pkg/runner/step_action_remote.go:127 +0x3cf\ngithub.com/nektos/act/pkg/runner.runStepExecutor.func1({0xd3dd88, 0xc00049bb60})\n\t/home/runner/work/act/act/pkg/runner/step.go:137 +0xd39\ngithub.com/nektos/act/pkg/common.Executor.Then.func1({0xd3dd88, 0xc00049bb60})\n\t/home/runner/work/act/act/pkg/common/executor.go:141 +0x15b\ngithub.com/nektos/act/pkg/runner.newJobExecutor.func4({0xd3dd88, 0xc00049bb60})\n\t/home/runner/work/act/act/pkg/runner/job_executor.go:77 +0x5a\ngithub.com/nektos/act/pkg/runner.useStepLogger.func1({0xd3dd88, 0xc0005ce930})\n\t/home/runner/work/act/act/pkg/runner/job_executor.go:191 +0x39e\ngithub.com/nektos/act/pkg/common.Executor.Then.func1({0xd3dd88, 0xc0005ce930})\n\t/home/runner/work/act/act/pkg/common/executor.go:141 +0x15b\ngithub.com/nektos/act/pkg/common.Executor.Finally.func1({0xd3dd88, 0xc0005ce930})\n\t/home/runner/work/act/act/pkg/common/executor.go:175 +0x34\ngithub.com/nektos/act/pkg/common.Executor.Finally.func1({0xd3dd88, 0xc0005ce930})\n\t/home/runner/work/act/act/pkg/common/executor.go:175 +0x34\ngithub.com/nektos/act/pkg/common.Executor.Finally.func1({0xd3dd88, 0xc0005ce930})\n\t/home/runner/work/act/act/pkg/common/executor.go:175 +0x34\ngithub.com/nektos/act/pkg/common.Executor.Then.func1({0xd3dd88, 0xc0005ce930})\n\t/home/runner/work/act/act/pkg/common/executor.go:141 +0x15b\ngithub.com/nektos/act/pkg/runner.(*RunContext).Executor.func1({0xd3dd88, 0xc0005ce930})\n\t/home/runner/work/act/act/pkg/runner/run_context.go:442 +0x58\ngithub.com/nektos/act/pkg/runner.(*runnerImpl).NewPlanExecutor.func1.1({0xd3dd88, 0xc00025cb70})\n\t/home/runner/work/act/act/pkg/runner/runner.go:145 +0x193\ngithub.com/nektos/act/pkg/common.NewParallelExecutor.func1.1(0x0?, 0x0?)\n\t/home/runner/work/act/act/pkg/common/executor.go:100 +0x5c\ncreated by github.com/nektos/act/pkg/common.NewParallelExecutor.func1\n\t/home/runner/work/act/act/pkg/common/executor.go:98 +0x89\n"
}