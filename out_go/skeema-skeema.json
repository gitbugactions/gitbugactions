{
    "repository": "skeema/skeema",
    "clone_url": "https://github.com/skeema/skeema.git",
    "timestamp": "2023-05-30T12:02:39.327712Z",
    "clone_success": true,
    "number of actions": 1,
    "number_of_test_actions": 1,
    "actions_successful": false,
    "actions_stdout": "[Tests/Check code quality and run tests] \ud83d\ude80  Start image=crawlergpt:latest\n[Tests/Check code quality and run tests]   \ud83d\udc33  docker pull image=crawlergpt:latest platform= username= forcePull=false\n[Tests/Check code quality and run tests]   \ud83d\udc33  docker create image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[Tests/Check code quality and run tests]   \ud83d\udc33  docker run image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[Tests/Check code quality and run tests]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/skeema-skeema] user=0 workdir=\n[Tests/Check code quality and run tests]   \u2601  git clone 'https://github.com/actions/setup-go' # ref=v3\n[Tests/Check code quality and run tests] \u2b50 Run Main Set up Go\n[Tests/Check code quality and run tests]   \ud83d\udc33  docker cp src=/home/andre-silva/.cache/act/actions-setup-go@v3/ dst=/var/run/act/actions/actions-setup-go@v3/\n[Tests/Check code quality and run tests]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /var/run/act/actions/actions-setup-go@v3/] user=0 workdir=\n[Tests/Check code quality and run tests]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/actions-setup-go@v3/dist/setup/index.js] user= workdir=\n[Tests/Check code quality and run tests]   | Setup go version spec 1.19\n[Tests/Check code quality and run tests]   \ud83d\udcac  ::debug::isExplicit: \n[Tests/Check code quality and run tests]   \ud83d\udcac  ::debug::explicit? false\n[Tests/Check code quality and run tests]   \ud83d\udcac  ::debug::isExplicit: 1.14.15\n[Tests/Check code quality and run tests]   \ud83d\udcac  ::debug::explicit? true\n[Tests/Check code quality and run tests]   \ud83d\udcac  ::debug::isExplicit: 1.15.15\n[Tests/Check code quality and run tests]   \ud83d\udcac  ::debug::explicit? true\n[Tests/Check code quality and run tests]   \ud83d\udcac  ::debug::isExplicit: 1.16.7\n[Tests/Check code quality and run tests]   \ud83d\udcac  ::debug::explicit? true\n[Tests/Check code quality and run tests]   \ud83d\udcac  ::debug::evaluating 3 versions\n[Tests/Check code quality and run tests]   \ud83d\udcac  ::debug::match not found\n[Tests/Check code quality and run tests]   | Attempting to download 1.19...\n[Tests/Check code quality and run tests]   \ud83d\udcac  ::debug::No manifest cached\n[Tests/Check code quality and run tests]   | API rate limit exceeded for 130.242.72.40. (But here's the good news: Authenticated requests get a higher rate limit. Check out the documentation for more details.)\n[Tests/Check code quality and run tests]   \ud83d\udcac  ::debug::HttpClientError: API rate limit exceeded for 130.242.72.40. (But here's the good news: Authenticated requests get a higher rate limit. Check out the documentation for more details.)%0A    at /run/act/actions/actions-setup-go@v3/dist/setup/index.js:8612:27%0A    at processTicksAndRejections (internal/process/task_queues.js:95:5)\n[Tests/Check code quality and run tests]   | Falling back to download directly from Go\n[Tests/Check code quality and run tests]   \ud83d\udcac  ::debug::check 1.20.4 satisfies 1.19\n[Tests/Check code quality and run tests]   \ud83d\udcac  ::debug::check 1.20.3 satisfies 1.19\n[Tests/Check code quality and run tests]   \ud83d\udcac  ::debug::check 1.20.2 satisfies 1.19\n[Tests/Check code quality and run tests]   \ud83d\udcac  ::debug::check 1.20.1 satisfies 1.19\n[Tests/Check code quality and run tests]   \ud83d\udcac  ::debug::check 1.20.0 satisfies 1.19\n[Tests/Check code quality and run tests]   \ud83d\udcac  ::debug::check 1.20.0-rc.3 satisfies 1.19\n[Tests/Check code quality and run tests]   \ud83d\udcac  ::debug::check 1.20.0-rc.2 satisfies 1.19\n[Tests/Check code quality and run tests]   \ud83d\udcac  ::debug::check 1.20.0-rc.1 satisfies 1.19\n[Tests/Check code quality and run tests]   \ud83d\udcac  ::debug::check 1.19.9 satisfies 1.19\n[Tests/Check code quality and run tests]   \ud83d\udcac  ::debug::===amd64 && ===linux\n[Tests/Check code quality and run tests]   \ud83d\udcac  ::debug::amd64===amd64 && darwin===linux\n[Tests/Check code quality and run tests]   \ud83d\udcac  ::debug::amd64===amd64 && darwin===linux\n[Tests/Check code quality and run tests]   \ud83d\udcac  ::debug::arm64===amd64 && darwin===linux\n[Tests/Check code quality and run tests]   \ud83d\udcac  ::debug::arm64===amd64 && darwin===linux\n[Tests/Check code quality and run tests]   \ud83d\udcac  ::debug::386===amd64 && freebsd===linux\n[Tests/Check code quality and run tests]   \ud83d\udcac  ::debug::amd64===amd64 && freebsd===linux\n[Tests/Check code quality and run tests]   \ud83d\udcac  ::debug::386===amd64 && linux===linux\n[Tests/Check code quality and run tests]   \ud83d\udcac  ::debug::amd64===amd64 && linux===linux\n[Tests/Check code quality and run tests]   \ud83d\udcac  ::debug::matched go1.19.9\n[Tests/Check code quality and run tests]   | Install from dist\n[Tests/Check code quality and run tests]   | Acquiring go1.19.9 from https://storage.googleapis.com/golang/go1.19.9.linux-amd64.tar.gz\n[Tests/Check code quality and run tests]   \ud83d\udcac  ::debug::Downloading https://storage.googleapis.com/golang/go1.19.9.linux-amd64.tar.gz\n[Tests/Check code quality and run tests]   \ud83d\udcac  ::debug::Destination /tmp/5ade0c4d-9aac-451d-a78c-06ce011e5e9c\n[Tests/Check code quality and run tests]   \ud83d\udcac  ::debug::download complete\n[Tests/Check code quality and run tests]   | Extracting Go...\n[Tests/Check code quality and run tests]   \ud83d\udcac  ::debug::Checking tar --version\n[Tests/Check code quality and run tests]   \ud83d\udcac  ::debug::tar (GNU tar) 1.30%0ACopyright (C) 2017 Free Software Foundation, Inc.%0ALicense GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.%0AThis is free software: you are free to change and redistribute it.%0AThere is NO WARRANTY, to the extent permitted by law.%0A%0AWritten by John Gilmore and Jay Fenlason.\n[Tests/Check code quality and run tests]   | [command]/usr/bin/tar xz --warning=no-unknown-keyword --overwrite -C /tmp/757afc9d-9979-4900-9bdd-93e818b61277 -f /tmp/5ade0c4d-9aac-451d-a78c-06ce011e5e9c\n[Tests/Check code quality and run tests]   | Successfully extracted go to /tmp/757afc9d-9979-4900-9bdd-93e818b61277\n[Tests/Check code quality and run tests]   | Adding to the cache ...\n[Tests/Check code quality and run tests]   \ud83d\udcac  ::debug::Caching tool go 1.19.9 x64\n[Tests/Check code quality and run tests]   \ud83d\udcac  ::debug::source dir: /tmp/757afc9d-9979-4900-9bdd-93e818b61277/go\n[Tests/Check code quality and run tests]   \ud83d\udcac  ::debug::destination /opt/hostedtoolcache/go/1.19.9/x64\n[Tests/Check code quality and run tests]   \ud83d\udcac  ::debug::finished caching tool\n[Tests/Check code quality and run tests]   | Successfully cached go to /opt/hostedtoolcache/go/1.19.9/x64\n[Tests/Check code quality and run tests]   | Added go to the path\n[Tests/Check code quality and run tests]   \ud83d\udcac  ::debug::which go :/opt/hostedtoolcache/go/1.19.9/x64/bin/go:\n[Tests/Check code quality and run tests]   \ud83d\udcac  ::debug::go env GOPATH :/home/runneradmin/go:\n[Tests/Check code quality and run tests]   \ud83d\udcac  ::debug::creating /home/runneradmin/go\n[Tests/Check code quality and run tests]   \ud83d\udcac  ::debug::creating /home/runneradmin/go/bin\n[Tests/Check code quality and run tests]   \ud83d\udcac  ::debug::add bin true\n[Tests/Check code quality and run tests]   | Successfully set up Go version 1.19\n[Tests/Check code quality and run tests]   \u2753 add-matcher /run/act/actions/actions-setup-go@v3/matchers.json\n[Tests/Check code quality and run tests]   | go version go1.19.9 linux/amd64\n[Tests/Check code quality and run tests]   | \n[Tests/Check code quality and run tests]   \u2753  ::group::go env\n[Tests/Check code quality and run tests]   | GO111MODULE=\"\"\n[Tests/Check code quality and run tests]   | GOARCH=\"amd64\"\n[Tests/Check code quality and run tests]   | GOBIN=\"\"\n[Tests/Check code quality and run tests]   | GOCACHE=\"/home/runneradmin/.cache/go-build\"\n[Tests/Check code quality and run tests]   | GOENV=\"/home/runneradmin/.config/go/env\"\n[Tests/Check code quality and run tests]   | GOEXE=\"\"\n[Tests/Check code quality and run tests]   | GOEXPERIMENT=\"\"\n[Tests/Check code quality and run tests]   | GOFLAGS=\"\"\n[Tests/Check code quality and run tests]   | GOHOSTARCH=\"amd64\"\n[Tests/Check code quality and run tests]   | GOHOSTOS=\"linux\"\n[Tests/Check code quality and run tests]   | GOINSECURE=\"\"\n[Tests/Check code quality and run tests]   | GOMODCACHE=\"/home/runneradmin/go/pkg/mod\"\n[Tests/Check code quality and run tests]   | GONOPROXY=\"\"\n[Tests/Check code quality and run tests]   | GONOSUMDB=\"\"\n[Tests/Check code quality and run tests]   | GOOS=\"linux\"\n[Tests/Check code quality and run tests]   | GOPATH=\"/home/runneradmin/go\"\n[Tests/Check code quality and run tests]   | GOPRIVATE=\"\"\n[Tests/Check code quality and run tests]   | GOPROXY=\"https://proxy.golang.org,direct\"\n[Tests/Check code quality and run tests]   | GOROOT=\"/opt/hostedtoolcache/go/1.19.9/x64\"\n[Tests/Check code quality and run tests]   | GOSUMDB=\"sum.golang.org\"\n[Tests/Check code quality and run tests]   | GOTMPDIR=\"\"\n[Tests/Check code quality and run tests]   | GOTOOLDIR=\"/opt/hostedtoolcache/go/1.19.9/x64/pkg/tool/linux_amd64\"\n[Tests/Check code quality and run tests]   | GOVCS=\"\"\n[Tests/Check code quality and run tests]   | GOVERSION=\"go1.19.9\"\n[Tests/Check code quality and run tests]   | GCCGO=\"gccgo\"\n[Tests/Check code quality and run tests]   | GOAMD64=\"v1\"\n[Tests/Check code quality and run tests]   | AR=\"ar\"\n[Tests/Check code quality and run tests]   | CC=\"gcc\"\n[Tests/Check code quality and run tests]   | CXX=\"g++\"\n[Tests/Check code quality and run tests]   | CGO_ENABLED=\"1\"\n[Tests/Check code quality and run tests]   | GOMOD=\"/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/skeema-skeema/go.mod\"\n[Tests/Check code quality and run tests]   | GOWORK=\"\"\n[Tests/Check code quality and run tests]   | CGO_CFLAGS=\"-g -O2\"\n[Tests/Check code quality and run tests]   | CGO_CPPFLAGS=\"\"\n[Tests/Check code quality and run tests]   | CGO_CXXFLAGS=\"-g -O2\"\n[Tests/Check code quality and run tests]   | CGO_FFLAGS=\"-g -O2\"\n[Tests/Check code quality and run tests]   | CGO_LDFLAGS=\"-g -O2\"\n[Tests/Check code quality and run tests]   | PKG_CONFIG=\"pkg-config\"\n[Tests/Check code quality and run tests]   | GOGCCFLAGS=\"-fPIC -m64 -pthread -Wl,--no-gc-sections -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build87924916=/tmp/go-build -gno-record-gcc-switches\"\n[Tests/Check code quality and run tests]   | \n[Tests/Check code quality and run tests]   \u2753  ::endgroup::\n[Tests/Check code quality and run tests]   \u2705  Success - Main Set up Go\n[Tests/Check code quality and run tests]   \u2699  ::set-output:: go-version=1.19.9\n[Tests/Check code quality and run tests]   \u2699  ::add-path:: /opt/hostedtoolcache/go/1.19.9/x64/bin\n[Tests/Check code quality and run tests]   \u2699  ::add-path:: /home/runneradmin/go/bin\n[Tests/Check code quality and run tests] \u2b50 Run Main Check out code\n[Tests/Check code quality and run tests]   \u2705  Success - Main Check out code\n[Tests/Check code quality and run tests] \u2b50 Run Main Run gofmt\n[Tests/Check code quality and run tests]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/2] user= workdir=\n[Tests/Check code quality and run tests]   \u2705  Success - Main Run gofmt\n[Tests/Check code quality and run tests] \u2b50 Run Main Run go vet\n[Tests/Check code quality and run tests]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/3] user= workdir=\n[Tests/Check code quality and run tests]   \u2705  Success - Main Run go vet\n[Tests/Check code quality and run tests] \u2b50 Run Main Run tests\n[Tests/Check code quality and run tests]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/4] user= workdir=\n[Tests/Check code quality and run tests]   | === RUN   TestExitCode\n[Tests/Check code quality and run tests]   | --- PASS: TestExitCode (0.00s)\n[Tests/Check code quality and run tests]   | === RUN   TestExitValueError\n[Tests/Check code quality and run tests]   | --- PASS: TestExitValueError (0.00s)\n[Tests/Check code quality and run tests]   | === RUN   TestHighestExitCode\n[Tests/Check code quality and run tests]   | --- PASS: TestHighestExitCode (0.00s)\n[Tests/Check code quality and run tests]   | === RUN   TestExit\n[Tests/Check code quality and run tests]   | 2023-05-30 12:09:07 [\u001b[31;1mERROR\u001b[0m] errors that don't implement ExitCoder are all treated as fatal error\n[Tests/Check code quality and run tests]   | 2023-05-30 12:09:07 [\u001b[31;1mERROR\u001b[0m] bad config\n[Tests/Check code quality and run tests]   | --- PASS: TestExit (0.00s)\n[Tests/Check code quality and run tests]   | === RUN   TestPanicHandler\n[Tests/Check code quality and run tests]   | 2023-05-30 12:09:07 [\u001b[31;1mERROR\u001b[0m] Uncaught panic in github.com/skeema/skeema.TestPanicHandler at /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/skeema-skeema/exit_test.go:100: If this test passes, this was actually caught properly, don't worry about the surrounding text\n[Tests/Check code quality and run tests]   | This situation indicates a bug in Skeema. Use --debug to view full stack trace.\n[Tests/Check code quality and run tests]   | Please file an issue report at https://github.com/skeema/skeema/issues with any available background information.\n[Tests/Check code quality and run tests]   | --- PASS: TestPanicHandler (0.00s)\n[Tests/Check code quality and run tests]   | === RUN   TestIntegration\n[Tests/Check code quality and run tests]   |     testing.go:47: RunSuite SkeemaIntegrationSuite: Setup(mysql:5.7) failed: Get \"http://unix.sock/containers/skeema-test-mysql-5.7/json?\": dial unix /var/run/docker.sock: connect: permission denied\n[Tests/Check code quality and run tests]   | --- FAIL: TestIntegration (0.00s)\n[Tests/Check code quality and run tests]   | FAIL\n[Tests/Check code quality and run tests]   | coverage: 4.6% of statements in ./...\n[Tests/Check code quality and run tests]   | FAIL\tgithub.com/skeema/skeema\t0.036s\n[Tests/Check code quality and run tests]   | === RUN   TestResultMerge\n[Tests/Check code quality and run tests]   | --- PASS: TestResultMerge (0.00s)\n[Tests/Check code quality and run tests]   | === RUN   TestIntegration\n[Tests/Check code quality and run tests]   |     testing.go:47: RunSuite ApplierIntegrationSuite: Setup(mysql:5.7) failed: Get \"http://unix.sock/containers/skeema-test-mysql-5.7-2/json?\": dial unix /var/run/docker.sock: connect: permission denied\n[Tests/Check code quality and run tests]   | --- FAIL: TestIntegration (0.00s)\n[Tests/Check code quality and run tests]   | FAIL\n[Tests/Check code quality and run tests]   | coverage: 3.5% of statements in ./...\n[Tests/Check code quality and run tests]   | FAIL\tgithub.com/skeema/skeema/internal/applier\t0.039s\n[Tests/Check code quality and run tests]   | === RUN   TestOptionsIgnore\n[Tests/Check code quality and run tests]   | --- PASS: TestOptionsIgnore (0.00s)\n[Tests/Check code quality and run tests]   | === RUN   TestIntegration\n[Tests/Check code quality and run tests]   |     testing.go:47: RunSuite IntegrationSuite: Setup(mysql:5.7) failed: Get \"http://unix.sock/containers/skeema-test-mysql-5.7/json?\": dial unix /var/run/docker.sock: connect: permission denied\n[Tests/Check code quality and run tests]   | --- FAIL: TestIntegration (0.00s)\n[Tests/Check code quality and run tests]   | FAIL\n[Tests/Check code quality and run tests]   | coverage: 3.7% of statements in ./...\n[Tests/Check code quality and run tests]   | FAIL\tgithub.com/skeema/skeema/internal/dumper\t0.033s\n[Tests/Check code quality and run tests]   | === RUN   TestParseDir\n[Tests/Check code quality and run tests]   | --- PASS: TestParseDir (0.00s)\n[Tests/Check code quality and run tests]   | === RUN   TestParseDirErrors\n[Tests/Check code quality and run tests]   | --- PASS: TestParseDirErrors (0.00s)\n[Tests/Check code quality and run tests]   | === RUN   TestParseDirSymlinks\n[Tests/Check code quality and run tests]   | --- PASS: TestParseDirSymlinks (0.01s)\n[Tests/Check code quality and run tests]   | === RUN   TestParseDirNamedSchemas\n[Tests/Check code quality and run tests]   | --- PASS: TestParseDirNamedSchemas (0.01s)\n[Tests/Check code quality and run tests]   | === RUN   TestDirGenerator\n[Tests/Check code quality and run tests]   | --- PASS: TestDirGenerator (0.00s)\n[Tests/Check code quality and run tests]   | === RUN   TestDirNamedSchemaStatements\n[Tests/Check code quality and run tests]   | --- PASS: TestDirNamedSchemaStatements (0.00s)\n[Tests/Check code quality and run tests]   | === RUN   TestParseDirNoSchemas\n[Tests/Check code quality and run tests]   | --- PASS: TestParseDirNoSchemas (0.00s)\n[Tests/Check code quality and run tests]   | === RUN   TestParseDirUnterminated\n[Tests/Check code quality and run tests]   | --- PASS: TestParseDirUnterminated (0.00s)\n[Tests/Check code quality and run tests]   | === RUN   TestParseDirUnparsedStatements\n[Tests/Check code quality and run tests]   | --- PASS: TestParseDirUnparsedStatements (0.00s)\n[Tests/Check code quality and run tests]   | === RUN   TestParseDirRedundantDelimiter\n[Tests/Check code quality and run tests]   | --- PASS: TestParseDirRedundantDelimiter (0.00s)\n[Tests/Check code quality and run tests]   | === RUN   TestParseDirCreateSelect\n[Tests/Check code quality and run tests]   | --- PASS: TestParseDirCreateSelect (0.00s)\n[Tests/Check code quality and run tests]   | === RUN   TestParseDirBOM\n[Tests/Check code quality and run tests]   | --- PASS: TestParseDirBOM (0.00s)\n[Tests/Check code quality and run tests]   | === RUN   TestParseDirIgnorePatterns\n[Tests/Check code quality and run tests]   | --- PASS: TestParseDirIgnorePatterns (0.00s)\n[Tests/Check code quality and run tests]   | === RUN   TestDirBaseName\n[Tests/Check code quality and run tests]   | --- PASS: TestDirBaseName (0.00s)\n[Tests/Check code quality and run tests]   | === RUN   TestDirRelPath\n[Tests/Check code quality and run tests]   | --- PASS: TestDirRelPath (0.00s)\n[Tests/Check code quality and run tests]   | === RUN   TestDirSubdirs\n[Tests/Check code quality and run tests]   | --- PASS: TestDirSubdirs (0.01s)\n[Tests/Check code quality and run tests]   | === RUN   TestDirFileFor\n[Tests/Check code quality and run tests]   | --- PASS: TestDirFileFor (0.00s)\n[Tests/Check code quality and run tests]   | === RUN   TestDirDirtyFiles\n[Tests/Check code quality and run tests]   | --- PASS: TestDirDirtyFiles (0.00s)\n[Tests/Check code quality and run tests]   | === RUN   TestDirInstances\n[Tests/Check code quality and run tests]   | --- PASS: TestDirInstances (0.02s)\n[Tests/Check code quality and run tests]   | === RUN   TestDirInstanceDefaultParams\n[Tests/Check code quality and run tests]   | --- PASS: TestDirInstanceDefaultParams (0.00s)\n[Tests/Check code quality and run tests]   | === RUN   TestHostDefaultDirName\n[Tests/Check code quality and run tests]   | --- PASS: TestHostDefaultDirName (0.00s)\n[Tests/Check code quality and run tests]   | === RUN   TestAncestorPaths\n[Tests/Check code quality and run tests]   | --- PASS: TestAncestorPaths (0.00s)\n[Tests/Check code quality and run tests]   | === RUN   TestDirPassword\n[Tests/Check code quality and run tests]   | Enter password for directory internal/fs/testdata/pwprompt/basedir: *******\n[Tests/Check code quality and run tests]   | Enter password for directory internal/fs/testdata/pwprompt/basedir: \n[Tests/Check code quality and run tests]   | Enter password for directory internal/fs/testdata/pwprompt/leafdir/a: \n[Tests/Check code quality and run tests]   | Enter password for directory internal/fs/testdata/pwprompt/leafdir/b: \n[Tests/Check code quality and run tests]   | Enter password for foo@1.2.3.4 and 2 other servers: \n[Tests/Check code quality and run tests]   | Enter password for bar@1.2.3.4: \n[Tests/Check code quality and run tests]   | Enter password for foo@4.3.2.1 and foo@4.5.6.7:3307: \n[Tests/Check code quality and run tests]   | --- PASS: TestDirPassword (0.01s)\n[Tests/Check code quality and run tests]   | === RUN   TestSQLFileExists\n[Tests/Check code quality and run tests]   | --- PASS: TestSQLFileExists (0.00s)\n[Tests/Check code quality and run tests]   | === RUN   TestSQLFileAddStatement\n[Tests/Check code quality and run tests]   | --- PASS: TestSQLFileAddStatement (0.00s)\n[Tests/Check code quality and run tests]   | === RUN   TestSQLFileEditStatementText\n[Tests/Check code quality and run tests]   | --- PASS: TestSQLFileEditStatementText (0.00s)\n[Tests/Check code quality and run tests]   | === RUN   TestSQLFileWrite\n[Tests/Check code quality and run tests]   | --- PASS: TestSQLFileWrite (0.00s)\n[Tests/Check code quality and run tests]   | === RUN   TestPathForObject\n[Tests/Check code quality and run tests]   | --- PASS: TestPathForObject (0.00s)\n[Tests/Check code quality and run tests]   | PASS\n[Tests/Check code quality and run tests]   | coverage: 20.3% of statements in ./...\n[Tests/Check code quality and run tests]   | ok  \tgithub.com/skeema/skeema/internal/fs\t0.117s\tcoverage: 20.3% of statements in ./...\n[Tests/Check code quality and run tests]   | === RUN   TestOptionsForDir\n[Tests/Check code quality and run tests]   | --- PASS: TestOptionsForDir (0.04s)\n[Tests/Check code quality and run tests]   | === RUN   TestOptionsIgnore\n[Tests/Check code quality and run tests]   | --- PASS: TestOptionsIgnore (0.00s)\n[Tests/Check code quality and run tests]   | === RUN   TestOptionsEquals\n[Tests/Check code quality and run tests]   | --- PASS: TestOptionsEquals (0.00s)\n[Tests/Check code quality and run tests]   | === RUN   TestIntegration\n[Tests/Check code quality and run tests]   |     testing.go:47: RunSuite IntegrationSuite: Setup(mysql:5.7) failed: Get \"http://unix.sock/containers/skeema-test-mysql-5.7/json?\": dial unix /var/run/docker.sock: connect: permission denied\n[Tests/Check code quality and run tests]   | --- FAIL: TestIntegration (0.00s)\n[Tests/Check code quality and run tests]   | === RUN   TestFindFirstLineOffset\n[Tests/Check code quality and run tests]   | --- PASS: TestFindFirstLineOffset (0.00s)\n[Tests/Check code quality and run tests]   | === RUN   TestFindLastLineOffset\n[Tests/Check code quality and run tests]   | --- PASS: TestFindLastLineOffset (0.00s)\n[Tests/Check code quality and run tests]   | === RUN   TestResultMerge\n[Tests/Check code quality and run tests]   | --- PASS: TestResultMerge (0.00s)\n[Tests/Check code quality and run tests]   | === RUN   TestResultSortByFile\n[Tests/Check code quality and run tests]   | --- PASS: TestResultSortByFile (0.00s)\n[Tests/Check code quality and run tests]   | === RUN   TestBadConfigResult\n[Tests/Check code quality and run tests]   | --- PASS: TestBadConfigResult (0.01s)\n[Tests/Check code quality and run tests]   | FAIL\n[Tests/Check code quality and run tests]   | coverage: 13.9% of statements in ./...\n[Tests/Check code quality and run tests]   | FAIL\tgithub.com/skeema/skeema/internal/linter\t0.106s\n[Tests/Check code quality and run tests]   | === RUN   TestModifyColumnUnsafe\n[Tests/Check code quality and run tests]   | --- PASS: TestModifyColumnUnsafe (0.00s)\n[Tests/Check code quality and run tests]   | === RUN   TestAlterCheckConstraints\n[Tests/Check code quality and run tests]   | --- PASS: TestAlterCheckConstraints (0.00s)\n[Tests/Check code quality and run tests]   | === RUN   TestColumnEquivalent\n[Tests/Check code quality and run tests]   | --- PASS: TestColumnEquivalent (0.00s)\n[Tests/Check code quality and run tests]   | === RUN   TestSchemaDiffEmpty\n[Tests/Check code quality and run tests]   | --- PASS: TestSchemaDiffEmpty (0.00s)\n[Tests/Check code quality and run tests]   | === RUN   TestSchemaDiffDatabaseDiff\n[Tests/Check code quality and run tests]   | --- PASS: TestSchemaDiffDatabaseDiff (0.00s)\n[Tests/Check code quality and run tests]   | === RUN   TestSchemaDiffAddOrDropTable\n[Tests/Check code quality and run tests]   | --- PASS: TestSchemaDiffAddOrDropTable (0.00s)\n[Tests/Check code quality and run tests]   | === RUN   TestSchemaDiffAlterTable\n[Tests/Check code quality and run tests]   | --- PASS: TestSchemaDiffAlterTable (0.00s)\n[Tests/Check code quality and run tests]   | === RUN   TestSchemaDiffForeignKeys\n[Tests/Check code quality and run tests]   | --- PASS: TestSchemaDiffForeignKeys (0.00s)\n[Tests/Check code quality and run tests]   | === RUN   TestSchemaDiffMultiFulltext\n[Tests/Check code quality and run tests]   | --- PASS: TestSchemaDiffMultiFulltext (0.00s)\n[Tests/Check code quality and run tests]   | === RUN   TestSchemaDiffRoutines\n[Tests/Check code quality and run tests]   | --- PASS: TestSchemaDiffRoutines (0.00s)\n[Tests/Check code quality and run tests]   | === RUN   TestSchemaDiffFilteredTableDiffs\n[Tests/Check code quality and run tests]   | --- PASS: TestSchemaDiffFilteredTableDiffs (0.00s)\n[Tests/Check code quality and run tests]   | === RUN   TestTableDiffUnsupportedAlter\n[Tests/Check code quality and run tests]   | --- PASS: TestTableDiffUnsupportedAlter (0.00s)\n[Tests/Check code quality and run tests]   | === RUN   TestTableDiffClauses\n[Tests/Check code quality and run tests]   | --- PASS: TestTableDiffClauses (0.00s)\n[Tests/Check code quality and run tests]   | === RUN   TestAlterTableStatementAllowUnsafeMods\n[Tests/Check code quality and run tests]   | --- PASS: TestAlterTableStatementAllowUnsafeMods (0.00s)\n[Tests/Check code quality and run tests]   | === RUN   TestAlterTableStatementOnlineMods\n[Tests/Check code quality and run tests]   | --- PASS: TestAlterTableStatementOnlineMods (0.00s)\n[Tests/Check code quality and run tests]   | === RUN   TestAlterTableStatementVirtualColValidation\n[Tests/Check code quality and run tests]   | --- PASS: TestAlterTableStatementVirtualColValidation (0.00s)\n[Tests/Check code quality and run tests]   | === RUN   TestNilObjectDiff\n[Tests/Check code quality and run tests]   | --- PASS: TestNilObjectDiff (0.00s)\n[Tests/Check code quality and run tests]   | === RUN   TestDocker\n[Tests/Check code quality and run tests]   |     docker_test.go:29: Unexpected error from ServerArchitecture: Get \"http://unix.sock/info\": dial unix /var/run/docker.sock: connect: permission denied\n[Tests/Check code quality and run tests]   |     docker_test.go:41: Expected to get error *docker.NoSuchContainer, instead got *url.Error Get \"http://unix.sock/containers/tengo-docker-meta-test/json?\": dial unix /var/run/docker.sock: connect: permission denied\n[Tests/Check code quality and run tests]   |     docker_test.go:56: Unexpected error from GetOrCreateInstance: Get \"http://unix.sock/containers/tengo-docker-meta-test/json?\": dial unix /var/run/docker.sock: connect: permission denied\n[Tests/Check code quality and run tests]   | --- FAIL: TestDocker (0.00s)\n[Tests/Check code quality and run tests]   | === RUN   TestParseVendor\n[Tests/Check code quality and run tests]   | --- PASS: TestParseVendor (0.00s)\n[Tests/Check code quality and run tests]   | === RUN   TestParseVersion\n[Tests/Check code quality and run tests]   | --- PASS: TestParseVersion (0.00s)\n[Tests/Check code quality and run tests]   | === RUN   TestVersionConvenienceMethods\n[Tests/Check code quality and run tests]   | --- PASS: TestVersionConvenienceMethods (0.00s)\n[Tests/Check code quality and run tests]   | === RUN   TestVersionComparisons\n[Tests/Check code quality and run tests]   | --- PASS: TestVersionComparisons (0.00s)\n[Tests/Check code quality and run tests]   | === RUN   TestVariantString\n[Tests/Check code quality and run tests]   | --- PASS: TestVariantString (0.00s)\n[Tests/Check code quality and run tests]   | === RUN   TestParseVariant\n[Tests/Check code quality and run tests]   | --- PASS: TestParseVariant (0.00s)\n[Tests/Check code quality and run tests]   | === RUN   TestSplitVersionedIdentifier\n[Tests/Check code quality and run tests]   | --- PASS: TestSplitVersionedIdentifier (0.00s)\n[Tests/Check code quality and run tests]   | === RUN   TestParseFlavor\n[Tests/Check code quality and run tests]   | --- PASS: TestParseFlavor (0.00s)\n[Tests/Check code quality and run tests]   | === RUN   TestIdentifyFlavor\n[Tests/Check code quality and run tests]   | --- PASS: TestIdentifyFlavor (0.00s)\n[Tests/Check code quality and run tests]   | === RUN   TestFlavorString\n[Tests/Check code quality and run tests]   | --- PASS: TestFlavorString (0.00s)\n[Tests/Check code quality and run tests]   | === RUN   TestFlavorDot\n[Tests/Check code quality and run tests]   | --- PASS: TestFlavorDot (0.00s)\n[Tests/Check code quality and run tests]   | === RUN   TestFlavorHasVariant\n[Tests/Check code quality and run tests]   | --- PASS: TestFlavorHasVariant (0.00s)\n[Tests/Check code quality and run tests]   | === RUN   TestFlavorMatches\n[Tests/Check code quality and run tests]   | --- PASS: TestFlavorMatches (0.00s)\n[Tests/Check code quality and run tests]   | === RUN   TestFlavorMatchesAny\n[Tests/Check code quality and run tests]   | --- PASS: TestFlavorMatchesAny (0.00s)\n[Tests/Check code quality and run tests]   | === RUN   TestFlavorMin\n[Tests/Check code quality and run tests]   | --- PASS: TestFlavorMin (0.00s)\n[Tests/Check code quality and run tests]   | === RUN   TestFlavorSupported\n[Tests/Check code quality and run tests]   | --- PASS: TestFlavorSupported (0.00s)\n[Tests/Check code quality and run tests]   | === RUN   TestFlavorKnown\n[Tests/Check code quality and run tests]   | --- PASS: TestFlavorKnown (0.00s)\n[Tests/Check code quality and run tests]   | === RUN   TestFlavorIs\n[Tests/Check code quality and run tests]   | --- PASS: TestFlavorIs (0.00s)\n[Tests/Check code quality and run tests]   | === RUN   TestFlavorGeneratedColumns\n[Tests/Check code quality and run tests]   | --- PASS: TestFlavorGeneratedColumns (0.00s)\n[Tests/Check code quality and run tests]   | === RUN   TestFlavorSortedForeignKeys\n[Tests/Check code quality and run tests]   | --- PASS: TestFlavorSortedForeignKeys (0.00s)\n[Tests/Check code quality and run tests]   | === RUN   TestFlavorOmitIntDisplayWidth\n[Tests/Check code quality and run tests]   | --- PASS: TestFlavorOmitIntDisplayWidth (0.00s)\n[Tests/Check code quality and run tests]   | === RUN   TestFlavorHasCheckConstraints\n[Tests/Check code quality and run tests]   | --- PASS: TestFlavorHasCheckConstraints (0.00s)\n[Tests/Check code quality and run tests]   | === RUN   TestIndexDefinition\n[Tests/Check code quality and run tests]   | --- PASS: TestIndexDefinition (0.00s)\n[Tests/Check code quality and run tests]   | === RUN   TestIndexRedundantTo\n[Tests/Check code quality and run tests]   | --- PASS: TestIndexRedundantTo (0.00s)\n[Tests/Check code quality and run tests]   | === RUN   TestIndexComparisonNil\n[Tests/Check code quality and run tests]   | --- PASS: TestIndexComparisonNil (0.00s)\n[Tests/Check code quality and run tests]   | === RUN   TestNewInstance\n[Tests/Check code quality and run tests]   | --- PASS: TestNewInstance (0.00s)\n[Tests/Check code quality and run tests]   | === RUN   TestInstanceBuildParamString\n[Tests/Check code quality and run tests]   | --- PASS: TestInstanceBuildParamString (0.00s)\n[Tests/Check code quality and run tests]   | === RUN   TestInstanceIntrospectionParams\n[Tests/Check code quality and run tests]   | --- PASS: TestInstanceIntrospectionParams (0.00s)\n[Tests/Check code quality and run tests]   | === RUN   TestInstanceGrantChecksRegexes\n[Tests/Check code quality and run tests]   | --- PASS: TestInstanceGrantChecksRegexes (0.00s)\n[Tests/Check code quality and run tests]   | === RUN   TestColumnCompression\n[Tests/Check code quality and run tests]   | --- PASS: TestColumnCompression (0.00s)\n[Tests/Check code quality and run tests]   | === RUN   TestFixFulltextIndexParsers\n[Tests/Check code quality and run tests]   | --- PASS: TestFixFulltextIndexParsers (0.00s)\n[Tests/Check code quality and run tests]   | === RUN   TestFixBlobDefaultExpression\n[Tests/Check code quality and run tests]   | --- PASS: TestFixBlobDefaultExpression (0.00s)\n[Tests/Check code quality and run tests]   | === RUN   TestFixShowCharSets\n[Tests/Check code quality and run tests]   | --- PASS: TestFixShowCharSets (0.00s)\n[Tests/Check code quality and run tests]   | === RUN   TestReservedWordMap\n[Tests/Check code quality and run tests]   | --- PASS: TestReservedWordMap (0.00s)\n[Tests/Check code quality and run tests]   | === RUN   TestVendorReservedWordMap\n[Tests/Check code quality and run tests]   | --- PASS: TestVendorReservedWordMap (0.00s)\n[Tests/Check code quality and run tests]   | === RUN   TestIsReservedWord\n[Tests/Check code quality and run tests]   | --- PASS: TestIsReservedWord (0.00s)\n[Tests/Check code quality and run tests]   | === RUN   TestIsVendorReservedWord\n[Tests/Check code quality and run tests]   | --- PASS: TestIsVendorReservedWord (0.00s)\n[Tests/Check code quality and run tests]   | === RUN   TestLexerOddTokens\n[Tests/Check code quality and run tests]   | --- PASS: TestLexerOddTokens (0.00s)\n[Tests/Check code quality and run tests]   | === RUN   TestLexerSplitBuffer\n[Tests/Check code quality and run tests]   | --- PASS: TestLexerSplitBuffer (0.00s)\n[Tests/Check code quality and run tests]   | === RUN   TestParseStatementsInFileSuccess\n[Tests/Check code quality and run tests]   | --- PASS: TestParseStatementsInFileSuccess (0.00s)\n[Tests/Check code quality and run tests]   | === RUN   TestParseStatementsInFileFail\n[Tests/Check code quality and run tests]   | --- PASS: TestParseStatementsInFileFail (0.00s)\n[Tests/Check code quality and run tests]   | === RUN   TestParseStatementsInFileBadCreate\n[Tests/Check code quality and run tests]   | --- PASS: TestParseStatementsInFileBadCreate (0.00s)\n[Tests/Check code quality and run tests]   | === RUN   TestParseStatementsInFileWithBOM\n[Tests/Check code quality and run tests]   | --- PASS: TestParseStatementsInFileWithBOM (0.00s)\n[Tests/Check code quality and run tests]   | === RUN   TestParseStatementsInString\n[Tests/Check code quality and run tests]   | --- PASS: TestParseStatementsInString (0.00s)\n[Tests/Check code quality and run tests]   | === RUN   TestParseStatementInString\n[Tests/Check code quality and run tests]   | --- PASS: TestParseStatementInString (0.00s)\n[Tests/Check code quality and run tests]   | === RUN   TestStripAnyQuote\n[Tests/Check code quality and run tests]   | --- PASS: TestStripAnyQuote (0.00s)\n[Tests/Check code quality and run tests]   | === RUN   TestTableCreatePartitioning\n[Tests/Check code quality and run tests]   | --- PASS: TestTableCreatePartitioning (0.00s)\n[Tests/Check code quality and run tests]   | === RUN   TestTableAlterPartitioningStatus\n[Tests/Check code quality and run tests]   | --- PASS: TestTableAlterPartitioningStatus (0.00s)\n[Tests/Check code quality and run tests]   | === RUN   TestTableAlterPartitioningOther\n[Tests/Check code quality and run tests]   | --- PASS: TestTableAlterPartitioningOther (0.00s)\n[Tests/Check code quality and run tests]   | === RUN   TestTableUnpartitionedCreateStatement\n[Tests/Check code quality and run tests]   | --- PASS: TestTableUnpartitionedCreateStatement (0.00s)\n[Tests/Check code quality and run tests]   | === RUN   TestSchemaDiffDropPartitionedTable\n[Tests/Check code quality and run tests]   | --- PASS: TestSchemaDiffDropPartitionedTable (0.00s)\n[Tests/Check code quality and run tests]   | === RUN   TestPartitioningDataDirectory\n[Tests/Check code quality and run tests]   | --- PASS: TestPartitioningDataDirectory (0.00s)\n[Tests/Check code quality and run tests]   | === RUN   TestStatementLocation\n[Tests/Check code quality and run tests]   | --- PASS: TestStatementLocation (0.00s)\n[Tests/Check code quality and run tests]   | === RUN   TestStatementSchema\n[Tests/Check code quality and run tests]   | --- PASS: TestStatementSchema (0.00s)\n[Tests/Check code quality and run tests]   | === RUN   TestStatementSplitTextBody\n[Tests/Check code quality and run tests]   | --- PASS: TestStatementSplitTextBody (0.00s)\n[Tests/Check code quality and run tests]   | === RUN   TestStatementBody\n[Tests/Check code quality and run tests]   | --- PASS: TestStatementBody (0.00s)\n[Tests/Check code quality and run tests]   | === RUN   TestStatementNormalizeTrailer\n[Tests/Check code quality and run tests]   | --- PASS: TestStatementNormalizeTrailer (0.00s)\n[Tests/Check code quality and run tests]   | === RUN   TestTableGeneratedCreateStatement\n[Tests/Check code quality and run tests]   | --- PASS: TestTableGeneratedCreateStatement (0.00s)\n[Tests/Check code quality and run tests]   | === RUN   TestTableClusteredIndexKey\n[Tests/Check code quality and run tests]   | --- PASS: TestTableClusteredIndexKey (0.00s)\n[Tests/Check code quality and run tests]   | === RUN   TestTableRowFormatClause\n[Tests/Check code quality and run tests]   | --- PASS: TestTableRowFormatClause (0.00s)\n[Tests/Check code quality and run tests]   | === RUN   TestTableAlterAddOrDropColumn\n[Tests/Check code quality and run tests]   | --- PASS: TestTableAlterAddOrDropColumn (0.00s)\n[Tests/Check code quality and run tests]   | === RUN   TestTableAlterAddOrDropIndex\n[Tests/Check code quality and run tests]   | --- PASS: TestTableAlterAddOrDropIndex (0.00s)\n[Tests/Check code quality and run tests]   | === RUN   TestTableAlterAddOrDropForeignKey\n[Tests/Check code quality and run tests]   | --- PASS: TestTableAlterAddOrDropForeignKey (0.00s)\n[Tests/Check code quality and run tests]   | === RUN   TestTableAlterAddIndexOrder\n[Tests/Check code quality and run tests]   | --- PASS: TestTableAlterAddIndexOrder (0.00s)\n[Tests/Check code quality and run tests]   | === RUN   TestTableAlterIndexReorder\n[Tests/Check code quality and run tests]   | --- PASS: TestTableAlterIndexReorder (0.00s)\n[Tests/Check code quality and run tests]   | === RUN   TestTableAlterModifyColumn\n[Tests/Check code quality and run tests]   | --- PASS: TestTableAlterModifyColumn (0.00s)\n[Tests/Check code quality and run tests]   | === RUN   TestTableAlterNoModify\n[Tests/Check code quality and run tests]   | --- PASS: TestTableAlterNoModify (0.00s)\n[Tests/Check code quality and run tests]   | === RUN   TestTableAlterChangeStorageEngine\n[Tests/Check code quality and run tests]   | --- PASS: TestTableAlterChangeStorageEngine (0.00s)\n[Tests/Check code quality and run tests]   | === RUN   TestTableAlterChangeAutoIncrement\n[Tests/Check code quality and run tests]   | --- PASS: TestTableAlterChangeAutoIncrement (0.00s)\n[Tests/Check code quality and run tests]   | === RUN   TestTableAlterChangeCharSet\n[Tests/Check code quality and run tests]   | --- PASS: TestTableAlterChangeCharSet (0.00s)\n[Tests/Check code quality and run tests]   | === RUN   TestTableAlterChangeCreateOptions\n[Tests/Check code quality and run tests]   | --- PASS: TestTableAlterChangeCreateOptions (0.00s)\n[Tests/Check code quality and run tests]   | === RUN   TestTableAlterChangeComment\n[Tests/Check code quality and run tests]   | --- PASS: TestTableAlterChangeComment (0.00s)\n[Tests/Check code quality and run tests]   | === RUN   TestTableAlterTablespace\n[Tests/Check code quality and run tests]   | --- PASS: TestTableAlterTablespace (0.00s)\n[Tests/Check code quality and run tests]   | === RUN   TestTableAlterUnsupportedTable\n[Tests/Check code quality and run tests]   | --- PASS: TestTableAlterUnsupportedTable (0.00s)\n[Tests/Check code quality and run tests]   | === RUN   TestIntegration\n[Tests/Check code quality and run tests]   |     testing.go:47: RunSuite TengoIntegrationSuite: Setup(mysql:5.7) failed: Get \"http://unix.sock/containers/skeema-test-mysql-5.7/json?\": dial unix /var/run/docker.sock: connect: permission denied\n[Tests/Check code quality and run tests]   | --- FAIL: TestIntegration (0.00s)\n[Tests/Check code quality and run tests]   | === RUN   TestObjectKeyString\n[Tests/Check code quality and run tests]   | --- PASS: TestObjectKeyString (0.00s)\n[Tests/Check code quality and run tests]   | === RUN   TestUnitTableFlavors\n[Tests/Check code quality and run tests]   | --- PASS: TestUnitTableFlavors (0.00s)\n[Tests/Check code quality and run tests]   | === RUN   TestSplitHostOptionalPort\n[Tests/Check code quality and run tests]   | --- PASS: TestSplitHostOptionalPort (0.00s)\n[Tests/Check code quality and run tests]   | === RUN   TestParseCreateAutoInc\n[Tests/Check code quality and run tests]   | --- PASS: TestParseCreateAutoInc (0.00s)\n[Tests/Check code quality and run tests]   | === RUN   TestReformatCreateOptions\n[Tests/Check code quality and run tests]   | --- PASS: TestReformatCreateOptions (0.00s)\n[Tests/Check code quality and run tests]   | === RUN   TestNormalizeCreateOptions\n[Tests/Check code quality and run tests]   | --- PASS: TestNormalizeCreateOptions (0.00s)\n[Tests/Check code quality and run tests]   | === RUN   TestStripDisplayWidth\n[Tests/Check code quality and run tests]   | --- PASS: TestStripDisplayWidth (0.00s)\n[Tests/Check code quality and run tests]   | === RUN   TestMergeParamStrings\n[Tests/Check code quality and run tests]   | --- PASS: TestMergeParamStrings (0.00s)\n[Tests/Check code quality and run tests]   | === RUN   TestLongestIncreasingSubsequence\n[Tests/Check code quality and run tests]   | --- PASS: TestLongestIncreasingSubsequence (0.00s)\n[Tests/Check code quality and run tests]   | FAIL\n[Tests/Check code quality and run tests]   | coverage: 35.7% of statements in ./...\n[Tests/Check code quality and run tests]   | FAIL\tgithub.com/skeema/skeema/internal/tengo\t0.051s\n[Tests/Check code quality and run tests]   | === RUN   TestNewInstance\n[Tests/Check code quality and run tests]   | --- PASS: TestNewInstance (0.00s)\n[Tests/Check code quality and run tests]   | === RUN   TestAddGlobalConfigFiles\n[Tests/Check code quality and run tests]   | 2023-05-30 12:09:33 [\u001b[33;1mWARN\u001b[0m]  Ignoring global option file /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/skeema-skeema/internal/util/fake-etc/skeema due to parse error: /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/skeema-skeema/internal/util/fake-etc/skeema line 3: Unknown option \"this will not parse\"\n[Tests/Check code quality and run tests]   | --- PASS: TestAddGlobalConfigFiles (0.00s)\n[Tests/Check code quality and run tests]   | === RUN   TestPasswordOption\n[Tests/Check code quality and run tests]   | Enter password: \n[Tests/Check code quality and run tests]   | Enter password: \n[Tests/Check code quality and run tests]   | Enter password: \n[Tests/Check code quality and run tests]   | Enter password: *****************\n[Tests/Check code quality and run tests]   | Enter password: ******************\n[Tests/Check code quality and run tests]   | Enter password: *********************\n[Tests/Check code quality and run tests]   | Enter password: ***********\n[Tests/Check code quality and run tests]   | --- PASS: TestPasswordOption (0.00s)\n[Tests/Check code quality and run tests]   | === RUN   TestSplitConnectOptions\n[Tests/Check code quality and run tests]   | --- PASS: TestSplitConnectOptions (0.00s)\n[Tests/Check code quality and run tests]   | === RUN   TestRealConnectOptions\n[Tests/Check code quality and run tests]   | --- PASS: TestRealConnectOptions (0.00s)\n[Tests/Check code quality and run tests]   | === RUN   TestIgnorePatterns\n[Tests/Check code quality and run tests]   | --- PASS: TestIgnorePatterns (0.00s)\n[Tests/Check code quality and run tests]   | === RUN   TestShellOutRun\n[Tests/Check code quality and run tests]   | /bin/sh: 1: /does/not/exist: not found\n[Tests/Check code quality and run tests]   | --- PASS: TestShellOutRun (0.00s)\n[Tests/Check code quality and run tests]   | === RUN   TestRunCaptureSplit\n[Tests/Check code quality and run tests]   | --- PASS: TestRunCaptureSplit (0.02s)\n[Tests/Check code quality and run tests]   | === RUN   TestNewInterpolatedShellOut\n[Tests/Check code quality and run tests]   | --- PASS: TestNewInterpolatedShellOut (0.00s)\n[Tests/Check code quality and run tests]   | === RUN   TestEscapeVarValue\n[Tests/Check code quality and run tests]   | --- PASS: TestEscapeVarValue (0.00s)\n[Tests/Check code quality and run tests]   | === RUN   TestShellOutTimeout\n[Tests/Check code quality and run tests]   | --- PASS: TestShellOutTimeout (0.01s)\n[Tests/Check code quality and run tests]   | === RUN   TestShellOutCombineOutput\n[Tests/Check code quality and run tests]   | hello\n[Tests/Check code quality and run tests]   | --- PASS: TestShellOutCombineOutput (0.00s)\n[Tests/Check code quality and run tests]   | === RUN   TestTerminalWidth\n[Tests/Check code quality and run tests]   | --- PASS: TestTerminalWidth (0.00s)\n[Tests/Check code quality and run tests]   | === RUN   TestWrapStringWithPadding\n[Tests/Check code quality and run tests]   | --- PASS: TestWrapStringWithPadding (0.00s)\n[Tests/Check code quality and run tests]   | PASS\n[Tests/Check code quality and run tests]   | coverage: 7.5% of statements in ./...\n[Tests/Check code quality and run tests]   | ok  \tgithub.com/skeema/skeema/internal/util\t1.036s\tcoverage: 7.5% of statements in ./...\n[Tests/Check code quality and run tests]   | === RUN   TestTempSchemaNilInstance\n[Tests/Check code quality and run tests]   | --- PASS: TestTempSchemaNilInstance (0.00s)\n[Tests/Check code quality and run tests]   | === RUN   TestIntegration\n[Tests/Check code quality and run tests]   |     testing.go:47: RunSuite WorkspaceIntegrationSuite: Setup(mysql:5.7) failed: Get \"http://unix.sock/containers/skeema-test-mysql-5.7/json?\": dial unix /var/run/docker.sock: connect: permission denied\n[Tests/Check code quality and run tests]   | --- FAIL: TestIntegration (0.00s)\n[Tests/Check code quality and run tests]   | FAIL\n[Tests/Check code quality and run tests]   | coverage: 3.4% of statements in ./...\n[Tests/Check code quality and run tests]   | FAIL\tgithub.com/skeema/skeema/internal/workspace\t0.095s\n[Tests/Check code quality and run tests]   | FAIL\n[Tests/Check code quality and run tests]   \u274c  Failure - Main Run tests\n[Tests/Check code quality and run tests] exitcode '1': failure\n[Tests/Check code quality and run tests] \ud83c\udfc1  Job failed\n",
    "actions_stderr": "Error: Job 'Check code quality and run tests' failed\n"
}