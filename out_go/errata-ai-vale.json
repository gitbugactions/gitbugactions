{
    "repository": "errata-ai/vale",
    "clone_url": "https://github.com/errata-ai/vale.git",
    "timestamp": "2023-05-30T12:10:39.472568Z",
    "clone_success": true,
    "number of actions": 2,
    "number_of_test_actions": 1,
    "actions_successful": false,
    "actions_stdout": "[Build + Lint/runner / vale] \ud83d\ude80  Start image=crawlergpt:latest\n[Build + Lint/goreleaser   ] \ud83d\ude80  Start image=crawlergpt:latest\n[Build + Lint/goreleaser   ]   \ud83d\udc33  docker pull image=crawlergpt:latest platform= username= forcePull=false\n[Build + Lint/runner / vale]   \ud83d\udc33  docker pull image=crawlergpt:latest platform= username= forcePull=false\n[Build + Lint/goreleaser   ]   \ud83d\udc33  docker create image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[Build + Lint/runner / vale]   \ud83d\udc33  docker create image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[Build + Lint/runner / vale]   \ud83d\udc33  docker run image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[Build + Lint/goreleaser   ]   \ud83d\udc33  docker run image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[Build + Lint/runner / vale]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/errata-ai-vale] user=0 workdir=\n[Build + Lint/goreleaser   ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/errata-ai-vale] user=0 workdir=\n[Build + Lint/goreleaser   ]   \u2601  git clone 'https://github.com/actions/setup-go' # ref=v3\n[Build + Lint/runner / vale]   \u2601  git clone 'https://github.com/errata-ai/vale-action' # ref=reviewdog\n[Build + Lint/goreleaser   ]   \u2601  git clone 'https://github.com/goreleaser/goreleaser-action' # ref=v4\n[Build + Lint/runner / vale] \u2b50 Run Main actions/checkout@v2\n[Build + Lint/runner / vale]   \u2705  Success - Main actions/checkout@v2\n[Build + Lint/goreleaser   ] \u2b50 Run Main Checkout\n[Build + Lint/runner / vale] \u2b50 Run Main errata-ai/vale-action@reviewdog\n[Build + Lint/goreleaser   ]   \u2705  Success - Main Checkout\n[Build + Lint/runner / vale]   \ud83d\udc33  docker build -t act-errata-ai-vale-action-reviewdog-dockeraction:latest /home/andre-silva/.cache/act/errata-ai-vale-action@reviewdog/\n[Build + Lint/goreleaser   ] \u2b50 Run Main Set up Go\n[Build + Lint/goreleaser   ]   \ud83d\udc33  docker cp src=/home/andre-silva/.cache/act/actions-setup-go@v3/ dst=/var/run/act/actions/actions-setup-go@v3/\n[Build + Lint/goreleaser   ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /var/run/act/actions/actions-setup-go@v3/] user=0 workdir=\n[Build + Lint/goreleaser   ]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/actions-setup-go@v3/dist/setup/index.js] user= workdir=\n[Build + Lint/goreleaser   ]   | Setup go version spec 1.20\n[Build + Lint/goreleaser   ]   \ud83d\udcac  ::debug::isExplicit: \n[Build + Lint/goreleaser   ]   \ud83d\udcac  ::debug::explicit? false\n[Build + Lint/goreleaser   ]   \ud83d\udcac  ::debug::isExplicit: 1.14.15\n[Build + Lint/goreleaser   ]   \ud83d\udcac  ::debug::explicit? true\n[Build + Lint/goreleaser   ]   \ud83d\udcac  ::debug::isExplicit: 1.15.15\n[Build + Lint/goreleaser   ]   \ud83d\udcac  ::debug::explicit? true\n[Build + Lint/goreleaser   ]   \ud83d\udcac  ::debug::isExplicit: 1.16.7\n[Build + Lint/goreleaser   ]   \ud83d\udcac  ::debug::explicit? true\n[Build + Lint/goreleaser   ]   \ud83d\udcac  ::debug::evaluating 3 versions\n[Build + Lint/goreleaser   ]   \ud83d\udcac  ::debug::match not found\n[Build + Lint/goreleaser   ]   | Attempting to download 1.20...\n[Build + Lint/goreleaser   ]   \ud83d\udcac  ::debug::No manifest cached\n[Build + Lint/goreleaser   ]   | API rate limit exceeded for 130.242.72.40. (But here's the good news: Authenticated requests get a higher rate limit. Check out the documentation for more details.)\n[Build + Lint/goreleaser   ]   \ud83d\udcac  ::debug::HttpClientError: API rate limit exceeded for 130.242.72.40. (But here's the good news: Authenticated requests get a higher rate limit. Check out the documentation for more details.)%0A    at /run/act/actions/actions-setup-go@v3/dist/setup/index.js:8612:27%0A    at processTicksAndRejections (internal/process/task_queues.js:95:5)\n[Build + Lint/goreleaser   ]   | Falling back to download directly from Go\n[Build + Lint/goreleaser   ]   \ud83d\udcac  ::debug::check 1.20.4 satisfies 1.20\n[Build + Lint/goreleaser   ]   \ud83d\udcac  ::debug::===amd64 && ===linux\n[Build + Lint/goreleaser   ]   \ud83d\udcac  ::debug::amd64===amd64 && darwin===linux\n[Build + Lint/goreleaser   ]   \ud83d\udcac  ::debug::amd64===amd64 && darwin===linux\n[Build + Lint/goreleaser   ]   \ud83d\udcac  ::debug::arm64===amd64 && darwin===linux\n[Build + Lint/goreleaser   ]   \ud83d\udcac  ::debug::arm64===amd64 && darwin===linux\n[Build + Lint/goreleaser   ]   \ud83d\udcac  ::debug::386===amd64 && freebsd===linux\n[Build + Lint/goreleaser   ]   \ud83d\udcac  ::debug::amd64===amd64 && freebsd===linux\n[Build + Lint/goreleaser   ]   \ud83d\udcac  ::debug::386===amd64 && linux===linux\n[Build + Lint/goreleaser   ]   \ud83d\udcac  ::debug::amd64===amd64 && linux===linux\n[Build + Lint/goreleaser   ]   \ud83d\udcac  ::debug::matched go1.20.4\n[Build + Lint/goreleaser   ]   | Install from dist\n[Build + Lint/goreleaser   ]   | Acquiring go1.20.4 from https://storage.googleapis.com/golang/go1.20.4.linux-amd64.tar.gz\n[Build + Lint/goreleaser   ]   \ud83d\udcac  ::debug::Downloading https://storage.googleapis.com/golang/go1.20.4.linux-amd64.tar.gz\n[Build + Lint/goreleaser   ]   \ud83d\udcac  ::debug::Destination /tmp/5b57f85a-d242-48a9-a0b9-55a7fe732f5e\n[Build + Lint/goreleaser   ]   \ud83d\udcac  ::debug::download complete\n[Build + Lint/goreleaser   ]   | Extracting Go...\n[Build + Lint/goreleaser   ]   \ud83d\udcac  ::debug::Checking tar --version\n[Build + Lint/goreleaser   ]   \ud83d\udcac  ::debug::tar (GNU tar) 1.30%0ACopyright (C) 2017 Free Software Foundation, Inc.%0ALicense GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.%0AThis is free software: you are free to change and redistribute it.%0AThere is NO WARRANTY, to the extent permitted by law.%0A%0AWritten by John Gilmore and Jay Fenlason.\n[Build + Lint/goreleaser   ]   | [command]/usr/bin/tar xz --warning=no-unknown-keyword --overwrite -C /tmp/29d7f8ee-3f20-4f2e-92ea-a0ded3beee61 -f /tmp/5b57f85a-d242-48a9-a0b9-55a7fe732f5e\n[Build + Lint/goreleaser   ]   | Successfully extracted go to /tmp/29d7f8ee-3f20-4f2e-92ea-a0ded3beee61\n[Build + Lint/goreleaser   ]   | Adding to the cache ...\n[Build + Lint/goreleaser   ]   \ud83d\udcac  ::debug::Caching tool go 1.20.4 x64\n[Build + Lint/goreleaser   ]   \ud83d\udcac  ::debug::source dir: /tmp/29d7f8ee-3f20-4f2e-92ea-a0ded3beee61/go\n[Build + Lint/goreleaser   ]   \ud83d\udcac  ::debug::destination /opt/hostedtoolcache/go/1.20.4/x64\n[Build + Lint/goreleaser   ]   \ud83d\udcac  ::debug::finished caching tool\n[Build + Lint/goreleaser   ]   | Successfully cached go to /opt/hostedtoolcache/go/1.20.4/x64\n[Build + Lint/goreleaser   ]   | Added go to the path\n[Build + Lint/goreleaser   ]   \ud83d\udcac  ::debug::which go :/opt/hostedtoolcache/go/1.20.4/x64/bin/go:\n[Build + Lint/goreleaser   ]   \ud83d\udcac  ::debug::go env GOPATH :/home/runneradmin/go:\n[Build + Lint/goreleaser   ]   \ud83d\udcac  ::debug::creating /home/runneradmin/go\n[Build + Lint/goreleaser   ]   \ud83d\udcac  ::debug::creating /home/runneradmin/go/bin\n[Build + Lint/goreleaser   ]   \ud83d\udcac  ::debug::add bin true\n[Build + Lint/goreleaser   ]   | Successfully set up Go version 1.20\n[Build + Lint/goreleaser   ]   \u2753 add-matcher /run/act/actions/actions-setup-go@v3/matchers.json\n[Build + Lint/goreleaser   ]   | go version go1.20.4 linux/amd64\n[Build + Lint/goreleaser   ]   | \n[Build + Lint/goreleaser   ]   \u2753  ::group::go env\n[Build + Lint/goreleaser   ]   | GO111MODULE=\"\"\n[Build + Lint/goreleaser   ]   | GOARCH=\"amd64\"\n[Build + Lint/goreleaser   ]   | GOBIN=\"\"\n[Build + Lint/goreleaser   ]   | GOCACHE=\"/home/runneradmin/.cache/go-build\"\n[Build + Lint/goreleaser   ]   | GOENV=\"/home/runneradmin/.config/go/env\"\n[Build + Lint/goreleaser   ]   | GOEXE=\"\"\n[Build + Lint/goreleaser   ]   | GOEXPERIMENT=\"\"\n[Build + Lint/goreleaser   ]   | GOFLAGS=\"\"\n[Build + Lint/goreleaser   ]   | GOHOSTARCH=\"amd64\"\n[Build + Lint/goreleaser   ]   | GOHOSTOS=\"linux\"\n[Build + Lint/goreleaser   ]   | GOINSECURE=\"\"\n[Build + Lint/goreleaser   ]   | GOMODCACHE=\"/home/runneradmin/go/pkg/mod\"\n[Build + Lint/goreleaser   ]   | GONOPROXY=\"\"\n[Build + Lint/goreleaser   ]   | GONOSUMDB=\"\"\n[Build + Lint/goreleaser   ]   | GOOS=\"linux\"\n[Build + Lint/goreleaser   ]   | GOPATH=\"/home/runneradmin/go\"\n[Build + Lint/goreleaser   ]   | GOPRIVATE=\"\"\n[Build + Lint/goreleaser   ]   | GOPROXY=\"https://proxy.golang.org,direct\"\n[Build + Lint/goreleaser   ]   | GOROOT=\"/opt/hostedtoolcache/go/1.20.4/x64\"\n[Build + Lint/goreleaser   ]   | GOSUMDB=\"sum.golang.org\"\n[Build + Lint/goreleaser   ]   | GOTMPDIR=\"\"\n[Build + Lint/goreleaser   ]   | GOTOOLDIR=\"/opt/hostedtoolcache/go/1.20.4/x64/pkg/tool/linux_amd64\"\n[Build + Lint/goreleaser   ]   | GOVCS=\"\"\n[Build + Lint/goreleaser   ]   | GOVERSION=\"go1.20.4\"\n[Build + Lint/goreleaser   ]   | GCCGO=\"gccgo\"\n[Build + Lint/goreleaser   ]   | GOAMD64=\"v1\"\n[Build + Lint/goreleaser   ]   | AR=\"ar\"\n[Build + Lint/goreleaser   ]   | CC=\"gcc\"\n[Build + Lint/goreleaser   ]   | CXX=\"g++\"\n[Build + Lint/goreleaser   ]   | CGO_ENABLED=\"1\"\n[Build + Lint/goreleaser   ]   | GOMOD=\"/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/errata-ai-vale/go.mod\"\n[Build + Lint/goreleaser   ]   | GOWORK=\"\"\n[Build + Lint/goreleaser   ]   | CGO_CFLAGS=\"-O2 -g\"\n[Build + Lint/goreleaser   ]   | CGO_CPPFLAGS=\"\"\n[Build + Lint/goreleaser   ]   | CGO_CXXFLAGS=\"-O2 -g\"\n[Build + Lint/goreleaser   ]   | CGO_FFLAGS=\"-O2 -g\"\n[Build + Lint/goreleaser   ]   | CGO_LDFLAGS=\"-O2 -g\"\n[Build + Lint/goreleaser   ]   | PKG_CONFIG=\"pkg-config\"\n[Build + Lint/goreleaser   ]   | GOGCCFLAGS=\"-fPIC -m64 -pthread -Wl,--no-gc-sections -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build3345596179=/tmp/go-build -gno-record-gcc-switches\"\n[Build + Lint/goreleaser   ]   | \n[Build + Lint/goreleaser   ]   \u2753  ::endgroup::\n[Build + Lint/goreleaser   ]   \u2705  Success - Main Set up Go\n[Build + Lint/goreleaser   ]   \u2699  ::set-output:: go-version=1.20.4\n[Build + Lint/goreleaser   ]   \u2699  ::add-path:: /opt/hostedtoolcache/go/1.20.4/x64/bin\n[Build + Lint/goreleaser   ]   \u2699  ::add-path:: /home/runneradmin/go/bin\n[Build + Lint/goreleaser   ] \u2b50 Run Main Install Chocolatey\n[Build + Lint/goreleaser   ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/2] user= workdir=\n[Build + Lint/goreleaser   ]   \u2705  Success - Main Install Chocolatey\n[Build + Lint/goreleaser   ] \u2b50 Run Main Test Chocolatey\n[Build + Lint/goreleaser   ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/3] user= workdir=\n[Build + Lint/goreleaser   ]   | Chocolatey v1.3.1\n[Build + Lint/goreleaser   ]   | Directory '/opt/chocolatey/lib' does not exist.\n[Build + Lint/goreleaser   ]   | This is a listing of all of the different things you can pass to choco.\r\n[Build + Lint/goreleaser   ]   | \n[Build + Lint/goreleaser   ]   | DEPRECATION NOTICE\n[Build + Lint/goreleaser   ]   | \r\n[Build + Lint/goreleaser   ]   | The shims `chocolatey`, `cinst`, `clist`, `cpush`, `cuninst` and `cup` are deprecated.\r\n[Build + Lint/goreleaser   ]   | We recommend updating all scripts to use their full command equivalent as these will be\r\n[Build + Lint/goreleaser   ]   | removed in v2.0.0 of Chocolatey.\r\n[Build + Lint/goreleaser   ]   | \n[Build + Lint/goreleaser   ]   | Options and Switches\n[Build + Lint/goreleaser   ]   | \r\n[Build + Lint/goreleaser   ]   |  -v, --version\r\n[Build + Lint/goreleaser   ]   |      Version - Prints out the Chocolatey version. Available in 0.9.9+.\r\n[Build + Lint/goreleaser   ]   | \n[Build + Lint/goreleaser   ]   | Commands\n[Build + Lint/goreleaser   ]   | \r\n[Build + Lint/goreleaser   ]   |  * apikey - retrieves, saves or deletes an apikey for a particular source\n[Build + Lint/goreleaser   ]   |  * config - Retrieve and configure config file settings\n[Build + Lint/goreleaser   ]   |  * export - exports list of currently installed packages\n[Build + Lint/goreleaser   ]   |  * feature - view and configure choco features\n[Build + Lint/goreleaser   ]   |  * features - view and configure choco features (alias for feature)\n[Build + Lint/goreleaser   ]   |  * find - searches remote or local packages (alias for search)\n[Build + Lint/goreleaser   ]   |  * help - displays top level help information for choco\n[Build + Lint/goreleaser   ]   |  * info - retrieves package information. Shorthand for choco search pkgname --exact --verbose\n[Build + Lint/goreleaser   ]   |  * install - installs packages using configured sources\n[Build + Lint/goreleaser   ]   |  * list - lists remote or local packages\n[Build + Lint/goreleaser   ]   |  * new - creates template files for creating a new Chocolatey package\n[Build + Lint/goreleaser   ]   |  * outdated - retrieves information about packages that are outdated. Similar to upgrade all --noop\n[Build + Lint/goreleaser   ]   |  * pack - packages nuspec, scripts, and other Chocolatey package resources into a nupkg file\n[Build + Lint/goreleaser   ]   |  * pin - suppress upgrades for a package\n[Build + Lint/goreleaser   ]   |  * push - pushes a compiled nupkg to a source\n[Build + Lint/goreleaser   ]   |  * search - searches remote or local packages\n[Build + Lint/goreleaser   ]   |  * setapikey - retrieves, saves or deletes an apikey for a particular source (alias for apikey)\n[Build + Lint/goreleaser   ]   |  * source - view and configure default sources\n[Build + Lint/goreleaser   ]   |  * sources - view and configure default sources (alias for source)\n[Build + Lint/goreleaser   ]   |  * template - get information about installed templates\n[Build + Lint/goreleaser   ]   |  * templates - get information about installed templates (alias for template)\n[Build + Lint/goreleaser   ]   |  * uninstall - uninstalls a package\n[Build + Lint/goreleaser   ]   |  * unpackself - re-installs Chocolatey base files\n[Build + Lint/goreleaser   ]   |  * upgrade - upgrades packages from various sources\n[Build + Lint/goreleaser   ]   | \r\n[Build + Lint/goreleaser   ]   | \r\n[Build + Lint/goreleaser   ]   | Please run chocolatey with `choco command -help` for specific help on\r\n[Build + Lint/goreleaser   ]   |  each command.\r\n[Build + Lint/goreleaser   ]   | \n[Build + Lint/goreleaser   ]   | How To Pass Options / Switches\n[Build + Lint/goreleaser   ]   | \r\n[Build + Lint/goreleaser   ]   | You can pass options and switches in the following ways:\r\n[Build + Lint/goreleaser   ]   | \r\n[Build + Lint/goreleaser   ]   |  * Unless stated otherwise, an option/switch should only be passed one\r\n[Build + Lint/goreleaser   ]   |    time. Otherwise you may find weird/non-supported behavior.\r\n[Build + Lint/goreleaser   ]   |  * `-`, `/`, or `--` (one character switches should not use `--`)\r\n[Build + Lint/goreleaser   ]   |  * **Option Bundling / Bundled Options**: One character switches can be\r\n[Build + Lint/goreleaser   ]   |    bundled. e.g. `-d` (debug), `-f` (force), `-v` (verbose), and `-y`\r\n[Build + Lint/goreleaser   ]   |    (confirm yes) can be bundled as `-dfvy`.\r\n[Build + Lint/goreleaser   ]   |  * NOTE: If `debug` or `verbose` are bundled with local options\r\n[Build + Lint/goreleaser   ]   |    (not the global ones above), some logging may not show up until after\r\n[Build + Lint/goreleaser   ]   |    the local options are parsed.\r\n[Build + Lint/goreleaser   ]   |  * **Use Equals**: You can also include or not include an equals sign\r\n[Build + Lint/goreleaser   ]   |    `=` between options and values.\r\n[Build + Lint/goreleaser   ]   |  * **Quote Values**: When you need to quote an entire argument, such as\r\n[Build + Lint/goreleaser   ]   |    when using spaces, please use a combination of double quotes and\r\n[Build + Lint/goreleaser   ]   |    apostrophes (`\"'value'\"`). In cmd.exe you can just use double quotes\r\n[Build + Lint/goreleaser   ]   |    (`\"value\"`) but in powershell.exe you should use backticks\r\n[Build + Lint/goreleaser   ]   |    (`` `\"value`\" ``) or apostrophes (`'value'`). Using the combination\r\n[Build + Lint/goreleaser   ]   |    allows for both shells to work without issue, except for when the next\r\n[Build + Lint/goreleaser   ]   |    section applies.\r\n[Build + Lint/goreleaser   ]   |  * **Pass quotes in arguments**: When you need to pass quoted values to\r\n[Build + Lint/goreleaser   ]   |    to something like a native installer, you are in for a world of fun. In\r\n[Build + Lint/goreleaser   ]   |    cmd.exe you must pass it like this: `-ia \"/yo=\"\"Spaces spaces\"\"\"`. In\r\n[Build + Lint/goreleaser   ]   |    PowerShell.exe, you must pass it like this: `-ia '/yo=\"\"Spaces spaces\"\"'`.\r\n[Build + Lint/goreleaser   ]   |    No other combination will work. In PowerShell.exe if you are on version\r\n[Build + Lint/goreleaser   ]   |    v3+, you can try `--%` before `-ia` to just pass the args through as is,\r\n[Build + Lint/goreleaser   ]   |    which means it should not require any special workarounds.\r\n[Build + Lint/goreleaser   ]   |  * **Periods in PowerShell**: If you need to pass a period as part of a\r\n[Build + Lint/goreleaser   ]   |    value or a path, PowerShell doesn't always handle it well. Please\r\n[Build + Lint/goreleaser   ]   |    quote those values using \"Quote Values\" section above.\r\n[Build + Lint/goreleaser   ]   |  * Options and switches apply to all items passed, so if you are\r\n[Build + Lint/goreleaser   ]   |    installing multiple packages, and you use `--version=1.0.0`, choco\r\n[Build + Lint/goreleaser   ]   |    is going to look for and try to install version 1.0.0 of every\r\n[Build + Lint/goreleaser   ]   |    package passed. So please split out multiple package calls when\r\n[Build + Lint/goreleaser   ]   |    wanting to pass specific options.\r\n[Build + Lint/goreleaser   ]   | \n[Build + Lint/goreleaser   ]   | Scripting / Integration - Best Practices / Style Guide\n[Build + Lint/goreleaser   ]   | \r\n[Build + Lint/goreleaser   ]   | When writing scripts, such as PowerShell scripts passing options and\r\n[Build + Lint/goreleaser   ]   | switches, there are some best practices to follow to ensure that you\r\n[Build + Lint/goreleaser   ]   | don't run into issues later. This also applies to integrations that\r\n[Build + Lint/goreleaser   ]   | are calling Chocolatey and parsing output. Chocolatey **uses**\r\n[Build + Lint/goreleaser   ]   | PowerShell, but it is an exe, so it cannot return PowerShell objects.\r\n[Build + Lint/goreleaser   ]   | \r\n[Build + Lint/goreleaser   ]   | Following these practices ensures both readability of your scripts AND\r\n[Build + Lint/goreleaser   ]   | compatibility across different versions and editions of Chocolatey.\r\n[Build + Lint/goreleaser   ]   | Following this guide will ensure your experience is not frustrating\r\n[Build + Lint/goreleaser   ]   | based on choco not receiving things you think you are passing to it.\r\n[Build + Lint/goreleaser   ]   | \r\n[Build + Lint/goreleaser   ]   |  * For consistency, always use `choco`, not `choco.exe`. Never use\r\n[Build + Lint/goreleaser   ]   |    shortcut commands like `cinst` or `cup` (The shortcuts `cinst`\r\n[Build + Lint/goreleaser   ]   |    and `cup` will be removed in v2.0.0).\r\n[Build + Lint/goreleaser   ]   |  * Always have the command as the first argument to `choco`. e.g.\r\n[Build + Lint/goreleaser   ]   |    `choco install`, where `install` is the command.\r\n[Build + Lint/goreleaser   ]   |  * If there is a subcommand, ensure that is the second argument. e.g.\r\n[Build + Lint/goreleaser   ]   |    `choco source list`, where `source` is the command and `list` is the\r\n[Build + Lint/goreleaser   ]   |    subcommand.\r\n[Build + Lint/goreleaser   ]   |  * Typically the subject comes next. If installing packages, the\r\n[Build + Lint/goreleaser   ]   |    subject would be the package names, e.g. `choco install pkg1 pkg2`.\r\n[Build + Lint/goreleaser   ]   |  * Never use 'nupkg' or point directly to a nupkg file UNLESS using\r\n[Build + Lint/goreleaser   ]   |    'choco push'. Use the source folder instead, e.g. `choco install\r\n[Build + Lint/goreleaser   ]   |    <package id> --source=\"'c:\\folder\\with\\package'\"` instead of\r\n[Build + Lint/goreleaser   ]   |    `choco install DoNotDoThis.1.0.nupkg` or `choco install DoNotDoThis\r\n[Build + Lint/goreleaser   ]   |     --source=\"'c:\\folder\\with\\package\\DoNotDoThis.1.0.nupkg'\"`.\r\n[Build + Lint/goreleaser   ]   |  * Switches and parameters are called simply options. Options come\r\n[Build + Lint/goreleaser   ]   |    after the subject. e.g. `choco install pkg1 --debug --verbose`.\r\n[Build + Lint/goreleaser   ]   |  * Never use the force option (`--force`/`-f`) in scripts (or really\r\n[Build + Lint/goreleaser   ]   |    otherwise as a default mode of use). Force is an override on\r\n[Build + Lint/goreleaser   ]   |    Chocolatey behavior. If you are wondering why Chocolatey isn't doing\r\n[Build + Lint/goreleaser   ]   |    something like the documentation says it should, it's likely because\r\n[Build + Lint/goreleaser   ]   |    you are using force. Stop.\r\n[Build + Lint/goreleaser   ]   |  * Always use full option name. If the short option is `-n`, and the\r\n[Build + Lint/goreleaser   ]   |    full option is `--name`, use `--name`. The only acceptable short\r\n[Build + Lint/goreleaser   ]   |    option for use in scripts is `-y`. Find option names in help docs\r\n[Build + Lint/goreleaser   ]   |    online or through `choco -?` /`choco [Command Name] -?`.\r\n[Build + Lint/goreleaser   ]   |  * For scripts that are running automated, always use `-y`. Do note\r\n[Build + Lint/goreleaser   ]   |    that even with `-y` passed, some things / state issues detected will\r\n[Build + Lint/goreleaser   ]   |    temporarily stop for input - the key here is temporarily. They will\r\n[Build + Lint/goreleaser   ]   |    continue without requiring any action after the temporary timeout\r\n[Build + Lint/goreleaser   ]   |    (typically 30 seconds).\r\n[Build + Lint/goreleaser   ]   |  * Full option names are prepended with two dashes, e.g. `--` or\r\n[Build + Lint/goreleaser   ]   |    `--debug --verbose --ignore-proxy`.\r\n[Build + Lint/goreleaser   ]   |  * When setting a value to an option, always put an equals (`=`)\r\n[Build + Lint/goreleaser   ]   |    between the name and the setting, e.g. `--source=\"'local'\"`.\r\n[Build + Lint/goreleaser   ]   |  * When setting a value to an option, always surround the value\r\n[Build + Lint/goreleaser   ]   |    properly with double quotes bookending apostrophes, e.g.\r\n[Build + Lint/goreleaser   ]   |    `--source=\"'internal_server'\"`.\r\n[Build + Lint/goreleaser   ]   |  * If you are building PowerShell scripts, you can most likely just\r\n[Build + Lint/goreleaser   ]   |    simply use apostrophes surrounding option values, e.g.\r\n[Build + Lint/goreleaser   ]   |    `--source='internal_server'`.\r\n[Build + Lint/goreleaser   ]   |  * Prefer upgrade to install in scripts. You can't `install` to a newer\r\n[Build + Lint/goreleaser   ]   |    version of something, but you can `choco upgrade` which will do both\r\n[Build + Lint/goreleaser   ]   |    upgrade or install (unless switched off explicitly).\r\n[Build + Lint/goreleaser   ]   |  * If you are sharing the script with others, pass `--source` to be\r\n[Build + Lint/goreleaser   ]   |    explicit about where the package is coming from. Use full link and\r\n[Build + Lint/goreleaser   ]   |    not source name ('https://community.chocolatey.org/api/v2' versus\r\n[Build + Lint/goreleaser   ]   |    'chocolatey').\r\n[Build + Lint/goreleaser   ]   |  * If parsing output, you might want to use `--limit-output`/`-r` to\r\n[Build + Lint/goreleaser   ]   |    get output in a more machine parseable format. NOTE: Not all\r\n[Build + Lint/goreleaser   ]   |    commands handle return of information in an easily digestible\r\n[Build + Lint/goreleaser   ]   |    output.\r\n[Build + Lint/goreleaser   ]   |  * Use exit codes to determine status. Chocolatey exits with 0 when\r\n[Build + Lint/goreleaser   ]   |    everything worked appropriately and other exits codes like 1 when\r\n[Build + Lint/goreleaser   ]   |    things error. There are package specific exit codes that are\r\n[Build + Lint/goreleaser   ]   |    recommended to be used and reboot indicating exit codes as well. To\r\n[Build + Lint/goreleaser   ]   |    check exit code when using PowerShell, immediately call\r\n[Build + Lint/goreleaser   ]   |    `$exitCode = $LASTEXITCODE` to get the value choco exited with.\r\n[Build + Lint/goreleaser   ]   | \r\n[Build + Lint/goreleaser   ]   | Here's an example following bad practices (line breaks added for\r\n[Build + Lint/goreleaser   ]   |  readability):\r\n[Build + Lint/goreleaser   ]   | \r\n[Build + Lint/goreleaser   ]   |   `choco install pkg1 -y -params '/Option:Value /Option2:value with\r\n[Build + Lint/goreleaser   ]   |    spaces' --c4b-option 'Yaass' --option-that-is-new 'dude upgrade'`\r\n[Build + Lint/goreleaser   ]   | \r\n[Build + Lint/goreleaser   ]   | Now here is that example written with best practices (again line\r\n[Build + Lint/goreleaser   ]   |  breaks added for readability - there are not line continuations\r\n[Build + Lint/goreleaser   ]   |  for choco):\r\n[Build + Lint/goreleaser   ]   | \r\n[Build + Lint/goreleaser   ]   |   `choco upgrade pkg1 -y --source=\"'https://community.chocolatey.org/api/v2'\"\r\n[Build + Lint/goreleaser   ]   |    --package-parameters=\"'/Option:Value /Option2:value with spaces'\"\r\n[Build + Lint/goreleaser   ]   |    --c4b-option=\"'Yaass'\" --option-that-is-new=\"'dude upgrade'\"`\r\n[Build + Lint/goreleaser   ]   | \r\n[Build + Lint/goreleaser   ]   | Note the differences between the two:\r\n[Build + Lint/goreleaser   ]   |  * Which is more self-documenting?\r\n[Build + Lint/goreleaser   ]   |  * Which will allow for the newest version of something installed or\r\n[Build + Lint/goreleaser   ]   |    upgraded to (which allows for more environmental consistency on\r\n[Build + Lint/goreleaser   ]   |    packages and versions)?\r\n[Build + Lint/goreleaser   ]   |  * Which may throw an error on a badly passed option?\r\n[Build + Lint/goreleaser   ]   |  * Which will throw errors on unknown option values? See explanation\r\n[Build + Lint/goreleaser   ]   |    below.\r\n[Build + Lint/goreleaser   ]   | \r\n[Build + Lint/goreleaser   ]   | Chocolatey ignores options it doesn't understand, but it can only\r\n[Build + Lint/goreleaser   ]   |  ignore option values if they are tied to the option with an\r\n[Build + Lint/goreleaser   ]   |  equals sign ('='). Note those last two options in the examples above?\r\n[Build + Lint/goreleaser   ]   |  If you roll off of a commercial edition or someone with older version\r\n[Build + Lint/goreleaser   ]   |  attempts to run the badly crafted script `--c4b-option 'Yaass'\r\n[Build + Lint/goreleaser   ]   |  --option-that-is-new 'dude upgrade'`, they are likely to see errors on\r\n[Build + Lint/goreleaser   ]   |  'Yaass' and 'dude upgrade' because they are not explicitly tied to the\r\n[Build + Lint/goreleaser   ]   |  option they are written after. Now compare that to the other script.\r\n[Build + Lint/goreleaser   ]   |  Choco will ignore `--c4b-option=\"'Yaass'\"` and\r\n[Build + Lint/goreleaser   ]   |  `--option-that-is-new=\"'dude upgrade'\"` as a whole when it doesn't\r\n[Build + Lint/goreleaser   ]   |  register the options. This means that your script doesn't error.\r\n[Build + Lint/goreleaser   ]   | \r\n[Build + Lint/goreleaser   ]   | Following these scripting best practices will ensure your scripts work\r\n[Build + Lint/goreleaser   ]   |  everywhere they are used and with newer versions of Chocolatey.\r\n[Build + Lint/goreleaser   ]   | \r\n[Build + Lint/goreleaser   ]   | \n[Build + Lint/goreleaser   ]   | Default Options and Switches\n[Build + Lint/goreleaser   ]   \u2705  Success - Main Test Chocolatey\n[Build + Lint/goreleaser   ] \u2b50 Run Post Set up Go\n[Build + Lint/goreleaser   ]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/actions-setup-go@v3/dist/cache-save/index.js] user= workdir=\n[Build + Lint/goreleaser   ]   \u2705  Success - Post Set up Go\n[Build + Lint/goreleaser   ] \ud83c\udfc1  Job succeeded\n[Build + Lint/runner / vale]   \ud83d\udc33  docker pull image=act-errata-ai-vale-action-reviewdog-dockeraction:latest platform= username= forcePull=false\n[Build + Lint/runner / vale]   \ud83d\udc33  docker create image=act-errata-ai-vale-action-reviewdog-dockeraction:latest platform= entrypoint=[] cmd=[\"latest\" \"README.md\" \"true\" \"github-check\" \"true\" \"error\" \"added\" \"\" \"\"]\n[Build + Lint/runner / vale]   \ud83d\udc33  docker run image=act-errata-ai-vale-action-reviewdog-dockeraction:latest platform= entrypoint=[] cmd=[\"latest\" \"README.md\" \"true\" \"github-check\" \"true\" \"error\" \"added\" \"\" \"\"]\n[Build + Lint/runner / vale] failed to remove container: Delete \"http://%2Fvar%2Frun%2Fdocker.sock/v1.41/containers/0bfd6e109decc361df31206be3b3fc2760734f7ca4b8830d8b72a47b5a0ae99f?force=1&v=1\": context canceled\n[Build + Lint/runner / vale]   \u274c  Failure - Main errata-ai/vale-action@reviewdog\n[Build + Lint/runner / vale] Get \"http://%2Fvar%2Frun%2Fdocker.sock/v1.41/containers/9aeee6b138013478b2b1388166a5da33ee9905558bfb203baf4f56b94829a86a/archive?path=%2Fvar%2Frun%2Fact%2Fworkflow%2Fpathcmd.txt\": context canceled\n[Build + Lint/runner / vale]   | Installing Vale version 'latest' ...\n[Build + Lint/runner / vale]   \ud83d\udcac  ::debug::Downloading https://github.com/errata-ai/vale/releases/download/v2.27.0/vale_2.27.0_Linux_64-bit.tar.gz\n[Build + Lint/runner / vale]   \ud83d\udcac  ::debug::Destination /tmp/09721532-c8d2-4941-8269-7c9e44d7c5c7\n[Build + Lint/runner / vale]   \ud83d\udcac  ::debug::download complete\n[Build + Lint/runner / vale]   \ud83d\udcac  ::debug::Checking tar --version\n[Build + Lint/runner / vale]   \ud83d\udcac  ::debug::tar (busybox) 1.30.1\n[Build + Lint/runner / vale]   | [command]/bin/tar xz --overwrite -C / -f /tmp/09721532-c8d2-4941-8269-7c9e44d7c5c7\n[Build + Lint/runner / vale]   | tar: can't open 'LICENSE': Permission denied\n[Build + Lint/runner / vale]   \u2757  ::error::Error: The process '/bin/tar' failed with exit code 1\n[Build + Lint/runner / vale] \ud83c\udfc1  Job succeeded\n",
    "actions_stderr": "Error: context canceled\n"
}