{"repository": "aeshell/aesh", "clone_url": "https://github.com/aeshell/aesh.git", "timestamp": "2023-05-31T19:01:32.025804Z", "commit_hash": "24ac00afdbbbab171b462a4b56eff9678c673d5c", "commit_message": "Merge pull request #33 from lincolnthree/master\n\nFixed and tested some file completion behavior.", "related_issues": "", "bug_patch": "diff --git a/src/main/java/org/jboss/aesh/util/FileLister.java b/src/main/java/org/jboss/aesh/util/FileLister.java\nindex d15bf9a..9321a1c 100644\n--- a/src/main/java/org/jboss/aesh/util/FileLister.java\n+++ b/src/main/java/org/jboss/aesh/util/FileLister.java\n@@ -32,30 +32,30 @@ public class FileLister {\n     private static final Pattern endsWithSlash = Config.isOSPOSIXCompatible() ?\n             Pattern.compile(\".*\\\\\"+Config.getPathSeparator()+\"$\") : Pattern.compile(\".*\\\\\\\\$\");\n \n-    private String incDir;\n+    private String token;\n     private File cwd;\n     private String rest;\n     private String lastDir;\n     private FileFilter fileFilter;\n \n-    public FileLister(String incDir, File cwd) {\n-        if(incDir == null)\n+    public FileLister(String token, File cwd) {\n+        if(token == null)\n             throw new IllegalArgumentException(\"Incoming directory cannot be null\");\n         if(cwd == null)\n             throw new IllegalArgumentException(\"Current working directory cannot be null\");\n-        this.incDir = Parser.switchEscapedSpacesToSpacesInWord(incDir);\n+        this.token = Parser.switchEscapedSpacesToSpacesInWord(token);\n         this.cwd = cwd;\n         findRestAndLastDir();\n         setFileFilter(Filter.ALL);\n     }\n \n-    public FileLister(String incDir, File cwd, Filter filter) {\n-        this(incDir, cwd);\n+    public FileLister(String token, File cwd, Filter filter) {\n+        this(token, cwd);\n         setFileFilter(filter);\n     }\n \n-    public FileLister(String incDir, File cwd, FileFilter fileFilter) {\n-        this(incDir, cwd);\n+    public FileLister(String token, File cwd, FileFilter fileFilter) {\n+        this(token, cwd);\n         this.fileFilter = fileFilter;\n     }\n \n@@ -77,20 +77,20 @@ public class FileLister {\n     public void findMatchingDirectories(CompleteOperation completion) {\n        completion.doAppendSeparator(false);\n \n-        //if incDir is empty, just list cwd\n-        if(incDir.trim().isEmpty()) {\n+        //if token is empty, just list cwd\n+        if(token.trim().isEmpty()) {\n             completion.addCompletionCandidates( listDirectory(cwd, null));\n         }\n         else if(startWithHome()) {\n-            if(isHomeAndIncDirADirectory()) {\n-                if(endWithSlash()) {\n+            if(isHomeAndTokenADirectory()) {\n+                if(tokenEndsWithSlash()) {\n                     completion.addCompletionCandidates(\n-                            listDirectory(new File(Config.getHomeDir()+incDir.substring(1)), null));\n+                            listDirectory(new File(Config.getHomeDir()+token.substring(1)), null));\n                 }\n                 else\n                     completion.addCompletionCandidate(Config.getPathSeparator());\n             }\n-            else if(isHomeAndIncDirAFile()) {\n+            else if(isHomeAndTokenAFile()) {\n                 completion.addCompletionCandidate(\"\");\n                 //append when we have a file\n                 completion.doAppendSeparator(true);\n@@ -101,16 +101,17 @@ public class FileLister {\n             }\n         }\n         else if(!startWithSlash()) {\n-            if(isCwdAndIncDirADirectory()) {\n-                if(endWithSlash()) {\n+            if(isCwdAndTokenADirectory()) {\n+                if(tokenEndsWithSlash()) {\n                     completion.addCompletionCandidates(\n                             listDirectory(new File(cwd.getAbsolutePath() +\n-                                    Config.getPathSeparator()+incDir), null));\n+                                    Config.getPathSeparator()+token), null));\n+                }\n+                else {\n+                   completion.addCompletionCandidates( listDirectory(cwd, token));\n                 }\n-                else\n-                    completion.addCompletionCandidate(Config.getPathSeparator());\n             }\n-            else if(isCwdAndIncDirAFile()) {\n+            else if(isCwdAndTokenAFile()) {\n                 listPossibleDirectories(completion);\n                 if(completion.getCompletionCandidates().size() == 1) {\n                     completion.getCompletionCandidates().set(0, \"\");\n@@ -129,15 +130,15 @@ public class FileLister {\n             }\n         }\n         else if(startWithSlash()) {\n-            if(isIncDirADirectory()) {\n-                if(endWithSlash()) {\n+            if(isTokenADirectory()) {\n+                if(tokenEndsWithSlash()) {\n                     completion.addCompletionCandidates(\n-                            listDirectory(new File(incDir), null));\n+                            listDirectory(new File(token), null));\n                 }\n                 else\n                     completion.addCompletionCandidate(Config.getPathSeparator());\n             }\n-            else if(isIncDirAFile()) {\n+            else if(isTokenAFile()) {\n                 listPossibleDirectories(completion);\n                 if(completion.getCompletionCandidates().size() == 1) {\n                     completion.getCompletionCandidates().set(0, \"\");\n@@ -166,41 +167,37 @@ public class FileLister {\n \n         //new offset tweaking to match the \"common\" way of returning completions\n         if(completion.getCompletionCandidates().size() == 1) {\n-            if(isIncDirADirectory() && !endWithSlash()) {\n-                completion.getCompletionCandidates().set(0, incDir +\n+            if(isTokenADirectory() && !tokenEndsWithSlash()) {\n+                completion.getCompletionCandidates().set(0, token +\n                         completion.getCompletionCandidates().get(0));\n \n-                completion.setOffset(completion.getCursor()-incDir.length());\n+                completion.setOffset(completion.getCursor()-token.length());\n             }\n-            else if(isIncDirAFile()) {\n-                completion.getCompletionCandidates().set(0, incDir +\n+            else if(isTokenAFile()) {\n+                completion.getCompletionCandidates().set(0, token +\n                         completion.getCompletionCandidates().get(0));\n \n-                completion.setOffset(completion.getCursor()-incDir.length());\n+                completion.setOffset(completion.getCursor()-token.length());\n                 completion.doAppendSeparator(true);\n             }\n-            else if(incDir != null) {\n-                if(rest != null && incDir.length() > rest.length()) {\n+            else if(token != null) {\n+                if(rest != null && token.length() > rest.length()) {\n                     completion.getCompletionCandidates().set(0,\n                             Parser.switchSpacesToEscapedSpacesInWord(\n-                            incDir.substring(0, incDir.length()-rest.length() )) +\n+                            token.substring(0, token.length()-rest.length() )) +\n                                     completion.getCompletionCandidates().get(0));\n \n-                    completion.setOffset(completion.getCursor()-incDir.length());\n+                    completion.setOffset(completion.getCursor()-token.length());\n                 }\n-                else if(rest != null && incDir.length() == rest.length()) {\n+                else if(rest != null && token.length() == rest.length()) {\n                     completion.setOffset(completion.getCursor()-(rest.length()+Parser.findNumberOfSpacesInWord(rest)));\n                 }\n                 else {\n-                    if(incDir.endsWith(Config.getPathSeparator()))\n-                        completion.getCompletionCandidates().set(0, Parser.switchSpacesToEscapedSpacesInWord(incDir) +\n-                                completion.getCompletionCandidates().get(0));\n-                    else\n-                        completion.getCompletionCandidates().set(0, Parser.switchSpacesToEscapedSpacesInWord(incDir) +\n-                                Config.getPathSeparator()+\n+                    if(token.endsWith(Config.getPathSeparator()))\n+                        completion.getCompletionCandidates().set(0, Parser.switchSpacesToEscapedSpacesInWord(token) +\n                                 completion.getCompletionCandidates().get(0));\n \n-                    completion.setOffset(completion.getCursor()-incDir.length());\n+                    completion.setOffset(completion.getCursor()-token.length());\n                 }\n             }\n             else {\n@@ -241,61 +238,61 @@ public class FileLister {\n     }\n \n     private void findRestAndLastDir() {\n-        if(incDir.contains(Config.getPathSeparator())) {\n-            lastDir = incDir.substring(0, incDir.lastIndexOf(Config.getPathSeparator()));\n-            rest = incDir.substring(incDir.lastIndexOf(Config.getPathSeparator())+1);\n+        if(token.contains(Config.getPathSeparator())) {\n+            lastDir = token.substring(0, token.lastIndexOf(Config.getPathSeparator()));\n+            rest = token.substring(token.lastIndexOf(Config.getPathSeparator())+1);\n         }\n         else {\n-            if(new File(cwd+Config.getPathSeparator()+incDir).exists())\n-                lastDir = incDir;\n+            if(new File(cwd+Config.getPathSeparator()+token).exists())\n+                lastDir = token;\n             else {\n-                rest = incDir;\n+                rest = token;\n             }\n         }\n     }\n \n-    private boolean isIncDirADirectory() {\n-        return new File(incDir).isDirectory();\n+    private boolean isTokenADirectory() {\n+        return new File(token).isDirectory();\n     }\n \n-    private boolean isIncDirAFile() {\n-        return new File(incDir).isFile();\n+    private boolean isTokenAFile() {\n+        return new File(token).isFile();\n     }\n \n-    private boolean isCwdAndIncDirADirectory() {\n+    private boolean isCwdAndTokenADirectory() {\n         return new File(cwd.getAbsolutePath() +\n-                Config.getPathSeparator() + incDir).isDirectory();\n+                Config.getPathSeparator() + token).isDirectory();\n     }\n \n-    private boolean isCwdAndIncDirAFile() {\n+    private boolean isCwdAndTokenAFile() {\n         return new File(cwd.getAbsolutePath() +\n-                Config.getPathSeparator() + incDir).isFile();\n+                Config.getPathSeparator() + token).isFile();\n     }\n \n-    private boolean isHomeAndIncDirADirectory() {\n+    private boolean isHomeAndTokenADirectory() {\n         return new File(Config.getHomeDir()+\n-                 incDir.substring(1)).isDirectory();\n+                 token.substring(1)).isDirectory();\n     }\n \n-    private boolean isHomeAndIncDirAFile() {\n+    private boolean isHomeAndTokenAFile() {\n         return new File(Config.getHomeDir()+\n-                incDir.substring(1)).isFile();\n+                token.substring(1)).isFile();\n     }\n \n     private boolean startWithParent() {\n-        return startsWithParent.matcher(incDir).matches();\n+        return startsWithParent.matcher(token).matches();\n     }\n \n     private boolean startWithHome() {\n-        return incDir.startsWith(\"~/\");\n+        return token.startsWith(\"~/\");\n     }\n \n     private boolean startWithSlash() {\n-        return startsWithSlash.matcher(incDir).matches();\n+        return startsWithSlash.matcher(token).matches();\n     }\n \n-    private boolean endWithSlash() {\n-        return endsWithSlash.matcher(incDir).matches();\n+    private boolean tokenEndsWithSlash() {\n+        return endsWithSlash.matcher(token).matches();\n     }\n \n     private List<String> listDirectory(File path, String rest) {\n@@ -324,7 +321,7 @@ public class FileLister {\n     @Override\n     public String toString() {\n         return \"FileLister{\" +\n-                \"incDir='\" + incDir + '\\'' +\n+                \"token='\" + token + '\\'' +\n                 \", cwd=\" + cwd +\n                 \", rest='\" + rest + '\\'' +\n                 \", lastDir='\" + lastDir + '\\'' +\ndiff --git a/src/test/java/org/jboss/aesh/util/FileListerTest.java b/src/test/java/org/jboss/aesh/util/FileListerTest.java\nnew file mode 100644\nindex 0000000..3f5798c\n--- /dev/null\n+++ b/src/test/java/org/jboss/aesh/util/FileListerTest.java\n@@ -0,0 +1,135 @@\n+/*\n+ * Copyright 2013 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Eclipse Public License version 1.0, available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ */\n+package org.jboss.aesh.util;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.List;\n+\n+import org.jboss.aesh.complete.CompleteOperation;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+/**\n+ * @author <a href=\"mailto:lincolnbaxter@gmail.com\">Lincoln Baxter, III</a>\n+ * \n+ */\n+public class FileListerTest\n+{\n+   private File workingDir;\n+\n+   @Before\n+   public void before() throws IOException\n+   {\n+      workingDir = File.createTempFile(\"aesh\", \".FileListerTest\");\n+      workingDir.delete();\n+      workingDir.mkdirs();\n+   }\n+\n+   @After\n+   public void after()\n+   {\n+      delete(workingDir, true);\n+   }\n+\n+   @Test\n+   public void testFullCompletionWithSingleSubdirectory()\n+   {\n+      new File(workingDir, \"child\").mkdir();\n+      CompleteOperation completion = new CompleteOperation(\"cd \", 2);\n+      new FileLister(\"\", workingDir).findMatchingDirectories(completion);\n+\n+      List<String> candidates = completion.getCompletionCandidates();\n+      Assert.assertEquals(1, candidates.size());\n+      Assert.assertEquals(\"child/\", candidates.get(0));\n+   }\n+\n+   @Test\n+   public void testPartialCompletionWithSingleSubdirectory()\n+   {\n+      new File(workingDir, \"child\").mkdir();\n+      CompleteOperation completion = new CompleteOperation(\"cd ch\", 2);\n+      new FileLister(\"ch\", workingDir).findMatchingDirectories(completion);\n+\n+      List<String> candidates = completion.getCompletionCandidates();\n+      Assert.assertEquals(1, candidates.size());\n+      Assert.assertEquals(\"child/\", candidates.get(0));\n+   }\n+\n+   @Test\n+   public void testFullCompletionWithMultipleSubdirectory()\n+   {\n+      new File(workingDir, \"child\").mkdir();\n+      new File(workingDir, \"child2\").mkdir();\n+      CompleteOperation completion = new CompleteOperation(\"cd \", 2);\n+      new FileLister(\"\", workingDir).findMatchingDirectories(completion);\n+\n+      List<String> candidates = completion.getCompletionCandidates();\n+      Assert.assertEquals(2, candidates.size());\n+      Assert.assertEquals(\"child/\", candidates.get(0));\n+      Assert.assertEquals(\"child2/\", candidates.get(1));\n+   }\n+\n+   @Test\n+   public void testPartialCompletionWithMultipleSubdirectory()\n+   {\n+      new File(workingDir, \"child\").mkdir();\n+      new File(workingDir, \"child2\").mkdir();\n+      CompleteOperation completion = new CompleteOperation(\"cd ch\", 4);\n+      new FileLister(\"ch\", workingDir).findMatchingDirectories(completion);\n+\n+      List<String> candidates = completion.getCompletionCandidates();\n+      Assert.assertEquals(1, candidates.size());\n+      Assert.assertEquals(\"child\", candidates.get(0));\n+   }\n+\n+   public static boolean delete(File file, final boolean recursive)\n+   {\n+      boolean result = false;\n+      if (recursive)\n+      {\n+         result = _deleteRecursive(file, true);\n+      }\n+      else\n+      {\n+         if ((file.listFiles() != null) && (file.listFiles().length != 0))\n+         {\n+            throw new RuntimeException(\"directory not empty\");\n+         }\n+\n+         result = file.delete();\n+      }\n+      return result;\n+   }\n+\n+   private static boolean _deleteRecursive(final File file, final boolean collect)\n+   {\n+      boolean result = true;\n+\n+      File[] children = file.listFiles();\n+      if (children != null)\n+      {\n+         for (File sf : children)\n+         {\n+            if (sf.isDirectory())\n+            {\n+               if (!_deleteRecursive(sf, false))\n+                  result = false;\n+            }\n+            else\n+            {\n+               if (!sf.delete())\n+                  result = false;\n+            }\n+         }\n+      }\n+\n+      return file.delete() && result;\n+   }\n+}\n", "test_patch": "diff --git a/src/test/java/org/jboss/aesh/cl/completer/FileOptionCompleterTest.java b/src/test/java/org/jboss/aesh/cl/completer/FileOptionCompleterTest.java\nindex 5572d8e..9fdcc9e 100644\n--- a/src/test/java/org/jboss/aesh/cl/completer/FileOptionCompleterTest.java\n+++ b/src/test/java/org/jboss/aesh/cl/completer/FileOptionCompleterTest.java\n@@ -18,44 +18,111 @@ import org.junit.Test;\n  * \n  * @author <a href=\"ggastald@redhat.com\">George Gastaldi</a>\n  */\n-public class FileOptionCompleterTest {\n-\n-\t@Test\n-\tpublic void testCompleterBaseDir() {\n-\t\tFile file = new File(System.getProperty(\"user.dir\"));\n-\t\tFileOptionCompleter completer = new FileOptionCompleter();\n-\t\tAssert.assertEquals(file, completer.getWorkingDirectory());\n-\t}\n-\n-\t@Test(expected = IllegalArgumentException.class)\n-\tpublic void testCompleterIllegalBaseDir() throws IOException {\n-\t\tFile file = File.createTempFile(\"tmp\", \".tmp\");\n-\t\tfile.deleteOnExit();\n-\t\tnew FileOptionCompleter(file);\n-\t}\n-\n-\t@Test(expected = IllegalArgumentException.class)\n-\tpublic void testCompleterIllegalFilter() throws IOException {\n-\t\tFile file = File.createTempFile(\"tmp\", \".tmp\");\n-\t\tfile.deleteOnExit();\n-\t\tnew FileOptionCompleter(file, null);\n-\t}\n-\n-\t@Test\n-\tpublic void testCompleter() throws IOException {\n-\t\tFile file = File.createTempFile(\"tmp\", \".tmp\");\n-\t\tfile.delete();\n-\t\tfile.mkdir();\n-\t\tfile.deleteOnExit();\n-\t\tFile child = new File(file, \"child.txt\");\n-\t\tchild.createNewFile();\n-\t\tchild.deleteOnExit();\n-\t\tFileOptionCompleter completer = new FileOptionCompleter(file);\n-\t\tCompleterData data = new CompleterData(\"\", null);\n-\t\tcompleter.complete(data);\n-\t\tAssert.assertNotNull(data.getCompleterValues());\n-\t\tAssert.assertEquals(1, data.getCompleterValues().size());\n-\t\tAssert.assertEquals(\"/\" + child.getName(), data.getCompleterValues().get(0));\n-\t}\n+public class FileOptionCompleterTest\n+{\n+\n+   @Test\n+   public void testCompleterBaseDir()\n+   {\n+      File file = new File(System.getProperty(\"user.dir\"));\n+      FileOptionCompleter completer = new FileOptionCompleter();\n+      Assert.assertEquals(file, completer.getWorkingDirectory());\n+   }\n+\n+   @Test(expected = IllegalArgumentException.class)\n+   public void testCompleterIllegalBaseDir() throws IOException\n+   {\n+      File file = File.createTempFile(\"tmp\", \".tmp\");\n+      file.deleteOnExit();\n+      new FileOptionCompleter(file);\n+   }\n+\n+   @Test(expected = IllegalArgumentException.class)\n+   public void testCompleterIllegalFilter() throws IOException\n+   {\n+      File file = File.createTempFile(\"tmp\", \".tmp\");\n+      file.deleteOnExit();\n+      new FileOptionCompleter(file, null);\n+   }\n+\n+   @Test\n+   public void testCompleterSingleFile() throws IOException\n+   {\n+      File file = File.createTempFile(\"tmp\", \".tmp\");\n+      file.delete();\n+      file.mkdir();\n+      file.deleteOnExit();\n+      File child = new File(file, \"child.txt\");\n+      child.createNewFile();\n+      child.deleteOnExit();\n+      FileOptionCompleter completer = new FileOptionCompleter(file);\n+      CompleterData data = new CompleterData(\"\", null);\n+      completer.complete(data);\n+      Assert.assertNotNull(data.getCompleterValues());\n+      Assert.assertEquals(1, data.getCompleterValues().size());\n+      Assert.assertEquals(child.getName(), data.getCompleterValues().get(0));\n+   }\n+\n+   @Test\n+   public void testCompleterMultipleFile() throws IOException\n+   {\n+      File file = File.createTempFile(\"tmp\", \".tmp\");\n+      file.delete();\n+      file.mkdir();\n+      file.deleteOnExit();\n+      File child = new File(file, \"child.txt\");\n+      child.createNewFile();\n+      child.deleteOnExit();\n+      File child2 = new File(file, \"child2.txt\");\n+      child2.createNewFile();\n+      child2.deleteOnExit();\n+      FileOptionCompleter completer = new FileOptionCompleter(file);\n+      CompleterData data = new CompleterData(\"\", null);\n+      completer.complete(data);\n+      Assert.assertNotNull(data.getCompleterValues());\n+      Assert.assertEquals(2, data.getCompleterValues().size());\n+      Assert.assertEquals(child.getName(), data.getCompleterValues().get(0));\n+      Assert.assertEquals(child2.getName(), data.getCompleterValues().get(1));\n+   }\n+\n+   @Test\n+   public void testCompleterMultipleDirectory() throws IOException\n+   {\n+      File file = File.createTempFile(\"tmp\", \".tmp\");\n+      file.delete();\n+      file.mkdir();\n+      file.deleteOnExit();\n+      File child = new File(file, \"child\");\n+      child.mkdir();\n+      child.deleteOnExit();\n+      File child2 = new File(file, \"child2\");\n+      child2.mkdir();\n+      child2.deleteOnExit();\n+      FileOptionCompleter completer = new FileOptionCompleter(file);\n+\n+      CompleterData data = new CompleterData(\"\", null);\n+      completer.complete(data);\n+      Assert.assertNotNull(data.getCompleterValues());\n+      Assert.assertEquals(2, data.getCompleterValues().size());\n+      Assert.assertEquals(child.getName() + \"/\", data.getCompleterValues()\n+               .get(0));\n+      Assert.assertEquals(child2.getName() + \"/\", data.getCompleterValues()\n+               .get(1));\n+\n+      data = new CompleterData(\"ch\", null);\n+      completer.complete(data);\n+      Assert.assertNotNull(data.getCompleterValues());\n+      Assert.assertEquals(1, data.getCompleterValues().size());\n+      Assert.assertEquals(child.getName(), data.getCompleterValues().get(0));\n+\n+      data = new CompleterData(\"child\", null);\n+      completer.complete(data);\n+      Assert.assertNotNull(data.getCompleterValues());\n+      Assert.assertEquals(2, data.getCompleterValues().size());\n+      Assert.assertEquals(child.getName() + \"/\", data.getCompleterValues()\n+               .get(0));\n+      Assert.assertEquals(child2.getName() + \"/\", data.getCompleterValues()\n+               .get(1));\n+   }\n \n }\n"}
