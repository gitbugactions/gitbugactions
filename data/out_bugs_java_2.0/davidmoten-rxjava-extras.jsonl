{"repository": "davidmoten/rxjava-extras", "clone_url": "https://github.com/davidmoten/rxjava-extras.git", "timestamp": "2023-05-31T18:46:52.648550Z", "commit_hash": "1263c8abd7280035498734e067460e79e149b67d", "commit_message": "match bug fix 2\n", "related_issues": "", "bug_patch": "diff --git a/src/main/java/com/github/davidmoten/rx/internal/operators/OnSubscribeMatch.java b/src/main/java/com/github/davidmoten/rx/internal/operators/OnSubscribeMatch.java\nindex 84f79f1..051b60c 100644\n--- a/src/main/java/com/github/davidmoten/rx/internal/operators/OnSubscribeMatch.java\n+++ b/src/main/java/com/github/davidmoten/rx/internal/operators/OnSubscribeMatch.java\n@@ -231,18 +231,7 @@ public final class OnSubscribeMatch<A, B, K, C> implements OnSubscribe<C> {\n                 }\n             }\n             // requests are batched so that each source gets a turn\n-            if (requestFromA == requestSize && completed == COMPLETED_B) {\n-                requestFromA = 0;\n-                aSub.requestMore(requestSize);\n-            } else if (requestFromB == requestSize && completed == COMPLETED_A) {\n-                requestFromB = 0;\n-                bSub.requestMore(requestSize);\n-            } else if (requestFromA == requestSize && requestFromB == requestSize) {\n-                requestFromA = 0;\n-                requestFromB = 0;\n-                aSub.requestMore(requestSize);\n-                bSub.requestMore(requestSize);\n-            }\n+            checkToRequestMore();\n             return numEmitted;\n         }\n \n@@ -259,6 +248,23 @@ public final class OnSubscribeMatch<A, B, K, C> implements OnSubscribe<C> {\n             if (done) {\n                 clear();\n                 child.onCompleted();\n+            } else {\n+                checkToRequestMore();\n+            }\n+        }\n+\n+        private void checkToRequestMore() {\n+            if (requestFromA == requestSize && completed == COMPLETED_B) {\n+                requestFromA = 0;\n+                aSub.requestMore(requestSize);\n+            } else if (requestFromB == requestSize && completed == COMPLETED_A) {\n+                requestFromB = 0;\n+                bSub.requestMore(requestSize);\n+            } else if (requestFromA == requestSize && requestFromB == requestSize) {\n+                requestFromA = 0;\n+                requestFromB = 0;\n+                aSub.requestMore(requestSize);\n+                bSub.requestMore(requestSize);\n             }\n         }\n \n", "test_patch": "diff --git a/src/test/java/com/github/davidmoten/rx/internal/operators/OnSubscribeMatchTest.java b/src/test/java/com/github/davidmoten/rx/internal/operators/OnSubscribeMatchTest.java\nindex a0faf48..2ccf46d 100644\n--- a/src/test/java/com/github/davidmoten/rx/internal/operators/OnSubscribeMatchTest.java\n+++ b/src/test/java/com/github/davidmoten/rx/internal/operators/OnSubscribeMatchTest.java\n@@ -49,6 +49,13 @@ public class OnSubscribeMatchTest {\n         Observable<Integer> b = Observable.just(2).repeat(1000).concatWith(Observable.just(1));\n         match(a, b, 1);\n     }\n+    \n+    @Test\n+    public void testKeepsRequestingSwitched() {\n+        Observable<Integer> a = Observable.just(2).repeat(1000).concatWith(Observable.just(1));\n+        Observable<Integer> b = Observable.just(1);\n+        match(a, b, 1);\n+    }\n \n     @Test\n     public void test2() {\n@@ -98,6 +105,13 @@ public class OnSubscribeMatchTest {\n         Observable<Integer> b = Observable.just(1);\n         match(a, b, 1);\n     }\n+    \n+    @Test\n+    public void testNoMatchExistsForAtLeastOneFirstLongerSwitched() {\n+        Observable<Integer> a = Observable.just(1);\n+        Observable<Integer> b = Observable.just(1, 2);\n+        match(a, b, 1);\n+    }\n \n     @Test\n     public void testNoMatchExistsForAtLeastOneSameLength() {\n"}
{"repository": "davidmoten/rxjava-extras", "clone_url": "https://github.com/davidmoten/rxjava-extras.git", "timestamp": "2023-05-31T18:57:53.319396Z", "commit_hash": "56c52485c7eaf4d26feae2535ead054e7abdaa08", "commit_message": "fix match bug\n", "related_issues": "", "bug_patch": "diff --git a/src/main/java/com/github/davidmoten/rx/internal/operators/OnSubscribeMatch.java b/src/main/java/com/github/davidmoten/rx/internal/operators/OnSubscribeMatch.java\nindex c03858a..84f79f1 100644\n--- a/src/main/java/com/github/davidmoten/rx/internal/operators/OnSubscribeMatch.java\n+++ b/src/main/java/com/github/davidmoten/rx/internal/operators/OnSubscribeMatch.java\n@@ -82,7 +82,7 @@ public final class OnSubscribeMatch<A, B, K, C> implements OnSubscribe<C> {\n \n         // completion state machine\n         private int completed = COMPLETED_NONE;\n-        // completion values\n+        // completion states\n         private static final int COMPLETED_NONE = 0;\n         private static final int COMPLETED_A = 1;\n         private static final int COMPLETED_B = 2;\n@@ -231,7 +231,13 @@ public final class OnSubscribeMatch<A, B, K, C> implements OnSubscribe<C> {\n                 }\n             }\n             // requests are batched so that each source gets a turn\n-            if (requestFromA == requestSize && requestFromB == requestSize) {\n+            if (requestFromA == requestSize && completed == COMPLETED_B) {\n+                requestFromA = 0;\n+                aSub.requestMore(requestSize);\n+            } else if (requestFromB == requestSize && completed == COMPLETED_A) {\n+                requestFromB = 0;\n+                bSub.requestMore(requestSize);\n+            } else if (requestFromA == requestSize && requestFromB == requestSize) {\n                 requestFromA = 0;\n                 requestFromB = 0;\n                 aSub.requestMore(requestSize);\n", "test_patch": "diff --git a/src/test/java/com/github/davidmoten/rx/internal/operators/OnSubscribeMatchTest.java b/src/test/java/com/github/davidmoten/rx/internal/operators/OnSubscribeMatchTest.java\nindex d3d5171..a0faf48 100644\n--- a/src/test/java/com/github/davidmoten/rx/internal/operators/OnSubscribeMatchTest.java\n+++ b/src/test/java/com/github/davidmoten/rx/internal/operators/OnSubscribeMatchTest.java\n@@ -42,6 +42,13 @@ public class OnSubscribeMatchTest {\n                 .awaitTerminalEvent(5, TimeUnit.SECONDS) //\n                 .assertCompleted().assertValuesSet(1, 2);\n     }\n+    \n+    @Test\n+    public void testKeepsRequesting() {\n+        Observable<Integer> a = Observable.just(1);\n+        Observable<Integer> b = Observable.just(2).repeat(1000).concatWith(Observable.just(1));\n+        match(a, b, 1);\n+    }\n \n     @Test\n     public void test2() {\n"}
