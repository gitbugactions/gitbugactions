{"repository": "barend/java-iban", "clone_url": "https://github.com/barend/java-iban.git", "timestamp": "2023-05-31T18:50:32.025788Z", "commit_hash": "3219bd77180785a00aba0860e52abf66b69c5952", "commit_message": "Merge branch 'fix_issue_92', fixes #92.\n", "related_issues": "", "bug_patch": "diff --git a/src/main/java/nl/garvelink/iban/IBAN.java b/src/main/java/nl/garvelink/iban/IBAN.java\nindex 1c85f80..2ebefb5 100644\n--- a/src/main/java/nl/garvelink/iban/IBAN.java\n+++ b/src/main/java/nl/garvelink/iban/IBAN.java\n@@ -150,7 +150,11 @@ public final class IBAN implements Serializable {\n         StringBuilder sb =\n             new StringBuilder(CountryCodes.LONGEST_IBAN_LENGTH).append(countryCode).append(\"00\").append(bban);\n         int checkDigits = Modulo97.calculateCheckDigits(sb);\n-        sb.replace(2, 4, Integer.toString(checkDigits));\n+        if (checkDigits < 10) {\n+            sb.setCharAt(3, (char)('0' + checkDigits));\n+        } else {\n+            sb.replace(2, 4, Integer.toString(checkDigits));\n+        }\n         return parse(sb);\n     }\n \n", "test_patch": "diff --git a/src/test/java/nl/garvelink/iban/IBANTest.java b/src/test/java/nl/garvelink/iban/IBANTest.java\nindex 8308de6..32a9aa9 100644\n--- a/src/test/java/nl/garvelink/iban/IBANTest.java\n+++ b/src/test/java/nl/garvelink/iban/IBANTest.java\n@@ -38,8 +38,8 @@ import static org.junit.jupiter.api.Assertions.fail;\n  * Miscellaneous tests for the {@link IBAN} class.\n  */\n public class IBANTest {\n-    private static final String VALID_IBAN = \"NL91ABNA0417164300\";\n-    private static final String INVALID_IBAN = \"NL12ABNA0417164300\";\n+    private static final String VALID_IBAN = \"NL03ABNA0143267469\";\n+    private static final String INVALID_IBAN = \"NL13ABNA0143267469\";\n \n     @Test\n     public void getCountryCodeShouldReturnTheCountryCode() {\n@@ -48,7 +48,7 @@ public class IBANTest {\n \n     @Test\n     public void getCheckDigitsShouldReturnTheCheckDigits() {\n-        assertThat(IBAN.parse(VALID_IBAN).getCheckDigits(), is(\"91\"));\n+        assertThat(IBAN.parse(VALID_IBAN).getCheckDigits(), is(\"03\"));\n     }\n \n     @Test\n@@ -200,7 +200,7 @@ public class IBANTest {\n     public void testSerializedFormCompatibility() throws IOException, ClassNotFoundException {\n         // This was manually sampled from the preceding test. This test is to ensure that the serialised form remains\n         // stable as the library evolves.\n-        String serializedForm = \"rO0ABXNyAB5ubC5nYXJ2ZWxpbmsuaWJhbi5JQkFOJE1lbWVudG8AAAAAAAAAAQwAAHhwdxwAAAAAAAAAAQASTkw5MUFCTkEwNDE3MTY0MzAweA==\";\n+        String serializedForm = \"rO0ABXNyAB5ubC5nYXJ2ZWxpbmsuaWJhbi5JQkFOJE1lbWVudG8AAAAAAAAAAQwAAHhwdxwAAAAAAAAAAQASTkwwM0FCTkEwMTQzMjY3NDY5eA==\";\n         ObjectInputStream ois = new ObjectInputStream(new ByteArrayInputStream(Base64.getDecoder().decode(serializedForm)));\n         IBAN copy = (IBAN) ois.readObject();\n         assertThat(copy.toPlainString(), is(equalTo(VALID_IBAN)));\n"}
{"repository": "barend/java-iban", "clone_url": "https://github.com/barend/java-iban.git", "timestamp": "2023-05-31T18:59:00.656233Z", "commit_hash": "4370d13370392dbbe46efaf04784ee9e85966bfe", "commit_message": "Merge pull request #93 from trustlydaniel/fix_issue_92\n\nFix issue with leading zero check digits", "related_issues": "", "bug_patch": "diff --git a/src/main/java/nl/garvelink/iban/IBAN.java b/src/main/java/nl/garvelink/iban/IBAN.java\nindex 1c85f80..55b9df5 100644\n--- a/src/main/java/nl/garvelink/iban/IBAN.java\n+++ b/src/main/java/nl/garvelink/iban/IBAN.java\n@@ -150,7 +150,7 @@ public final class IBAN implements Serializable {\n         StringBuilder sb =\n             new StringBuilder(CountryCodes.LONGEST_IBAN_LENGTH).append(countryCode).append(\"00\").append(bban);\n         int checkDigits = Modulo97.calculateCheckDigits(sb);\n-        sb.replace(2, 4, Integer.toString(checkDigits));\n+        sb.replace(2, 4, String.format(\"%02d\", checkDigits));\n         return parse(sb);\n     }\n \n", "test_patch": "diff --git a/src/test/java/nl/garvelink/iban/IBANTest.java b/src/test/java/nl/garvelink/iban/IBANTest.java\nindex 8308de6..32a9aa9 100644\n--- a/src/test/java/nl/garvelink/iban/IBANTest.java\n+++ b/src/test/java/nl/garvelink/iban/IBANTest.java\n@@ -38,8 +38,8 @@ import static org.junit.jupiter.api.Assertions.fail;\n  * Miscellaneous tests for the {@link IBAN} class.\n  */\n public class IBANTest {\n-    private static final String VALID_IBAN = \"NL91ABNA0417164300\";\n-    private static final String INVALID_IBAN = \"NL12ABNA0417164300\";\n+    private static final String VALID_IBAN = \"NL03ABNA0143267469\";\n+    private static final String INVALID_IBAN = \"NL13ABNA0143267469\";\n \n     @Test\n     public void getCountryCodeShouldReturnTheCountryCode() {\n@@ -48,7 +48,7 @@ public class IBANTest {\n \n     @Test\n     public void getCheckDigitsShouldReturnTheCheckDigits() {\n-        assertThat(IBAN.parse(VALID_IBAN).getCheckDigits(), is(\"91\"));\n+        assertThat(IBAN.parse(VALID_IBAN).getCheckDigits(), is(\"03\"));\n     }\n \n     @Test\n@@ -200,7 +200,7 @@ public class IBANTest {\n     public void testSerializedFormCompatibility() throws IOException, ClassNotFoundException {\n         // This was manually sampled from the preceding test. This test is to ensure that the serialised form remains\n         // stable as the library evolves.\n-        String serializedForm = \"rO0ABXNyAB5ubC5nYXJ2ZWxpbmsuaWJhbi5JQkFOJE1lbWVudG8AAAAAAAAAAQwAAHhwdxwAAAAAAAAAAQASTkw5MUFCTkEwNDE3MTY0MzAweA==\";\n+        String serializedForm = \"rO0ABXNyAB5ubC5nYXJ2ZWxpbmsuaWJhbi5JQkFOJE1lbWVudG8AAAAAAAAAAQwAAHhwdxwAAAAAAAAAAQASTkwwM0FCTkEwMTQzMjY3NDY5eA==\";\n         ObjectInputStream ois = new ObjectInputStream(new ByteArrayInputStream(Base64.getDecoder().decode(serializedForm)));\n         IBAN copy = (IBAN) ois.readObject();\n         assertThat(copy.toPlainString(), is(equalTo(VALID_IBAN)));\n"}
{"repository": "barend/java-iban", "clone_url": "https://github.com/barend/java-iban.git", "timestamp": "2023-05-31T19:05:55.249533Z", "commit_hash": "1e827ada6ad5ca16bc8c8fae7a344b15191afb1a", "commit_message": "Fix issue with leading zero check digits\n\nFixes #92\n", "related_issues": "", "bug_patch": "diff --git a/src/main/java/nl/garvelink/iban/IBAN.java b/src/main/java/nl/garvelink/iban/IBAN.java\nindex 1c85f80..55b9df5 100644\n--- a/src/main/java/nl/garvelink/iban/IBAN.java\n+++ b/src/main/java/nl/garvelink/iban/IBAN.java\n@@ -150,7 +150,7 @@ public final class IBAN implements Serializable {\n         StringBuilder sb =\n             new StringBuilder(CountryCodes.LONGEST_IBAN_LENGTH).append(countryCode).append(\"00\").append(bban);\n         int checkDigits = Modulo97.calculateCheckDigits(sb);\n-        sb.replace(2, 4, Integer.toString(checkDigits));\n+        sb.replace(2, 4, String.format(\"%02d\", checkDigits));\n         return parse(sb);\n     }\n \n", "test_patch": "diff --git a/src/test/java/nl/garvelink/iban/IBANTest.java b/src/test/java/nl/garvelink/iban/IBANTest.java\nindex 8308de6..32a9aa9 100644\n--- a/src/test/java/nl/garvelink/iban/IBANTest.java\n+++ b/src/test/java/nl/garvelink/iban/IBANTest.java\n@@ -38,8 +38,8 @@ import static org.junit.jupiter.api.Assertions.fail;\n  * Miscellaneous tests for the {@link IBAN} class.\n  */\n public class IBANTest {\n-    private static final String VALID_IBAN = \"NL91ABNA0417164300\";\n-    private static final String INVALID_IBAN = \"NL12ABNA0417164300\";\n+    private static final String VALID_IBAN = \"NL03ABNA0143267469\";\n+    private static final String INVALID_IBAN = \"NL13ABNA0143267469\";\n \n     @Test\n     public void getCountryCodeShouldReturnTheCountryCode() {\n@@ -48,7 +48,7 @@ public class IBANTest {\n \n     @Test\n     public void getCheckDigitsShouldReturnTheCheckDigits() {\n-        assertThat(IBAN.parse(VALID_IBAN).getCheckDigits(), is(\"91\"));\n+        assertThat(IBAN.parse(VALID_IBAN).getCheckDigits(), is(\"03\"));\n     }\n \n     @Test\n@@ -200,7 +200,7 @@ public class IBANTest {\n     public void testSerializedFormCompatibility() throws IOException, ClassNotFoundException {\n         // This was manually sampled from the preceding test. This test is to ensure that the serialised form remains\n         // stable as the library evolves.\n-        String serializedForm = \"rO0ABXNyAB5ubC5nYXJ2ZWxpbmsuaWJhbi5JQkFOJE1lbWVudG8AAAAAAAAAAQwAAHhwdxwAAAAAAAAAAQASTkw5MUFCTkEwNDE3MTY0MzAweA==\";\n+        String serializedForm = \"rO0ABXNyAB5ubC5nYXJ2ZWxpbmsuaWJhbi5JQkFOJE1lbWVudG8AAAAAAAAAAQwAAHhwdxwAAAAAAAAAAQASTkwwM0FCTkEwMTQzMjY3NDY5eA==\";\n         ObjectInputStream ois = new ObjectInputStream(new ByteArrayInputStream(Base64.getDecoder().decode(serializedForm)));\n         IBAN copy = (IBAN) ois.readObject();\n         assertThat(copy.toPlainString(), is(equalTo(VALID_IBAN)));\n"}
{"repository": "barend/java-iban", "clone_url": "https://github.com/barend/java-iban.git", "timestamp": "2023-05-31T19:13:37.121074Z", "commit_hash": "f88ff9c8c493f4d24a23863384e27c0d33eca4a3", "commit_message": "update to swift ref v90\n\nFixes #42\n", "related_issues": "", "bug_patch": "diff --git a/.editorconfig b/.editorconfig\nindex 9bab339..6471687 100644\n--- a/.editorconfig\n+++ b/.editorconfig\n@@ -5,7 +5,7 @@ end_of_line = lf\n insert_final_newline = true\n charset = utf-8\n \n-[*.java]\n+[*.{java,j2}]\n indent_style = space\n indent_size = 4\n max_line_length = 120\n@@ -14,3 +14,7 @@ trim_trailing_whitespace = true\n [*.md]\n indent_style = space\n indent_size = 4\n+\n+[*.yml]\n+indent_style = space\n+indent_size = 2\ndiff --git a/docs/index.md b/docs/index.md\nindex 0f0ef3c..ef28b46 100644\n--- a/docs/index.md\n+++ b/docs/index.md\n@@ -112,6 +112,10 @@ Obtain an `IBAN` instance using one of the static factory methods: `valueOf( )` \n   third-party artifact repository from the pom ([#33][i33]), simplifying the supply chain. It also makes the build a\n   little quicker. The downside is that the build now requires Python 3 and a bourne shell. It should build on WSL2 just\n   fine, but there is no pom profile to support Windows native builds.\n+* Update to revision 90 of the SWIFT IBAN Registry\n+    * Sudan (SD): added.\n+* Update to IBAN.com Experimental List\n+    * No changes\n \n [i33]: https://github.com/barend/java-iban/issues/33\n \ndiff --git a/src/main/resources/nl/garvelink/iban/IBAN.yml b/src/main/resources/nl/garvelink/iban/IBAN.yml\nindex 549cd29..2d2c55f 100755\n--- a/src/main/resources/nl/garvelink/iban/IBAN.yml\n+++ b/src/main/resources/nl/garvelink/iban/IBAN.yml\n@@ -962,6 +962,20 @@ ibans:\n         position: 10\n         length: 2\n   -\n+    name: Sudan\n+    country_code: SD\n+    length: 18\n+    flags:\n+      sepa_country: no\n+      in_swift_registry: yes\n+    embeds:\n+      bank_code:\n+        position: 4\n+        length: 2\n+      branch_code:\n+        position: 6\n+        length: 12\n+  -\n     name: Sweden\n     country_code: SE\n     length: 24\n", "test_patch": "diff --git a/src/test/java/nl/garvelink/iban/CountryCodesParameterizedTest.java b/src/test/java/nl/garvelink/iban/CountryCodesParameterizedTest.java\nindex 7f9ec36..fafc9f6 100644\n--- a/src/test/java/nl/garvelink/iban/CountryCodesParameterizedTest.java\n+++ b/src/test/java/nl/garvelink/iban/CountryCodesParameterizedTest.java\n@@ -125,6 +125,7 @@ public class CountryCodesParameterizedTest {\n             td( \"Serbia\",                     true , false, \"RS35260005601001611379\",          \"260\"     , null      , \"RS35 2600 0560 1001 6113 79\" ),            //SWIFT\n             td( \"Saudi Arabia\",               true , false, \"SA0380000000608010167519\",        \"80\"      , null      , \"SA03 8000 0000 6080 1016 7519\"),           //SWIFT\n             td( \"Seychelles\",                 true , false, \"SC18SSCB11010000000000001497USD\", \"SSCB11\"  , \"01\"      , \"SC18 SSCB 1101 0000 0000 0000 1497 USD\" ), //SWIFT\n+            td( \"Sudan\",                      true , false, \"SD2129010501234001\",              \"29\"      , \"010501234001\", \"SD21 2901 0501 2340 01\"),              //SWIFT\n             td( \"Sweden\",                     true , true , \"SE4550000000058398257466\",        \"500\"     , null      , \"SE45 5000 0000 0583 9825 7466\" ),          //SWIFT\n             td( \"Slovenia\",                   true , true , \"SI56263300012039086\",             \"26330\"   , null      , \"SI56 2633 0001 2039 086\" ),                //SWIFT\n             td( \"Slovakia\",                   true , true , \"SK3112000000198742637541\",        \"1200\"    , null      , \"SK31 1200 0000 1987 4263 7541\" ),          //SWIFT\n"}
{"repository": "barend/java-iban", "clone_url": "https://github.com/barend/java-iban.git", "timestamp": "2023-05-31T19:22:29.928277Z", "commit_hash": "e366cc4e4643d1a11f844f2ce2ca72f6d857ced9", "commit_message": "France (FR): branch ID (fixes #30)\n", "related_issues": "", "bug_patch": "diff --git a/docs/index.md b/docs/index.md\nindex 74b1f64..30b03bb 100644\n--- a/docs/index.md\n+++ b/docs/index.md\n@@ -98,6 +98,7 @@ Obtain an `IBAN` instance using one of the static factory methods: `valueOf( )` \n ### Version History\n \n #### 1.9.0: unreleased\n+* France (FR): add branch identifier ([#30][i30])\n * Update to revision 89 of the SWIFT IBAN Registry\n     * Andorra (AD): is now SEPA\n * Update to IBAN.com Experimental List\n@@ -107,6 +108,8 @@ Obtain an `IBAN` instance using one of the static factory methods: `valueOf( )` \n * The `@javax.annotation.Generated` annotation has been removed from the `CountryCodesData` class. This annotation moved\n   into a library package in newer Java versions, and does not justify taking on a library dependency.\n \n+[i30]: https://github.com/barend/java-iban/issues/30\n+\n #### 1.8.0: 21 November 2020\n * The `IBAN` class implements `java.io.Serializable` ([#23][i23]). The serialized form should stay valid across library\n   version updates. There is one obvious backwards-incompatibility: deserializing after a version downgrade, of an IBAN\ndiff --git a/src/main/resources/nl/garvelink/iban/IBAN.yml b/src/main/resources/nl/garvelink/iban/IBAN.yml\nindex 49ff171..b7eba6d 100755\n--- a/src/main/resources/nl/garvelink/iban/IBAN.yml\n+++ b/src/main/resources/nl/garvelink/iban/IBAN.yml\n@@ -381,6 +381,9 @@ ibans:\n       bank_code:\n         position: 4\n         length: 5\n+      branch_code:\n+        position: 9\n+        length: 5\n   -\n     name: Gabon\n     country_code: GA\n", "test_patch": "diff --git a/src/test/java/nl/garvelink/iban/CountryCodesParameterizedTest.java b/src/test/java/nl/garvelink/iban/CountryCodesParameterizedTest.java\nindex 19bb6ae..e29055b 100644\n--- a/src/test/java/nl/garvelink/iban/CountryCodesParameterizedTest.java\n+++ b/src/test/java/nl/garvelink/iban/CountryCodesParameterizedTest.java\n@@ -83,7 +83,7 @@ public class CountryCodesParameterizedTest {\n             td( \"Spain\",                      true , true , \"ES9121000418450200051332\",        \"2100\"    , \"0418\"    , \"ES91 2100 0418 4502 0005 1332\" ),          //SWIFT\n             td( \"Finland\",                    true , true , \"FI2112345600000785\",              \"123\"     , null      , \"FI21 1234 5600 0007 85\" ),                 //SWIFT\n             td( \"Faroe Islands\",              true , false, \"FO6264600001631634\",              \"6460\"    , null      , \"FO62 6460 0001 6316 34\" ),                 //SWIFT\n-            td( \"France\",                     true , true , \"FR1420041010050500013M02606\",     \"20041\"   , null      , \"FR14 2004 1010 0505 0001 3M02 606\" ),      //SWIFT\n+            td( \"France\",                     true , true , \"FR1420041010050500013M02606\",     \"20041\"   , \"01005\"   , \"FR14 2004 1010 0505 0001 3M02 606\" ),      //SWIFT\n             td( \"United Kingdom\",             true , true , \"GB29NWBK60161331926819\",          \"NWBK\"    , \"601613\"  , \"GB29 NWBK 6016 1331 9268 19\" ),            //SWIFT\n             td( \"Georgia\",                    true , false, \"GE29NB0000000101904917\",          \"NB\"      , null      , \"GE29 NB00 0000 0101 9049 17\"),             //SWIFT\n             td( \"Gibraltar\",                  true , true , \"GI75NWBK000000007099453\",         \"NWBK\"    , null      , \"GI75 NWBK 0000 0000 7099 453\" ),           //SWIFT\n"}
{"repository": "barend/java-iban", "clone_url": "https://github.com/barend/java-iban.git", "timestamp": "2023-05-31T19:28:15.899483Z", "commit_hash": "5bf7633b219868cb32c048d2f4afb55006ee23a7", "commit_message": "makes `IBAN` serializable, fixes #23\n", "related_issues": "", "bug_patch": "diff --git a/docs/index.md b/docs/index.md\nindex c164fbd..eff83ea 100644\n--- a/docs/index.md\n+++ b/docs/index.md\n@@ -95,10 +95,15 @@ Obtain an `IBAN` instance using one of the static factory methods: `valueOf( )` \n     String branchId = IBANFieldsCompat.getBranchIdentifier( iban );\n ```\n \n-[wjij]: http://blog.joda.org/2009/11/why-jsr-310-isn-joda-time_4941.html\n-\n ### Version History\n \n+#### 1.8.0: unreleased\n+* The `IBAN` class implements `java.io.Serializable` ([#23][i23]). The serialized form should stay valid across library\n+  version updates. There is one obvious backwards-incompatibility: deserializing after a version downgrade, of an IBAN\n+  whose country only exists in the newer version, will fail.\n+\n+[i23]:https://github.com/barend/java-iban/issues/23\n+\n #### 1.7.0: 13 October 2020\n * Packaging updated to support Java module system, see `docs/java-module.md`.\n * Update to revision 88 of the SWIFT IBAN Registry\n@@ -242,6 +247,12 @@ rules out some modern Java language constructs. I'm trying to keep the library a\n   extracting Bank and Branch identifiers, which lives in the `IBANFields` and `IBANFieldsCompat` classes.\n * The library originally supported an SDK 14 (Ice Cream Sandwich) era Android app. This is why it relies on bit-packing\n   to reduce bytecode size and why there's a pre-JDK8 API.\n+* IBAN instances implement `java.io.Serializable`. When deserializing, they do the same validity checks as during\n+  construction. This means that any object that goes in valid, should come out valid, but it doesn't protect against\n+  willful tampering. **Caution:** an IBAN encoded by Java serialization is about five times the size (in bytes) of its\n+  cleartext form in UTF-8. The canonical string format is the preferred way to transmit an IBAN object.\n+\n+[wjij]: https://blog.joda.org/2009/11/why-jsr-310-isn-joda-time_4941.html\n \n ### References\n \ndiff --git a/pom.xml b/pom.xml\nindex e389940..5383cef 100644\n--- a/pom.xml\n+++ b/pom.xml\n@@ -19,7 +19,7 @@\n \n     <groupId>nl.garvelink.oss</groupId>\n     <artifactId>iban</artifactId>\n-    <version>1.7.1-SNAPSHOT</version>\n+    <version>1.8.0-SNAPSHOT</version>\n     <packaging>jar</packaging>\n \n     <name>Java IBAN</name>\ndiff --git a/src/main/java/nl/garvelink/iban/IBAN.java b/src/main/java/nl/garvelink/iban/IBAN.java\nindex 0d3abab..bad780e 100644\n--- a/src/main/java/nl/garvelink/iban/IBAN.java\n+++ b/src/main/java/nl/garvelink/iban/IBAN.java\n@@ -15,6 +15,10 @@\n  */\n package nl.garvelink.iban;\n \n+import java.io.IOException;\n+import java.io.InvalidObjectException;\n+import java.io.ObjectStreamException;\n+import java.io.Serializable;\n import java.util.Comparator;\n import java.util.regex.Pattern;\n \n@@ -24,7 +28,9 @@ import java.util.regex.Pattern;\n  * matching the length of the IBAN to its country code. Unknown country codes are not supported.\n  * @author Barend Garvelink (barend@garvelink.nl) https://github.com/barend\n  */\n-public final class IBAN {\n+public final class IBAN implements Serializable {\n+\n+    private static final long serialVersionUID = 1L;\n \n     /**\n      * A comparator that puts IBAN's into lexicographic ordering, per {@link String#compareTo(String)}.\n@@ -260,4 +266,74 @@ public final class IBAN {\n         sb.append(value, i, length);\n         return sb.toString();\n     }\n-}\n+\n+    /**\n+     * When serializing this object, substitute a {@link Memento} object.\n+     * @return a memento containing {@link #value}.\n+     * @throws ObjectStreamException never.\n+     */\n+    private Object writeReplace() throws ObjectStreamException {\n+        return new Memento(this.toPlainString());\n+    }\n+\n+    /**\n+     * Prevents deserialization of this type. Instances of IBAN are never deserialized (only {@link Memento}s are), so\n+     * if we ever encounter a serialized object of IBAN type, we don't want it.\n+     * @param stream ignored.\n+     * @throws IOException always.\n+     * @throws ClassNotFoundException never.\n+     */\n+    private void readObject(java.io.ObjectInputStream stream)\n+            throws IOException, ClassNotFoundException {\n+        throw new InvalidObjectException(\"This type can only be deserialised from its memento type.\");\n+    }\n+\n+    /**\n+     * Prevents deserialization of this type. Instances of IBAN are never deserialized (only {@link Memento}s are), so\n+     * if we ever encounter a serialized object of IBAN type, we don't want it.\n+     * @throws ObjectStreamException always.\n+     */\n+    private void readObjectNoData()\n+            throws ObjectStreamException {\n+        throw new InvalidObjectException(\"This type can only be deserialised from its memento type.\");\n+    }\n+\n+    /**\n+     * Serialization helper for {@link IBAN}.\n+     *\n+     * This works as a \"memento pattern\" implementation of the serialized form. This gets us a number of benefits:\n+     * <ul>\n+     *     <li>No need to add a public, no-arg constructor to the IBAN class, nor to make its <code>value</code>\n+     *     non-final. Doing either would invalidate the main design goal of the library.</li>\n+     *     <li>The validity constraint is checked upon deserialization.</li>\n+     *     <li>Smaller serialized form (still 101 bytes for an 18-byte IBAN).</li>\n+     *     <li>Easier to maintain binary compatibility even as the IBAN class evolves.</li>\n+     * </ul>\n+     *\n+     * There should be no need to ever use IBAN.Memento in your code.\n+     */\n+    static final class Memento implements Serializable {\n+        private static final long serialVersionUID = 1L;\n+        private String value;\n+\n+        public Memento() {\n+            super();\n+        }\n+\n+        Memento(String value) {\n+            this();\n+            this.value = value;\n+        }\n+\n+        private Object readResolve() throws ObjectStreamException {\n+            try {\n+                return IBAN.parse(this.value);\n+            } catch (IllegalArgumentException e) {\n+                InvalidObjectException ioe = new InvalidObjectException(\n+                        \"Cannot decode serialized form: \" + e.getMessage());\n+                ioe.initCause(e);\n+                throw ioe;\n+            }\n+        }\n+    }\n+}\n\\ No newline at end of file\n", "test_patch": "diff --git a/src/test/java/nl/garvelink/iban/IBANTest.java b/src/test/java/nl/garvelink/iban/IBANTest.java\nindex adaa616..6d7d6ad 100644\n--- a/src/test/java/nl/garvelink/iban/IBANTest.java\n+++ b/src/test/java/nl/garvelink/iban/IBANTest.java\n@@ -17,10 +17,18 @@ package nl.garvelink.iban;\n \n import org.junit.Test;\n \n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InvalidObjectException;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n import java.util.Arrays;\n+import java.util.Base64;\n import java.util.List;\n \n import static org.hamcrest.CoreMatchers.equalTo;\n+import static org.hamcrest.CoreMatchers.instanceOf;\n import static org.hamcrest.CoreMatchers.is;\n import static org.hamcrest.CoreMatchers.nullValue;\n import static org.hamcrest.MatcherAssert.assertThat;\n@@ -48,6 +56,14 @@ public class IBANTest {\n         assertThat(IBAN.valueOf(null), is(nullValue()));\n     }\n \n+    @Test\n+    public void valueOfShouldAcceptToString() {\n+        // The valueOf(String) should accept IBAN's own toString() output as input.\n+        IBAN original = IBAN.parse(VALID_IBAN);\n+        IBAN copy = IBAN.valueOf(original.toString());\n+        assertThat(copy, is(equalTo(original)));\n+    }\n+\n     @Test(expected = IllegalArgumentException.class)\n     public void parseShouldRejectNull() {\n         IBAN.parse(null);\n@@ -132,6 +148,44 @@ public class IBANTest {\n     }\n \n     @Test\n+    public void testSerializationRoundTrip() throws IOException, ClassNotFoundException {\n+        IBAN original = IBAN.parse(VALID_IBAN);\n+        ByteArrayOutputStream baos = new ByteArrayOutputStream(2048);\n+        new ObjectOutputStream(baos).writeObject(original);\n+\n+        byte[] bytes = baos.toByteArray();\n+//        System.out.println(Base64.getEncoder().encodeToString(bytes)); // for the tests below\n+        ObjectInputStream ois = new ObjectInputStream(new ByteArrayInputStream(bytes));\n+        IBAN copy = (IBAN) ois.readObject();\n+        assertThat(copy, is(equalTo(original)));\n+    }\n+\n+    @Test\n+    public void testSerializedFormCompatibility() throws IOException, ClassNotFoundException {\n+        // This was manually sampled from the preceding test. This test is to ensure that the serialised form remains\n+        // stable as the library evolves.\n+        String serializedForm = \"rO0ABXNyAB5ubC5nYXJ2ZWxpbmsuaWJhbi5JQkFOJE1lbWVudG8AAAAAAAAAAQIAAUwABXZhbHVldAASTGphdmEvbGFuZy9TdHJpbmc7eHB0ABJOTDkxQUJOQTA0MTcxNjQzMDA=\";\n+        ObjectInputStream ois = new ObjectInputStream(new ByteArrayInputStream(Base64.getDecoder().decode(serializedForm)));\n+        IBAN copy = (IBAN) ois.readObject();\n+        assertThat(copy.toPlainString(), is(equalTo(VALID_IBAN)));\n+    }\n+\n+    @Test\n+    public void testDeserializationPerformsValidation() throws IOException, ClassNotFoundException {\n+        // This is the same base64 blob as above, altered to put in a garbage IBAN value.\n+        String serializedForm = \"rO0ABXNyAB5ubC5nYXJ2ZWxpbmsuaWJhbi5JQkFOJE1lbWVudG8AAAAAAAAAAQIAAUwABXZhbHVldAASTGphdmEvbGFuZy9TdHJpbmc7eHB0ABJOTDkxQUJORTA0MTcxNjQzMDA=\";\n+        ObjectInputStream ois = new ObjectInputStream(new ByteArrayInputStream(Base64.getDecoder().decode(serializedForm)));\n+        try {\n+            IBAN copy = (IBAN) ois.readObject();\n+            fail(\"IBAN should not have deserialized successfully: \" + copy);\n+        } catch (InvalidObjectException e) {\n+            // Ensure that the right exception type is inside the IOE, to make sure we're testing a bad IBAN and not\n+            // just a bad serialized blob.\n+            assertThat(e.getCause(), is(instanceOf(WrongChecksumException.class)));\n+        }\n+    }\n+\n+    @Test\n     public void lexicalSort() {\n         List<IBAN> expected = Arrays.asList(IBAN.parse(\"DK3400000000000003\"), IBAN.parse(\"NL41BANK0000000002\"), IBAN.parse(\"NL68BANK0000000001\"));\n         List<IBAN> actual = Arrays.asList(IBAN.parse(\"NL68BANK0000000001\"), IBAN.parse(\"DK3400000000000003\"), IBAN.parse(\"NL41BANK0000000002\"));\n"}
