{"repository": "groovy/GMavenPlus", "clone_url": "https://github.com/groovy/GMavenPlus.git", "timestamp": "2023-05-31T19:04:00.869968Z", "commit_hash": "5fcfa68eef53342671963b3877fdfcef7c6acd3a", "commit_message": "Merge pull request #204 from groovy/203_fix\n\nCheck that user property exists before adding to properties", "related_issues": "", "bug_patch": "diff --git a/pom.xml b/pom.xml\nindex ec5f281..274f21f 100644\n--- a/pom.xml\n+++ b/pom.xml\n@@ -5,7 +5,7 @@\n   <groupId>org.codehaus.gmavenplus</groupId>\n   <artifactId>gmavenplus-plugin</artifactId>\n   <packaging>maven-plugin</packaging>\n-  <version>1.14.0-SNAPSHOT</version>\n+  <version>1.13.1-SNAPSHOT</version>\n \n   <properties>\n     <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\ndiff --git a/src/main/java/org/codehaus/gmavenplus/mojo/AbstractToolsMojo.java b/src/main/java/org/codehaus/gmavenplus/mojo/AbstractToolsMojo.java\nindex 3895fc3..8eaa0cf 100644\n--- a/src/main/java/org/codehaus/gmavenplus/mojo/AbstractToolsMojo.java\n+++ b/src/main/java/org/codehaus/gmavenplus/mojo/AbstractToolsMojo.java\n@@ -185,7 +185,9 @@ public abstract class AbstractToolsMojo extends AbstractGroovyMojo {\n                 properties.putAll(session.getUserProperties());\n             } else if (bindAllProjectProperties && bindSessionUserOverrideProperties && project != null) {\n                 for (Object key : project.getProperties().keySet()) {\n-                    properties.put(key, session.getUserProperties().get(key));\n+                    if (session.getUserProperties().get(key) != null) {\n+                        properties.put(key, session.getUserProperties().get(key));\n+                    }\n                 }\n             }\n         }\n", "test_patch": "diff --git a/src/test/java/org/codehaus/gmavenplus/mojo/AbstractToolsMojoTest.java b/src/test/java/org/codehaus/gmavenplus/mojo/AbstractToolsMojoTest.java\nindex dc0e3d4..1b00b3e 100644\n--- a/src/test/java/org/codehaus/gmavenplus/mojo/AbstractToolsMojoTest.java\n+++ b/src/test/java/org/codehaus/gmavenplus/mojo/AbstractToolsMojoTest.java\n@@ -143,6 +143,20 @@ public class AbstractToolsMojoTest {\n     }\n \n     @Test\n+    public void testBindAllProjectPropertiesAndBindSessionUserOverridePropertiesWhenEmpty() {\n+        MavenSession session = mock(MavenSession.class);\n+        Properties projectProperties = new Properties();\n+        projectProperties.put(\"foo\", \"bar\");\n+        doReturn(new Properties()).when(session).getUserProperties();\n+        doReturn(projectProperties).when(project).getProperties();\n+        testMojo.session = session;\n+        testMojo.bindAllProjectProperties = true;\n+        testMojo.bindSessionUserOverrideProperties = true;\n+\n+        testMojo.initializeProperties();\n+    }\n+\n+    @Test\n     public void testSessionPropertiesOverrideProjectPropertiesAndIncludesOthers() {\n         Properties projectProperties = new Properties();\n         projectProperties.put(\"foo\", \"bar\");\n"}
{"repository": "groovy/GMavenPlus", "clone_url": "https://github.com/groovy/GMavenPlus.git", "timestamp": "2023-05-31T19:15:51.000369Z", "commit_hash": "b6628790372952c4ec5c2358c1b3b788194f6e6d", "commit_message": "Check that user property exists before adding to properties\n(fixes #203)\n", "related_issues": "", "bug_patch": "diff --git a/pom.xml b/pom.xml\nindex ec5f281..274f21f 100644\n--- a/pom.xml\n+++ b/pom.xml\n@@ -5,7 +5,7 @@\n   <groupId>org.codehaus.gmavenplus</groupId>\n   <artifactId>gmavenplus-plugin</artifactId>\n   <packaging>maven-plugin</packaging>\n-  <version>1.14.0-SNAPSHOT</version>\n+  <version>1.13.1-SNAPSHOT</version>\n \n   <properties>\n     <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\ndiff --git a/src/main/java/org/codehaus/gmavenplus/mojo/AbstractToolsMojo.java b/src/main/java/org/codehaus/gmavenplus/mojo/AbstractToolsMojo.java\nindex 3895fc3..8eaa0cf 100644\n--- a/src/main/java/org/codehaus/gmavenplus/mojo/AbstractToolsMojo.java\n+++ b/src/main/java/org/codehaus/gmavenplus/mojo/AbstractToolsMojo.java\n@@ -185,7 +185,9 @@ public abstract class AbstractToolsMojo extends AbstractGroovyMojo {\n                 properties.putAll(session.getUserProperties());\n             } else if (bindAllProjectProperties && bindSessionUserOverrideProperties && project != null) {\n                 for (Object key : project.getProperties().keySet()) {\n-                    properties.put(key, session.getUserProperties().get(key));\n+                    if (session.getUserProperties().get(key) != null) {\n+                        properties.put(key, session.getUserProperties().get(key));\n+                    }\n                 }\n             }\n         }\n", "test_patch": "diff --git a/src/test/java/org/codehaus/gmavenplus/mojo/AbstractToolsMojoTest.java b/src/test/java/org/codehaus/gmavenplus/mojo/AbstractToolsMojoTest.java\nindex dc0e3d4..1b00b3e 100644\n--- a/src/test/java/org/codehaus/gmavenplus/mojo/AbstractToolsMojoTest.java\n+++ b/src/test/java/org/codehaus/gmavenplus/mojo/AbstractToolsMojoTest.java\n@@ -143,6 +143,20 @@ public class AbstractToolsMojoTest {\n     }\n \n     @Test\n+    public void testBindAllProjectPropertiesAndBindSessionUserOverridePropertiesWhenEmpty() {\n+        MavenSession session = mock(MavenSession.class);\n+        Properties projectProperties = new Properties();\n+        projectProperties.put(\"foo\", \"bar\");\n+        doReturn(new Properties()).when(session).getUserProperties();\n+        doReturn(projectProperties).when(project).getProperties();\n+        testMojo.session = session;\n+        testMojo.bindAllProjectProperties = true;\n+        testMojo.bindSessionUserOverrideProperties = true;\n+\n+        testMojo.initializeProperties();\n+    }\n+\n+    @Test\n     public void testSessionPropertiesOverrideProjectPropertiesAndIncludesOthers() {\n         Properties projectProperties = new Properties();\n         projectProperties.put(\"foo\", \"bar\");\n"}
{"repository": "groovy/GMavenPlus", "clone_url": "https://github.com/groovy/GMavenPlus.git", "timestamp": "2023-05-31T20:24:00.826147Z", "commit_hash": "17b27dc7fc8d5071d2eac059d3dd3352c4ee0df1", "commit_message": "Merge pull request #133 from groovy/fix-3.0.0-alpha-5\n\nFix that Groovy 3.0.0-alpha-5 was actually released as 3.0.0-beta-1", "related_issues": "", "bug_patch": "diff --git a/integrationTest.groovy b/integrationTest.groovy\nindex 9ef1adf..2b7c2d6 100644\n--- a/integrationTest.groovy\n+++ b/integrationTest.groovy\n@@ -16,7 +16,7 @@ groovyVersions = [\"1.5.0\", \"1.5.1\", \"1.5.2\", \"1.5.3\", \"1.5.4\", \"1.5.5\", \"1.5.6\",\n                   \"2.2.0-beta-1\", \"2.2.0-beta-2\", \"2.2.0-rc-1\", \"2.2.0-rc-2\", \"2.2.0-rc-3\", \"2.2.0\", \"2.2.1\", \"2.2.2\",\n                   \"2.3.0-beta-1\", \"2.3.0-beta-2\", \"2.3.0-rc-1\", \"2.3.0-rc-2\", \"2.3.0-rc-4\", \"2.3.0\", \"2.3.1\", \"2.3.2\", \"2.3.3\", \"2.3.4\", \"2.3.5\", \"2.3.6\", \"2.3.7\", \"2.3.8\", \"2.3.9\", \"2.3.10\", \"2.3.11\",\n                   \"2.4.0-beta-1\", \"2.4.0-beta-2\", \"2.4.0-beta-3\", \"2.4.0-beta-4\", \"2.4.0-rc-1\", \"2.4.0-rc-2\", \"2.4.0\", \"2.4.1\", \"2.4.2\", \"2.4.3\", \"2.4.4\", \"2.4.5\", \"2.4.6\", \"2.4.7\", \"2.4.8\", \"2.4.9\", \"2.4.10\", \"2.4.11\", \"2.4.12\", \"2.4.13\", \"2.4.14\", \"2.4.15\",\n-                  \"2.5.0-alpha-1\", \"2.5.0-beta-1\", \"2.5.0-beta-2\", \"2.5.0-beta-3\", \"2.5.0-rc-1\", \"2.5.0-rc-2\", \"2.5.0\", \"2.5.1\", \"2.5.2\", \"2.5.3\", \"2.5.4\", \"2.5.5\", \"2.5.6\",\n+                  \"2.5.0-alpha-1\", \"2.5.0-beta-1\", \"2.5.0-beta-2\", \"2.5.0-beta-3\", \"2.5.0-rc-1\", \"2.5.0-rc-2\", \"2.5.0\", \"2.5.1\", \"2.5.2\", \"2.5.3\", \"2.5.4\", \"2.5.5\", \"2.5.6\", \"2.5.7\",\n                   \"2.6.0-alpha-1\", \"2.6.0-alpha-2\", \"2.6.0-alpha-3\",\n                   \"3.0.0-alpha-1\", \"3.0.0-alpha-2\", \"3.0.0-alpha-3\", \"3.0.0-alpha-4\"]\n for (int i = 0; i < groovyVersions.size(); i++) {\ndiff --git a/pom.xml b/pom.xml\nindex 34c4e40..bb8e501 100644\n--- a/pom.xml\n+++ b/pom.xml\n@@ -23,7 +23,7 @@\n     <!-- this is a property so that site generation can use it -->\n     <sourcePluginVersion>3.0.1</sourcePluginVersion>\n     <!-- this is a property so that site generation and integration tests can use it -->\n-    <groovyVersion>2.5.6</groovyVersion>\n+    <groovyVersion>2.5.7</groovyVersion>\n   </properties>\n \n   <dependencies>\ndiff --git a/src/main/java/org/codehaus/gmavenplus/model/Version.java b/src/main/java/org/codehaus/gmavenplus/model/Version.java\nindex 9c1acd3..b4c9271 100644\n--- a/src/main/java/org/codehaus/gmavenplus/model/Version.java\n+++ b/src/main/java/org/codehaus/gmavenplus/model/Version.java\n@@ -238,7 +238,8 @@ public class Version implements Comparable<Version> {\n         }\n         if (comp == 0) {\n             if (tag != null && version.tag != null) {\n-                return tag.replace(\"beta\", \" beta\").compareTo(version.tag.replace(\"beta\", \" beta\"));\n+                return tag.replace(\"beta\", \" beta\").replace(\"alpha\", \" alpha\")\n+                        .compareTo(version.tag.replace(\"beta\", \" beta\").replace(\"alpha\", \" alpha\"));\n             } else if (tag == null ^ version.tag == null) {\n                 if (tag == null) {\n                     return noTagsAreNewer ? 1 : -1;\ndiff --git a/src/main/java/org/codehaus/gmavenplus/mojo/AbstractCompileMojo.java b/src/main/java/org/codehaus/gmavenplus/mojo/AbstractCompileMojo.java\nindex c9719d4..3eb65ff 100644\n--- a/src/main/java/org/codehaus/gmavenplus/mojo/AbstractCompileMojo.java\n+++ b/src/main/java/org/codehaus/gmavenplus/mojo/AbstractCompileMojo.java\n@@ -40,9 +40,9 @@ import static org.codehaus.gmavenplus.util.ReflectionUtils.*;\n public abstract class AbstractCompileMojo extends AbstractGroovySourcesMojo {\n \n     /**\n-     * Groovy 3.0.0 alpha-5 version.\n+     * Groovy 3.0.0 beta-1 version.\n      */\n-    protected static final Version GROOVY_3_0_0_ALPHA5 = new Version(3, 0, 0, \"alpha-5\");\n+    protected static final Version GROOVY_3_0_0_BETA1 = new Version(3, 0, 0, \"beta-1\");\n \n     /**\n      * Groovy 3.0.0 alpha-4 version.\n@@ -134,7 +134,7 @@ public abstract class AbstractCompileMojo extends AbstractGroovySourcesMojo {\n      * Using 9 requires Groovy &gt;= 2.5.3, or Groovy &gt;= 2.6.0 alpha 4, or Groovy &gt;= 3.0.0 alpha 2.\n      * Using 9 with invokedynamic requires Groovy &gt;= 2.5.3, or Groovy &gt;= 3.0.0 alpha 2, but not any 2.6 versions.\n      * Using 10, 11, or 12 requires Groovy &gt;= 2.5.3, or Groovy &gt;= 3.0.0 alpha 4, but not any 2.6 versions.\n-     * Using 13 requires Groovy &gt;= 2.5.7, or Groovy &gt;= 3.0.0-alpha-5, but not any 2.6 versions.\n+     * Using 13 requires Groovy &gt;= 2.5.7, or Groovy &gt;= 3.0.0-beta-1, but not any 2.6 versions.\n      */\n     @Parameter(property = \"maven.compiler.target\", defaultValue = \"1.8\")\n     protected String targetBytecode;\n@@ -371,8 +371,8 @@ public abstract class AbstractCompileMojo extends AbstractGroovySourcesMojo {\n      */\n     protected void verifyGroovyVersionSupportsTargetBytecode() {\n         if (\"13\".equals(targetBytecode)) {\n-            if (groovyOlderThan(GROOVY_2_5_7) || (groovyAtLeast(GROOVY_2_6_0_ALPHA1) && groovyOlderThan(GROOVY_3_0_0_ALPHA5))) {\n-                throw new IllegalArgumentException(\"Target bytecode 13 requires Groovy \" + GROOVY_2_5_7 + \"/\" + GROOVY_3_0_0_ALPHA5 + \" or newer. No 2.6 version is supported.\");\n+            if (groovyOlderThan(GROOVY_2_5_7) || (groovyAtLeast(GROOVY_2_6_0_ALPHA1) && groovyOlderThan(GROOVY_3_0_0_BETA1))) {\n+                throw new IllegalArgumentException(\"Target bytecode 13 requires Groovy \" + GROOVY_2_5_7 + \"/\" + GROOVY_3_0_0_BETA1 + \" or newer. No 2.6 version is supported.\");\n             }\n         } else if (\"12\".equals(targetBytecode) || \"11\".equals(targetBytecode) || \"10\".equals(targetBytecode)) {\n             if (groovyOlderThan(GROOVY_2_5_3) || (groovyAtLeast(GROOVY_2_6_0_ALPHA1) && groovyOlderThan(GROOVY_3_0_0_ALPHA4))) {\ndiff --git a/src/main/java/org/codehaus/gmavenplus/mojo/AbstractGenerateStubsMojo.java b/src/main/java/org/codehaus/gmavenplus/mojo/AbstractGenerateStubsMojo.java\nindex 5b99b22..fdd8570 100644\n--- a/src/main/java/org/codehaus/gmavenplus/mojo/AbstractGenerateStubsMojo.java\n+++ b/src/main/java/org/codehaus/gmavenplus/mojo/AbstractGenerateStubsMojo.java\n@@ -44,9 +44,9 @@ public abstract class AbstractGenerateStubsMojo extends AbstractGroovyStubSource\n      */\n \n     /**\n-     * Groovy 3.0.0 alpha-5 version.\n+     * Groovy 3.0.0 beta-1 version.\n      */\n-    protected static final Version GROOVY_3_0_0_ALPHA5 = new Version(3, 0, 0, \"alpha-5\");\n+    protected static final Version GROOVY_3_0_0_BETA1 = new Version(3, 0, 0, \"beta-1\");\n \n     /**\n      * Groovy 3.0.0 alpha-4 version.\n@@ -138,7 +138,7 @@ public abstract class AbstractGenerateStubsMojo extends AbstractGroovyStubSource\n      * Using 9 requires Groovy &gt;= 2.5.3, or Groovy &gt;= 2.6.0 alpha 4, or Groovy &gt;= 3.0.0 alpha 2.\n      * Using 9 with invokedynamic requires Groovy &gt;= 2.5.3, or Groovy &gt;= 3.0.0 alpha 2, but not any 2.6 versions.\n      * Using 10, 11, or 12 requires Groovy &gt;= 2.5.3, or Groovy &gt;= 3.0.0 alpha 4, but not any 2.6 versions.\n-     * Using 13 requires Groovy &gt;= 2.5.7, or Groovy &gt;= 3.0.0-alpha-5, but not any 2.6 versions.\n+     * Using 13 requires Groovy &gt;= 2.5.7, or Groovy &gt;= 3.0.0-beta-1, but not any 2.6 versions.\n      *\n      * @since 1.0-beta-3\n      */\n@@ -339,8 +339,8 @@ public abstract class AbstractGenerateStubsMojo extends AbstractGroovyStubSource\n      */\n     protected void verifyGroovyVersionSupportsTargetBytecode() {\n         if (\"13\".equals(targetBytecode)) {\n-            if (groovyOlderThan(GROOVY_2_5_7) || (groovyAtLeast(GROOVY_2_6_0_ALPHA1) && groovyOlderThan(GROOVY_3_0_0_ALPHA5))) {\n-                throw new IllegalArgumentException(\"Target bytecode 13 requires Groovy \" + GROOVY_2_5_7 + \"/\" + GROOVY_3_0_0_ALPHA5 + \" or newer. No 2.6 version is supported.\");\n+            if (groovyOlderThan(GROOVY_2_5_7) || (groovyAtLeast(GROOVY_2_6_0_ALPHA1) && groovyOlderThan(GROOVY_3_0_0_BETA1))) {\n+                throw new IllegalArgumentException(\"Target bytecode 13 requires Groovy \" + GROOVY_2_5_7 + \"/\" + GROOVY_3_0_0_BETA1 + \" or newer. No 2.6 version is supported.\");\n             }\n         } else if (\"12\".equals(targetBytecode) || \"11\".equals(targetBytecode) || \"10\".equals(targetBytecode)) {\n             if (groovyOlderThan(GROOVY_2_5_3) || (groovyAtLeast(GROOVY_2_6_0_ALPHA1) && groovyOlderThan(GROOVY_3_0_0_ALPHA4))) {\n", "test_patch": "diff --git a/src/test/java/org/codehaus/gmavenplus/model/VersionTest.java b/src/test/java/org/codehaus/gmavenplus/model/VersionTest.java\nindex 75cd7c8..49fc8b5 100644\n--- a/src/test/java/org/codehaus/gmavenplus/model/VersionTest.java\n+++ b/src/test/java/org/codehaus/gmavenplus/model/VersionTest.java\n@@ -76,19 +76,27 @@ public class VersionTest {\n \n     @Test\n     public void testSort() {\n-        Version v1 = Version.parseFromString(\"1.0.0-beta-1\");\n-        Version v2 = Version.parseFromString(\"1.0.0-beta-2\");\n-        Version v3 = Version.parseFromString(\"1.0.0\");\n-        Version v4 = Version.parseFromString(\"1.0.1\");\n-        Version v5 = Version.parseFromString(\"1.1.0\");\n-        Version v6 = Version.parseFromString(\"2.0.0\");\n+        Version v1 = Version.parseFromString(\"1.0.0-alpha-1\");\n+        Version v2 = Version.parseFromString(\"1.0.0-alpha-2\");\n+        Version v3 = Version.parseFromString(\"1.0.0-beta-1\");\n+        Version v4 = Version.parseFromString(\"1.0.0-beta-2\");\n+        Version v5 = Version.parseFromString(\"1.0.0-rc-1\");\n+        Version v6 = Version.parseFromString(\"1.0.0-rc-2\");\n+        Version v7 = Version.parseFromString(\"1.0.0\");\n+        Version v8 = Version.parseFromString(\"1.0.1\");\n+        Version v9 = Version.parseFromString(\"1.1.0\");\n+        Version v10 = Version.parseFromString(\"2.0.0\");\n         List<Version> versions = new ArrayList<Version>();\n-        versions.add(v1);\n-        versions.add(v2);\n-        versions.add(v3);\n-        versions.add(v4);\n-        versions.add(v5);\n+        versions.add(v10);\n+        versions.add(v9);\n+        versions.add(v8);\n+        versions.add(v7);\n         versions.add(v6);\n+        versions.add(v5);\n+        versions.add(v4);\n+        versions.add(v3);\n+        versions.add(v2);\n+        versions.add(v1);\n         Collections.sort(versions);\n         assertEquals(v1, versions.get(0));\n         assertEquals(v2, versions.get(1));\n@@ -96,6 +104,10 @@ public class VersionTest {\n         assertEquals(v4, versions.get(3));\n         assertEquals(v5, versions.get(4));\n         assertEquals(v6, versions.get(5));\n+        assertEquals(v7, versions.get(6));\n+        assertEquals(v8, versions.get(7));\n+        assertEquals(v9, versions.get(8));\n+        assertEquals(v10, versions.get(9));\n     }\n \n     @Test(expected = IllegalArgumentException.class)\n@@ -162,4 +174,14 @@ public class VersionTest {\n         assertEquals(one.hashCode(), two.hashCode());\n     }\n \n+    @Test\n+    public void testBetaIsNewerThanAlpha() {\n+        Version v1 = Version.parseFromString(\"1.0.0-alpha-1\");\n+        Version v2 = Version.parseFromString(\"1.0.0-beta-2\");\n+        assertTrue(v1.compareTo(v2) < 0);\n+        v1 = Version.parseFromString(\"1.0.0-alpha-2\");\n+        v2 = Version.parseFromString(\"1.0.0-beta-1\");\n+        assertTrue(v1.compareTo(v2) < 0);\n+    }\n+\n }\ndiff --git a/src/test/java/org/codehaus/gmavenplus/mojo/AbstractCompileMojoTest.java b/src/test/java/org/codehaus/gmavenplus/mojo/AbstractCompileMojoTest.java\nindex cbb651a..b08fb65 100644\n--- a/src/test/java/org/codehaus/gmavenplus/mojo/AbstractCompileMojoTest.java\n+++ b/src/test/java/org/codehaus/gmavenplus/mojo/AbstractCompileMojoTest.java\n@@ -278,7 +278,7 @@ public class AbstractCompileMojoTest {\n \n     @Test\n     public void testJava13WithSupportedGroovy3() {\n-        testMojo = new TestMojo(\"3.0.0-alpha-5\");\n+        testMojo = new TestMojo(\"3.0.0-beta-1\");\n         testMojo.targetBytecode = \"13\";\n         testMojo.verifyGroovyVersionSupportsTargetBytecode();\n     }\ndiff --git a/src/test/java/org/codehaus/gmavenplus/mojo/AbstractGenerateStubsMojoTest.java b/src/test/java/org/codehaus/gmavenplus/mojo/AbstractGenerateStubsMojoTest.java\nindex 34abc8f..0351f12 100644\n--- a/src/test/java/org/codehaus/gmavenplus/mojo/AbstractGenerateStubsMojoTest.java\n+++ b/src/test/java/org/codehaus/gmavenplus/mojo/AbstractGenerateStubsMojoTest.java\n@@ -309,7 +309,7 @@ public class AbstractGenerateStubsMojoTest {\n \n     @Test\n     public void testJava13WithSupportedGroovy3() {\n-        testMojo = new AbstractGenerateStubsMojoTest.TestMojo(\"3.0.0-alpha-5\");\n+        testMojo = new AbstractGenerateStubsMojoTest.TestMojo(\"3.0.0-beta-1\");\n         testMojo.targetBytecode = \"13\";\n         testMojo.verifyGroovyVersionSupportsTargetBytecode();\n     }\n"}
{"repository": "groovy/GMavenPlus", "clone_url": "https://github.com/groovy/GMavenPlus.git", "timestamp": "2023-05-31T20:48:24.201234Z", "commit_hash": "f283baeb64ee6b65118234492180371afe0b6f78", "commit_message": "Fix that alpha versions not seen as older than beta versions\n", "related_issues": "", "bug_patch": "diff --git a/src/main/java/org/codehaus/gmavenplus/model/Version.java b/src/main/java/org/codehaus/gmavenplus/model/Version.java\nindex 9c1acd3..b4c9271 100644\n--- a/src/main/java/org/codehaus/gmavenplus/model/Version.java\n+++ b/src/main/java/org/codehaus/gmavenplus/model/Version.java\n@@ -238,7 +238,8 @@ public class Version implements Comparable<Version> {\n         }\n         if (comp == 0) {\n             if (tag != null && version.tag != null) {\n-                return tag.replace(\"beta\", \" beta\").compareTo(version.tag.replace(\"beta\", \" beta\"));\n+                return tag.replace(\"beta\", \" beta\").replace(\"alpha\", \" alpha\")\n+                        .compareTo(version.tag.replace(\"beta\", \" beta\").replace(\"alpha\", \" alpha\"));\n             } else if (tag == null ^ version.tag == null) {\n                 if (tag == null) {\n                     return noTagsAreNewer ? 1 : -1;\n", "test_patch": "diff --git a/src/test/java/org/codehaus/gmavenplus/model/VersionTest.java b/src/test/java/org/codehaus/gmavenplus/model/VersionTest.java\nindex 75cd7c8..49fc8b5 100644\n--- a/src/test/java/org/codehaus/gmavenplus/model/VersionTest.java\n+++ b/src/test/java/org/codehaus/gmavenplus/model/VersionTest.java\n@@ -76,19 +76,27 @@ public class VersionTest {\n \n     @Test\n     public void testSort() {\n-        Version v1 = Version.parseFromString(\"1.0.0-beta-1\");\n-        Version v2 = Version.parseFromString(\"1.0.0-beta-2\");\n-        Version v3 = Version.parseFromString(\"1.0.0\");\n-        Version v4 = Version.parseFromString(\"1.0.1\");\n-        Version v5 = Version.parseFromString(\"1.1.0\");\n-        Version v6 = Version.parseFromString(\"2.0.0\");\n+        Version v1 = Version.parseFromString(\"1.0.0-alpha-1\");\n+        Version v2 = Version.parseFromString(\"1.0.0-alpha-2\");\n+        Version v3 = Version.parseFromString(\"1.0.0-beta-1\");\n+        Version v4 = Version.parseFromString(\"1.0.0-beta-2\");\n+        Version v5 = Version.parseFromString(\"1.0.0-rc-1\");\n+        Version v6 = Version.parseFromString(\"1.0.0-rc-2\");\n+        Version v7 = Version.parseFromString(\"1.0.0\");\n+        Version v8 = Version.parseFromString(\"1.0.1\");\n+        Version v9 = Version.parseFromString(\"1.1.0\");\n+        Version v10 = Version.parseFromString(\"2.0.0\");\n         List<Version> versions = new ArrayList<Version>();\n-        versions.add(v1);\n-        versions.add(v2);\n-        versions.add(v3);\n-        versions.add(v4);\n-        versions.add(v5);\n+        versions.add(v10);\n+        versions.add(v9);\n+        versions.add(v8);\n+        versions.add(v7);\n         versions.add(v6);\n+        versions.add(v5);\n+        versions.add(v4);\n+        versions.add(v3);\n+        versions.add(v2);\n+        versions.add(v1);\n         Collections.sort(versions);\n         assertEquals(v1, versions.get(0));\n         assertEquals(v2, versions.get(1));\n@@ -96,6 +104,10 @@ public class VersionTest {\n         assertEquals(v4, versions.get(3));\n         assertEquals(v5, versions.get(4));\n         assertEquals(v6, versions.get(5));\n+        assertEquals(v7, versions.get(6));\n+        assertEquals(v8, versions.get(7));\n+        assertEquals(v9, versions.get(8));\n+        assertEquals(v10, versions.get(9));\n     }\n \n     @Test(expected = IllegalArgumentException.class)\n@@ -162,4 +174,14 @@ public class VersionTest {\n         assertEquals(one.hashCode(), two.hashCode());\n     }\n \n+    @Test\n+    public void testBetaIsNewerThanAlpha() {\n+        Version v1 = Version.parseFromString(\"1.0.0-alpha-1\");\n+        Version v2 = Version.parseFromString(\"1.0.0-beta-2\");\n+        assertTrue(v1.compareTo(v2) < 0);\n+        v1 = Version.parseFromString(\"1.0.0-alpha-2\");\n+        v2 = Version.parseFromString(\"1.0.0-beta-1\");\n+        assertTrue(v1.compareTo(v2) < 0);\n+    }\n+\n }\n"}
