{"repository": "jfree/jfreesvg", "clone_url": "https://github.com/jfree/jfreesvg.git", "timestamp": "2023-05-31T18:25:53.924368Z", "commit_hash": "a4f2e98f25202ae1d6d1eb066341bdf34ab07a5d", "commit_message": "Add elementID tests and fix failures.", "related_issues": "", "bug_patch": "diff --git a/src/main/java/org/jfree/svg/SVGGraphics2D.java b/src/main/java/org/jfree/svg/SVGGraphics2D.java\nindex 63afe31..8eebcd2 100644\n--- a/src/main/java/org/jfree/svg/SVGGraphics2D.java\n+++ b/src/main/java/org/jfree/svg/SVGGraphics2D.java\n@@ -1118,7 +1118,7 @@ public final class SVGGraphics2D extends Graphics2D {\n             } else {\n                 this.elementIDs.add(elementID);\n             }\n-            builder.append(\"id=\\\"\").append(elementID).append(\"\\\" \");\n+            builder.append(\" id='\").append(elementID).append(\"'\");\n         }\n     }\n     \n@@ -1143,9 +1143,9 @@ public final class SVGGraphics2D extends Graphics2D {\n         }\n         if (s instanceof Line2D) {\n             Line2D l = (Line2D) s;\n-            this.sb.append(\"<line \");\n+            this.sb.append(\"<line\");\n             appendOptionalElementIDFromHint(this.sb);\n-            this.sb.append(\"x1='\").append(geomDP(l.getX1()))\n+            this.sb.append(\" x1='\").append(geomDP(l.getX1()))\n                     .append(\"' y1='\").append(geomDP(l.getY1()))\n                     .append(\"' x2='\").append(geomDP(l.getX2()))\n                     .append(\"' y2='\").append(geomDP(l.getY2()))\n@@ -1162,9 +1162,9 @@ public final class SVGGraphics2D extends Graphics2D {\n             this.sb.append(\"/>\");\n         } else if (s instanceof Rectangle2D) {\n             Rectangle2D r = (Rectangle2D) s;\n-            this.sb.append(\"<rect \");\n+            this.sb.append(\"<rect\");\n             appendOptionalElementIDFromHint(this.sb);\n-            this.sb.append(\"x='\").append(geomDP(r.getX()))\n+            this.sb.append(\" x='\").append(geomDP(r.getX()))\n                     .append(\"' y='\").append(geomDP(r.getY()))\n                     .append(\"' width='\").append(geomDP(r.getWidth()))\n                     .append(\"' height='\").append(geomDP(r.getHeight()))\n@@ -1182,9 +1182,9 @@ public final class SVGGraphics2D extends Graphics2D {\n             this.sb.append(\"/>\");\n         } else if (s instanceof Ellipse2D) {\n             Ellipse2D e = (Ellipse2D) s;\n-            this.sb.append(\"<ellipse \");\n+            this.sb.append(\"<ellipse\");\n             appendOptionalElementIDFromHint(this.sb);\n-            this.sb.append(\"cx='\").append(geomDP(e.getCenterX()))\n+            this.sb.append(\" cx='\").append(geomDP(e.getCenterX()))\n                     .append(\"' cy='\").append(geomDP(e.getCenterY()))\n                     .append(\"' rx='\").append(geomDP(e.getWidth() / 2.0))\n                     .append(\"' ry='\").append(geomDP(e.getHeight() / 2.0))\n@@ -1202,9 +1202,9 @@ public final class SVGGraphics2D extends Graphics2D {\n             this.sb.append(\"/>\");        \n         } else if (s instanceof Path2D) {\n             Path2D path = (Path2D) s;\n-            this.sb.append(\"<g \");\n+            this.sb.append(\"<g\");\n             appendOptionalElementIDFromHint(this.sb);\n-            this.sb.append(\"style='\").append(strokeStyle())\n+            this.sb.append(\" style='\").append(strokeStyle())\n                     .append(\";fill:none\").append(\"'\");\n             if (!this.transform.isIdentity()) {\n             \tthis.sb.append(\" transform='\").append(getSVGTransform(\n@@ -1239,9 +1239,9 @@ public final class SVGGraphics2D extends Graphics2D {\n             if (r.isEmpty()) {\n                 return;\n             }\n-            this.sb.append(\"<rect \");\n+            this.sb.append(\"<rect\");\n             appendOptionalElementIDFromHint(this.sb);\n-            this.sb.append(\"x='\").append(geomDP(r.getX()))\n+            this.sb.append(\" x='\").append(geomDP(r.getX()))\n                     .append(\"' y='\").append(geomDP(r.getY()))\n                     .append(\"' width='\").append(geomDP(r.getWidth()))\n                     .append(\"' height='\").append(geomDP(r.getHeight()))\n@@ -1258,9 +1258,9 @@ public final class SVGGraphics2D extends Graphics2D {\n             this.sb.append(\"/>\");\n         } else if (s instanceof Ellipse2D) {\n             Ellipse2D e = (Ellipse2D) s;\n-            this.sb.append(\"<ellipse \");\n+            this.sb.append(\"<ellipse\");\n             appendOptionalElementIDFromHint(this.sb);\n-            this.sb.append(\"cx=\\\"\").append(geomDP(e.getCenterX()))\n+            this.sb.append(\" cx=\\\"\").append(geomDP(e.getCenterX()))\n                     .append(\"\\\" cy=\\\"\").append(geomDP(e.getCenterY()))\n                     .append(\"\\\" rx=\\\"\").append(geomDP(e.getWidth() / 2.0))\n                     .append(\"\\\" ry=\\\"\").append(geomDP(e.getHeight() / 2.0))\n@@ -1274,9 +1274,9 @@ public final class SVGGraphics2D extends Graphics2D {\n             this.sb.append(\"/>\");        \n         } else if (s instanceof Path2D) {\n             Path2D path = (Path2D) s;\n-            this.sb.append(\"<g \");\n+            this.sb.append(\"<g\");\n             appendOptionalElementIDFromHint(this.sb);\n-            this.sb.append(\"style='\").append(getSVGFillStyle());\n+            this.sb.append(\" style='\").append(getSVGFillStyle());\n             this.sb.append(\";stroke:none\").append('\\'');\n             if (!this.transform.isIdentity()) {\n             \tthis.sb.append(\" transform='\").append(getSVGTransform(\n@@ -1692,10 +1692,10 @@ public final class SVGGraphics2D extends Graphics2D {\n         }\n         if (!SVGHints.VALUE_DRAW_STRING_TYPE_VECTOR.equals(\n                 this.hints.get(SVGHints.KEY_DRAW_STRING_TYPE))) {\n-            this.sb.append(\"<g \");\n+            this.sb.append(\"<g\");\n             appendOptionalElementIDFromHint(this.sb);\n             if (!this.transform.isIdentity()) {\n-            \tthis.sb.append(\"transform=\\\"\").append(getSVGTransform(\n+            \tthis.sb.append(\" transform=\\\"\").append(getSVGTransform(\n                     this.transform)).append(\"\\\"\");\n             }\n             this.sb.append(\">\");\n", "test_patch": "diff --git a/src/test/java/org/jfree/svg/TestGeneral.java b/src/test/java/org/jfree/svg/TestGeneral.java\nindex d0b076d..0da0680 100644\n--- a/src/test/java/org/jfree/svg/TestGeneral.java\n+++ b/src/test/java/org/jfree/svg/TestGeneral.java\n@@ -35,6 +35,7 @@ package org.jfree.svg;\n import java.awt.AlphaComposite;\n import static org.junit.jupiter.api.Assertions.assertEquals;\n import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n \n import java.awt.BasicStroke;\n import java.awt.Color;\n@@ -76,6 +77,19 @@ public class TestGeneral {\n     }\n     \n     @Test\n+    public void checkDrawPath2DWithElementID() {\n+        SVGGraphics2D g2 = new SVGGraphics2D(200, 100);\n+        g2.setStroke(new BasicStroke(2.0f, BasicStroke.CAP_BUTT, BasicStroke.JOIN_BEVEL, 3.0f));\n+        Path2D path = new Path2D.Double();\n+        path.moveTo(10.0, 20.0);\n+        path.lineTo(30.0, 40.0);\n+        g2.setRenderingHint(SVGHints.KEY_ELEMENT_ID, \"UNIQUE_ELEMENT_ID_1\");\n+        g2.draw(path);\n+        assertEquals(\"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\" xmlns:jfreesvg=\\\"http://www.jfree.org/jfreesvg/svg\\\" width=\\\"200.0\\\" height=\\\"100.0\\\" text-rendering=\\\"auto\\\" shape-rendering=\\\"auto\\\">\\n\" +\n+\"<g id='UNIQUE_ELEMENT_ID_1' style='stroke-width:2.0;stroke:rgb(0,0,0);stroke-opacity:1.0;stroke-linejoin:bevel;stroke-miterlimit:3.0;fill:none'><path d='M10.0,20.0L30.0,40.0'/></g></svg>\", g2.getSVGElement());\n+    }\n+    \n+    @Test\n     public void checkDrawPath2DWithTransform() {\n         SVGGraphics2D g2 = new SVGGraphics2D(200, 100);\n         g2.setStroke(new BasicStroke(2.0f, BasicStroke.CAP_BUTT, BasicStroke.JOIN_BEVEL, 3.0f));\n@@ -195,6 +209,18 @@ public class TestGeneral {\n     }\n \n     @Test\n+    public void checkDrawRectangle2DWithElementID() {\n+        SVGGraphics2D g2 = new SVGGraphics2D(200, 100);\n+        g2.setStroke(new BasicStroke(2.0f, BasicStroke.CAP_BUTT, BasicStroke.JOIN_BEVEL, 3.0f));\n+        Rectangle2D rect = new Rectangle2D.Double(10.0, 20.0, 30.0, 40.0);\n+        g2.setRenderingHint(SVGHints.KEY_ELEMENT_ID, \"UNIQUE_ELEMENT_ID_1\");\n+        g2.draw(rect);\n+        assertNull(g2.getRenderingHint(SVGHints.KEY_ELEMENT_ID)); // should be cleared after call\n+        assertEquals(\"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\" xmlns:jfreesvg=\\\"http://www.jfree.org/jfreesvg/svg\\\" width=\\\"200.0\\\" height=\\\"100.0\\\" text-rendering=\\\"auto\\\" shape-rendering=\\\"auto\\\">\\n\" +\n+\"<rect id='UNIQUE_ELEMENT_ID_1' x='10.0' y='20.0' width='30.0' height='40.0' style='stroke-width:2.0;stroke:rgb(0,0,0);stroke-opacity:1.0;stroke-linejoin:bevel;stroke-miterlimit:3.0;fill:none'/></svg>\", g2.getSVGElement());\n+    }\n+\n+    @Test\n     public void checkDrawRectangle2DWithTransform() {\n         SVGGraphics2D g2 = new SVGGraphics2D(200, 100);\n         g2.setStroke(new BasicStroke(2.0f, BasicStroke.CAP_BUTT, BasicStroke.JOIN_BEVEL, 3.0f));\n@@ -318,7 +344,20 @@ public class TestGeneral {\n         g2.setPaint(Color.GREEN);\n         g2.drawString(\"ABC\", 10, 20);\n         assertEquals(\"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\" xmlns:jfreesvg=\\\"http://www.jfree.org/jfreesvg/svg\\\" width=\\\"200.0\\\" height=\\\"100.0\\\" text-rendering=\\\"auto\\\" shape-rendering=\\\"auto\\\">\\n\" +\n-\"<g ><text x='10.0' y='20.0' style='fill: rgb(0,255,0); fill-opacity: 1.0; font-family: 'sans-serif'; font-size: 12px;'>ABC</text></g></svg>\", g2.getSVGElement());\n+\"<g><text x='10.0' y='20.0' style='fill: rgb(0,255,0); fill-opacity: 1.0; font-family: 'sans-serif'; font-size: 12px;'>ABC</text></g></svg>\", g2.getSVGElement());\n+    }    \n+\n+    /** \n+     * Check the output for drawing a string.\n+     */\n+    @Test\n+    public void checkDrawStringWithElementID() {\n+        SVGGraphics2D g2 = new SVGGraphics2D(200, 100);\n+        g2.setPaint(Color.GREEN);\n+        g2.setRenderingHint(SVGHints.KEY_ELEMENT_ID, \"UNIQUE_ELEMENT_ID_1\");\n+        g2.drawString(\"ABC\", 10, 20);\n+        assertEquals(\"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\" xmlns:jfreesvg=\\\"http://www.jfree.org/jfreesvg/svg\\\" width=\\\"200.0\\\" height=\\\"100.0\\\" text-rendering=\\\"auto\\\" shape-rendering=\\\"auto\\\">\\n\" +\n+\"<g id='UNIQUE_ELEMENT_ID_1'><text x='10.0' y='20.0' style='fill: rgb(0,255,0); fill-opacity: 1.0; font-family: 'sans-serif'; font-size: 12px;'>ABC</text></g></svg>\", g2.getSVGElement());\n     }    \n \n }\n"}
{"repository": "jfree/jfreesvg", "clone_url": "https://github.com/jfree/jfreesvg.git", "timestamp": "2023-05-31T18:34:21.513222Z", "commit_hash": "76f40c3ea1b33e5eb7585f337bf604107de5a890", "commit_message": "Add tests for draw(Shape) method and fix failures.", "related_issues": "", "bug_patch": "diff --git a/src/main/java/org/jfree/svg/SVGGraphics2D.java b/src/main/java/org/jfree/svg/SVGGraphics2D.java\nindex 475f8a5..b2af1eb 100644\n--- a/src/main/java/org/jfree/svg/SVGGraphics2D.java\n+++ b/src/main/java/org/jfree/svg/SVGGraphics2D.java\n@@ -1192,10 +1192,13 @@ public final class SVGGraphics2D extends Graphics2D {\n             this.sb.append(\"style='\").append(strokeStyle())\n                     .append(\";fill:none\").append(\"'\");\n             if (!this.transform.isIdentity()) {\n-            \tthis.sb.append(\" transform=\\\"\").append(getSVGTransform(\n-            \t\tthis.transform)).append(\"\\\" \");\n+            \tthis.sb.append(\" transform='\").append(getSVGTransform(\n+            \t\tthis.transform)).append('\\'');\n+            }\n+            String clip = getClipPathRef();\n+            if (!clip.isEmpty()) {\n+                this.sb.append(' ').append(clip);\n             }\n-            this.sb.append(getClipPathRef());\n             this.sb.append(\"/>\");        \n         } else if (s instanceof Path2D) {\n             Path2D path = (Path2D) s;\n@@ -1204,10 +1207,13 @@ public final class SVGGraphics2D extends Graphics2D {\n             this.sb.append(\"style='\").append(strokeStyle())\n                     .append(\";fill:none\").append(\"'\");\n             if (!this.transform.isIdentity()) {\n-            \tthis.sb.append(\" transform=\\\"\").append(getSVGTransform(\n-            \t\tthis.transform)).append(\"\\\" \");\n+            \tthis.sb.append(\" transform='\").append(getSVGTransform(\n+            \t\tthis.transform)).append('\\'');\n+            }\n+            String clip = getClipPathRef();\n+            if (!clip.isEmpty()) {\n+                this.sb.append(' ').append(clip);\n             }\n-            this.sb.append(getClipPathRef());\n             this.sb.append(\">\");\n             this.sb.append(\"<path \").append(getSVGPathData(path)).append(\"/>\");\n             this.sb.append(\"</g>\");\n", "test_patch": "diff --git a/src/test/java/org/jfree/svg/TestGeneral.java b/src/test/java/org/jfree/svg/TestGeneral.java\nindex 030eb2f..542dac1 100644\n--- a/src/test/java/org/jfree/svg/TestGeneral.java\n+++ b/src/test/java/org/jfree/svg/TestGeneral.java\n@@ -46,7 +46,7 @@ import java.awt.geom.Rectangle2D;\n import org.junit.jupiter.api.Test;\n \n /**\n- * Some general tests.\n+ * Some general tests that check the SVG output generated.\n  */\n public class TestGeneral {\n     \n@@ -63,7 +63,7 @@ public class TestGeneral {\n     }\n     \n     @Test\n-    public void checkStyleOnPath2D() {\n+    public void checkDrawPath2D() {\n         SVGGraphics2D g2 = new SVGGraphics2D(200, 100);\n         g2.setStroke(new BasicStroke(2.0f, BasicStroke.CAP_BUTT, BasicStroke.JOIN_BEVEL, 3.0f));\n         Path2D path = new Path2D.Double();\n@@ -75,6 +75,38 @@ public class TestGeneral {\n     }\n     \n     @Test\n+    public void checkDrawPath2DWithTransform() {\n+        SVGGraphics2D g2 = new SVGGraphics2D(200, 100);\n+        g2.setStroke(new BasicStroke(2.0f, BasicStroke.CAP_BUTT, BasicStroke.JOIN_BEVEL, 3.0f));\n+        g2.setTransform(AffineTransform.getTranslateInstance(2.0, 3.0));\n+        Path2D path = new Path2D.Double();\n+        path.moveTo(10.0, 20.0);\n+        path.lineTo(30.0, 40.0);\n+        g2.draw(path);\n+        assertEquals(\"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\" xmlns:jfreesvg=\\\"http://www.jfree.org/jfreesvg/svg\\\" width=\\\"200.0\\\" height=\\\"100.0\\\" text-rendering=\\\"auto\\\" shape-rendering=\\\"auto\\\">\\n\" +\n+\"<g style='stroke-width:2.0;stroke:rgb(0,0,0);stroke-opacity:1.0;stroke-linejoin:bevel;stroke-miterlimit:3.0;fill:none' transform='matrix(1.0,0.0,0.0,1.0,2.0,3.0)'><path d='M10.0,20.0L30.0,40.0'/></g></svg>\", g2.getSVGElement());\n+    }\n+\n+    /** \n+     * Checks that the clip is correctly applied when drawing a Path2D.\n+     */\n+    @Test\n+    public void checkDrawPath2DWithClip() {\n+        SVGGraphics2D g2 = new SVGGraphics2D(200, 100);\n+        g2.setDefsKeyPrefix(\"PRE\");\n+        g2.setStroke(new BasicStroke(2.0f, BasicStroke.CAP_BUTT, BasicStroke.JOIN_BEVEL, 3.0f));\n+        g2.clip(new Rectangle(10, 15, 20, 25));\n+        Path2D path = new Path2D.Double();\n+        path.moveTo(10.0, 20.0);\n+        path.lineTo(30.0, 40.0);\n+        g2.draw(path);\n+        assertEquals(\"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\" xmlns:jfreesvg=\\\"http://www.jfree.org/jfreesvg/svg\\\" width=\\\"200.0\\\" height=\\\"100.0\\\" text-rendering=\\\"auto\\\" shape-rendering=\\\"auto\\\">\\n\" +\n+\"<defs><clipPath id=\\\"PREclip-0\\\"><path d='M10.0,15.0L30.0,15.0L30.0,40.0L10.0,40.0L10.0,15.0Z'/></clipPath>\\n\" +\n+\"</defs>\\n\" +\n+\"<g style='stroke-width:2.0;stroke:rgb(0,0,0);stroke-opacity:1.0;stroke-linejoin:bevel;stroke-miterlimit:3.0;fill:none' clip-path='url(#PREclip-0)'><path d='M10.0,20.0L30.0,40.0'/></g></svg>\", g2.getSVGElement());\n+    }\n+\n+    @Test\n     public void checkDrawLine2D() {\n         SVGGraphics2D g2 = new SVGGraphics2D(200, 100);\n         g2.setStroke(new BasicStroke(2.0f, BasicStroke.CAP_BUTT, BasicStroke.JOIN_BEVEL, 3.0f));\n@@ -132,6 +164,20 @@ public class TestGeneral {\n     }\n \n     @Test\n+    public void checkDrawRectangle2DWithClip() {\n+        SVGGraphics2D g2 = new SVGGraphics2D(200, 100);\n+        g2.setDefsKeyPrefix(\"PRE\");\n+        g2.setStroke(new BasicStroke(2.0f, BasicStroke.CAP_BUTT, BasicStroke.JOIN_BEVEL, 3.0f));\n+        g2.clip(new Rectangle(10, 15, 20, 25));\n+        Rectangle2D rect = new Rectangle2D.Double(10.0, 20.0, 30.0, 40.0);\n+        g2.draw(rect);\n+        assertEquals(\"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\" xmlns:jfreesvg=\\\"http://www.jfree.org/jfreesvg/svg\\\" width=\\\"200.0\\\" height=\\\"100.0\\\" text-rendering=\\\"auto\\\" shape-rendering=\\\"auto\\\">\\n\" +\n+\"<defs><clipPath id=\\\"PREclip-0\\\"><path d='M10.0,15.0L30.0,15.0L30.0,40.0L10.0,40.0L10.0,15.0Z'/></clipPath>\\n\" +\n+\"</defs>\\n\" +\n+\"<rect x='10.0' y='20.0' width='30.0' height='40.0' style='stroke-width:2.0;stroke:rgb(0,0,0);stroke-opacity:1.0;stroke-linejoin:bevel;stroke-miterlimit:3.0;fill:none' clip-path='url(#PREclip-0)'/></svg>\", g2.getSVGElement());\n+    }\n+\n+    @Test\n     public void checkDrawEllipse2D() {\n         SVGGraphics2D g2 = new SVGGraphics2D(200, 100);\n         g2.setStroke(new BasicStroke(2.0f, BasicStroke.CAP_BUTT, BasicStroke.JOIN_BEVEL, 3.0f));\n@@ -141,4 +187,29 @@ public class TestGeneral {\n \"<ellipse cx='25.0' cy='40.0' rx='15.0' ry='20.0' style='stroke-width:2.0;stroke:rgb(0,0,0);stroke-opacity:1.0;stroke-linejoin:bevel;stroke-miterlimit:3.0;fill:none'/></svg>\", g2.getSVGElement());\n     }\n \n+    @Test\n+    public void checkDrawEllipse2DWithTransform() {\n+        SVGGraphics2D g2 = new SVGGraphics2D(200, 100);\n+        g2.setStroke(new BasicStroke(2.0f, BasicStroke.CAP_BUTT, BasicStroke.JOIN_BEVEL, 3.0f));\n+        g2.setTransform(AffineTransform.getScaleInstance(2.0, 3.0));\n+        Ellipse2D ellipse = new Ellipse2D.Double(10.0, 20.0, 30.0, 40.0);\n+        g2.draw(ellipse);\n+        assertEquals(\"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\" xmlns:jfreesvg=\\\"http://www.jfree.org/jfreesvg/svg\\\" width=\\\"200.0\\\" height=\\\"100.0\\\" text-rendering=\\\"auto\\\" shape-rendering=\\\"auto\\\">\\n\" +\n+\"<ellipse cx='25.0' cy='40.0' rx='15.0' ry='20.0' style='stroke-width:2.0;stroke:rgb(0,0,0);stroke-opacity:1.0;stroke-linejoin:bevel;stroke-miterlimit:3.0;fill:none' transform='matrix(2.0,0.0,0.0,3.0,0.0,0.0)'/></svg>\", g2.getSVGElement());\n+    }\n+\n+   @Test\n+    public void checkDrawEllipse2DWithClip() {\n+        SVGGraphics2D g2 = new SVGGraphics2D(200, 100);\n+        g2.setDefsKeyPrefix(\"DEF\");\n+        g2.setStroke(new BasicStroke(2.0f, BasicStroke.CAP_BUTT, BasicStroke.JOIN_BEVEL, 3.0f));\n+        g2.clip(new Rectangle(10, 15, 20, 25));        \n+        Ellipse2D ellipse = new Ellipse2D.Double(10.0, 20.0, 30.0, 40.0);\n+        g2.draw(ellipse);\n+        assertEquals(\"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\" xmlns:jfreesvg=\\\"http://www.jfree.org/jfreesvg/svg\\\" width=\\\"200.0\\\" height=\\\"100.0\\\" text-rendering=\\\"auto\\\" shape-rendering=\\\"auto\\\">\\n\" +\n+\"<defs><clipPath id=\\\"DEFclip-0\\\"><path d='M10.0,15.0L30.0,15.0L30.0,40.0L10.0,40.0L10.0,15.0Z'/></clipPath>\\n\" +\n+\"</defs>\\n\" +\n+\"<ellipse cx='25.0' cy='40.0' rx='15.0' ry='20.0' style='stroke-width:2.0;stroke:rgb(0,0,0);stroke-opacity:1.0;stroke-linejoin:bevel;stroke-miterlimit:3.0;fill:none' clip-path='url(#DEFclip-0)'/></svg>\", g2.getSVGElement());\n+    }\n+\n }\n"}
{"repository": "jfree/jfreesvg", "clone_url": "https://github.com/jfree/jfreesvg.git", "timestamp": "2023-05-31T18:41:35.207823Z", "commit_hash": "26d1ddbc102587c5c367284ae8b6b8178acde126", "commit_message": "Add tests for draw(Shape) method and fix failures.", "related_issues": "", "bug_patch": "diff --git a/src/main/java/org/jfree/svg/SVGGraphics2D.java b/src/main/java/org/jfree/svg/SVGGraphics2D.java\nindex 6fbf26f..475f8a5 100644\n--- a/src/main/java/org/jfree/svg/SVGGraphics2D.java\n+++ b/src/main/java/org/jfree/svg/SVGGraphics2D.java\n@@ -1152,7 +1152,7 @@ public final class SVGGraphics2D extends Graphics2D {\n                     .append(\"' \");\n             this.sb.append(\"style='\").append(strokeStyle()).append(\"'\");\n             if (!this.transform.isIdentity()) {\n-            \tthis.sb.append(\";transform='\").append(getSVGTransform(\n+            \tthis.sb.append(\" transform='\").append(getSVGTransform(\n             \t\tthis.transform)).append(\"'\");\n             }\n             String clip = getClipPathRef();\n@@ -1172,7 +1172,7 @@ public final class SVGGraphics2D extends Graphics2D {\n             this.sb.append(\"style='\").append(strokeStyle())\n                     .append(\";fill:none\").append(\"'\");\n             if (!this.transform.isIdentity()) {\n-            \tthis.sb.append(\";transform='\").append(getSVGTransform(\n+            \tthis.sb.append(\" transform='\").append(getSVGTransform(\n             \t\tthis.transform)).append('\\'');\n             }\n             String clip = getClipPathRef();\n@@ -1192,7 +1192,7 @@ public final class SVGGraphics2D extends Graphics2D {\n             this.sb.append(\"style='\").append(strokeStyle())\n                     .append(\";fill:none\").append(\"'\");\n             if (!this.transform.isIdentity()) {\n-            \tthis.sb.append(\"transform=\\\"\").append(getSVGTransform(\n+            \tthis.sb.append(\" transform=\\\"\").append(getSVGTransform(\n             \t\tthis.transform)).append(\"\\\" \");\n             }\n             this.sb.append(getClipPathRef());\n", "test_patch": "diff --git a/src/test/java/org/jfree/svg/TestGeneral.java b/src/test/java/org/jfree/svg/TestGeneral.java\nindex bb10885..030eb2f 100644\n--- a/src/test/java/org/jfree/svg/TestGeneral.java\n+++ b/src/test/java/org/jfree/svg/TestGeneral.java\n@@ -92,7 +92,7 @@ public class TestGeneral {\n         Line2D line = new Line2D.Double(10.0, 20.0, 30.0, 40.0);\n         g2.draw(line);\n         assertEquals(\"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\" xmlns:jfreesvg=\\\"http://www.jfree.org/jfreesvg/svg\\\" width=\\\"200.0\\\" height=\\\"100.0\\\" text-rendering=\\\"auto\\\" shape-rendering=\\\"auto\\\">\\n\" +\n-\"<line x1='10.0' y1='20.0' x2='30.0' y2='40.0' style='stroke-width:2.0;stroke:rgb(0,0,0);stroke-opacity:1.0;stroke-linejoin:bevel;stroke-miterlimit:3.0';transform='matrix(2.0,0.0,0.0,3.0,0.0,0.0)'/></svg>\", g2.getSVGElement());\n+\"<line x1='10.0' y1='20.0' x2='30.0' y2='40.0' style='stroke-width:2.0;stroke:rgb(0,0,0);stroke-opacity:1.0;stroke-linejoin:bevel;stroke-miterlimit:3.0' transform='matrix(2.0,0.0,0.0,3.0,0.0,0.0)'/></svg>\", g2.getSVGElement());\n     }    \n \n     @Test\n@@ -107,7 +107,7 @@ public class TestGeneral {\n         assertEquals(\"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\" xmlns:jfreesvg=\\\"http://www.jfree.org/jfreesvg/svg\\\" width=\\\"200.0\\\" height=\\\"100.0\\\" text-rendering=\\\"auto\\\" shape-rendering=\\\"auto\\\">\\n\" +\n \"<defs><clipPath id=\\\"PREclip-0\\\"><path d='M10.0,11.0L22.0,11.0L22.0,24.0L10.0,24.0L10.0,11.0Z'/></clipPath>\\n\" +\n \"</defs>\\n\" +\n-\"<line x1='10.0' y1='20.0' x2='30.0' y2='40.0' style='stroke-width:2.0;stroke:rgb(0,0,0);stroke-opacity:1.0;stroke-linejoin:bevel;stroke-miterlimit:3.0';transform='matrix(2.0,0.0,0.0,3.0,0.0,0.0)' clip-path='url(#PREclip-0)'/></svg>\", g2.getSVGElement());\n+\"<line x1='10.0' y1='20.0' x2='30.0' y2='40.0' style='stroke-width:2.0;stroke:rgb(0,0,0);stroke-opacity:1.0;stroke-linejoin:bevel;stroke-miterlimit:3.0' transform='matrix(2.0,0.0,0.0,3.0,0.0,0.0)' clip-path='url(#PREclip-0)'/></svg>\", g2.getSVGElement());\n     }    \n \n     @Test\n@@ -128,7 +128,7 @@ public class TestGeneral {\n         Rectangle2D rect = new Rectangle2D.Double(10.0, 20.0, 30.0, 40.0);\n         g2.draw(rect);\n         assertEquals(\"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\" xmlns:jfreesvg=\\\"http://www.jfree.org/jfreesvg/svg\\\" width=\\\"200.0\\\" height=\\\"100.0\\\" text-rendering=\\\"auto\\\" shape-rendering=\\\"auto\\\">\\n\" +\n-\"<rect x='10.0' y='20.0' width='30.0' height='40.0' style='stroke-width:2.0;stroke:rgb(0,0,0);stroke-opacity:1.0;stroke-linejoin:bevel;stroke-miterlimit:3.0;fill:none';transform='matrix(2.0,0.0,0.0,3.0,0.0,0.0)'/></svg>\", g2.getSVGElement());\n+\"<rect x='10.0' y='20.0' width='30.0' height='40.0' style='stroke-width:2.0;stroke:rgb(0,0,0);stroke-opacity:1.0;stroke-linejoin:bevel;stroke-miterlimit:3.0;fill:none' transform='matrix(2.0,0.0,0.0,3.0,0.0,0.0)'/></svg>\", g2.getSVGElement());\n     }\n \n     @Test\n"}
{"repository": "jfree/jfreesvg", "clone_url": "https://github.com/jfree/jfreesvg.git", "timestamp": "2023-05-31T18:47:25.193458Z", "commit_hash": "e9b9812c69129d30e3faa13919b4e1eb864607f0", "commit_message": "Add tests for draw(Shape) method and fix failures.", "related_issues": "", "bug_patch": "diff --git a/src/main/java/org/jfree/svg/SVGGraphics2D.java b/src/main/java/org/jfree/svg/SVGGraphics2D.java\nindex 4431917..6fbf26f 100644\n--- a/src/main/java/org/jfree/svg/SVGGraphics2D.java\n+++ b/src/main/java/org/jfree/svg/SVGGraphics2D.java\n@@ -1145,46 +1145,52 @@ public final class SVGGraphics2D extends Graphics2D {\n             Line2D l = (Line2D) s;\n             this.sb.append(\"<line \");\n             appendOptionalElementIDFromHint(this.sb);\n-            this.sb.append(\"x1=\\\"\").append(geomDP(l.getX1()))\n-                    .append(\"\\\" y1=\\\"\").append(geomDP(l.getY1()))\n-                    .append(\"\\\" x2=\\\"\").append(geomDP(l.getX2()))\n-                    .append(\"\\\" y2=\\\"\").append(geomDP(l.getY2()))\n-                    .append(\"\\\" \");\n-            this.sb.append(\"style=\\\"\").append(strokeStyle()).append(\"\\\" \");\n+            this.sb.append(\"x1='\").append(geomDP(l.getX1()))\n+                    .append(\"' y1='\").append(geomDP(l.getY1()))\n+                    .append(\"' x2='\").append(geomDP(l.getX2()))\n+                    .append(\"' y2='\").append(geomDP(l.getY2()))\n+                    .append(\"' \");\n+            this.sb.append(\"style='\").append(strokeStyle()).append(\"'\");\n             if (!this.transform.isIdentity()) {\n-            \tthis.sb.append(\"transform=\\\"\").append(getSVGTransform(\n-            \t\tthis.transform)).append(\"\\\" \");\n+            \tthis.sb.append(\";transform='\").append(getSVGTransform(\n+            \t\tthis.transform)).append(\"'\");\n+            }\n+            String clip = getClipPathRef();\n+            if (!clip.isEmpty()) {\n+                this.sb.append(' ').append(getClipPathRef());    \n             }\n-            this.sb.append(getClipPathRef());\n             this.sb.append(\"/>\");\n         } else if (s instanceof Rectangle2D) {\n             Rectangle2D r = (Rectangle2D) s;\n             this.sb.append(\"<rect \");\n             appendOptionalElementIDFromHint(this.sb);\n-            this.sb.append(\"x=\\\"\").append(geomDP(r.getX()))\n-                    .append(\"\\\" y=\\\"\").append(geomDP(r.getY()))\n-                    .append(\"\\\" width=\\\"\").append(geomDP(r.getWidth()))\n-                    .append(\"\\\" height=\\\"\").append(geomDP(r.getHeight()))\n-                    .append(\"\\\" \");\n-            this.sb.append(\"style=\\\"\").append(strokeStyle())\n-                    .append(\"; fill: none\").append(\"\\\" \");\n+            this.sb.append(\"x='\").append(geomDP(r.getX()))\n+                    .append(\"' y='\").append(geomDP(r.getY()))\n+                    .append(\"' width='\").append(geomDP(r.getWidth()))\n+                    .append(\"' height='\").append(geomDP(r.getHeight()))\n+                    .append(\"' \");\n+            this.sb.append(\"style='\").append(strokeStyle())\n+                    .append(\";fill:none\").append(\"'\");\n             if (!this.transform.isIdentity()) {\n-            \tthis.sb.append(\"transform=\\\"\").append(getSVGTransform(\n-            \t\tthis.transform)).append(\"\\\" \");\n+            \tthis.sb.append(\";transform='\").append(getSVGTransform(\n+            \t\tthis.transform)).append('\\'');\n+            }\n+            String clip = getClipPathRef();\n+            if (!clip.isEmpty()) {\n+                this.sb.append(' ').append(clip);\n             }\n-            this.sb.append(getClipPathRef());\n             this.sb.append(\"/>\");\n         } else if (s instanceof Ellipse2D) {\n             Ellipse2D e = (Ellipse2D) s;\n             this.sb.append(\"<ellipse \");\n             appendOptionalElementIDFromHint(this.sb);\n-            this.sb.append(\"cx=\\\"\").append(geomDP(e.getCenterX()))\n-                    .append(\"\\\" cy=\\\"\").append(geomDP(e.getCenterY()))\n-                    .append(\"\\\" rx=\\\"\").append(geomDP(e.getWidth() / 2.0))\n-                    .append(\"\\\" ry=\\\"\").append(geomDP(e.getHeight() / 2.0))\n-                    .append(\"\\\" \");\n-            this.sb.append(\"style=\\\"\").append(strokeStyle())\n-                    .append(\"; fill: none\").append(\"\\\" \");\n+            this.sb.append(\"cx='\").append(geomDP(e.getCenterX()))\n+                    .append(\"' cy='\").append(geomDP(e.getCenterY()))\n+                    .append(\"' rx='\").append(geomDP(e.getWidth() / 2.0))\n+                    .append(\"' ry='\").append(geomDP(e.getHeight() / 2.0))\n+                    .append(\"' \");\n+            this.sb.append(\"style='\").append(strokeStyle())\n+                    .append(\";fill:none\").append(\"'\");\n             if (!this.transform.isIdentity()) {\n             \tthis.sb.append(\"transform=\\\"\").append(getSVGTransform(\n             \t\tthis.transform)).append(\"\\\" \");\n@@ -1195,10 +1201,10 @@ public final class SVGGraphics2D extends Graphics2D {\n             Path2D path = (Path2D) s;\n             this.sb.append(\"<g \");\n             appendOptionalElementIDFromHint(this.sb);\n-            this.sb.append(\"style=\\\"\").append(strokeStyle())\n-                    .append(\"; fill: none\").append(\"\\\" \");\n+            this.sb.append(\"style='\").append(strokeStyle())\n+                    .append(\";fill:none\").append(\"'\");\n             if (!this.transform.isIdentity()) {\n-            \tthis.sb.append(\"transform=\\\"\").append(getSVGTransform(\n+            \tthis.sb.append(\" transform=\\\"\").append(getSVGTransform(\n             \t\tthis.transform)).append(\"\\\" \");\n             }\n             this.sb.append(getClipPathRef());\n@@ -1399,7 +1405,8 @@ public final class SVGGraphics2D extends Graphics2D {\n     \n     /**\n      * Returns a stroke style string based on the current stroke and\n-     * alpha settings.\n+     * alpha settings.  Implementation note: the last attribute in the string \n+     * will not have a semi-colon after it.\n      * \n      * @return A stroke style string.\n      */\n@@ -1439,36 +1446,34 @@ public final class SVGGraphics2D extends Graphics2D {\n             dashArray = bs.getDashArray();\n         }\n         StringBuilder b = new StringBuilder();\n-        b.append(\"stroke-width: \").append(strokeWidth).append(\";\");\n-        b.append(\"stroke: \").append(svgColorStr()).append(\";\");\n-        b.append(\"stroke-opacity: \").append(getColorAlpha() * getAlpha())\n-                .append(\";\");\n+        b.append(\"stroke-width:\").append(strokeWidth).append(\";\");\n+        b.append(\"stroke:\").append(svgColorStr()).append(\";\");\n+        b.append(\"stroke-opacity:\").append(getColorAlpha() * getAlpha());\n         if (!strokeCap.equals(DEFAULT_STROKE_CAP)) {\n-            b.append(\"stroke-linecap: \").append(strokeCap).append(\";\");\n+            b.append(\";stroke-linecap:\").append(strokeCap);\n         }\n         if (!strokeJoin.equals(DEFAULT_STROKE_JOIN)) {\n-            b.append(\"stroke-linejoin: \").append(strokeJoin).append(\";\");\n+            b.append(\";stroke-linejoin:\").append(strokeJoin);\n         }\n         if (Math.abs(DEFAULT_MITER_LIMIT - miterLimit) > 0.001) {\n-            b.append(\"stroke-miterlimit: \").append(geomDP(miterLimit)).append(\";\");\n+            b.append(\";stroke-miterlimit:\").append(geomDP(miterLimit));\n         }\n         if (dashArray != null && dashArray.length != 0) {\n-            b.append(\"stroke-dasharray: \");\n+            b.append(\";stroke-dasharray:\");\n             for (int i = 0; i < dashArray.length; i++) {\n-                if (i != 0) b.append(\", \");\n+                if (i != 0) b.append(\",\");\n                 b.append(dashArray[i]);\n             }\n-            b.append(\";\");\n         }\n         if (this.checkStrokeControlHint) {\n             Object hint = getRenderingHint(RenderingHints.KEY_STROKE_CONTROL);\n             if (RenderingHints.VALUE_STROKE_NORMALIZE.equals(hint) \n                     && !this.shapeRendering.equals(\"crispEdges\")) {\n-                b.append(\"shape-rendering:crispEdges;\");\n+                b.append(\";shape-rendering:crispEdges\");\n             }\n             if (RenderingHints.VALUE_STROKE_PURE.equals(hint) \n                     && !this.shapeRendering.equals(\"geometricPrecision\")) {\n-                b.append(\"shape-rendering:geometricPrecision;\");\n+                b.append(\";shape-rendering:geometricPrecision\");\n             }\n         }\n         return b.toString();\n@@ -2952,7 +2957,7 @@ public final class SVGGraphics2D extends Graphics2D {\n             this.clipRef = registerClip(getClip());\n         }\n         StringBuilder b = new StringBuilder();\n-        b.append(\"clip-path=\\\"url(#\").append(this.clipRef).append(\")\\\"\");\n+        b.append(\"clip-path='url(#\").append(this.clipRef).append(\")'\");\n         return b.toString();\n     }\n     \n", "test_patch": "diff --git a/src/test/java/org/jfree/svg/TestGeneral.java b/src/test/java/org/jfree/svg/TestGeneral.java\nindex edfb7af..bb10885 100644\n--- a/src/test/java/org/jfree/svg/TestGeneral.java\n+++ b/src/test/java/org/jfree/svg/TestGeneral.java\n@@ -32,10 +32,17 @@\n \n package org.jfree.svg;\n \n+import static org.junit.jupiter.api.Assertions.assertEquals;\n import static org.junit.jupiter.api.Assertions.assertFalse;\n \n+import java.awt.BasicStroke;\n import java.awt.Color;\n import java.awt.Rectangle;\n+import java.awt.geom.AffineTransform;\n+import java.awt.geom.Ellipse2D;\n+import java.awt.geom.Line2D;\n+import java.awt.geom.Path2D;\n+import java.awt.geom.Rectangle2D;\n import org.junit.jupiter.api.Test;\n \n /**\n@@ -54,4 +61,84 @@ public class TestGeneral {\n         g2.fill(new Rectangle(10, 20, 30, 40));\n         assertFalse(g2.getSVGElement().contains(\"<defs>\"));\n     }\n+    \n+    @Test\n+    public void checkStyleOnPath2D() {\n+        SVGGraphics2D g2 = new SVGGraphics2D(200, 100);\n+        g2.setStroke(new BasicStroke(2.0f, BasicStroke.CAP_BUTT, BasicStroke.JOIN_BEVEL, 3.0f));\n+        Path2D path = new Path2D.Double();\n+        path.moveTo(10.0, 20.0);\n+        path.lineTo(30.0, 40.0);\n+        g2.draw(path);\n+        assertEquals(\"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\" xmlns:jfreesvg=\\\"http://www.jfree.org/jfreesvg/svg\\\" width=\\\"200.0\\\" height=\\\"100.0\\\" text-rendering=\\\"auto\\\" shape-rendering=\\\"auto\\\">\\n\" +\n+\"<g style='stroke-width:2.0;stroke:rgb(0,0,0);stroke-opacity:1.0;stroke-linejoin:bevel;stroke-miterlimit:3.0;fill:none'><path d='M10.0,20.0L30.0,40.0'/></g></svg>\", g2.getSVGElement());\n+    }\n+    \n+    @Test\n+    public void checkDrawLine2D() {\n+        SVGGraphics2D g2 = new SVGGraphics2D(200, 100);\n+        g2.setStroke(new BasicStroke(2.0f, BasicStroke.CAP_BUTT, BasicStroke.JOIN_BEVEL, 3.0f));\n+        Line2D line = new Line2D.Double(10.0, 20.0, 30.0, 40.0);\n+        g2.draw(line);\n+        assertEquals(\"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\" xmlns:jfreesvg=\\\"http://www.jfree.org/jfreesvg/svg\\\" width=\\\"200.0\\\" height=\\\"100.0\\\" text-rendering=\\\"auto\\\" shape-rendering=\\\"auto\\\">\\n\" +\n+\"<line x1='10.0' y1='20.0' x2='30.0' y2='40.0' style='stroke-width:2.0;stroke:rgb(0,0,0);stroke-opacity:1.0;stroke-linejoin:bevel;stroke-miterlimit:3.0'/></svg>\", g2.getSVGElement());\n+    }\n+    \n+    @Test\n+    public void checkDrawLine2DWithTransform() {\n+        SVGGraphics2D g2 = new SVGGraphics2D(200, 100);\n+        g2.setStroke(new BasicStroke(2.0f, BasicStroke.CAP_BUTT, BasicStroke.JOIN_BEVEL, 3.0f));\n+        g2.setTransform(AffineTransform.getScaleInstance(2.0, 3.0));\n+        Line2D line = new Line2D.Double(10.0, 20.0, 30.0, 40.0);\n+        g2.draw(line);\n+        assertEquals(\"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\" xmlns:jfreesvg=\\\"http://www.jfree.org/jfreesvg/svg\\\" width=\\\"200.0\\\" height=\\\"100.0\\\" text-rendering=\\\"auto\\\" shape-rendering=\\\"auto\\\">\\n\" +\n+\"<line x1='10.0' y1='20.0' x2='30.0' y2='40.0' style='stroke-width:2.0;stroke:rgb(0,0,0);stroke-opacity:1.0;stroke-linejoin:bevel;stroke-miterlimit:3.0';transform='matrix(2.0,0.0,0.0,3.0,0.0,0.0)'/></svg>\", g2.getSVGElement());\n+    }    \n+\n+    @Test\n+    public void checkDrawLine2DWithTransformAndClip() {\n+        SVGGraphics2D g2 = new SVGGraphics2D(200, 100);\n+        g2.setDefsKeyPrefix(\"PRE\");\n+        g2.setStroke(new BasicStroke(2.0f, BasicStroke.CAP_BUTT, BasicStroke.JOIN_BEVEL, 3.0f));\n+        g2.setTransform(AffineTransform.getScaleInstance(2.0, 3.0));\n+        g2.clip(new Rectangle(10, 11, 12, 13));\n+        Line2D line = new Line2D.Double(10.0, 20.0, 30.0, 40.0);\n+        g2.draw(line);\n+        assertEquals(\"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\" xmlns:jfreesvg=\\\"http://www.jfree.org/jfreesvg/svg\\\" width=\\\"200.0\\\" height=\\\"100.0\\\" text-rendering=\\\"auto\\\" shape-rendering=\\\"auto\\\">\\n\" +\n+\"<defs><clipPath id=\\\"PREclip-0\\\"><path d='M10.0,11.0L22.0,11.0L22.0,24.0L10.0,24.0L10.0,11.0Z'/></clipPath>\\n\" +\n+\"</defs>\\n\" +\n+\"<line x1='10.0' y1='20.0' x2='30.0' y2='40.0' style='stroke-width:2.0;stroke:rgb(0,0,0);stroke-opacity:1.0;stroke-linejoin:bevel;stroke-miterlimit:3.0';transform='matrix(2.0,0.0,0.0,3.0,0.0,0.0)' clip-path='url(#PREclip-0)'/></svg>\", g2.getSVGElement());\n+    }    \n+\n+    @Test\n+    public void checkDrawRectangle2D() {\n+        SVGGraphics2D g2 = new SVGGraphics2D(200, 100);\n+        g2.setStroke(new BasicStroke(2.0f, BasicStroke.CAP_BUTT, BasicStroke.JOIN_BEVEL, 3.0f));\n+        Rectangle2D rect = new Rectangle2D.Double(10.0, 20.0, 30.0, 40.0);\n+        g2.draw(rect);\n+        assertEquals(\"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\" xmlns:jfreesvg=\\\"http://www.jfree.org/jfreesvg/svg\\\" width=\\\"200.0\\\" height=\\\"100.0\\\" text-rendering=\\\"auto\\\" shape-rendering=\\\"auto\\\">\\n\" +\n+\"<rect x='10.0' y='20.0' width='30.0' height='40.0' style='stroke-width:2.0;stroke:rgb(0,0,0);stroke-opacity:1.0;stroke-linejoin:bevel;stroke-miterlimit:3.0;fill:none'/></svg>\", g2.getSVGElement());\n+    }\n+\n+    @Test\n+    public void checkDrawRectangle2DWithTransform() {\n+        SVGGraphics2D g2 = new SVGGraphics2D(200, 100);\n+        g2.setStroke(new BasicStroke(2.0f, BasicStroke.CAP_BUTT, BasicStroke.JOIN_BEVEL, 3.0f));\n+        g2.setTransform(AffineTransform.getScaleInstance(2.0, 3.0));\n+        Rectangle2D rect = new Rectangle2D.Double(10.0, 20.0, 30.0, 40.0);\n+        g2.draw(rect);\n+        assertEquals(\"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\" xmlns:jfreesvg=\\\"http://www.jfree.org/jfreesvg/svg\\\" width=\\\"200.0\\\" height=\\\"100.0\\\" text-rendering=\\\"auto\\\" shape-rendering=\\\"auto\\\">\\n\" +\n+\"<rect x='10.0' y='20.0' width='30.0' height='40.0' style='stroke-width:2.0;stroke:rgb(0,0,0);stroke-opacity:1.0;stroke-linejoin:bevel;stroke-miterlimit:3.0;fill:none';transform='matrix(2.0,0.0,0.0,3.0,0.0,0.0)'/></svg>\", g2.getSVGElement());\n+    }\n+\n+    @Test\n+    public void checkDrawEllipse2D() {\n+        SVGGraphics2D g2 = new SVGGraphics2D(200, 100);\n+        g2.setStroke(new BasicStroke(2.0f, BasicStroke.CAP_BUTT, BasicStroke.JOIN_BEVEL, 3.0f));\n+        Ellipse2D ellipse = new Ellipse2D.Double(10.0, 20.0, 30.0, 40.0);\n+        g2.draw(ellipse);\n+        assertEquals(\"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\" xmlns:jfreesvg=\\\"http://www.jfree.org/jfreesvg/svg\\\" width=\\\"200.0\\\" height=\\\"100.0\\\" text-rendering=\\\"auto\\\" shape-rendering=\\\"auto\\\">\\n\" +\n+\"<ellipse cx='25.0' cy='40.0' rx='15.0' ry='20.0' style='stroke-width:2.0;stroke:rgb(0,0,0);stroke-opacity:1.0;stroke-linejoin:bevel;stroke-miterlimit:3.0;fill:none'/></svg>\", g2.getSVGElement());\n+    }\n+\n }\n"}
