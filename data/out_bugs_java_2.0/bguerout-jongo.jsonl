{"repository": "bguerout/jongo", "clone_url": "https://github.com/bguerout/jongo.git", "timestamp": "2023-05-31T20:07:16.303110Z", "commit_hash": "1700cc36bce336d2d249a6f1a65fe2b7984c3df9", "commit_message": "Merge pull request #385 from Maltcommunity/master\n\nFixes queryFactory", "related_issues": "", "bug_patch": "diff --git a/src/main/java/org/jongo/query/BsonQueryFactory.java b/src/main/java/org/jongo/query/BsonQueryFactory.java\nindex 3fbce46..c0c8563 100644\n--- a/src/main/java/org/jongo/query/BsonQueryFactory.java\n+++ b/src/main/java/org/jongo/query/BsonQueryFactory.java\n@@ -26,10 +26,7 @@ import org.jongo.bson.BsonDocument;\n import org.jongo.marshall.Marshaller;\n import org.jongo.marshall.MarshallingException;\n \n-import java.util.Collection;\n-import java.util.Collections;\n-import java.util.Map;\n-import java.util.Set;\n+import java.util.*;\n \n import static org.jongo.query.BsonSpecialChar.itIsABsonSpecialChar;\n import static org.jongo.query.BsonSpecialChar.specialChar;\n@@ -124,9 +121,15 @@ public class BsonQueryFactory implements QueryFactory {\n \n         for (char nextChar : query.toCharArray()) {\n             if (ctxStack.peek() == Context.STRING) {\n-                currentToken.append(nextChar);\n-                if (nextChar == currentStringStartingQuote) {\n-                    ctxStack.pop();\n+                if (currentTokenWithNextCharIsToken(currentToken, nextChar)) {\n+                    currentToken.delete(currentToken.length() - token.length() + 1, currentToken.length());\n+                    currentToken.append(sanitize(parameters[paramIndex], currentStringStartingQuote));\n+                    paramIndex++;\n+                } else {\n+                    currentToken.append(nextChar);\n+                    if (nextChar == currentStringStartingQuote) {\n+                        ctxStack.pop();\n+                    }\n                 }\n             } else if (isAQuote(nextChar)) {\n                 ctxStack.push(Context.STRING);\n@@ -160,6 +163,10 @@ public class BsonQueryFactory implements QueryFactory {\n         return result.toString().trim();\n     }\n \n+    private String sanitize(Object parameter1, char currentStringStartingQuote) {\n+        return Objects.toString(parameter1).replaceAll(String.valueOf(currentStringStartingQuote), \"\\\\\\\\\" + currentStringStartingQuote);\n+    }\n+\n     private boolean currentTokenWithNextCharIsToken(StringBuilder currentToken, char nextChar) {\n         if (this.singleCharToken) {\n             return this.token.charAt(0) == nextChar;\n@@ -180,7 +187,7 @@ public class BsonQueryFactory implements QueryFactory {\n     private StringBuilder trimAppendParamAndQuote(StringBuilder currentToken, Object parameter) {\n         return new StringBuilder().append('\"')\n                 .append(currentToken.toString().trim())\n-                .append(parameter)\n+                .append(sanitize(parameter, '\"'))\n                 .append('\"');\n     }\n \n", "test_patch": "diff --git a/src/test/java/org/jongo/query/BsonQueryFactoryTest.java b/src/test/java/org/jongo/query/BsonQueryFactoryTest.java\nindex 9606a1c..f723295 100644\n--- a/src/test/java/org/jongo/query/BsonQueryFactoryTest.java\n+++ b/src/test/java/org/jongo/query/BsonQueryFactoryTest.java\n@@ -267,6 +267,22 @@ public class BsonQueryFactoryTest {\n     }\n \n     @Test\n+    public void shouldBindKeyParameterInValueString() throws Exception {\n+\n+        Query query = factory.createQuery(\"{id: '#, 123'}\", \"123\");\n+\n+        assertThat(query.toDBObject()).isEqualTo(QueryBuilder.start(\"id\").is(\"123, 123\").get());\n+    }\n+\n+    @Test\n+    public void shouldBindKeyParameterInValueStringAndEscapeIt() throws Exception {\n+\n+        Query query = factory.createQuery(\"{id: '#, 123'}\", \"123\\', \\'toto\\':\\'\");\n+\n+        assertThat(query.toDBObject()).isEqualTo(QueryBuilder.start(\"id\").is(\"123', 'toto':', 123\").get());\n+    }\n+\n+    @Test\n     public void shouldBindKeyParameterAndIgnoreSpace() throws Exception {\n \n         Query query = factory.createQuery(\"{ #: 123}\", \"id\");\n@@ -275,6 +291,29 @@ public class BsonQueryFactoryTest {\n     }\n \n     @Test\n+    public void shouldBindKeyParameterEvenIfQuoted() throws Exception {\n+        Query query = factory.createQuery(\"{'#': 123}\", \"id\");\n+\n+        assertThat(query.toDBObject()).isEqualTo(QueryBuilder.start(\"id\").is(123).get());\n+    }\n+\n+    @Test\n+    public void shouldBindKeyParameterEvenIfQuotedAndTokenIsNotSingleChar() throws Exception {\n+        QueryFactory factoryWithToken = new BsonQueryFactory(new JacksonEngine(Mapping.defaultMapping()), \"#123\");\n+\n+        Query query = factoryWithToken.createQuery(\"{'#123': 123}\", \"id\");\n+\n+        assertThat(query.toDBObject()).isEqualTo(QueryBuilder.start(\"id\").is(123).get());\n+    }\n+\n+    @Test\n+    public void shouldBindKeyParameterEvenIfQuotedAndCompound() throws Exception {\n+        Query query = factory.createQuery(\"{'#.#': 123}\", \"user\", \"id\");\n+\n+        assertThat(query.toDBObject()).isEqualTo(QueryBuilder.start(\"user.id\").is(123).get());\n+    }\n+\n+    @Test\n     public void shouldBindKeyParameterInSecondPosition() throws Exception {\n \n         Query query = factory.createQuery(\"{a: 'a', #: 'b'}\", \"id\");\n@@ -316,6 +355,34 @@ public class BsonQueryFactoryTest {\n         assertThat(query.toDBObject()).isEqualTo(QueryBuilder.start(\"name\").is(\"John\").get());\n     }\n \n+    @Test\n+    public void shouldEscapeParametersInStringsWithSingleQuotes() throws Exception {\n+        Query query = factory.createQuery(\"{'#':123}\", \"_id':true, 'name\");\n+\n+        assertThat(query.toDBObject()).isEqualTo(QueryBuilder.start(\"_id':true, 'name\").is(123).get());\n+    }\n+\n+    @Test\n+    public void shouldEscapeParametersInStringsWithDoubleQuote() throws Exception {\n+        Query query = factory.createQuery(\"{\\\"#\\\":123}\", \"_id\\\":true, \\\"name\");\n+\n+        assertThat(query.toDBObject()).isEqualTo(QueryBuilder.start(\"_id\\\":true, \\\"name\").is(123).get());\n+    }\n+\n+    @Test\n+    public void shouldEscapeParametersInKeys() throws Exception {\n+        Query query = factory.createQuery(\"{#:123}\", \"_id\\\":true, \\\"name\");\n+\n+        assertThat(query.toDBObject()).isEqualTo(QueryBuilder.start(\"_id\\\":true, \\\"name\").is(123).get());\n+    }\n+\n+    @Test\n+    public void shouldEscapeParametersInValues() throws Exception {\n+        Query query = factory.createQuery(\"{_id:#}\", \"123\\\",\\\"name\\\": \\\"toto\");\n+\n+        assertThat(query.toDBObject()).isEqualTo(QueryBuilder.start(\"_id\").is(\"123\\\",\\\"name\\\": \\\"toto\").get());\n+    }\n+\n     private String sanitize(String value) {\n         return value.replaceAll(\" \", \"\");\n     }\n"}
{"repository": "bguerout/jongo", "clone_url": "https://github.com/bguerout/jongo.git", "timestamp": "2023-05-31T20:15:52.456886Z", "commit_hash": "8167af4827f8aa8c41e222d50e93f6ef55ad9bfb", "commit_message": "fix(queryFactory): Sanitize String to prevent injection\n", "related_issues": "", "bug_patch": "diff --git a/src/main/java/org/jongo/query/BsonQueryFactory.java b/src/main/java/org/jongo/query/BsonQueryFactory.java\nindex 99b0992..c0c8563 100644\n--- a/src/main/java/org/jongo/query/BsonQueryFactory.java\n+++ b/src/main/java/org/jongo/query/BsonQueryFactory.java\n@@ -26,10 +26,7 @@ import org.jongo.bson.BsonDocument;\n import org.jongo.marshall.Marshaller;\n import org.jongo.marshall.MarshallingException;\n \n-import java.util.Collection;\n-import java.util.Collections;\n-import java.util.Map;\n-import java.util.Set;\n+import java.util.*;\n \n import static org.jongo.query.BsonSpecialChar.itIsABsonSpecialChar;\n import static org.jongo.query.BsonSpecialChar.specialChar;\n@@ -126,7 +123,7 @@ public class BsonQueryFactory implements QueryFactory {\n             if (ctxStack.peek() == Context.STRING) {\n                 if (currentTokenWithNextCharIsToken(currentToken, nextChar)) {\n                     currentToken.delete(currentToken.length() - token.length() + 1, currentToken.length());\n-                    currentToken.append(parameters[paramIndex]);\n+                    currentToken.append(sanitize(parameters[paramIndex], currentStringStartingQuote));\n                     paramIndex++;\n                 } else {\n                     currentToken.append(nextChar);\n@@ -166,6 +163,10 @@ public class BsonQueryFactory implements QueryFactory {\n         return result.toString().trim();\n     }\n \n+    private String sanitize(Object parameter1, char currentStringStartingQuote) {\n+        return Objects.toString(parameter1).replaceAll(String.valueOf(currentStringStartingQuote), \"\\\\\\\\\" + currentStringStartingQuote);\n+    }\n+\n     private boolean currentTokenWithNextCharIsToken(StringBuilder currentToken, char nextChar) {\n         if (this.singleCharToken) {\n             return this.token.charAt(0) == nextChar;\n@@ -186,7 +187,7 @@ public class BsonQueryFactory implements QueryFactory {\n     private StringBuilder trimAppendParamAndQuote(StringBuilder currentToken, Object parameter) {\n         return new StringBuilder().append('\"')\n                 .append(currentToken.toString().trim())\n-                .append(parameter)\n+                .append(sanitize(parameter, '\"'))\n                 .append('\"');\n     }\n \n", "test_patch": "diff --git a/src/test/java/org/jongo/query/BsonQueryFactoryTest.java b/src/test/java/org/jongo/query/BsonQueryFactoryTest.java\nindex f3e41ea..f723295 100644\n--- a/src/test/java/org/jongo/query/BsonQueryFactoryTest.java\n+++ b/src/test/java/org/jongo/query/BsonQueryFactoryTest.java\n@@ -275,6 +275,14 @@ public class BsonQueryFactoryTest {\n     }\n \n     @Test\n+    public void shouldBindKeyParameterInValueStringAndEscapeIt() throws Exception {\n+\n+        Query query = factory.createQuery(\"{id: '#, 123'}\", \"123\\', \\'toto\\':\\'\");\n+\n+        assertThat(query.toDBObject()).isEqualTo(QueryBuilder.start(\"id\").is(\"123', 'toto':', 123\").get());\n+    }\n+\n+    @Test\n     public void shouldBindKeyParameterAndIgnoreSpace() throws Exception {\n \n         Query query = factory.createQuery(\"{ #: 123}\", \"id\");\n@@ -347,6 +355,34 @@ public class BsonQueryFactoryTest {\n         assertThat(query.toDBObject()).isEqualTo(QueryBuilder.start(\"name\").is(\"John\").get());\n     }\n \n+    @Test\n+    public void shouldEscapeParametersInStringsWithSingleQuotes() throws Exception {\n+        Query query = factory.createQuery(\"{'#':123}\", \"_id':true, 'name\");\n+\n+        assertThat(query.toDBObject()).isEqualTo(QueryBuilder.start(\"_id':true, 'name\").is(123).get());\n+    }\n+\n+    @Test\n+    public void shouldEscapeParametersInStringsWithDoubleQuote() throws Exception {\n+        Query query = factory.createQuery(\"{\\\"#\\\":123}\", \"_id\\\":true, \\\"name\");\n+\n+        assertThat(query.toDBObject()).isEqualTo(QueryBuilder.start(\"_id\\\":true, \\\"name\").is(123).get());\n+    }\n+\n+    @Test\n+    public void shouldEscapeParametersInKeys() throws Exception {\n+        Query query = factory.createQuery(\"{#:123}\", \"_id\\\":true, \\\"name\");\n+\n+        assertThat(query.toDBObject()).isEqualTo(QueryBuilder.start(\"_id\\\":true, \\\"name\").is(123).get());\n+    }\n+\n+    @Test\n+    public void shouldEscapeParametersInValues() throws Exception {\n+        Query query = factory.createQuery(\"{_id:#}\", \"123\\\",\\\"name\\\": \\\"toto\");\n+\n+        assertThat(query.toDBObject()).isEqualTo(QueryBuilder.start(\"_id\").is(\"123\\\",\\\"name\\\": \\\"toto\").get());\n+    }\n+\n     private String sanitize(String value) {\n         return value.replaceAll(\" \", \"\");\n     }\n"}
{"repository": "bguerout/jongo", "clone_url": "https://github.com/bguerout/jongo.git", "timestamp": "2023-05-31T20:24:12.471493Z", "commit_hash": "6e7a2784552d26e76da4ad35b28cb72f3eb32755", "commit_message": "fix(queryFactory): allow to use token in Strings\n\nToken was previously not replaced in String wether value or key since mongo 4 update.\n\nIt is now supported for both.\n\nFor the record replacement in Sting was supported in keys before mongo 4 update but not in values.\n", "related_issues": "", "bug_patch": "diff --git a/src/main/java/org/jongo/query/BsonQueryFactory.java b/src/main/java/org/jongo/query/BsonQueryFactory.java\nindex 3fbce46..99b0992 100644\n--- a/src/main/java/org/jongo/query/BsonQueryFactory.java\n+++ b/src/main/java/org/jongo/query/BsonQueryFactory.java\n@@ -124,9 +124,15 @@ public class BsonQueryFactory implements QueryFactory {\n \n         for (char nextChar : query.toCharArray()) {\n             if (ctxStack.peek() == Context.STRING) {\n-                currentToken.append(nextChar);\n-                if (nextChar == currentStringStartingQuote) {\n-                    ctxStack.pop();\n+                if (currentTokenWithNextCharIsToken(currentToken, nextChar)) {\n+                    currentToken.delete(currentToken.length() - token.length() + 1, currentToken.length());\n+                    currentToken.append(parameters[paramIndex]);\n+                    paramIndex++;\n+                } else {\n+                    currentToken.append(nextChar);\n+                    if (nextChar == currentStringStartingQuote) {\n+                        ctxStack.pop();\n+                    }\n                 }\n             } else if (isAQuote(nextChar)) {\n                 ctxStack.push(Context.STRING);\n", "test_patch": "diff --git a/src/test/java/org/jongo/query/BsonQueryFactoryTest.java b/src/test/java/org/jongo/query/BsonQueryFactoryTest.java\nindex 9606a1c..f3e41ea 100644\n--- a/src/test/java/org/jongo/query/BsonQueryFactoryTest.java\n+++ b/src/test/java/org/jongo/query/BsonQueryFactoryTest.java\n@@ -267,6 +267,14 @@ public class BsonQueryFactoryTest {\n     }\n \n     @Test\n+    public void shouldBindKeyParameterInValueString() throws Exception {\n+\n+        Query query = factory.createQuery(\"{id: '#, 123'}\", \"123\");\n+\n+        assertThat(query.toDBObject()).isEqualTo(QueryBuilder.start(\"id\").is(\"123, 123\").get());\n+    }\n+\n+    @Test\n     public void shouldBindKeyParameterAndIgnoreSpace() throws Exception {\n \n         Query query = factory.createQuery(\"{ #: 123}\", \"id\");\n@@ -275,6 +283,29 @@ public class BsonQueryFactoryTest {\n     }\n \n     @Test\n+    public void shouldBindKeyParameterEvenIfQuoted() throws Exception {\n+        Query query = factory.createQuery(\"{'#': 123}\", \"id\");\n+\n+        assertThat(query.toDBObject()).isEqualTo(QueryBuilder.start(\"id\").is(123).get());\n+    }\n+\n+    @Test\n+    public void shouldBindKeyParameterEvenIfQuotedAndTokenIsNotSingleChar() throws Exception {\n+        QueryFactory factoryWithToken = new BsonQueryFactory(new JacksonEngine(Mapping.defaultMapping()), \"#123\");\n+\n+        Query query = factoryWithToken.createQuery(\"{'#123': 123}\", \"id\");\n+\n+        assertThat(query.toDBObject()).isEqualTo(QueryBuilder.start(\"id\").is(123).get());\n+    }\n+\n+    @Test\n+    public void shouldBindKeyParameterEvenIfQuotedAndCompound() throws Exception {\n+        Query query = factory.createQuery(\"{'#.#': 123}\", \"user\", \"id\");\n+\n+        assertThat(query.toDBObject()).isEqualTo(QueryBuilder.start(\"user.id\").is(123).get());\n+    }\n+\n+    @Test\n     public void shouldBindKeyParameterInSecondPosition() throws Exception {\n \n         Query query = factory.createQuery(\"{a: 'a', #: 'b'}\", \"id\");\n"}
{"repository": "bguerout/jongo", "clone_url": "https://github.com/bguerout/jongo.git", "timestamp": "2023-05-31T20:32:27.136486Z", "commit_hash": "1366aa38294148b8fb6b940a5bacb392dd178491", "commit_message": "Refacto of parsing method\n\nShould ease readability.\nImplements some pull request comments:\n* use StringBuilder instead of String concatenation\n* append chars instead of one char Strings\n* try to reduce the huge for method\n\nAlso fixes a bug when using multi char tokens where currentToken was not flushed.\n", "related_issues": "", "bug_patch": "diff --git a/src/main/java/org/jongo/query/BsonQueryFactory.java b/src/main/java/org/jongo/query/BsonQueryFactory.java\nindex 6c08285..3fbce46 100644\n--- a/src/main/java/org/jongo/query/BsonQueryFactory.java\n+++ b/src/main/java/org/jongo/query/BsonQueryFactory.java\n@@ -26,7 +26,13 @@ import org.jongo.bson.BsonDocument;\n import org.jongo.marshall.Marshaller;\n import org.jongo.marshall.MarshallingException;\n \n-import java.util.*;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import static org.jongo.query.BsonSpecialChar.itIsABsonSpecialChar;\n+import static org.jongo.query.BsonSpecialChar.specialChar;\n \n public class BsonQueryFactory implements QueryFactory {\n \n@@ -43,6 +49,7 @@ public class BsonQueryFactory implements QueryFactory {\n     private static final String MARSHALL_OPERATOR = \"8a6e4178-8fba-4d22-af43-840512e3a999-marshall\";\n \n     private final String token;\n+    private final boolean singleCharToken;\n     private final Marshaller marshaller;\n \n     private static class BsonQuery implements Query {\n@@ -66,6 +73,7 @@ public class BsonQueryFactory implements QueryFactory {\n     }\n \n     public BsonQueryFactory(Marshaller marshaller, String token) {\n+        this.singleCharToken = token.length() == 1;\n         this.token = token;\n         this.marshaller = marshaller;\n     }\n@@ -105,89 +113,41 @@ public class BsonQueryFactory implements QueryFactory {\n     }\n \n     private String addRequiredQuotesAndParameters(String query, Object[] parameters) {\n-        StringBuilder sb = new StringBuilder(query.length());\n+        StringBuilder result = new StringBuilder(query.length());\n \n         int position = 0;\n         int paramIndex = 0;\n-        Stack<Context> stack = new Stack<>(Context.NONE);\n-        Context ctx;\n-        String token = \"\";\n+        Stack<Context> ctxStack = new Stack<>(Context.NONE);\n+        StringBuilder currentToken = new StringBuilder();\n         String previousToken = \"\";\n         char currentStringStartingQuote = ' ';\n-        for (char c : query.toCharArray()) {\n-            ctx = stack.peek();\n-            if (ctx == Context.STRING) {\n-                token += c;\n-                if (c == currentStringStartingQuote) {\n-                    stack.pop();\n+\n+        for (char nextChar : query.toCharArray()) {\n+            if (ctxStack.peek() == Context.STRING) {\n+                currentToken.append(nextChar);\n+                if (nextChar == currentStringStartingQuote) {\n+                    ctxStack.pop();\n                 }\n-            } else if (c == '\\'' || c == '\"') {\n-                stack.push(Context.STRING);\n-                currentStringStartingQuote = c;\n-                token += c;\n-            } else if ((token + c).lastIndexOf(this.token) == token.length() - this.token.length() + 1) {\n+            } else if (isAQuote(nextChar)) {\n+                ctxStack.push(Context.STRING);\n+                currentStringStartingQuote = nextChar;\n+                currentToken.append(nextChar);\n+            } else if (currentTokenWithNextCharIsToken(currentToken, nextChar)) {\n                 if (paramIndex >= parameters.length) {\n                     throw new IllegalArgumentException(\"Not enough parameters passed to query: \" + query);\n                 }\n                 if (\"$oid\".equals(previousToken) ||\n                         !isValueToken(query, position)) {\n-                    token = \"\\\"\" + token.trim() + parameters[paramIndex] + \"\\\"\";\n+                    currentToken = trimAppendParamAndQuote(currentToken, parameters[paramIndex]);\n                 } else {\n-                    sb.append(\"{\\\"\")\n-                            .append(MARSHALL_OPERATOR)\n-                            .append(\"\\\":\")\n-                            .append(paramIndex).append(\"}\");\n+                    appendParamPlaceholder(result, paramIndex);\n+                    currentToken.setLength(0);\n                 }\n                 paramIndex++;\n-            } else if (c == '{') {\n-                stack.push(Context.OBJECT);\n-                sb.append(\"{\");\n-            } else if (c == '[') {\n-                stack.push(Context.ARRAY);\n-                sb.append(\"[\");\n-            } else if (c == '}') {\n-                ctx = stack.pop();\n-                if (ctx != Context.OBJECT) {\n-                    throw new IllegalArgumentException(\"Invalid token at position: \" + position);\n-                }\n-\n-                if (!token.isEmpty()) {\n-                    sb.append(token);\n-                }\n-\n-                previousToken = token;\n-                token = \"\";\n-                sb.append(\"}\");\n-            } else if (c == ']') {\n-                ctx = stack.pop();\n-                if (ctx != Context.ARRAY) {\n-                    throw new IllegalArgumentException(\"Invalid token at position: \" + position);\n-                }\n-\n-                if (!token.isEmpty()) {\n-                    sb.append(token);\n-                }\n-\n-                previousToken = token;\n-                token = \"\";\n-                sb.append(\"]\");\n-            } else if (c == ':') {\n-                String key = token.trim();\n-                if (key.isEmpty() || key.equals(\"\\\"\\\"\") || key.equals(\"''\")) {\n-                    throw new IllegalArgumentException(\"Invalid token at position: \" + position);\n-                }\n-\n-                sb.append(isQuoted(key) ? key : quote(key));\n-                sb.append(\":\");\n-                previousToken = token;\n-                token = \"\";\n-            } else if (c == ',') {\n-                sb.append(token);\n-                sb.append(\",\");\n-                previousToken = token;\n-                token = \"\";\n+            } else if (itIsABsonSpecialChar(nextChar)) {\n+                previousToken = specialChar(nextChar).applySpecificBehaviour(result, currentToken, ctxStack, position);\n             } else {\n-                token += c;\n+                currentToken.append(nextChar);\n             }\n \n             position++;\n@@ -197,62 +157,35 @@ public class BsonQueryFactory implements QueryFactory {\n             throw new IllegalArgumentException(\"Too many parameters passed to query: \" + query);\n         }\n \n-        return sb.toString().trim();\n-    }\n-\n-    public enum Context {\n-        NONE,\n-        OBJECT,\n-        ARRAY,\n-        STRING;\n+        return result.toString().trim();\n     }\n \n-    private static boolean isQuoted(String token) {\n-        char start = token.charAt(0);\n-        char end = token.charAt(token.length() - 1);\n-        if (start == '\\'' && end == '\\'') {\n-            return true;\n+    private boolean currentTokenWithNextCharIsToken(StringBuilder currentToken, char nextChar) {\n+        if (this.singleCharToken) {\n+            return this.token.charAt(0) == nextChar;\n         }\n-\n-        if (start == '\"' && end == '\"') {\n-            return true;\n-        }\n-\n-        return false;\n+        return (currentToken.toString().trim() + nextChar).lastIndexOf(this.token) >= 0;\n     }\n \n-    private static String quote(String token) {\n-        return \"\\\"\" + token + \"\\\"\";\n+    private void appendParamPlaceholder(StringBuilder result, int paramIndex) {\n+        result.append('{')\n+                .append('\"')\n+                .append(MARSHALL_OPERATOR)\n+                .append('\"')\n+                .append(':')\n+                .append(paramIndex)\n+                .append('}');\n     }\n \n-    private static class Stack<T> {\n-        private final LinkedList<T> stack;\n-        private final T noValue;\n-\n-        private Stack(T noValue) {\n-            this.stack = new LinkedList<>();\n-            this.noValue = noValue;\n-        }\n-\n-        public T peek() {\n-            if (stack.isEmpty()) {\n-                return noValue;\n-            }\n-\n-            return stack.peekLast();\n-        }\n-\n-        public T pop() {\n-            if (stack.isEmpty()) {\n-                return noValue;\n-            }\n-\n-            return this.stack.removeLast();\n-        }\n+    private StringBuilder trimAppendParamAndQuote(StringBuilder currentToken, Object parameter) {\n+        return new StringBuilder().append('\"')\n+                .append(currentToken.toString().trim())\n+                .append(parameter)\n+                .append('\"');\n+    }\n \n-        public void push(T value) {\n-            this.stack.addLast(value);\n-        }\n+    private boolean isAQuote(char c) {\n+        return c == '\\'' || c == '\"';\n     }\n \n     private Object replaceParams(DBObject dbo, Object[] params) {\ndiff --git a/src/main/java/org/jongo/query/BsonSpecialChar.java b/src/main/java/org/jongo/query/BsonSpecialChar.java\nnew file mode 100644\nindex 0000000..b018ef2\n--- /dev/null\n+++ b/src/main/java/org/jongo/query/BsonSpecialChar.java\n@@ -0,0 +1,129 @@\n+package org.jongo.query;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+enum BsonSpecialChar {\n+\n+    LEFT_CURLY_BRACE('{') {\n+        @Override\n+        String applySpecificBehaviour(StringBuilder result, StringBuilder currentToken, Stack<Context> ctxStack, int position) {\n+            ctxStack.push(Context.OBJECT);\n+            result.append(getSpecialChar());\n+            return \"\";\n+        }\n+    },\n+    LEFT_SQUARE_BRACKET('[') {\n+        @Override\n+        String applySpecificBehaviour(StringBuilder result, StringBuilder currentToken, Stack<Context> ctxStack, int position) {\n+            ctxStack.push(Context.ARRAY);\n+            result.append(getSpecialChar());\n+            return \"\";\n+        }\n+    },\n+    RIGHT_CURLY_BRACE('}') {\n+        @Override\n+        String applySpecificBehaviour(StringBuilder result, StringBuilder currentToken, Stack<Context> ctxStack, int position) {\n+            Context ctx = ctxStack.pop();\n+            if (ctx != Context.OBJECT) {\n+                throw new IllegalArgumentException(\"Invalid currentToken at position: \" + position);\n+            }\n+\n+            if (isNotEmpty(currentToken)) {\n+                result.append(currentToken);\n+            }\n+\n+            return appendNextCharAndPopCurrentToken(result, currentToken, getSpecialChar());\n+        }\n+    },\n+    RIGHT_SQUARE_BRACKET(']') {\n+        @Override\n+        String applySpecificBehaviour(StringBuilder result, StringBuilder currentToken, Stack<Context> ctxStack, int position) {\n+            Context ctx = ctxStack.pop();\n+            if (ctx != Context.ARRAY) {\n+                throw new IllegalArgumentException(\"Invalid currentToken at position: \" + position);\n+            }\n+            if (isNotEmpty(currentToken)) {\n+                result.append(currentToken);\n+            }\n+            return appendNextCharAndPopCurrentToken(result, currentToken, getSpecialChar());\n+        }\n+    },\n+    COLON(':') {\n+        @Override\n+        String applySpecificBehaviour(StringBuilder result, StringBuilder currentToken, Stack<Context> ctxStack, int position) {\n+            String key = currentToken.toString().trim();\n+            if (key.isEmpty() || key.equals(\"\\\"\\\"\") || key.equals(\"''\")) {\n+                throw new IllegalArgumentException(\"Invalid currentToken at position: \" + position);\n+            }\n+            result.append(isQuoted(key) ? key : quote(key));\n+            return appendNextCharAndPopCurrentToken(result, currentToken, getSpecialChar());\n+        }\n+    },\n+    COMMA(',') {\n+        @Override\n+        String applySpecificBehaviour(StringBuilder result, StringBuilder currentToken, Stack<Context> ctxStack, int position) {\n+            result.append(currentToken);\n+            return appendNextCharAndPopCurrentToken(result, currentToken, getSpecialChar());\n+        }\n+    };\n+\n+    private static final Map<Character, BsonSpecialChar> BSON_SPECIAL_CHARS_MAP;\n+\n+    static {\n+        BSON_SPECIAL_CHARS_MAP = new HashMap<>(BsonSpecialChar.values().length);\n+        for (BsonSpecialChar c : BsonSpecialChar.values()) {\n+            BSON_SPECIAL_CHARS_MAP.put(c.getSpecialChar(), c);\n+        }\n+    }\n+\n+    private final char specialChar;\n+\n+    BsonSpecialChar(char specialChar) {\n+        this.specialChar = specialChar;\n+    }\n+\n+    char getSpecialChar() {\n+        return specialChar;\n+    }\n+\n+    abstract String applySpecificBehaviour(StringBuilder result, StringBuilder currentToken, Stack<Context> ctxStack, int position);\n+\n+    private static boolean isNotEmpty(StringBuilder sb) {\n+        return sb.length() > 0;\n+    }\n+\n+    private static String appendNextCharAndPopCurrentToken(StringBuilder result, StringBuilder currentToken, char nextChar) {\n+        String previousToken = currentToken.toString();\n+        currentToken.setLength(0);\n+        result.append(nextChar);\n+        return previousToken;\n+    }\n+\n+    private static boolean isQuoted(String token) {\n+        char start = token.charAt(0);\n+        char end = token.charAt(token.length() - 1);\n+        if (start == '\\'' && end == '\\'') {\n+            return true;\n+        }\n+\n+        if (start == '\"' && end == '\"') {\n+            return true;\n+        }\n+\n+        return false;\n+    }\n+\n+    private static String quote(String token) {\n+        return \"\\\"\" + token + \"\\\"\";\n+    }\n+\n+    static boolean itIsABsonSpecialChar(char c) {\n+        return BSON_SPECIAL_CHARS_MAP.containsKey(c);\n+    }\n+\n+    static BsonSpecialChar specialChar(char c) {\n+        return BSON_SPECIAL_CHARS_MAP.get(c);\n+    }\n+\n+}\ndiff --git a/src/main/java/org/jongo/query/Context.java b/src/main/java/org/jongo/query/Context.java\nnew file mode 100644\nindex 0000000..d3087bc\n--- /dev/null\n+++ b/src/main/java/org/jongo/query/Context.java\n@@ -0,0 +1,8 @@\n+package org.jongo.query;\n+\n+enum Context {\n+    NONE,\n+    OBJECT,\n+    ARRAY,\n+    STRING;\n+}\ndiff --git a/src/main/java/org/jongo/query/Stack.java b/src/main/java/org/jongo/query/Stack.java\nnew file mode 100644\nindex 0000000..0f91996\n--- /dev/null\n+++ b/src/main/java/org/jongo/query/Stack.java\n@@ -0,0 +1,33 @@\n+package org.jongo.query;\n+\n+import java.util.LinkedList;\n+\n+class Stack<T> {\n+    private final LinkedList<T> stack;\n+    private final T noValue;\n+\n+    Stack(T noValue) {\n+        this.stack = new LinkedList<>();\n+        this.noValue = noValue;\n+    }\n+\n+    public T peek() {\n+        if (stack.isEmpty()) {\n+            return noValue;\n+        }\n+\n+        return stack.peekLast();\n+    }\n+\n+    public T pop() {\n+        if (stack.isEmpty()) {\n+            return noValue;\n+        }\n+\n+        return this.stack.removeLast();\n+    }\n+\n+    public void push(T value) {\n+        this.stack.addLast(value);\n+    }\n+}\n", "test_patch": "diff --git a/src/test/java/org/jongo/query/BsonQueryFactoryTest.java b/src/test/java/org/jongo/query/BsonQueryFactoryTest.java\nindex aa1cf06..9606a1c 100644\n--- a/src/test/java/org/jongo/query/BsonQueryFactoryTest.java\n+++ b/src/test/java/org/jongo/query/BsonQueryFactoryTest.java\n@@ -123,6 +123,16 @@ public class BsonQueryFactoryTest {\n     }\n \n     @Test\n+    public void shouldBindParameterWithCustomLongToken() throws Exception {\n+\n+        QueryFactory factoryWithToken = new BsonQueryFactory(new JacksonEngine(Mapping.defaultMapping()), \"#!!\");\n+\n+        Query query = factoryWithToken.createQuery(\"{id:#!!}\", 123);\n+\n+        assertThat(query.toDBObject()).isEqualTo(new BasicDBObject(\"id\", 123));\n+    }\n+\n+    @Test\n     public void shouldBindHashSign() throws Exception {\n \n         Query query = factory.createQuery(\"{id:#}\", \"string with # sign\");\n"}
{"repository": "bguerout/jongo", "clone_url": "https://github.com/bguerout/jongo.git", "timestamp": "2023-05-31T20:47:19.374928Z", "commit_hash": "8d6968d7e0fef8b8eaecaf8a2cda73de9f2ede08", "commit_message": "Merge pull request #371 from bguerout/hotfixes/1.4.x/backport-decimal128\n\nBackport Decimal128 into 1.4.x", "related_issues": "", "bug_patch": "diff --git a/src/main/java/org/jongo/marshall/jackson/bson4jackson/BsonDeserializers.java b/src/main/java/org/jongo/marshall/jackson/bson4jackson/BsonDeserializers.java\nindex 115f5b8..2e6a5b3 100644\n--- a/src/main/java/org/jongo/marshall/jackson/bson4jackson/BsonDeserializers.java\n+++ b/src/main/java/org/jongo/marshall/jackson/bson4jackson/BsonDeserializers.java\n@@ -32,6 +32,7 @@ import com.mongodb.util.JSON;\n import org.bson.types.*;\n \n import java.io.IOException;\n+import java.math.BigDecimal;\n import java.util.Date;\n \n class BsonDeserializers extends SimpleDeserializers {\n@@ -44,6 +45,7 @@ class BsonDeserializers extends SimpleDeserializers {\n         addDeserializer(DBObject.class, new NativeDeserializer<DBObject>());\n         addDeserializer(ObjectId.class, new ObjectIdDeserializer());\n         addDeserializer(BSONTimestamp.class, new BSONTimestampDeserializer());\n+        addDeserializer(Decimal128.class, new Decimal128Deserializer());\n     }\n \n     private static class DateDeserializer extends JsonDeserializer<Date> {\n@@ -162,4 +164,19 @@ class BsonDeserializers extends SimpleDeserializers {\n             }\n         }\n     }\n+\n+    private static class Decimal128Deserializer extends JsonDeserializer<Decimal128> {\n+        @Override\n+        public Decimal128 deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException, JsonProcessingException {\n+            TreeNode tree = jp.getCodec().readTree(jp);\n+            if (tree.isObject()) {\n+                String value = ((ValueNode) tree.get(\"$numberDecimal\")).asText();\n+                return new Decimal128(new BigDecimal(value));\n+            } else if (tree instanceof POJONode) {\n+                return (Decimal128) ((POJONode) tree).getPojo();\n+            } else {\n+                throw ctxt.mappingException(Decimal128.class);\n+            }\n+        }\n+    }\n }\ndiff --git a/src/main/java/org/jongo/marshall/jackson/bson4jackson/BsonSerializers.java b/src/main/java/org/jongo/marshall/jackson/bson4jackson/BsonSerializers.java\nindex 8c55869..2a585cb 100644\n--- a/src/main/java/org/jongo/marshall/jackson/bson4jackson/BsonSerializers.java\n+++ b/src/main/java/org/jongo/marshall/jackson/bson4jackson/BsonSerializers.java\n@@ -32,6 +32,7 @@ class BsonSerializers extends SimpleSerializers {\n         addSerializer(MinKey.class, new MinKeySerializer());\n         addSerializer(MaxKey.class, new MaxKeySerializer());\n         addSerializer(Binary.class, new BinarySerializer());\n+        addSerializer(Decimal128.class, new Decimal128Serializer());\n     }\n \n     static class MaxKeySerializer extends JsonSerializer<MaxKey> {\n@@ -104,4 +105,18 @@ class BsonSerializers extends SimpleSerializers {\n         }\n     }\n \n+    static class Decimal128Serializer extends JsonSerializer<Decimal128> {\n+\n+        public void serialize(Decimal128 decimal, JsonGenerator jsonGenerator, SerializerProvider serializerProvider) throws IOException, JsonProcessingException {\n+            if (jsonGenerator instanceof MongoBsonGenerator) {\n+                ((MongoBsonGenerator) jsonGenerator).writeDecima128(decimal);\n+            } else {\n+                jsonGenerator.writeStartObject();\n+                jsonGenerator.writeFieldName(\"$numberDecimal\");\n+                jsonGenerator.writeString(decimal.bigDecimalValue().toString());\n+                jsonGenerator.writeEndObject();\n+            }\n+        }\n+    }\n+\n }\ndiff --git a/src/main/java/org/jongo/marshall/jackson/bson4jackson/MongoBsonGenerator.java b/src/main/java/org/jongo/marshall/jackson/bson4jackson/MongoBsonGenerator.java\nindex ba5336e..ba23c81 100644\n--- a/src/main/java/org/jongo/marshall/jackson/bson4jackson/MongoBsonGenerator.java\n+++ b/src/main/java/org/jongo/marshall/jackson/bson4jackson/MongoBsonGenerator.java\n@@ -18,10 +18,7 @@ package org.jongo.marshall.jackson.bson4jackson;\n \n import de.undercouch.bson4jackson.BsonConstants;\n import de.undercouch.bson4jackson.BsonGenerator;\n-import org.bson.types.BSONTimestamp;\n-import org.bson.types.Binary;\n-import org.bson.types.MaxKey;\n-import org.bson.types.MinKey;\n+import org.bson.types.*;\n \n import java.io.IOException;\n import java.io.OutputStream;\n@@ -73,4 +70,13 @@ class MongoBsonGenerator extends BsonGenerator {\n         _buffer.putBytes(binary.getData());\n         flushBuffer();\n     }\n+\n+    public void writeDecima128(Decimal128 decimal) throws IOException {\n+        _writeArrayFieldNameIfNeeded();\n+        _verifyValueWrite(\"write number\");\n+        _buffer.putByte(_typeMarker, BsonConstants.TYPE_DECIMAL128);\n+        _buffer.putLong(decimal.getLow());\n+        _buffer.putLong(decimal.getHigh());\n+        flushBuffer();\n+    }\n }\ndiff --git a/src/main/java/org/jongo/marshall/jackson/bson4jackson/MongoBsonParser.java b/src/main/java/org/jongo/marshall/jackson/bson4jackson/MongoBsonParser.java\nindex 91f2ef7..bf95fa2 100644\n--- a/src/main/java/org/jongo/marshall/jackson/bson4jackson/MongoBsonParser.java\n+++ b/src/main/java/org/jongo/marshall/jackson/bson4jackson/MongoBsonParser.java\n@@ -19,6 +19,7 @@ package org.jongo.marshall.jackson.bson4jackson;\n import com.fasterxml.jackson.core.JsonParseException;\n import com.fasterxml.jackson.core.io.IOContext;\n import de.undercouch.bson4jackson.BsonParser;\n+import de.undercouch.bson4jackson.types.Decimal128;\n import de.undercouch.bson4jackson.types.ObjectId;\n import de.undercouch.bson4jackson.types.Timestamp;\n import org.bson.types.BSONTimestamp;\n@@ -41,6 +42,9 @@ class MongoBsonParser extends BsonParser {\n         if (object instanceof Timestamp) {\n             return convertToBSONTimestamp((Timestamp) object);\n         }\n+        if (object instanceof Decimal128) {\n+            return convertToNativeDecimal128((Decimal128) object);\n+        }\n         return object;\n     }\n \n@@ -51,4 +55,8 @@ class MongoBsonParser extends BsonParser {\n     private org.bson.types.ObjectId convertToNativeObjectId(ObjectId id) {\n         return org.bson.types.ObjectId.createFromLegacyFormat(id.getTime(), id.getMachine(), id.getInc());\n     }\n+\n+    private org.bson.types.Decimal128 convertToNativeDecimal128(Decimal128 decimal) {\n+        return new org.bson.types.Decimal128(decimal.bigDecimalValue());\n+    }\n }\n", "test_patch": "diff --git a/src/test/java/org/jongo/marshall/DocumentMarshallingTest.java b/src/test/java/org/jongo/marshall/DocumentMarshallingTest.java\nindex f701256..9bd7502 100644\n--- a/src/test/java/org/jongo/marshall/DocumentMarshallingTest.java\n+++ b/src/test/java/org/jongo/marshall/DocumentMarshallingTest.java\n@@ -86,6 +86,19 @@ public class DocumentMarshallingTest extends JongoTestBase {\n     }\n \n     @Test\n+    public void canHandleDecimal128() throws Exception {\n+\n+        BSONPrimitiveType type = new BSONPrimitiveType();\n+        type.decimal128 = Decimal128.parse(\"10\");\n+\n+        collection.save(type);\n+\n+        assertHasBeenPersistedAs(\"{'decimal128' : { '$type' : 'decimal'}}\");\n+        BSONPrimitiveType result = collection.findOne(\"{}\").as(BSONPrimitiveType.class);\n+        assertThat(result.decimal128).isNotNull();\n+    }\n+\n+    @Test\n     public void canHandleObjectId() throws Exception {\n \n         BSONPrimitiveType type = new BSONPrimitiveType();\n@@ -280,6 +293,7 @@ public class DocumentMarshallingTest extends JongoTestBase {\n         List<Friend> complexList;\n         List<Date> dateList;\n         byte[] bytes;\n+        Decimal128 decimal128;\n     }\n \n     private static class JavaNativeType {\ndiff --git a/src/test/java/org/jongo/spike/QuestionsSpikeTest.java b/src/test/java/org/jongo/spike/QuestionsSpikeTest.java\nindex e1f1c57..1b8adf9 100644\n--- a/src/test/java/org/jongo/spike/QuestionsSpikeTest.java\n+++ b/src/test/java/org/jongo/spike/QuestionsSpikeTest.java\n@@ -17,9 +17,16 @@\n package org.jongo.spike;\n \n import com.fasterxml.jackson.annotation.JsonInclude;\n-import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.core.JsonGenerator;\n+import com.fasterxml.jackson.core.JsonParser;\n+import com.fasterxml.jackson.core.TreeNode;\n+import com.fasterxml.jackson.databind.*;\n+import com.fasterxml.jackson.databind.annotation.JsonDeserialize;\n+import com.fasterxml.jackson.databind.annotation.JsonSerialize;\n import com.mongodb.DBObject;\n import com.mongodb.QueryBuilder;\n+import org.bson.types.Decimal128;\n+import org.bson.types.ObjectId;\n import org.jongo.Jongo;\n import org.jongo.Mapper;\n import org.jongo.MongoCollection;\n@@ -30,12 +37,15 @@ import org.jongo.marshall.Unmarshaller;\n import org.jongo.marshall.jackson.JacksonEngine;\n import org.jongo.marshall.jackson.configuration.MapperModifier;\n import org.jongo.marshall.jackson.configuration.Mapping;\n+import org.jongo.marshall.jackson.oid.ObjectIdDeserializer;\n import org.jongo.model.Friend;\n import org.jongo.util.JongoTestBase;\n import org.junit.After;\n import org.junit.Before;\n import org.junit.Test;\n \n+import java.io.IOException;\n+import java.math.BigDecimal;\n import java.util.ArrayList;\n import java.util.Date;\n import java.util.List;\n@@ -182,6 +192,23 @@ public class QuestionsSpikeTest extends JongoTestBase {\n         assertThat(nb).isEqualTo(1);\n     }\n \n+    @Test\n+    public void canHandleDecimal128() {\n+\n+        Decimal decimal = new Decimal();\n+        decimal.total = Decimal128.parse(\"10\");\n+\n+        collection.save(decimal);\n+\n+        Decimal result = this.collection.findOne(decimal._id).as(Decimal.class);\n+        assertThat(result.total).isEqualTo(new Decimal128(10));\n+    }\n+\n+    private static class Decimal {\n+        ObjectId _id;\n+        Decimal128 total;\n+    }\n+\n     private static class Party {\n         private List<Friend> friends = new ArrayList<Friend>();\n \n"}
{"repository": "bguerout/jongo", "clone_url": "https://github.com/bguerout/jongo.git", "timestamp": "2023-05-31T21:01:26.947952Z", "commit_hash": "20944431097f0e45bde4bd104ed61c0ffd1300a9", "commit_message": "Merge pull request #363 from bguerout/hotfixes/1.4.x/mongodb-v4\n\nBump embed.mongo to run tests against MongoDB v4", "related_issues": "", "bug_patch": "diff --git a/pom.xml b/pom.xml\nindex 00aca19..3be696c 100755\n--- a/pom.xml\n+++ b/pom.xml\n@@ -73,7 +73,7 @@\n     <properties>\n         <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n         <mongo.min.version>3.5.0</mongo.min.version>\n-        <mongo.max.version>3.11.0</mongo.max.version>\n+        <mongo.max.version>3.10.1</mongo.max.version>\n         <mongo.version>3.10.1</mongo.version>\n         <jackson.version>2.9.8</jackson.version>\n         <bson4jackson.version>2.9.2</bson4jackson.version>\n@@ -149,7 +149,7 @@\n         <dependency>\n             <groupId>de.flapdoodle.embed</groupId>\n             <artifactId>de.flapdoodle.embed.mongo</artifactId>\n-            <version>1.47.3</version>\n+            <version>2.2.0</version>\n             <scope>test</scope>\n         </dependency>\n         <dependency>\n", "test_patch": "diff --git a/src/test/java/org/jongo/util/MongoResource.java b/src/test/java/org/jongo/util/MongoResource.java\nindex 3b3a5da..0bdf320 100644\n--- a/src/test/java/org/jongo/util/MongoResource.java\n+++ b/src/test/java/org/jongo/util/MongoResource.java\n@@ -82,6 +82,7 @@ public class MongoResource {\n                 Net network = new Net(port, Network.localhostIsIPv6());\n                 IMongodConfig mongodConfig = new MongodConfigBuilder()\n                         .version(getVersion())\n+                        .cmdOptions(new MongoCmdOptionsBuilder().useStorageEngine(\"ephemeralForTest\").build())\n                         .net(network)\n                         .build();\n \n@@ -97,7 +98,7 @@ public class MongoResource {\n         private static Version.Main getVersion() {\n             String version = System.getProperty(\"jongo.test.db.version\");\n             if (version == null) {\n-                return Version.Main.PRODUCTION;\n+                return Version.Main.PRODUCTION; //V4_0\n             }\n             return Version.Main.valueOf(\"V\" + version.replaceAll(\"\\\\.\", \"_\"));\n         }\n@@ -118,7 +119,7 @@ public class MongoResource {\n \n     private static MongoClient createClient(int port) throws UnknownHostException {\n         MongoClient mongo = new MongoClient(\"127.0.0.1\", port);\n-        mongo.setWriteConcern(WriteConcern.FSYNC_SAFE);\n+        mongo.setWriteConcern(WriteConcern.SAFE);\n         return mongo;\n     }\n }\n"}
{"repository": "bguerout/jongo", "clone_url": "https://github.com/bguerout/jongo.git", "timestamp": "2023-05-31T21:07:52.621982Z", "commit_hash": "ba7a66a4f0312932f1d8e3a04355f4dab7c16240", "commit_message": "Merge pull request #358 from bertramn/hotfixes/1.4.x/mongo-driver-version-bump\n\nbump mongo-java-driver to 3.10.1 to be compatible with 3.6+ databases", "related_issues": "", "bug_patch": "diff --git a/pom.xml b/pom.xml\nindex df9fc74..59c8187 100755\n--- a/pom.xml\n+++ b/pom.xml\n@@ -72,9 +72,9 @@\n \n     <properties>\n         <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n-        <mongo.min.version>3.3.0</mongo.min.version>\n-        <mongo.max.version>3.5.0</mongo.max.version>\n-        <mongo.version>3.5.0</mongo.version>\n+        <mongo.min.version>3.5.0</mongo.min.version>\n+        <mongo.max.version>3.11.0</mongo.max.version>\n+        <mongo.version>3.10.1</mongo.version>\n         <jackson.version>2.9.8</jackson.version>\n         <bson4jackson.version>2.9.2</bson4jackson.version>\n     </properties>\n", "test_patch": "diff --git a/src/test/java/org/jongo/query/BsonQueryFactoryTest.java b/src/test/java/org/jongo/query/BsonQueryFactoryTest.java\nindex 7e1e172..85d1e9b 100644\n--- a/src/test/java/org/jongo/query/BsonQueryFactoryTest.java\n+++ b/src/test/java/org/jongo/query/BsonQueryFactoryTest.java\n@@ -277,7 +277,7 @@ public class BsonQueryFactoryTest {\n \n         Query query = factory.createQuery(\"{ name.#: 'John'}\", \"first\");\n \n-        assertThat(query.toDBObject().toString()).isEqualTo(\"{ \\\"name.first\\\" : \\\"John\\\"}\");\n+        assertThat(query.toDBObject().toString()).isEqualTo(\"{\\\"name.first\\\": \\\"John\\\"}\");\n     }\n \n     @Test\ndiff --git a/src/test/java/org/jongo/spike/projection/JacksonProjectionTest.java b/src/test/java/org/jongo/spike/projection/JacksonProjectionTest.java\nindex 4c01ed8..1b002a7 100644\n--- a/src/test/java/org/jongo/spike/projection/JacksonProjectionTest.java\n+++ b/src/test/java/org/jongo/spike/projection/JacksonProjectionTest.java\n@@ -42,7 +42,7 @@ public class JacksonProjectionTest {\n \n         DBObject fields = projection.getProjectionQuery(Friend.class).toDBObject();\n \n-        assertThat(fields.toString()).isEqualTo(\"{ \\\"name\\\" : 1 , \\\"address\\\" : 1 , \\\"coordinate\\\" : { \\\"lat\\\" : 1 , \\\"lng\\\" : 1} , \\\"gender\\\" : 1}\");\n+        assertThat(fields.toString()).isEqualTo(\"{\\\"name\\\": 1, \\\"address\\\": 1, \\\"coordinate\\\": {\\\"lat\\\": 1, \\\"lng\\\": 1}, \\\"gender\\\": 1}\");\n     }\n \n     @Test\n@@ -50,7 +50,7 @@ public class JacksonProjectionTest {\n \n         DBObject fields = projection.getProjectionQuery(Fox.class).toDBObject();\n \n-        assertThat(fields.toString()).isEqualTo(\"{ \\\"name\\\" : 1 , \\\"color\\\" : 1 , \\\"gender\\\" : 1}\");\n+        assertThat(fields.toString()).isEqualTo(\"{\\\"name\\\": 1, \\\"color\\\": 1, \\\"gender\\\": 1}\");\n     }\n \n     @Test\n@@ -58,7 +58,7 @@ public class JacksonProjectionTest {\n \n         DBObject fields = projection.getProjectionQuery(HiddenCoordinate.class).toDBObject();\n \n-        assertThat(fields.toString()).isEqualTo(\"{ \\\"lng\\\" : 1}\");\n+        assertThat(fields.toString()).isEqualTo(\"{\\\"lng\\\": 1}\");\n     }\n \n     @Test(expected = RuntimeException.class)\n"}
{"repository": "bguerout/jongo", "clone_url": "https://github.com/bguerout/jongo.git", "timestamp": "2023-05-31T21:30:10.538029Z", "commit_hash": "f46f65808e2d11b331948434e190fcec65833c4c", "commit_message": "Fixing NullPointerException when annotation is on Getter\n", "related_issues": "", "bug_patch": "diff --git a/src/main/java/org/jongo/marshall/jackson/JacksonObjectIdUpdater.java b/src/main/java/org/jongo/marshall/jackson/JacksonObjectIdUpdater.java\nindex 46adf96..4838177 100644\n--- a/src/main/java/org/jongo/marshall/jackson/JacksonObjectIdUpdater.java\n+++ b/src/main/java/org/jongo/marshall/jackson/JacksonObjectIdUpdater.java\n@@ -84,7 +84,7 @@ public class JacksonObjectIdUpdater implements ObjectIdUpdater {\n     private static boolean isObjectId(BeanPropertyDefinition property) {\n         boolean isObjectId = property.getPrimaryMember().getAnnotation(org.jongo.marshall.jackson.oid.ObjectId.class) != null \n                 || property.getPrimaryMember().getAnnotation(MongoObjectId.class) != null\n-                || ObjectId.class.isAssignableFrom(property.getField().getRawType());\n+                || ObjectId.class.isAssignableFrom(property.getAccessor().getRawType());\n         return isObjectId;\n     }\n     \n", "test_patch": "diff --git a/src/test/java/org/jongo/JacksonAnnotationsHandlingTest.java b/src/test/java/org/jongo/JacksonAnnotationsHandlingTest.java\nindex 825b6ec..a82bd17 100644\n--- a/src/test/java/org/jongo/JacksonAnnotationsHandlingTest.java\n+++ b/src/test/java/org/jongo/JacksonAnnotationsHandlingTest.java\n@@ -17,6 +17,7 @@\n package org.jongo;\n \n import org.bson.types.ObjectId;\n+import org.jongo.marshall.jackson.oid.MongoId;\n import org.jongo.util.JongoTestCase;\n import org.junit.After;\n import org.junit.Before;\n@@ -85,6 +86,17 @@ public class JacksonAnnotationsHandlingTest extends JongoTestCase {\n         assertThat(result._id).isEqualTo(id);\n     }\n \n+    @Test\n+    public void canHandleAnnotatedGetter() throws Exception {\n+        POJOWithAnnotatedGetter pojo = new POJOWithAnnotatedGetter();\n+        pojo.setId(\"id\");\n+\n+        collection.save(pojo);\n+\n+        POJOWithAnnotatedGetter result = collection.findOne().as(POJOWithAnnotatedGetter.class);\n+        assertThat(result.getId()).isEqualTo(pojo.getId());\n+    }\n+\n     public static class POJOWithMisspelledGetter {\n \n         private ObjectId _id;\n@@ -109,4 +121,18 @@ public class JacksonAnnotationsHandlingTest extends JongoTestCase {\n         private long _id;\n \n     }\n+\n+    public static class POJOWithAnnotatedGetter {\n+        private String someId;\n+\n+        @MongoId\n+        public String getId() {\n+            return someId;\n+        }\n+\n+        public void setId(String id) {\n+            someId = id;\n+        }\n+    }\n+\n }\n"}
{"repository": "bguerout/jongo", "clone_url": "https://github.com/bguerout/jongo.git", "timestamp": "2023-05-31T21:34:18.587559Z", "commit_hash": "f28b15c95fc196209d5f65a4522b951d7b4cbfb6", "commit_message": "Fix invalid detection of a primitive when POJO has @JsonTypeInfo\n\nrefs #258\n", "related_issues": "", "bug_patch": "diff --git a/src/main/java/org/jongo/query/BsonQueryFactory.java b/src/main/java/org/jongo/query/BsonQueryFactory.java\nindex efeac4e..ce5b19a 100644\n--- a/src/main/java/org/jongo/query/BsonQueryFactory.java\n+++ b/src/main/java/org/jongo/query/BsonQueryFactory.java\n@@ -243,7 +243,7 @@ public class BsonQueryFactory implements QueryFactory {\n \n     private boolean hasBeenSerializedAsPrimitive(BsonDocument document) {\n         byte[] bytes = document.toByteArray();\n-        return bytes.length == 1 || bytes.length != bytes[0];\n+        return bytes[0] >= 0 && (bytes.length == 1 || bytes.length != bytes[0]);\n     }\n \n     /**\n", "test_patch": "diff --git a/src/test/java/org/jongo/PolymorphismTest.java b/src/test/java/org/jongo/PolymorphismTest.java\nindex 575987a..4e0179e 100644\n--- a/src/test/java/org/jongo/PolymorphismTest.java\n+++ b/src/test/java/org/jongo/PolymorphismTest.java\n@@ -16,9 +16,9 @@\n \n package org.jongo;\n \n-import com.fasterxml.jackson.annotation.JsonProperty;\n import com.fasterxml.jackson.annotation.JsonSubTypes;\n import com.fasterxml.jackson.annotation.JsonTypeInfo;\n+import org.bson.types.ObjectId;\n import org.jongo.model.Animal;\n import org.jongo.model.Fox;\n import org.jongo.util.JongoTestCase;\n@@ -89,6 +89,18 @@ public class PolymorphismTest extends JongoTestCase {\n         assertThat(zoo.mascot.getName()).isEqualTo(\"Zorro\");\n     }\n \n+    @Test\n+    //https://github.com/bguerout/jongo/issues/258\n+    public void canHandleInheritanceWithALongText() throws Exception {\n+        Chiwawa custom = new Chiwawa();\n+        collection.insert(custom);\n+\n+        collection.update(custom._id).with(\"#\", custom);\n+\n+        Chiwawa result = collection.findOne().as(Chiwawa.class);\n+        assertThat(result).isNotNull();\n+    }\n+\n     @JsonTypeInfo(\n             use = JsonTypeInfo.Id.NAME,\n             include = JsonTypeInfo.As.PROPERTY,\n@@ -96,9 +108,11 @@ public class PolymorphismTest extends JongoTestCase {\n             visible = true)\n     @JsonSubTypes({\n             @JsonSubTypes.Type(value = Beagle.class, name = \"B\"),\n-            @JsonSubTypes.Type(value = Loulou.class, name = \"L\")\n+            @JsonSubTypes.Type(value = Loulou.class, name = \"L\"),\n+            @JsonSubTypes.Type(value = Chiwawa.class, name = \"C\")\n     })\n     private static abstract class Dog {\n+        ObjectId _id;\n         String name, discriminator;\n     }\n \n@@ -108,6 +122,10 @@ public class PolymorphismTest extends JongoTestCase {\n     private static class Loulou extends Dog {\n     }\n \n+    private static class Chiwawa extends Dog {\n+        private String tooLongText = \"chiwawa-chiwawa-chiwawa-chiwawa-chiwawachiwawachiwawachiwawachiwawachiwawa\";\n+    }\n+\n     private static class Zoo {\n \n         private String name;\n"}
{"repository": "bguerout/jongo", "clone_url": "https://github.com/bguerout/jongo.git", "timestamp": "2023-05-31T21:38:45.906408Z", "commit_hash": "e2bfd71407549d9efb361e21874d4795587eaa03", "commit_message": "Fix detection of invalid primitive serialization\n\nrefs #222\n", "related_issues": "", "bug_patch": "diff --git a/src/main/java/org/jongo/query/BsonQueryFactory.java b/src/main/java/org/jongo/query/BsonQueryFactory.java\nindex 8a4e5b3..efeac4e 100644\n--- a/src/main/java/org/jongo/query/BsonQueryFactory.java\n+++ b/src/main/java/org/jongo/query/BsonQueryFactory.java\n@@ -242,7 +242,8 @@ public class BsonQueryFactory implements QueryFactory {\n     }\n \n     private boolean hasBeenSerializedAsPrimitive(BsonDocument document) {\n-        return document.toByteArray()[0] == 0;\n+        byte[] bytes = document.toByteArray();\n+        return bytes.length == 1 || bytes.length != bytes[0];\n     }\n \n     /**\n", "test_patch": "diff --git a/src/test/java/org/jongo/marshall/jackson/ParameterBindingWithJacksonTest.java b/src/test/java/org/jongo/marshall/jackson/ParameterBindingWithJacksonTest.java\nindex e12b1bc..2ab6b08 100644\n--- a/src/test/java/org/jongo/marshall/jackson/ParameterBindingWithJacksonTest.java\n+++ b/src/test/java/org/jongo/marshall/jackson/ParameterBindingWithJacksonTest.java\n@@ -30,9 +30,19 @@ public class ParameterBindingWithJacksonTest extends JongoTestCase {\n         assertThat(result).isNotNull();\n     }\n \n+    @Test\n+    public void canBindStringWithJsonValue() throws Exception {\n+\n+        collection.insert(\"{'prefixer':'prefix_data'}\");\n+\n+        Map result = collection.findOne(\"{'prefixer':#}\", new StringWithPrefix(\"data\")).as(Map.class);\n+\n+        assertThat(result).isNotNull();\n+    }\n \n     private static enum Type {\n         EMPTY(0);\n+\n         private int value;\n \n         private Type(int value) {\n@@ -43,5 +53,20 @@ public class ParameterBindingWithJacksonTest extends JongoTestCase {\n         public int getValue() {\n             return value;\n         }\n+\n+    }\n+\n+    private static class StringWithPrefix {\n+\n+        private final String value;\n+\n+        private StringWithPrefix(String value) {\n+            this.value = value;\n+        }\n+\n+        @JsonValue\n+        public String getValue() {\n+            return \"prefix_\" + value;\n+        }\n     }\n }\ndiff --git a/src/test/java/org/jongo/query/BsonQueryFactoryTest.java b/src/test/java/org/jongo/query/BsonQueryFactoryTest.java\nindex 5af8c94..5f7cc5a 100644\n--- a/src/test/java/org/jongo/query/BsonQueryFactoryTest.java\n+++ b/src/test/java/org/jongo/query/BsonQueryFactoryTest.java\n@@ -24,6 +24,7 @@ import com.mongodb.DBObject;\n import com.mongodb.QueryBuilder;\n import org.jongo.marshall.jackson.JacksonEngine;\n import org.jongo.marshall.jackson.configuration.Mapping;\n+import org.jongo.model.Coordinate;\n import org.jongo.model.Friend;\n import org.jongo.util.ErrorObject;\n import org.junit.Before;\n@@ -165,14 +166,52 @@ public class BsonQueryFactoryTest {\n     }\n \n     @Test\n-    public void canHandleObjectSerializedAsAPrimitive() throws Exception {\n+    public void canHandlePOJOSerializedAsString() throws Exception {\n \n-        Mapping mapping = new Mapping.Builder().addSerializer(Friend.class, new PrimitiveJsonSerializer()).build();\n-        factory = new BsonQueryFactory(new JacksonEngine(mapping));\n+        Mapping mapping = new Mapping.Builder().addSerializer(Friend.class, new JsonSerializer<Friend>() {\n \n-        DBObject query = factory.createQuery(\"{bytes:#}\", new Friend(\"Robert\")).toDBObject();\n+            @Override\n+            public void serialize(Friend friend, JsonGenerator jgen, SerializerProvider provider) throws IOException {\n+                jgen.writeString(friend.getName());\n+            }\n+        }).build();\n+        QueryFactory customFactory = new BsonQueryFactory(new JacksonEngine(mapping));\n \n-        assertThat(query.get(\"bytes\")).isEqualTo(\"Robert\");\n+        DBObject query = customFactory.createQuery(\"{friend:#}\", new Friend(\"Robert\")).toDBObject();\n+\n+        assertThat(query.get(\"friend\")).isEqualTo(\"Robert\");\n+    }\n+\n+    @Test\n+    public void canHandlePOJOSerializedAsBoolean() throws Exception {\n+\n+        Mapping mapping = new Mapping.Builder().addSerializer(Friend.class, new JsonSerializer<Friend>() {\n+            @Override\n+            public void serialize(Friend value, JsonGenerator jgen, SerializerProvider provider) throws IOException {\n+                jgen.writeBoolean(true);\n+            }\n+        }).build();\n+        QueryFactory customFactory = new BsonQueryFactory(new JacksonEngine(mapping));\n+\n+        DBObject query = customFactory.createQuery(\"{friend:#}\", new Friend(\"Robert\")).toDBObject();\n+\n+        assertThat(query.get(\"friend\")).isEqualTo(true);\n+    }\n+\n+    @Test\n+    public void canHandlePOJOSerializedAsNumber() throws Exception {\n+\n+        Mapping mapping = new Mapping.Builder().addSerializer(Coordinate.class, new JsonSerializer<Coordinate>() {\n+            @Override\n+            public void serialize(Coordinate value, JsonGenerator jgen, SerializerProvider provider) throws IOException {\n+                jgen.writeNumber(value.lat);\n+            }\n+        }).build();\n+        QueryFactory customFactory = new BsonQueryFactory(new JacksonEngine(mapping));\n+\n+        DBObject query = customFactory.createQuery(\"{coordinate:#}\", new Coordinate(1, 1)).toDBObject();\n+\n+        assertThat(query.get(\"coordinate\")).isEqualTo(1);\n     }\n \n     @Test\n@@ -232,12 +271,4 @@ public class BsonQueryFactoryTest {\n \n         assertThat(query.toDBObject()).isEqualTo(QueryBuilder.start(\"name\").is(\"John\").get());\n     }\n-\n-    private static class PrimitiveJsonSerializer extends JsonSerializer<Friend> {\n-\n-        @Override\n-        public void serialize(Friend friend, JsonGenerator jgen, SerializerProvider provider) throws IOException {\n-            jgen.writeString(friend.getName());\n-        }\n-    }\n }\n"}
{"repository": "bguerout/jongo", "clone_url": "https://github.com/bguerout/jongo.git", "timestamp": "2023-05-31T21:43:24.941939Z", "commit_hash": "3d5d89152a0cf2fa8182071fe0181a5c30736a10", "commit_message": "Merge pull request #218 from swallez/array-substitutions\n\nFix '#' substitution in array values", "related_issues": "", "bug_patch": "diff --git a/src/main/java/org/jongo/query/BsonQueryFactory.java b/src/main/java/org/jongo/query/BsonQueryFactory.java\nindex 6ae0196..d180fac 100644\n--- a/src/main/java/org/jongo/query/BsonQueryFactory.java\n+++ b/src/main/java/org/jongo/query/BsonQueryFactory.java\n@@ -171,13 +171,27 @@ public class BsonQueryFactory implements QueryFactory {\n             char c = query.charAt(pos);\n             if (c == ':') {\n                 return true;\n-            } else if (c == ',' || c == '{' || c == '.') {\n+            } else if (c == '{' || c == '.') {\n                 return false;\n+            } else if (c == ',') {\n+                return !isPropertyName(query, pos-1);\n             }\n         }\n         return true;\n     }\n \n+    private boolean isPropertyName(String query, int tokenIndex) {\n+        for (int pos = tokenIndex; pos >= 0; pos--) {\n+            char c = query.charAt(pos);\n+            if (c == '[') {\n+                return false;\n+            } else if (c == '{') {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n     private Object marshallParameter(Object parameter) {\n         try {\n             if (parameter == null || Bson.isPrimitive(parameter)) {\n", "test_patch": "diff --git a/src/test/java/org/jongo/query/BsonQueryFactoryTest.java b/src/test/java/org/jongo/query/BsonQueryFactoryTest.java\nindex 9bbb5a6..0edaf70 100644\n--- a/src/test/java/org/jongo/query/BsonQueryFactoryTest.java\n+++ b/src/test/java/org/jongo/query/BsonQueryFactoryTest.java\n@@ -200,6 +200,22 @@ public class BsonQueryFactoryTest {\n     }\n \n     @Test\n+    public void shouldBindOneValueInAnArray() throws Exception {\n+\n+        Query query = factory.createQuery(\"{a: [ # ]}\", \"test\");\n+\n+        assertThat(query.toDBObject()).isEqualTo(QueryBuilder.start(\"a\").is(new String[]{\"test\"}).get());\n+    }\n+\n+    @Test\n+    public void shouldBindManyValuesInAnArray() throws Exception {\n+\n+        Query query = factory.createQuery(\"{a: [#, 'test2', #]}\", \"test1\", \"test3\");\n+\n+        assertThat(query.toDBObject()).isEqualTo(QueryBuilder.start(\"a\").is(new String[]{\"test1\", \"test2\", \"test3\"}).get());\n+    }\n+\n+    @Test\n     public void shouldBindANestedKeyParameter() throws Exception {\n \n         Query query = factory.createQuery(\"{ name.#: 'John'}\", \"first\");\n"}
{"repository": "bguerout/jongo", "clone_url": "https://github.com/bguerout/jongo.git", "timestamp": "2023-05-31T21:48:17.054785Z", "commit_hash": "9c96b7249e99681ef5ded74107280097540fac32", "commit_message": "Fix '#' substitution in array values\n", "related_issues": "", "bug_patch": "diff --git a/src/main/java/org/jongo/query/BsonQueryFactory.java b/src/main/java/org/jongo/query/BsonQueryFactory.java\nindex 6ae0196..d180fac 100644\n--- a/src/main/java/org/jongo/query/BsonQueryFactory.java\n+++ b/src/main/java/org/jongo/query/BsonQueryFactory.java\n@@ -171,13 +171,27 @@ public class BsonQueryFactory implements QueryFactory {\n             char c = query.charAt(pos);\n             if (c == ':') {\n                 return true;\n-            } else if (c == ',' || c == '{' || c == '.') {\n+            } else if (c == '{' || c == '.') {\n                 return false;\n+            } else if (c == ',') {\n+                return !isPropertyName(query, pos-1);\n             }\n         }\n         return true;\n     }\n \n+    private boolean isPropertyName(String query, int tokenIndex) {\n+        for (int pos = tokenIndex; pos >= 0; pos--) {\n+            char c = query.charAt(pos);\n+            if (c == '[') {\n+                return false;\n+            } else if (c == '{') {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n     private Object marshallParameter(Object parameter) {\n         try {\n             if (parameter == null || Bson.isPrimitive(parameter)) {\n", "test_patch": "diff --git a/src/test/java/org/jongo/query/BsonQueryFactoryTest.java b/src/test/java/org/jongo/query/BsonQueryFactoryTest.java\nindex 9bbb5a6..0edaf70 100644\n--- a/src/test/java/org/jongo/query/BsonQueryFactoryTest.java\n+++ b/src/test/java/org/jongo/query/BsonQueryFactoryTest.java\n@@ -200,6 +200,22 @@ public class BsonQueryFactoryTest {\n     }\n \n     @Test\n+    public void shouldBindOneValueInAnArray() throws Exception {\n+\n+        Query query = factory.createQuery(\"{a: [ # ]}\", \"test\");\n+\n+        assertThat(query.toDBObject()).isEqualTo(QueryBuilder.start(\"a\").is(new String[]{\"test\"}).get());\n+    }\n+\n+    @Test\n+    public void shouldBindManyValuesInAnArray() throws Exception {\n+\n+        Query query = factory.createQuery(\"{a: [#, 'test2', #]}\", \"test1\", \"test3\");\n+\n+        assertThat(query.toDBObject()).isEqualTo(QueryBuilder.start(\"a\").is(new String[]{\"test1\", \"test2\", \"test3\"}).get());\n+    }\n+\n+    @Test\n     public void shouldBindANestedKeyParameter() throws Exception {\n \n         Query query = factory.createQuery(\"{ name.#: 'John'}\", \"first\");\n"}
{"repository": "bguerout/jongo", "clone_url": "https://github.com/bguerout/jongo.git", "timestamp": "2023-05-31T21:52:29.191775Z", "commit_hash": "a3f1964a135c5914f475ab5d715c65f7ca33abc4", "commit_message": "fix BsonQueryFactory to bind multiple names on template\n", "related_issues": "", "bug_patch": "diff --git a/src/main/java/org/jongo/query/BsonQueryFactory.java b/src/main/java/org/jongo/query/BsonQueryFactory.java\nindex 1c0cbf3..caae99a 100644\n--- a/src/main/java/org/jongo/query/BsonQueryFactory.java\n+++ b/src/main/java/org/jongo/query/BsonQueryFactory.java\n@@ -95,12 +95,23 @@ public class BsonQueryFactory implements QueryFactory {\n             // Check if the character preceding the token is one that separates values.\n             // Otherwise, it's a property name substitution\n             boolean isValueParam = true;\n-            if (pos > 0) {\n+            int comaIndex = query.indexOf(\",\", pos);\n+            int doubleDotIndex =query.indexOf(\":\", pos);\n+            if (comaIndex == -1 && doubleDotIndex == -1) {\n+                isValueParam = true;\n+            } else if (comaIndex == -1 && doubleDotIndex != -1) {\n+                isValueParam = false;\n+            } else if (comaIndex <  doubleDotIndex) {\n+                isValueParam = true;\n+            } else {\n+                isValueParam = false;\n+            }\n+            /*if (pos > 0) {\n                 char c = query.charAt(pos - 1);\n                 if (PRECEDING_VALUE_PARAM.indexOf(c) == -1) {\n                     isValueParam = false;\n                 }\n-            }\n+            }*/\n \n             if (isValueParam) {\n                 // Will be resolved by the JSON parser below\n", "test_patch": "diff --git a/src/test/java/org/jongo/query/BsonQueryFactoryTest.java b/src/test/java/org/jongo/query/BsonQueryFactoryTest.java\nindex 23b4d1c..d188096 100644\n--- a/src/test/java/org/jongo/query/BsonQueryFactoryTest.java\n+++ b/src/test/java/org/jongo/query/BsonQueryFactoryTest.java\n@@ -81,6 +81,14 @@ public class BsonQueryFactoryTest {\n     }\n \n     @Test\n+    public void shouldBindManyNames() throws Exception {\n+\n+        Query query = factory.createQuery(\"{#:123, #:456}\", \"id\", \"test\");\n+\n+        assertThat(query.toDBObject()).isEqualTo(QueryBuilder.start(\"id\").is(123).and(\"test\").is(456).get());\n+    }\n+\n+    @Test\n     public void shouldBindNullParameter() throws Exception {\n \n         Query query = factory.createQuery(\"{id:#}\", null);\n"}
{"repository": "bguerout/jongo", "clone_url": "https://github.com/bguerout/jongo.git", "timestamp": "2023-05-31T22:00:37.691588Z", "commit_hash": "2e8373e761935c9ebc989977bb3f94ad9145b966", "commit_message": "Update embed mongo to 1.40\n\nThis fix issue with new driver 1.20-SNAPSHOT\n", "related_issues": "", "bug_patch": "diff --git a/pom.xml b/pom.xml\nindex 4e74148..6a5db2c 100755\n--- a/pom.xml\n+++ b/pom.xml\n@@ -150,7 +150,7 @@\n         <dependency>\n             <groupId>de.flapdoodle.embed</groupId>\n             <artifactId>de.flapdoodle.embed.mongo</artifactId>\n-            <version>1.31</version>\n+            <version>1.40</version>\n             <scope>test</scope>\n         </dependency>\n         <dependency>\n", "test_patch": "diff --git a/src/test/java/org/jongo/util/MongoResource.java b/src/test/java/org/jongo/util/MongoResource.java\nindex 9c698d1..c64f766 100644\n--- a/src/test/java/org/jongo/util/MongoResource.java\n+++ b/src/test/java/org/jongo/util/MongoResource.java\n@@ -18,15 +18,18 @@ package org.jongo.util;\n \n import com.mongodb.DB;\n import com.mongodb.Mongo;\n+import com.mongodb.MongoClient;\n import com.mongodb.WriteConcern;\n import de.flapdoodle.embed.mongo.Command;\n-import de.flapdoodle.embed.mongo.MongodExecutable;\n import de.flapdoodle.embed.mongo.MongodStarter;\n-import de.flapdoodle.embed.mongo.config.MongodConfig;\n+import de.flapdoodle.embed.mongo.config.IMongodConfig;\n+import de.flapdoodle.embed.mongo.config.MongodConfigBuilder;\n+import de.flapdoodle.embed.mongo.config.Net;\n import de.flapdoodle.embed.mongo.config.RuntimeConfigBuilder;\n import de.flapdoodle.embed.mongo.distribution.Version;\n import de.flapdoodle.embed.process.config.IRuntimeConfig;\n import de.flapdoodle.embed.process.config.io.ProcessOutput;\n+import de.flapdoodle.embed.process.io.IStreamProcessor;\n import de.flapdoodle.embed.process.io.NullProcessor;\n import de.flapdoodle.embed.process.runtime.Network;\n \n@@ -54,22 +57,23 @@ public class MongoResource {\n      */\n     private static class EmbeddedMongo {\n \n-        public static final Version DEFAULT_VERSION = Version.V2_2_4;\n+        private static MongoClient instance = getInstance();\n \n-        private static Mongo instance = getInstance();\n-\n-        private static Mongo getInstance() {\n+        private static MongoClient getInstance() {\n             try {\n-\n                 int port = RandomPortNumberGenerator.pickAvailableRandomEphemeralPortNumber();\n+                IStreamProcessor output = new NullProcessor();\n+\n                 IRuntimeConfig runtimeConfig = new RuntimeConfigBuilder()\n                         .defaults(Command.MongoD)\n-                        .processOutput(new ProcessOutput(new NullProcessor(), new NullProcessor(), new NullProcessor()))//no logs\n+                        .processOutput(new ProcessOutput(output, output, output))\n+                        .build();\n+                IMongodConfig mongodConfig = new MongodConfigBuilder()\n+                        .version(Version.Main.PRODUCTION)\n+                        .net(new Net(port, Network.localhostIsIPv6()))\n                         .build();\n-                MongodStarter runtime = MongodStarter.getInstance(runtimeConfig);\n-                MongodConfig config = new MongodConfig(DEFAULT_VERSION, port, Network.localhostIsIPv6());\n-                MongodExecutable exe = runtime.prepare(config);\n-                exe.start();\n+\n+                MongodStarter.getInstance(runtimeConfig).prepare(mongodConfig).start();\n \n                 return createClient(port);\n \n@@ -81,9 +85,9 @@ public class MongoResource {\n \n     public static class LocalMongo {\n \n-        public static Mongo instance = getInstance();\n+        public static MongoClient instance = getInstance();\n \n-        private static Mongo getInstance() {\n+        private static MongoClient getInstance() {\n             try {\n                 return createClient(27017);\n             } catch (Exception e) {\n@@ -92,12 +96,8 @@ public class MongoResource {\n         }\n     }\n \n-    /**\n-     * We use deprecated Mongo constructor to ensure backward compatibility with old drivers during compatibility tests.\n-     * see src/test/sh/run-tests-against-all-driver-versions.sh\n-     */\n-    private static Mongo createClient(int port) throws UnknownHostException {\n-        Mongo mongo = new Mongo(\"127.0.0.1\", port);\n+    private static MongoClient createClient(int port) throws UnknownHostException {\n+        MongoClient mongo = new MongoClient(\"127.0.0.1\", port);\n         mongo.setWriteConcern(WriteConcern.FSYNC_SAFE);\n         return mongo;\n     }\n"}
{"repository": "bguerout/jongo", "clone_url": "https://github.com/bguerout/jongo.git", "timestamp": "2023-05-31T22:04:52.050655Z", "commit_hash": "99924acde6938e4a854e4281abfb4b3f011b9e89", "commit_message": "Merge branch 'binary_fix' of git://github.com/sjoerdmulder/jongo into sjoerdmulder-binary_fix\n", "related_issues": "", "bug_patch": "diff --git a/pom.xml b/pom.xml\nindex 121b4bd..be8321a 100755\n--- a/pom.xml\n+++ b/pom.xml\n@@ -75,7 +75,7 @@\n     </prerequisites>\n \n     <properties>\n-        <mongo.version>[2.9.0,2.99)</mongo.version>\n+        <mongo.version>[2.11.0,2.99)</mongo.version>\n         <jackson.version>2.2.3</jackson.version>\n         <bson4jackson.version>2.2.0</bson4jackson.version>\n     </properties>\ndiff --git a/src/main/java/org/jongo/marshall/jackson/bson4jackson/BsonDeserializers.java b/src/main/java/org/jongo/marshall/jackson/bson4jackson/BsonDeserializers.java\nindex 4ead258..751fe31 100644\n--- a/src/main/java/org/jongo/marshall/jackson/bson4jackson/BsonDeserializers.java\n+++ b/src/main/java/org/jongo/marshall/jackson/bson4jackson/BsonDeserializers.java\n@@ -23,6 +23,7 @@ import com.fasterxml.jackson.databind.JsonDeserializer;\n import com.fasterxml.jackson.databind.module.SimpleDeserializers;\n import com.mongodb.DBObject;\n import com.mongodb.util.JSON;\n+import org.bson.types.Binary;\n import org.bson.types.MaxKey;\n import org.bson.types.MinKey;\n \n@@ -33,10 +34,10 @@ class BsonDeserializers extends SimpleDeserializers {\n \n     public BsonDeserializers() {\n         addDeserializer(Date.class, new DateDeserializer());\n-        NativeDeserializer nativeDeserializer = new NativeDeserializer();\n         addDeserializer(MinKey.class, new MinKeyDeserializer());\n         addDeserializer(MaxKey.class, new MaxKeyDeserializer());\n-        addDeserializer(DBObject.class, nativeDeserializer);\n+        addDeserializer(Binary.class, new BinaryDeserializer());\n+        addDeserializer(DBObject.class, new NativeDeserializer());\n     }\n \n     private static class DateDeserializer extends JsonDeserializer<Date> {\n@@ -76,4 +77,12 @@ class BsonDeserializers extends SimpleDeserializers {\n             return (T) JSON.parse(asString);\n         }\n     }\n+\n+    private static class BinaryDeserializer extends JsonDeserializer<Binary> {\n+        @Override\n+        public Binary deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException, JsonProcessingException {\n+            Object object = jp.getEmbeddedObject();\n+            return new Binary((byte[]) object);\n+        }\n+    }\n }\ndiff --git a/src/main/java/org/jongo/marshall/jackson/bson4jackson/BsonSerializers.java b/src/main/java/org/jongo/marshall/jackson/bson4jackson/BsonSerializers.java\nindex 8762b80..98f7b4c 100644\n--- a/src/main/java/org/jongo/marshall/jackson/bson4jackson/BsonSerializers.java\n+++ b/src/main/java/org/jongo/marshall/jackson/bson4jackson/BsonSerializers.java\n@@ -21,10 +21,7 @@ import com.fasterxml.jackson.core.JsonProcessingException;\n import com.fasterxml.jackson.databind.JsonSerializer;\n import com.fasterxml.jackson.databind.SerializerProvider;\n import com.fasterxml.jackson.databind.module.SimpleSerializers;\n-import org.bson.types.BSONTimestamp;\n-import org.bson.types.MaxKey;\n-import org.bson.types.MinKey;\n-import org.bson.types.ObjectId;\n+import org.bson.types.*;\n \n import java.io.IOException;\n \n@@ -34,6 +31,7 @@ class BsonSerializers extends SimpleSerializers {\n         addSerializer(BSONTimestamp.class, new BSONTimestampSerializer());\n         addSerializer(MinKey.class, new MinKeySerializer());\n         addSerializer(MaxKey.class, new MaxKeySerializer());\n+        addSerializer(Binary.class, new BinarySerializer());\n     }\n \n     static class MaxKeySerializer extends JsonSerializer<MaxKey> {\n@@ -63,4 +61,12 @@ class BsonSerializers extends SimpleSerializers {\n             ((MongoBsonGenerator) jsonGenerator).writeNativeObjectId(obj);\n         }\n     }\n+\n+    static class BinarySerializer extends JsonSerializer<Binary> {\n+\n+        public void serialize(Binary obj, JsonGenerator jsonGenerator, SerializerProvider serializerProvider) throws IOException, JsonProcessingException {\n+            ((MongoBsonGenerator) jsonGenerator).writeBinary(obj);\n+        }\n+    }\n+\n }\ndiff --git a/src/main/java/org/jongo/marshall/jackson/bson4jackson/MongoBsonGenerator.java b/src/main/java/org/jongo/marshall/jackson/bson4jackson/MongoBsonGenerator.java\nindex 90bdc59..3097e9d 100644\n--- a/src/main/java/org/jongo/marshall/jackson/bson4jackson/MongoBsonGenerator.java\n+++ b/src/main/java/org/jongo/marshall/jackson/bson4jackson/MongoBsonGenerator.java\n@@ -20,6 +20,7 @@ import de.undercouch.bson4jackson.BsonConstants;\n import de.undercouch.bson4jackson.BsonGenerator;\n import de.undercouch.bson4jackson.io.ByteOrderUtil;\n import org.bson.types.BSONTimestamp;\n+import org.bson.types.Binary;\n import org.bson.types.MaxKey;\n import org.bson.types.MinKey;\n \n@@ -68,4 +69,15 @@ class MongoBsonGenerator extends BsonGenerator {\n         _buffer.putByte(_typeMarker, BsonConstants.TYPE_MAXKEY);\n         flushBuffer();\n     }\n+\n+    public void writeBinary(Binary binary) throws IOException {\n+        _writeArrayFieldNameIfNeeded();\n+        _verifyValueWrite(\"write binary\");\n+        byte[] bytes = binary.getData();\n+        _buffer.putByte(_typeMarker, BsonConstants.TYPE_BINARY);\n+        _buffer.putInt(bytes.length);\n+        _buffer.putByte(binary.getType());\n+        _buffer.putBytes(binary.getData());\n+        flushBuffer();\n+    }\n }\ndiff --git a/src/test/java/org/jongo/binary/BinaryTest.java b/src/test/java/org/jongo/binary/BinaryTest.java\nnew file mode 100644\nindex 0000000..2067c41\n--- /dev/null\n+++ b/src/test/java/org/jongo/binary/BinaryTest.java\n@@ -0,0 +1,132 @@\n+package org.jongo.binary;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.mongodb.BasicDBObject;\n+import org.bson.types.Binary;\n+import org.jongo.MongoCollection;\n+import org.jongo.util.JongoTestCase;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNull;\n+\n+public class BinaryTest extends JongoTestCase {\n+\n+    private static class Friend {\n+        @JsonProperty(\"_id\")\n+        private Binary id;\n+        private String name;\n+\n+        public Binary getId() {\n+            return new Binary(id.getData());\n+        }\n+\n+        public void setId(Binary id) {\n+            this.id = id;\n+        }\n+\n+        public String getName() {\n+            return name;\n+        }\n+\n+        public void setName(String name) {\n+            this.name = name;\n+        }\n+\n+        @Override\n+        public boolean equals(Object o) {\n+            if (this == o) return true;\n+            if (!(o instanceof Friend)) return false;\n+\n+            Friend friend = (Friend) o;\n+\n+            if (id != null ? !id.equals(friend.id) : friend.id != null) return false;\n+            if (name != null ? !name.equals(friend.name) : friend.name != null) return false;\n+\n+            return true;\n+        }\n+\n+        @Override\n+        public int hashCode() {\n+            int result = id != null ? id.hashCode() : 0;\n+            result = 31 * result + (name != null ? name.hashCode() : 0);\n+            return result;\n+        }\n+    }\n+\n+    private Friend friend;\n+    private Binary friendId;\n+    private MongoCollection collection;\n+\n+    @Before\n+    public void setUp() throws Exception {\n+        friend = new Friend();\n+        friendId = new Binary(\"jongo\".getBytes());\n+        friend.setId(friendId);\n+        friend.setName(\"jongo\");\n+\n+        collection = createEmptyCollection(\"friends\");\n+        collection.getDBCollection().insert(\n+                new BasicDBObject(\n+                        \"_id\", friend.getId()).append(\n+                        \"name\", friend.getName()));\n+\n+    }\n+\n+    @After\n+    public void tearDown() throws Exception {\n+        dropCollection(\"friends\");\n+    }\n+\n+\n+    @Test\n+    public void testQuery() throws Exception {\n+        Friend testFriend = collection.find().as(Friend.class).iterator().next();\n+        assertEquals(friend, testFriend);\n+    }\n+\n+\n+    @Test\n+    public void testSave() throws Exception {\n+        Friend expected = new Friend();\n+        Binary expectedId = new Binary(\"friend2\".getBytes());\n+        expected.setId(expectedId);\n+        expected.setName(\"friend2\");\n+        collection.save(expected);\n+\n+        Friend actual = collection.findOne(\"{ _id: #}\", expectedId).as(Friend.class);\n+        assertEquals(expected, actual);\n+    }\n+\n+    @Test\n+    public void testUpdate() throws Exception {\n+        friend.setName(\"new friend\");\n+        collection.update(\"{ _id: #}\", friendId).with(\"#\", friend);\n+\n+        Friend actual = collection.findOne(\"{ _id: #}\", friendId).as(Friend.class);\n+        assertEquals(friend, actual);\n+    }\n+\n+    @Test\n+    public void testInsert() throws Exception {\n+        Friend expected = new Friend();\n+        Binary expectedId = new Binary(\"friend2\".getBytes());\n+        expected.setId(expectedId);\n+        expected.setName(\"friend2\");\n+        collection.insert(\"#\", expected);\n+\n+        Friend actual = collection.findOne(\"{ _id: #}\", expectedId).as(Friend.class);\n+        assertEquals(expected, actual);\n+\n+    }\n+\n+    @Test\n+    public void testRemove() throws Exception {\n+        collection.remove(\"{ _id: #}\", friendId);\n+\n+        Friend actual = collection.findOne(\"{ _id: #}\", friendId).as(Friend.class);\n+        assertNull(actual);\n+    }\n+}\n", "test_patch": "diff --git a/src/test/java/org/jongo/marshall/DocumentMarshallingTest.java b/src/test/java/org/jongo/marshall/DocumentMarshallingTest.java\nindex ef5ad10..00805d2 100644\n--- a/src/test/java/org/jongo/marshall/DocumentMarshallingTest.java\n+++ b/src/test/java/org/jongo/marshall/DocumentMarshallingTest.java\n@@ -122,7 +122,7 @@ public class DocumentMarshallingTest extends JongoTestCase {\n \n         collection.save(type);\n \n-        assertHasBeenPersistedAs(jsonify(\"'timestamp' : { '$ts' : 1 , '$inc' : 2}\"));\n+        assertHasBeenPersistedAs(jsonify(\"'timestamp' : { '$timestamp' : { 't' : 1 , 'i' : 2}}\"));\n         BSONPrimitiveType result = collection.findOne(\"{}\").as(BSONPrimitiveType.class);\n         assertThat(result.timestamp).isEqualTo(new BSONTimestamp(1, 2));\n     }\n@@ -131,13 +131,13 @@ public class DocumentMarshallingTest extends JongoTestCase {\n     public void canHandleISODate() throws Exception {\n \n         BSONPrimitiveType type = new BSONPrimitiveType();\n-        type.date = new Date(0);\n+        type.date = new Date(123);\n \n         collection.save(type);\n \n-        assertHasBeenPersistedAs(jsonify(\"'date' : { '$date' : '1970-01-01T00:00:00.000Z'}\"));\n+        assertHasBeenPersistedAs(jsonify(\"'date' : { '$date' : 123}\"));\n         BSONPrimitiveType result = collection.findOne(\"{}\").as(BSONPrimitiveType.class);\n-        assertThat(result.date).isEqualTo(new Date(0));\n+        assertThat(result.date).isEqualTo(new Date(123));\n     }\n \n     @Test\n@@ -180,15 +180,15 @@ public class DocumentMarshallingTest extends JongoTestCase {\n     public void canHandleMapWithPrimitiveType() throws Exception {\n \n         Map<String, Date> strings = new HashMap<String, Date>();\n-        strings.put(\"key\", new Date(0));\n+        strings.put(\"key\", new Date(456));\n         BSONPrimitiveType type = new BSONPrimitiveType();\n         type.mapWithDates = strings;\n \n         collection.save(type);\n \n-        assertHasBeenPersistedAs(jsonify(\"'mapWithDates' : { 'key' : { '$date' : '1970-01-01T00:00:00.000Z'}}\"));\n+        assertHasBeenPersistedAs(jsonify(\"'mapWithDates' : { 'key' : { '$date' : 456}}\"));\n         BSONPrimitiveType result = collection.findOne(\"{}\").as(BSONPrimitiveType.class);\n-        assertThat(result.mapWithDates).includes(entry(\"key\", new Date(0)));\n+        assertThat(result.mapWithDates).includes(entry(\"key\", new Date(456)));\n     }\n \n     @Test\n@@ -233,18 +233,33 @@ public class DocumentMarshallingTest extends JongoTestCase {\n     }\n \n     @Test\n+    public void canHandleBinary() throws Exception {\n+\n+        BSONPrimitiveType type = new BSONPrimitiveType();\n+        type.binary = new Binary(\"abcde\".getBytes());\n+\n+        collection.save(type);\n+\n+        assertHasBeenPersistedAs(jsonify(\"'binary' : { '$binary' : 'YWJjZGU=' , '$type' : 0}\"));\n+        BSONPrimitiveType result = collection.findOne(\"{}\").as(BSONPrimitiveType.class);\n+\n+        assertThat(result.binary.getType()).isEqualTo(type.binary.getType());\n+        assertThat(result.binary.getData()).isEqualTo(type.binary.getData());\n+    }\n+\n+    @Test\n     public void canHandleIterableWithPrimitiveType() throws Exception {\n \n         BSONPrimitiveType type = new BSONPrimitiveType();\n         List<Date> dates = new ArrayList<Date>();\n-        dates.add(new Date(0));\n+        dates.add(new Date(123));\n         type.dateList = dates;\n \n         collection.save(type);\n \n-        assertHasBeenPersistedAs(jsonify(\"'dateList' : [ { '$date' : '1970-01-01T00:00:00.000Z'}]\"));\n+        assertHasBeenPersistedAs(jsonify(\"'dateList' : [ { '$date' : 123}]\"));\n         BSONPrimitiveType result = collection.findOne(\"{}\").as(BSONPrimitiveType.class);\n-        assertThat(result.dateList).contains(new Date(0));\n+        assertThat(result.dateList).contains(new Date(123));\n     }\n \n     @Test\n@@ -284,6 +299,7 @@ public class DocumentMarshallingTest extends JongoTestCase {\n         List<Friend> complexList;\n         List<Date> dateList;\n         byte[] bytes;\n+        Binary binary;\n     }\n \n     private static class JavaNativeType {\ndiff --git a/src/test/java/org/jongo/util/JSONResultHandler.java b/src/test/java/org/jongo/util/JSONResultHandler.java\nindex 4408c3f..75be595 100644\n--- a/src/test/java/org/jongo/util/JSONResultHandler.java\n+++ b/src/test/java/org/jongo/util/JSONResultHandler.java\n@@ -17,11 +17,12 @@\n package org.jongo.util;\n \n import com.mongodb.DBObject;\n+import com.mongodb.util.JSONSerializers;\n import org.jongo.ResultHandler;\n \n public class JSONResultHandler implements ResultHandler<String> {\n     public String map(DBObject result) {\n-        return result.toString();\n+        return JSONSerializers.getStrict().serialize(result);\n     }\n \n \n"}
