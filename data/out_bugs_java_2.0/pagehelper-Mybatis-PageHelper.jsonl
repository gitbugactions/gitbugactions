{"repository": "pagehelper/Mybatis-PageHelper", "clone_url": "https://github.com/pagehelper/Mybatis-PageHelper.git", "timestamp": "2023-05-31T19:57:50.468896Z", "commit_hash": "43cf9d15375bfd88d5c39fbd80e215de1fc370ea", "commit_message": "BoundSqlInterceptorChain\u62e6\u622a\u5668index\u53c2\u6570bug, fixed #587\n", "related_issues": "", "bug_patch": "diff --git a/src/main/java/com/github/pagehelper/BoundSqlInterceptorChain.java b/src/main/java/com/github/pagehelper/BoundSqlInterceptorChain.java\nindex fba064a..abde737 100644\n--- a/src/main/java/com/github/pagehelper/BoundSqlInterceptorChain.java\n+++ b/src/main/java/com/github/pagehelper/BoundSqlInterceptorChain.java\n@@ -9,19 +9,29 @@ public class BoundSqlInterceptorChain implements BoundSqlInterceptor.Chain {\n     private final BoundSqlInterceptor.Chain original;\n     private final List<BoundSqlInterceptor> interceptors;\n \n-    private int index = 0;\n+    private int     index = 0;\n+    private boolean executable;\n \n     public BoundSqlInterceptorChain(BoundSqlInterceptor.Chain original, List<BoundSqlInterceptor> interceptors) {\n-        this.original = original;\n-        this.interceptors = interceptors;\n+        this(original, interceptors, false);\n     }\n \n-    public void reset() {\n-        this.index = 0;\n+    private BoundSqlInterceptorChain(BoundSqlInterceptor.Chain original, List<BoundSqlInterceptor> interceptors, boolean executable) {\n+        this.original = original;\n+        this.interceptors = interceptors;\n+        this.executable = executable;\n     }\n \n     @Override\n     public BoundSql doBoundSql(BoundSqlInterceptor.Type type, BoundSql boundSql, CacheKey cacheKey) {\n+        if(executable) {\n+            return _doBoundSql(type, boundSql, cacheKey);\n+        } else {\n+            return new BoundSqlInterceptorChain(original, interceptors, true).doBoundSql(type, boundSql, cacheKey);\n+        }\n+    }\n+\n+    private BoundSql _doBoundSql(BoundSqlInterceptor.Type type, BoundSql boundSql, CacheKey cacheKey) {\n         if (this.interceptors == null || this.interceptors.size() == this.index) {\n             return this.original != null ? this.original.doBoundSql(type, boundSql, cacheKey) : boundSql;\n         } else {\ndiff --git a/src/main/java/com/github/pagehelper/PageHelper.java b/src/main/java/com/github/pagehelper/PageHelper.java\nindex 8a64470..ea83e16 100644\n--- a/src/main/java/com/github/pagehelper/PageHelper.java\n+++ b/src/main/java/com/github/pagehelper/PageHelper.java\n@@ -144,8 +144,6 @@ public class PageHelper extends PageMethod implements Dialect, BoundSqlIntercept\n             if (localPage != null) {\n                 localPage.setChain(chain);\n             }\n-        } else if (chain instanceof BoundSqlInterceptorChain) {\n-            ((BoundSqlInterceptorChain) chain).reset();\n         }\n         return chain.doBoundSql(type, boundSql, cacheKey);\n     }\n", "test_patch": "diff --git a/src/test/java/com/github/pagehelper/test/basic/provider/TestProviderInteceptor.java b/src/test/java/com/github/pagehelper/test/basic/provider/TestProviderInteceptor.java\nindex 3d911c8..179220b 100644\n--- a/src/test/java/com/github/pagehelper/test/basic/provider/TestProviderInteceptor.java\n+++ b/src/test/java/com/github/pagehelper/test/basic/provider/TestProviderInteceptor.java\n@@ -35,6 +35,8 @@ import org.apache.ibatis.session.SqlSession;\n import org.junit.Assert;\n import org.junit.Test;\n \n+import java.util.Random;\n+\n import static org.junit.Assert.assertEquals;\n \n public class TestProviderInteceptor {\n@@ -42,21 +44,25 @@ public class TestProviderInteceptor {\n     @Test\n     public void testInterceptor() {\n         SqlSession sqlSession = MybatisInterceptorHelper.getSqlSession();\n-        UserMapper userMapper = sqlSession.getMapper(UserMapper.class);\n+        final UserMapper userMapper = sqlSession.getMapper(UserMapper.class);\n         try {\n             PageHelper.startPage(1, 10).boundSqlInterceptor(new BoundSqlInterceptor() {\n                 @Override\n                 public BoundSql boundSql(Type type, BoundSql boundSql, CacheKey cacheKey, Chain chain) {\n-                    System.out.println(\"before: \" + boundSql.getSql());\n+                    System.out.println(\"[\" + Thread.currentThread().getName() + \"] - before: \" + boundSql.getSql());\n                     BoundSql doBoundSql = chain.doBoundSql(type, boundSql, cacheKey);\n-                    System.out.println(\"after: \" + doBoundSql.getSql());\n+                    System.out.println(\"[\" + Thread.currentThread().getName() + \"] - after: \" + doBoundSql.getSql());\n                     if (type == Type.ORIGINAL) {\n                         Assert.assertTrue(doBoundSql.getSql().contains(TestBoundSqlInterceptor.COMMENT));\n                     }\n                     return doBoundSql;\n                 }\n             });\n-            String str = \"\u98de\";\n+            final String str = \"\u98de\";\n+            userMapper.selectSimple(str);\n+            assertEquals(new ProviderMethod().selectSimple(str), SqlCache.get());\n+            userMapper.selectSimple(str);\n+            assertEquals(new ProviderMethod().selectSimple(str), SqlCache.get());\n             userMapper.selectSimple(str);\n             assertEquals(new ProviderMethod().selectSimple(str), SqlCache.get());\n         } finally {\n@@ -65,4 +71,22 @@ public class TestProviderInteceptor {\n         }\n     }\n \n+    @Test\n+    public void testConcurrentExecution() throws InterruptedException {\n+        for (int i = 0; i < 10; i++) {\n+            new Thread(new Runnable() {\n+                @Override\n+                public void run() {\n+                    try {\n+                        Thread.sleep(100 * new Random().nextInt(10));\n+                        testInterceptor();\n+                    } catch (InterruptedException e) {\n+                        e.printStackTrace();\n+                    }\n+                }\n+            }).start();\n+        }\n+        Thread.currentThread().join(1500);\n+    }\n+\n }\n"}
{"repository": "pagehelper/Mybatis-PageHelper", "clone_url": "https://github.com/pagehelper/Mybatis-PageHelper.git", "timestamp": "2023-05-31T20:06:31.004291Z", "commit_hash": "cd51b08ff957625cf52fe87c1f58464466a9d4cb", "commit_message": "SQL\u62fc\u63a5\u4e2d\u589e\u52a0\u6362\u884c\uff0c\u907f\u514dSQL\u4e2d\u7684\u6ce8\u91ca\u5bfc\u81f4\u540e\u9762\u8ffd\u52a0\u90e8\u5206\u88ab\u6ce8\u91ca\u5f15\u8d77\u9519\u8bef\uff0cfixed #459\n", "related_issues": "", "bug_patch": "diff --git a/src/main/java/com/github/pagehelper/dialect/helper/Db2Dialect.java b/src/main/java/com/github/pagehelper/dialect/helper/Db2Dialect.java\nindex a7c2822..b0461b6 100644\n--- a/src/main/java/com/github/pagehelper/dialect/helper/Db2Dialect.java\n+++ b/src/main/java/com/github/pagehelper/dialect/helper/Db2Dialect.java\n@@ -52,9 +52,9 @@ public class Db2Dialect extends AbstractHelperDialect {\n     @Override\n     public String getPageSql(String sql, Page page, CacheKey pageKey) {\n         StringBuilder sqlBuilder = new StringBuilder(sql.length() + 140);\n-        sqlBuilder.append(\"SELECT * FROM (SELECT TMP_PAGE.*,ROWNUMBER() OVER() AS ROW_ID FROM ( \");\n+        sqlBuilder.append(\"SELECT * FROM (SELECT TMP_PAGE.*,ROWNUMBER() OVER() AS ROW_ID FROM ( \\n\");\n         sqlBuilder.append(sql);\n-        sqlBuilder.append(\" ) AS TMP_PAGE) TMP_PAGE WHERE ROW_ID BETWEEN ? AND ?\");\n+        sqlBuilder.append(\"\\n ) AS TMP_PAGE) TMP_PAGE WHERE ROW_ID BETWEEN ? AND ?\");\n         return sqlBuilder.toString();\n     }\n \ndiff --git a/src/main/java/com/github/pagehelper/dialect/helper/HerdDBDialect.java b/src/main/java/com/github/pagehelper/dialect/helper/HerdDBDialect.java\nindex 9b5cb01..d8fa480 100644\n--- a/src/main/java/com/github/pagehelper/dialect/helper/HerdDBDialect.java\n+++ b/src/main/java/com/github/pagehelper/dialect/helper/HerdDBDialect.java\n@@ -68,9 +68,9 @@ public class HerdDBDialect extends AbstractHelperDialect {\n         StringBuilder sqlBuilder = new StringBuilder(sql.length() + 14);\n         sqlBuilder.append(sql);\n         if (page.getStartRow() == 0) {\n-            sqlBuilder.append(\" LIMIT ? \");\n+            sqlBuilder.append(\"\\n LIMIT ? \");\n         } else {\n-            sqlBuilder.append(\" LIMIT ?, ? \");\n+            sqlBuilder.append(\"\\n LIMIT ?, ? \");\n         }\n         return sqlBuilder.toString();\n     }\ndiff --git a/src/main/java/com/github/pagehelper/dialect/helper/HsqldbDialect.java b/src/main/java/com/github/pagehelper/dialect/helper/HsqldbDialect.java\nindex e058868..230748b 100644\n--- a/src/main/java/com/github/pagehelper/dialect/helper/HsqldbDialect.java\n+++ b/src/main/java/com/github/pagehelper/dialect/helper/HsqldbDialect.java\n@@ -69,10 +69,10 @@ public class HsqldbDialect extends AbstractHelperDialect {\n         StringBuilder sqlBuilder = new StringBuilder(sql.length() + 20);\n         sqlBuilder.append(sql);\n         if (page.getPageSize() > 0) {\n-            sqlBuilder.append(\" LIMIT ? \");\n+            sqlBuilder.append(\"\\n LIMIT ? \");\n         }\n         if (page.getStartRow() > 0) {\n-            sqlBuilder.append(\" OFFSET ? \");\n+            sqlBuilder.append(\"\\n OFFSET ? \");\n         }\n         return sqlBuilder.toString();\n     }\ndiff --git a/src/main/java/com/github/pagehelper/dialect/helper/InformixDialect.java b/src/main/java/com/github/pagehelper/dialect/helper/InformixDialect.java\nindex f9e8af2..46efb73 100644\n--- a/src/main/java/com/github/pagehelper/dialect/helper/InformixDialect.java\n+++ b/src/main/java/com/github/pagehelper/dialect/helper/InformixDialect.java\n@@ -75,9 +75,9 @@ public class InformixDialect extends AbstractHelperDialect {\n         if (page.getPageSize() > 0) {\n             sqlBuilder.append(\" FIRST ? \");\n         }\n-        sqlBuilder.append(\" * FROM ( \");\n+        sqlBuilder.append(\" * FROM ( \\n\");\n         sqlBuilder.append(sql);\n-        sqlBuilder.append(\" ) TEMP_T \");\n+        sqlBuilder.append(\"\\n ) TEMP_T \");\n         return sqlBuilder.toString();\n     }\n \ndiff --git a/src/main/java/com/github/pagehelper/dialect/helper/MySqlDialect.java b/src/main/java/com/github/pagehelper/dialect/helper/MySqlDialect.java\nindex 3395c93..84cc393 100644\n--- a/src/main/java/com/github/pagehelper/dialect/helper/MySqlDialect.java\n+++ b/src/main/java/com/github/pagehelper/dialect/helper/MySqlDialect.java\n@@ -69,9 +69,9 @@ public class MySqlDialect extends AbstractHelperDialect {\n         StringBuilder sqlBuilder = new StringBuilder(sql.length() + 14);\n         sqlBuilder.append(sql);\n         if (page.getStartRow() == 0) {\n-            sqlBuilder.append(\" LIMIT ? \");\n+            sqlBuilder.append(\"\\n LIMIT ? \");\n         } else {\n-            sqlBuilder.append(\" LIMIT ?, ? \");\n+            sqlBuilder.append(\"\\n LIMIT ?, ? \");\n         }\n         return sqlBuilder.toString();\n     }\ndiff --git a/src/main/java/com/github/pagehelper/dialect/helper/Oracle9iDialect.java b/src/main/java/com/github/pagehelper/dialect/helper/Oracle9iDialect.java\nindex 122d466..f89aafa 100644\n--- a/src/main/java/com/github/pagehelper/dialect/helper/Oracle9iDialect.java\n+++ b/src/main/java/com/github/pagehelper/dialect/helper/Oracle9iDialect.java\n@@ -58,9 +58,9 @@ public class Oracle9iDialect extends AbstractHelperDialect {\n     public String getPageSql(String sql, Page page, CacheKey pageKey) {\n         StringBuilder sqlBuilder = new StringBuilder(sql.length() + 120);\n         sqlBuilder.append(\"SELECT * FROM ( \");\n-        sqlBuilder.append(\" SELECT TMP_PAGE.*, ROWNUM ROW_ID FROM ( \");\n+        sqlBuilder.append(\" SELECT TMP_PAGE.*, ROWNUM ROW_ID FROM ( \\n\");\n         sqlBuilder.append(sql);\n-        sqlBuilder.append(\" ) TMP_PAGE WHERE ROWNUM <= ? \");\n+        sqlBuilder.append(\"\\n ) TMP_PAGE WHERE ROWNUM <= ? \");\n         sqlBuilder.append(\" ) WHERE ROW_ID > ? \");\n         return sqlBuilder.toString();\n     }\ndiff --git a/src/main/java/com/github/pagehelper/dialect/helper/OracleDialect.java b/src/main/java/com/github/pagehelper/dialect/helper/OracleDialect.java\nindex 7b2efc5..e76f5d1 100644\n--- a/src/main/java/com/github/pagehelper/dialect/helper/OracleDialect.java\n+++ b/src/main/java/com/github/pagehelper/dialect/helper/OracleDialect.java\n@@ -53,9 +53,9 @@ public class OracleDialect extends AbstractHelperDialect {\n     public String getPageSql(String sql, Page page, CacheKey pageKey) {\n         StringBuilder sqlBuilder = new StringBuilder(sql.length() + 120);\n         sqlBuilder.append(\"SELECT * FROM ( \");\n-        sqlBuilder.append(\" SELECT TMP_PAGE.*, ROWNUM ROW_ID FROM ( \");\n+        sqlBuilder.append(\" SELECT TMP_PAGE.*, ROWNUM ROW_ID FROM ( \\n\");\n         sqlBuilder.append(sql);\n-        sqlBuilder.append(\" ) TMP_PAGE)\");\n+        sqlBuilder.append(\"\\n ) TMP_PAGE)\");\n         sqlBuilder.append(\" WHERE ROW_ID <= ? AND ROW_ID > ?\");\n         return sqlBuilder.toString();\n     }\ndiff --git a/src/main/java/com/github/pagehelper/dialect/helper/SqlServer2012Dialect.java b/src/main/java/com/github/pagehelper/dialect/helper/SqlServer2012Dialect.java\nindex 66ae085..72a2d37 100644\n--- a/src/main/java/com/github/pagehelper/dialect/helper/SqlServer2012Dialect.java\n+++ b/src/main/java/com/github/pagehelper/dialect/helper/SqlServer2012Dialect.java\n@@ -52,7 +52,7 @@ public class SqlServer2012Dialect extends SqlServerDialect {\n     public String getPageSql(String sql, Page page, CacheKey pageKey) {\n         StringBuilder sqlBuilder = new StringBuilder(sql.length() + 64);\n         sqlBuilder.append(sql);\n-        sqlBuilder.append(\" OFFSET ? ROWS FETCH NEXT ? ROWS ONLY \");\n+        sqlBuilder.append(\"\\n OFFSET ? ROWS FETCH NEXT ? ROWS ONLY \");\n         pageKey.update(page.getPageSize());\n         return sqlBuilder.toString();\n     }\ndiff --git a/src/main/java/com/github/pagehelper/dialect/rowbounds/Db2RowBoundsDialect.java b/src/main/java/com/github/pagehelper/dialect/rowbounds/Db2RowBoundsDialect.java\nindex bf7ee22..bba0b0f 100644\n--- a/src/main/java/com/github/pagehelper/dialect/rowbounds/Db2RowBoundsDialect.java\n+++ b/src/main/java/com/github/pagehelper/dialect/rowbounds/Db2RowBoundsDialect.java\n@@ -40,9 +40,9 @@ public class Db2RowBoundsDialect extends AbstractRowBoundsDialect {\n         int startRow = rowBounds.getOffset() + 1;\n         int endRow = rowBounds.getOffset() + rowBounds.getLimit();\n         StringBuilder sqlBuilder = new StringBuilder(sql.length() + 120);\n-        sqlBuilder.append(\"SELECT * FROM (SELECT TMP_PAGE.*,ROWNUMBER() OVER() AS ROW_ID FROM ( \");\n+        sqlBuilder.append(\"SELECT * FROM (SELECT TMP_PAGE.*,ROWNUMBER() OVER() AS ROW_ID FROM ( \\n\");\n         sqlBuilder.append(sql);\n-        sqlBuilder.append(\" ) AS TMP_PAGE) TMP_PAGE WHERE ROW_ID BETWEEN \");\n+        sqlBuilder.append(\"\\n ) AS TMP_PAGE) TMP_PAGE WHERE ROW_ID BETWEEN \");\n         sqlBuilder.append(startRow);\n         sqlBuilder.append(\" AND \");\n         sqlBuilder.append(endRow);\ndiff --git a/src/main/java/com/github/pagehelper/dialect/rowbounds/HerdDBRowBoundsDialect.java b/src/main/java/com/github/pagehelper/dialect/rowbounds/HerdDBRowBoundsDialect.java\nindex fd704b3..238f58b 100644\n--- a/src/main/java/com/github/pagehelper/dialect/rowbounds/HerdDBRowBoundsDialect.java\n+++ b/src/main/java/com/github/pagehelper/dialect/rowbounds/HerdDBRowBoundsDialect.java\n@@ -40,10 +40,10 @@ public class HerdDBRowBoundsDialect extends AbstractRowBoundsDialect {\n         StringBuilder sqlBuilder = new StringBuilder(sql.length() + 14);\n         sqlBuilder.append(sql);\n         if (rowBounds.getOffset() == 0) {\n-            sqlBuilder.append(\" LIMIT \");\n+            sqlBuilder.append(\"\\n LIMIT \");\n             sqlBuilder.append(rowBounds.getLimit());\n         } else {\n-            sqlBuilder.append(\" LIMIT \");\n+            sqlBuilder.append(\"\\n LIMIT \");\n             sqlBuilder.append(rowBounds.getOffset());\n             sqlBuilder.append(\",\");\n             sqlBuilder.append(rowBounds.getLimit());\ndiff --git a/src/main/java/com/github/pagehelper/dialect/rowbounds/HsqldbRowBoundsDialect.java b/src/main/java/com/github/pagehelper/dialect/rowbounds/HsqldbRowBoundsDialect.java\nindex 8322498..43d2857 100644\n--- a/src/main/java/com/github/pagehelper/dialect/rowbounds/HsqldbRowBoundsDialect.java\n+++ b/src/main/java/com/github/pagehelper/dialect/rowbounds/HsqldbRowBoundsDialect.java\n@@ -40,12 +40,12 @@ public class HsqldbRowBoundsDialect extends AbstractRowBoundsDialect {\n         StringBuilder sqlBuilder = new StringBuilder(sql.length() + 20);\n         sqlBuilder.append(sql);\n         if (rowBounds.getLimit() > 0) {\n-            sqlBuilder.append(\" LIMIT \");\n+            sqlBuilder.append(\"\\n LIMIT \");\n             sqlBuilder.append(rowBounds.getLimit());\n             pageKey.update(rowBounds.getLimit());\n         }\n         if (rowBounds.getOffset() > 0) {\n-            sqlBuilder.append(\" OFFSET \");\n+            sqlBuilder.append(\"\\n OFFSET \");\n             sqlBuilder.append(rowBounds.getOffset());\n             pageKey.update(rowBounds.getOffset());\n         }\ndiff --git a/src/main/java/com/github/pagehelper/dialect/rowbounds/InformixRowBoundsDialect.java b/src/main/java/com/github/pagehelper/dialect/rowbounds/InformixRowBoundsDialect.java\nindex e8bc5e2..faf26cf 100644\n--- a/src/main/java/com/github/pagehelper/dialect/rowbounds/InformixRowBoundsDialect.java\n+++ b/src/main/java/com/github/pagehelper/dialect/rowbounds/InformixRowBoundsDialect.java\n@@ -49,9 +49,9 @@ public class InformixRowBoundsDialect extends AbstractRowBoundsDialect {\n             sqlBuilder.append(rowBounds.getLimit());\n             pageKey.update(rowBounds.getLimit());\n         }\n-        sqlBuilder.append(\" * FROM ( \");\n+        sqlBuilder.append(\" * FROM ( \\n\");\n         sqlBuilder.append(sql);\n-        sqlBuilder.append(\" ) TEMP_T\");\n+        sqlBuilder.append(\"\\n ) TEMP_T\");\n         return sqlBuilder.toString();\n     }\n \ndiff --git a/src/main/java/com/github/pagehelper/dialect/rowbounds/MySqlRowBoundsDialect.java b/src/main/java/com/github/pagehelper/dialect/rowbounds/MySqlRowBoundsDialect.java\nindex 9f183c3..6613666 100644\n--- a/src/main/java/com/github/pagehelper/dialect/rowbounds/MySqlRowBoundsDialect.java\n+++ b/src/main/java/com/github/pagehelper/dialect/rowbounds/MySqlRowBoundsDialect.java\n@@ -40,10 +40,10 @@ public class MySqlRowBoundsDialect extends AbstractRowBoundsDialect {\n         StringBuilder sqlBuilder = new StringBuilder(sql.length() + 14);\n         sqlBuilder.append(sql);\n         if (rowBounds.getOffset() == 0) {\n-            sqlBuilder.append(\" LIMIT \");\n+            sqlBuilder.append(\"\\n LIMIT \");\n             sqlBuilder.append(rowBounds.getLimit());\n         } else {\n-            sqlBuilder.append(\" LIMIT \");\n+            sqlBuilder.append(\"\\n LIMIT \");\n             sqlBuilder.append(rowBounds.getOffset());\n             sqlBuilder.append(\",\");\n             sqlBuilder.append(rowBounds.getLimit());\ndiff --git a/src/main/java/com/github/pagehelper/dialect/rowbounds/OracleRowBoundsDialect.java b/src/main/java/com/github/pagehelper/dialect/rowbounds/OracleRowBoundsDialect.java\nindex d00c8f8..78cd35b 100644\n--- a/src/main/java/com/github/pagehelper/dialect/rowbounds/OracleRowBoundsDialect.java\n+++ b/src/main/java/com/github/pagehelper/dialect/rowbounds/OracleRowBoundsDialect.java\n@@ -46,7 +46,9 @@ public class OracleRowBoundsDialect extends AbstractRowBoundsDialect {\n         if (endRow > 0) {\n             sqlBuilder.append(\" SELECT TMP_PAGE.*, ROWNUM ROW_ID FROM ( \");\n         }\n+        sqlBuilder.append(\"\\n\");\n         sqlBuilder.append(sql);\n+        sqlBuilder.append(\"\\n\");\n         if (endRow > 0) {\n             sqlBuilder.append(\" ) TMP_PAGE WHERE ROWNUM <= \");\n             sqlBuilder.append(endRow);\ndiff --git a/src/main/java/com/github/pagehelper/dialect/rowbounds/SqlServer2012RowBoundsDialect.java b/src/main/java/com/github/pagehelper/dialect/rowbounds/SqlServer2012RowBoundsDialect.java\nindex 9a2eb9d..00b346c 100644\n--- a/src/main/java/com/github/pagehelper/dialect/rowbounds/SqlServer2012RowBoundsDialect.java\n+++ b/src/main/java/com/github/pagehelper/dialect/rowbounds/SqlServer2012RowBoundsDialect.java\n@@ -38,7 +38,7 @@ public class SqlServer2012RowBoundsDialect extends SqlServerRowBoundsDialect {\n     public String getPageSql(String sql, RowBounds rowBounds, CacheKey pageKey) {\n         StringBuilder sqlBuilder = new StringBuilder(sql.length() + 14);\n         sqlBuilder.append(sql);\n-        sqlBuilder.append(\" OFFSET \");\n+        sqlBuilder.append(\"\\n OFFSET \");\n         sqlBuilder.append(rowBounds.getOffset());\n         sqlBuilder.append(\" ROWS \");\n         pageKey.update(rowBounds.getOffset());\ndiff --git a/src/main/java/com/github/pagehelper/parser/CountSqlParser.java b/src/main/java/com/github/pagehelper/parser/CountSqlParser.java\nindex 3bcb8fb..e80e999 100644\n--- a/src/main/java/com/github/pagehelper/parser/CountSqlParser.java\n+++ b/src/main/java/com/github/pagehelper/parser/CountSqlParser.java\n@@ -219,9 +219,9 @@ public class CountSqlParser {\n         StringBuilder stringBuilder = new StringBuilder(sql.length() + 40);\n         stringBuilder.append(\"select count(\");\n         stringBuilder.append(name);\n-        stringBuilder.append(\") from (\");\n+        stringBuilder.append(\") from ( \\n\");\n         stringBuilder.append(sql);\n-        stringBuilder.append(\") tmp_count\");\n+        stringBuilder.append(\"\\n ) tmp_count\");\n         return stringBuilder.toString();\n     }\n \n", "test_patch": "diff --git a/src/test/resources/com/github/pagehelper/mapper/UserMapper.xml b/src/test/resources/com/github/pagehelper/mapper/UserMapper.xml\nindex 52936db..55c8d11 100644\n--- a/src/test/resources/com/github/pagehelper/mapper/UserMapper.xml\n+++ b/src/test/resources/com/github/pagehelper/mapper/UserMapper.xml\n@@ -30,14 +30,14 @@\n <mapper namespace=\"com.github.pagehelper.mapper.UserMapper\">\n     <cache/>\n     <select id=\"selectAll\" resultType=\"User\">\n-        select * from user order by id\n+        select * from user order by id -- comment\n     </select>\n     <select id=\"selectAll_TESTCOUNT\" resultType=\"Long\">\n         select count(distinct id) from user\n     </select>\n \n     <select id=\"selectGreterThanId\" resultType=\"User\">\n-        select * from user where id &gt;#{id} order by id\n+        select * from user where id &gt;#{id} order by id -- comment\n     </select>\n     <select id=\"selectGreterThanId_TESTCOUNT\" resultType=\"Long\">\n         select count(distinct id) from user where id &gt;#{id}\n"}
{"repository": "pagehelper/Mybatis-PageHelper", "clone_url": "https://github.com/pagehelper/Mybatis-PageHelper.git", "timestamp": "2023-05-31T20:20:45.834466Z", "commit_hash": "3e5bdcc68bbd6d8b6285054d1352f06c062b54ba", "commit_message": "\u89e3\u51b3 pageSizeZero \u529f\u80fd\u4e0d\u5b8c\u6574\u7684BUG\uff0cfixed #506\n", "related_issues": "", "bug_patch": "diff --git a/src/main/java/com/github/pagehelper/Page.java b/src/main/java/com/github/pagehelper/Page.java\nindex f996014..89e1686 100644\n--- a/src/main/java/com/github/pagehelper/Page.java\n+++ b/src/main/java/com/github/pagehelper/Page.java\n@@ -227,7 +227,7 @@ public class Page<E> extends ArrayList<E> implements Closeable {\n     }\n \n     public Page<E> setPageSizeZero(Boolean pageSizeZero) {\n-        if (pageSizeZero != null) {\n+        if (this.pageSizeZero == null && pageSizeZero != null) {\n             this.pageSizeZero = pageSizeZero;\n         }\n         return this;\ndiff --git a/src/main/java/com/github/pagehelper/dialect/AbstractHelperDialect.java b/src/main/java/com/github/pagehelper/dialect/AbstractHelperDialect.java\nindex b3c5c38..037b574 100644\n--- a/src/main/java/com/github/pagehelper/dialect/AbstractHelperDialect.java\n+++ b/src/main/java/com/github/pagehelper/dialect/AbstractHelperDialect.java\n@@ -89,8 +89,15 @@ public abstract class AbstractHelperDialect extends AbstractDialect implements C\n         }\n         //pageSize < 0 \u7684\u65f6\u5019\uff0c\u4e0d\u6267\u884c\u5206\u9875\u67e5\u8be2\n         //pageSize = 0 \u7684\u65f6\u5019\uff0c\u8fd8\u9700\u8981\u6267\u884c\u540e\u7eed\u67e5\u8be2\uff0c\u4f46\u662f\u4e0d\u4f1a\u5206\u9875\n-        if (page.getPageSize() < 0) {\n-            return false;\n+        if (page.getPageSizeZero() != null) {\n+            //PageSizeZero=false&&pageSize<=0\n+            if (!page.getPageSizeZero() && page.getPageSize() <= 0) {\n+                return false;\n+            }\n+            //PageSizeZero=true&&pageSize<0 \u8fd4\u56de false\uff0c\u53ea\u6709>=0\u624d\u9700\u8981\u6267\u884c\u540e\u7eed\u7684\n+            else if (page.getPageSizeZero() && page.getPageSize() < 0) {\n+                return false;\n+            }\n         }\n         return page.getPageNum() > 0 && (count > ((page.getPageNum() - 1) * page.getPageSize()));\n     }\n", "test_patch": "diff --git a/src/test/java/com/github/pagehelper/test/pagesize/PageSizeLessThenOrEqualZeroTest.java b/src/test/java/com/github/pagehelper/test/pagesize/PageSizeLessThenOrEqualZeroTest.java\nindex 34e17af..6058b59 100644\n--- a/src/test/java/com/github/pagehelper/test/pagesize/PageSizeLessThenOrEqualZeroTest.java\n+++ b/src/test/java/com/github/pagehelper/test/pagesize/PageSizeLessThenOrEqualZeroTest.java\n@@ -51,7 +51,7 @@ public class PageSizeLessThenOrEqualZeroTest {\n             PageHelper.startPage(1, 0);\n             List<User> list = userMapper.selectAll();\n             PageInfo<User> page = new PageInfo<User>(list);\n-            assertEquals(183, list.size());\n+            assertEquals(0, list.size());\n             assertEquals(183, page.getTotal());\n \n             //limit<0\u7684\u65f6\u5019\u540c\u4e0a\ndiff --git a/src/test/java/com/github/pagehelper/test/reasonable/PageTest.java b/src/test/java/com/github/pagehelper/test/reasonable/PageTest.java\nindex 9f9c016..5801a88 100644\n--- a/src/test/java/com/github/pagehelper/test/reasonable/PageTest.java\n+++ b/src/test/java/com/github/pagehelper/test/reasonable/PageTest.java\n@@ -139,5 +139,58 @@ public class PageTest {\n         }\n     }\n \n+    @Test\n+    public void testMapperWithStartPageAndPageSizeZeroFalse() {\n+        SqlSession sqlSession = MybatisReasonableHelper.getSqlSession();\n+        UserMapper userMapper = sqlSession.getMapper(UserMapper.class);\n+        try {\n+            //\u83b7\u53d6\u7b2c20\u9875\uff0c2\u6761\u5185\u5bb9\n+            //\u5206\u9875\u63d2\u4ef6\u4f1a\u81ea\u52a8\u6539\u4e3a\u67e5\u8be2\u6700\u540e\u4e00\u9875\n+            PageHelper.startPage(1, 0, true, true, false);\n+            List<User> list = userMapper.selectAll();\n+            PageInfo<User> page = new PageInfo<User>(list);\n+            assertEquals(0, list.size());\n+            assertEquals(0, page.getStartRow());\n+            assertEquals(1, page.getPageNum());\n+            assertEquals(183, page.getTotal());\n+\n+            PageHelper.startPage(1, Integer.MAX_VALUE, true, true, false);\n+            list = userMapper.selectAll();\n+            page = new PageInfo<User>(list);\n+            assertEquals(183, list.size());\n+            assertEquals(1, page.getStartRow());\n+            assertEquals(1, page.getPageNum());\n+            assertEquals(183, page.getTotal());\n+        } finally {\n+            sqlSession.close();\n+        }\n+    }\n+\n+    @Test\n+    public void testMapperWithStartPageAndPageSizeZeroTrue() {\n+        SqlSession sqlSession = MybatisReasonableHelper.getSqlSession();\n+        UserMapper userMapper = sqlSession.getMapper(UserMapper.class);\n+        try {\n+            //\u83b7\u53d6\u7b2c20\u9875\uff0c2\u6761\u5185\u5bb9\n+            //\u5206\u9875\u63d2\u4ef6\u4f1a\u81ea\u52a8\u6539\u4e3a\u67e5\u8be2\u6700\u540e\u4e00\u9875\n+            PageHelper.startPage(1, 0, true, true, true);\n+            List<User> list = userMapper.selectAll();\n+            PageInfo<User> page = new PageInfo<User>(list);\n+            assertEquals(183, list.size());\n+            assertEquals(1, page.getStartRow());\n+            assertEquals(1, page.getPageNum());\n+            assertEquals(183, page.getTotal());\n+\n+            PageHelper.startPage(1, -1, true, true, true);\n+            list = userMapper.selectAll();\n+            page = new PageInfo<User>(list);\n+            assertEquals(0, list.size());\n+            assertEquals(0, page.getStartRow());\n+            assertEquals(1, page.getPageNum());\n+            assertEquals(183, page.getTotal());\n+        } finally {\n+            sqlSession.close();\n+        }\n+    }\n \n }\n"}
{"repository": "pagehelper/Mybatis-PageHelper", "clone_url": "https://github.com/pagehelper/Mybatis-PageHelper.git", "timestamp": "2023-05-31T20:26:37.550519Z", "commit_hash": "a93195e1c0833d5014aa59d0584dbf15c40eabae", "commit_message": "\u89e3\u51b3 reasonable \u65f6\uff0cpageNum < 0 \u65f6\u65e0\u6548\u7684 BUG, fixed #498\n", "related_issues": "", "bug_patch": "diff --git a/src/main/java/com/github/pagehelper/PageInterceptor.java b/src/main/java/com/github/pagehelper/PageInterceptor.java\nindex 41e5af5..6c80684 100644\n--- a/src/main/java/com/github/pagehelper/PageInterceptor.java\n+++ b/src/main/java/com/github/pagehelper/PageInterceptor.java\n@@ -94,7 +94,7 @@ public class PageInterceptor implements Interceptor {\n                 //\u5224\u65ad\u662f\u5426\u9700\u8981\u8fdb\u884c count \u67e5\u8be2\n                 if (dialect.beforeCount(ms, parameter, rowBounds)) {\n                     //\u67e5\u8be2\u603b\u6570\n-                    Long count = count(executor, ms, parameter, rowBounds, resultHandler, boundSql);\n+                    Long count = count(executor, ms, parameter, rowBounds, null, boundSql);\n                     //\u5904\u7406\u67e5\u8be2\u603b\u6570\uff0c\u8fd4\u56de true \u65f6\u7ee7\u7eed\u5206\u9875\u67e5\u8be2\uff0cfalse \u65f6\u76f4\u63a5\u8fd4\u56de\n                     if (!dialect.afterCount(count, parameter, rowBounds)) {\n                         //\u5f53\u67e5\u8be2\u603b\u6570\u4e3a 0 \u65f6\uff0c\u76f4\u63a5\u8fd4\u56de\u7a7a\u7684\u7ed3\u679c\n@@ -138,7 +138,7 @@ public class PageInterceptor implements Interceptor {\n         //\u5148\u5224\u65ad\u662f\u5426\u5b58\u5728\u624b\u5199\u7684 count \u67e5\u8be2\n         MappedStatement countMs = ExecutorUtil.getExistedMappedStatement(ms.getConfiguration(), countMsId);\n         if (countMs != null) {\n-            count = ExecutorUtil.executeManualCount(executor, countMs, parameter, boundSql, null);\n+            count = ExecutorUtil.executeManualCount(executor, countMs, parameter, boundSql, resultHandler);\n         } else {\n             countMs = msCountMap.get(countMsId);\n             //\u81ea\u52a8\u521b\u5efa\ndiff --git a/src/main/java/com/github/pagehelper/dialect/AbstractHelperDialect.java b/src/main/java/com/github/pagehelper/dialect/AbstractHelperDialect.java\nindex ce757ba..b3c5c38 100644\n--- a/src/main/java/com/github/pagehelper/dialect/AbstractHelperDialect.java\n+++ b/src/main/java/com/github/pagehelper/dialect/AbstractHelperDialect.java\n@@ -92,7 +92,7 @@ public abstract class AbstractHelperDialect extends AbstractDialect implements C\n         if (page.getPageSize() < 0) {\n             return false;\n         }\n-        return count > ((page.getPageNum() - 1) * page.getPageSize());\n+        return page.getPageNum() > 0 && (count > ((page.getPageNum() - 1) * page.getPageSize()));\n     }\n \n     @Override\n", "test_patch": "diff --git a/src/test/java/com/github/pagehelper/test/reasonable/PageTest.java b/src/test/java/com/github/pagehelper/test/reasonable/PageTest.java\nindex 8069340..9f9c016 100644\n--- a/src/test/java/com/github/pagehelper/test/reasonable/PageTest.java\n+++ b/src/test/java/com/github/pagehelper/test/reasonable/PageTest.java\n@@ -68,4 +68,76 @@ public class PageTest {\n             sqlSession.close();\n         }\n     }\n+\n+    @Test\n+    public void testMapperWithStartPageAndReasonableFalse() {\n+        SqlSession sqlSession = MybatisReasonableHelper.getSqlSession();\n+        UserMapper userMapper = sqlSession.getMapper(UserMapper.class);\n+        try {\n+            //\u83b7\u53d6\u7b2c20\u9875\uff0c2\u6761\u5185\u5bb9\n+            //\u5206\u9875\u63d2\u4ef6\u4f1a\u81ea\u52a8\u6539\u4e3a\u67e5\u8be2\u6700\u540e\u4e00\u9875\n+            PageHelper.startPage(20, 50, true, false, false);\n+            List<User> list = userMapper.selectAll();\n+            PageInfo<User> page = new PageInfo<User>(list);\n+            assertEquals(0, list.size());\n+            assertEquals(0, page.getStartRow());\n+            assertEquals(20, page.getPageNum());\n+            assertEquals(183, page.getTotal());\n+\n+            PageHelper.startPage(4, 50, true, false, false);\n+            list = userMapper.selectAll();\n+            page = new PageInfo<User>(list);\n+            assertEquals(33, list.size());\n+            assertEquals(151, page.getStartRow());\n+            assertEquals(4, page.getPageNum());\n+            assertEquals(183, page.getTotal());\n+\n+            PageHelper.startPage(-1, 50, true, false, false);\n+            list = userMapper.selectAll();\n+            page = new PageInfo<User>(list);\n+            assertEquals(0, list.size());\n+            assertEquals(0, page.getStartRow());\n+            assertEquals(-1, page.getPageNum());\n+            assertEquals(183, page.getTotal());\n+        } finally {\n+            sqlSession.close();\n+        }\n+    }\n+\n+    @Test\n+    public void testMapperWithStartPageAndReasonableTrue() {\n+        SqlSession sqlSession = MybatisReasonableHelper.getSqlSession();\n+        UserMapper userMapper = sqlSession.getMapper(UserMapper.class);\n+        try {\n+            //\u83b7\u53d6\u7b2c20\u9875\uff0c2\u6761\u5185\u5bb9\n+            //\u5206\u9875\u63d2\u4ef6\u4f1a\u81ea\u52a8\u6539\u4e3a\u67e5\u8be2\u6700\u540e\u4e00\u9875\n+            PageHelper.startPage(20, 50, true, true, false);\n+            List<User> list = userMapper.selectAll();\n+            PageInfo<User> page = new PageInfo<User>(list);\n+            assertEquals(33, list.size());\n+            assertEquals(151, page.getStartRow());\n+            assertEquals(4, page.getPageNum());\n+            assertEquals(183, page.getTotal());\n+\n+            PageHelper.startPage(4, 50, true, true, false);\n+            list = userMapper.selectAll();\n+            page = new PageInfo<User>(list);\n+            assertEquals(33, list.size());\n+            assertEquals(151, page.getStartRow());\n+            assertEquals(4, page.getPageNum());\n+            assertEquals(183, page.getTotal());\n+\n+            PageHelper.startPage(-1, 50, true, true, false);\n+            list = userMapper.selectAll();\n+            page = new PageInfo<User>(list);\n+            assertEquals(50, list.size());\n+            assertEquals(1, page.getStartRow());\n+            assertEquals(1, page.getPageNum());\n+            assertEquals(183, page.getTotal());\n+        } finally {\n+            sqlSession.close();\n+        }\n+    }\n+\n+\n }\n"}
{"repository": "pagehelper/Mybatis-PageHelper", "clone_url": "https://github.com/pagehelper/Mybatis-PageHelper.git", "timestamp": "2023-05-31T20:34:11.535014Z", "commit_hash": "2b50dac36f595d61dd9a52457de6a7c2270996e8", "commit_message": "\u89e3\u51b3\u5355\u72ec orderBy \u65f6\u7684bug fixed #110\u3002\n", "related_issues": "", "bug_patch": "diff --git a/src/main/java/com/github/pagehelper/dialect/AbstractHelperDialect.java b/src/main/java/com/github/pagehelper/dialect/AbstractHelperDialect.java\nindex e2a402f..41e7507 100644\n--- a/src/main/java/com/github/pagehelper/dialect/AbstractHelperDialect.java\n+++ b/src/main/java/com/github/pagehelper/dialect/AbstractHelperDialect.java\n@@ -70,7 +70,7 @@ public abstract class AbstractHelperDialect extends AbstractDialect implements C\n     @Override\n     public boolean beforeCount(MappedStatement ms, Object parameterObject, RowBounds rowBounds) {\n         Page page = getLocalPage();\n-        return page.isCount();\n+        return !page.isOrderByOnly() && page.isCount();\n     }\n \n     @Override\n@@ -159,7 +159,7 @@ public abstract class AbstractHelperDialect extends AbstractDialect implements C\n     @Override\n     public boolean beforePage(MappedStatement ms, Object parameterObject, RowBounds rowBounds) {\n         Page page = getLocalPage();\n-        if (page.getPageSize() > 0) {\n+        if (page.isOrderByOnly() || page.getPageSize() > 0) {\n             return true;\n         }\n         return false;\n@@ -202,6 +202,8 @@ public abstract class AbstractHelperDialect extends AbstractDialect implements C\n             page.setTotal(-1);\n         } else if ((page.getPageSizeZero() != null && page.getPageSizeZero()) && page.getPageSize() == 0) {\n             page.setTotal(pageList.size());\n+        } else if(page.isOrderByOnly()){\n+            page.setTotal(pageList.size());\n         }\n         return page;\n     }\n", "test_patch": "diff --git a/src/test/java/com/github/pagehelper/test/basic/TestLike.java b/src/test/java/com/github/pagehelper/test/basic/TestLike.java\nindex d09cca0..68e09cf 100644\n--- a/src/test/java/com/github/pagehelper/test/basic/TestLike.java\n+++ b/src/test/java/com/github/pagehelper/test/basic/TestLike.java\n@@ -79,7 +79,7 @@ public class TestLike {\n             Country country = new Country();\n             country.setCountryname(\"c\");\n             List<Country> list = countryMapper.selectLike(country);\n-            assertEquals(30, list.get(0).getId());\n+            assertEquals(174, list.get(0).getId());\n             assertEquals(39, list.size());\n             assertEquals(39, ((Page<?>) list).getTotal());\n         } finally {\n"}
