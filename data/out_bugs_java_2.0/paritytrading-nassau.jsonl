{"repository": "paritytrading/nassau", "clone_url": "https://github.com/paritytrading/nassau.git", "timestamp": "2023-05-31T20:20:10.242492Z", "commit_hash": "3b0550d23c832f9186dccff6dee2d46f1b75538b", "commit_message": "Merge pull request #15 from jvirtanen/fixes/moldudp64-requested-message-count\n\nFix MoldUDP64 requested message count", "related_issues": "", "bug_patch": "diff --git a/src/main/java/org/jvirtanen/nassau/moldudp64/MoldUDP64Client.java b/src/main/java/org/jvirtanen/nassau/moldudp64/MoldUDP64Client.java\nindex 56009a4..3be6abd 100644\n--- a/src/main/java/org/jvirtanen/nassau/moldudp64/MoldUDP64Client.java\n+++ b/src/main/java/org/jvirtanen/nassau/moldudp64/MoldUDP64Client.java\n@@ -32,9 +32,17 @@ public class MoldUDP64Client implements Closeable {\n \n     private byte[] session;\n \n+    /*\n+     * The next expected sequence number by the MoldUDP64 client. This is one\n+     * higher than the highest handled sequence number.\n+     */\n     private long nextExpectedSequenceNumber;\n \n-    private long highestReceivedSequenceNumber;\n+    /*\n+     * The next estimated sequence number from the MoldUDP64 server. This is\n+     * one higher than the highest received sequence number.\n+     */\n+    private long nextEstimatedSequenceNumber;\n \n     private MoldUDP64ClientState state;\n \n@@ -64,7 +72,7 @@ public class MoldUDP64Client implements Closeable {\n \n         this.nextExpectedSequenceNumber = 1;\n \n-        this.highestReceivedSequenceNumber = 0;\n+        this.nextEstimatedSequenceNumber = 1;\n \n         this.state = UNKNOWN;\n     }\n@@ -116,12 +124,12 @@ public class MoldUDP64Client implements Closeable {\n \n         long sequenceNumber     = rxBuffer.getLong();\n         int  messageCount       = getUnsignedShort(rxBuffer);\n-        long lastSequenceNumber = sequenceNumber + messageCount;\n+        long nextSequenceNumber = sequenceNumber + messageCount;\n \n-        highestReceivedSequenceNumber = Math.max(highestReceivedSequenceNumber, lastSequenceNumber);\n+        nextEstimatedSequenceNumber = Math.max(nextEstimatedSequenceNumber, nextSequenceNumber);\n \n         if (sequenceNumber > nextExpectedSequenceNumber) {\n-            int requestedMessageCount = (int)Math.min(sequenceNumber - nextExpectedSequenceNumber + 1,\n+            int requestedMessageCount = (int)Math.min(nextEstimatedSequenceNumber - nextExpectedSequenceNumber,\n                     MAX_MESSAGE_COUNT);\n \n             if (state == SYNCHRONIZED)\n@@ -133,7 +141,7 @@ public class MoldUDP64Client implements Closeable {\n             return;\n         }\n \n-        if (state != SYNCHRONIZED && highestReceivedSequenceNumber == lastSequenceNumber)\n+        if (state != SYNCHRONIZED && nextEstimatedSequenceNumber == nextSequenceNumber)\n             state(SYNCHRONIZED);\n \n         if (messageCount == MESSAGE_COUNT_END_OF_SESSION) {\n@@ -145,7 +153,7 @@ public class MoldUDP64Client implements Closeable {\n                 sequenceNumber++;\n             }\n \n-            while (nextExpectedSequenceNumber < lastSequenceNumber) {\n+            while (nextExpectedSequenceNumber < nextSequenceNumber) {\n                 read();\n \n                 nextExpectedSequenceNumber++;\n", "test_patch": "diff --git a/src/test/java/org/jvirtanen/nassau/moldudp64/MoldUDP64ClientTest.java b/src/test/java/org/jvirtanen/nassau/moldudp64/MoldUDP64ClientTest.java\nindex 5732694..8c1e29f 100644\n--- a/src/test/java/org/jvirtanen/nassau/moldudp64/MoldUDP64ClientTest.java\n+++ b/src/test/java/org/jvirtanen/nassau/moldudp64/MoldUDP64ClientTest.java\n@@ -67,6 +67,7 @@ public class MoldUDP64ClientTest {\n \n         packet.clear();\n         packet.put(wrap(\"baz\"));\n+        packet.put(wrap(\"quux\"));\n \n         server.nextSequenceNumber = 3;\n         server.send(packet);\n@@ -85,21 +86,22 @@ public class MoldUDP64ClientTest {\n         packet.put(wrap(\"foo\"));\n         packet.put(wrap(\"bar\"));\n         packet.put(wrap(\"baz\"));\n+        packet.put(wrap(\"quux\"));\n \n         server.nextSequenceNumber = 1;\n         server.send(packet);\n \n         packet.clear();\n-        packet.put(wrap(\"quux\"));\n+        packet.put(wrap(\"xyzzy\"));\n \n-        server.nextSequenceNumber = 4;\n+        server.nextSequenceNumber = 5;\n         server.send(packet);\n \n-        while (clientMessages.collect().size() != 4)\n+        while (clientMessages.collect().size() != 5)\n             client.receive();\n \n-        assertEquals(asList(\"foo\", \"bar\", \"baz\", \"quux\"), clientMessages.collect());\n-        assertEquals(asList(new State(BACKFILL), new Request(1, 2), new Request(1, 3),\n+        assertEquals(asList(\"foo\", \"bar\", \"baz\", \"quux\", \"xyzzy\"), clientMessages.collect());\n+        assertEquals(asList(new State(BACKFILL), new Request(1, 2), new Request(1, 4),\n                     new Downstream(), new State(SYNCHRONIZED), new Downstream(),\n                     new Downstream()), clientStatus.collect());\n     }\n"}
