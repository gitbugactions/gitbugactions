{
    "repository": "google/badwolf",
    "clone_url": "https://github.com/google/badwolf.git",
    "timestamp": "2023-05-30T11:15:36.501241Z",
    "clone_success": true,
    "number of actions": 1,
    "number_of_test_actions": 1,
    "actions_successful": false,
    "actions_stdout": "[tests/windows] \ud83d\ude80  Start image=crawlergpt:latest\n[tests/linux  ] \ud83d\ude80  Start image=crawlergpt:latest\n[tests/linux  ]   \ud83d\udc33  docker pull image=crawlergpt:latest platform= username= forcePull=false\n[tests/windows]   \ud83d\udc33  docker pull image=crawlergpt:latest platform= username= forcePull=false\n[tests/windows]   \ud83d\udc33  docker create image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[tests/linux  ]   \ud83d\udc33  docker create image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[tests/linux  ]   \ud83d\udc33  docker run image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[tests/windows]   \ud83d\udc33  docker run image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[tests/linux  ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/google-badwolf] user=0 workdir=\n[tests/linux  ]   \u2601  git clone 'https://github.com/actions/setup-go' # ref=v1\n[tests/linux  ]   \u2601  git clone 'https://github.com/actions/cache' # ref=preview\n[tests/linux  ] \ud83e\uddea  Matrix: map[go-version:1.x]\n[tests/linux  ] \u2b50 Run Main actions/setup-go@v1\n[tests/linux  ]   \ud83d\udc33  docker cp src=/home/andre-silva/.cache/act/actions-setup-go@v1/ dst=/var/run/act/actions/actions-setup-go@v1/\n[tests/linux  ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /var/run/act/actions/actions-setup-go@v1/] user=0 workdir=\n[tests/windows]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/google-badwolf] user=0 workdir=\n[tests/linux  ]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/actions-setup-go@v1/lib/setup-go.js] user= workdir=\n[tests/linux  ]   \ud83d\udcac  ::debug::evaluating 252 versions\n[tests/linux  ]   \ud83d\udcac  ::debug::matched: 1.20.4\n[tests/linux  ]   \ud83d\udcac  ::debug::isExplicit: 1.20.4\n[tests/linux  ]   \ud83d\udcac  ::debug::explicit? true\n[tests/linux  ]   \ud83d\udcac  ::debug::checking cache: /opt/hostedtoolcache/go/1.20.4/x64\n[tests/linux  ]   \ud83d\udcac  ::debug::not found\n[tests/linux  ]   \ud83d\udcac  ::debug::Downloading Go from: https://storage.googleapis.com/golang/go1.20.4.linux-amd64.tar.gz\n[tests/linux  ]   \ud83d\udcac  ::debug::Downloading https://storage.googleapis.com/golang/go1.20.4.linux-amd64.tar.gz\n[tests/linux  ]   \ud83d\udcac  ::debug::Downloading /tmp/576a1558-8894-45a3-8fd7-4a31bf6ddd2f\n[tests/windows]   \u2601  git clone 'https://github.com/actions/setup-go' # ref=v1\n[tests/windows]   \u2601  git clone 'https://github.com/actions/cache' # ref=preview\n[tests/windows] \ud83e\uddea  Matrix: map[go-version:1.x]\n[tests/windows] \u2b50 Run Main actions/setup-go@v1\n[tests/windows]   \ud83d\udc33  docker cp src=/home/andre-silva/.cache/act/actions-setup-go@v1/ dst=/var/run/act/actions/actions-setup-go@v1/\n[tests/windows]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /var/run/act/actions/actions-setup-go@v1/] user=0 workdir=\n[tests/windows]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/actions-setup-go@v1/lib/setup-go.js] user= workdir=\n[tests/windows]   \ud83d\udcac  ::debug::evaluating 252 versions\n[tests/windows]   \ud83d\udcac  ::debug::matched: 1.20.4\n[tests/windows]   \ud83d\udcac  ::debug::isExplicit: 1.20.4\n[tests/windows]   \ud83d\udcac  ::debug::explicit? true\n[tests/windows]   \ud83d\udcac  ::debug::checking cache: /opt/hostedtoolcache/go/1.20.4/x64\n[tests/windows]   \ud83d\udcac  ::debug::not found\n[tests/windows]   \ud83d\udcac  ::debug::Downloading Go from: https://storage.googleapis.com/golang/go1.20.4.linux-amd64.tar.gz\n[tests/windows]   \ud83d\udcac  ::debug::Downloading https://storage.googleapis.com/golang/go1.20.4.linux-amd64.tar.gz\n[tests/windows]   \ud83d\udcac  ::debug::Downloading /tmp/892bcba2-6c1d-4b74-8ad3-85103cec433a\n[tests/windows]   \ud83d\udcac  ::debug::download complete\n[tests/windows]   | [command]/usr/bin/tar xzC /tmp/1aac5d18-5693-4d60-9e34-b7735a31c22b -f /tmp/892bcba2-6c1d-4b74-8ad3-85103cec433a\n[tests/linux  ]   \ud83d\udcac  ::debug::download complete\n[tests/linux  ]   | [command]/usr/bin/tar xzC /tmp/2e8c8daa-7f74-4edb-a39a-786a2f7c686a -f /tmp/576a1558-8894-45a3-8fd7-4a31bf6ddd2f\n[tests/windows]   \ud83d\udcac  ::debug::Caching tool go 1.20.4 x64\n[tests/windows]   \ud83d\udcac  ::debug::source dir: /tmp/1aac5d18-5693-4d60-9e34-b7735a31c22b/go\n[tests/windows]   \ud83d\udcac  ::debug::destination /opt/hostedtoolcache/go/1.20.4/x64\n[tests/linux  ]   \ud83d\udcac  ::debug::Caching tool go 1.20.4 x64\n[tests/linux  ]   \ud83d\udcac  ::debug::source dir: /tmp/2e8c8daa-7f74-4edb-a39a-786a2f7c686a/go\n[tests/linux  ]   \ud83d\udcac  ::debug::destination /opt/hostedtoolcache/go/1.20.4/x64\n[tests/windows]   \ud83d\udcac  ::debug::finished caching tool\n[tests/windows]   \ud83d\udcac  ::debug::Go tool is cached under /opt/hostedtoolcache/go/1.20.4/x64\n[tests/windows]   \u2753 add-matcher /run/act/actions/actions-setup-go@v1/.github/go.json\n[tests/windows]   \u2705  Success - Main actions/setup-go@v1\n[tests/linux  ]   \ud83d\udcac  ::debug::finished caching tool\n[tests/linux  ]   \ud83d\udcac  ::debug::Go tool is cached under /opt/hostedtoolcache/go/1.20.4/x64\n[tests/linux  ]   \u2753 add-matcher /run/act/actions/actions-setup-go@v1/.github/go.json\n[tests/linux  ]   \u2705  Success - Main actions/setup-go@v1\n[tests/linux  ]   \u2699  ::set-env:: GOROOT=/opt/hostedtoolcache/go/1.20.4/x64\n[tests/windows]   \u2699  ::set-env:: GOROOT=/opt/hostedtoolcache/go/1.20.4/x64\n[tests/linux  ]   \u2699  ::add-path:: /opt/hostedtoolcache/go/1.20.4/x64/bin\n[tests/windows]   \u2699  ::add-path:: /opt/hostedtoolcache/go/1.20.4/x64/bin\n[tests/windows] \u2b50 Run Main actions/checkout@v1\n[tests/linux  ] \u2b50 Run Main actions/checkout@v1\n[tests/linux  ]   \u2705  Success - Main actions/checkout@v1\n[tests/windows]   \u2705  Success - Main actions/checkout@v1\n[tests/linux  ] \u2b50 Run Main Cache go modules\n[tests/windows] \u2b50 Run Main Cache go modules\n[tests/windows]   \ud83d\udc33  docker cp src=/home/andre-silva/.cache/act/actions-cache@preview/ dst=/var/run/act/actions/actions-cache@preview/\n[tests/linux  ]   \ud83d\udc33  docker cp src=/home/andre-silva/.cache/act/actions-cache@preview/ dst=/var/run/act/actions/actions-cache@preview/\n[tests/linux  ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /var/run/act/actions/actions-cache@preview/] user=0 workdir=\n[tests/windows]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /var/run/act/actions/actions-cache@preview/] user=0 workdir=\n[tests/windows]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/actions-cache@preview/dist/restore/index.js] user= workdir=\n[tests/linux  ]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/actions-cache@preview/dist/restore/index.js] user= workdir=\n[tests/windows]   \ud83d\udcac  ::debug::Cache Path: /home/runneradmin/go/pkg/mod\n[tests/windows]   \ud83d\udcbe  ::save-state name=CACHE_KEY,::Linux-go-28b2df59a9f4da30453633233643730467f89a3af916367e18e4335a7593691a\n[tests/windows]   \ud83d\udcac  ::debug::Resolved Keys:\n[tests/windows]   \ud83d\udcac  ::debug::[\"Linux-go-28b2df59a9f4da30453633233643730467f89a3af916367e18e4335a7593691a\",\"Linux-go-\"]\n[tests/windows]   \ud83d\udea7  ::warning::Cache Service Url not found, unable to restore cache.\n[tests/windows]   \u2699  ::set-output:: cache-hit=false\n[tests/windows]   \u2705  Success - Main Cache go modules\n[tests/linux  ]   \ud83d\udcac  ::debug::Cache Path: /home/runneradmin/go/pkg/mod\n[tests/linux  ]   \ud83d\udcbe  ::save-state name=CACHE_KEY,::Linux-go-28b2df59a9f4da30453633233643730467f89a3af916367e18e4335a7593691a\n[tests/linux  ]   \ud83d\udcac  ::debug::Resolved Keys:\n[tests/linux  ]   \ud83d\udcac  ::debug::[\"Linux-go-28b2df59a9f4da30453633233643730467f89a3af916367e18e4335a7593691a\",\"Linux-go-\"]\n[tests/linux  ]   \ud83d\udea7  ::warning::Cache Service Url not found, unable to restore cache.\n[tests/linux  ]   \u2699  ::set-output:: cache-hit=false\n[tests/linux  ]   \u2705  Success - Main Cache go modules\n[tests/windows] \u2b50 Run Main go test ./...\n[tests/linux  ] \u2b50 Run Main Run go fmt\n[tests/linux  ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/3] user= workdir=\n[tests/windows]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/3] user= workdir=\n[tests/windows]   | go: unknown environment setting GO111MODULE=true\n[tests/windows]   \u274c  Failure - Main go test ./...\n[tests/linux  ]   | --- /dev/fd/63\t2023-05-30 11:22:06.311080921 +0000\n[tests/linux  ]   | +++ /dev/fd/62\t2023-05-30 11:22:06.359080531 +0000\n[tests/linux  ]   | @@ -0,0 +1,565 @@\n[tests/linux  ]   | +diff storage/memory/memory_test.go.orig storage/memory/memory_test.go\n[tests/linux  ]   | +--- storage/memory/memory_test.go.orig\n[tests/linux  ]   | ++++ storage/memory/memory_test.go\n[tests/linux  ]   | +@@ -1488,45 +1488,45 @@\n[tests/linux  ]   | + \t\twant map[string]int\n[tests/linux  ]   | + \t}{\n[tests/linux  ]   | + \t\t{\n[tests/linux  ]   | +-\t\t\tid: \"FILTER latest predicate\",\n[tests/linux  ]   | +-\t\t\tlo: &storage.LookupOptions{FilterOptions: &filter.StorageOptions{Operation: filter.Latest, Field: filter.PredicateField}},\n[tests/linux  ]   | +-\t\t\ts:  testutil.MustBuildNodeFromStrings(t, \"/u\", \"john\"),\n[tests/linux  ]   | +-\t\t\twant: map[string]int{`/u<john>\t\"meet\"@[2014-04-10T04:21:00Z]\t/u<mary>`: 1, `/u<john>\t\"meet\"@[2014-04-10T04:21:00Z]\t/u<bob>`: 1},\n[tests/linux  ]   | +-\t\t},\n[tests/linux  ]   | +-\t\t{\n[tests/linux  ]   | +-\t\t\tid: \"FILTER latest object\",\n[tests/linux  ]   | +-\t\t\tlo: &storage.LookupOptions{FilterOptions: &filter.StorageOptions{Operation: filter.Latest, Field: filter.ObjectField}},\n[tests/linux  ]   | +-\t\t\ts:  testutil.MustBuildNodeFromStrings(t, \"/_\", \"bn\"),\n[tests/linux  ]   | +-\t\t\twant: map[string]int{`/_<bn>\t\"_predicate\"@[]\t\"meet\"@[2021-04-10T04:21:00Z]`: 1},\n[tests/linux  ]   | +-\t\t},\n[tests/linux  ]   | +-\t\t{\n[tests/linux  ]   | +-\t\t\tid: \"FILTER isImmutable predicate\",\n[tests/linux  ]   | +-\t\t\tlo: &storage.LookupOptions{FilterOptions: &filter.StorageOptions{Operation: filter.IsImmutable, Field: filter.PredicateField}},\n[tests/linux  ]   | +-\t\t\ts:  testutil.MustBuildNodeFromStrings(t, \"/u\", \"john\"),\n[tests/linux  ]   | +-\t\t\twant: map[string]int{`/u<john>\t\"parent_of\"@[]\t/u<paul>`: 1},\n[tests/linux  ]   | +-\t\t},\n[tests/linux  ]   | +-\t\t{\n[tests/linux  ]   | +-\t\t\tid: \"FILTER isImmutable object\",\n[tests/linux  ]   | +-\t\t\tlo: &storage.LookupOptions{FilterOptions: &filter.StorageOptions{Operation: filter.IsImmutable, Field: filter.ObjectField}},\n[tests/linux  ]   | +-\t\t\ts:  testutil.MustBuildNodeFromStrings(t, \"/_\", \"bn\"),\n[tests/linux  ]   | +-\t\t\twant: map[string]int{`/_<bn>\t\"_predicate\"@[]\t\"height_cm\"@[]`: 1},\n[tests/linux  ]   | +-\t\t},\n[tests/linux  ]   | +-\t\t{\n[tests/linux  ]   | +-\t\t\tid: \"FILTER isTemporal predicate\",\n[tests/linux  ]   | +-\t\t\tlo: &storage.LookupOptions{FilterOptions: &filter.StorageOptions{Operation: filter.IsTemporal, Field: filter.PredicateField}},\n[tests/linux  ]   | +-\t\t\ts:  testutil.MustBuildNodeFromStrings(t, \"/u\", \"john\"),\n[tests/linux  ]   | +-\t\t\twant: map[string]int{`/u<john>\t\"meet\"@[2012-04-10T04:21:00Z]\t/u<mary>`: 1, `/u<john>\t\"meet\"@[2013-04-10T04:21:00Z]\t/u<mary>`: 1, `/u<john>\t\"meet\"@[2014-04-10T04:21:00Z]\t/u<mary>`: 1, `/u<john>\t\"meet\"@[2014-04-10T04:21:00Z]\t/u<bob>`: 1},\n[tests/linux  ]   | +-\t\t},\n[tests/linux  ]   | +-\t\t{\n[tests/linux  ]   | +-\t\t\tid: \"FILTER isTemporal object\",\n[tests/linux  ]   | +-\t\t\tlo: &storage.LookupOptions{FilterOptions: &filter.StorageOptions{Operation: filter.IsTemporal, Field: filter.ObjectField}},\n[tests/linux  ]   | +-\t\t\ts:  testutil.MustBuildNodeFromStrings(t, \"/_\", \"bn\"),\n[tests/linux  ]   | +-\t\t\twant: map[string]int{`/_<bn>\t\"_predicate\"@[]\t\"meet\"@[2020-04-10T04:21:00Z]`: 1, `/_<bn>\t\"_predicate\"@[]\t\"meet\"@[2021-04-10T04:21:00Z]`: 1},\n[tests/linux  ]   | +-\t\t},\n[tests/linux  ]   | +-\t\t{\n[tests/linux  ]   | +-\t\t\tid: \"FILTER latest between\",\n[tests/linux  ]   | +-\t\t\tlo: &storage.LookupOptions{LowerAnchor: testutil.MustBuildTime(t, \"2012-04-10T04:21:00Z\"), UpperAnchor: testutil.MustBuildTime(t, \"2013-04-10T04:21:00Z\"), FilterOptions: &filter.StorageOptions{Operation: filter.Latest, Field: filter.PredicateField}},\n[tests/linux  ]   | +-\t\t\ts:  testutil.MustBuildNodeFromStrings(t, \"/u\", \"john\"),\n[tests/linux  ]   | ++\t\t\tid:   \"FILTER latest predicate\",\n[tests/linux  ]   | ++\t\t\tlo:   &storage.LookupOptions{FilterOptions: &filter.StorageOptions{Operation: filter.Latest, Field: filter.PredicateField}},\n[tests/linux  ]   | ++\t\t\ts:    testutil.MustBuildNodeFromStrings(t, \"/u\", \"john\"),\n[tests/linux  ]   | ++\t\t\twant: map[string]int{`/u<john>\t\"meet\"@[2014-04-10T04:21:00Z]\t/u<mary>`: 1, `/u<john>\t\"meet\"@[2014-04-10T04:21:00Z]\t/u<bob>`: 1},\n[tests/linux  ]   | ++\t\t},\n[tests/linux  ]   | ++\t\t{\n[tests/linux  ]   | ++\t\t\tid:   \"FILTER latest object\",\n[tests/linux  ]   | ++\t\t\tlo:   &storage.LookupOptions{FilterOptions: &filter.StorageOptions{Operation: filter.Latest, Field: filter.ObjectField}},\n[tests/linux  ]   | ++\t\t\ts:    testutil.MustBuildNodeFromStrings(t, \"/_\", \"bn\"),\n[tests/linux  ]   | ++\t\t\twant: map[string]int{`/_<bn>\t\"_predicate\"@[]\t\"meet\"@[2021-04-10T04:21:00Z]`: 1},\n[tests/linux  ]   | ++\t\t},\n[tests/linux  ]   | ++\t\t{\n[tests/linux  ]   | ++\t\t\tid:   \"FILTER isImmutable predicate\",\n[tests/linux  ]   | ++\t\t\tlo:   &storage.LookupOptions{FilterOptions: &filter.StorageOptions{Operation: filter.IsImmutable, Field: filter.PredicateField}},\n[tests/linux  ]   | ++\t\t\ts:    testutil.MustBuildNodeFromStrings(t, \"/u\", \"john\"),\n[tests/linux  ]   | ++\t\t\twant: map[string]int{`/u<john>\t\"parent_of\"@[]\t/u<paul>`: 1},\n[tests/linux  ]   | ++\t\t},\n[tests/linux  ]   | ++\t\t{\n[tests/linux  ]   | ++\t\t\tid:   \"FILTER isImmutable object\",\n[tests/linux  ]   | ++\t\t\tlo:   &storage.LookupOptions{FilterOptions: &filter.StorageOptions{Operation: filter.IsImmutable, Field: filter.ObjectField}},\n[tests/linux  ]   | ++\t\t\ts:    testutil.MustBuildNodeFromStrings(t, \"/_\", \"bn\"),\n[tests/linux  ]   | ++\t\t\twant: map[string]int{`/_<bn>\t\"_predicate\"@[]\t\"height_cm\"@[]`: 1},\n[tests/linux  ]   | ++\t\t},\n[tests/linux  ]   | ++\t\t{\n[tests/linux  ]   | ++\t\t\tid:   \"FILTER isTemporal predicate\",\n[tests/linux  ]   | ++\t\t\tlo:   &storage.LookupOptions{FilterOptions: &filter.StorageOptions{Operation: filter.IsTemporal, Field: filter.PredicateField}},\n[tests/linux  ]   | ++\t\t\ts:    testutil.MustBuildNodeFromStrings(t, \"/u\", \"john\"),\n[tests/linux  ]   | ++\t\t\twant: map[string]int{`/u<john>\t\"meet\"@[2012-04-10T04:21:00Z]\t/u<mary>`: 1, `/u<john>\t\"meet\"@[2013-04-10T04:21:00Z]\t/u<mary>`: 1, `/u<john>\t\"meet\"@[2014-04-10T04:21:00Z]\t/u<mary>`: 1, `/u<john>\t\"meet\"@[2014-04-10T04:21:00Z]\t/u<bob>`: 1},\n[tests/linux  ]   | ++\t\t},\n[tests/linux  ]   | ++\t\t{\n[tests/linux  ]   | ++\t\t\tid:   \"FILTER isTemporal object\",\n[tests/linux  ]   | ++\t\t\tlo:   &storage.LookupOptions{FilterOptions: &filter.StorageOptions{Operation: filter.IsTemporal, Field: filter.ObjectField}},\n[tests/linux  ]   | ++\t\t\ts:    testutil.MustBuildNodeFromStrings(t, \"/_\", \"bn\"),\n[tests/linux  ]   | ++\t\t\twant: map[string]int{`/_<bn>\t\"_predicate\"@[]\t\"meet\"@[2020-04-10T04:21:00Z]`: 1, `/_<bn>\t\"_predicate\"@[]\t\"meet\"@[2021-04-10T04:21:00Z]`: 1},\n[tests/linux  ]   | ++\t\t},\n[tests/linux  ]   | ++\t\t{\n[tests/linux  ]   | ++\t\t\tid:   \"FILTER latest between\",\n[tests/linux  ]   | ++\t\t\tlo:   &storage.LookupOptions{LowerAnchor: testutil.MustBuildTime(t, \"2012-04-10T04:21:00Z\"), UpperAnchor: testutil.MustBuildTime(t, \"2013-04-10T04:21:00Z\"), FilterOptions: &filter.StorageOptions{Operation: filter.Latest, Field: filter.PredicateField}},\n[tests/linux  ]   | ++\t\t\ts:    testutil.MustBuildNodeFromStrings(t, \"/u\", \"john\"),\n[tests/linux  ]   | + \t\t\twant: map[string]int{`/u<john>\t\"meet\"@[2013-04-10T04:21:00Z]\t/u<mary>`: 1},\n[tests/linux  ]   | + \t\t},\n[tests/linux  ]   | + \t}\n[tests/linux  ]   | +@@ -1686,51 +1686,51 @@\n[tests/linux  ]   | + \t\twant map[string]int\n[tests/linux  ]   | + \t}{\n[tests/linux  ]   | + \t\t{\n[tests/linux  ]   | +-\t\t\tid: \"FILTER latest predicate\",\n[tests/linux  ]   | +-\t\t\tlo: &storage.LookupOptions{FilterOptions: &filter.StorageOptions{Operation: filter.Latest, Field: filter.PredicateField}},\n[tests/linux  ]   | +-\t\t\tp:  testutil.MustBuildPredicate(t, `\"meet\"@[2012-04-10T04:21:00Z]`),\n[tests/linux  ]   | +-\t\t\twant: map[string]int{`/u<john>\t\"meet\"@[2012-04-10T04:21:00Z]\t/u<mary>`: 1},\n[tests/linux  ]   | +-\t\t},\n[tests/linux  ]   | +-\t\t{\n[tests/linux  ]   | +-\t\t\tid: \"FILTER latest predicate duplicate timestamp\",\n[tests/linux  ]   | +-\t\t\tlo: &storage.LookupOptions{FilterOptions: &filter.StorageOptions{Operation: filter.Latest, Field: filter.PredicateField}},\n[tests/linux  ]   | +-\t\t\tp:  testutil.MustBuildPredicate(t, `\"meet\"@[2014-04-10T04:21:00Z]`),\n[tests/linux  ]   | +-\t\t\twant: map[string]int{`/u<john>\t\"meet\"@[2014-04-10T04:21:00Z]\t/u<mary>`: 1, `/u<john>\t\"meet\"@[2014-04-10T04:21:00Z]\t/u<bob>`: 1},\n[tests/linux  ]   | +-\t\t},\n[tests/linux  ]   | +-\t\t{\n[tests/linux  ]   | +-\t\t\tid: \"FILTER latest object\",\n[tests/linux  ]   | +-\t\t\tlo: &storage.LookupOptions{FilterOptions: &filter.StorageOptions{Operation: filter.Latest, Field: filter.ObjectField}},\n[tests/linux  ]   | +-\t\t\tp:  testutil.MustBuildPredicate(t, `\"_predicate\"@[]`),\n[tests/linux  ]   | +-\t\t\twant: map[string]int{`/_<bn>\t\"_predicate\"@[]\t\"meet\"@[2021-04-10T04:21:00Z]`: 1},\n[tests/linux  ]   | +-\t\t},\n[tests/linux  ]   | +-\t\t{\n[tests/linux  ]   | +-\t\t\tid:   \"FILTER isImmutable predicate\",\n[tests/linux  ]   | +-\t\t\tlo:   &storage.LookupOptions{FilterOptions: &filter.StorageOptions{Operation: filter.IsImmutable, Field: filter.PredicateField}},\n[tests/linux  ]   | +-\t\t\tp:    testutil.MustBuildPredicate(t, `\"meet\"@[2014-04-10T04:21:00Z]`),\n[tests/linux  ]   | +-\t\t\twant: map[string]int{},\n[tests/linux  ]   | +-\t\t},\n[tests/linux  ]   | +-\t\t{\n[tests/linux  ]   | +-\t\t\tid: \"FILTER isImmutable object\",\n[tests/linux  ]   | +-\t\t\tlo: &storage.LookupOptions{FilterOptions: &filter.StorageOptions{Operation: filter.IsImmutable, Field: filter.ObjectField}},\n[tests/linux  ]   | +-\t\t\tp:  testutil.MustBuildPredicate(t, `\"_predicate\"@[]`),\n[tests/linux  ]   | +-\t\t\twant: map[string]int{`/_<bn>\t\"_predicate\"@[]\t\"height_cm\"@[]`: 1},\n[tests/linux  ]   | +-\t\t},\n[tests/linux  ]   | +-\t\t{\n[tests/linux  ]   | +-\t\t\tid: \"FILTER isTemporal predicate\",\n[tests/linux  ]   | +-\t\t\tlo: &storage.LookupOptions{FilterOptions: &filter.StorageOptions{Operation: filter.IsTemporal, Field: filter.PredicateField}},\n[tests/linux  ]   | +-\t\t\tp:  testutil.MustBuildPredicate(t, `\"meet\"@[2014-04-10T04:21:00Z]`),\n[tests/linux  ]   | +-\t\t\twant: map[string]int{`/u<john>\t\"meet\"@[2014-04-10T04:21:00Z]\t/u<mary>`: 1, `/u<john>\t\"meet\"@[2014-04-10T04:21:00Z]\t/u<bob>`: 1},\n[tests/linux  ]   | +-\t\t},\n[tests/linux  ]   | +-\t\t{\n[tests/linux  ]   | +-\t\t\tid: \"FILTER isTemporal object\",\n[tests/linux  ]   | +-\t\t\tlo: &storage.LookupOptions{FilterOptions: &filter.StorageOptions{Operation: filter.IsTemporal, Field: filter.ObjectField}},\n[tests/linux  ]   | +-\t\t\tp:  testutil.MustBuildPredicate(t, `\"_predicate\"@[]`),\n[tests/linux  ]   | +-\t\t\twant: map[string]int{`/_<bn>\t\"_predicate\"@[]\t\"meet\"@[2020-04-10T04:21:00Z]`: 1, `/_<bn>\t\"_predicate\"@[]\t\"meet\"@[2021-04-10T04:21:00Z]`: 1},\n[tests/linux  ]   | +-\t\t},\n[tests/linux  ]   | +-\t\t{\n[tests/linux  ]   | +-\t\t\tid: \"FILTER latest between\",\n[tests/linux  ]   | +-\t\t\tlo: &storage.LookupOptions{LowerAnchor: testutil.MustBuildTime(t, \"2012-04-10T04:21:00Z\"), UpperAnchor: testutil.MustBuildTime(t, \"2013-04-10T04:21:00Z\"), FilterOptions: &filter.StorageOptions{Operation: filter.Latest, Field: filter.PredicateField}},\n[tests/linux  ]   | +-\t\t\tp:  testutil.MustBuildPredicate(t, `\"meet\"@[2013-04-10T04:21:00Z]`),\n[tests/linux  ]   | ++\t\t\tid:   \"FILTER latest predicate\",\n[tests/linux  ]   | ++\t\t\tlo:   &storage.LookupOptions{FilterOptions: &filter.StorageOptions{Operation: filter.Latest, Field: filter.PredicateField}},\n[tests/linux  ]   | ++\t\t\tp:    testutil.MustBuildPredicate(t, `\"meet\"@[2012-04-10T04:21:00Z]`),\n[tests/linux  ]   | ++\t\t\twant: map[string]int{`/u<john>\t\"meet\"@[2012-04-10T04:21:00Z]\t/u<mary>`: 1},\n[tests/linux  ]   | ++\t\t},\n[tests/linux  ]   | ++\t\t{\n[tests/linux  ]   | ++\t\t\tid:   \"FILTER latest predicate duplicate timestamp\",\n[tests/linux  ]   | ++\t\t\tlo:   &storage.LookupOptions{FilterOptions: &filter.StorageOptions{Operation: filter.Latest, Field: filter.PredicateField}},\n[tests/linux  ]   | ++\t\t\tp:    testutil.MustBuildPredicate(t, `\"meet\"@[2014-04-10T04:21:00Z]`),\n[tests/linux  ]   | ++\t\t\twant: map[string]int{`/u<john>\t\"meet\"@[2014-04-10T04:21:00Z]\t/u<mary>`: 1, `/u<john>\t\"meet\"@[2014-04-10T04:21:00Z]\t/u<bob>`: 1},\n[tests/linux  ]   | ++\t\t},\n[tests/linux  ]   | ++\t\t{\n[tests/linux  ]   | ++\t\t\tid:   \"FILTER latest object\",\n[tests/linux  ]   | ++\t\t\tlo:   &storage.LookupOptions{FilterOptions: &filter.StorageOptions{Operation: filter.Latest, Field: filter.ObjectField}},\n[tests/linux  ]   | ++\t\t\tp:    testutil.MustBuildPredicate(t, `\"_predicate\"@[]`),\n[tests/linux  ]   | ++\t\t\twant: map[string]int{`/_<bn>\t\"_predicate\"@[]\t\"meet\"@[2021-04-10T04:21:00Z]`: 1},\n[tests/linux  ]   | ++\t\t},\n[tests/linux  ]   | ++\t\t{\n[tests/linux  ]   | ++\t\t\tid:   \"FILTER isImmutable predicate\",\n[tests/linux  ]   | ++\t\t\tlo:   &storage.LookupOptions{FilterOptions: &filter.StorageOptions{Operation: filter.IsImmutable, Field: filter.PredicateField}},\n[tests/linux  ]   | ++\t\t\tp:    testutil.MustBuildPredicate(t, `\"meet\"@[2014-04-10T04:21:00Z]`),\n[tests/linux  ]   | ++\t\t\twant: map[string]int{},\n[tests/linux  ]   | ++\t\t},\n[tests/linux  ]   | ++\t\t{\n[tests/linux  ]   | ++\t\t\tid:   \"FILTER isImmutable object\",\n[tests/linux  ]   | ++\t\t\tlo:   &storage.LookupOptions{FilterOptions: &filter.StorageOptions{Operation: filter.IsImmutable, Field: filter.ObjectField}},\n[tests/linux  ]   | ++\t\t\tp:    testutil.MustBuildPredicate(t, `\"_predicate\"@[]`),\n[tests/linux  ]   | ++\t\t\twant: map[string]int{`/_<bn>\t\"_predicate\"@[]\t\"height_cm\"@[]`: 1},\n[tests/linux  ]   | ++\t\t},\n[tests/linux  ]   | ++\t\t{\n[tests/linux  ]   | ++\t\t\tid:   \"FILTER isTemporal predicate\",\n[tests/linux  ]   | ++\t\t\tlo:   &storage.LookupOptions{FilterOptions: &filter.StorageOptions{Operation: filter.IsTemporal, Field: filter.PredicateField}},\n[tests/linux  ]   | ++\t\t\tp:    testutil.MustBuildPredicate(t, `\"meet\"@[2014-04-10T04:21:00Z]`),\n[tests/linux  ]   | ++\t\t\twant: map[string]int{`/u<john>\t\"meet\"@[2014-04-10T04:21:00Z]\t/u<mary>`: 1, `/u<john>\t\"meet\"@[2014-04-10T04:21:00Z]\t/u<bob>`: 1},\n[tests/linux  ]   | ++\t\t},\n[tests/linux  ]   | ++\t\t{\n[tests/linux  ]   | ++\t\t\tid:   \"FILTER isTemporal object\",\n[tests/linux  ]   | ++\t\t\tlo:   &storage.LookupOptions{FilterOptions: &filter.StorageOptions{Operation: filter.IsTemporal, Field: filter.ObjectField}},\n[tests/linux  ]   | ++\t\t\tp:    testutil.MustBuildPredicate(t, `\"_predicate\"@[]`),\n[tests/linux  ]   | ++\t\t\twant: map[string]int{`/_<bn>\t\"_predicate\"@[]\t\"meet\"@[2020-04-10T04:21:00Z]`: 1, `/_<bn>\t\"_predicate\"@[]\t\"meet\"@[2021-04-10T04:21:00Z]`: 1},\n[tests/linux  ]   | ++\t\t},\n[tests/linux  ]   | ++\t\t{\n[tests/linux  ]   | ++\t\t\tid:   \"FILTER latest between\",\n[tests/linux  ]   | ++\t\t\tlo:   &storage.LookupOptions{LowerAnchor: testutil.MustBuildTime(t, \"2012-04-10T04:21:00Z\"), UpperAnchor: testutil.MustBuildTime(t, \"2013-04-10T04:21:00Z\"), FilterOptions: &filter.StorageOptions{Operation: filter.Latest, Field: filter.PredicateField}},\n[tests/linux  ]   | ++\t\t\tp:    testutil.MustBuildPredicate(t, `\"meet\"@[2013-04-10T04:21:00Z]`),\n[tests/linux  ]   | + \t\t\twant: map[string]int{`/u<john>\t\"meet\"@[2013-04-10T04:21:00Z]\t/u<mary>`: 1},\n[tests/linux  ]   | + \t\t},\n[tests/linux  ]   | + \t}\n[tests/linux  ]   | +@@ -1890,33 +1890,33 @@\n[tests/linux  ]   | + \t\twant map[string]int\n[tests/linux  ]   | + \t}{\n[tests/linux  ]   | + \t\t{\n[tests/linux  ]   | +-\t\t\tid: \"FILTER latest predicate\",\n[tests/linux  ]   | +-\t\t\tlo: &storage.LookupOptions{FilterOptions: &filter.StorageOptions{Operation: filter.Latest, Field: filter.PredicateField}},\n[tests/linux  ]   | +-\t\t\to:  triple.NewNodeObject(testutil.MustBuildNodeFromStrings(t, \"/u\", \"mary\")),\n[tests/linux  ]   | +-\t\t\twant: map[string]int{`/u<john>\t\"meet\"@[2014-04-10T04:21:00Z]\t/u<mary>`: 1},\n[tests/linux  ]   | +-\t\t},\n[tests/linux  ]   | +-\t\t{\n[tests/linux  ]   | +-\t\t\tid: \"FILTER latest object\",\n[tests/linux  ]   | +-\t\t\tlo: &storage.LookupOptions{FilterOptions: &filter.StorageOptions{Operation: filter.Latest, Field: filter.ObjectField}},\n[tests/linux  ]   | +-\t\t\to:  triple.NewPredicateObject(testutil.MustBuildPredicate(t, `\"meet\"@[2020-04-10T04:21:00Z]`)),\n[tests/linux  ]   | +-\t\t\twant: map[string]int{`/_<bn>\t\"_predicate\"@[]\t\"meet\"@[2020-04-10T04:21:00Z]`: 1},\n[tests/linux  ]   | +-\t\t},\n[tests/linux  ]   | +-\t\t{\n[tests/linux  ]   | +-\t\t\tid:   \"FILTER isImmutable predicate\",\n[tests/linux  ]   | +-\t\t\tlo:   &storage.LookupOptions{FilterOptions: &filter.StorageOptions{Operation: filter.IsImmutable, Field: filter.PredicateField}},\n[tests/linux  ]   | +-\t\t\to:    triple.NewNodeObject(testutil.MustBuildNodeFromStrings(t, \"/u\", \"bob\")),\n[tests/linux  ]   | +-\t\t\twant: map[string]int{},\n[tests/linux  ]   | +-\t\t},\n[tests/linux  ]   | +-\t\t{\n[tests/linux  ]   | +-\t\t\tid: \"FILTER isImmutable object\",\n[tests/linux  ]   | +-\t\t\tlo: &storage.LookupOptions{FilterOptions: &filter.StorageOptions{Operation: filter.IsImmutable, Field: filter.ObjectField}},\n[tests/linux  ]   | +-\t\t\to:  triple.NewPredicateObject(testutil.MustBuildPredicate(t, `\"height_cm\"@[]`)),\n[tests/linux  ]   | +-\t\t\twant: map[string]int{`/_<bn>\t\"_predicate\"@[]\t\"height_cm\"@[]`: 1},\n[tests/linux  ]   | +-\t\t},\n[tests/linux  ]   | +-\t\t{\n[tests/linux  ]   | +-\t\t\tid: \"FILTER isTemporal predicate\",\n[tests/linux  ]   | +-\t\t\tlo: &storage.LookupOptions{FilterOptions: &filter.StorageOptions{Operation: filter.IsTemporal, Field: filter.PredicateField}},\n[tests/linux  ]   | +-\t\t\to:  triple.NewNodeObject(testutil.MustBuildNodeFromStrings(t, \"/u\", \"bob\")),\n[tests/linux  ]   | ++\t\t\tid:   \"FILTER latest predicate\",\n[tests/linux  ]   | ++\t\t\tlo:   &storage.LookupOptions{FilterOptions: &filter.StorageOptions{Operation: filter.Latest, Field: filter.PredicateField}},\n[tests/linux  ]   | ++\t\t\to:    triple.NewNodeObject(testutil.MustBuildNodeFromStrings(t, \"/u\", \"mary\")),\n[tests/linux  ]   | ++\t\t\twant: map[string]int{`/u<john>\t\"meet\"@[2014-04-10T04:21:00Z]\t/u<mary>`: 1},\n[tests/linux  ]   | ++\t\t},\n[tests/linux  ]   | ++\t\t{\n[tests/linux  ]   | ++\t\t\tid:   \"FILTER latest object\",\n[tests/linux  ]   | ++\t\t\tlo:   &storage.LookupOptions{FilterOptions: &filter.StorageOptions{Operation: filter.Latest, Field: filter.ObjectField}},\n[tests/linux  ]   | ++\t\t\to:    triple.NewPredicateObject(testutil.MustBuildPredicate(t, `\"meet\"@[2020-04-10T04:21:00Z]`)),\n[tests/linux  ]   | ++\t\t\twant: map[string]int{`/_<bn>\t\"_predicate\"@[]\t\"meet\"@[2020-04-10T04:21:00Z]`: 1},\n[tests/linux  ]   | ++\t\t},\n[tests/linux  ]   | ++\t\t{\n[tests/linux  ]   | ++\t\t\tid:   \"FILTER isImmutable predicate\",\n[tests/linux  ]   | ++\t\t\tlo:   &storage.LookupOptions{FilterOptions: &filter.StorageOptions{Operation: filter.IsImmutable, Field: filter.PredicateField}},\n[tests/linux  ]   | ++\t\t\to:    triple.NewNodeObject(testutil.MustBuildNodeFromStrings(t, \"/u\", \"bob\")),\n[tests/linux  ]   | ++\t\t\twant: map[string]int{},\n[tests/linux  ]   | ++\t\t},\n[tests/linux  ]   | ++\t\t{\n[tests/linux  ]   | ++\t\t\tid:   \"FILTER isImmutable object\",\n[tests/linux  ]   | ++\t\t\tlo:   &storage.LookupOptions{FilterOptions: &filter.StorageOptions{Operation: filter.IsImmutable, Field: filter.ObjectField}},\n[tests/linux  ]   | ++\t\t\to:    triple.NewPredicateObject(testutil.MustBuildPredicate(t, `\"height_cm\"@[]`)),\n[tests/linux  ]   | ++\t\t\twant: map[string]int{`/_<bn>\t\"_predicate\"@[]\t\"height_cm\"@[]`: 1},\n[tests/linux  ]   | ++\t\t},\n[tests/linux  ]   | ++\t\t{\n[tests/linux  ]   | ++\t\t\tid:   \"FILTER isTemporal predicate\",\n[tests/linux  ]   | ++\t\t\tlo:   &storage.LookupOptions{FilterOptions: &filter.StorageOptions{Operation: filter.IsTemporal, Field: filter.PredicateField}},\n[tests/linux  ]   | ++\t\t\to:    triple.NewNodeObject(testutil.MustBuildNodeFromStrings(t, \"/u\", \"bob\")),\n[tests/linux  ]   | + \t\t\twant: map[string]int{`/u<john>\t\"meet\"@[2014-04-10T04:21:00Z]\t/u<bob>`: 1},\n[tests/linux  ]   | + \t\t},\n[tests/linux  ]   | + \t\t{\n[tests/linux  ]   | +@@ -1926,9 +1926,9 @@\n[tests/linux  ]   | + \t\t\twant: map[string]int{},\n[tests/linux  ]   | + \t\t},\n[tests/linux  ]   | + \t\t{\n[tests/linux  ]   | +-\t\t\tid: \"FILTER latest between\",\n[tests/linux  ]   | +-\t\t\tlo: &storage.LookupOptions{LowerAnchor: testutil.MustBuildTime(t, \"2012-04-10T04:21:00Z\"), UpperAnchor: testutil.MustBuildTime(t, \"2013-04-10T04:21:00Z\"), FilterOptions: &filter.StorageOptions{Operation: filter.Latest, Field: filter.PredicateField}},\n[tests/linux  ]   | +-\t\t\to:  triple.NewNodeObject(testutil.MustBuildNodeFromStrings(t, \"/u\", \"mary\")),\n[tests/linux  ]   | ++\t\t\tid:   \"FILTER latest between\",\n[tests/linux  ]   | ++\t\t\tlo:   &storage.LookupOptions{LowerAnchor: testutil.MustBuildTime(t, \"2012-04-10T04:21:00Z\"), UpperAnchor: testutil.MustBuildTime(t, \"2013-04-10T04:21:00Z\"), FilterOptions: &filter.StorageOptions{Operation: filter.Latest, Field: filter.PredicateField}},\n[tests/linux  ]   | ++\t\t\to:    triple.NewNodeObject(testutil.MustBuildNodeFromStrings(t, \"/u\", \"mary\")),\n[tests/linux  ]   | + \t\t\twant: map[string]int{`/u<john>\t\"meet\"@[2013-04-10T04:21:00Z]\t/u<mary>`: 1},\n[tests/linux  ]   | + \t\t},\n[tests/linux  ]   | + \t}\n[tests/linux  ]   | +@@ -2135,59 +2135,59 @@\n[tests/linux  ]   | + \t\twant map[string]int\n[tests/linux  ]   | + \t}{\n[tests/linux  ]   | + \t\t{\n[tests/linux  ]   | +-\t\t\tid: \"FILTER latest predicate\",\n[tests/linux  ]   | +-\t\t\tlo: &storage.LookupOptions{FilterOptions: &filter.StorageOptions{Operation: filter.Latest, Field: filter.PredicateField}},\n[tests/linux  ]   | +-\t\t\ts:  testutil.MustBuildNodeFromStrings(t, \"/u\", \"john\"),\n[tests/linux  ]   | +-\t\t\tp:  testutil.MustBuildPredicate(t, `\"meet\"@[2012-04-10T04:21:00Z]`),\n[tests/linux  ]   | +-\t\t\twant: map[string]int{`/u<john>\t\"meet\"@[2012-04-10T04:21:00Z]\t/u<mary>`: 1},\n[tests/linux  ]   | +-\t\t},\n[tests/linux  ]   | +-\t\t{\n[tests/linux  ]   | +-\t\t\tid: \"FILTER latest predicate duplicate timestamp\",\n[tests/linux  ]   | +-\t\t\tlo: &storage.LookupOptions{FilterOptions: &filter.StorageOptions{Operation: filter.Latest, Field: filter.PredicateField}},\n[tests/linux  ]   | +-\t\t\ts:  testutil.MustBuildNodeFromStrings(t, \"/u\", \"john\"),\n[tests/linux  ]   | +-\t\t\tp:  testutil.MustBuildPredicate(t, `\"meet\"@[2014-04-10T04:21:00Z]`),\n[tests/linux  ]   | +-\t\t\twant: map[string]int{`/u<john>\t\"meet\"@[2014-04-10T04:21:00Z]\t/u<mary>`: 1, `/u<john>\t\"meet\"@[2014-04-10T04:21:00Z]\t/u<bob>`: 1},\n[tests/linux  ]   | +-\t\t},\n[tests/linux  ]   | +-\t\t{\n[tests/linux  ]   | +-\t\t\tid: \"FILTER latest object\",\n[tests/linux  ]   | +-\t\t\tlo: &storage.LookupOptions{FilterOptions: &filter.StorageOptions{Operation: filter.Latest, Field: filter.ObjectField}},\n[tests/linux  ]   | +-\t\t\ts:  testutil.MustBuildNodeFromStrings(t, \"/_\", \"bn\"),\n[tests/linux  ]   | +-\t\t\tp:  testutil.MustBuildPredicate(t, `\"_predicate\"@[]`),\n[tests/linux  ]   | +-\t\t\twant: map[string]int{`/_<bn>\t\"_predicate\"@[]\t\"meet\"@[2021-04-10T04:21:00Z]`: 1},\n[tests/linux  ]   | +-\t\t},\n[tests/linux  ]   | +-\t\t{\n[tests/linux  ]   | +-\t\t\tid:   \"FILTER isImmutable predicate\",\n[tests/linux  ]   | +-\t\t\tlo:   &storage.LookupOptions{FilterOptions: &filter.StorageOptions{Operation: filter.IsImmutable, Field: filter.PredicateField}},\n[tests/linux  ]   | +-\t\t\ts:    testutil.MustBuildNodeFromStrings(t, \"/u\", \"john\"),\n[tests/linux  ]   | +-\t\t\tp:    testutil.MustBuildPredicate(t, `\"meet\"@[2014-04-10T04:21:00Z]`),\n[tests/linux  ]   | +-\t\t\twant: map[string]int{},\n[tests/linux  ]   | +-\t\t},\n[tests/linux  ]   | +-\t\t{\n[tests/linux  ]   | +-\t\t\tid: \"FILTER isImmutable object\",\n[tests/linux  ]   | +-\t\t\tlo: &storage.LookupOptions{FilterOptions: &filter.StorageOptions{Operation: filter.IsImmutable, Field: filter.ObjectField}},\n[tests/linux  ]   | +-\t\t\ts:  testutil.MustBuildNodeFromStrings(t, \"/_\", \"bn\"),\n[tests/linux  ]   | +-\t\t\tp:  testutil.MustBuildPredicate(t, `\"_predicate\"@[]`),\n[tests/linux  ]   | +-\t\t\twant: map[string]int{`/_<bn>\t\"_predicate\"@[]\t\"height_cm\"@[]`: 1},\n[tests/linux  ]   | +-\t\t},\n[tests/linux  ]   | +-\t\t{\n[tests/linux  ]   | +-\t\t\tid: \"FILTER isTemporal predicate\",\n[tests/linux  ]   | +-\t\t\tlo: &storage.LookupOptions{FilterOptions: &filter.StorageOptions{Operation: filter.IsTemporal, Field: filter.PredicateField}},\n[tests/linux  ]   | +-\t\t\ts:  testutil.MustBuildNodeFromStrings(t, \"/u\", \"john\"),\n[tests/linux  ]   | +-\t\t\tp:  testutil.MustBuildPredicate(t, `\"meet\"@[2014-04-10T04:21:00Z]`),\n[tests/linux  ]   | +-\t\t\twant: map[string]int{`/u<john>\t\"meet\"@[2014-04-10T04:21:00Z]\t/u<mary>`: 1, `/u<john>\t\"meet\"@[2014-04-10T04:21:00Z]\t/u<bob>`: 1},\n[tests/linux  ]   | +-\t\t},\n[tests/linux  ]   | +-\t\t{\n[tests/linux  ]   | +-\t\t\tid: \"FILTER isTemporal object\",\n[tests/linux  ]   | +-\t\t\tlo: &storage.LookupOptions{FilterOptions: &filter.StorageOptions{Operation: filter.IsTemporal, Field: filter.ObjectField}},\n[tests/linux  ]   | +-\t\t\ts:  testutil.MustBuildNodeFromStrings(t, \"/_\", \"bn\"),\n[tests/linux  ]   | +-\t\t\tp:  testutil.MustBuildPredicate(t, `\"_predicate\"@[]`),\n[tests/linux  ]   | +-\t\t\twant: map[string]int{`/_<bn>\t\"_predicate\"@[]\t\"meet\"@[2020-04-10T04:21:00Z]`: 1, `/_<bn>\t\"_predicate\"@[]\t\"meet\"@[2021-04-10T04:21:00Z]`: 1},\n[tests/linux  ]   | +-\t\t},\n[tests/linux  ]   | +-\t\t{\n[tests/linux  ]   | +-\t\t\tid: \"FILTER latest between\",\n[tests/linux  ]   | +-\t\t\tlo: &storage.LookupOptions{LowerAnchor: testutil.MustBuildTime(t, \"2012-04-10T04:21:00Z\"), UpperAnchor: testutil.MustBuildTime(t, \"2013-04-10T04:21:00Z\"), FilterOptions: &filter.StorageOptions{Operation: filter.Latest, Field: filter.PredicateField}},\n[tests/linux  ]   | +-\t\t\ts:  testutil.MustBuildNodeFromStrings(t, \"/u\", \"john\"),\n[tests/linux  ]   | +-\t\t\tp:  testutil.MustBuildPredicate(t, `\"meet\"@[2013-04-10T04:21:00Z]`),\n[tests/linux  ]   | ++\t\t\tid:   \"FILTER latest predicate\",\n[tests/linux  ]   | ++\t\t\tlo:   &storage.LookupOptions{FilterOptions: &filter.StorageOptions{Operation: filter.Latest, Field: filter.PredicateField}},\n[tests/linux  ]   | ++\t\t\ts:    testutil.MustBuildNodeFromStrings(t, \"/u\", \"john\"),\n[tests/linux  ]   | ++\t\t\tp:    testutil.MustBuildPredicate(t, `\"meet\"@[2012-04-10T04:21:00Z]`),\n[tests/linux  ]   | ++\t\t\twant: map[string]int{`/u<john>\t\"meet\"@[2012-04-10T04:21:00Z]\t/u<mary>`: 1},\n[tests/linux  ]   | ++\t\t},\n[tests/linux  ]   | ++\t\t{\n[tests/linux  ]   | ++\t\t\tid:   \"FILTER latest predicate duplicate timestamp\",\n[tests/linux  ]   | ++\t\t\tlo:   &storage.LookupOptions{FilterOptions: &filter.StorageOptions{Operation: filter.Latest, Field: filter.PredicateField}},\n[tests/linux  ]   | ++\t\t\ts:    testutil.MustBuildNodeFromStrings(t, \"/u\", \"john\"),\n[tests/linux  ]   | ++\t\t\tp:    testutil.MustBuildPredicate(t, `\"meet\"@[2014-04-10T04:21:00Z]`),\n[tests/linux  ]   | ++\t\t\twant: map[string]int{`/u<john>\t\"meet\"@[2014-04-10T04:21:00Z]\t/u<mary>`: 1, `/u<john>\t\"meet\"@[2014-04-10T04:21:00Z]\t/u<bob>`: 1},\n[tests/linux  ]   | ++\t\t},\n[tests/linux  ]   | ++\t\t{\n[tests/linux  ]   | ++\t\t\tid:   \"FILTER latest object\",\n[tests/linux  ]   | ++\t\t\tlo:   &storage.LookupOptions{FilterOptions: &filter.StorageOptions{Operation: filter.Latest, Field: filter.ObjectField}},\n[tests/linux  ]   | ++\t\t\ts:    testutil.MustBuildNodeFromStrings(t, \"/_\", \"bn\"),\n[tests/linux  ]   | ++\t\t\tp:    testutil.MustBuildPredicate(t, `\"_predicate\"@[]`),\n[tests/linux  ]   | ++\t\t\twant: map[string]int{`/_<bn>\t\"_predicate\"@[]\t\"meet\"@[2021-04-10T04:21:00Z]`: 1},\n[tests/linux  ]   | ++\t\t},\n[tests/linux  ]   | ++\t\t{\n[tests/linux  ]   | ++\t\t\tid:   \"FILTER isImmutable predicate\",\n[tests/linux  ]   | ++\t\t\tlo:   &storage.LookupOptions{FilterOptions: &filter.StorageOptions{Operation: filter.IsImmutable, Field: filter.PredicateField}},\n[tests/linux  ]   | ++\t\t\ts:    testutil.MustBuildNodeFromStrings(t, \"/u\", \"john\"),\n[tests/linux  ]   | ++\t\t\tp:    testutil.MustBuildPredicate(t, `\"meet\"@[2014-04-10T04:21:00Z]`),\n[tests/linux  ]   | ++\t\t\twant: map[string]int{},\n[tests/linux  ]   | ++\t\t},\n[tests/linux  ]   | ++\t\t{\n[tests/linux  ]   | ++\t\t\tid:   \"FILTER isImmutable object\",\n[tests/linux  ]   | ++\t\t\tlo:   &storage.LookupOptions{FilterOptions: &filter.StorageOptions{Operation: filter.IsImmutable, Field: filter.ObjectField}},\n[tests/linux  ]   | ++\t\t\ts:    testutil.MustBuildNodeFromStrings(t, \"/_\", \"bn\"),\n[tests/linux  ]   | ++\t\t\tp:    testutil.MustBuildPredicate(t, `\"_predicate\"@[]`),\n[tests/linux  ]   | ++\t\t\twant: map[string]int{`/_<bn>\t\"_predicate\"@[]\t\"height_cm\"@[]`: 1},\n[tests/linux  ]   | ++\t\t},\n[tests/linux  ]   | ++\t\t{\n[tests/linux  ]   | ++\t\t\tid:   \"FILTER isTemporal predicate\",\n[tests/linux  ]   | ++\t\t\tlo:   &storage.LookupOptions{FilterOptions: &filter.StorageOptions{Operation: filter.IsTemporal, Field: filter.PredicateField}},\n[tests/linux  ]   | ++\t\t\ts:    testutil.MustBuildNodeFromStrings(t, \"/u\", \"john\"),\n[tests/linux  ]   | ++\t\t\tp:    testutil.MustBuildPredicate(t, `\"meet\"@[2014-04-10T04:21:00Z]`),\n[tests/linux  ]   | ++\t\t\twant: map[string]int{`/u<john>\t\"meet\"@[2014-04-10T04:21:00Z]\t/u<mary>`: 1, `/u<john>\t\"meet\"@[2014-04-10T04:21:00Z]\t/u<bob>`: 1},\n[tests/linux  ]   | ++\t\t},\n[tests/linux  ]   | ++\t\t{\n[tests/linux  ]   | ++\t\t\tid:   \"FILTER isTemporal object\",\n[tests/linux  ]   | ++\t\t\tlo:   &storage.LookupOptions{FilterOptions: &filter.StorageOptions{Operation: filter.IsTemporal, Field: filter.ObjectField}},\n[tests/linux  ]   | ++\t\t\ts:    testutil.MustBuildNodeFromStrings(t, \"/_\", \"bn\"),\n[tests/linux  ]   | ++\t\t\tp:    testutil.MustBuildPredicate(t, `\"_predicate\"@[]`),\n[tests/linux  ]   | ++\t\t\twant: map[string]int{`/_<bn>\t\"_predicate\"@[]\t\"meet\"@[2020-04-10T04:21:00Z]`: 1, `/_<bn>\t\"_predicate\"@[]\t\"meet\"@[2021-04-10T04:21:00Z]`: 1},\n[tests/linux  ]   | ++\t\t},\n[tests/linux  ]   | ++\t\t{\n[tests/linux  ]   | ++\t\t\tid:   \"FILTER latest between\",\n[tests/linux  ]   | ++\t\t\tlo:   &storage.LookupOptions{LowerAnchor: testutil.MustBuildTime(t, \"2012-04-10T04:21:00Z\"), UpperAnchor: testutil.MustBuildTime(t, \"2013-04-10T04:21:00Z\"), FilterOptions: &filter.StorageOptions{Operation: filter.Latest, Field: filter.PredicateField}},\n[tests/linux  ]   | ++\t\t\ts:    testutil.MustBuildNodeFromStrings(t, \"/u\", \"john\"),\n[tests/linux  ]   | ++\t\t\tp:    testutil.MustBuildPredicate(t, `\"meet\"@[2013-04-10T04:21:00Z]`),\n[tests/linux  ]   | + \t\t\twant: map[string]int{`/u<john>\t\"meet\"@[2013-04-10T04:21:00Z]\t/u<mary>`: 1},\n[tests/linux  ]   | + \t\t},\n[tests/linux  ]   | + \t}\n[tests/linux  ]   | +@@ -2349,59 +2349,59 @@\n[tests/linux  ]   | + \t\twant map[string]int\n[tests/linux  ]   | + \t}{\n[tests/linux  ]   | + \t\t{\n[tests/linux  ]   | +-\t\t\tid: \"FILTER latest predicate\",\n[tests/linux  ]   | +-\t\t\tlo: &storage.LookupOptions{FilterOptions: &filter.StorageOptions{Operation: filter.Latest, Field: filter.PredicateField}},\n[tests/linux  ]   | +-\t\t\tp:  testutil.MustBuildPredicate(t, `\"meet\"@[2012-04-10T04:21:00Z]`),\n[tests/linux  ]   | +-\t\t\to:  triple.NewNodeObject(testutil.MustBuildNodeFromStrings(t, \"/u\", \"mary\")),\n[tests/linux  ]   | +-\t\t\twant: map[string]int{`/u<john>\t\"meet\"@[2012-04-10T04:21:00Z]\t/u<mary>`: 1},\n[tests/linux  ]   | +-\t\t},\n[tests/linux  ]   | +-\t\t{\n[tests/linux  ]   | +-\t\t\tid: \"FILTER latest predicate duplicate timestamp\",\n[tests/linux  ]   | +-\t\t\tlo: &storage.LookupOptions{FilterOptions: &filter.StorageOptions{Operation: filter.Latest, Field: filter.PredicateField}},\n[tests/linux  ]   | +-\t\t\tp:  testutil.MustBuildPredicate(t, `\"meet\"@[2014-04-10T04:21:00Z]`),\n[tests/linux  ]   | +-\t\t\to:  triple.NewNodeObject(testutil.MustBuildNodeFromStrings(t, \"/u\", \"mary\")),\n[tests/linux  ]   | +-\t\t\twant: map[string]int{`/u<john>\t\"meet\"@[2014-04-10T04:21:00Z]\t/u<mary>`: 1},\n[tests/linux  ]   | +-\t\t},\n[tests/linux  ]   | +-\t\t{\n[tests/linux  ]   | +-\t\t\tid: \"FILTER latest object\",\n[tests/linux  ]   | +-\t\t\tlo: &storage.LookupOptions{FilterOptions: &filter.StorageOptions{Operation: filter.Latest, Field: filter.ObjectField}},\n[tests/linux  ]   | +-\t\t\tp:  testutil.MustBuildPredicate(t, `\"_predicate\"@[]`),\n[tests/linux  ]   | +-\t\t\to:  triple.NewPredicateObject(testutil.MustBuildPredicate(t, `\"meet\"@[2020-04-10T04:21:00Z]`)),\n[tests/linux  ]   | +-\t\t\twant: map[string]int{`/_<bn>\t\"_predicate\"@[]\t\"meet\"@[2020-04-10T04:21:00Z]`: 1},\n[tests/linux  ]   | +-\t\t},\n[tests/linux  ]   | +-\t\t{\n[tests/linux  ]   | +-\t\t\tid: \"FILTER isImmutable predicate\",\n[tests/linux  ]   | +-\t\t\tlo: &storage.LookupOptions{FilterOptions: &filter.StorageOptions{Operation: filter.IsImmutable, Field: filter.PredicateField}},\n[tests/linux  ]   | +-\t\t\tp:  testutil.MustBuildPredicate(t, `\"parent_of\"@[]`),\n[tests/linux  ]   | +-\t\t\to:  triple.NewNodeObject(testutil.MustBuildNodeFromStrings(t, \"/u\", \"paul\")),\n[tests/linux  ]   | +-\t\t\twant: map[string]int{`/u<john>\t\"parent_of\"@[]\t/u<paul>`: 1},\n[tests/linux  ]   | +-\t\t},\n[tests/linux  ]   | +-\t\t{\n[tests/linux  ]   | +-\t\t\tid:   \"FILTER isImmutable object\",\n[tests/linux  ]   | +-\t\t\tlo:   &storage.LookupOptions{FilterOptions: &filter.StorageOptions{Operation: filter.IsImmutable, Field: filter.ObjectField}},\n[tests/linux  ]   | +-\t\t\tp:    testutil.MustBuildPredicate(t, `\"_predicate\"@[]`),\n[tests/linux  ]   | +-\t\t\to:    triple.NewPredicateObject(testutil.MustBuildPredicate(t, `\"meet\"@[2020-04-10T04:21:00Z]`)),\n[tests/linux  ]   | +-\t\t\twant: map[string]int{},\n[tests/linux  ]   | +-\t\t},\n[tests/linux  ]   | +-\t\t{\n[tests/linux  ]   | +-\t\t\tid: \"FILTER isTemporal predicate\",\n[tests/linux  ]   | +-\t\t\tlo: &storage.LookupOptions{FilterOptions: &filter.StorageOptions{Operation: filter.IsTemporal, Field: filter.PredicateField}},\n[tests/linux  ]   | +-\t\t\tp:  testutil.MustBuildPredicate(t, `\"meet\"@[2014-04-10T04:21:00Z]`),\n[tests/linux  ]   | +-\t\t\to:  triple.NewNodeObject(testutil.MustBuildNodeFromStrings(t, \"/u\", \"mary\")),\n[tests/linux  ]   | +-\t\t\twant: map[string]int{`/u<john>\t\"meet\"@[2014-04-10T04:21:00Z]\t/u<mary>`: 1},\n[tests/linux  ]   | +-\t\t},\n[tests/linux  ]   | +-\t\t{\n[tests/linux  ]   | +-\t\t\tid:   \"FILTER isTemporal object\",\n[tests/linux  ]   | +-\t\t\tlo:   &storage.LookupOptions{FilterOptions: &filter.StorageOptions{Operation: filter.IsTemporal, Field: filter.ObjectField}},\n[tests/linux  ]   | +-\t\t\tp:    testutil.MustBuildPredicate(t, `\"_predicate\"@[]`),\n[tests/linux  ]   | +-\t\t\to:    triple.NewPredicateObject(testutil.MustBuildPredicate(t, `\"height_cm\"@[]`)),\n[tests/linux  ]   | +-\t\t\twant: map[string]int{},\n[tests/linux  ]   | +-\t\t},\n[tests/linux  ]   | +-\t\t{\n[tests/linux  ]   | +-\t\t\tid: \"FILTER latest between\",\n[tests/linux  ]   | +-\t\t\tlo: &storage.LookupOptions{LowerAnchor: testutil.MustBuildTime(t, \"2012-04-10T04:21:00Z\"), UpperAnchor: testutil.MustBuildTime(t, \"2013-04-10T04:21:00Z\"), FilterOptions: &filter.StorageOptions{Operation: filter.Latest, Field: filter.PredicateField}},\n[tests/linux  ]   | +-\t\t\tp:  testutil.MustBuildPredicate(t, `\"meet\"@[2013-04-10T04:21:00Z]`),\n[tests/linux  ]   | +-\t\t\to:  triple.NewNodeObject(testutil.MustBuildNodeFromStrings(t, \"/u\", \"mary\")),\n[tests/linux  ]   | ++\t\t\tid:   \"FILTER latest predicate\",\n[tests/linux  ]   | ++\t\t\tlo:   &storage.LookupOptions{FilterOptions: &filter.StorageOptions{Operation: filter.Latest, Field: filter.PredicateField}},\n[tests/linux  ]   | ++\t\t\tp:    testutil.MustBuildPredicate(t, `\"meet\"@[2012-04-10T04:21:00Z]`),\n[tests/linux  ]   | ++\t\t\to:    triple.NewNodeObject(testutil.MustBuildNodeFromStrings(t, \"/u\", \"mary\")),\n[tests/linux  ]   | ++\t\t\twant: map[string]int{`/u<john>\t\"meet\"@[2012-04-10T04:21:00Z]\t/u<mary>`: 1},\n[tests/linux  ]   | ++\t\t},\n[tests/linux  ]   | ++\t\t{\n[tests/linux  ]   | ++\t\t\tid:   \"FILTER latest predicate duplicate timestamp\",\n[tests/linux  ]   | ++\t\t\tlo:   &storage.LookupOptions{FilterOptions: &filter.StorageOptions{Operation: filter.Latest, Field: filter.PredicateField}},\n[tests/linux  ]   | ++\t\t\tp:    testutil.MustBuildPredicate(t, `\"meet\"@[2014-04-10T04:21:00Z]`),\n[tests/linux  ]   | ++\t\t\to:    triple.NewNodeObject(testutil.MustBuildNodeFromStrings(t, \"/u\", \"mary\")),\n[tests/linux  ]   | ++\t\t\twant: map[string]int{`/u<john>\t\"meet\"@[2014-04-10T04:21:00Z]\t/u<mary>`: 1},\n[tests/linux  ]   | ++\t\t},\n[tests/linux  ]   | ++\t\t{\n[tests/linux  ]   | ++\t\t\tid:   \"FILTER latest object\",\n[tests/linux  ]   | ++\t\t\tlo:   &storage.LookupOptions{FilterOptions: &filter.StorageOptions{Operation: filter.Latest, Field: filter.ObjectField}},\n[tests/linux  ]   | ++\t\t\tp:    testutil.MustBuildPredicate(t, `\"_predicate\"@[]`),\n[tests/linux  ]   | ++\t\t\to:    triple.NewPredicateObject(testutil.MustBuildPredicate(t, `\"meet\"@[2020-04-10T04:21:00Z]`)),\n[tests/linux  ]   | ++\t\t\twant: map[string]int{`/_<bn>\t\"_predicate\"@[]\t\"meet\"@[2020-04-10T04:21:00Z]`: 1},\n[tests/linux  ]   | ++\t\t},\n[tests/linux  ]   | ++\t\t{\n[tests/linux  ]   | ++\t\t\tid:   \"FILTER isImmutable predicate\",\n[tests/linux  ]   | ++\t\t\tlo:   &storage.LookupOptions{FilterOptions: &filter.StorageOptions{Operation: filter.IsImmutable, Field: filter.PredicateField}},\n[tests/linux  ]   | ++\t\t\tp:    testutil.MustBuildPredicate(t, `\"parent_of\"@[]`),\n[tests/linux  ]   | ++\t\t\to:    triple.NewNodeObject(testutil.MustBuildNodeFromStrings(t, \"/u\", \"paul\")),\n[tests/linux  ]   | ++\t\t\twant: map[string]int{`/u<john>\t\"parent_of\"@[]\t/u<paul>`: 1},\n[tests/linux  ]   | ++\t\t},\n[tests/linux  ]   | ++\t\t{\n[tests/linux  ]   | ++\t\t\tid:   \"FILTER isImmutable object\",\n[tests/linux  ]   | ++\t\t\tlo:   &storage.LookupOptions{FilterOptions: &filter.StorageOptions{Operation: filter.IsImmutable, Field: filter.ObjectField}},\n[tests/linux  ]   | ++\t\t\tp:    testutil.MustBuildPredicate(t, `\"_predicate\"@[]`),\n[tests/linux  ]   | ++\t\t\to:    triple.NewPredicateObject(testutil.MustBuildPredicate(t, `\"meet\"@[2020-04-10T04:21:00Z]`)),\n[tests/linux  ]   | ++\t\t\twant: map[string]int{},\n[tests/linux  ]   | ++\t\t},\n[tests/linux  ]   | ++\t\t{\n[tests/linux  ]   | ++\t\t\tid:   \"FILTER isTemporal predicate\",\n[tests/linux  ]   | ++\t\t\tlo:   &storage.LookupOptions{FilterOptions: &filter.StorageOptions{Operation: filter.IsTemporal, Field: filter.PredicateField}},\n[tests/linux  ]   | ++\t\t\tp:    testutil.MustBuildPredicate(t, `\"meet\"@[2014-04-10T04:21:00Z]`),\n[tests/linux  ]   | ++\t\t\to:    triple.NewNodeObject(testutil.MustBuildNodeFromStrings(t, \"/u\", \"mary\")),\n[tests/linux  ]   | ++\t\t\twant: map[string]int{`/u<john>\t\"meet\"@[2014-04-10T04:21:00Z]\t/u<mary>`: 1},\n[tests/linux  ]   | ++\t\t},\n[tests/linux  ]   | ++\t\t{\n[tests/linux  ]   | ++\t\t\tid:   \"FILTER isTemporal object\",\n[tests/linux  ]   | ++\t\t\tlo:   &storage.LookupOptions{FilterOptions: &filter.StorageOptions{Operation: filter.IsTemporal, Field: filter.ObjectField}},\n[tests/linux  ]   | ++\t\t\tp:    testutil.MustBuildPredicate(t, `\"_predicate\"@[]`),\n[tests/linux  ]   | ++\t\t\to:    triple.NewPredicateObject(testutil.MustBuildPredicate(t, `\"height_cm\"@[]`)),\n[tests/linux  ]   | ++\t\t\twant: map[string]int{},\n[tests/linux  ]   | ++\t\t},\n[tests/linux  ]   | ++\t\t{\n[tests/linux  ]   | ++\t\t\tid:   \"FILTER latest between\",\n[tests/linux  ]   | ++\t\t\tlo:   &storage.LookupOptions{LowerAnchor: testutil.MustBuildTime(t, \"2012-04-10T04:21:00Z\"), UpperAnchor: testutil.MustBuildTime(t, \"2013-04-10T04:21:00Z\"), FilterOptions: &filter.StorageOptions{Operation: filter.Latest, Field: filter.PredicateField}},\n[tests/linux  ]   | ++\t\t\tp:    testutil.MustBuildPredicate(t, `\"meet\"@[2013-04-10T04:21:00Z]`),\n[tests/linux  ]   | ++\t\t\to:    triple.NewNodeObject(testutil.MustBuildNodeFromStrings(t, \"/u\", \"mary\")),\n[tests/linux  ]   | + \t\t\twant: map[string]int{`/u<john>\t\"meet\"@[2013-04-10T04:21:00Z]\t/u<mary>`: 1},\n[tests/linux  ]   | + \t\t},\n[tests/linux  ]   | + \t}\n[tests/linux  ]   | +@@ -2570,38 +2570,38 @@\n[tests/linux  ]   | + \t\twant map[string]int\n[tests/linux  ]   | + \t}{\n[tests/linux  ]   | + \t\t{\n[tests/linux  ]   | +-\t\t\tid: \"FILTER latest predicate\",\n[tests/linux  ]   | +-\t\t\tlo: &storage.LookupOptions{FilterOptions: &filter.StorageOptions{Operation: filter.Latest, Field: filter.PredicateField}},\n[tests/linux  ]   | +-\t\t\twant: map[string]int{`/u<john>\t\"meet\"@[2014-04-10T04:21:00Z]\t/u<mary>`: 1, `/u<john>\t\"meet\"@[2014-04-10T04:21:00Z]\t/u<bob>`: 1},\n[tests/linux  ]   | +-\t\t},\n[tests/linux  ]   | +-\t\t{\n[tests/linux  ]   | +-\t\t\tid: \"FILTER latest object\",\n[tests/linux  ]   | +-\t\t\tlo: &storage.LookupOptions{FilterOptions: &filter.StorageOptions{Operation: filter.Latest, Field: filter.ObjectField}},\n[tests/linux  ]   | +-\t\t\twant: map[string]int{`/_<bn>\t\"_predicate\"@[]\t\"meet\"@[2021-04-10T04:21:00Z]`: 1},\n[tests/linux  ]   | +-\t\t},\n[tests/linux  ]   | +-\t\t{\n[tests/linux  ]   | +-\t\t\tid: \"FILTER isImmutable predicate\",\n[tests/linux  ]   | +-\t\t\tlo: &storage.LookupOptions{FilterOptions: &filter.StorageOptions{Operation: filter.IsImmutable, Field: filter.PredicateField}},\n[tests/linux  ]   | ++\t\t\tid:   \"FILTER latest predicate\",\n[tests/linux  ]   | ++\t\t\tlo:   &storage.LookupOptions{FilterOptions: &filter.StorageOptions{Operation: filter.Latest, Field: filter.PredicateField}},\n[tests/linux  ]   | ++\t\t\twant: map[string]int{`/u<john>\t\"meet\"@[2014-04-10T04:21:00Z]\t/u<mary>`: 1, `/u<john>\t\"meet\"@[2014-04-10T04:21:00Z]\t/u<bob>`: 1},\n[tests/linux  ]   | ++\t\t},\n[tests/linux  ]   | ++\t\t{\n[tests/linux  ]   | ++\t\t\tid:   \"FILTER latest object\",\n[tests/linux  ]   | ++\t\t\tlo:   &storage.LookupOptions{FilterOptions: &filter.StorageOptions{Operation: filter.Latest, Field: filter.ObjectField}},\n[tests/linux  ]   | ++\t\t\twant: map[string]int{`/_<bn>\t\"_predicate\"@[]\t\"meet\"@[2021-04-10T04:21:00Z]`: 1},\n[tests/linux  ]   | ++\t\t},\n[tests/linux  ]   | ++\t\t{\n[tests/linux  ]   | ++\t\t\tid:   \"FILTER isImmutable predicate\",\n[tests/linux  ]   | ++\t\t\tlo:   &storage.LookupOptions{FilterOptions: &filter.StorageOptions{Operation: filter.IsImmutable, Field: filter.PredicateField}},\n[tests/linux  ]   | + \t\t\twant: map[string]int{`/u<john>\t\"parent_of\"@[]\t/u<paul>`: 1, `/_<bn>\t\"_predicate\"@[]\t\"meet\"@[2020-04-10T04:21:00Z]`: 1, `/_<bn>\t\"_predicate\"@[]\t\"meet\"@[2021-04-10T04:21:00Z]`: 1, `/_<bn>\t\"_predicate\"@[]\t\"height_cm\"@[]`: 1},\n[tests/linux  ]   | + \t\t},\n[tests/linux  ]   | + \t\t{\n[tests/linux  ]   | +-\t\t\tid: \"FILTER isImmutable object\",\n[tests/linux  ]   | +-\t\t\tlo: &storage.LookupOptions{FilterOptions: &filter.StorageOptions{Operation: filter.IsImmutable, Field: filter.ObjectField}},\n[tests/linux  ]   | +-\t\t\twant: map[string]int{`/_<bn>\t\"_predicate\"@[]\t\"height_cm\"@[]`: 1},\n[tests/linux  ]   | +-\t\t},\n[tests/linux  ]   | +-\t\t{\n[tests/linux  ]   | +-\t\t\tid: \"FILTER isTemporal predicate\",\n[tests/linux  ]   | +-\t\t\tlo: &storage.LookupOptions{FilterOptions: &filter.StorageOptions{Operation: filter.IsTemporal, Field: filter.PredicateField}},\n[tests/linux  ]   | +-\t\t\twant: map[string]int{`/u<john>\t\"meet\"@[2012-04-10T04:21:00Z]\t/u<mary>`: 1, `/u<john>\t\"meet\"@[2013-04-10T04:21:00Z]\t/u<mary>`: 1, `/u<john>\t\"meet\"@[2014-04-10T04:21:00Z]\t/u<mary>`: 1, `/u<john>\t\"meet\"@[2014-04-10T04:21:00Z]\t/u<bob>`: 1},\n[tests/linux  ]   | +-\t\t},\n[tests/linux  ]   | +-\t\t{\n[tests/linux  ]   | +-\t\t\tid: \"FILTER isTemporal object\",\n[tests/linux  ]   | +-\t\t\tlo: &storage.LookupOptions{FilterOptions: &filter.StorageOptions{Operation: filter.IsTemporal, Field: filter.ObjectField}},\n[tests/linux  ]   | +-\t\t\twant: map[string]int{`/_<bn>\t\"_predicate\"@[]\t\"meet\"@[2020-04-10T04:21:00Z]`: 1, `/_<bn>\t\"_predicate\"@[]\t\"meet\"@[2021-04-10T04:21:00Z]`: 1},\n[tests/linux  ]   | +-\t\t},\n[tests/linux  ]   | +-\t\t{\n[tests/linux  ]   | +-\t\t\tid: \"FILTER latest between\",\n[tests/linux  ]   | +-\t\t\tlo: &storage.LookupOptions{LowerAnchor: testutil.MustBuildTime(t, \"2012-04-10T04:21:00Z\"), UpperAnchor: testutil.MustBuildTime(t, \"2013-04-10T04:21:00Z\"), FilterOptions: &filter.StorageOptions{Operation: filter.Latest, Field: filter.PredicateField}},\n[tests/linux  ]   | ++\t\t\tid:   \"FILTER isImmutable object\",\n[tests/linux  ]   | ++\t\t\tlo:   &storage.LookupOptions{FilterOptions: &filter.StorageOptions{Operation: filter.IsImmutable, Field: filter.ObjectField}},\n[tests/linux  ]   | ++\t\t\twant: map[string]int{`/_<bn>\t\"_predicate\"@[]\t\"height_cm\"@[]`: 1},\n[tests/linux  ]   | ++\t\t},\n[tests/linux  ]   | ++\t\t{\n[tests/linux  ]   | ++\t\t\tid:   \"FILTER isTemporal predicate\",\n[tests/linux  ]   | ++\t\t\tlo:   &storage.LookupOptions{FilterOptions: &filter.StorageOptions{Operation: filter.IsTemporal, Field: filter.PredicateField}},\n[tests/linux  ]   | ++\t\t\twant: map[string]int{`/u<john>\t\"meet\"@[2012-04-10T04:21:00Z]\t/u<mary>`: 1, `/u<john>\t\"meet\"@[2013-04-10T04:21:00Z]\t/u<mary>`: 1, `/u<john>\t\"meet\"@[2014-04-10T04:21:00Z]\t/u<mary>`: 1, `/u<john>\t\"meet\"@[2014-04-10T04:21:00Z]\t/u<bob>`: 1},\n[tests/linux  ]   | ++\t\t},\n[tests/linux  ]   | ++\t\t{\n[tests/linux  ]   | ++\t\t\tid:   \"FILTER isTemporal object\",\n[tests/linux  ]   | ++\t\t\tlo:   &storage.LookupOptions{FilterOptions: &filter.StorageOptions{Operation: filter.IsTemporal, Field: filter.ObjectField}},\n[tests/linux  ]   | ++\t\t\twant: map[string]int{`/_<bn>\t\"_predicate\"@[]\t\"meet\"@[2020-04-10T04:21:00Z]`: 1, `/_<bn>\t\"_predicate\"@[]\t\"meet\"@[2021-04-10T04:21:00Z]`: 1},\n[tests/linux  ]   | ++\t\t},\n[tests/linux  ]   | ++\t\t{\n[tests/linux  ]   | ++\t\t\tid:   \"FILTER latest between\",\n[tests/linux  ]   | ++\t\t\tlo:   &storage.LookupOptions{LowerAnchor: testutil.MustBuildTime(t, \"2012-04-10T04:21:00Z\"), UpperAnchor: testutil.MustBuildTime(t, \"2013-04-10T04:21:00Z\"), FilterOptions: &filter.StorageOptions{Operation: filter.Latest, Field: filter.PredicateField}},\n[tests/linux  ]   | + \t\t\twant: map[string]int{`/u<john>\t\"meet\"@[2013-04-10T04:21:00Z]\t/u<mary>`: 1},\n[tests/linux  ]   | + \t\t},\n[tests/linux  ]   | + \t}\n[tests/linux  ]   | +diff tools/compliance/runner.go.orig tools/compliance/runner.go\n[tests/linux  ]   | +--- tools/compliance/runner.go.orig\n[tests/linux  ]   | ++++ tools/compliance/runner.go\n[tests/linux  ]   | +@@ -146,7 +146,7 @@\n[tests/linux  ]   | + \tEntries []*AssertionBatteryEntry\n[tests/linux  ]   | + }\n[tests/linux  ]   | + \n[tests/linux  ]   | +-//AssertionBatteryEntry contains the result of running a story.\n[tests/linux  ]   | ++// AssertionBatteryEntry contains the result of running a story.\n[tests/linux  ]   | + type AssertionBatteryEntry struct {\n[tests/linux  ]   | + \tStory   *Story\n[tests/linux  ]   | + \tOutcome map[string]*AssertionOutcome\n[tests/linux  ]   \u274c  Failure - Main Run go fmt\n[tests/windows] exitcode '1': failure\n[tests/linux  ] exitcode '1': failure\n[tests/windows] \ud83c\udfc1  Job failed\n[tests/linux  ] \ud83c\udfc1  Job failed\n",
    "actions_stderr": "Error: Job 'linux' failed\n"
}