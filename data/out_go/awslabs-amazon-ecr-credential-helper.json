{
    "repository": "awslabs/amazon-ecr-credential-helper",
    "clone_url": "https://github.com/awslabs/amazon-ecr-credential-helper.git",
    "timestamp": "2023-05-30T11:42:40.841288Z",
    "clone_success": true,
    "number of actions": 2,
    "number_of_test_actions": 1,
    "actions_successful": true,
    "actions_stdout": "[Build/ubuntu-latest / Go 1.15] \ud83d\ude80  Start image=crawlergpt:latest\n[Build/ubuntu-latest / Go 1.15]   \ud83d\udc33  docker pull image=crawlergpt:latest platform= username= forcePull=false\n[Build/ubuntu-latest / Go 1.15]   \ud83d\udc33  docker create image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[Build/ubuntu-latest / Go 1.15]   \ud83d\udc33  docker run image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[Build/ubuntu-latest / Go 1.15]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/awslabs-amazon-ecr-credential-helper] user=0 workdir=\n[Build/ubuntu-latest / Go 1.15]   \u2601  git clone 'https://github.com/actions/setup-go' # ref=v3\n[Build/ubuntu-latest / Go 1.15] \ud83e\uddea  Matrix: map[go:1.15 os:ubuntu-latest]\n[Build/ubuntu-latest / Go 1.15] \u2b50 Run Main actions/checkout@v3\n[Build/ubuntu-latest / Go 1.15]   \u2705  Success - Main actions/checkout@v3\n[Build/ubuntu-latest / Go 1.15] \u2b50 Run Main actions/setup-go@v3\n[Build/ubuntu-latest / Go 1.15]   \ud83d\udc33  docker cp src=/home/andre-silva/.cache/act/actions-setup-go@v3/ dst=/var/run/act/actions/actions-setup-go@v3/\n[Build/ubuntu-latest / Go 1.15]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /var/run/act/actions/actions-setup-go@v3/] user=0 workdir=\n[Build/ubuntu-latest / Go 1.15]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/actions-setup-go@v3/dist/setup/index.js] user= workdir=\n[Build/ubuntu-latest / Go 1.15]   | Setup go version spec 1.15\n[Build/ubuntu-latest / Go 1.15]   \ud83d\udcac  ::debug::isExplicit: \n[Build/ubuntu-latest / Go 1.15]   \ud83d\udcac  ::debug::explicit? false\n[Build/ubuntu-latest / Go 1.15]   \ud83d\udcac  ::debug::isExplicit: 1.14.15\n[Build/ubuntu-latest / Go 1.15]   \ud83d\udcac  ::debug::explicit? true\n[Build/ubuntu-latest / Go 1.15]   \ud83d\udcac  ::debug::isExplicit: 1.15.15\n[Build/ubuntu-latest / Go 1.15]   \ud83d\udcac  ::debug::explicit? true\n[Build/ubuntu-latest / Go 1.15]   \ud83d\udcac  ::debug::isExplicit: 1.16.7\n[Build/ubuntu-latest / Go 1.15]   \ud83d\udcac  ::debug::explicit? true\n[Build/ubuntu-latest / Go 1.15]   \ud83d\udcac  ::debug::evaluating 3 versions\n[Build/ubuntu-latest / Go 1.15]   \ud83d\udcac  ::debug::matched: 1.15.15\n[Build/ubuntu-latest / Go 1.15]   \ud83d\udcac  ::debug::checking cache: /opt/hostedtoolcache/go/1.15.15/x64\n[Build/ubuntu-latest / Go 1.15]   \ud83d\udcac  ::debug::Found tool in cache go 1.15.15 x64\n[Build/ubuntu-latest / Go 1.15]   | Found in cache @ /opt/hostedtoolcache/go/1.15.15/x64\n[Build/ubuntu-latest / Go 1.15]   | Added go to the path\n[Build/ubuntu-latest / Go 1.15]   \ud83d\udcac  ::debug::which go :/opt/hostedtoolcache/go/1.15.15/x64/bin/go:\n[Build/ubuntu-latest / Go 1.15]   \ud83d\udcac  ::debug::go env GOPATH :/home/runneradmin/go:\n[Build/ubuntu-latest / Go 1.15]   \ud83d\udcac  ::debug::creating /home/runneradmin/go\n[Build/ubuntu-latest / Go 1.15]   \ud83d\udcac  ::debug::creating /home/runneradmin/go/bin\n[Build/ubuntu-latest / Go 1.15]   \ud83d\udcac  ::debug::add bin true\n[Build/ubuntu-latest / Go 1.15]   | Successfully set up Go version 1.15\n[Build/ubuntu-latest / Go 1.15]   \u2753 add-matcher /run/act/actions/actions-setup-go@v3/matchers.json\n[Build/ubuntu-latest / Go 1.15]   | go version go1.15.15 linux/amd64\n[Build/ubuntu-latest / Go 1.15]   | \n[Build/ubuntu-latest / Go 1.15]   \u2753  ::group::go env\n[Build/ubuntu-latest / Go 1.15]   | GO111MODULE=\"\"\n[Build/ubuntu-latest / Go 1.15]   | GOARCH=\"amd64\"\n[Build/ubuntu-latest / Go 1.15]   | GOBIN=\"\"\n[Build/ubuntu-latest / Go 1.15]   | GOCACHE=\"/home/runneradmin/.cache/go-build\"\n[Build/ubuntu-latest / Go 1.15]   | GOENV=\"/home/runneradmin/.config/go/env\"\n[Build/ubuntu-latest / Go 1.15]   | GOEXE=\"\"\n[Build/ubuntu-latest / Go 1.15]   | GOFLAGS=\"\"\n[Build/ubuntu-latest / Go 1.15]   | GOHOSTARCH=\"amd64\"\n[Build/ubuntu-latest / Go 1.15]   | GOHOSTOS=\"linux\"\n[Build/ubuntu-latest / Go 1.15]   | GOINSECURE=\"\"\n[Build/ubuntu-latest / Go 1.15]   | GOMODCACHE=\"/home/runneradmin/go/pkg/mod\"\n[Build/ubuntu-latest / Go 1.15]   | GONOPROXY=\"\"\n[Build/ubuntu-latest / Go 1.15]   | GONOSUMDB=\"\"\n[Build/ubuntu-latest / Go 1.15]   | GOOS=\"linux\"\n[Build/ubuntu-latest / Go 1.15]   | GOPATH=\"/home/runneradmin/go\"\n[Build/ubuntu-latest / Go 1.15]   | GOPRIVATE=\"\"\n[Build/ubuntu-latest / Go 1.15]   | GOPROXY=\"https://proxy.golang.org,direct\"\n[Build/ubuntu-latest / Go 1.15]   | GOROOT=\"/opt/hostedtoolcache/go/1.15.15/x64\"\n[Build/ubuntu-latest / Go 1.15]   | GOSUMDB=\"sum.golang.org\"\n[Build/ubuntu-latest / Go 1.15]   | GOTMPDIR=\"\"\n[Build/ubuntu-latest / Go 1.15]   | GOTOOLDIR=\"/opt/hostedtoolcache/go/1.15.15/x64/pkg/tool/linux_amd64\"\n[Build/ubuntu-latest / Go 1.15]   | GCCGO=\"gccgo\"\n[Build/ubuntu-latest / Go 1.15]   | AR=\"ar\"\n[Build/ubuntu-latest / Go 1.15]   | CC=\"gcc\"\n[Build/ubuntu-latest / Go 1.15]   | CXX=\"g++\"\n[Build/ubuntu-latest / Go 1.15]   | CGO_ENABLED=\"1\"\n[Build/ubuntu-latest / Go 1.15]   | GOMOD=\"\"\n[Build/ubuntu-latest / Go 1.15]   | CGO_CFLAGS=\"-g -O2\"\n[Build/ubuntu-latest / Go 1.15]   | CGO_CPPFLAGS=\"\"\n[Build/ubuntu-latest / Go 1.15]   | CGO_CXXFLAGS=\"-g -O2\"\n[Build/ubuntu-latest / Go 1.15]   | CGO_FFLAGS=\"-g -O2\"\n[Build/ubuntu-latest / Go 1.15]   | CGO_LDFLAGS=\"-g -O2\"\n[Build/ubuntu-latest / Go 1.15]   | PKG_CONFIG=\"pkg-config\"\n[Build/ubuntu-latest / Go 1.15]   | GOGCCFLAGS=\"-fPIC -m64 -pthread -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build066206242=/tmp/go-build -gno-record-gcc-switches\"\n[Build/ubuntu-latest / Go 1.15]   | \n[Build/ubuntu-latest / Go 1.15]   \u2753  ::endgroup::\n[Build/ubuntu-latest / Go 1.15]   \u2705  Success - Main actions/setup-go@v3\n[Build/ubuntu-latest / Go 1.15]   \u2699  ::set-output:: go-version=1.15.15\n[Build/ubuntu-latest / Go 1.15]   \u2699  ::add-path:: /opt/hostedtoolcache/go/1.15.15/x64/bin\n[Build/ubuntu-latest / Go 1.15]   \u2699  ::add-path:: /home/runneradmin/go/bin\n[Build/ubuntu-latest / Go 1.15] \u2b50 Run Main Cross-compile all variants except for Apple Silicon\n[Build/ubuntu-latest / Go 1.15]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/4] user= workdir=\n[Build/ubuntu-latest / Go 1.15]   | git rev-parse --short=7 HEAD > GITCOMMIT_SHA\n[Build/ubuntu-latest / Go 1.15]   | ./scripts/build_variant.sh linux amd64 0.7.0 7f2db5b\n[Build/ubuntu-latest / Go 1.15]   | go: downloading github.com/docker/docker-credential-helpers v0.7.0\n[Build/ubuntu-latest / Go 1.15]   | go: downloading github.com/sirupsen/logrus v1.9.2\n[Build/ubuntu-latest / Go 1.15]   | go: downloading github.com/aws/aws-sdk-go-v2 v1.18.0\n[Build/ubuntu-latest / Go 1.15]   | go: downloading github.com/aws/smithy-go v1.13.5\n[Build/ubuntu-latest / Go 1.15]   | go: downloading github.com/mitchellh/go-homedir v1.1.0\n[Build/ubuntu-latest / Go 1.15]   | go: downloading golang.org/x/sys v0.0.0-20220825204002-c680a09ffe64\n[Build/ubuntu-latest / Go 1.15]   | go: downloading github.com/aws/aws-sdk-go-v2/config v1.18.25\n[Build/ubuntu-latest / Go 1.15]   | go: downloading github.com/aws/aws-sdk-go-v2/service/ecr v1.18.11\n[Build/ubuntu-latest / Go 1.15]   | go: downloading github.com/aws/aws-sdk-go-v2/service/ecrpublic v1.16.2\n[Build/ubuntu-latest / Go 1.15]   | go: downloading github.com/aws/aws-sdk-go-v2/credentials v1.13.24\n[Build/ubuntu-latest / Go 1.15]   | go: downloading github.com/aws/aws-sdk-go-v2/feature/ec2/imds v1.13.3\n[Build/ubuntu-latest / Go 1.15]   | go: downloading github.com/aws/aws-sdk-go-v2/service/sso v1.12.10\n[Build/ubuntu-latest / Go 1.15]   | go: downloading github.com/aws/aws-sdk-go-v2/internal/ini v1.3.34\n[Build/ubuntu-latest / Go 1.15]   | go: downloading github.com/aws/aws-sdk-go-v2/service/ssooidc v1.14.10\n[Build/ubuntu-latest / Go 1.15]   | go: downloading github.com/aws/aws-sdk-go-v2/service/sts v1.19.0\n[Build/ubuntu-latest / Go 1.15]   | go: downloading github.com/aws/aws-sdk-go-v2/internal/configsources v1.1.33\n[Build/ubuntu-latest / Go 1.15]   | go: downloading github.com/jmespath/go-jmespath v0.4.0\n[Build/ubuntu-latest / Go 1.15]   | go: downloading github.com/aws/aws-sdk-go-v2/internal/endpoints/v2 v2.4.27\n[Build/ubuntu-latest / Go 1.15]   | go: downloading github.com/aws/aws-sdk-go-v2/service/internal/presigned-url v1.9.27\n[Build/ubuntu-latest / Go 1.15]   | Built ecr-login for linux-amd64-0.7.0\n[Build/ubuntu-latest / Go 1.15]   | ./scripts/build_variant.sh linux arm64 0.7.0 7f2db5b\n[Build/ubuntu-latest / Go 1.15]   | Built ecr-login for linux-arm64-0.7.0\n[Build/ubuntu-latest / Go 1.15]   | ./scripts/build_variant.sh darwin amd64 0.7.0 7f2db5b\n[Build/ubuntu-latest / Go 1.15]   | Built ecr-login for darwin-amd64-0.7.0\n[Build/ubuntu-latest / Go 1.15]   | ./scripts/build_variant.sh windows amd64 0.7.0 7f2db5b\n[Build/ubuntu-latest / Go 1.15]   | Built ecr-login for windows-amd64-0.7.0\n[Build/ubuntu-latest / Go 1.15]   \u2705  Success - Main Cross-compile all variants except for Apple Silicon\n[Build/ubuntu-latest / Go 1.15] \u2b50 Run Main make test\n[Build/ubuntu-latest / Go 1.15]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/5] user= workdir=\n[Build/ubuntu-latest / Go 1.15]   | cd ./ecr-login && go test -v -timeout 30s -short -cover ./...\n[Build/ubuntu-latest / Go 1.15]   | go: downloading github.com/stretchr/testify v1.8.2\n[Build/ubuntu-latest / Go 1.15]   | go: downloading github.com/pmezard/go-difflib v1.0.0\n[Build/ubuntu-latest / Go 1.15]   | go: downloading gopkg.in/yaml.v3 v3.0.1\n[Build/ubuntu-latest / Go 1.15]   | go: downloading github.com/davecgh/go-spew v1.1.1\n[Build/ubuntu-latest / Go 1.15]   | === RUN   TestGetSuccess\n[Build/ubuntu-latest / Go 1.15]   | --- PASS: TestGetSuccess (0.00s)\n[Build/ubuntu-latest / Go 1.15]   | === RUN   TestGetError\n[Build/ubuntu-latest / Go 1.15]   | time=\"2023-05-30T11:48:16Z\" level=error msg=\"Error retrieving credentials\" error=\"test error\"\n[Build/ubuntu-latest / Go 1.15]   | --- PASS: TestGetError (0.00s)\n[Build/ubuntu-latest / Go 1.15]   | === RUN   TestGetNoMatch\n[Build/ubuntu-latest / Go 1.15]   | time=\"2023-05-30T11:48:16Z\" level=error msg=\"Error parsing the serverURL\" error=\"docker-credential-ecr-login can only be used with Amazon Elastic Container Registry.\" serverURL=not-ecr-server-url\n[Build/ubuntu-latest / Go 1.15]   | --- PASS: TestGetNoMatch (0.00s)\n[Build/ubuntu-latest / Go 1.15]   | === RUN   TestListSuccess\n[Build/ubuntu-latest / Go 1.15]   | --- PASS: TestListSuccess (0.00s)\n[Build/ubuntu-latest / Go 1.15]   | === RUN   TestListFailure\n[Build/ubuntu-latest / Go 1.15]   | time=\"2023-05-30T11:48:16Z\" level=error msg=\"Error listing credentials\" error=nope\n[Build/ubuntu-latest / Go 1.15]   | --- PASS: TestListFailure (0.00s)\n[Build/ubuntu-latest / Go 1.15]   | PASS\n[Build/ubuntu-latest / Go 1.15]   | coverage: 74.4% of statements\n[Build/ubuntu-latest / Go 1.15]   | ok  \tgithub.com/awslabs/amazon-ecr-credential-helper/ecr-login\t0.174s\tcoverage: 74.4% of statements\n[Build/ubuntu-latest / Go 1.15]   | === RUN   TestExtractRegistry\n[Build/ubuntu-latest / Go 1.15]   | === RUN   TestExtractRegistry/https://123456789012.dkr.ecr.us-east-1.amazonaws.com/v2/blah/blah\n[Build/ubuntu-latest / Go 1.15]   | === RUN   TestExtractRegistry/123456789012.dkr.ecr.us-west-2.amazonaws.com\n[Build/ubuntu-latest / Go 1.15]   | === RUN   TestExtractRegistry/210987654321.dkr.ecr.cn-north-1.amazonaws.com.cn/foo\n[Build/ubuntu-latest / Go 1.15]   | === RUN   TestExtractRegistry/123456789012.dkr.ecr-fips.us-gov-west-1.amazonaws.com\n[Build/ubuntu-latest / Go 1.15]   | === RUN   TestExtractRegistry/https://public.ecr.aws\n[Build/ubuntu-latest / Go 1.15]   | === RUN   TestExtractRegistry/public.ecr.aws\n[Build/ubuntu-latest / Go 1.15]   | === RUN   TestExtractRegistry/https://public.ecr.aws/amazonlinux\n[Build/ubuntu-latest / Go 1.15]   | === RUN   TestExtractRegistry/.dkr.ecr.not-real.amazonaws.com\n[Build/ubuntu-latest / Go 1.15]   | === RUN   TestExtractRegistry/not.ecr.io\n[Build/ubuntu-latest / Go 1.15]   | === RUN   TestExtractRegistry/https://123456789012.dkr.ecr.us-west-2.amazonaws.com.fake.example.com/image:latest\n[Build/ubuntu-latest / Go 1.15]   | === RUN   TestExtractRegistry/123456789012.dkr.ecr.us-west-2.amazonaws.com.fake.example.com\n[Build/ubuntu-latest / Go 1.15]   | === RUN   TestExtractRegistry/123456789012.dkr.ecr-fips.us-gov-west-1.amazonaws.com.fake.example.com\n[Build/ubuntu-latest / Go 1.15]   | === RUN   TestExtractRegistry/210987654321.dkr.ecr.cn-north-1.amazonaws.com.cn.fake.example.com.cn\n[Build/ubuntu-latest / Go 1.15]   | === RUN   TestExtractRegistry/https://public.ecr.aws.fake.example.com\n[Build/ubuntu-latest / Go 1.15]   | === RUN   TestExtractRegistry/public.ecr.aws.fake.example.com\n[Build/ubuntu-latest / Go 1.15]   | --- PASS: TestExtractRegistry (0.00s)\n[Build/ubuntu-latest / Go 1.15]   |     --- PASS: TestExtractRegistry/https://123456789012.dkr.ecr.us-east-1.amazonaws.com/v2/blah/blah (0.00s)\n[Build/ubuntu-latest / Go 1.15]   |     --- PASS: TestExtractRegistry/123456789012.dkr.ecr.us-west-2.amazonaws.com (0.00s)\n[Build/ubuntu-latest / Go 1.15]   |     --- PASS: TestExtractRegistry/210987654321.dkr.ecr.cn-north-1.amazonaws.com.cn/foo (0.00s)\n[Build/ubuntu-latest / Go 1.15]   |     --- PASS: TestExtractRegistry/123456789012.dkr.ecr-fips.us-gov-west-1.amazonaws.com (0.00s)\n[Build/ubuntu-latest / Go 1.15]   |     --- PASS: TestExtractRegistry/https://public.ecr.aws (0.00s)\n[Build/ubuntu-latest / Go 1.15]   |     --- PASS: TestExtractRegistry/public.ecr.aws (0.00s)\n[Build/ubuntu-latest / Go 1.15]   |     --- PASS: TestExtractRegistry/https://public.ecr.aws/amazonlinux (0.00s)\n[Build/ubuntu-latest / Go 1.15]   |     --- PASS: TestExtractRegistry/.dkr.ecr.not-real.amazonaws.com (0.00s)\n[Build/ubuntu-latest / Go 1.15]   |     --- PASS: TestExtractRegistry/not.ecr.io (0.00s)\n[Build/ubuntu-latest / Go 1.15]   |     --- PASS: TestExtractRegistry/https://123456789012.dkr.ecr.us-west-2.amazonaws.com.fake.example.com/image:latest (0.00s)\n[Build/ubuntu-latest / Go 1.15]   |     --- PASS: TestExtractRegistry/123456789012.dkr.ecr.us-west-2.amazonaws.com.fake.example.com (0.00s)\n[Build/ubuntu-latest / Go 1.15]   |     --- PASS: TestExtractRegistry/123456789012.dkr.ecr-fips.us-gov-west-1.amazonaws.com.fake.example.com (0.00s)\n[Build/ubuntu-latest / Go 1.15]   |     --- PASS: TestExtractRegistry/210987654321.dkr.ecr.cn-north-1.amazonaws.com.cn.fake.example.com.cn (0.00s)\n[Build/ubuntu-latest / Go 1.15]   |     --- PASS: TestExtractRegistry/https://public.ecr.aws.fake.example.com (0.00s)\n[Build/ubuntu-latest / Go 1.15]   |     --- PASS: TestExtractRegistry/public.ecr.aws.fake.example.com (0.00s)\n[Build/ubuntu-latest / Go 1.15]   | === RUN   TestGetAuthConfigSuccess\n[Build/ubuntu-latest / Go 1.15]   | --- PASS: TestGetAuthConfigSuccess (0.00s)\n[Build/ubuntu-latest / Go 1.15]   | === RUN   TestGetAuthConfigNoMatchAuthorizationToken\n[Build/ubuntu-latest / Go 1.15]   | --- PASS: TestGetAuthConfigNoMatchAuthorizationToken (0.00s)\n[Build/ubuntu-latest / Go 1.15]   | === RUN   TestGetAuthConfigGetCacheSuccess\n[Build/ubuntu-latest / Go 1.15]   | --- PASS: TestGetAuthConfigGetCacheSuccess (0.00s)\n[Build/ubuntu-latest / Go 1.15]   | === RUN   TestGetAuthConfigSuccessInvalidCacheHit\n[Build/ubuntu-latest / Go 1.15]   | --- PASS: TestGetAuthConfigSuccessInvalidCacheHit (0.00s)\n[Build/ubuntu-latest / Go 1.15]   | === RUN   TestGetAuthConfigBadBase64\n[Build/ubuntu-latest / Go 1.15]   |     client_test.go:314: invalid token: illegal base64 data at input byte 8\n[Build/ubuntu-latest / Go 1.15]   | --- PASS: TestGetAuthConfigBadBase64 (0.00s)\n[Build/ubuntu-latest / Go 1.15]   | === RUN   TestGetAuthConfigMissingResponse\n[Build/ubuntu-latest / Go 1.15]   |     client_test.go:337: ecr: Failed to get authorization token: missing AuthorizationData in ECR response for 123456789012\n[Build/ubuntu-latest / Go 1.15]   | --- PASS: TestGetAuthConfigMissingResponse (0.00s)\n[Build/ubuntu-latest / Go 1.15]   | === RUN   TestGetAuthConfigECRError\n[Build/ubuntu-latest / Go 1.15]   |     client_test.go:360: ecr: Failed to get authorization token: test error\n[Build/ubuntu-latest / Go 1.15]   | --- PASS: TestGetAuthConfigECRError (0.00s)\n[Build/ubuntu-latest / Go 1.15]   | === RUN   TestGetAuthConfigSuccessInvalidCacheHitFallback\n[Build/ubuntu-latest / Go 1.15]   | time=\"2023-05-30T11:48:16Z\" level=info msg=\"Got error fetching authorization token. Falling back to cached token.\" error=\"ecr: Failed to get authorization token: service error\"\n[Build/ubuntu-latest / Go 1.15]   | --- PASS: TestGetAuthConfigSuccessInvalidCacheHitFallback (0.00s)\n[Build/ubuntu-latest / Go 1.15]   | === RUN   TestListCredentialsSuccess\n[Build/ubuntu-latest / Go 1.15]   | --- PASS: TestListCredentialsSuccess (0.00s)\n[Build/ubuntu-latest / Go 1.15]   | === RUN   TestListCredentialsCached\n[Build/ubuntu-latest / Go 1.15]   | --- PASS: TestListCredentialsCached (0.00s)\n[Build/ubuntu-latest / Go 1.15]   | === RUN   TestListCredentialsEmpty\n[Build/ubuntu-latest / Go 1.15]   | --- PASS: TestListCredentialsEmpty (0.00s)\n[Build/ubuntu-latest / Go 1.15]   | === RUN   TestListCredentialsBadBase64AuthToken\n[Build/ubuntu-latest / Go 1.15]   | --- PASS: TestListCredentialsBadBase64AuthToken (0.00s)\n[Build/ubuntu-latest / Go 1.15]   | === RUN   TestListCredentialsInvalidAuthToken\n[Build/ubuntu-latest / Go 1.15]   | --- PASS: TestListCredentialsInvalidAuthToken (0.00s)\n[Build/ubuntu-latest / Go 1.15]   | PASS\n[Build/ubuntu-latest / Go 1.15]   | coverage: 73.9% of statements\n[Build/ubuntu-latest / Go 1.15]   | ok  \tgithub.com/awslabs/amazon-ecr-credential-helper/ecr-login/api\t0.395s\tcoverage: 73.9% of statements\n[Build/ubuntu-latest / Go 1.15]   | ?   \tgithub.com/awslabs/amazon-ecr-credential-helper/ecr-login/api/mocks\t[no test files]\n[Build/ubuntu-latest / Go 1.15]   | === RUN   TestFactoryBuildFileCache\n[Build/ubuntu-latest / Go 1.15]   | --- PASS: TestFactoryBuildFileCache (0.00s)\n[Build/ubuntu-latest / Go 1.15]   | === RUN   TestFactoryBuildNullCacheWithoutCredentials\n[Build/ubuntu-latest / Go 1.15]   | --- PASS: TestFactoryBuildNullCacheWithoutCredentials (0.00s)\n[Build/ubuntu-latest / Go 1.15]   | === RUN   TestFactoryBuildNullCache\n[Build/ubuntu-latest / Go 1.15]   | --- PASS: TestFactoryBuildNullCache (0.00s)\n[Build/ubuntu-latest / Go 1.15]   | === RUN   TestIsValid_NewEntry\n[Build/ubuntu-latest / Go 1.15]   | --- PASS: TestIsValid_NewEntry (0.00s)\n[Build/ubuntu-latest / Go 1.15]   | === RUN   TestIsValid_OldEntry\n[Build/ubuntu-latest / Go 1.15]   | --- PASS: TestIsValid_OldEntry (0.00s)\n[Build/ubuntu-latest / Go 1.15]   | === RUN   TestIsValid_BeforeRefreshTime\n[Build/ubuntu-latest / Go 1.15]   | --- PASS: TestIsValid_BeforeRefreshTime (0.00s)\n[Build/ubuntu-latest / Go 1.15]   | === RUN   TestIsValid_AtRefreshTime\n[Build/ubuntu-latest / Go 1.15]   | --- PASS: TestIsValid_AtRefreshTime (0.00s)\n[Build/ubuntu-latest / Go 1.15]   | === RUN   TestIsValid_AfterRefreshTime\n[Build/ubuntu-latest / Go 1.15]   | --- PASS: TestIsValid_AfterRefreshTime (0.00s)\n[Build/ubuntu-latest / Go 1.15]   | === RUN   TestAuthEntryValid\n[Build/ubuntu-latest / Go 1.15]   | --- PASS: TestAuthEntryValid (0.00s)\n[Build/ubuntu-latest / Go 1.15]   | === RUN   TestAuthEntryInValid\n[Build/ubuntu-latest / Go 1.15]   | --- PASS: TestAuthEntryInValid (0.00s)\n[Build/ubuntu-latest / Go 1.15]   | === RUN   TestCredentials\n[Build/ubuntu-latest / Go 1.15]   | --- PASS: TestCredentials (0.00s)\n[Build/ubuntu-latest / Go 1.15]   | === RUN   TestCredentialsPublic\n[Build/ubuntu-latest / Go 1.15]   | --- PASS: TestCredentialsPublic (0.00s)\n[Build/ubuntu-latest / Go 1.15]   | === RUN   TestPreviousVersionCache\n[Build/ubuntu-latest / Go 1.15]   | time=\"2023-05-30T11:48:12Z\" level=info msg=\"Could not load existing cache\" error=\"ecr: Registry cache version \\\"0.1\\\" is not compatible with \\\"1.0\\\", ignoring existing cache\"\n[Build/ubuntu-latest / Go 1.15]   | time=\"2023-05-30T11:48:12Z\" level=info msg=\"Could not clear cache\" error=\"remove /tmp/ecr/test.json: no such file or directory\"\n[Build/ubuntu-latest / Go 1.15]   | --- PASS: TestPreviousVersionCache (0.00s)\n[Build/ubuntu-latest / Go 1.15]   | === RUN   TestInvalidCache\n[Build/ubuntu-latest / Go 1.15]   | time=\"2023-05-30T11:48:12Z\" level=info msg=\"Could not load existing cache\" error=\"invalid character 'n' looking for beginning of object key string\"\n[Build/ubuntu-latest / Go 1.15]   | time=\"2023-05-30T11:48:12Z\" level=info msg=\"Could not clear cache\" error=\"remove /tmp/ecr/test.json: no such file or directory\"\n[Build/ubuntu-latest / Go 1.15]   | --- PASS: TestInvalidCache (0.00s)\n[Build/ubuntu-latest / Go 1.15]   | === RUN   TestNullCache\n[Build/ubuntu-latest / Go 1.15]   | --- PASS: TestNullCache (0.00s)\n[Build/ubuntu-latest / Go 1.15]   | PASS\n[Build/ubuntu-latest / Go 1.15]   | coverage: 85.9% of statements\n[Build/ubuntu-latest / Go 1.15]   | ok  \tgithub.com/awslabs/amazon-ecr-credential-helper/ecr-login/cache\t0.478s\tcoverage: 85.9% of statements\n[Build/ubuntu-latest / Go 1.15]   | ?   \tgithub.com/awslabs/amazon-ecr-credential-helper/ecr-login/cache/mocks\t[no test files]\n[Build/ubuntu-latest / Go 1.15]   | ?   \tgithub.com/awslabs/amazon-ecr-credential-helper/ecr-login/cli/docker-credential-ecr-login\t[no test files]\n[Build/ubuntu-latest / Go 1.15]   | ?   \tgithub.com/awslabs/amazon-ecr-credential-helper/ecr-login/config\t[no test files]\n[Build/ubuntu-latest / Go 1.15]   | ?   \tgithub.com/awslabs/amazon-ecr-credential-helper/ecr-login/mocks\t[no test files]\n[Build/ubuntu-latest / Go 1.15]   | ?   \tgithub.com/awslabs/amazon-ecr-credential-helper/ecr-login/version\t[no test files]\n[Build/ubuntu-latest / Go 1.15]   \u2705  Success - Main make test\n[Build/ubuntu-latest / Go 1.15] \u2b50 Run Post actions/setup-go@v3\n[Build/ubuntu-latest / Go 1.15]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/actions-setup-go@v3/dist/cache-save/index.js] user= workdir=\n[Build/ubuntu-latest / Go 1.15]   \u2705  Success - Post actions/setup-go@v3\n[Build/ubuntu-latest / Go 1.15] \ud83c\udfc1  Job succeeded\n",
    "actions_stderr": ""
}