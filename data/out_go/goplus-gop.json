{
    "repository": "goplus/gop",
    "clone_url": "https://github.com/goplus/gop.git",
    "timestamp": "2023-05-30T11:24:58.822726Z",
    "clone_success": true,
    "number of actions": 2,
    "number_of_test_actions": 1,
    "actions_successful": false,
    "actions_stdout": "[Go+ CI/Test] \ud83d\ude80  Start image=crawlergpt:latest\n[Go+ CI/Test]   \ud83d\udc33  docker pull image=crawlergpt:latest platform= username= forcePull=false\n[Go+ CI/Test]   \ud83d\udc33  docker create image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[Go+ CI/Test]   \ud83d\udc33  docker run image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[Go+ CI/Test]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop] user=0 workdir=\n[Go+ CI/Test]   \u2601  git clone 'https://github.com/actions/setup-go' # ref=v2\n[Go+ CI/Test]   \u2601  git clone 'https://github.com/codecov/codecov-action' # ref=v2\n[Go+ CI/Test] \ud83e\uddea  Matrix: map[go-version:1.16.x os:ubuntu-latest]\n[Go+ CI/Test] \u2b50 Run Main actions/checkout@v2\n[Go+ CI/Test]   \u2705  Success - Main actions/checkout@v2\n[Go+ CI/Test] \u2b50 Run Main Set up Go\n[Go+ CI/Test]   \ud83d\udc33  docker cp src=/home/andre-silva/.cache/act/actions-setup-go@v2/ dst=/var/run/act/actions/actions-setup-go@v2/\n[Go+ CI/Test]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /var/run/act/actions/actions-setup-go@v2/] user=0 workdir=\n[Go+ CI/Test]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/actions-setup-go@v2/dist/index.js] user= workdir=\n[Go+ CI/Test]   | Setup go stable version spec 1.16.x\n[Go+ CI/Test]   \ud83d\udcac  ::debug::isExplicit: \n[Go+ CI/Test]   \ud83d\udcac  ::debug::explicit? false\n[Go+ CI/Test]   \ud83d\udcac  ::debug::isExplicit: 1.14.15\n[Go+ CI/Test]   \ud83d\udcac  ::debug::explicit? true\n[Go+ CI/Test]   \ud83d\udcac  ::debug::isExplicit: 1.15.15\n[Go+ CI/Test]   \ud83d\udcac  ::debug::explicit? true\n[Go+ CI/Test]   \ud83d\udcac  ::debug::isExplicit: 1.16.7\n[Go+ CI/Test]   \ud83d\udcac  ::debug::explicit? true\n[Go+ CI/Test]   \ud83d\udcac  ::debug::evaluating 3 versions\n[Go+ CI/Test]   \ud83d\udcac  ::debug::matched: 1.16.7\n[Go+ CI/Test]   \ud83d\udcac  ::debug::checking cache: /opt/hostedtoolcache/go/1.16.7/x64\n[Go+ CI/Test]   \ud83d\udcac  ::debug::Found tool in cache go 1.16.7 x64\n[Go+ CI/Test]   | Found in cache @ /opt/hostedtoolcache/go/1.16.7/x64\n[Go+ CI/Test]   | Added go to the path\n[Go+ CI/Test]   \ud83d\udcac  ::debug::which go :/opt/hostedtoolcache/go/1.16.7/x64/bin/go:\n[Go+ CI/Test]   \ud83d\udcac  ::debug::go env GOPATH :/home/runneradmin/go:\n[Go+ CI/Test]   \ud83d\udcac  ::debug::creating /home/runneradmin/go\n[Go+ CI/Test]   \ud83d\udcac  ::debug::creating /home/runneradmin/go/bin\n[Go+ CI/Test]   \ud83d\udcac  ::debug::add bin true\n[Go+ CI/Test]   | Successfully setup go version 1.16.x\n[Go+ CI/Test]   \u2753 add-matcher /run/act/actions/actions-setup-go@v2/matchers.json\n[Go+ CI/Test]   | go version go1.16.7 linux/amd64\n[Go+ CI/Test]   | \n[Go+ CI/Test]   \u2753  ::group::go env\n[Go+ CI/Test]   | GO111MODULE=\"\"\n[Go+ CI/Test]   | GOARCH=\"amd64\"\n[Go+ CI/Test]   | GOBIN=\"\"\n[Go+ CI/Test]   | GOCACHE=\"/home/runneradmin/.cache/go-build\"\n[Go+ CI/Test]   | GOENV=\"/home/runneradmin/.config/go/env\"\n[Go+ CI/Test]   | GOEXE=\"\"\n[Go+ CI/Test]   | GOFLAGS=\"\"\n[Go+ CI/Test]   | GOHOSTARCH=\"amd64\"\n[Go+ CI/Test]   | GOHOSTOS=\"linux\"\n[Go+ CI/Test]   | GOINSECURE=\"\"\n[Go+ CI/Test]   | GOMODCACHE=\"/home/runneradmin/go/pkg/mod\"\n[Go+ CI/Test]   | GONOPROXY=\"\"\n[Go+ CI/Test]   | GONOSUMDB=\"\"\n[Go+ CI/Test]   | GOOS=\"linux\"\n[Go+ CI/Test]   | GOPATH=\"/home/runneradmin/go\"\n[Go+ CI/Test]   | GOPRIVATE=\"\"\n[Go+ CI/Test]   | GOPROXY=\"https://proxy.golang.org,direct\"\n[Go+ CI/Test]   | GOROOT=\"/opt/hostedtoolcache/go/1.16.7/x64\"\n[Go+ CI/Test]   | GOSUMDB=\"sum.golang.org\"\n[Go+ CI/Test]   | GOTMPDIR=\"\"\n[Go+ CI/Test]   | GOTOOLDIR=\"/opt/hostedtoolcache/go/1.16.7/x64/pkg/tool/linux_amd64\"\n[Go+ CI/Test]   | GOVCS=\"\"\n[Go+ CI/Test]   | GOVERSION=\"go1.16.7\"\n[Go+ CI/Test]   | GCCGO=\"gccgo\"\n[Go+ CI/Test]   | AR=\"ar\"\n[Go+ CI/Test]   | CC=\"gcc\"\n[Go+ CI/Test]   | CXX=\"g++\"\n[Go+ CI/Test]   | CGO_ENABLED=\"1\"\n[Go+ CI/Test]   | GOMOD=\"/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/go.mod\"\n[Go+ CI/Test]   | CGO_CFLAGS=\"-g -O2\"\n[Go+ CI/Test]   | CGO_CPPFLAGS=\"\"\n[Go+ CI/Test]   | CGO_CXXFLAGS=\"-g -O2\"\n[Go+ CI/Test]   | CGO_FFLAGS=\"-g -O2\"\n[Go+ CI/Test]   | CGO_LDFLAGS=\"-g -O2\"\n[Go+ CI/Test]   | PKG_CONFIG=\"pkg-config\"\n[Go+ CI/Test]   | GOGCCFLAGS=\"-fPIC -m64 -pthread -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build3483070768=/tmp/go-build -gno-record-gcc-switches\"\n[Go+ CI/Test]   | \n[Go+ CI/Test]   \u2753  ::endgroup::\n[Go+ CI/Test]   \u2705  Success - Main Set up Go\n[Go+ CI/Test]   \u2699  ::set-env:: GOROOT=/opt/hostedtoolcache/go/1.16.7/x64\n[Go+ CI/Test]   \u2699  ::add-path:: /opt/hostedtoolcache/go/1.16.7/x64/bin\n[Go+ CI/Test]   \u2699  ::add-path:: /home/runneradmin/go/bin\n[Go+ CI/Test] \u2b50 Run Main Test Go+ installer\n[Go+ CI/Test]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/2] user= workdir=\n[Go+ CI/Test]   | === RUN   TestAllScript\n[Go+ CI/Test]   | --- PASS: TestAllScript (12.83s)\n[Go+ CI/Test]   | === RUN   TestTagFlagInGitRepo\n[Go+ CI/Test]   | === RUN   TestTagFlagInGitRepo/release_new_version_with_bad_tag\n[Go+ CI/Test]   | === RUN   TestTagFlagInGitRepo/empty_tag_should_failed\n[Go+ CI/Test]   | === RUN   TestTagFlagInGitRepo/failed_when_release_branch_corresponding_to_tag_does_not_exists\n[Go+ CI/Test]   | === RUN   TestTagFlagInGitRepo/release_new_version_on_release_branch\n[Go+ CI/Test]   | === RUN   TestTagFlagInGitRepo/release_new_version_on_non-release_branch\n[Go+ CI/Test]   | --- PASS: TestTagFlagInGitRepo (4.90s)\n[Go+ CI/Test]   |     --- PASS: TestTagFlagInGitRepo/release_new_version_with_bad_tag (0.79s)\n[Go+ CI/Test]   |     --- PASS: TestTagFlagInGitRepo/empty_tag_should_failed (0.64s)\n[Go+ CI/Test]   |     --- PASS: TestTagFlagInGitRepo/failed_when_release_branch_corresponding_to_tag_does_not_exists (1.11s)\n[Go+ CI/Test]   |     --- PASS: TestTagFlagInGitRepo/release_new_version_on_release_branch (1.16s)\n[Go+ CI/Test]   |     --- PASS: TestTagFlagInGitRepo/release_new_version_on_non-release_branch (1.03s)\n[Go+ CI/Test]   | === RUN   TestTagFlagInNonGitRepo\n[Go+ CI/Test]   | === RUN   TestTagFlagInNonGitRepo/specify_new_tag\n[Go+ CI/Test]   | --- PASS: TestTagFlagInNonGitRepo (0.50s)\n[Go+ CI/Test]   |     --- PASS: TestTagFlagInNonGitRepo/specify_new_tag (0.50s)\n[Go+ CI/Test]   | === RUN   TestInstallInNonGitRepo\n[Go+ CI/Test]   | === RUN   TestInstallInNonGitRepo/failed_build_operation\n[Go+ CI/Test]   | === RUN   TestInstallInNonGitRepo/install_with_VERSION_file\n[Go+ CI/Test]   | --- PASS: TestInstallInNonGitRepo (2.36s)\n[Go+ CI/Test]   |     --- PASS: TestInstallInNonGitRepo/failed_build_operation (0.53s)\n[Go+ CI/Test]   |     --- PASS: TestInstallInNonGitRepo/install_with_VERSION_file (1.83s)\n[Go+ CI/Test]   | === RUN   TestHandleMultiFlags\n[Go+ CI/Test]   | --- PASS: TestHandleMultiFlags (42.19s)\n[Go+ CI/Test]   | PASS\n[Go+ CI/Test]   | ok  \tcommand-line-arguments\t62.900s\n[Go+ CI/Test]   \u2705  Success - Main Test Go+ installer\n[Go+ CI/Test] \u2b50 Run Main Compile gop and related tools\n[Go+ CI/Test]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/3] user= workdir=\n[Go+ CI/Test]   \u2705  Success - Main Compile gop and related tools\n[Go+ CI/Test] \u2b50 Run Main Run testcases\n[Go+ CI/Test]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/4] user= workdir=\n[Go+ CI/Test]   | ?   \tgithub.com/goplus/gop\t[no test files]\n[Go+ CI/Test]   | ?   \tgithub.com/goplus/gop/ast\t[no test files]\n[Go+ CI/Test]   | === RUN   TestErrASTFile\n[Go+ CI/Test]   | === RUN   TestErrASTFile/ASTFile:_doesn't_support_keeping_cgo_now_\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ASTFile: doesn't support keeping cgo now\n[Go+ CI/Test]   | === RUN   TestErrASTFile/ASTFile:_doesn't_support_keeping_func_body_now_\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ASTFile: doesn't support keeping func body now\n[Go+ CI/Test]   | --- PASS: TestErrASTFile (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestErrASTFile/ASTFile:_doesn't_support_keeping_cgo_now_ (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestErrASTFile/ASTFile:_doesn't_support_keeping_func_body_now_ (0.00s)\n[Go+ CI/Test]   | === RUN   TestErrDecl\n[Go+ CI/Test]   | === RUN   TestErrDecl/gopDecl:_unkown_decl_-_<nil>_\n[Go+ CI/Test]   | 2023/05/30 11:33:30 gopDecl: unkown decl - <nil>\n[Go+ CI/Test]   | === RUN   TestErrDecl/gopGenDecl:_unknown_spec_-_ILLEGAL_\n[Go+ CI/Test]   | 2023/05/30 11:33:30 gopGenDecl: unknown spec - ILLEGAL\n[Go+ CI/Test]   | --- PASS: TestErrDecl (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestErrDecl/gopDecl:_unkown_decl_-_<nil>_ (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestErrDecl/gopGenDecl:_unknown_spec_-_ILLEGAL_ (0.00s)\n[Go+ CI/Test]   | === RUN   TestErrExpr\n[Go+ CI/Test]   | === RUN   TestErrExpr/gopExpr:_unknown_expr_-_*ast.BadExpr_\n[Go+ CI/Test]   | 2023/05/30 11:33:30 gopExpr: unknown expr - *ast.BadExpr\n[Go+ CI/Test]   | --- PASS: TestErrExpr (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestErrExpr/gopExpr:_unknown_expr_-_*ast.BadExpr_ (0.00s)\n[Go+ CI/Test]   | === RUN   TestBasic\n[Go+ CI/Test]   | --- PASS: TestBasic (0.00s)\n[Go+ CI/Test]   | === RUN   TestMethod\n[Go+ CI/Test]   | --- PASS: TestMethod (0.00s)\n[Go+ CI/Test]   | PASS\n[Go+ CI/Test]   | coverage: 98.7% of statements\n[Go+ CI/Test]   | ok  \tgithub.com/goplus/gop/ast/fromgo\t0.118s\tcoverage: 98.7% of statements\n[Go+ CI/Test]   | ?   \tgithub.com/goplus/gop/ast/fromgo/typeparams\t[no test files]\n[Go+ CI/Test]   | ?   \tgithub.com/goplus/gop/ast/gopq\t[no test files]\n[Go+ CI/Test]   | ?   \tgithub.com/goplus/gop/ast/goptest\t[no test files]\n[Go+ CI/Test]   | ?   \tgithub.com/goplus/gop/ast/mod\t[no test files]\n[Go+ CI/Test]   | === RUN   TestErrASTFile\n[Go+ CI/Test]   | === RUN   TestErrASTFile/ASTFile:_doesn't_support_keeping_func_body_now_\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ASTFile: doesn't support keeping func body now\n[Go+ CI/Test]   | --- PASS: TestErrASTFile (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestErrASTFile/ASTFile:_doesn't_support_keeping_func_body_now_ (0.00s)\n[Go+ CI/Test]   | === RUN   TestErrDecl\n[Go+ CI/Test]   | === RUN   TestErrDecl/goDecl:_unkown_decl_-_<nil>_\n[Go+ CI/Test]   | 2023/05/30 11:33:30 goDecl: unkown decl - <nil>\n[Go+ CI/Test]   | === RUN   TestErrDecl/goGenDecl:_unknown_spec_-_ILLEGAL_\n[Go+ CI/Test]   | 2023/05/30 11:33:30 goGenDecl: unknown spec - ILLEGAL\n[Go+ CI/Test]   | --- PASS: TestErrDecl (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestErrDecl/goDecl:_unkown_decl_-_<nil>_ (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestErrDecl/goGenDecl:_unknown_spec_-_ILLEGAL_ (0.00s)\n[Go+ CI/Test]   | === RUN   TestErrExpr\n[Go+ CI/Test]   | === RUN   TestErrExpr/goExpr:_unknown_expr_-_*ast.BadExpr_\n[Go+ CI/Test]   | 2023/05/30 11:33:30 goExpr: unknown expr - *ast.BadExpr\n[Go+ CI/Test]   | --- PASS: TestErrExpr (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestErrExpr/goExpr:_unknown_expr_-_*ast.BadExpr_ (0.00s)\n[Go+ CI/Test]   | === RUN   TestBasic\n[Go+ CI/Test]   | --- PASS: TestBasic (0.00s)\n[Go+ CI/Test]   | PASS\n[Go+ CI/Test]   | coverage: 100.0% of statements\n[Go+ CI/Test]   | ok  \tgithub.com/goplus/gop/ast/togo\t0.124s\tcoverage: 100.0% of statements\n[Go+ CI/Test]   | ?   \tgithub.com/goplus/gop/builtin\t[no test files]\n[Go+ CI/Test]   | ?   \tgithub.com/goplus/gop/builtin/iox\t[no test files]\n[Go+ CI/Test]   | ?   \tgithub.com/goplus/gop/builtin/ng\t[no test files]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 SetDebug: import=true, match=true, instr=true\n[Go+ CI/Test]   | === RUN   TestCompileErrWrapExpr\n[Go+ CI/Test]   | --- PASS: TestCompileErrWrapExpr (2.67s)\n[Go+ CI/Test]   | === RUN   TestToString\n[Go+ CI/Test]   | --- PASS: TestToString (0.00s)\n[Go+ CI/Test]   | === RUN   TestGetTypeName\n[Go+ CI/Test]   | --- PASS: TestGetTypeName (0.00s)\n[Go+ CI/Test]   | === RUN   TestHandleRecover\n[Go+ CI/Test]   | --- PASS: TestHandleRecover (0.00s)\n[Go+ CI/Test]   | === RUN   TestCanAutoCall\n[Go+ CI/Test]   | --- PASS: TestCanAutoCall (0.00s)\n[Go+ CI/Test]   | === RUN   TestClRangeStmt\n[Go+ CI/Test]   | 2023/05/30 11:33:33 ForRange [_]\n[Go+ CI/Test]   | 2023/05/30 11:33:33 SliceLit <nil> 0 false\n[Go+ CI/Test]   | 2023/05/30 11:33:33 RangeAssignThen\n[Go+ CI/Test]   | 2023/05/30 11:33:33 End // ForRange\n[Go+ CI/Test]   | 2023/05/30 11:33:33 ForRange []\n[Go+ CI/Test]   | 2023/05/30 11:33:33 VarRef _\n[Go+ CI/Test]   | 2023/05/30 11:33:33 VarRef _\n[Go+ CI/Test]   | 2023/05/30 11:33:33 SliceLit <nil> 0 false\n[Go+ CI/Test]   | 2023/05/30 11:33:33 RangeAssignThen\n[Go+ CI/Test]   | 2023/05/30 11:33:33 End // ForRange\n[Go+ CI/Test]   | --- PASS: TestClRangeStmt (0.00s)\n[Go+ CI/Test]   | === RUN   TestGmxSettings\n[Go+ CI/Test]   | 2023/05/30 11:33:34 Val Sched func()\n[Go+ CI/Test]   | 2023/05/30 11:33:34 Call 0 0 // func()\n[Go+ CI/Test]   | 2023/05/30 11:33:34 ==> MatchFuncCall func()\n[Go+ CI/Test]   | 2023/05/30 11:33:36 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:33:36 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:33:36 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:33:36 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:36 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:36 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:36 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:36 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:36 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:36 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:36 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:36 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:36 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:36 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:33:36 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:33:36 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:33:36 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:33:36 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:33:36 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:33:36 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:33:36 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:33:36 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:33:36 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:33:36 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:33:36 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:33:36 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:33:36 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:33:36 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:33:36 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:33:36 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:33:36 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:33:36 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:33:36 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:33:36 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:33:36 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:33:36 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:33:36 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:33:36 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:33:36 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:33:36 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:33:36 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:33:36 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:33:36 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:33:36 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | --- PASS: TestGmxSettings (5.33s)\n[Go+ CI/Test]   | === RUN   TestSpxLookup\n[Go+ CI/Test]   | --- PASS: TestSpxLookup (0.00s)\n[Go+ CI/Test]   | === RUN   TestGetGoFile\n[Go+ CI/Test]   | --- PASS: TestGetGoFile (0.00s)\n[Go+ CI/Test]   | === RUN   TestC2goBase\n[Go+ CI/Test]   | --- PASS: TestC2goBase (0.00s)\n[Go+ CI/Test]   | === RUN   TestErrNewType\n[Go+ CI/Test]   | === RUN   TestErrNewType/bar_redeclared_in_this_block__previous_declaration_at_<TODO>_\n[Go+ CI/Test]   | 2023/05/30 11:33:39 bar redeclared in this block\n[Go+ CI/Test]   | \tprevious declaration at <TODO>\n[Go+ CI/Test]   | --- PASS: TestErrNewType (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestErrNewType/bar_redeclared_in_this_block__previous_declaration_at_<TODO>_ (0.00s)\n[Go+ CI/Test]   | === RUN   TestErrDeclFunc\n[Go+ CI/Test]   | === RUN   TestErrDeclFunc/invalid_receiver_type_**byte_(**byte_is_not_a_defined_type)_\n[Go+ CI/Test]   | 2023/05/30 11:33:39 ==> Load method **byte.m\n[Go+ CI/Test]   | 2023/05/30 11:33:39 invalid receiver type **byte (**byte is not a defined type)\n[Go+ CI/Test]   | --- PASS: TestErrDeclFunc (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestErrDeclFunc/invalid_receiver_type_**byte_(**byte_is_not_a_defined_type)_ (0.00s)\n[Go+ CI/Test]   | === RUN   TestErrLoadImport\n[Go+ CI/Test]   | === RUN   TestErrLoadImport/.:_unknownpkg_not_found_or_not_a_valid_C_package_(c2go.a.pub_file_not_found)._\n[Go+ CI/Test]   | --- PASS: TestErrLoadImport (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestErrLoadImport/.:_unknownpkg_not_found_or_not_a_valid_C_package_(c2go.a.pub_file_not_found)._ (0.00s)\n[Go+ CI/Test]   | === RUN   TestErrCompileBasicLit\n[Go+ CI/Test]   | === RUN   TestErrCompileBasicLit/compileBasicLit:_invalid_syntax_\n[Go+ CI/Test]   | 2023/05/30 11:33:39 compileBasicLit: invalid syntax\n[Go+ CI/Test]   | --- PASS: TestErrCompileBasicLit (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestErrCompileBasicLit/compileBasicLit:_invalid_syntax_ (0.00s)\n[Go+ CI/Test]   | === RUN   TestHelloC2go\n[Go+ CI/Test]   | 2023/05/30 11:33:41 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:33:41 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:33:42 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:33:42 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:42 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:42 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:42 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:42 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:42 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:42 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:42 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:42 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:42 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:42 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:33:42 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:33:42 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:33:42 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:33:42 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:33:42 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:33:42 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:33:42 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:33:42 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:33:42 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:33:42 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:33:42 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:33:42 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:33:42 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:33:42 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:33:42 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:33:42 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:33:42 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:33:42 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:33:42 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:33:42 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:33:42 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:33:42 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:33:42 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:33:42 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:33:42 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:33:42 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:33:42 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:33:42 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:33:42 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:33:42 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:33:44 ==> Preload func main\n[Go+ CI/Test]   | 2023/05/30 11:33:44 ==> Load func main\n[Go+ CI/Test]   | 2023/05/30 11:33:44 NewFunc main func()\n[Go+ CI/Test]   | 2023/05/30 11:33:44 Val Printf func(format *int8, args ...interface{}) int32\n[Go+ CI/Test]   | 2023/05/30 11:33:44 Typ *int8\n[Go+ CI/Test]   | 2023/05/30 11:33:44 Typ unsafe.Pointer\n[Go+ CI/Test]   | 2023/05/30 11:33:44 Val 72 int32\n[Go+ CI/Test]   | 2023/05/30 11:33:44 Val 101 int32\n[Go+ CI/Test]   | 2023/05/30 11:33:44 Val 108 int32\n[Go+ CI/Test]   | 2023/05/30 11:33:44 Val 108 int32\n[Go+ CI/Test]   | 2023/05/30 11:33:44 Val 111 int32\n[Go+ CI/Test]   | 2023/05/30 11:33:44 Val 44 int32\n[Go+ CI/Test]   | 2023/05/30 11:33:44 Val 32 int32\n[Go+ CI/Test]   | 2023/05/30 11:33:44 Val 119 int32\n[Go+ CI/Test]   | 2023/05/30 11:33:44 Val 111 int32\n[Go+ CI/Test]   | 2023/05/30 11:33:44 Val 114 int32\n[Go+ CI/Test]   | 2023/05/30 11:33:44 Val 108 int32\n[Go+ CI/Test]   | 2023/05/30 11:33:44 Val 100 int32\n[Go+ CI/Test]   | 2023/05/30 11:33:44 Val 33 int32\n[Go+ CI/Test]   | 2023/05/30 11:33:44 Val 10 int32\n[Go+ CI/Test]   | 2023/05/30 11:33:44 Val 0 int32\n[Go+ CI/Test]   | 2023/05/30 11:33:44 ArrayLit [15]int8 15 false\n[Go+ CI/Test]   | 2023/05/30 11:33:44 UnaryOp & flags: 0\n[Go+ CI/Test]   | 2023/05/30 11:33:44 ==> MatchFuncCall instructionType{instr: gox.addrInstr}\n[Go+ CI/Test]   | 2023/05/30 11:33:44 Call 1 0 // TypeType{typ: unsafe.Pointer}\n[Go+ CI/Test]   | 2023/05/30 11:33:44 ==> MatchFuncCall TypeType{typ: unsafe.Pointer}\n[Go+ CI/Test]   | 2023/05/30 11:33:44 Call 1 0 // TypeType{typ: *int8}\n[Go+ CI/Test]   | 2023/05/30 11:33:44 ==> MatchFuncCall TypeType{typ: *int8}\n[Go+ CI/Test]   | 2023/05/30 11:33:44 Call 1 0 // func(format *int8, args ...interface{}) int32\n[Go+ CI/Test]   | 2023/05/30 11:33:44 ==> MatchFuncCall func(format *int8, args ...interface{}) int32\n[Go+ CI/Test]   | 2023/05/30 11:33:44 ==> MatchType *int8, *int8\n[Go+ CI/Test]   | 2023/05/30 11:33:44 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:33:44 ==> ASTFile \n[Go+ CI/Test]   | --- PASS: TestHelloC2go (5.85s)\n[Go+ CI/Test]   | === RUN   TestHelloC2go2\n[Go+ CI/Test]   | 2023/05/30 11:33:44 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:33:44 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:33:44 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:33:44 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:44 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:44 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:44 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:44 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:44 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:44 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:44 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:44 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:44 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:44 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:33:44 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:33:44 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:33:44 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:33:44 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:33:44 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:33:44 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:33:44 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:33:44 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:33:44 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:33:44 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:33:44 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:33:44 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:33:44 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:33:44 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:33:44 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:33:44 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:33:44 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:33:44 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:33:44 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:33:44 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:33:44 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:33:44 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:33:44 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:33:44 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:33:44 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:33:44 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:33:44 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:33:44 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:33:44 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:33:44 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:33:44 ==> Preload func main\n[Go+ CI/Test]   | 2023/05/30 11:33:44 ==> Load func main\n[Go+ CI/Test]   | 2023/05/30 11:33:44 NewFunc main func()\n[Go+ CI/Test]   | 2023/05/30 11:33:44 Val Printf func(format *int8, args ...interface{}) int32\n[Go+ CI/Test]   | 2023/05/30 11:33:44 Typ *int8\n[Go+ CI/Test]   | 2023/05/30 11:33:44 Typ unsafe.Pointer\n[Go+ CI/Test]   | 2023/05/30 11:33:44 Val 72 int32\n[Go+ CI/Test]   | 2023/05/30 11:33:44 Val 101 int32\n[Go+ CI/Test]   | 2023/05/30 11:33:44 Val 108 int32\n[Go+ CI/Test]   | 2023/05/30 11:33:44 Val 108 int32\n[Go+ CI/Test]   | 2023/05/30 11:33:44 Val 111 int32\n[Go+ CI/Test]   | 2023/05/30 11:33:44 Val 44 int32\n[Go+ CI/Test]   | 2023/05/30 11:33:44 Val 32 int32\n[Go+ CI/Test]   | 2023/05/30 11:33:44 Val 119 int32\n[Go+ CI/Test]   | 2023/05/30 11:33:44 Val 111 int32\n[Go+ CI/Test]   | 2023/05/30 11:33:44 Val 114 int32\n[Go+ CI/Test]   | 2023/05/30 11:33:44 Val 108 int32\n[Go+ CI/Test]   | 2023/05/30 11:33:44 Val 100 int32\n[Go+ CI/Test]   | 2023/05/30 11:33:44 Val 33 int32\n[Go+ CI/Test]   | 2023/05/30 11:33:44 Val 10 int32\n[Go+ CI/Test]   | 2023/05/30 11:33:44 Val 0 int32\n[Go+ CI/Test]   | 2023/05/30 11:33:44 ArrayLit [15]int8 15 false\n[Go+ CI/Test]   | 2023/05/30 11:33:44 UnaryOp & flags: 0\n[Go+ CI/Test]   | 2023/05/30 11:33:44 ==> MatchFuncCall instructionType{instr: gox.addrInstr}\n[Go+ CI/Test]   | 2023/05/30 11:33:44 Call 1 0 // TypeType{typ: unsafe.Pointer}\n[Go+ CI/Test]   | 2023/05/30 11:33:44 ==> MatchFuncCall TypeType{typ: unsafe.Pointer}\n[Go+ CI/Test]   | 2023/05/30 11:33:44 Call 1 0 // TypeType{typ: *int8}\n[Go+ CI/Test]   | 2023/05/30 11:33:44 ==> MatchFuncCall TypeType{typ: *int8}\n[Go+ CI/Test]   | 2023/05/30 11:33:44 Call 1 0 // func(format *int8, args ...interface{}) int32\n[Go+ CI/Test]   | 2023/05/30 11:33:44 ==> MatchFuncCall func(format *int8, args ...interface{}) int32\n[Go+ CI/Test]   | 2023/05/30 11:33:44 ==> MatchType *int8, *int8\n[Go+ CI/Test]   | 2023/05/30 11:33:44 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:33:44 ==> ASTFile \n[Go+ CI/Test]   | --- PASS: TestHelloC2go2 (0.00s)\n[Go+ CI/Test]   | === RUN   TestHelloC2go3\n[Go+ CI/Test]   | 2023/05/30 11:33:44 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:33:44 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:33:44 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:33:44 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:44 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:44 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:44 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:44 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:44 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:44 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:44 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:44 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:44 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:44 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:33:44 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:33:44 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:33:44 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:33:44 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:33:44 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:33:44 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:33:44 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:33:44 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:33:44 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:33:44 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:33:44 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:33:44 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:33:44 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:33:44 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:33:44 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:33:44 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:33:44 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:33:44 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:33:44 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:33:44 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:33:44 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:33:44 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:33:44 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:33:44 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:33:44 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:33:44 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:33:44 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:33:44 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:33:44 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:33:44 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:33:44 ==> Preload func main\n[Go+ CI/Test]   | 2023/05/30 11:33:44 ==> Load func main\n[Go+ CI/Test]   | 2023/05/30 11:33:44 NewFunc main func()\n[Go+ CI/Test]   | 2023/05/30 11:33:44 Val Printf func(format *int8, args ...interface{}) int32\n[Go+ CI/Test]   | 2023/05/30 11:33:44 Typ *int8\n[Go+ CI/Test]   | 2023/05/30 11:33:44 Typ unsafe.Pointer\n[Go+ CI/Test]   | 2023/05/30 11:33:44 Val 72 int32\n[Go+ CI/Test]   | 2023/05/30 11:33:44 Val 101 int32\n[Go+ CI/Test]   | 2023/05/30 11:33:44 Val 108 int32\n[Go+ CI/Test]   | 2023/05/30 11:33:44 Val 108 int32\n[Go+ CI/Test]   | 2023/05/30 11:33:44 Val 111 int32\n[Go+ CI/Test]   | 2023/05/30 11:33:44 Val 44 int32\n[Go+ CI/Test]   | 2023/05/30 11:33:44 Val 32 int32\n[Go+ CI/Test]   | 2023/05/30 11:33:44 Val 119 int32\n[Go+ CI/Test]   | 2023/05/30 11:33:44 Val 111 int32\n[Go+ CI/Test]   | 2023/05/30 11:33:44 Val 114 int32\n[Go+ CI/Test]   | 2023/05/30 11:33:44 Val 108 int32\n[Go+ CI/Test]   | 2023/05/30 11:33:44 Val 100 int32\n[Go+ CI/Test]   | 2023/05/30 11:33:44 Val 33 int32\n[Go+ CI/Test]   | 2023/05/30 11:33:44 Val 10 int32\n[Go+ CI/Test]   | 2023/05/30 11:33:44 Val 0 int32\n[Go+ CI/Test]   | 2023/05/30 11:33:44 ArrayLit [15]int8 15 false\n[Go+ CI/Test]   | 2023/05/30 11:33:44 UnaryOp & flags: 0\n[Go+ CI/Test]   | 2023/05/30 11:33:44 ==> MatchFuncCall instructionType{instr: gox.addrInstr}\n[Go+ CI/Test]   | 2023/05/30 11:33:44 Call 1 0 // TypeType{typ: unsafe.Pointer}\n[Go+ CI/Test]   | 2023/05/30 11:33:44 ==> MatchFuncCall TypeType{typ: unsafe.Pointer}\n[Go+ CI/Test]   | 2023/05/30 11:33:44 Call 1 0 // TypeType{typ: *int8}\n[Go+ CI/Test]   | 2023/05/30 11:33:44 ==> MatchFuncCall TypeType{typ: *int8}\n[Go+ CI/Test]   | 2023/05/30 11:33:44 Call 1 0 // func(format *int8, args ...interface{}) int32\n[Go+ CI/Test]   | 2023/05/30 11:33:44 ==> MatchFuncCall func(format *int8, args ...interface{}) int32\n[Go+ CI/Test]   | 2023/05/30 11:33:44 ==> MatchType *int8, *int8\n[Go+ CI/Test]   | 2023/05/30 11:33:44 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:33:44 ==> ASTFile \n[Go+ CI/Test]   | --- PASS: TestHelloC2go3 (0.00s)\n[Go+ CI/Test]   | === RUN   TestErrHelloC2go\n[Go+ CI/Test]   | 2023/05/30 11:33:44 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:33:44 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:33:44 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:33:44 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:44 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:44 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:44 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:44 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:44 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:44 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:44 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:44 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:44 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:44 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:33:44 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:33:44 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:33:44 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:33:44 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:33:44 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:33:44 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:33:44 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:33:44 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:33:44 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:33:44 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:33:44 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:33:44 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:33:44 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:33:44 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:33:44 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:33:44 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:33:44 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:33:44 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:33:44 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:33:44 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:33:44 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:33:44 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:33:44 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:33:44 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:33:44 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:33:44 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:33:44 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:33:44 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:33:44 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:33:44 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:33:44 ==> Preload func main\n[Go+ CI/Test]   | 2023/05/30 11:33:44 ==> Load func main\n[Go+ CI/Test]   | 2023/05/30 11:33:44 NewFunc main func()\n[Go+ CI/Test]   | 2023/05/30 11:33:44 SetComments 0 \n[Go+ CI/Test]   | //line /foo/bar.gop:7\n[Go+ CI/Test]   | 2023/05/30 11:33:44 ResetStmt\n[Go+ CI/Test]   | 2023/05/30 11:33:44 End // Func\n[Go+ CI/Test]   | --- PASS: TestErrHelloC2go (0.00s)\n[Go+ CI/Test]   | === RUN   TestSpxError\n[Go+ CI/Test]   | 2023/05/30 11:33:44 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:33:44 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:33:44 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:33:44 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:44 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:44 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:44 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:44 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:44 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:44 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:44 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:44 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:44 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:44 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:33:44 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:33:44 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:33:44 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:33:44 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:33:44 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:33:44 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:33:44 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:33:44 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:33:44 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:33:44 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:33:44 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:33:44 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:33:44 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:33:44 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:33:44 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:33:44 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:33:44 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:33:44 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:33:44 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:33:44 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:33:44 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:33:44 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:33:44 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:33:44 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:33:44 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:33:44 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:33:44 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:33:44 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:33:44 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:33:44 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> Import github.com/goplus/gop/cl/internal/spx\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewTemplateRecvMethod MyGame Main\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewTemplateRecvMethod MyGame Run\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadFunc Rand\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadMethod MyGame Broadcast\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> Preload type Kai\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> Preload method Kai.Main\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> Preload type Game\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> Load > NewType Kai\n[Go+ CI/Test]   | 2023/05/30 11:33:45 NewType Kai\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> Load > InitType Kai\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> Load > NewType Game\n[Go+ CI/Test]   | 2023/05/30 11:33:45 NewType Game\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> Lookup (LoadSymbol) Game => type Game <nil>\n[Go+ CI/Test]   | 2023/05/30 11:33:45 InitType Kai struct{github.com/goplus/gop/cl/internal/spx.Sprite; *Game}\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> LookupParent Kai => type Kai struct{github.com/goplus/gop/cl/internal/spx.Sprite; *Game}\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> Load method *Kai.Main\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> Load > InitType Game\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> LookupParent Kai => type Kai struct{github.com/goplus/gop/cl/internal/spx.Sprite; *Game}\n[Go+ CI/Test]   | 2023/05/30 11:33:45 InitType Game struct{*github.com/goplus/gop/cl/internal/spx.MyGame; Kai Kai; userScore int}\n[Go+ CI/Test]   | 2023/05/30 11:33:45 NewFunc Main (*Kai) func()\n[Go+ CI/Test]   | 2023/05/30 11:33:45 SetComments 0 \n[Go+ CI/Test]   | //line /foo/Kai.tspx:2\n[Go+ CI/Test]   | 2023/05/30 11:33:45 Val this *Kai\n[Go+ CI/Test]   | 2023/05/30 11:33:45 Member println 1 // *Kai\n[Go+ CI/Test]   | 2023/05/30 11:33:45 Val println overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:33:45 Val &{0 STRING \"hi\"} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:33:45 Call 1 0 // overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> MatchFuncCall overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> MatchFuncCall func(a ...interface{}) (n int, err error)\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> MatchType untyped string (\"hi\"), interface{}\n[Go+ CI/Test]   | 2023/05/30 11:33:45 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> Import github.com/goplus/gop/cl/internal/spx\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewTemplateRecvMethod MyGame Main\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewTemplateRecvMethod MyGame Run\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadFunc Rand\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadMethod MyGame Broadcast\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> Preload type Kai\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> Preload method Kai.Main\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> Preload type Game\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> Load > NewType Kai\n[Go+ CI/Test]   | 2023/05/30 11:33:45 NewType Kai\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> Load > InitType Kai\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> Load > NewType Game\n[Go+ CI/Test]   | 2023/05/30 11:33:45 NewType Game\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> Lookup (LoadSymbol) Game => type Game <nil>\n[Go+ CI/Test]   | 2023/05/30 11:33:45 InitType Kai struct{github.com/goplus/gop/cl/internal/spx.Sprite; *Game}\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> LookupParent Kai => type Kai struct{github.com/goplus/gop/cl/internal/spx.Sprite; *Game}\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> Load method *Kai.Main\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> Load > InitType Game\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> LookupParent Kai => type Kai struct{github.com/goplus/gop/cl/internal/spx.Sprite; *Game}\n[Go+ CI/Test]   | 2023/05/30 11:33:45 InitType Game struct{*github.com/goplus/gop/cl/internal/spx.MyGame; Kai Kai; userScore int}\n[Go+ CI/Test]   | 2023/05/30 11:33:45 NewFunc Main (*Kai) func()\n[Go+ CI/Test]   | 2023/05/30 11:33:45 SetComments 0 \n[Go+ CI/Test]   | //line /foo/Kai.tspx:5\n[Go+ CI/Test]   | 2023/05/30 11:33:45 Val this *Kai\n[Go+ CI/Test]   | 2023/05/30 11:33:45 Member println 1 // *Kai\n[Go+ CI/Test]   | 2023/05/30 11:33:45 Val println overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:33:45 Val &{0 STRING \"hi\"} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:33:45 Call 1 0 // overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> MatchFuncCall overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> MatchFuncCall func(a ...interface{}) (n int, err error)\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> MatchType untyped string (\"hi\"), interface{}\n[Go+ CI/Test]   | 2023/05/30 11:33:45 End // Func\n[Go+ CI/Test]   | --- PASS: TestSpxError (0.40s)\n[Go+ CI/Test]   | === RUN   TestSpxBasic\n[Go+ CI/Test]   | === RUN   TestSpxBasic/gopSpxTest\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> Import github.com/goplus/gop/cl/internal/spx\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewTemplateRecvMethod MyGame Main\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewTemplateRecvMethod MyGame Run\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadFunc Rand\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadMethod MyGame Broadcast\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> Preload type Kai\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> Preload method Kai.onMsg\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> Preload type Game\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> Preload method Game.onInit\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> Load > NewType Game\n[Go+ CI/Test]   | 2023/05/30 11:33:45 NewType Game\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> Load > InitType Game\n[Go+ CI/Test]   | 2023/05/30 11:33:45 InitType Game struct{*github.com/goplus/gop/cl/internal/spx.MyGame}\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> LookupParent Game => type Game struct{*github.com/goplus/gop/cl/internal/spx.MyGame}\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> Load method *Game.onInit\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> Load > NewType Kai\n[Go+ CI/Test]   | 2023/05/30 11:33:45 NewType Kai\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> Load > InitType Kai\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> LookupParent Game => type Game struct{*github.com/goplus/gop/cl/internal/spx.MyGame}\n[Go+ CI/Test]   | 2023/05/30 11:33:45 InitType Kai struct{github.com/goplus/gop/cl/internal/spx.Sprite; *Game}\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> LookupParent Kai => type Kai struct{github.com/goplus/gop/cl/internal/spx.Sprite; *Game}\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> Load method *Kai.onMsg\n[Go+ CI/Test]   | 2023/05/30 11:33:45 NewFunc onInit (*Game) func()\n[Go+ CI/Test]   | 2023/05/30 11:33:45 For\n[Go+ CI/Test]   | 2023/05/30 11:33:45 None\n[Go+ CI/Test]   | 2023/05/30 11:33:45 Then\n[Go+ CI/Test]   | 2023/05/30 11:33:45 Val Sched func()\n[Go+ CI/Test]   | 2023/05/30 11:33:45 Call 0 0 // func()\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> MatchFuncCall func()\n[Go+ CI/Test]   | 2023/05/30 11:33:45 Val SchedNow func()\n[Go+ CI/Test]   | 2023/05/30 11:33:45 Call 0 0 // func()\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> MatchFuncCall func()\n[Go+ CI/Test]   | 2023/05/30 11:33:45 End // For\n[Go+ CI/Test]   | 2023/05/30 11:33:45 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:33:45 NewFunc onMsg (*Kai) func(msg string)\n[Go+ CI/Test]   | 2023/05/30 11:33:45 For\n[Go+ CI/Test]   | 2023/05/30 11:33:45 None\n[Go+ CI/Test]   | 2023/05/30 11:33:45 Then\n[Go+ CI/Test]   | 2023/05/30 11:33:45 Val this *Kai\n[Go+ CI/Test]   | 2023/05/30 11:33:45 Member say 1 // *Kai\n[Go+ CI/Test]   | 2023/05/30 11:33:45 Val &{0 STRING \"Hi\"} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:33:45 Call 1 0 // func(msg string, secs ...float64)\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> MatchFuncCall func(msg string, secs ...float64)\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> MatchType untyped string (\"Hi\"), string\n[Go+ CI/Test]   | 2023/05/30 11:33:45 End // For\n[Go+ CI/Test]   | 2023/05/30 11:33:45 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> ASTFile \n[Go+ CI/Test]   | --- PASS: TestSpxBasic (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestSpxBasic/gopSpxTest (0.00s)\n[Go+ CI/Test]   | === RUN   TestSpxBasic2\n[Go+ CI/Test]   | === RUN   TestSpxBasic2/gopSpxTest\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> Import github.com/goplus/gop/cl/internal/spx\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewTemplateRecvMethod MyGame Main\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewTemplateRecvMethod MyGame Run\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadFunc Rand\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadMethod MyGame Broadcast\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> Preload type bar\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> Preload type index\n[Go+ CI/Test]   | 2023/05/30 11:33:45 NewConstDefs\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> Preload const [Foo]\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> Preload method index.bar\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> Preload method index.onInit\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> Load const [Foo] <nil>\n[Go+ CI/Test]   | 2023/05/30 11:33:45 NewConst [Foo] 0\n[Go+ CI/Test]   | 2023/05/30 11:33:45 Val &{0 INT 1} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:33:45 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> Load > NewType index\n[Go+ CI/Test]   | 2023/05/30 11:33:45 NewType index\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> Load > InitType index\n[Go+ CI/Test]   | 2023/05/30 11:33:45 InitType index struct{*github.com/goplus/gop/cl/internal/spx.MyGame}\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> LookupParent index => type index struct{*github.com/goplus/gop/cl/internal/spx.MyGame}\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> Load method *index.bar\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> LookupParent index => type index struct{*github.com/goplus/gop/cl/internal/spx.MyGame}\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> Load method *index.onInit\n[Go+ CI/Test]   | 2023/05/30 11:33:45 NewFunc bar (*index) func()\n[Go+ CI/Test]   | 2023/05/30 11:33:45 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:33:45 NewFunc onInit (*index) func()\n[Go+ CI/Test]   | 2023/05/30 11:33:45 Val this *index\n[Go+ CI/Test]   | 2023/05/30 11:33:45 Member Foo 1 // *index\n[Go+ CI/Test]   | 2023/05/30 11:33:45 Val Foo untyped int\n[Go+ CI/Test]   | 2023/05/30 11:33:45 Val this *index\n[Go+ CI/Test]   | 2023/05/30 11:33:45 Member bar 1 // *index\n[Go+ CI/Test]   | 2023/05/30 11:33:45 Call 0 0 // func()\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> MatchFuncCall func()\n[Go+ CI/Test]   | 2023/05/30 11:33:45 Val this *index\n[Go+ CI/Test]   | 2023/05/30 11:33:45 Member fmt 2 // *index\n[Go+ CI/Test]   | 2023/05/30 11:33:45 Val Println func(a ...interface{}) (n int, err error)\n[Go+ CI/Test]   | 2023/05/30 11:33:45 Val &{0 STRING \"Hi\"} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:33:45 Call 1 0 // func(a ...interface{}) (n int, err error)\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> MatchFuncCall func(a ...interface{}) (n int, err error)\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> MatchType untyped string (\"Hi\"), interface{}\n[Go+ CI/Test]   | 2023/05/30 11:33:45 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> ASTFile \n[Go+ CI/Test]   | --- PASS: TestSpxBasic2 (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestSpxBasic2/gopSpxTest (0.00s)\n[Go+ CI/Test]   | === RUN   TestSpxMethod\n[Go+ CI/Test]   | === RUN   TestSpxMethod/gopSpxTest\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> Import github.com/goplus/gop/cl/internal/spx\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewTemplateRecvMethod MyGame Main\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewTemplateRecvMethod MyGame Run\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadFunc Rand\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadMethod MyGame Broadcast\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> Preload type bar\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> Preload method bar.onInit\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> Preload type Game\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> Preload method Game.onInit\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> Load > NewType Game\n[Go+ CI/Test]   | 2023/05/30 11:33:45 NewType Game\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> Load > InitType Game\n[Go+ CI/Test]   | 2023/05/30 11:33:45 InitType Game struct{*github.com/goplus/gop/cl/internal/spx.MyGame}\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> LookupParent Game => type Game struct{*github.com/goplus/gop/cl/internal/spx.MyGame}\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> Load method *Game.onInit\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> Load > NewType bar\n[Go+ CI/Test]   | 2023/05/30 11:33:45 NewType bar\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> Load > InitType bar\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> LookupParent Game => type Game struct{*github.com/goplus/gop/cl/internal/spx.MyGame}\n[Go+ CI/Test]   | 2023/05/30 11:33:45 InitType bar struct{github.com/goplus/gop/cl/internal/spx.Sprite; *Game}\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> LookupParent bar => type bar struct{github.com/goplus/gop/cl/internal/spx.Sprite; *Game}\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> Load method *bar.onInit\n[Go+ CI/Test]   | 2023/05/30 11:33:45 NewFunc onInit (*Game) func()\n[Go+ CI/Test]   | 2023/05/30 11:33:45 Val this *Game\n[Go+ CI/Test]   | 2023/05/30 11:33:45 Member sched 1 // *Game\n[Go+ CI/Test]   | 2023/05/30 11:33:45 Val Sched func()\n[Go+ CI/Test]   | 2023/05/30 11:33:45 Call 0 0 // func()\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> MatchFuncCall func()\n[Go+ CI/Test]   | 2023/05/30 11:33:45 Val this *Game\n[Go+ CI/Test]   | 2023/05/30 11:33:45 Member broadcast 1 // *Game\n[Go+ CI/Test]   | 2023/05/30 11:33:45 Val &{0 STRING \"msg1\"} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:33:45 Call 1 0 // func()\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> MatchFuncCall [func (*github.com/goplus/gop/cl/internal/spx.MyGame).Broadcast__0(msg string) func (*github.com/goplus/gop/cl/internal/spx.MyGame).Broadcast__1(msg string, wait bool) func (*github.com/goplus/gop/cl/internal/spx.MyGame).Broadcast__2(msg string, data interface{}, wait bool)]\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> MatchFuncCall func(msg string)\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> MatchType untyped string (\"msg1\"), string\n[Go+ CI/Test]   | 2023/05/30 11:33:45 Val this *Game\n[Go+ CI/Test]   | 2023/05/30 11:33:45 Member TestIntValue -1 // *Game\n[Go+ CI/Test]   | 2023/05/30 11:33:45 VarRef TestIntValue int\n[Go+ CI/Test]   | 2023/05/30 11:33:45 Val &{0 INT 1} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:33:45 Assign 1 1\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> MatchType untyped int (1), int\n[Go+ CI/Test]   | 2023/05/30 11:33:45 DefineVarStart [x]\n[Go+ CI/Test]   | 2023/05/30 11:33:45 Val this *Game\n[Go+ CI/Test]   | 2023/05/30 11:33:45 Member round 1 // *Game\n[Go+ CI/Test]   | 2023/05/30 11:33:45 Val Round func(x float64) float64\n[Go+ CI/Test]   | 2023/05/30 11:33:45 Val &{0 FLOAT 1.2} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:33:45 Call 1 0 // func(x float64) float64\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> MatchFuncCall func(x float64) float64\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> MatchType untyped float (1.2), float64\n[Go+ CI/Test]   | 2023/05/30 11:33:45 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:33:45 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:33:45 NewFunc onInit (*bar) func()\n[Go+ CI/Test]   | 2023/05/30 11:33:45 Val this *bar\n[Go+ CI/Test]   | 2023/05/30 11:33:45 Member setCostume 1 // *bar\n[Go+ CI/Test]   | 2023/05/30 11:33:45 Val &{0 STRING \"kai-a\"} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:33:45 Call 1 0 // func(costume interface{})\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> MatchFuncCall func(costume interface{})\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> MatchType untyped string (\"kai-a\"), interface{}\n[Go+ CI/Test]   | 2023/05/30 11:33:45 Val this *bar\n[Go+ CI/Test]   | 2023/05/30 11:33:45 Member play 1 // *bar\n[Go+ CI/Test]   | 2023/05/30 11:33:45 Val &{0 STRING \"recordingWhere\"} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:33:45 Call 1 0 // func(media string, wait ...bool)\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> MatchFuncCall func(media string, wait ...bool)\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> MatchType untyped string (\"recordingWhere\"), string\n[Go+ CI/Test]   | 2023/05/30 11:33:45 Val this *bar\n[Go+ CI/Test]   | 2023/05/30 11:33:45 Member say 1 // *bar\n[Go+ CI/Test]   | 2023/05/30 11:33:45 Val &{0 STRING \"Where do you come from?\"} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:33:45 Val &{0 INT 2} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:33:45 Call 2 0 // func(msg string, secs ...float64)\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> MatchFuncCall func(msg string, secs ...float64)\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> MatchType untyped string (\"Where do you come from?\"), string\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> MatchType untyped int (2), float64\n[Go+ CI/Test]   | 2023/05/30 11:33:45 Val this *bar\n[Go+ CI/Test]   | 2023/05/30 11:33:45 Member broadcast 1 // *bar\n[Go+ CI/Test]   | 2023/05/30 11:33:45 Val &{0 STRING \"msg2\"} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:33:45 Call 1 0 // func()\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> MatchFuncCall [func (*github.com/goplus/gop/cl/internal/spx.MyGame).Broadcast__0(msg string) func (*github.com/goplus/gop/cl/internal/spx.MyGame).Broadcast__1(msg string, wait bool) func (*github.com/goplus/gop/cl/internal/spx.MyGame).Broadcast__2(msg string, data interface{}, wait bool)]\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> MatchFuncCall func(msg string)\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> MatchType untyped string (\"msg2\"), string\n[Go+ CI/Test]   | 2023/05/30 11:33:45 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> ASTFile \n[Go+ CI/Test]   | --- PASS: TestSpxMethod (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestSpxMethod/gopSpxTest (0.00s)\n[Go+ CI/Test]   | === RUN   TestSpxVar\n[Go+ CI/Test]   | === RUN   TestSpxVar/gopSpxTest\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> Import github.com/goplus/gop/cl/internal/spx\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewTemplateRecvMethod MyGame Main\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewTemplateRecvMethod MyGame Run\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadFunc Rand\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadMethod MyGame Broadcast\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> Preload type Kai\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> Preload method Kai.onInit\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> Preload method Kai.onCloned\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> Preload type Game\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> Preload method Game.onInit\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> Load > NewType Game\n[Go+ CI/Test]   | 2023/05/30 11:33:45 NewType Game\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> Load > InitType Game\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> Load > NewType Kai\n[Go+ CI/Test]   | 2023/05/30 11:33:45 NewType Kai\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> Lookup (LoadSymbol) Kai => type Kai <nil>\n[Go+ CI/Test]   | 2023/05/30 11:33:45 InitType Game struct{*github.com/goplus/gop/cl/internal/spx.MyGame; Kai Kai}\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> LookupParent Game => type Game struct{*github.com/goplus/gop/cl/internal/spx.MyGame; Kai Kai}\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> Load method *Game.onInit\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> Load > InitType Kai\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> LookupParent Game => type Game struct{*github.com/goplus/gop/cl/internal/spx.MyGame; Kai Kai}\n[Go+ CI/Test]   | 2023/05/30 11:33:45 InitType Kai struct{github.com/goplus/gop/cl/internal/spx.Sprite; *Game; a int}\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> LookupParent Kai => type Kai struct{github.com/goplus/gop/cl/internal/spx.Sprite; *Game; a int}\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> Load method *Kai.onInit\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> LookupParent Kai => type Kai struct{github.com/goplus/gop/cl/internal/spx.Sprite; *Game; a int}\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> Load method *Kai.onCloned\n[Go+ CI/Test]   | 2023/05/30 11:33:45 NewFunc onInit (*Game) func()\n[Go+ CI/Test]   | 2023/05/30 11:33:45 Val this *Game\n[Go+ CI/Test]   | 2023/05/30 11:33:45 Member Kai 2 // *Game\n[Go+ CI/Test]   | 2023/05/30 11:33:45 Member clone 1 // Kai\n[Go+ CI/Test]   | 2023/05/30 11:33:45 Call 0 0 // func(data ...interface{}) *github.com/goplus/gop/cl/internal/spx.Sprite\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> MatchFuncCall func(data ...interface{}) *github.com/goplus/gop/cl/internal/spx.Sprite\n[Go+ CI/Test]   | 2023/05/30 11:33:45 Val this *Game\n[Go+ CI/Test]   | 2023/05/30 11:33:45 Member broadcast 1 // *Game\n[Go+ CI/Test]   | 2023/05/30 11:33:45 Val &{0 STRING \"msg1\"} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:33:45 Call 1 0 // func()\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> MatchFuncCall [func (*github.com/goplus/gop/cl/internal/spx.MyGame).Broadcast__0(msg string) func (*github.com/goplus/gop/cl/internal/spx.MyGame).Broadcast__1(msg string, wait bool) func (*github.com/goplus/gop/cl/internal/spx.MyGame).Broadcast__2(msg string, data interface{}, wait bool)]\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> MatchFuncCall func(msg string)\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> MatchType untyped string (\"msg1\"), string\n[Go+ CI/Test]   | 2023/05/30 11:33:45 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:33:45 NewFunc onInit (*Kai) func()\n[Go+ CI/Test]   | 2023/05/30 11:33:45 Val this *Kai\n[Go+ CI/Test]   | 2023/05/30 11:33:45 Member a -1 // *Kai\n[Go+ CI/Test]   | 2023/05/30 11:33:45 Val &{0 INT 1} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:33:45 Assign 1 1\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> MatchType untyped int (1), int\n[Go+ CI/Test]   | 2023/05/30 11:33:45 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:33:45 NewFunc onCloned (*Kai) func()\n[Go+ CI/Test]   | 2023/05/30 11:33:45 Val this *Kai\n[Go+ CI/Test]   | 2023/05/30 11:33:45 Member say 1 // *Kai\n[Go+ CI/Test]   | 2023/05/30 11:33:45 Val &{0 STRING \"Hi\"} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:33:45 Call 1 0 // func(msg string, secs ...float64)\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> MatchFuncCall func(msg string, secs ...float64)\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> MatchType untyped string (\"Hi\"), string\n[Go+ CI/Test]   | 2023/05/30 11:33:45 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> ASTFile \n[Go+ CI/Test]   | --- PASS: TestSpxVar (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestSpxVar/gopSpxTest (0.00s)\n[Go+ CI/Test]   | === RUN   TestSpxRun\n[Go+ CI/Test]   | === RUN   TestSpxRun/gopSpxTest\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> Import github.com/goplus/gop/cl/internal/spx\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewTemplateRecvMethod MyGame Main\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewTemplateRecvMethod MyGame Run\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadFunc Rand\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadMethod MyGame Broadcast\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> Preload type Kai\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> Preload method Kai.Main\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> Preload type index\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> Preload var [x]\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> Preload method index.MainEntry\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> Load var float64 [x]\n[Go+ CI/Test]   | 2023/05/30 11:33:45 NewVar [x]\n[Go+ CI/Test]   | 2023/05/30 11:33:45 Val Rand overloadFuncType{funcs: [func github.com/goplus/gop/cl/internal/spx.Rand__0(int) int func github.com/goplus/gop/cl/internal/spx.Rand__1(float64) float64]}\n[Go+ CI/Test]   | 2023/05/30 11:33:45 Val &{0 FLOAT 1.2} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:33:45 Call 1 0 // overloadFuncType{funcs: [func github.com/goplus/gop/cl/internal/spx.Rand__0(int) int func github.com/goplus/gop/cl/internal/spx.Rand__1(float64) float64]}\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> MatchFuncCall overloadFuncType{funcs: [func github.com/goplus/gop/cl/internal/spx.Rand__0(int) int func github.com/goplus/gop/cl/internal/spx.Rand__1(float64) float64]}\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> MatchFuncCall func(int) int\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> MatchType untyped float (1.2), int\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> MatchFuncCall func(float64) float64\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> MatchType untyped float (1.2), float64\n[Go+ CI/Test]   | 2023/05/30 11:33:45 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> MatchType float64, float64\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> Load > NewType index\n[Go+ CI/Test]   | 2023/05/30 11:33:45 NewType index\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> Load > InitType index\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> Load > NewType Kai\n[Go+ CI/Test]   | 2023/05/30 11:33:45 NewType Kai\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> Lookup (LoadSymbol) Kai => type Kai <nil>\n[Go+ CI/Test]   | 2023/05/30 11:33:45 InitType index struct{*github.com/goplus/gop/cl/internal/spx.MyGame; Kai Kai; t github.com/goplus/gop/cl/internal/spx.Sound}\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> LookupParent index => type index struct{*github.com/goplus/gop/cl/internal/spx.MyGame; Kai Kai; t github.com/goplus/gop/cl/internal/spx.Sound}\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> Load method *index.MainEntry\n[Go+ CI/Test]   | 2023/05/30 11:33:45 NewFunc main func()\n[Go+ CI/Test]   | 2023/05/30 11:33:45 Val new instructionType{instr: gox.newInstr}\n[Go+ CI/Test]   | 2023/05/30 11:33:45 Val index index\n[Go+ CI/Test]   | 2023/05/30 11:33:45 Call 1 0 // instructionType{instr: gox.newInstr}\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> MatchFuncCall instructionType{instr: gox.newInstr}\n[Go+ CI/Test]   | 2023/05/30 11:33:45 Member Main 0 // *index\n[Go+ CI/Test]   | 2023/05/30 11:33:45 Call 0 0 // templateRecvMethodType{fn: func github.com/goplus/gop/cl/internal/spx.Gopt_MyGame_Main(game interface{})}\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> MatchFuncCall templateRecvMethodType{fn: func github.com/goplus/gop/cl/internal/spx.Gopt_MyGame_Main(game interface{})}\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> MatchFuncCall func(game interface{})\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> MatchType *index, interface{}\n[Go+ CI/Test]   | 2023/05/30 11:33:45 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> Load > InitType Kai\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> LookupParent index => type index struct{*github.com/goplus/gop/cl/internal/spx.MyGame; Kai Kai; t github.com/goplus/gop/cl/internal/spx.Sound}\n[Go+ CI/Test]   | 2023/05/30 11:33:45 InitType Kai struct{github.com/goplus/gop/cl/internal/spx.Sprite; *index}\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> LookupParent Kai => type Kai struct{github.com/goplus/gop/cl/internal/spx.Sprite; *index}\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> Load method *Kai.Main\n[Go+ CI/Test]   | 2023/05/30 11:33:45 NewFunc MainEntry (*index) func()\n[Go+ CI/Test]   | 2023/05/30 11:33:45 Val this *index\n[Go+ CI/Test]   | 2023/05/30 11:33:45 Member run 1 // *index\n[Go+ CI/Test]   | 2023/05/30 11:33:45 Val &{0 STRING \"hzip://open.qiniu.us/weather/res.zip\"} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:33:45 Call 1 0 // templateRecvMethodType{fn: func github.com/goplus/gop/cl/internal/spx.Gopt_MyGame_Run(game interface{}, resource string) error}\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> MatchFuncCall templateRecvMethodType{fn: func github.com/goplus/gop/cl/internal/spx.Gopt_MyGame_Run(game interface{}, resource string) error}\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> MatchFuncCall func(game interface{}, resource string) error\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> MatchType *index, interface{}\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> MatchType untyped string (\"hzip://open.qiniu.us/weather/res.zip\"), string\n[Go+ CI/Test]   | 2023/05/30 11:33:45 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:33:45 NewFunc Main (*Kai) func()\n[Go+ CI/Test]   | 2023/05/30 11:33:45 Val this *Kai\n[Go+ CI/Test]   | 2023/05/30 11:33:45 Member println 1 // *Kai\n[Go+ CI/Test]   | 2023/05/30 11:33:45 Val println overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:33:45 Val &{0 STRING \"Hi\"} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:33:45 Call 1 0 // overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> MatchFuncCall overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> MatchFuncCall func(a ...interface{}) (n int, err error)\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> MatchType untyped string (\"Hi\"), interface{}\n[Go+ CI/Test]   | 2023/05/30 11:33:45 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> ASTFile \n[Go+ CI/Test]   | --- PASS: TestSpxRun (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestSpxRun/gopSpxTest (0.00s)\n[Go+ CI/Test]   | === RUN   TestSpx2\n[Go+ CI/Test]   | === RUN   TestSpx2/gopSpxTest\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> Preload type Kai\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> Preload method Kai.onMsg\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> Preload type Game\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> Preload method Game.MainEntry\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> Load > NewType Game\n[Go+ CI/Test]   | 2023/05/30 11:33:45 NewType Game\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> Load > InitType Game\n[Go+ CI/Test]   | 2023/05/30 11:33:45 InitType Game struct{github.com/goplus/gop/cl/internal/spx2.Game}\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> LookupParent Game => type Game struct{github.com/goplus/gop/cl/internal/spx2.Game}\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> Load method *Game.MainEntry\n[Go+ CI/Test]   | 2023/05/30 11:33:45 NewFunc main func()\n[Go+ CI/Test]   | 2023/05/30 11:33:45 Val new instructionType{instr: gox.newInstr}\n[Go+ CI/Test]   | 2023/05/30 11:33:45 Val Game Game\n[Go+ CI/Test]   | 2023/05/30 11:33:45 Call 1 0 // instructionType{instr: gox.newInstr}\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> MatchFuncCall instructionType{instr: gox.newInstr}\n[Go+ CI/Test]   | 2023/05/30 11:33:45 Member Main 0 // *Game\n[Go+ CI/Test]   | 2023/05/30 11:33:45 Call 0 0 // func()\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> MatchFuncCall func()\n[Go+ CI/Test]   | 2023/05/30 11:33:45 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> Load > NewType Kai\n[Go+ CI/Test]   | 2023/05/30 11:33:45 NewType Kai\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> Load > InitType Kai\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> LookupParent Game => type Game struct{github.com/goplus/gop/cl/internal/spx2.Game}\n[Go+ CI/Test]   | 2023/05/30 11:33:45 InitType Kai struct{github.com/goplus/gop/cl/internal/spx2.Sprite; *Game}\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> LookupParent Kai => type Kai struct{github.com/goplus/gop/cl/internal/spx2.Sprite; *Game}\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> Load method *Kai.onMsg\n[Go+ CI/Test]   | 2023/05/30 11:33:45 NewFunc MainEntry (*Game) func()\n[Go+ CI/Test]   | 2023/05/30 11:33:45 Val this *Game\n[Go+ CI/Test]   | 2023/05/30 11:33:45 Member println 1 // *Game\n[Go+ CI/Test]   | 2023/05/30 11:33:45 Val println overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:33:45 Val &{0 STRING \"Hi\"} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:33:45 Call 1 0 // overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> MatchFuncCall overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> MatchFuncCall func(a ...interface{}) (n int, err error)\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> MatchType untyped string (\"Hi\"), interface{}\n[Go+ CI/Test]   | 2023/05/30 11:33:45 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:33:45 NewFunc onMsg (*Kai) func(msg string)\n[Go+ CI/Test]   | 2023/05/30 11:33:45 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:33:45 ==> ASTFile \n[Go+ CI/Test]   | --- PASS: TestSpx2 (0.09s)\n[Go+ CI/Test]   |     --- PASS: TestSpx2/gopSpxTest (0.09s)\n[Go+ CI/Test]   | === RUN   TestSpxMainEntry\n[Go+ CI/Test]   | === RUN   TestSpxMainEntry/Nocode\n[Go+ CI/Test]   | 2023/05/30 11:33:47 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:33:47 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:33:48 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:33:48 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:48 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:48 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:48 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:48 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:48 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:48 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:48 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:48 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:48 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:48 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:33:48 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:33:48 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:33:48 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:33:48 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:33:48 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:33:48 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:33:48 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:33:48 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:33:48 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:33:48 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:33:48 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:33:48 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:33:48 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:33:48 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:33:48 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:33:48 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:33:48 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:33:48 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:33:48 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:33:48 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:33:48 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:33:48 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:33:48 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:33:48 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:33:48 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:33:48 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:33:48 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:33:48 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:33:48 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:33:48 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:33:50 ==> Preload type Kai\n[Go+ CI/Test]   | 2023/05/30 11:33:50 ==> Preload type Game\n[Go+ CI/Test]   | 2023/05/30 11:33:50 ==> Preload method Game.MainEntry\n[Go+ CI/Test]   | 2023/05/30 11:33:50 ==> Load > NewType Game\n[Go+ CI/Test]   | 2023/05/30 11:33:50 NewType Game\n[Go+ CI/Test]   | 2023/05/30 11:33:50 ==> Load > InitType Game\n[Go+ CI/Test]   | 2023/05/30 11:33:50 InitType Game struct{github.com/goplus/gop/cl/internal/spx2.Game}\n[Go+ CI/Test]   | 2023/05/30 11:33:50 ==> LookupParent Game => type Game struct{github.com/goplus/gop/cl/internal/spx2.Game}\n[Go+ CI/Test]   | 2023/05/30 11:33:50 ==> Load method *Game.MainEntry\n[Go+ CI/Test]   | 2023/05/30 11:33:50 NewFunc main func()\n[Go+ CI/Test]   | 2023/05/30 11:33:50 Val new instructionType{instr: gox.newInstr}\n[Go+ CI/Test]   | 2023/05/30 11:33:50 Val Game Game\n[Go+ CI/Test]   | 2023/05/30 11:33:50 Call 1 0 // instructionType{instr: gox.newInstr}\n[Go+ CI/Test]   | 2023/05/30 11:33:50 ==> MatchFuncCall instructionType{instr: gox.newInstr}\n[Go+ CI/Test]   | 2023/05/30 11:33:50 Member Main 0 // *Game\n[Go+ CI/Test]   | 2023/05/30 11:33:50 Call 0 0 // func()\n[Go+ CI/Test]   | 2023/05/30 11:33:50 ==> MatchFuncCall func()\n[Go+ CI/Test]   | 2023/05/30 11:33:50 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:33:50 NewFunc MainEntry (*Game) func()\n[Go+ CI/Test]   | 2023/05/30 11:33:50 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:33:50 ==> ASTFile \n[Go+ CI/Test]   | === RUN   TestSpxMainEntry/OnlyGmx\n[Go+ CI/Test]   | 2023/05/30 11:33:51 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:33:51 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:33:51 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:33:51 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:51 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:51 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:51 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:51 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:51 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:51 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:51 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:51 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:51 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:51 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:33:51 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:33:51 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:33:51 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:33:51 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:33:51 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:33:51 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:33:51 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:33:51 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:33:51 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:33:51 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:33:51 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:33:51 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:33:51 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:33:51 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:33:51 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:33:51 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:33:51 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:33:51 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:33:51 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:33:51 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:33:51 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:33:51 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:33:51 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:33:51 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:33:51 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:33:51 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:33:51 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:33:51 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:33:51 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:33:51 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:33:53 ==> Preload type Kai\n[Go+ CI/Test]   | 2023/05/30 11:33:53 ==> Preload type Game\n[Go+ CI/Test]   | 2023/05/30 11:33:53 ==> Preload method Game.MainEntry\n[Go+ CI/Test]   | 2023/05/30 11:33:53 ==> Load > NewType Game\n[Go+ CI/Test]   | 2023/05/30 11:33:53 NewType Game\n[Go+ CI/Test]   | 2023/05/30 11:33:53 ==> Load > InitType Game\n[Go+ CI/Test]   | 2023/05/30 11:33:53 ==> Load > NewType Kai\n[Go+ CI/Test]   | 2023/05/30 11:33:53 NewType Kai\n[Go+ CI/Test]   | 2023/05/30 11:33:53 ==> Lookup (LoadSymbol) Kai => type Kai <nil>\n[Go+ CI/Test]   | 2023/05/30 11:33:53 InitType Game struct{github.com/goplus/gop/cl/internal/spx2.Game; Kai Kai}\n[Go+ CI/Test]   | 2023/05/30 11:33:53 ==> LookupParent Game => type Game struct{github.com/goplus/gop/cl/internal/spx2.Game; Kai Kai}\n[Go+ CI/Test]   | 2023/05/30 11:33:53 ==> Load method *Game.MainEntry\n[Go+ CI/Test]   | 2023/05/30 11:33:53 NewFunc main func()\n[Go+ CI/Test]   | 2023/05/30 11:33:53 Val new instructionType{instr: gox.newInstr}\n[Go+ CI/Test]   | 2023/05/30 11:33:53 Val Game Game\n[Go+ CI/Test]   | 2023/05/30 11:33:53 Call 1 0 // instructionType{instr: gox.newInstr}\n[Go+ CI/Test]   | 2023/05/30 11:33:53 ==> MatchFuncCall instructionType{instr: gox.newInstr}\n[Go+ CI/Test]   | 2023/05/30 11:33:53 Member Main 0 // *Game\n[Go+ CI/Test]   | 2023/05/30 11:33:53 Call 0 0 // func()\n[Go+ CI/Test]   | 2023/05/30 11:33:53 ==> MatchFuncCall func()\n[Go+ CI/Test]   | 2023/05/30 11:33:53 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:33:53 ==> Load > InitType Kai\n[Go+ CI/Test]   | 2023/05/30 11:33:53 ==> LookupParent Game => type Game struct{github.com/goplus/gop/cl/internal/spx2.Game; Kai Kai}\n[Go+ CI/Test]   | 2023/05/30 11:33:53 InitType Kai struct{github.com/goplus/gop/cl/internal/spx2.Sprite; *Game}\n[Go+ CI/Test]   | 2023/05/30 11:33:53 NewFunc MainEntry (*Game) func()\n[Go+ CI/Test]   | 2023/05/30 11:33:53 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:33:53 ==> ASTFile \n[Go+ CI/Test]   | === RUN   TestSpxMainEntry/KaiAndGmx\n[Go+ CI/Test]   | 2023/05/30 11:33:54 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:33:54 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:33:55 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:33:55 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:55 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:55 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:55 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:55 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:55 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:55 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:55 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:55 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:55 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:55 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:33:55 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:33:55 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:33:55 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:33:55 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:33:55 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:33:55 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:33:55 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:33:55 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:33:55 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:33:55 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:33:55 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:33:55 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:33:55 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:33:55 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:33:55 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:33:55 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:33:55 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:33:55 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:33:55 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:33:55 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:33:55 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:33:55 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:33:55 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:33:55 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:33:55 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:33:55 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:33:55 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:33:55 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:33:55 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:33:55 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:33:57 ==> Preload type Kai\n[Go+ CI/Test]   | 2023/05/30 11:33:57 ==> Preload method Kai.Main\n[Go+ CI/Test]   | 2023/05/30 11:33:57 ==> Preload method Kai.onMsg\n[Go+ CI/Test]   | 2023/05/30 11:33:57 ==> Preload type Game\n[Go+ CI/Test]   | 2023/05/30 11:33:57 ==> Preload method Game.MainEntry\n[Go+ CI/Test]   | 2023/05/30 11:33:57 ==> Load > NewType Game\n[Go+ CI/Test]   | 2023/05/30 11:33:57 NewType Game\n[Go+ CI/Test]   | 2023/05/30 11:33:57 ==> Load > InitType Game\n[Go+ CI/Test]   | 2023/05/30 11:33:57 ==> Load > NewType Kai\n[Go+ CI/Test]   | 2023/05/30 11:33:57 NewType Kai\n[Go+ CI/Test]   | 2023/05/30 11:33:57 ==> Lookup (LoadSymbol) Kai => type Kai <nil>\n[Go+ CI/Test]   | 2023/05/30 11:33:57 InitType Game struct{github.com/goplus/gop/cl/internal/spx2.Game; Kai Kai}\n[Go+ CI/Test]   | 2023/05/30 11:33:57 ==> LookupParent Game => type Game struct{github.com/goplus/gop/cl/internal/spx2.Game; Kai Kai}\n[Go+ CI/Test]   | 2023/05/30 11:33:57 ==> Load method *Game.MainEntry\n[Go+ CI/Test]   | 2023/05/30 11:33:57 NewFunc main func()\n[Go+ CI/Test]   | 2023/05/30 11:33:57 Val new instructionType{instr: gox.newInstr}\n[Go+ CI/Test]   | 2023/05/30 11:33:57 Val Game Game\n[Go+ CI/Test]   | 2023/05/30 11:33:57 Call 1 0 // instructionType{instr: gox.newInstr}\n[Go+ CI/Test]   | 2023/05/30 11:33:57 ==> MatchFuncCall instructionType{instr: gox.newInstr}\n[Go+ CI/Test]   | 2023/05/30 11:33:57 Member Main 0 // *Game\n[Go+ CI/Test]   | 2023/05/30 11:33:57 Call 0 0 // func()\n[Go+ CI/Test]   | 2023/05/30 11:33:57 ==> MatchFuncCall func()\n[Go+ CI/Test]   | 2023/05/30 11:33:57 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:33:57 ==> Load > InitType Kai\n[Go+ CI/Test]   | 2023/05/30 11:33:57 ==> LookupParent Game => type Game struct{github.com/goplus/gop/cl/internal/spx2.Game; Kai Kai}\n[Go+ CI/Test]   | 2023/05/30 11:33:57 InitType Kai struct{github.com/goplus/gop/cl/internal/spx2.Sprite; *Game}\n[Go+ CI/Test]   | 2023/05/30 11:33:57 ==> LookupParent Kai => type Kai struct{github.com/goplus/gop/cl/internal/spx2.Sprite; *Game}\n[Go+ CI/Test]   | 2023/05/30 11:33:57 ==> Load method *Kai.Main\n[Go+ CI/Test]   | 2023/05/30 11:33:57 ==> LookupParent Kai => type Kai struct{github.com/goplus/gop/cl/internal/spx2.Sprite; *Game}\n[Go+ CI/Test]   | 2023/05/30 11:33:57 ==> Load method *Kai.onMsg\n[Go+ CI/Test]   | 2023/05/30 11:33:57 NewFunc MainEntry (*Game) func()\n[Go+ CI/Test]   | 2023/05/30 11:33:57 Val this *Game\n[Go+ CI/Test]   | 2023/05/30 11:33:57 Member println 1 // *Game\n[Go+ CI/Test]   | 2023/05/30 11:33:57 Val println overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:33:57 Val &{0 STRING \"Hi\"} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:33:57 Call 1 0 // overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:33:57 ==> MatchFuncCall overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:33:57 ==> MatchFuncCall func(a ...interface{}) (n int, err error)\n[Go+ CI/Test]   | 2023/05/30 11:33:57 ==> MatchType untyped string (\"Hi\"), interface{}\n[Go+ CI/Test]   | 2023/05/30 11:33:57 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:33:57 NewFunc Main (*Kai) func()\n[Go+ CI/Test]   | 2023/05/30 11:33:57 Val this *Kai\n[Go+ CI/Test]   | 2023/05/30 11:33:57 Member println 1 // *Kai\n[Go+ CI/Test]   | 2023/05/30 11:33:57 Val println overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:33:57 Val &{0 STRING \"Hello\"} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:33:57 Call 1 0 // overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:33:57 ==> MatchFuncCall overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:33:57 ==> MatchFuncCall func(a ...interface{}) (n int, err error)\n[Go+ CI/Test]   | 2023/05/30 11:33:57 ==> MatchType untyped string (\"Hello\"), interface{}\n[Go+ CI/Test]   | 2023/05/30 11:33:57 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:33:57 NewFunc onMsg (*Kai) func(msg string)\n[Go+ CI/Test]   | 2023/05/30 11:33:57 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:33:57 ==> ASTFile \n[Go+ CI/Test]   | --- PASS: TestSpxMainEntry (12.15s)\n[Go+ CI/Test]   |     --- PASS: TestSpxMainEntry/Nocode (4.73s)\n[Go+ CI/Test]   |     --- PASS: TestSpxMainEntry/OnlyGmx (3.32s)\n[Go+ CI/Test]   |     --- PASS: TestSpxMainEntry/KaiAndGmx (4.11s)\n[Go+ CI/Test]   | === RUN   TestVargCommand\n[Go+ CI/Test]   | 2023/05/30 11:33:57 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:33:57 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:33:57 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:33:57 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:57 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:57 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:57 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:57 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:57 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:57 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:57 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:57 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:57 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:57 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:33:57 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:33:57 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:33:57 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:33:57 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:33:57 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:33:57 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:33:57 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:33:57 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:33:57 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:33:57 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:33:57 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:33:57 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:33:57 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:33:57 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:33:57 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:33:57 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:33:57 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:33:57 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:33:57 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:33:57 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:33:57 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:33:57 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:33:57 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:33:57 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:33:57 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:33:57 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:33:57 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:33:57 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:33:57 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:33:57 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:33:57 ==> Preload type foo\n[Go+ CI/Test]   | 2023/05/30 11:33:57 ==> Preload method foo.Ls\n[Go+ CI/Test]   | 2023/05/30 11:33:57 ==> Preload var [f]\n[Go+ CI/Test]   | 2023/05/30 11:33:57 ==> Preload func main\n[Go+ CI/Test]   | 2023/05/30 11:33:57 ==> Load > NewType foo\n[Go+ CI/Test]   | 2023/05/30 11:33:57 NewType foo\n[Go+ CI/Test]   | 2023/05/30 11:33:57 ==> Load > InitType foo\n[Go+ CI/Test]   | 2023/05/30 11:33:57 InitType foo int\n[Go+ CI/Test]   | 2023/05/30 11:33:57 ==> LookupParent foo => type github.com/goplus/gop/cl.foo int\n[Go+ CI/Test]   | 2023/05/30 11:33:57 ==> Load method github.com/goplus/gop/cl.foo.Ls\n[Go+ CI/Test]   | 2023/05/30 11:33:57 ==> LookupParent foo => type github.com/goplus/gop/cl.foo int\n[Go+ CI/Test]   | 2023/05/30 11:33:57 ==> Load var github.com/goplus/gop/cl.foo [f]\n[Go+ CI/Test]   | 2023/05/30 11:33:57 NewVar [f]\n[Go+ CI/Test]   | 2023/05/30 11:33:57 ==> Load func main\n[Go+ CI/Test]   | 2023/05/30 11:33:57 NewFunc main func()\n[Go+ CI/Test]   | 2023/05/30 11:33:57 Val f github.com/goplus/gop/cl.foo\n[Go+ CI/Test]   | 2023/05/30 11:33:57 Member ls 1 // github.com/goplus/gop/cl.foo\n[Go+ CI/Test]   | 2023/05/30 11:33:57 Call 0 0 // func(args ...string)\n[Go+ CI/Test]   | 2023/05/30 11:33:57 ==> MatchFuncCall func(args ...string)\n[Go+ CI/Test]   | 2023/05/30 11:33:57 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:33:57 NewFunc Ls (github.com/goplus/gop/cl.foo) func(args ...string)\n[Go+ CI/Test]   | 2023/05/30 11:33:57 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:33:57 ==> ASTFile \n[Go+ CI/Test]   | --- PASS: TestVargCommand (0.00s)\n[Go+ CI/Test]   | === RUN   TestFileOpen\n[Go+ CI/Test]   | 2023/05/30 11:33:57 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:33:57 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:33:57 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:33:57 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:57 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:57 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:57 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:57 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:57 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:57 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:57 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:57 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:57 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:57 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:33:57 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:33:57 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:33:57 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:33:57 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:33:57 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:33:57 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:33:57 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:33:57 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:33:57 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:33:57 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:33:57 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:33:57 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:33:57 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:33:57 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:33:57 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:33:57 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:33:57 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:33:57 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:33:57 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:33:57 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:33:57 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:33:57 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:33:57 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:33:57 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:33:57 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:33:57 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:33:57 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:33:57 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:33:57 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:33:57 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:33:57 ==> Preload func main\n[Go+ CI/Test]   | 2023/05/30 11:33:57 ==> Load func main\n[Go+ CI/Test]   | 2023/05/30 11:33:57 NewFunc main func()\n[Go+ CI/Test]   | 2023/05/30 11:33:57 ForRange [_ line]\n[Go+ CI/Test]   | 2023/05/30 11:33:57 Val open overloadFuncType{funcs: [func os.Open(name string) (*os.File, error)]}\n[Go+ CI/Test]   | 2023/05/30 11:33:57 Val &{0 STRING \"foo.txt\"} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:33:57 Call 1 0 // overloadFuncType{funcs: [func os.Open(name string) (*os.File, error)]}\n[Go+ CI/Test]   | 2023/05/30 11:33:57 ==> MatchFuncCall overloadFuncType{funcs: [func os.Open(name string) (*os.File, error)]}\n[Go+ CI/Test]   | 2023/05/30 11:33:57 ==> MatchFuncCall func(name string) (*os.File, error)\n[Go+ CI/Test]   | 2023/05/30 11:33:57 ==> MatchType untyped string (\"foo.txt\"), string\n[Go+ CI/Test]   | 2023/05/30 11:33:57 NewClosure func() (_gop_ret unboundType{typ: <nil>})\n[Go+ CI/Test]   | 2023/05/30 11:33:57 NewVar [_gop_err]\n[Go+ CI/Test]   | 2023/05/30 11:33:57 VarRef _gop_ret unboundType{typ: <nil>}\n[Go+ CI/Test]   | 2023/05/30 11:33:57 VarRef _gop_err error\n[Go+ CI/Test]   | 2023/05/30 11:33:57 Assign 2 1\n[Go+ CI/Test]   | 2023/05/30 11:33:57 ==> MatchType *os.File, unboundType{typ: <nil>}\n[Go+ CI/Test]   | 2023/05/30 11:33:57 ==> MatchType error, error\n[Go+ CI/Test]   | 2023/05/30 11:33:57 ==> EnsureLoaded error\n[Go+ CI/Test]   | 2023/05/30 11:33:57 ==> EnsureLoaded error\n[Go+ CI/Test]   | 2023/05/30 11:33:57 If\n[Go+ CI/Test]   | 2023/05/30 11:33:57 Val _gop_err error\n[Go+ CI/Test]   | 2023/05/30 11:33:57 Val <nil> <nil>\n[Go+ CI/Test]   | 2023/05/30 11:33:57 BinaryOp !=\n[Go+ CI/Test]   | 2023/05/30 11:33:57 Then\n[Go+ CI/Test]   | 2023/05/30 11:33:57 VarRef _gop_err error\n[Go+ CI/Test]   | 2023/05/30 11:33:58 Val NewFrame func(err error, code string, file string, line int, fn string, args ...interface{}) *github.com/qiniu/x/errors.Frame\n[Go+ CI/Test]   | 2023/05/30 11:33:58 Val _gop_err error\n[Go+ CI/Test]   | 2023/05/30 11:33:58 Val open(\"foo.txt\") string\n[Go+ CI/Test]   | 2023/05/30 11:33:58 Val /foo/bar.gop string\n[Go+ CI/Test]   | 2023/05/30 11:33:58 Val 2 int\n[Go+ CI/Test]   | 2023/05/30 11:33:58 Val main.main string\n[Go+ CI/Test]   | 2023/05/30 11:33:58 Call 5 0 // func(err error, code string, file string, line int, fn string, args ...interface{}) *github.com/qiniu/x/errors.Frame\n[Go+ CI/Test]   | 2023/05/30 11:33:58 ==> MatchFuncCall func(err error, code string, file string, line int, fn string, args ...interface{}) *github.com/qiniu/x/errors.Frame\n[Go+ CI/Test]   | 2023/05/30 11:33:58 ==> MatchType error, error\n[Go+ CI/Test]   | 2023/05/30 11:33:58 ==> EnsureLoaded error\n[Go+ CI/Test]   | 2023/05/30 11:33:58 ==> EnsureLoaded error\n[Go+ CI/Test]   | 2023/05/30 11:33:58 ==> MatchType untyped string (\"open(\\\"foo.txt\\\")\"), string\n[Go+ CI/Test]   | 2023/05/30 11:33:58 ==> MatchType untyped string (\"/foo/bar.gop\"), string\n[Go+ CI/Test]   | 2023/05/30 11:33:58 ==> MatchType untyped int (2), int\n[Go+ CI/Test]   | 2023/05/30 11:33:58 ==> MatchType untyped string (\"main.main\"), string\n[Go+ CI/Test]   | 2023/05/30 11:33:58 Assign 1 1\n[Go+ CI/Test]   | 2023/05/30 11:33:58 ==> MatchType *github.com/qiniu/x/errors.Frame, error\n[Go+ CI/Test]   | 2023/05/30 11:33:58 ==> EnsureLoaded error\n[Go+ CI/Test]   | 2023/05/30 11:33:58 Val panic func(v interface{})\n[Go+ CI/Test]   | 2023/05/30 11:33:58 Val _gop_err error\n[Go+ CI/Test]   | 2023/05/30 11:33:58 Call 1 0 // func(v interface{})\n[Go+ CI/Test]   | 2023/05/30 11:33:58 ==> MatchFuncCall func(v interface{})\n[Go+ CI/Test]   | 2023/05/30 11:33:58 ==> MatchType error, interface{}\n[Go+ CI/Test]   | 2023/05/30 11:33:58 ==> EnsureLoaded error\n[Go+ CI/Test]   | 2023/05/30 11:33:58 End // If\n[Go+ CI/Test]   | 2023/05/30 11:33:58 Return 0\n[Go+ CI/Test]   | 2023/05/30 11:33:58 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:33:58 Call 0 0 // func() (_gop_ret *os.File)\n[Go+ CI/Test]   | 2023/05/30 11:33:58 ==> MatchFuncCall func() (_gop_ret *os.File)\n[Go+ CI/Test]   | 2023/05/30 11:33:58 RangeAssignThen\n[Go+ CI/Test]   | 2023/05/30 11:33:58 Val println overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:33:58 Val line string\n[Go+ CI/Test]   | 2023/05/30 11:33:58 Call 1 0 // overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:33:58 ==> MatchFuncCall overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:33:58 ==> MatchFuncCall func(a ...interface{}) (n int, err error)\n[Go+ CI/Test]   | 2023/05/30 11:33:58 ==> MatchType string, interface{}\n[Go+ CI/Test]   | 2023/05/30 11:33:58 End // ForRange\n[Go+ CI/Test]   | 2023/05/30 11:33:58 Member Gop_Enum 0 // *os.File\n[Go+ CI/Test]   | 2023/05/30 11:33:58 Val EnumLines func(r io.Reader) github.com/goplus/gop/builtin/iox.LineIter\n[Go+ CI/Test]   | 2023/05/30 11:33:58 Call 1 0 // func(r io.Reader) github.com/goplus/gop/builtin/iox.LineIter\n[Go+ CI/Test]   | 2023/05/30 11:33:58 ==> MatchFuncCall func(r io.Reader) github.com/goplus/gop/builtin/iox.LineIter\n[Go+ CI/Test]   | 2023/05/30 11:33:58 ==> MatchType *os.File, io.Reader\n[Go+ CI/Test]   | 2023/05/30 11:33:58 ==> EnsureLoaded io.Reader\n[Go+ CI/Test]   | 2023/05/30 11:33:58 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:33:58 ==> ASTFile \n[Go+ CI/Test]   | --- PASS: TestFileOpen (0.80s)\n[Go+ CI/Test]   | === RUN   TestFileEnumLines\n[Go+ CI/Test]   | 2023/05/30 11:33:58 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:33:58 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:33:58 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:33:58 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:58 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:58 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:58 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:58 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:58 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:58 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:58 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:58 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:58 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:58 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:33:58 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:33:58 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:33:58 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:33:58 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:33:58 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:33:58 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:33:58 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:33:58 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:33:58 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:33:58 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:33:58 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:33:58 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:33:58 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:33:58 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:33:58 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:33:58 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:33:58 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:33:58 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:33:58 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:33:58 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:33:58 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:33:58 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:33:58 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:33:58 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:33:58 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:33:58 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:33:58 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:33:58 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:33:58 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:33:58 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:33:58 ==> Preload func main\n[Go+ CI/Test]   | 2023/05/30 11:33:58 ==> Load func main\n[Go+ CI/Test]   | 2023/05/30 11:33:58 NewFunc main func()\n[Go+ CI/Test]   | 2023/05/30 11:33:58 ForRange [_ line]\n[Go+ CI/Test]   | 2023/05/30 11:33:58 Val Stdin *os.File\n[Go+ CI/Test]   | 2023/05/30 11:33:58 RangeAssignThen\n[Go+ CI/Test]   | 2023/05/30 11:33:58 Val println overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:33:58 Val line string\n[Go+ CI/Test]   | 2023/05/30 11:33:58 Call 1 0 // overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:33:58 ==> MatchFuncCall overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:33:58 ==> MatchFuncCall func(a ...interface{}) (n int, err error)\n[Go+ CI/Test]   | 2023/05/30 11:33:58 ==> MatchType string, interface{}\n[Go+ CI/Test]   | 2023/05/30 11:33:58 End // ForRange\n[Go+ CI/Test]   | 2023/05/30 11:33:58 Member Gop_Enum 0 // *os.File\n[Go+ CI/Test]   | 2023/05/30 11:33:58 Val EnumLines func(r io.Reader) github.com/goplus/gop/builtin/iox.LineIter\n[Go+ CI/Test]   | 2023/05/30 11:33:58 Call 1 0 // func(r io.Reader) github.com/goplus/gop/builtin/iox.LineIter\n[Go+ CI/Test]   | 2023/05/30 11:33:58 ==> MatchFuncCall func(r io.Reader) github.com/goplus/gop/builtin/iox.LineIter\n[Go+ CI/Test]   | 2023/05/30 11:33:58 ==> MatchType *os.File, io.Reader\n[Go+ CI/Test]   | 2023/05/30 11:33:58 ==> EnsureLoaded io.Reader\n[Go+ CI/Test]   | 2023/05/30 11:33:58 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:33:58 ==> ASTFile \n[Go+ CI/Test]   | --- PASS: TestFileEnumLines (0.00s)\n[Go+ CI/Test]   | === RUN   TestIoxLines\n[Go+ CI/Test]   | 2023/05/30 11:33:58 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:33:58 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:33:58 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:33:58 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:58 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:58 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:58 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:58 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:58 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:58 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:58 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:58 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:58 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:58 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:33:58 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:33:58 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:33:58 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:33:58 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:33:58 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:33:58 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:33:58 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:33:58 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:33:58 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:33:58 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:33:58 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:33:58 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:33:58 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:33:58 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:33:58 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:33:58 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:33:58 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:33:58 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:33:58 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:33:58 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:33:58 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:33:58 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:33:58 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:33:58 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:33:58 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:33:58 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:33:58 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:33:58 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:33:58 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:33:58 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Preload var [r]\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Preload func main\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Load var io.Reader [r]\n[Go+ CI/Test]   | 2023/05/30 11:33:59 NewVar [r]\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Load func main\n[Go+ CI/Test]   | 2023/05/30 11:33:59 NewFunc main func()\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ForRange [_ line]\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val lines overloadFuncType{funcs: [func github.com/goplus/gop/builtin/iox.Lines(r io.Reader) github.com/goplus/gop/builtin/iox.LineReader]}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val r io.Reader\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Call 1 0 // overloadFuncType{funcs: [func github.com/goplus/gop/builtin/iox.Lines(r io.Reader) github.com/goplus/gop/builtin/iox.LineReader]}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchFuncCall overloadFuncType{funcs: [func github.com/goplus/gop/builtin/iox.Lines(r io.Reader) github.com/goplus/gop/builtin/iox.LineReader]}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchFuncCall func(r io.Reader) github.com/goplus/gop/builtin/iox.LineReader\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchType io.Reader, io.Reader\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> EnsureLoaded io.Reader\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> EnsureLoaded io.Reader\n[Go+ CI/Test]   | 2023/05/30 11:33:59 RangeAssignThen\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val println overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val line string\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Call 1 0 // overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchFuncCall overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchFuncCall func(a ...interface{}) (n int, err error)\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchType string, interface{}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 End // ForRange\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Member Gop_Enum 0 // github.com/goplus/gop/builtin/iox.LineReader\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Call 0 0 // func() github.com/goplus/gop/builtin/iox.LineIter\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchFuncCall func() github.com/goplus/gop/builtin/iox.LineIter\n[Go+ CI/Test]   | 2023/05/30 11:33:59 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> ASTFile \n[Go+ CI/Test]   | --- PASS: TestIoxLines (0.62s)\n[Go+ CI/Test]   | === RUN   TestMixedGo\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Preload var [a]\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Preload var [b]\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Preload var [c]\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Preload var [d]\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Preload var [e]\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Preload var [x]\n[Go+ CI/Test]   | 2023/05/30 11:33:59 NewConstDefs\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Preload const [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Preload func f\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Preload type foo\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Preload method foo._\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Preload method foo.Str\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Preload method foo.Bar\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Preload type foo2\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Preload type foo3\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Load const [n] <nil>\n[Go+ CI/Test]   | 2023/05/30 11:33:59 NewConst [n] 0\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val &{0 INT 10} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:33:59 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val n untyped int\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Load var [10]int [a]\n[Go+ CI/Test]   | 2023/05/30 11:33:59 NewVar [a]\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Load var string [b]\n[Go+ CI/Test]   | 2023/05/30 11:33:59 NewVar [b]\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Load func f\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val f func(v int) string\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val n untyped int\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Call 1 0 // func(v int) string\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchFuncCall func(v int) string\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchType untyped int (10), int\n[Go+ CI/Test]   | 2023/05/30 11:33:59 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchType string, string\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Load > AliasType foo2\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Load > NewType foo\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Lookup (LoadSymbol) foo => type github.com/goplus/gop/cl.foo <nil>\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Lookup (LoadSymbol) foo2 => type github.com/goplus/gop/cl.foo2 = github.com/goplus/gop/cl.foo\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Load var github.com/goplus/gop/cl.foo [c]\n[Go+ CI/Test]   | 2023/05/30 11:33:59 NewVar [c]\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Load var int [d]\n[Go+ CI/Test]   | 2023/05/30 11:33:59 NewVar [d]\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val c github.com/goplus/gop/cl.foo\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Member v 2 // github.com/goplus/gop/cl.foo\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Load > InitType foo\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> LookupParent foo => type github.com/goplus/gop/cl.foo struct{v int}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Load method github.com/goplus/gop/cl.foo._\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> LookupParent foo => type github.com/goplus/gop/cl.foo struct{v int}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Load method github.com/goplus/gop/cl.foo.Str\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> LookupParent foo => type github.com/goplus/gop/cl.foo struct{v int}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Load method *github.com/goplus/gop/cl.foo.Bar\n[Go+ CI/Test]   | 2023/05/30 11:33:59 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchType int, int\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Load var <nil> [e]\n[Go+ CI/Test]   | 2023/05/30 11:33:59 NewVar [e]\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Load > NewType foo3\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Lookup (LoadSymbol) foo3 => type github.com/goplus/gop/cl.foo3 <nil>\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Load > InitType foo3\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> LookupParent foo2 => type github.com/goplus/gop/cl.foo2 = github.com/goplus/gop/cl.foo\n[Go+ CI/Test]   | 2023/05/30 11:33:59 StructLit github.com/goplus/gop/cl.foo3 0 false\n[Go+ CI/Test]   | 2023/05/30 11:33:59 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Load var string [x]\n[Go+ CI/Test]   | 2023/05/30 11:33:59 NewVar [x]\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val c github.com/goplus/gop/cl.foo\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Member str 2 // github.com/goplus/gop/cl.foo\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Call 0 0 // func() string\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchFuncCall func() string\n[Go+ CI/Test]   | 2023/05/30 11:33:59 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchType string, string\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> ASTFile \n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Preload type T\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Preload func main\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Preload type Point\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Load > NewType T\n[Go+ CI/Test]   | 2023/05/30 11:33:59 NewType T\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Load > InitType T\n[Go+ CI/Test]   | 2023/05/30 11:33:59 InitType T struct{}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Load func main\n[Go+ CI/Test]   | 2023/05/30 11:33:59 NewFunc main func()\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val println overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> LookupParent T => type github.com/goplus/gop/cl.T struct{}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 StructLit github.com/goplus/gop/cl.T 0 false\n[Go+ CI/Test]   | 2023/05/30 11:33:59 UnaryOp & flags: 0\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchFuncCall instructionType{instr: gox.addrInstr}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Load > NewType Point\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Lookup (LoadSymbol) Point => type github.com/goplus/gop/cl.Point <nil>\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Load > InitType Point\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val &{0 INT 10} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val &{0 INT 20} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:33:59 StructLit github.com/goplus/gop/cl.Point 2 false\n[Go+ CI/Test]   | 2023/05/30 11:33:59 UnaryOp & flags: 0\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchFuncCall instructionType{instr: gox.addrInstr}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Call 2 0 // overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchFuncCall overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchFuncCall func(a ...interface{}) (n int, err error)\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchType *github.com/goplus/gop/cl.T, interface{}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> EnsureLoaded github.com/goplus/gop/cl.T\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchType *github.com/goplus/gop/cl.Point, interface{}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> EnsureLoaded github.com/goplus/gop/cl.Point\n[Go+ CI/Test]   | 2023/05/30 11:33:59 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> ASTFile \n[Go+ CI/Test]   | --- PASS: TestMixedGo (0.01s)\n[Go+ CI/Test]   | === RUN   Test_RangeExpressionIf_Issue1243\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Preload func main\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Load func main\n[Go+ CI/Test]   | 2023/05/30 11:33:59 NewFunc main func()\n[Go+ CI/Test]   | 2023/05/30 11:33:59 For\n[Go+ CI/Test]   | 2023/05/30 11:33:59 DefineVarStart [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val &{0 INT 0} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:33:59 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val i int\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val &{0 INT 10} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:33:59 BinaryOp <\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchFuncCall func(a TemplateParamType{name: T}, b TemplateParamType{name: T}) untyped bool\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchType int, unboundFuncParam{typ: <nil>}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchType untyped int (10), unboundFuncParam{typ: int}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Then\n[Go+ CI/Test]   | 2023/05/30 11:33:59 If\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val i int\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val &{0 INT 3} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:33:59 BinaryOp %\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchFuncCall func(a TemplateParamType{name: T}, b TemplateParamType{name: T}) TemplateParamType{name: T}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchType int, unboundFuncParam{typ: <nil>}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchType untyped int (3), unboundFuncParam{typ: int}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val &{0 INT 0} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:33:59 BinaryOp ==\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Then\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val println overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val i int\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Call 1 0 // overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchFuncCall overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchFuncCall func(a ...interface{}) (n int, err error)\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchType int, interface{}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 End // If\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Post\n[Go+ CI/Test]   | 2023/05/30 11:33:59 VarRef i int\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val &{0 INT 1} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:33:59 AssignOp += Gop_AddAssign\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchFuncCall func(a unboundProxyParam{typ: *TemplateParamType{name: T}}, b TemplateParamType{name: T})\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchType refType{typ: int}, unboundProxyParam{typ: *unboundFuncParam{typ: <nil>}}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchType untyped int (1), unboundFuncParam{typ: int}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 End // For\n[Go+ CI/Test]   | 2023/05/30 11:33:59 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> ASTFile \n[Go+ CI/Test]   | --- PASS: Test_RangeExpressionIf_Issue1243 (0.00s)\n[Go+ CI/Test]   | === RUN   Test_CastSlice_Issue1240\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Preload type fvec\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Preload type foo\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Preload func main\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Load > NewType fvec\n[Go+ CI/Test]   | 2023/05/30 11:33:59 NewType fvec\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Load > InitType fvec\n[Go+ CI/Test]   | 2023/05/30 11:33:59 InitType fvec []float64\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Load > NewType foo\n[Go+ CI/Test]   | 2023/05/30 11:33:59 NewType foo\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Load > InitType foo\n[Go+ CI/Test]   | 2023/05/30 11:33:59 InitType foo float64\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Load func main\n[Go+ CI/Test]   | 2023/05/30 11:33:59 NewFunc main func()\n[Go+ CI/Test]   | 2023/05/30 11:33:59 DefineVarStart [a]\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Typ []float64\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val &{0 INT 1} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val &{0 INT 2} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:33:59 SliceLit []float64 2 false\n[Go+ CI/Test]   | 2023/05/30 11:33:59 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:33:59 DefineVarStart [b]\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val fvec github.com/goplus/gop/cl.fvec\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val &{0 INT 1} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val &{0 INT 2} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:33:59 SliceLit github.com/goplus/gop/cl.fvec 2 false\n[Go+ CI/Test]   | 2023/05/30 11:33:59 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:33:59 DefineVarStart [c]\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val foo github.com/goplus/gop/cl.foo\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val &{0 INT 1} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val &{0 INT 2} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:33:59 SliceLit <nil> 2 false\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Call 1 0 // TypeType{typ: github.com/goplus/gop/cl.foo}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchFuncCall TypeType{typ: github.com/goplus/gop/cl.foo}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> EnsureLoaded github.com/goplus/gop/cl.foo\n[Go+ CI/Test]   | 2023/05/30 11:33:59 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:33:59 DefineVarStart [d]\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val fvec github.com/goplus/gop/cl.fvec\n[Go+ CI/Test]   | 2023/05/30 11:33:59 SliceLit github.com/goplus/gop/cl.fvec 0 false\n[Go+ CI/Test]   | 2023/05/30 11:33:59 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val println overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val a []float64\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val b github.com/goplus/gop/cl.fvec\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val c github.com/goplus/gop/cl.foo\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val d github.com/goplus/gop/cl.fvec\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Call 4 0 // overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchFuncCall overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchFuncCall func(a ...interface{}) (n int, err error)\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchType []float64, interface{}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchType github.com/goplus/gop/cl.fvec, interface{}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> EnsureLoaded github.com/goplus/gop/cl.fvec\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchType github.com/goplus/gop/cl.foo, interface{}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> EnsureLoaded github.com/goplus/gop/cl.foo\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchType github.com/goplus/gop/cl.fvec, interface{}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> EnsureLoaded github.com/goplus/gop/cl.fvec\n[Go+ CI/Test]   | 2023/05/30 11:33:59 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> ASTFile \n[Go+ CI/Test]   | --- PASS: Test_CastSlice_Issue1240 (0.00s)\n[Go+ CI/Test]   | === RUN   TestUnderscoreRedeclared_Issue1197\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Preload func main\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Load func main\n[Go+ CI/Test]   | 2023/05/30 11:33:59 NewFunc main func()\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val &{0 INT 2} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:33:59 NewClosure func() (_ [2]int)\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Return 0\n[Go+ CI/Test]   | 2023/05/30 11:33:59 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Call 0 0 // func() (_ [2]int)\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchFuncCall func() (_ [2]int)\n[Go+ CI/Test]   | 2023/05/30 11:33:59 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> ASTFile \n[Go+ CI/Test]   | --- PASS: TestUnderscoreRedeclared_Issue1197 (0.00s)\n[Go+ CI/Test]   | === RUN   TestInterfaceBugNilUnderlying_Issue1198\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Preload type Outer\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Preload type impl\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Preload func New\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Preload type Inner\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Preload method impl.DoStuff\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Preload func main\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Load > NewType Outer\n[Go+ CI/Test]   | 2023/05/30 11:33:59 NewType Outer\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Load > InitType Outer\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Load > NewType Inner\n[Go+ CI/Test]   | 2023/05/30 11:33:59 NewType Inner\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Lookup (LoadSymbol) Inner => type github.com/goplus/gop/cl.Inner <nil>\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Load > InitType Inner\n[Go+ CI/Test]   | 2023/05/30 11:33:59 InitType Inner interface{DoStuff() error}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 InitType Outer interface{github.com/goplus/gop/cl.Inner}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Load > NewType impl\n[Go+ CI/Test]   | 2023/05/30 11:33:59 NewType impl\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Load > InitType impl\n[Go+ CI/Test]   | 2023/05/30 11:33:59 InitType impl struct{}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> LookupParent impl => type github.com/goplus/gop/cl.impl struct{}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Load method *github.com/goplus/gop/cl.impl.DoStuff\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Load func New\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> LookupParent Outer => type github.com/goplus/gop/cl.Outer interface{github.com/goplus/gop/cl.Inner}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 NewFunc New func() github.com/goplus/gop/cl.Outer\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> LookupParent impl => type github.com/goplus/gop/cl.impl struct{}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 StructLit github.com/goplus/gop/cl.impl 0 false\n[Go+ CI/Test]   | 2023/05/30 11:33:59 UnaryOp & flags: 0\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchFuncCall instructionType{instr: gox.addrInstr}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Return 1\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchType *github.com/goplus/gop/cl.impl, github.com/goplus/gop/cl.Outer\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> EnsureLoaded github.com/goplus/gop/cl.Outer\n[Go+ CI/Test]   | 2023/05/30 11:33:59 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Load func main\n[Go+ CI/Test]   | 2023/05/30 11:33:59 NewFunc main func()\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> LookupParent Outer => type github.com/goplus/gop/cl.Outer interface{github.com/goplus/gop/cl.Inner}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Load var github.com/goplus/gop/cl.Outer [outer]\n[Go+ CI/Test]   | 2023/05/30 11:33:59 NewVar [outer]\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val New func() github.com/goplus/gop/cl.Outer\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Call 0 0 // func() github.com/goplus/gop/cl.Outer\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchFuncCall func() github.com/goplus/gop/cl.Outer\n[Go+ CI/Test]   | 2023/05/30 11:33:59 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchType github.com/goplus/gop/cl.Outer, github.com/goplus/gop/cl.Outer\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> EnsureLoaded github.com/goplus/gop/cl.Outer\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> EnsureLoaded github.com/goplus/gop/cl.Outer\n[Go+ CI/Test]   | 2023/05/30 11:33:59 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:33:59 NewFunc DoStuff (*github.com/goplus/gop/cl.impl) func() error\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val nil untyped nil\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Return 1\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchType untyped nil, error\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> EnsureLoaded error\n[Go+ CI/Test]   | 2023/05/30 11:33:59 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> ASTFile \n[Go+ CI/Test]   | --- PASS: TestInterfaceBugNilUnderlying_Issue1198 (0.67s)\n[Go+ CI/Test]   | === RUN   TestInterfaceBugNilUnderlying_Issue1196\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Preload func main\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Preload type I\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Preload type T\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Preload method T.M\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Preload type A\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Preload type B\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Load func main\n[Go+ CI/Test]   | 2023/05/30 11:33:59 NewFunc main func()\n[Go+ CI/Test]   | 2023/05/30 11:33:59 DefineVarStart [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Load > NewType I\n[Go+ CI/Test]   | 2023/05/30 11:33:59 NewType I\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val I github.com/goplus/gop/cl.I\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Load > NewType A\n[Go+ CI/Test]   | 2023/05/30 11:33:59 NewType A\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Lookup (LoadSymbol) A => type github.com/goplus/gop/cl.A <nil>\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Load > InitType A\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Load > NewType T\n[Go+ CI/Test]   | 2023/05/30 11:33:59 NewType T\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Lookup (LoadSymbol) T => type github.com/goplus/gop/cl.T <nil>\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Load > InitType T\n[Go+ CI/Test]   | 2023/05/30 11:33:59 InitType T int\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> LookupParent T => type github.com/goplus/gop/cl.T int\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Load method github.com/goplus/gop/cl.T.M\n[Go+ CI/Test]   | 2023/05/30 11:33:59 InitType A struct{github.com/goplus/gop/cl.T}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 StructLit github.com/goplus/gop/cl.A 0 true\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Call 1 0 // TypeType{typ: github.com/goplus/gop/cl.I}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchFuncCall TypeType{typ: github.com/goplus/gop/cl.I}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> EnsureLoaded github.com/goplus/gop/cl.A\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> EnsureLoaded github.com/goplus/gop/cl.I\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Load > InitType I\n[Go+ CI/Test]   | 2023/05/30 11:33:59 InitType I interface{M() int}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:33:59 DefineVarStart [b]\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val make instructionType{instr: gox.makeInstr}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> LookupParent I => type github.com/goplus/gop/cl.I interface{M() int}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Typ chan github.com/goplus/gop/cl.I\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val &{0 INT 1} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Call 2 0 // instructionType{instr: gox.makeInstr}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchFuncCall instructionType{instr: gox.makeInstr}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val b chan github.com/goplus/gop/cl.I\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Load > NewType B\n[Go+ CI/Test]   | 2023/05/30 11:33:59 NewType B\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Lookup (LoadSymbol) B => type github.com/goplus/gop/cl.B <nil>\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Load > InitType B\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> LookupParent T => type github.com/goplus/gop/cl.T int\n[Go+ CI/Test]   | 2023/05/30 11:33:59 InitType B struct{github.com/goplus/gop/cl.T}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 StructLit github.com/goplus/gop/cl.B 0 false\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Send\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Load var bool [ok]\n[Go+ CI/Test]   | 2023/05/30 11:33:59 NewVar [ok]\n[Go+ CI/Test]   | 2023/05/30 11:33:59 VarRef i github.com/goplus/gop/cl.I\n[Go+ CI/Test]   | 2023/05/30 11:33:59 VarRef ok bool\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val b chan github.com/goplus/gop/cl.I\n[Go+ CI/Test]   | 2023/05/30 11:33:59 UnaryOp <- flags: 2\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchFuncCall instructionType{instr: gox.recvInstr}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Assign 2 1\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchType github.com/goplus/gop/cl.I, github.com/goplus/gop/cl.I\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> EnsureLoaded github.com/goplus/gop/cl.I\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> EnsureLoaded github.com/goplus/gop/cl.I\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchType bool, bool\n[Go+ CI/Test]   | 2023/05/30 11:33:59 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:33:59 NewFunc M (github.com/goplus/gop/cl.T) func() int\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val &{0 INT 0} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Return 1\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchType untyped int (0), int\n[Go+ CI/Test]   | 2023/05/30 11:33:59 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> ASTFile \n[Go+ CI/Test]   | --- PASS: TestInterfaceBugNilUnderlying_Issue1196 (0.00s)\n[Go+ CI/Test]   | === RUN   TestMyIntInc_Issue1195\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Preload type MyInt\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Preload var [c]\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Preload func main\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Load > NewType MyInt\n[Go+ CI/Test]   | 2023/05/30 11:33:59 NewType MyInt\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Load > InitType MyInt\n[Go+ CI/Test]   | 2023/05/30 11:33:59 InitType MyInt int\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> LookupParent MyInt => type github.com/goplus/gop/cl.MyInt int\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Load var github.com/goplus/gop/cl.MyInt [c]\n[Go+ CI/Test]   | 2023/05/30 11:33:59 NewVar [c]\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Load func main\n[Go+ CI/Test]   | 2023/05/30 11:33:59 NewFunc main func()\n[Go+ CI/Test]   | 2023/05/30 11:33:59 VarRef c github.com/goplus/gop/cl.MyInt\n[Go+ CI/Test]   | 2023/05/30 11:33:59 IncDec ++\n[Go+ CI/Test]   | 2023/05/30 11:33:59 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> ASTFile \n[Go+ CI/Test]   | --- PASS: TestMyIntInc_Issue1195 (0.00s)\n[Go+ CI/Test]   | === RUN   TestAutoPropMixedName_Issue1194\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Preload type Point\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Preload type Obj\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Preload method Obj.Bbox\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Preload method Obj.Points\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Load > NewType Point\n[Go+ CI/Test]   | 2023/05/30 11:33:59 NewType Point\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Load > InitType Point\n[Go+ CI/Test]   | 2023/05/30 11:33:59 InitType Point struct{Min int; Max int}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Load > NewType Obj\n[Go+ CI/Test]   | 2023/05/30 11:33:59 NewType Obj\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Load > InitType Obj\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> LookupParent Point => type github.com/goplus/gop/cl.Point struct{Min int; Max int}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 InitType Obj struct{bbox github.com/goplus/gop/cl.Point}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> LookupParent Obj => type github.com/goplus/gop/cl.Obj struct{bbox github.com/goplus/gop/cl.Point}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Load method *github.com/goplus/gop/cl.Obj.Bbox\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> LookupParent Point => type github.com/goplus/gop/cl.Point struct{Min int; Max int}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> LookupParent Obj => type github.com/goplus/gop/cl.Obj struct{bbox github.com/goplus/gop/cl.Point}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Load method *github.com/goplus/gop/cl.Obj.Points\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val &{0 INT 2} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:33:59 NewFunc Bbox (*github.com/goplus/gop/cl.Obj) func() github.com/goplus/gop/cl.Point\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val o *github.com/goplus/gop/cl.Obj\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Member bbox 2 // *github.com/goplus/gop/cl.Obj\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Return 1\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchType github.com/goplus/gop/cl.Point, github.com/goplus/gop/cl.Point\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> EnsureLoaded github.com/goplus/gop/cl.Point\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> EnsureLoaded github.com/goplus/gop/cl.Point\n[Go+ CI/Test]   | 2023/05/30 11:33:59 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:33:59 NewFunc Points (*github.com/goplus/gop/cl.Obj) func() [2]int\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val &{0 INT 2} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val o *github.com/goplus/gop/cl.Obj\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Member bbox 2 // *github.com/goplus/gop/cl.Obj\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Member Min 2 // github.com/goplus/gop/cl.Point\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val o *github.com/goplus/gop/cl.Obj\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Member bbox 2 // *github.com/goplus/gop/cl.Obj\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Member Max 2 // github.com/goplus/gop/cl.Point\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ArrayLit [2]int 2 false\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Return 1\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchType [2]int, [2]int\n[Go+ CI/Test]   | 2023/05/30 11:33:59 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> ASTFile \n[Go+ CI/Test]   | --- PASS: TestAutoPropMixedName_Issue1194 (0.00s)\n[Go+ CI/Test]   | === RUN   TestShiftUntypedInt_Issue1193\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Preload func GetValue\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Load func GetValue\n[Go+ CI/Test]   | 2023/05/30 11:33:59 NewFunc GetValue func(shift uint) uint\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val &{0 INT 1} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val shift uint\n[Go+ CI/Test]   | 2023/05/30 11:33:59 BinaryOp <<\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchFuncCall func(a TemplateParamType{name: T}, n TemplateParamType{name: N}) TemplateParamType{name: T}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchType untyped int (1), unboundFuncParam{typ: <nil>}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchType uint, unboundFuncParam{typ: <nil>}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Return 1\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchType untyped int, uint\n[Go+ CI/Test]   | 2023/05/30 11:33:59 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> ASTFile \n[Go+ CI/Test]   | --- PASS: TestShiftUntypedInt_Issue1193 (0.00s)\n[Go+ CI/Test]   | === RUN   TestInitFunc\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Preload func init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Preload func init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Load func init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 NewFunc init func()\n[Go+ CI/Test]   | 2023/05/30 11:33:59 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Load func init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 NewFunc init func()\n[Go+ CI/Test]   | 2023/05/30 11:33:59 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> ASTFile \n[Go+ CI/Test]   | --- PASS: TestInitFunc (0.00s)\n[Go+ CI/Test]   | === RUN   TestSlogan\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Preload func main\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Load func main\n[Go+ CI/Test]   | 2023/05/30 11:33:59 NewFunc main func()\n[Go+ CI/Test]   | 2023/05/30 11:33:59 DefineVarStart [fields]\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val &{0 STRING \"engineering\"} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val &{0 STRING \"STEM education\"} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val &{0 STRING \"data science\"} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:33:59 SliceLit <nil> 3 false\n[Go+ CI/Test]   | 2023/05/30 11:33:59 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val println overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val &{0 STRING \"The Go+ Language for\"} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val fields []string\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Member join 1 // []string\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val Join func(elems []string, sep string) string\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val &{0 STRING \", \"} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Call 2 0 // func(elems []string, sep string) string\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchFuncCall func(elems []string, sep string) string\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchType []string, []string\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchType untyped string (\", \"), string\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Call 2 0 // overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchFuncCall overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchFuncCall func(a ...interface{}) (n int, err error)\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchType untyped string (\"The Go+ Language for\"), interface{}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchType string, interface{}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> ASTFile \n[Go+ CI/Test]   | --- PASS: TestSlogan (0.00s)\n[Go+ CI/Test]   | === RUN   TestAssignPrintln\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Preload func main\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Load func main\n[Go+ CI/Test]   | 2023/05/30 11:33:59 NewFunc main func()\n[Go+ CI/Test]   | 2023/05/30 11:33:59 DefineVarStart [p]\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val println overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val p func(a ...interface{}) (n int, err error)\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val &{0 STRING \"Hello world\"} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Call 1 0 // func(a ...interface{}) (n int, err error)\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchFuncCall func(a ...interface{}) (n int, err error)\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchType untyped string (\"Hello world\"), interface{}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> ASTFile \n[Go+ CI/Test]   | --- PASS: TestAssignPrintln (0.00s)\n[Go+ CI/Test]   | === RUN   TestRedefineBuiltin\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Preload func main\n[Go+ CI/Test]   | 2023/05/30 11:33:59 NewConstDefs\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Preload const [append]\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Preload const [len]\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Load func main\n[Go+ CI/Test]   | 2023/05/30 11:33:59 NewFunc main func()\n[Go+ CI/Test]   | 2023/05/30 11:33:59 NewConstDefs\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Load const [a] <nil>\n[Go+ CI/Test]   | 2023/05/30 11:33:59 NewConst [a] 0\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Load const [append] <nil>\n[Go+ CI/Test]   | 2023/05/30 11:33:59 NewConst [append] 0\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val iota untyped int\n[Go+ CI/Test]   | 2023/05/30 11:33:59 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Load const [len]\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val iota untyped int\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val append untyped int\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val len untyped int\n[Go+ CI/Test]   | 2023/05/30 11:33:59 BinaryOp +\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchFuncCall func(a TemplateParamType{name: T}, b TemplateParamType{name: T}) TemplateParamType{name: T}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchType untyped int (0), unboundFuncParam{typ: <nil>}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchType untyped int (1), unboundFuncParam{typ: untyped int}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:33:59 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> ASTFile \n[Go+ CI/Test]   | --- PASS: TestRedefineBuiltin (0.00s)\n[Go+ CI/Test]   | === RUN   TestTypeConvIssue804\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Preload func main\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Load func main\n[Go+ CI/Test]   | 2023/05/30 11:33:59 NewFunc main func()\n[Go+ CI/Test]   | 2023/05/30 11:33:59 DefineVarStart [c]\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val make instructionType{instr: gox.makeInstr}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Typ chan int\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Call 1 0 // instructionType{instr: gox.makeInstr}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchFuncCall instructionType{instr: gox.makeInstr}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:33:59 DefineVarStart [d]\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Typ chan<- int\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val c chan int\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Call 1 0 // TypeType{typ: chan<- int}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchFuncCall TypeType{typ: chan<- int}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:33:59 DefineVarStart [e]\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Typ <-chan int\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val c chan int\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Call 1 0 // TypeType{typ: <-chan int}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchFuncCall TypeType{typ: <-chan int}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:33:59 DefineVarStart [f]\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val int int\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Star\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val nil untyped nil\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Call 1 0 // TypeType{typ: *int}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchFuncCall TypeType{typ: *int}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:33:59 DefineVarStart [a]\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val c chan int\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val d chan<- int\n[Go+ CI/Test]   | 2023/05/30 11:33:59 BinaryOp ==\n[Go+ CI/Test]   | 2023/05/30 11:33:59 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:33:59 DefineVarStart [b]\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val c chan int\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val e <-chan int\n[Go+ CI/Test]   | 2023/05/30 11:33:59 BinaryOp ==\n[Go+ CI/Test]   | 2023/05/30 11:33:59 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:33:59 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> ASTFile \n[Go+ CI/Test]   | --- PASS: TestTypeConvIssue804 (0.00s)\n[Go+ CI/Test]   | === RUN   TestUntypedFloatIssue798\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Preload func isPow10\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Load func isPow10\n[Go+ CI/Test]   | 2023/05/30 11:33:59 NewFunc isPow10 func(x uint64) bool\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Switch\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val x uint64\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Then\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val &{0 FLOAT 1e0} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val &{0 FLOAT 1e1} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val &{0 FLOAT 1e2} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val &{0 FLOAT 1e3} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val &{0 FLOAT 1e4} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val &{0 FLOAT 1e5} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val &{0 FLOAT 1e6} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val &{0 FLOAT 1e7} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val &{0 FLOAT 1e8} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val &{0 FLOAT 1e9} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val &{0 FLOAT 1e10} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val &{0 FLOAT 1e11} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val &{0 FLOAT 1e12} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val &{0 FLOAT 1e13} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val &{0 FLOAT 1e14} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val &{0 FLOAT 1e15} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val &{0 FLOAT 1e16} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val &{0 FLOAT 1e17} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val &{0 FLOAT 1e18} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val &{0 FLOAT 1e19} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Case 20\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val true untyped bool\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Return 1\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchType untyped bool (true), bool\n[Go+ CI/Test]   | 2023/05/30 11:33:59 End // Case\n[Go+ CI/Test]   | 2023/05/30 11:33:59 End // Switch\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val false untyped bool\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Return 1\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchType untyped bool (false), bool\n[Go+ CI/Test]   | 2023/05/30 11:33:59 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> ASTFile \n[Go+ CI/Test]   | --- PASS: TestUntypedFloatIssue798 (0.00s)\n[Go+ CI/Test]   | === RUN   TestInterfaceIssue795\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Preload type I\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Preload type T1\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Preload method T1.a\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Preload method T1.b\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Load > NewType I\n[Go+ CI/Test]   | 2023/05/30 11:33:59 NewType I\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Load > InitType I\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> LookupParent I => type github.com/goplus/gop/cl.I <nil>\n[Go+ CI/Test]   | 2023/05/30 11:33:59 InitType I interface{a(s string) github.com/goplus/gop/cl.I; b(s string) string}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Load > NewType T1\n[Go+ CI/Test]   | 2023/05/30 11:33:59 NewType T1\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Load > InitType T1\n[Go+ CI/Test]   | 2023/05/30 11:33:59 InitType T1 int\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> LookupParent T1 => type github.com/goplus/gop/cl.T1 int\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Load method github.com/goplus/gop/cl.T1.a\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> LookupParent I => type github.com/goplus/gop/cl.I interface{a(s string) github.com/goplus/gop/cl.I; b(s string) string}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> LookupParent T1 => type github.com/goplus/gop/cl.T1 int\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Load method github.com/goplus/gop/cl.T1.b\n[Go+ CI/Test]   | 2023/05/30 11:33:59 NewFunc a (github.com/goplus/gop/cl.T1) func(s string) github.com/goplus/gop/cl.I\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val t github.com/goplus/gop/cl.T1\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Return 1\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchType github.com/goplus/gop/cl.T1, github.com/goplus/gop/cl.I\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> EnsureLoaded github.com/goplus/gop/cl.I\n[Go+ CI/Test]   | 2023/05/30 11:33:59 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:33:59 NewFunc b (github.com/goplus/gop/cl.T1) func(s string) string\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val s string\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Return 1\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchType string, string\n[Go+ CI/Test]   | 2023/05/30 11:33:59 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> ASTFile \n[Go+ CI/Test]   | --- PASS: TestInterfaceIssue795 (0.00s)\n[Go+ CI/Test]   | === RUN   TestChanRecvIssue789\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Preload func foo\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Load func foo\n[Go+ CI/Test]   | 2023/05/30 11:33:59 NewFunc foo func(ch chan int) (int, bool)\n[Go+ CI/Test]   | 2023/05/30 11:33:59 DefineVarStart [x ok]\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val ch chan int\n[Go+ CI/Test]   | 2023/05/30 11:33:59 UnaryOp <- flags: 2\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchFuncCall instructionType{instr: gox.recvInstr}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val x int\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val ok bool\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Return 2\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchType int, int\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchType bool, bool\n[Go+ CI/Test]   | 2023/05/30 11:33:59 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> ASTFile \n[Go+ CI/Test]   | --- PASS: TestChanRecvIssue789 (0.00s)\n[Go+ CI/Test]   | === RUN   TestNamedChanCloseIssue790\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Preload type XChan\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Preload func foo\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Load > NewType XChan\n[Go+ CI/Test]   | 2023/05/30 11:33:59 NewType XChan\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Load > InitType XChan\n[Go+ CI/Test]   | 2023/05/30 11:33:59 InitType XChan chan int\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Load func foo\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> LookupParent XChan => type github.com/goplus/gop/cl.XChan chan int\n[Go+ CI/Test]   | 2023/05/30 11:33:59 NewFunc foo func(ch github.com/goplus/gop/cl.XChan)\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val close func(c unboundProxyParam{typ: chan<- TemplateParamType{name: Type}})\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val ch github.com/goplus/gop/cl.XChan\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Call 1 0 // func(c unboundProxyParam{typ: chan<- TemplateParamType{name: Type}})\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchFuncCall func(c unboundProxyParam{typ: chan<- TemplateParamType{name: Type}})\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchType chan int, unboundProxyParam{typ: chan<- unboundFuncParam{typ: <nil>}}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> ASTFile \n[Go+ CI/Test]   | --- PASS: TestNamedChanCloseIssue790 (0.00s)\n[Go+ CI/Test]   | === RUN   TestUntypedFloatIssue793\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Preload var [a]\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val &{0 FLOAT 1e1} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Load var [10]int [a]\n[Go+ CI/Test]   | 2023/05/30 11:33:59 NewVar [a]\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> ASTFile \n[Go+ CI/Test]   | --- PASS: TestUntypedFloatIssue793 (0.00s)\n[Go+ CI/Test]   | === RUN   TestUntypedFloatIssue788\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Preload func foo\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Load func foo\n[Go+ CI/Test]   | 2023/05/30 11:33:59 NewFunc foo func(v int) bool\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val v int\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val &{0 FLOAT 1.1e5} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:33:59 BinaryOp >\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchFuncCall func(a TemplateParamType{name: T}, b TemplateParamType{name: T}) untyped bool\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchType int, unboundFuncParam{typ: <nil>}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchType untyped float (110000), unboundFuncParam{typ: int}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Return 1\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchType untyped bool, bool\n[Go+ CI/Test]   | 2023/05/30 11:33:59 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> ASTFile \n[Go+ CI/Test]   | --- PASS: TestUntypedFloatIssue788 (0.00s)\n[Go+ CI/Test]   | === RUN   TestSwitchCompositeLitIssue801\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Preload type T\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Preload func main\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Load > NewType T\n[Go+ CI/Test]   | 2023/05/30 11:33:59 NewType T\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Load > InitType T\n[Go+ CI/Test]   | 2023/05/30 11:33:59 InitType T struct{X int}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Load func main\n[Go+ CI/Test]   | 2023/05/30 11:33:59 NewFunc main func()\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Switch\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> LookupParent T => type github.com/goplus/gop/cl.T struct{X int}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 StructLit github.com/goplus/gop/cl.T 0 false\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Then\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> LookupParent T => type github.com/goplus/gop/cl.T struct{X int}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val &{0 INT 1} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:33:59 StructLit github.com/goplus/gop/cl.T 1 false\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Case 1\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val panic func(v interface{})\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val &{0 STRING \"bad\"} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Call 1 0 // func(v interface{})\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchFuncCall func(v interface{})\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchType untyped string (\"bad\"), interface{}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 End // Case\n[Go+ CI/Test]   | 2023/05/30 11:33:59 End // Switch\n[Go+ CI/Test]   | 2023/05/30 11:33:59 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> ASTFile \n[Go+ CI/Test]   | --- PASS: TestSwitchCompositeLitIssue801 (0.00s)\n[Go+ CI/Test]   | === RUN   TestConstIssue800\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:33:59 NewConstDefs\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Preload const [h0_0 h0_1]\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Preload const [h1_0 h1_1]\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Load const [h0_0 h0_1] <nil>\n[Go+ CI/Test]   | 2023/05/30 11:33:59 NewConst [h0_0 h0_1] 0\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val &{0 FLOAT 1.0} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val iota untyped int\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val &{0 INT 1} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:33:59 BinaryOp +\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchFuncCall func(a TemplateParamType{name: T}, b TemplateParamType{name: T}) TemplateParamType{name: T}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchType untyped int (0), unboundFuncParam{typ: <nil>}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchType untyped int (1), unboundFuncParam{typ: untyped int}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 BinaryOp /\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchFuncCall overloadFuncType{funcs: [func Gop_Quo(a TemplateParamType{name: T}, b TemplateParamType{name: T}) TemplateParamType{name: T} func Gop_Quo(a github.com/goplus/gop/builtin/ng.UntypedBigint, b github.com/goplus/gop/builtin/ng.UntypedBigint) github.com/goplus/gop/builtin/ng.UntypedBigrat]}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchFuncCall func(a TemplateParamType{name: T}, b TemplateParamType{name: T}) TemplateParamType{name: T}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchType untyped float (1), unboundFuncParam{typ: <nil>}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchType untyped int (1), unboundFuncParam{typ: untyped float}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val &{0 FLOAT 1.0} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val iota untyped int\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val &{0 INT 2} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:33:59 BinaryOp +\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchFuncCall func(a TemplateParamType{name: T}, b TemplateParamType{name: T}) TemplateParamType{name: T}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchType untyped int (0), unboundFuncParam{typ: <nil>}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchType untyped int (2), unboundFuncParam{typ: untyped int}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 BinaryOp /\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchFuncCall overloadFuncType{funcs: [func Gop_Quo(a TemplateParamType{name: T}, b TemplateParamType{name: T}) TemplateParamType{name: T} func Gop_Quo(a github.com/goplus/gop/builtin/ng.UntypedBigint, b github.com/goplus/gop/builtin/ng.UntypedBigint) github.com/goplus/gop/builtin/ng.UntypedBigrat]}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchFuncCall func(a TemplateParamType{name: T}, b TemplateParamType{name: T}) TemplateParamType{name: T}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchType untyped float (1), unboundFuncParam{typ: <nil>}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchType untyped int (2), unboundFuncParam{typ: untyped float}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 EndInit 2\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Load const [h1_0 h1_1]\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val &{0 FLOAT 1.0} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val iota untyped int\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val &{0 INT 1} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:33:59 BinaryOp +\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchFuncCall func(a TemplateParamType{name: T}, b TemplateParamType{name: T}) TemplateParamType{name: T}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchType untyped int (1), unboundFuncParam{typ: <nil>}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchType untyped int (1), unboundFuncParam{typ: untyped int}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 BinaryOp /\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchFuncCall overloadFuncType{funcs: [func Gop_Quo(a TemplateParamType{name: T}, b TemplateParamType{name: T}) TemplateParamType{name: T} func Gop_Quo(a github.com/goplus/gop/builtin/ng.UntypedBigint, b github.com/goplus/gop/builtin/ng.UntypedBigint) github.com/goplus/gop/builtin/ng.UntypedBigrat]}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchFuncCall func(a TemplateParamType{name: T}, b TemplateParamType{name: T}) TemplateParamType{name: T}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchType untyped float (1), unboundFuncParam{typ: <nil>}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchType untyped int (2), unboundFuncParam{typ: untyped float}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val &{0 FLOAT 1.0} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val iota untyped int\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val &{0 INT 2} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:33:59 BinaryOp +\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchFuncCall func(a TemplateParamType{name: T}, b TemplateParamType{name: T}) TemplateParamType{name: T}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchType untyped int (1), unboundFuncParam{typ: <nil>}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchType untyped int (2), unboundFuncParam{typ: untyped int}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 BinaryOp /\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchFuncCall overloadFuncType{funcs: [func Gop_Quo(a TemplateParamType{name: T}, b TemplateParamType{name: T}) TemplateParamType{name: T} func Gop_Quo(a github.com/goplus/gop/builtin/ng.UntypedBigint, b github.com/goplus/gop/builtin/ng.UntypedBigint) github.com/goplus/gop/builtin/ng.UntypedBigrat]}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchFuncCall func(a TemplateParamType{name: T}, b TemplateParamType{name: T}) TemplateParamType{name: T}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchType untyped float (1), unboundFuncParam{typ: <nil>}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchType untyped int (3), unboundFuncParam{typ: untyped float}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> ASTFile \n[Go+ CI/Test]   | --- PASS: TestConstIssue800 (0.00s)\n[Go+ CI/Test]   | === RUN   TestConstIssue805\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:33:59 NewConstDefs\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Preload const [n1]\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Preload const [d1]\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Preload const [q1]\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Preload const [r1]\n[Go+ CI/Test]   | 2023/05/30 11:33:59 NewConstDefs\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Preload const [ret1]\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Preload const [ret2]\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Preload const [ret3]\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Load const [n1] <nil>\n[Go+ CI/Test]   | 2023/05/30 11:33:59 NewConst [n1] 0\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val &{0 INT 5} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:33:59 UnaryOp + flags: 0\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchFuncCall func(a TemplateParamType{name: T}) TemplateParamType{name: T}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchType untyped int (5), unboundFuncParam{typ: <nil>}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Load const [d1] <nil>\n[Go+ CI/Test]   | 2023/05/30 11:33:59 NewConst [d1] 1\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val &{0 INT 3} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:33:59 UnaryOp + flags: 0\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchFuncCall func(a TemplateParamType{name: T}) TemplateParamType{name: T}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchType untyped int (3), unboundFuncParam{typ: <nil>}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Load const [q1] <nil>\n[Go+ CI/Test]   | 2023/05/30 11:33:59 NewConst [q1] 2\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val &{0 INT 1} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:33:59 UnaryOp + flags: 0\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchFuncCall func(a TemplateParamType{name: T}) TemplateParamType{name: T}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchType untyped int (1), unboundFuncParam{typ: <nil>}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Load const [r1] <nil>\n[Go+ CI/Test]   | 2023/05/30 11:33:59 NewConst [r1] 3\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val &{0 INT 2} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:33:59 UnaryOp + flags: 0\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchFuncCall func(a TemplateParamType{name: T}) TemplateParamType{name: T}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchType untyped int (2), unboundFuncParam{typ: <nil>}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Load const [ret1] <nil>\n[Go+ CI/Test]   | 2023/05/30 11:33:59 NewConst [ret1] 0\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val n1 untyped int\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val d1 untyped int\n[Go+ CI/Test]   | 2023/05/30 11:33:59 BinaryOp /\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchFuncCall overloadFuncType{funcs: [func Gop_Quo(a TemplateParamType{name: T}, b TemplateParamType{name: T}) TemplateParamType{name: T} func Gop_Quo(a github.com/goplus/gop/builtin/ng.UntypedBigint, b github.com/goplus/gop/builtin/ng.UntypedBigint) github.com/goplus/gop/builtin/ng.UntypedBigrat]}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchFuncCall func(a TemplateParamType{name: T}, b TemplateParamType{name: T}) TemplateParamType{name: T}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchType untyped int (5), unboundFuncParam{typ: <nil>}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchType untyped int (3), unboundFuncParam{typ: untyped int}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val q1 untyped int\n[Go+ CI/Test]   | 2023/05/30 11:33:59 BinaryOp !=\n[Go+ CI/Test]   | 2023/05/30 11:33:59 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Load const [ret2] <nil>\n[Go+ CI/Test]   | 2023/05/30 11:33:59 NewConst [ret2] 1\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val n1 untyped int\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val d1 untyped int\n[Go+ CI/Test]   | 2023/05/30 11:33:59 BinaryOp %\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchFuncCall func(a TemplateParamType{name: T}, b TemplateParamType{name: T}) TemplateParamType{name: T}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchType untyped int (5), unboundFuncParam{typ: <nil>}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchType untyped int (3), unboundFuncParam{typ: untyped int}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val r1 untyped int\n[Go+ CI/Test]   | 2023/05/30 11:33:59 BinaryOp !=\n[Go+ CI/Test]   | 2023/05/30 11:33:59 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Load const [ret3] <nil>\n[Go+ CI/Test]   | 2023/05/30 11:33:59 NewConst [ret3] 2\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val n1 untyped int\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val d1 untyped int\n[Go+ CI/Test]   | 2023/05/30 11:33:59 BinaryOp /\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchFuncCall overloadFuncType{funcs: [func Gop_Quo(a TemplateParamType{name: T}, b TemplateParamType{name: T}) TemplateParamType{name: T} func Gop_Quo(a github.com/goplus/gop/builtin/ng.UntypedBigint, b github.com/goplus/gop/builtin/ng.UntypedBigint) github.com/goplus/gop/builtin/ng.UntypedBigrat]}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchFuncCall func(a TemplateParamType{name: T}, b TemplateParamType{name: T}) TemplateParamType{name: T}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchType untyped int (5), unboundFuncParam{typ: <nil>}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchType untyped int (3), unboundFuncParam{typ: untyped int}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val q1 untyped int\n[Go+ CI/Test]   | 2023/05/30 11:33:59 BinaryOp !=\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val n1 untyped int\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val d1 untyped int\n[Go+ CI/Test]   | 2023/05/30 11:33:59 BinaryOp %\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchFuncCall func(a TemplateParamType{name: T}, b TemplateParamType{name: T}) TemplateParamType{name: T}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchType untyped int (5), unboundFuncParam{typ: <nil>}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchType untyped int (3), unboundFuncParam{typ: untyped int}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val r1 untyped int\n[Go+ CI/Test]   | 2023/05/30 11:33:59 BinaryOp !=\n[Go+ CI/Test]   | 2023/05/30 11:33:59 BinaryOp ||\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchFuncCall func(a TemplateParamType{name: T}, b TemplateParamType{name: T}) TemplateParamType{name: T}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchType untyped bool (false), unboundFuncParam{typ: <nil>}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchType untyped bool (false), unboundFuncParam{typ: untyped bool}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> ASTFile \n[Go+ CI/Test]   | --- PASS: TestConstIssue805 (0.00s)\n[Go+ CI/Test]   | === RUN   TestUntypedNilIssue806\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Preload func main\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Load func main\n[Go+ CI/Test]   | 2023/05/30 11:33:59 NewFunc main func()\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Switch\n[Go+ CI/Test]   | 2023/05/30 11:33:59 DefineVarStart [f]\n[Go+ CI/Test]   | 2023/05/30 11:33:59 NewClosure func()\n[Go+ CI/Test]   | 2023/05/30 11:33:59 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:33:59 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val f func()\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Then\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val nil untyped nil\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Case 1\n[Go+ CI/Test]   | 2023/05/30 11:33:59 End // Case\n[Go+ CI/Test]   | 2023/05/30 11:33:59 End // Switch\n[Go+ CI/Test]   | 2023/05/30 11:33:59 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> ASTFile \n[Go+ CI/Test]   | --- PASS: TestUntypedNilIssue806 (0.00s)\n[Go+ CI/Test]   | === RUN   TestSwitchIssue807\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Preload func main\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Load func main\n[Go+ CI/Test]   | 2023/05/30 11:33:59 NewFunc main func()\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Switch\n[Go+ CI/Test]   | 2023/05/30 11:33:59 None\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Then\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Typ interface{}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val true untyped bool\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Call 1 0 // TypeType{typ: interface{}}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchFuncCall TypeType{typ: interface{}}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Case 1\n[Go+ CI/Test]   | 2023/05/30 11:33:59 End // Case\n[Go+ CI/Test]   | 2023/05/30 11:33:59 End // Switch\n[Go+ CI/Test]   | 2023/05/30 11:33:59 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> ASTFile \n[Go+ CI/Test]   | --- PASS: TestSwitchIssue807 (0.00s)\n[Go+ CI/Test]   | === RUN   TestUntypedComplexIssue799\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:33:59 NewConstDefs\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Preload const [ulp1]\n[Go+ CI/Test]   | 2023/05/30 11:33:59 NewConstDefs\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Preload const [ulp2]\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Preload func main\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Load const [ulp1] <nil>\n[Go+ CI/Test]   | 2023/05/30 11:33:59 NewConst [ulp1] 0\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val imag overloadFuncType{funcs: [func imag(c untyped complex) untyped float func imag(c complex64) float32 func imag(c complex128) float64]}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val &{0 IMAG 1i} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val &{0 IMAG 2i} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val &{0 INT 3} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:33:59 BinaryOp /\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchFuncCall overloadFuncType{funcs: [func Gop_Quo(a TemplateParamType{name: T}, b TemplateParamType{name: T}) TemplateParamType{name: T} func Gop_Quo(a github.com/goplus/gop/builtin/ng.UntypedBigint, b github.com/goplus/gop/builtin/ng.UntypedBigint) github.com/goplus/gop/builtin/ng.UntypedBigrat]}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchFuncCall func(a TemplateParamType{name: T}, b TemplateParamType{name: T}) TemplateParamType{name: T}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchType untyped complex ((0 + 2i)), unboundFuncParam{typ: <nil>}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchType untyped int (3), unboundFuncParam{typ: untyped complex}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 BinaryOp +\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchFuncCall func(a TemplateParamType{name: T}, b TemplateParamType{name: T}) TemplateParamType{name: T}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchType untyped complex ((0 + 1i)), unboundFuncParam{typ: <nil>}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchType untyped complex ((0 + 0.666667i)), unboundFuncParam{typ: untyped complex}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val &{0 IMAG 5i} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val &{0 INT 3} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:33:59 BinaryOp /\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchFuncCall overloadFuncType{funcs: [func Gop_Quo(a TemplateParamType{name: T}, b TemplateParamType{name: T}) TemplateParamType{name: T} func Gop_Quo(a github.com/goplus/gop/builtin/ng.UntypedBigint, b github.com/goplus/gop/builtin/ng.UntypedBigint) github.com/goplus/gop/builtin/ng.UntypedBigrat]}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchFuncCall func(a TemplateParamType{name: T}, b TemplateParamType{name: T}) TemplateParamType{name: T}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchType untyped complex ((0 + 5i)), unboundFuncParam{typ: <nil>}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchType untyped int (3), unboundFuncParam{typ: untyped complex}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 BinaryOp -\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchFuncCall func(a TemplateParamType{name: T}, b TemplateParamType{name: T}) TemplateParamType{name: T}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchType untyped complex ((0 + 1.66667i)), unboundFuncParam{typ: <nil>}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchType untyped complex ((0 + 1.66667i)), unboundFuncParam{typ: untyped complex}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Call 1 0 // overloadFuncType{funcs: [func imag(c untyped complex) untyped float func imag(c complex64) float32 func imag(c complex128) float64]}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchFuncCall overloadFuncType{funcs: [func imag(c untyped complex) untyped float func imag(c complex64) float32 func imag(c complex128) float64]}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchFuncCall func(c untyped complex) untyped float\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchType untyped complex ((0 + 0i)), untyped complex\n[Go+ CI/Test]   | 2023/05/30 11:33:59 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Load const [ulp2] <nil>\n[Go+ CI/Test]   | 2023/05/30 11:33:59 NewConst [ulp2] 0\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val imag overloadFuncType{funcs: [func imag(c untyped complex) untyped float func imag(c complex64) float32 func imag(c complex128) float64]}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val &{0 IMAG 1i} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val complex overloadFuncType{funcs: [func complex(r untyped float, i untyped float) untyped complex func complex(r float32, i float32) complex64 func complex(r float64, i float64) complex128]}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val &{0 INT 0} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val &{0 INT 2} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Call 2 0 // overloadFuncType{funcs: [func complex(r untyped float, i untyped float) untyped complex func complex(r float32, i float32) complex64 func complex(r float64, i float64) complex128]}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchFuncCall overloadFuncType{funcs: [func complex(r untyped float, i untyped float) untyped complex func complex(r float32, i float32) complex64 func complex(r float64, i float64) complex128]}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchFuncCall func(r untyped float, i untyped float) untyped complex\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchType untyped int (0), untyped float\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchType untyped int (2), untyped float\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val &{0 INT 3} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:33:59 BinaryOp /\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchFuncCall overloadFuncType{funcs: [func Gop_Quo(a TemplateParamType{name: T}, b TemplateParamType{name: T}) TemplateParamType{name: T} func Gop_Quo(a github.com/goplus/gop/builtin/ng.UntypedBigint, b github.com/goplus/gop/builtin/ng.UntypedBigint) github.com/goplus/gop/builtin/ng.UntypedBigrat]}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchFuncCall func(a TemplateParamType{name: T}, b TemplateParamType{name: T}) TemplateParamType{name: T}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchType untyped complex ((0 + 2i)), unboundFuncParam{typ: <nil>}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchType untyped int (3), unboundFuncParam{typ: untyped complex}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 BinaryOp +\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchFuncCall func(a TemplateParamType{name: T}, b TemplateParamType{name: T}) TemplateParamType{name: T}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchType untyped complex ((0 + 1i)), unboundFuncParam{typ: <nil>}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchType untyped complex ((0 + 0.666667i)), unboundFuncParam{typ: untyped complex}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val &{0 IMAG 5i} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val &{0 INT 3} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:33:59 BinaryOp /\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchFuncCall overloadFuncType{funcs: [func Gop_Quo(a TemplateParamType{name: T}, b TemplateParamType{name: T}) TemplateParamType{name: T} func Gop_Quo(a github.com/goplus/gop/builtin/ng.UntypedBigint, b github.com/goplus/gop/builtin/ng.UntypedBigint) github.com/goplus/gop/builtin/ng.UntypedBigrat]}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchFuncCall func(a TemplateParamType{name: T}, b TemplateParamType{name: T}) TemplateParamType{name: T}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchType untyped complex ((0 + 5i)), unboundFuncParam{typ: <nil>}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchType untyped int (3), unboundFuncParam{typ: untyped complex}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 BinaryOp -\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchFuncCall func(a TemplateParamType{name: T}, b TemplateParamType{name: T}) TemplateParamType{name: T}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchType untyped complex ((0 + 1.66667i)), unboundFuncParam{typ: <nil>}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchType untyped complex ((0 + 1.66667i)), unboundFuncParam{typ: untyped complex}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Call 1 0 // overloadFuncType{funcs: [func imag(c untyped complex) untyped float func imag(c complex64) float32 func imag(c complex128) float64]}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchFuncCall overloadFuncType{funcs: [func imag(c untyped complex) untyped float func imag(c complex64) float32 func imag(c complex128) float64]}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchFuncCall func(c untyped complex) untyped float\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchType untyped complex ((0 + 0i)), untyped complex\n[Go+ CI/Test]   | 2023/05/30 11:33:59 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Load func main\n[Go+ CI/Test]   | 2023/05/30 11:33:59 NewFunc main func()\n[Go+ CI/Test]   | 2023/05/30 11:33:59 NewConstDefs\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Load const [a] <nil>\n[Go+ CI/Test]   | 2023/05/30 11:33:59 NewConst [a] 0\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val ulp1 untyped float\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val ulp2 untyped float\n[Go+ CI/Test]   | 2023/05/30 11:33:59 BinaryOp ==\n[Go+ CI/Test]   | 2023/05/30 11:33:59 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:33:59 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> ASTFile \n[Go+ CI/Test]   | --- PASS: TestUntypedComplexIssue799 (0.00s)\n[Go+ CI/Test]   | === RUN   TestUnderscoreConstAndVar\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 NewConstDefs\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Preload const [c0]\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Preload const [_]\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Preload const [_]\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Preload const [_]\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Preload const [c4]\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Preload func i\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Preload var [_]\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Preload var [_]\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Load const [c0] <nil>\n[Go+ CI/Test]   | 2023/05/30 11:33:59 NewConst [c0] 0\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val &{0 INT 1} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val iota untyped int\n[Go+ CI/Test]   | 2023/05/30 11:33:59 BinaryOp <<\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchFuncCall func(a TemplateParamType{name: T}, n TemplateParamType{name: N}) TemplateParamType{name: T}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchType untyped int (1), unboundFuncParam{typ: <nil>}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchType untyped int (0), unboundFuncParam{typ: <nil>}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Load const [_]\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val &{0 INT 1} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val iota untyped int\n[Go+ CI/Test]   | 2023/05/30 11:33:59 BinaryOp <<\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchFuncCall func(a TemplateParamType{name: T}, n TemplateParamType{name: N}) TemplateParamType{name: T}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchType untyped int (1), unboundFuncParam{typ: <nil>}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchType untyped int (1), unboundFuncParam{typ: <nil>}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Load const [_]\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val &{0 INT 1} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val iota untyped int\n[Go+ CI/Test]   | 2023/05/30 11:33:59 BinaryOp <<\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchFuncCall func(a TemplateParamType{name: T}, n TemplateParamType{name: N}) TemplateParamType{name: T}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchType untyped int (1), unboundFuncParam{typ: <nil>}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchType untyped int (2), unboundFuncParam{typ: <nil>}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Load const [_]\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val &{0 INT 1} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val iota untyped int\n[Go+ CI/Test]   | 2023/05/30 11:33:59 BinaryOp <<\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchFuncCall func(a TemplateParamType{name: T}, n TemplateParamType{name: N}) TemplateParamType{name: T}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchType untyped int (1), unboundFuncParam{typ: <nil>}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchType untyped int (3), unboundFuncParam{typ: <nil>}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Load const [c4]\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val &{0 INT 1} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val iota untyped int\n[Go+ CI/Test]   | 2023/05/30 11:33:59 BinaryOp <<\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchFuncCall func(a TemplateParamType{name: T}, n TemplateParamType{name: N}) TemplateParamType{name: T}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchType untyped int (1), unboundFuncParam{typ: <nil>}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchType untyped int (4), unboundFuncParam{typ: <nil>}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Load func i\n[Go+ CI/Test]   | 2023/05/30 11:33:59 NewFunc i func() int\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val &{0 INT 23} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Return 1\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchType untyped int (23), int\n[Go+ CI/Test]   | 2023/05/30 11:33:59 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Load var <nil> [_]\n[Go+ CI/Test]   | 2023/05/30 11:33:59 NewVar [_]\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val i func() int\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Call 0 0 // func() int\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchFuncCall func() int\n[Go+ CI/Test]   | 2023/05/30 11:33:59 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Load var <nil> [_]\n[Go+ CI/Test]   | 2023/05/30 11:33:59 NewVar [_]\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val i func() int\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Call 0 0 // func() int\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchFuncCall func() int\n[Go+ CI/Test]   | 2023/05/30 11:33:59 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> ASTFile \n[Go+ CI/Test]   | --- PASS: TestUnderscoreConstAndVar (0.00s)\n[Go+ CI/Test]   | === RUN   TestUnderscoreFuncAndMethod\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Preload func _\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Preload type T\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Preload method T._\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Preload method T._\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Load > NewType T\n[Go+ CI/Test]   | 2023/05/30 11:33:59 NewType T\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Load > InitType T\n[Go+ CI/Test]   | 2023/05/30 11:33:59 InitType T struct{_ int; _ int; _ int}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> LookupParent T => type github.com/goplus/gop/cl.T struct{_ int; _ int; _ int}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Load method github.com/goplus/gop/cl.T._\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> LookupParent T => type github.com/goplus/gop/cl.T struct{_ int; _ int; _ int}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Load method github.com/goplus/gop/cl.T._\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Load func _\n[Go+ CI/Test]   | 2023/05/30 11:33:59 NewFunc _ func()\n[Go+ CI/Test]   | 2023/05/30 11:33:59 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:33:59 NewFunc _ (github.com/goplus/gop/cl.T) func()\n[Go+ CI/Test]   | 2023/05/30 11:33:59 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:33:59 NewFunc _ (github.com/goplus/gop/cl.T) func()\n[Go+ CI/Test]   | 2023/05/30 11:33:59 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> ASTFile \n[Go+ CI/Test]   | --- PASS: TestUnderscoreFuncAndMethod (0.00s)\n[Go+ CI/Test]   | === RUN   TestErrWrapIssue772\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Preload func t\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Preload func main\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Load func t\n[Go+ CI/Test]   | 2023/05/30 11:33:59 NewFunc t func() (int, int, error)\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val &{0 INT 0} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val &{0 INT 0} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val nil untyped nil\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Return 3\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchType untyped int (0), int\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchType untyped int (0), int\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchType untyped nil, error\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> EnsureLoaded error\n[Go+ CI/Test]   | 2023/05/30 11:33:59 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Load func main\n[Go+ CI/Test]   | 2023/05/30 11:33:59 NewFunc main func()\n[Go+ CI/Test]   | 2023/05/30 11:33:59 DefineVarStart [a b]\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val t func() (int, int, error)\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Call 0 0 // func() (int, int, error)\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchFuncCall func() (int, int, error)\n[Go+ CI/Test]   | 2023/05/30 11:33:59 NewClosure func() (_gop_ret unboundType{typ: <nil>}, _gop_ret2 unboundType{typ: <nil>})\n[Go+ CI/Test]   | 2023/05/30 11:33:59 NewVar [_gop_err]\n[Go+ CI/Test]   | 2023/05/30 11:33:59 VarRef _gop_ret unboundType{typ: <nil>}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 VarRef _gop_ret2 unboundType{typ: <nil>}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 VarRef _gop_err error\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Assign 3 1\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchType int, unboundType{typ: <nil>}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchType int, unboundType{typ: <nil>}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchType error, error\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> EnsureLoaded error\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> EnsureLoaded error\n[Go+ CI/Test]   | 2023/05/30 11:33:59 If\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val _gop_err error\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val <nil> <nil>\n[Go+ CI/Test]   | 2023/05/30 11:33:59 BinaryOp !=\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Then\n[Go+ CI/Test]   | 2023/05/30 11:33:59 VarRef _gop_err error\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val NewFrame func(err error, code string, file string, line int, fn string, args ...interface{}) *github.com/qiniu/x/errors.Frame\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val _gop_err error\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val t() string\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val /foo/bar.gop string\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val 9 int\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val main.main string\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Call 5 0 // func(err error, code string, file string, line int, fn string, args ...interface{}) *github.com/qiniu/x/errors.Frame\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchFuncCall func(err error, code string, file string, line int, fn string, args ...interface{}) *github.com/qiniu/x/errors.Frame\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchType error, error\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> EnsureLoaded error\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> EnsureLoaded error\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchType untyped string (\"t()\"), string\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchType untyped string (\"/foo/bar.gop\"), string\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchType untyped int (9), int\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchType untyped string (\"main.main\"), string\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Assign 1 1\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchType *github.com/qiniu/x/errors.Frame, error\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> EnsureLoaded error\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val panic func(v interface{})\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val _gop_err error\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Call 1 0 // func(v interface{})\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchFuncCall func(v interface{})\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchType error, interface{}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> EnsureLoaded error\n[Go+ CI/Test]   | 2023/05/30 11:33:59 End // If\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Return 0\n[Go+ CI/Test]   | 2023/05/30 11:33:59 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Call 0 0 // func() (_gop_ret int, _gop_ret2 int)\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchFuncCall func() (_gop_ret int, _gop_ret2 int)\n[Go+ CI/Test]   | 2023/05/30 11:33:59 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val println overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val a int\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val b int\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Call 2 0 // overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchFuncCall overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchFuncCall func(a ...interface{}) (n int, err error)\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchType int, interface{}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchType int, interface{}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> ASTFile \n[Go+ CI/Test]   | --- PASS: TestErrWrapIssue772 (0.00s)\n[Go+ CI/Test]   | === RUN   TestErrWrapIssue778\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Preload func t\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Preload func main\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Load func t\n[Go+ CI/Test]   | 2023/05/30 11:33:59 NewFunc t func() error\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val nil untyped nil\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Return 1\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchType untyped nil, error\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> EnsureLoaded error\n[Go+ CI/Test]   | 2023/05/30 11:33:59 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Load func main\n[Go+ CI/Test]   | 2023/05/30 11:33:59 NewFunc main func()\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val t func() error\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Call 0 0 // func() error\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchFuncCall func() error\n[Go+ CI/Test]   | 2023/05/30 11:33:59 NewClosure func()\n[Go+ CI/Test]   | 2023/05/30 11:33:59 NewVar [_gop_err]\n[Go+ CI/Test]   | 2023/05/30 11:33:59 VarRef _gop_err error\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Assign 1 1\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchType error, error\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> EnsureLoaded error\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> EnsureLoaded error\n[Go+ CI/Test]   | 2023/05/30 11:33:59 If\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val _gop_err error\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val <nil> <nil>\n[Go+ CI/Test]   | 2023/05/30 11:33:59 BinaryOp !=\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Then\n[Go+ CI/Test]   | 2023/05/30 11:33:59 VarRef _gop_err error\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val NewFrame func(err error, code string, file string, line int, fn string, args ...interface{}) *github.com/qiniu/x/errors.Frame\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val _gop_err error\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val t() string\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val /foo/bar.gop string\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val 9 int\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val main.main string\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Call 5 0 // func(err error, code string, file string, line int, fn string, args ...interface{}) *github.com/qiniu/x/errors.Frame\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchFuncCall func(err error, code string, file string, line int, fn string, args ...interface{}) *github.com/qiniu/x/errors.Frame\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchType error, error\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> EnsureLoaded error\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> EnsureLoaded error\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchType untyped string (\"t()\"), string\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchType untyped string (\"/foo/bar.gop\"), string\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchType untyped int (9), int\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchType untyped string (\"main.main\"), string\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Assign 1 1\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchType *github.com/qiniu/x/errors.Frame, error\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> EnsureLoaded error\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val panic func(v interface{})\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val _gop_err error\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Call 1 0 // func(v interface{})\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchFuncCall func(v interface{})\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchType error, interface{}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> EnsureLoaded error\n[Go+ CI/Test]   | 2023/05/30 11:33:59 End // If\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Return 0\n[Go+ CI/Test]   | 2023/05/30 11:33:59 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Call 0 0 // func()\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchFuncCall func()\n[Go+ CI/Test]   | 2023/05/30 11:33:59 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> ASTFile \n[Go+ CI/Test]   | --- PASS: TestErrWrapIssue778 (0.00s)\n[Go+ CI/Test]   | === RUN   TestIssue774\n[Go+ CI/Test]   | === RUN   TestIssue774/InterfaceTypeAssert\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Preload func main\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Preload type AA\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Preload type A\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Preload method A.String\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Load func main\n[Go+ CI/Test]   | 2023/05/30 11:33:59 NewFunc main func()\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Load > NewType AA\n[Go+ CI/Test]   | 2023/05/30 11:33:59 NewType AA\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Lookup (LoadSymbol) AA => type github.com/goplus/gop/cl.AA <nil>\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Load var github.com/goplus/gop/cl.AA [a]\n[Go+ CI/Test]   | 2023/05/30 11:33:59 NewVar [a]\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Load > NewType A\n[Go+ CI/Test]   | 2023/05/30 11:33:59 NewType A\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Lookup (LoadSymbol) A => type github.com/goplus/gop/cl.A <nil>\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Load > InitType A\n[Go+ CI/Test]   | 2023/05/30 11:33:59 InitType A struct{str string}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> LookupParent A => type github.com/goplus/gop/cl.A struct{str string}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Load method *github.com/goplus/gop/cl.A.String\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val 0 int\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val &{0 STRING \"hello\"} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:33:59 StructLit github.com/goplus/gop/cl.A 2 true\n[Go+ CI/Test]   | 2023/05/30 11:33:59 UnaryOp & flags: 0\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchFuncCall instructionType{instr: gox.addrInstr}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchType *github.com/goplus/gop/cl.A, github.com/goplus/gop/cl.AA\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> EnsureLoaded github.com/goplus/gop/cl.AA\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Load > InitType AA\n[Go+ CI/Test]   | 2023/05/30 11:33:59 InitType AA interface{String() string}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val Println func(a ...interface{}) (n int, err error)\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val a github.com/goplus/gop/cl.AA\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> LookupParent A => type github.com/goplus/gop/cl.A struct{str string}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 TypeAssert *github.com/goplus/gop/cl.A false\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Call 1 0 // func(a ...interface{}) (n int, err error)\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchFuncCall func(a ...interface{}) (n int, err error)\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchType *github.com/goplus/gop/cl.A, interface{}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:33:59 NewFunc String (*github.com/goplus/gop/cl.A) func() string\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val a *github.com/goplus/gop/cl.A\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Member str 2 // *github.com/goplus/gop/cl.A\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Return 1\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchType string, string\n[Go+ CI/Test]   | 2023/05/30 11:33:59 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> ASTFile \n[Go+ CI/Test]   | === RUN   TestIssue774/getInterface\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Preload func main\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Preload func get\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Preload type AA\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Preload type A\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Preload method A.String\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Load func main\n[Go+ CI/Test]   | 2023/05/30 11:33:59 NewFunc main func()\n[Go+ CI/Test]   | 2023/05/30 11:33:59 DefineVarStart [a]\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Load func get\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Load > NewType AA\n[Go+ CI/Test]   | 2023/05/30 11:33:59 NewType AA\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Lookup (LoadSymbol) AA => type github.com/goplus/gop/cl.AA <nil>\n[Go+ CI/Test]   | 2023/05/30 11:33:59 NewFunc get func() github.com/goplus/gop/cl.AA\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> LookupParent AA => type github.com/goplus/gop/cl.AA <nil>\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Load var github.com/goplus/gop/cl.AA [a]\n[Go+ CI/Test]   | 2023/05/30 11:33:59 NewVar [a]\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val a github.com/goplus/gop/cl.AA\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Return 1\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchType github.com/goplus/gop/cl.AA, github.com/goplus/gop/cl.AA\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> EnsureLoaded github.com/goplus/gop/cl.AA\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Load > InitType AA\n[Go+ CI/Test]   | 2023/05/30 11:33:59 InitType AA interface{String() string}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> EnsureLoaded github.com/goplus/gop/cl.AA\n[Go+ CI/Test]   | 2023/05/30 11:33:59 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val get func() github.com/goplus/gop/cl.AA\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Call 0 0 // func() github.com/goplus/gop/cl.AA\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchFuncCall func() github.com/goplus/gop/cl.AA\n[Go+ CI/Test]   | 2023/05/30 11:33:59 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val Println func(a ...interface{}) (n int, err error)\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val a github.com/goplus/gop/cl.AA\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Load > NewType A\n[Go+ CI/Test]   | 2023/05/30 11:33:59 NewType A\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Lookup (LoadSymbol) A => type github.com/goplus/gop/cl.A <nil>\n[Go+ CI/Test]   | 2023/05/30 11:33:59 TypeAssert *github.com/goplus/gop/cl.A false\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> EnsureLoaded github.com/goplus/gop/cl.A\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Load > InitType A\n[Go+ CI/Test]   | 2023/05/30 11:33:59 InitType A struct{str string}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> LookupParent A => type github.com/goplus/gop/cl.A struct{str string}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Load method *github.com/goplus/gop/cl.A.String\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Call 1 0 // func(a ...interface{}) (n int, err error)\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchFuncCall func(a ...interface{}) (n int, err error)\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchType *github.com/goplus/gop/cl.A, interface{}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:33:59 NewFunc String (*github.com/goplus/gop/cl.A) func() string\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val a *github.com/goplus/gop/cl.A\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Member str 2 // *github.com/goplus/gop/cl.A\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Return 1\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchType string, string\n[Go+ CI/Test]   | 2023/05/30 11:33:59 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> ASTFile \n[Go+ CI/Test]   | --- PASS: TestIssue774 (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestIssue774/InterfaceTypeAssert (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestIssue774/getInterface (0.00s)\n[Go+ CI/Test]   | === RUN   TestBlockStmt\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Preload func main\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Load func main\n[Go+ CI/Test]   | 2023/05/30 11:33:59 NewFunc main func()\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Block\n[Go+ CI/Test]   | 2023/05/30 11:33:59 NewType T\n[Go+ CI/Test]   | 2023/05/30 11:33:59 InitType T int\n[Go+ CI/Test]   | 2023/05/30 11:33:59 DefineVarStart [t]\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val T github.com/goplus/gop/cl.T\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val &{0 INT 100} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Call 1 0 // TypeType{typ: github.com/goplus/gop/cl.T}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchFuncCall TypeType{typ: github.com/goplus/gop/cl.T}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> EnsureLoaded github.com/goplus/gop/cl.T\n[Go+ CI/Test]   | 2023/05/30 11:33:59 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val println overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val t github.com/goplus/gop/cl.T\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Call 1 0 // overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchFuncCall overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchFuncCall func(a ...interface{}) (n int, err error)\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchType github.com/goplus/gop/cl.T, interface{}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> EnsureLoaded github.com/goplus/gop/cl.T\n[Go+ CI/Test]   | 2023/05/30 11:33:59 End // Block\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Block\n[Go+ CI/Test]   | 2023/05/30 11:33:59 NewType T\n[Go+ CI/Test]   | 2023/05/30 11:33:59 InitType T string\n[Go+ CI/Test]   | 2023/05/30 11:33:59 DefineVarStart [t]\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val &{0 STRING \"hello\"} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:33:59 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val println overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val t string\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Call 1 0 // overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchFuncCall overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchFuncCall func(a ...interface{}) (n int, err error)\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchType string, interface{}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 End // Block\n[Go+ CI/Test]   | 2023/05/30 11:33:59 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> ASTFile \n[Go+ CI/Test]   | --- PASS: TestBlockStmt (0.00s)\n[Go+ CI/Test]   | === RUN   TestConstTypeConvIssue792\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:33:59 NewConstDefs\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Preload const [dots]\n[Go+ CI/Test]   | 2023/05/30 11:33:59 NewConstDefs\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Preload const [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Load const [dots] <nil>\n[Go+ CI/Test]   | 2023/05/30 11:33:59 NewConst [dots] 0\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val &{0 STRING \". . . \"} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val &{0 STRING \". . . . . \"} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:33:59 BinaryOp +\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchFuncCall func(a TemplateParamType{name: T}, b TemplateParamType{name: T}) TemplateParamType{name: T}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchType untyped string (\". . . \"), unboundFuncParam{typ: <nil>}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchType untyped string (\". . . . . \"), unboundFuncParam{typ: untyped string}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Load const [n] <nil>\n[Go+ CI/Test]   | 2023/05/30 11:33:59 NewConst [n] 0\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val uint uint\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val len instructionType{instr: gox.lenInstr}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val dots untyped string\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Call 1 0 // instructionType{instr: gox.lenInstr}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchFuncCall instructionType{instr: gox.lenInstr}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Call 1 0 // TypeType{typ: uint}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchFuncCall TypeType{typ: uint}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> ASTFile \n[Go+ CI/Test]   | --- PASS: TestConstTypeConvIssue792 (0.00s)\n[Go+ CI/Test]   | === RUN   TestVarInitTwoValueIssue791\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Preload var [m]\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Preload var [a ok]\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Load var <nil> [m]\n[Go+ CI/Test]   | 2023/05/30 11:33:59 NewVar [m]\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val &{0 STRING \"a\"} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val &{0 STRING \"A\"} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:33:59 MapLit map[string]string 2\n[Go+ CI/Test]   | 2023/05/30 11:33:59 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Load var <nil> [a ok]\n[Go+ CI/Test]   | 2023/05/30 11:33:59 NewVar [a ok]\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val m map[string]string\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val &{0 STRING \"a\"} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Index 1 true\n[Go+ CI/Test]   | 2023/05/30 11:33:59 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> ASTFile \n[Go+ CI/Test]   | --- PASS: TestVarInitTwoValueIssue791 (0.00s)\n[Go+ CI/Test]   | === RUN   TestVarAfterMain\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Preload func main\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Preload var [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Load func main\n[Go+ CI/Test]   | 2023/05/30 11:33:59 NewFunc main func()\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val println overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Load var int [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:59 NewVar [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val i int\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Call 1 0 // overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchFuncCall overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchFuncCall func(a ...interface{}) (n int, err error)\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchType int, interface{}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> ASTFile \n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Preload func f\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Preload func main\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Preload var [sink]\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Load func f\n[Go+ CI/Test]   | 2023/05/30 11:33:59 NewFunc f func(v float64) float64\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val v float64\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Return 1\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchType float64, float64\n[Go+ CI/Test]   | 2023/05/30 11:33:59 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Load func main\n[Go+ CI/Test]   | 2023/05/30 11:33:59 NewFunc main func()\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Load var float64 [sink]\n[Go+ CI/Test]   | 2023/05/30 11:33:59 NewVar [sink]\n[Go+ CI/Test]   | 2023/05/30 11:33:59 VarRef sink float64\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val f func(v float64) float64\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val &{0 INT 100} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Call 1 0 // func(v float64) float64\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchFuncCall func(v float64) float64\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchType untyped int (100), float64\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Assign 1 1\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchType float64, float64\n[Go+ CI/Test]   | 2023/05/30 11:33:59 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> ASTFile \n[Go+ CI/Test]   | --- PASS: TestVarAfterMain (0.00s)\n[Go+ CI/Test]   | === RUN   TestVarAfterMain2\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Preload func main\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Preload var [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Load func main\n[Go+ CI/Test]   | 2023/05/30 11:33:59 NewFunc main func()\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val println overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Load var <nil> [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:59 NewVar [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val &{0 INT 100} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:33:59 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val i int\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Call 1 0 // overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchFuncCall overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchFuncCall func(a ...interface{}) (n int, err error)\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchType int, interface{}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> ASTFile \n[Go+ CI/Test]   | --- PASS: TestVarAfterMain2 (0.00s)\n[Go+ CI/Test]   | === RUN   TestVarInMain\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Preload func main\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Load func main\n[Go+ CI/Test]   | 2023/05/30 11:33:59 NewFunc main func()\n[Go+ CI/Test]   | 2023/05/30 11:33:59 DefineVarStart [v]\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val &{0 INT 2} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val &{0 INT 3} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val &{0 INT 5} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:33:59 SliceLit []uint64 3 false\n[Go+ CI/Test]   | 2023/05/30 11:33:59 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Load var <nil> [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:59 NewVar [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val len instructionType{instr: gox.lenInstr}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val v []uint64\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Call 1 0 // instructionType{instr: gox.lenInstr}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchFuncCall instructionType{instr: gox.lenInstr}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val println overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val n int\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Call 1 0 // overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchFuncCall overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchFuncCall func(a ...interface{}) (n int, err error)\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchType int, interface{}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> ASTFile \n[Go+ CI/Test]   | --- PASS: TestVarInMain (0.00s)\n[Go+ CI/Test]   | === RUN   TestSelect\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Preload func consume\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Load func consume\n[Go+ CI/Test]   | 2023/05/30 11:33:59 NewFunc consume func(xchg chan int)\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Select\n[Go+ CI/Test]   | 2023/05/30 11:33:59 DefineVarStart [c]\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val xchg chan int\n[Go+ CI/Test]   | 2023/05/30 11:33:59 UnaryOp <- flags: 0\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchFuncCall instructionType{instr: gox.recvInstr}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:33:59 CommCase 1\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val println overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val c int\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Call 1 0 // overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchFuncCall overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchFuncCall func(a ...interface{}) (n int, err error)\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchType int, interface{}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 End // CommCase\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val xchg chan int\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val &{0 INT 1} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Send\n[Go+ CI/Test]   | 2023/05/30 11:33:59 CommCase 1\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val println overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val &{0 STRING \"send ok\"} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Call 1 0 // overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchFuncCall overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchFuncCall func(a ...interface{}) (n int, err error)\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchType untyped string (\"send ok\"), interface{}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 End // CommCase\n[Go+ CI/Test]   | 2023/05/30 11:33:59 CommCase 0\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val println overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val &{0 INT 0} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Call 1 0 // overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchFuncCall overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchFuncCall func(a ...interface{}) (n int, err error)\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchType untyped int (0), interface{}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 End // CommCase\n[Go+ CI/Test]   | 2023/05/30 11:33:59 End // Select\n[Go+ CI/Test]   | 2023/05/30 11:33:59 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> ASTFile \n[Go+ CI/Test]   | --- PASS: TestSelect (0.00s)\n[Go+ CI/Test]   | === RUN   TestTypeSwitch\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Preload func bar\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Preload func foo\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Load func bar\n[Go+ CI/Test]   | 2023/05/30 11:33:59 NewFunc bar func(p *interface{})\n[Go+ CI/Test]   | 2023/05/30 11:33:59 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Load func foo\n[Go+ CI/Test]   | 2023/05/30 11:33:59 NewFunc foo func(v interface{})\n[Go+ CI/Test]   | 2023/05/30 11:33:59 TypeSwitch\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val v interface{}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 TypeAssertThen\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val int int\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val string string\n[Go+ CI/Test]   | 2023/05/30 11:33:59 TypeCase 2\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val bar func(p *interface{})\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val v interface{}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 UnaryOp & flags: 0\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchFuncCall instructionType{instr: gox.addrInstr}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Call 1 0 // func(p *interface{})\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchFuncCall func(p *interface{})\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchType *interface{}, *interface{}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 End // TypeCase\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val bool bool\n[Go+ CI/Test]   | 2023/05/30 11:33:59 TypeCase 1\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Load var bool [x]\n[Go+ CI/Test]   | 2023/05/30 11:33:59 NewVar [x]\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val t bool\n[Go+ CI/Test]   | 2023/05/30 11:33:59 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchType bool, bool\n[Go+ CI/Test]   | 2023/05/30 11:33:59 End // TypeCase\n[Go+ CI/Test]   | 2023/05/30 11:33:59 TypeCase 0\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val bar func(p *interface{})\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val nil untyped nil\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Call 1 0 // func(p *interface{})\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchFuncCall func(p *interface{})\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchType untyped nil, *interface{}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 End // TypeCase\n[Go+ CI/Test]   | 2023/05/30 11:33:59 End // TypeSwitch\n[Go+ CI/Test]   | 2023/05/30 11:33:59 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> ASTFile \n[Go+ CI/Test]   | --- PASS: TestTypeSwitch (0.00s)\n[Go+ CI/Test]   | === RUN   TestTypeSwitch2\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Preload func bar\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Preload func foo\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Load func bar\n[Go+ CI/Test]   | 2023/05/30 11:33:59 NewFunc bar func(p *interface{})\n[Go+ CI/Test]   | 2023/05/30 11:33:59 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Load func foo\n[Go+ CI/Test]   | 2023/05/30 11:33:59 NewFunc foo func(v interface{})\n[Go+ CI/Test]   | 2023/05/30 11:33:59 TypeSwitch\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val bar func(p *interface{})\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val nil untyped nil\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Call 1 0 // func(p *interface{})\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchFuncCall func(p *interface{})\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchType untyped nil, *interface{}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val v interface{}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 TypeAssertThen\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val int int\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val string string\n[Go+ CI/Test]   | 2023/05/30 11:33:59 TypeCase 2\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val bar func(p *interface{})\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val v interface{}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 UnaryOp & flags: 0\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchFuncCall instructionType{instr: gox.addrInstr}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Call 1 0 // func(p *interface{})\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchFuncCall func(p *interface{})\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchType *interface{}, *interface{}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 End // TypeCase\n[Go+ CI/Test]   | 2023/05/30 11:33:59 End // TypeSwitch\n[Go+ CI/Test]   | 2023/05/30 11:33:59 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> ASTFile \n[Go+ CI/Test]   | --- PASS: TestTypeSwitch2 (0.00s)\n[Go+ CI/Test]   | === RUN   TestTypeAssert\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Preload func foo\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Load func foo\n[Go+ CI/Test]   | 2023/05/30 11:33:59 NewFunc foo func(v interface{})\n[Go+ CI/Test]   | 2023/05/30 11:33:59 DefineVarStart [x]\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val v interface{}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 TypeAssert int false\n[Go+ CI/Test]   | 2023/05/30 11:33:59 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:33:59 DefineVarStart [y ok]\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val v interface{}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 TypeAssert string true\n[Go+ CI/Test]   | 2023/05/30 11:33:59 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:33:59 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> ASTFile \n[Go+ CI/Test]   | --- PASS: TestTypeAssert (0.00s)\n[Go+ CI/Test]   | === RUN   TestInterface\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Preload type Shape\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Preload func foo\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Load > NewType Shape\n[Go+ CI/Test]   | 2023/05/30 11:33:59 NewType Shape\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Load > InitType Shape\n[Go+ CI/Test]   | 2023/05/30 11:33:59 InitType Shape interface{Area() float64}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Load func foo\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> LookupParent Shape => type github.com/goplus/gop/cl.Shape interface{Area() float64}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 NewFunc foo func(shape github.com/goplus/gop/cl.Shape)\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val shape github.com/goplus/gop/cl.Shape\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Member Area 1 // github.com/goplus/gop/cl.Shape\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Call 0 0 // func() float64\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchFuncCall func() float64\n[Go+ CI/Test]   | 2023/05/30 11:33:59 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> ASTFile \n[Go+ CI/Test]   | --- PASS: TestInterface (0.00s)\n[Go+ CI/Test]   | === RUN   TestInterfaceEmbedded\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Preload type Shape\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Preload type Bar\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Load > NewType Shape\n[Go+ CI/Test]   | 2023/05/30 11:33:59 NewType Shape\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Load > InitType Shape\n[Go+ CI/Test]   | 2023/05/30 11:33:59 InitType Shape interface{Area() float64}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Load > NewType Bar\n[Go+ CI/Test]   | 2023/05/30 11:33:59 NewType Bar\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Load > InitType Bar\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> LookupParent Shape => type github.com/goplus/gop/cl.Shape interface{Area() float64}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 InitType Bar interface{github.com/goplus/gop/cl.Shape}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> ASTFile \n[Go+ CI/Test]   | --- PASS: TestInterfaceEmbedded (0.00s)\n[Go+ CI/Test]   | === RUN   TestInterfaceExample\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Preload type Shape\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Preload type Rect\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Preload method Rect.Area\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Preload type Circle\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Preload method Circle.Area\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Preload func Area\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Preload func main\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Load > NewType Shape\n[Go+ CI/Test]   | 2023/05/30 11:33:59 NewType Shape\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Load > InitType Shape\n[Go+ CI/Test]   | 2023/05/30 11:33:59 InitType Shape interface{Area() float64}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Load > NewType Rect\n[Go+ CI/Test]   | 2023/05/30 11:33:59 NewType Rect\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Load > InitType Rect\n[Go+ CI/Test]   | 2023/05/30 11:33:59 InitType Rect struct{x float64; y float64; w float64; h float64}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> LookupParent Rect => type github.com/goplus/gop/cl.Rect struct{x float64; y float64; w float64; h float64}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Load method *github.com/goplus/gop/cl.Rect.Area\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Load > NewType Circle\n[Go+ CI/Test]   | 2023/05/30 11:33:59 NewType Circle\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Load > InitType Circle\n[Go+ CI/Test]   | 2023/05/30 11:33:59 InitType Circle struct{x float64; y float64; r float64}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> LookupParent Circle => type github.com/goplus/gop/cl.Circle struct{x float64; y float64; r float64}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Load method *github.com/goplus/gop/cl.Circle.Area\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Load func Area\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> LookupParent Shape => type github.com/goplus/gop/cl.Shape interface{Area() float64}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 NewFunc Area func(shapes ...github.com/goplus/gop/cl.Shape) float64\n[Go+ CI/Test]   | 2023/05/30 11:33:59 DefineVarStart [s]\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val &{0 FLOAT 0.0} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:33:59 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ForRange [_ shape]\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val shapes []github.com/goplus/gop/cl.Shape\n[Go+ CI/Test]   | 2023/05/30 11:33:59 RangeAssignThen\n[Go+ CI/Test]   | 2023/05/30 11:33:59 VarRef s float64\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val shape github.com/goplus/gop/cl.Shape\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Member Area 1 // github.com/goplus/gop/cl.Shape\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Call 0 0 // func() float64\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchFuncCall func() float64\n[Go+ CI/Test]   | 2023/05/30 11:33:59 AssignOp += Gop_AddAssign\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchFuncCall func(a unboundProxyParam{typ: *TemplateParamType{name: T}}, b TemplateParamType{name: T})\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchType refType{typ: float64}, unboundProxyParam{typ: *unboundFuncParam{typ: <nil>}}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchType float64, unboundFuncParam{typ: float64}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 End // ForRange\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val s float64\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Return 1\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchType float64, float64\n[Go+ CI/Test]   | 2023/05/30 11:33:59 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Load func main\n[Go+ CI/Test]   | 2023/05/30 11:33:59 NewFunc main func()\n[Go+ CI/Test]   | 2023/05/30 11:33:59 DefineVarStart [rect]\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> LookupParent Rect => type github.com/goplus/gop/cl.Rect struct{x float64; y float64; w float64; h float64}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val &{0 INT 0} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val &{0 INT 0} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val &{0 INT 2} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val &{0 INT 5} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:33:59 StructLit github.com/goplus/gop/cl.Rect 4 false\n[Go+ CI/Test]   | 2023/05/30 11:33:59 UnaryOp & flags: 0\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchFuncCall instructionType{instr: gox.addrInstr}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:33:59 DefineVarStart [circle]\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> LookupParent Circle => type github.com/goplus/gop/cl.Circle struct{x float64; y float64; r float64}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val &{0 INT 0} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val &{0 INT 0} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val &{0 INT 3} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:33:59 StructLit github.com/goplus/gop/cl.Circle 3 false\n[Go+ CI/Test]   | 2023/05/30 11:33:59 UnaryOp & flags: 0\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchFuncCall instructionType{instr: gox.addrInstr}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val println overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val Area func(shapes ...github.com/goplus/gop/cl.Shape) float64\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val circle *github.com/goplus/gop/cl.Circle\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val rect *github.com/goplus/gop/cl.Rect\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Call 2 0 // func(shapes ...github.com/goplus/gop/cl.Shape) float64\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchFuncCall func(shapes ...github.com/goplus/gop/cl.Shape) float64\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchType *github.com/goplus/gop/cl.Circle, github.com/goplus/gop/cl.Shape\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> EnsureLoaded github.com/goplus/gop/cl.Shape\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchType *github.com/goplus/gop/cl.Rect, github.com/goplus/gop/cl.Shape\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> EnsureLoaded github.com/goplus/gop/cl.Shape\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Call 1 0 // overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchFuncCall overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchFuncCall func(a ...interface{}) (n int, err error)\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchType float64, interface{}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:33:59 NewFunc Area (*github.com/goplus/gop/cl.Rect) func() float64\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val p *github.com/goplus/gop/cl.Rect\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Member w 2 // *github.com/goplus/gop/cl.Rect\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val p *github.com/goplus/gop/cl.Rect\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Member h 2 // *github.com/goplus/gop/cl.Rect\n[Go+ CI/Test]   | 2023/05/30 11:33:59 BinaryOp *\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchFuncCall func(a TemplateParamType{name: T}, b TemplateParamType{name: T}) TemplateParamType{name: T}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchType float64, unboundFuncParam{typ: <nil>}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchType float64, unboundFuncParam{typ: float64}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Return 1\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchType float64, float64\n[Go+ CI/Test]   | 2023/05/30 11:33:59 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:33:59 NewFunc Area (*github.com/goplus/gop/cl.Circle) func() float64\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val &{0 FLOAT 3.14} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val p *github.com/goplus/gop/cl.Circle\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Member r 2 // *github.com/goplus/gop/cl.Circle\n[Go+ CI/Test]   | 2023/05/30 11:33:59 BinaryOp *\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchFuncCall func(a TemplateParamType{name: T}, b TemplateParamType{name: T}) TemplateParamType{name: T}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchType untyped float (3.14), unboundFuncParam{typ: <nil>}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchType float64, unboundFuncParam{typ: untyped float}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Val p *github.com/goplus/gop/cl.Circle\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Member r 2 // *github.com/goplus/gop/cl.Circle\n[Go+ CI/Test]   | 2023/05/30 11:33:59 BinaryOp *\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchFuncCall func(a TemplateParamType{name: T}, b TemplateParamType{name: T}) TemplateParamType{name: T}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchType float64, unboundFuncParam{typ: <nil>}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchType float64, unboundFuncParam{typ: float64}\n[Go+ CI/Test]   | 2023/05/30 11:33:59 Return 1\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> MatchType float64, float64\n[Go+ CI/Test]   | 2023/05/30 11:33:59 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> ASTFile \n[Go+ CI/Test]   | --- PASS: TestInterfaceExample (0.00s)\n[Go+ CI/Test]   | === RUN   TestEmbeddField\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:33:59 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:00 ==> Preload type BigInt\n[Go+ CI/Test]   | 2023/05/30 11:34:00 ==> Load > NewType BigInt\n[Go+ CI/Test]   | 2023/05/30 11:34:00 NewType BigInt\n[Go+ CI/Test]   | 2023/05/30 11:34:00 ==> Load > InitType BigInt\n[Go+ CI/Test]   | 2023/05/30 11:34:00 InitType BigInt struct{*math/big.Int}\n[Go+ CI/Test]   | 2023/05/30 11:34:00 ==> ASTFile \n[Go+ CI/Test]   | --- PASS: TestEmbeddField (1.02s)\n[Go+ CI/Test]   | === RUN   TestAutoProperty\n[Go+ CI/Test]   | 2023/05/30 11:34:00 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:00 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:00 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:00 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:00 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:00 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:00 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:00 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:00 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:00 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:00 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:00 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:00 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:00 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:00 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:00 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:00 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:00 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:00 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:00 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:00 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:00 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:00 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:00 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:00 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:00 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:00 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:00 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:00 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:00 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:00 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:00 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:00 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:00 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:00 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:00 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:00 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:00 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:00 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:00 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:00 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:00 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:00 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:00 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:01 ==> Preload func foo\n[Go+ CI/Test]   | 2023/05/30 11:34:01 ==> Load func foo\n[Go+ CI/Test]   | 2023/05/30 11:34:01 NewFunc foo func(script string)\n[Go+ CI/Test]   | 2023/05/30 11:34:01 DefineVarStart [doc]\n[Go+ CI/Test]   | 2023/05/30 11:34:01 Val New func(script string) (github.com/goplus/gop/ast/gopq.NodeSet, error)\n[Go+ CI/Test]   | 2023/05/30 11:34:01 Val script string\n[Go+ CI/Test]   | 2023/05/30 11:34:01 Call 1 0 // func(script string) (github.com/goplus/gop/ast/gopq.NodeSet, error)\n[Go+ CI/Test]   | 2023/05/30 11:34:01 ==> MatchFuncCall func(script string) (github.com/goplus/gop/ast/gopq.NodeSet, error)\n[Go+ CI/Test]   | 2023/05/30 11:34:01 ==> MatchType string, string\n[Go+ CI/Test]   | 2023/05/30 11:34:01 NewClosure func() (_gop_ret unboundType{typ: <nil>})\n[Go+ CI/Test]   | 2023/05/30 11:34:01 NewVar [_gop_err]\n[Go+ CI/Test]   | 2023/05/30 11:34:01 VarRef _gop_ret unboundType{typ: <nil>}\n[Go+ CI/Test]   | 2023/05/30 11:34:01 VarRef _gop_err error\n[Go+ CI/Test]   | 2023/05/30 11:34:01 Assign 2 1\n[Go+ CI/Test]   | 2023/05/30 11:34:01 ==> MatchType github.com/goplus/gop/ast/gopq.NodeSet, unboundType{typ: <nil>}\n[Go+ CI/Test]   | 2023/05/30 11:34:01 ==> MatchType error, error\n[Go+ CI/Test]   | 2023/05/30 11:34:01 ==> EnsureLoaded error\n[Go+ CI/Test]   | 2023/05/30 11:34:01 ==> EnsureLoaded error\n[Go+ CI/Test]   | 2023/05/30 11:34:01 If\n[Go+ CI/Test]   | 2023/05/30 11:34:01 Val _gop_err error\n[Go+ CI/Test]   | 2023/05/30 11:34:01 Val <nil> <nil>\n[Go+ CI/Test]   | 2023/05/30 11:34:01 BinaryOp !=\n[Go+ CI/Test]   | 2023/05/30 11:34:01 Then\n[Go+ CI/Test]   | 2023/05/30 11:34:01 VarRef _gop_err error\n[Go+ CI/Test]   | 2023/05/30 11:34:01 Val NewFrame func(err error, code string, file string, line int, fn string, args ...interface{}) *github.com/qiniu/x/errors.Frame\n[Go+ CI/Test]   | 2023/05/30 11:34:01 Val _gop_err error\n[Go+ CI/Test]   | 2023/05/30 11:34:01 Val goptest.New(script) string\n[Go+ CI/Test]   | 2023/05/30 11:34:01 Val /foo/bar.gop string\n[Go+ CI/Test]   | 2023/05/30 11:34:01 Val 4 int\n[Go+ CI/Test]   | 2023/05/30 11:34:01 Val main.foo string\n[Go+ CI/Test]   | 2023/05/30 11:34:01 Call 5 0 // func(err error, code string, file string, line int, fn string, args ...interface{}) *github.com/qiniu/x/errors.Frame\n[Go+ CI/Test]   | 2023/05/30 11:34:01 ==> MatchFuncCall func(err error, code string, file string, line int, fn string, args ...interface{}) *github.com/qiniu/x/errors.Frame\n[Go+ CI/Test]   | 2023/05/30 11:34:01 ==> MatchType error, error\n[Go+ CI/Test]   | 2023/05/30 11:34:01 ==> EnsureLoaded error\n[Go+ CI/Test]   | 2023/05/30 11:34:01 ==> EnsureLoaded error\n[Go+ CI/Test]   | 2023/05/30 11:34:01 ==> MatchType untyped string (\"goptest.New(script)\"), string\n[Go+ CI/Test]   | 2023/05/30 11:34:01 ==> MatchType untyped string (\"/foo/bar.gop\"), string\n[Go+ CI/Test]   | 2023/05/30 11:34:01 ==> MatchType untyped int (4), int\n[Go+ CI/Test]   | 2023/05/30 11:34:01 ==> MatchType untyped string (\"main.foo\"), string\n[Go+ CI/Test]   | 2023/05/30 11:34:01 Assign 1 1\n[Go+ CI/Test]   | 2023/05/30 11:34:01 ==> MatchType *github.com/qiniu/x/errors.Frame, error\n[Go+ CI/Test]   | 2023/05/30 11:34:01 ==> EnsureLoaded error\n[Go+ CI/Test]   | 2023/05/30 11:34:01 Val panic func(v interface{})\n[Go+ CI/Test]   | 2023/05/30 11:34:01 Val _gop_err error\n[Go+ CI/Test]   | 2023/05/30 11:34:01 Call 1 0 // func(v interface{})\n[Go+ CI/Test]   | 2023/05/30 11:34:01 ==> MatchFuncCall func(v interface{})\n[Go+ CI/Test]   | 2023/05/30 11:34:01 ==> MatchType error, interface{}\n[Go+ CI/Test]   | 2023/05/30 11:34:01 ==> EnsureLoaded error\n[Go+ CI/Test]   | 2023/05/30 11:34:01 End // If\n[Go+ CI/Test]   | 2023/05/30 11:34:01 Return 0\n[Go+ CI/Test]   | 2023/05/30 11:34:01 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Call 0 0 // func() (_gop_ret github.com/goplus/gop/ast/gopq.NodeSet)\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall func() (_gop_ret github.com/goplus/gop/ast/gopq.NodeSet)\n[Go+ CI/Test]   | 2023/05/30 11:34:02 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val println overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val doc github.com/goplus/gop/ast/gopq.NodeSet\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Member any 2 // github.com/goplus/gop/ast/gopq.NodeSet\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Call 0 0 // func() (ret github.com/goplus/gop/ast/gopq.NodeSet)\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall func() (ret github.com/goplus/gop/ast/gopq.NodeSet)\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Member funcDecl 2 // github.com/goplus/gop/ast/gopq.NodeSet\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Call 0 0 // func() github.com/goplus/gop/ast/gopq.NodeSet\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall func() github.com/goplus/gop/ast/gopq.NodeSet\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Member name 2 // github.com/goplus/gop/ast/gopq.NodeSet\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Call 0 0 // func() []string\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall func() []string\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Call 1 0 // overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall func(a ...interface{}) (n int, err error)\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType []string, interface{}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val println overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val doc github.com/goplus/gop/ast/gopq.NodeSet\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Member any 2 // github.com/goplus/gop/ast/gopq.NodeSet\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Call 0 0 // func() (ret github.com/goplus/gop/ast/gopq.NodeSet)\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall func() (ret github.com/goplus/gop/ast/gopq.NodeSet)\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Member importSpec 2 // github.com/goplus/gop/ast/gopq.NodeSet\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Call 0 0 // func() github.com/goplus/gop/ast/gopq.NodeSet\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall func() github.com/goplus/gop/ast/gopq.NodeSet\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Member name 2 // github.com/goplus/gop/ast/gopq.NodeSet\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Call 0 0 // func() []string\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall func() []string\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Call 1 0 // overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall func(a ...interface{}) (n int, err error)\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType []string, interface{}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> ASTFile \n[Go+ CI/Test]   | --- PASS: TestAutoProperty (1.26s)\n[Go+ CI/Test]   | === RUN   TestSimplifyAutoProperty\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Preload func foo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Load func foo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewFunc foo func(script string)\n[Go+ CI/Test]   | 2023/05/30 11:34:02 DefineVarStart [doc]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val New func(script string) (github.com/goplus/gop/ast/gopq.NodeSet, error)\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val script string\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Call 1 0 // func(script string) (github.com/goplus/gop/ast/gopq.NodeSet, error)\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall func(script string) (github.com/goplus/gop/ast/gopq.NodeSet, error)\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType string, string\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewClosure func() (_gop_ret unboundType{typ: <nil>})\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewVar [_gop_err]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 VarRef _gop_ret unboundType{typ: <nil>}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 VarRef _gop_err error\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Assign 2 1\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType github.com/goplus/gop/ast/gopq.NodeSet, unboundType{typ: <nil>}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType error, error\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> EnsureLoaded error\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> EnsureLoaded error\n[Go+ CI/Test]   | 2023/05/30 11:34:02 If\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val _gop_err error\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val <nil> <nil>\n[Go+ CI/Test]   | 2023/05/30 11:34:02 BinaryOp !=\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Then\n[Go+ CI/Test]   | 2023/05/30 11:34:02 VarRef _gop_err error\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val NewFrame func(err error, code string, file string, line int, fn string, args ...interface{}) *github.com/qiniu/x/errors.Frame\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val _gop_err error\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val goptest.New(script) string\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val /foo/bar.gop string\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val 4 int\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val main.foo string\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Call 5 0 // func(err error, code string, file string, line int, fn string, args ...interface{}) *github.com/qiniu/x/errors.Frame\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall func(err error, code string, file string, line int, fn string, args ...interface{}) *github.com/qiniu/x/errors.Frame\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType error, error\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> EnsureLoaded error\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> EnsureLoaded error\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType untyped string (\"goptest.New(script)\"), string\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType untyped string (\"/foo/bar.gop\"), string\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType untyped int (4), int\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType untyped string (\"main.foo\"), string\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Assign 1 1\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType *github.com/qiniu/x/errors.Frame, error\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> EnsureLoaded error\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val panic func(v interface{})\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val _gop_err error\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Call 1 0 // func(v interface{})\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall func(v interface{})\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType error, interface{}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> EnsureLoaded error\n[Go+ CI/Test]   | 2023/05/30 11:34:02 End // If\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Return 0\n[Go+ CI/Test]   | 2023/05/30 11:34:02 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Call 0 0 // func() (_gop_ret github.com/goplus/gop/ast/gopq.NodeSet)\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall func() (_gop_ret github.com/goplus/gop/ast/gopq.NodeSet)\n[Go+ CI/Test]   | 2023/05/30 11:34:02 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val println overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val doc github.com/goplus/gop/ast/gopq.NodeSet\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Member any 2 // github.com/goplus/gop/ast/gopq.NodeSet\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Call 0 0 // func() (ret github.com/goplus/gop/ast/gopq.NodeSet)\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall func() (ret github.com/goplus/gop/ast/gopq.NodeSet)\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Member funcDecl 2 // github.com/goplus/gop/ast/gopq.NodeSet\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Call 0 0 // func() github.com/goplus/gop/ast/gopq.NodeSet\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall func() github.com/goplus/gop/ast/gopq.NodeSet\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Member name 2 // github.com/goplus/gop/ast/gopq.NodeSet\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Call 0 0 // func() []string\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall func() []string\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Call 1 0 // overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall func(a ...interface{}) (n int, err error)\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType []string, interface{}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val println overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val doc github.com/goplus/gop/ast/gopq.NodeSet\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Member any 2 // github.com/goplus/gop/ast/gopq.NodeSet\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Call 0 0 // func() (ret github.com/goplus/gop/ast/gopq.NodeSet)\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall func() (ret github.com/goplus/gop/ast/gopq.NodeSet)\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Member importSpec 2 // github.com/goplus/gop/ast/gopq.NodeSet\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Call 0 0 // func() github.com/goplus/gop/ast/gopq.NodeSet\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall func() github.com/goplus/gop/ast/gopq.NodeSet\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Member name 2 // github.com/goplus/gop/ast/gopq.NodeSet\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Call 0 0 // func() []string\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall func() []string\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Call 1 0 // overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall func(a ...interface{}) (n int, err error)\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType []string, interface{}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> ASTFile \n[Go+ CI/Test]   | --- PASS: TestSimplifyAutoProperty (0.00s)\n[Go+ CI/Test]   | === RUN   TestErrWrapBasic\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Preload func add\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Load func add\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewFunc add func(x string, y string) (int, error)\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val Atoi func(s string) (int, error)\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val x string\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Call 1 0 // func(s string) (int, error)\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall func(s string) (int, error)\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType string, string\n[Go+ CI/Test]   | 2023/05/30 11:34:02 CallInlineClosureStart 0 false\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewVar [_autoGo_1]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewVar [_gop_err]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 VarRef _gop_ret unboundType{typ: <nil>}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 VarRef _gop_err error\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Assign 2 1\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType int, unboundType{typ: <nil>}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType error, error\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> EnsureLoaded error\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> EnsureLoaded error\n[Go+ CI/Test]   | 2023/05/30 11:34:02 If\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val _gop_err error\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val <nil> <nil>\n[Go+ CI/Test]   | 2023/05/30 11:34:02 BinaryOp !=\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Then\n[Go+ CI/Test]   | 2023/05/30 11:34:02 VarRef _gop_err error\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val NewFrame func(err error, code string, file string, line int, fn string, args ...interface{}) *github.com/qiniu/x/errors.Frame\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val _gop_err error\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val strconv.Atoi(x) string\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val /foo/bar.gop string\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val 5 int\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val main.add string\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Call 5 0 // func(err error, code string, file string, line int, fn string, args ...interface{}) *github.com/qiniu/x/errors.Frame\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall func(err error, code string, file string, line int, fn string, args ...interface{}) *github.com/qiniu/x/errors.Frame\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType error, error\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> EnsureLoaded error\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> EnsureLoaded error\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType untyped string (\"strconv.Atoi(x)\"), string\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType untyped string (\"/foo/bar.gop\"), string\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType untyped int (5), int\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType untyped string (\"main.add\"), string\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Assign 1 1\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType *github.com/qiniu/x/errors.Frame, error\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> EnsureLoaded error\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val _gop_err error\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ReturnErr true\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val 0 int\n[Go+ CI/Test]   | 2023/05/30 11:34:02 End // If\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Return 0\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Goto _autoGo_2\n[Go+ CI/Test]   | 2023/05/30 11:34:02 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Label _autoGo_2\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val Atoi func(s string) (int, error)\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val y string\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Call 1 0 // func(s string) (int, error)\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall func(s string) (int, error)\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType string, string\n[Go+ CI/Test]   | 2023/05/30 11:34:02 CallInlineClosureStart 0 false\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewVar [_autoGo_3]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewVar [_gop_err]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 VarRef _gop_ret unboundType{typ: <nil>}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 VarRef _gop_err error\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Assign 2 1\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType int, unboundType{typ: <nil>}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType error, error\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> EnsureLoaded error\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> EnsureLoaded error\n[Go+ CI/Test]   | 2023/05/30 11:34:02 If\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val _gop_err error\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val <nil> <nil>\n[Go+ CI/Test]   | 2023/05/30 11:34:02 BinaryOp !=\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Then\n[Go+ CI/Test]   | 2023/05/30 11:34:02 VarRef _gop_err error\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val NewFrame func(err error, code string, file string, line int, fn string, args ...interface{}) *github.com/qiniu/x/errors.Frame\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val _gop_err error\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val strconv.Atoi(y) string\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val /foo/bar.gop string\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val 5 int\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val main.add string\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Call 5 0 // func(err error, code string, file string, line int, fn string, args ...interface{}) *github.com/qiniu/x/errors.Frame\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall func(err error, code string, file string, line int, fn string, args ...interface{}) *github.com/qiniu/x/errors.Frame\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType error, error\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> EnsureLoaded error\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> EnsureLoaded error\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType untyped string (\"strconv.Atoi(y)\"), string\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType untyped string (\"/foo/bar.gop\"), string\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType untyped int (5), int\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType untyped string (\"main.add\"), string\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Assign 1 1\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType *github.com/qiniu/x/errors.Frame, error\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> EnsureLoaded error\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val _gop_err error\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ReturnErr true\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val 0 int\n[Go+ CI/Test]   | 2023/05/30 11:34:02 End // If\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Return 0\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Goto _autoGo_4\n[Go+ CI/Test]   | 2023/05/30 11:34:02 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Label _autoGo_4\n[Go+ CI/Test]   | 2023/05/30 11:34:02 BinaryOp +\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall func(a TemplateParamType{name: T}, b TemplateParamType{name: T}) TemplateParamType{name: T}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType int, unboundFuncParam{typ: <nil>}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType int, unboundFuncParam{typ: int}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val nil untyped nil\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Return 2\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType int, int\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType untyped nil, error\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> EnsureLoaded error\n[Go+ CI/Test]   | 2023/05/30 11:34:02 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> ASTFile \n[Go+ CI/Test]   | --- PASS: TestErrWrapBasic (0.00s)\n[Go+ CI/Test]   | === RUN   TestErrWrapDefVal\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Preload func addSafe\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Load func addSafe\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewFunc addSafe func(x string, y string) int\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val Atoi func(s string) (int, error)\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val x string\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Call 1 0 // func(s string) (int, error)\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall func(s string) (int, error)\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType string, string\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewClosure func() (_gop_ret unboundType{typ: <nil>})\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewVar [_gop_err]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 VarRef _gop_ret unboundType{typ: <nil>}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 VarRef _gop_err error\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Assign 2 1\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType int, unboundType{typ: <nil>}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType error, error\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> EnsureLoaded error\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> EnsureLoaded error\n[Go+ CI/Test]   | 2023/05/30 11:34:02 If\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val _gop_err error\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val <nil> <nil>\n[Go+ CI/Test]   | 2023/05/30 11:34:02 BinaryOp !=\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Then\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 INT 0} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Return 1\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType untyped int (0), unboundType{typ: int}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 End // If\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Return 0\n[Go+ CI/Test]   | 2023/05/30 11:34:02 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Call 0 0 // func() (_gop_ret int)\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall func() (_gop_ret int)\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val Atoi func(s string) (int, error)\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val y string\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Call 1 0 // func(s string) (int, error)\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall func(s string) (int, error)\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType string, string\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewClosure func() (_gop_ret unboundType{typ: <nil>})\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewVar [_gop_err]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 VarRef _gop_ret unboundType{typ: <nil>}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 VarRef _gop_err error\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Assign 2 1\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType int, unboundType{typ: <nil>}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType error, error\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> EnsureLoaded error\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> EnsureLoaded error\n[Go+ CI/Test]   | 2023/05/30 11:34:02 If\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val _gop_err error\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val <nil> <nil>\n[Go+ CI/Test]   | 2023/05/30 11:34:02 BinaryOp !=\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Then\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 INT 0} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Return 1\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType untyped int (0), unboundType{typ: int}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 End // If\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Return 0\n[Go+ CI/Test]   | 2023/05/30 11:34:02 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Call 0 0 // func() (_gop_ret int)\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall func() (_gop_ret int)\n[Go+ CI/Test]   | 2023/05/30 11:34:02 BinaryOp +\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall func(a TemplateParamType{name: T}, b TemplateParamType{name: T}) TemplateParamType{name: T}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType int, unboundFuncParam{typ: <nil>}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType int, unboundFuncParam{typ: int}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Return 1\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType int, int\n[Go+ CI/Test]   | 2023/05/30 11:34:02 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> ASTFile \n[Go+ CI/Test]   | --- PASS: TestErrWrapDefVal (0.00s)\n[Go+ CI/Test]   | === RUN   TestErrWrapPanic\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Preload var [ret]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Load var int [ret]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewVar [ret]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val println overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 STRING \"Hi\"} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Call 1 0 // overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall func(a ...interface{}) (n int, err error)\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType untyped string (\"Hi\"), interface{}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewClosure func() (_gop_ret unboundType{typ: <nil>})\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewVar [_gop_err]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 VarRef _gop_ret unboundType{typ: <nil>}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 VarRef _gop_err error\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Assign 2 1\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType int, unboundType{typ: <nil>}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType error, error\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> EnsureLoaded error\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> EnsureLoaded error\n[Go+ CI/Test]   | 2023/05/30 11:34:02 If\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val _gop_err error\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val <nil> <nil>\n[Go+ CI/Test]   | 2023/05/30 11:34:02 BinaryOp !=\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Then\n[Go+ CI/Test]   | 2023/05/30 11:34:02 VarRef _gop_err error\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val NewFrame func(err error, code string, file string, line int, fn string, args ...interface{}) *github.com/qiniu/x/errors.Frame\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val _gop_err error\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val println(\"Hi\") string\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val /foo/bar.gop string\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val 2 int\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val main.main string\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Call 5 0 // func(err error, code string, file string, line int, fn string, args ...interface{}) *github.com/qiniu/x/errors.Frame\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall func(err error, code string, file string, line int, fn string, args ...interface{}) *github.com/qiniu/x/errors.Frame\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType error, error\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> EnsureLoaded error\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> EnsureLoaded error\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType untyped string (\"println(\\\"Hi\\\")\"), string\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType untyped string (\"/foo/bar.gop\"), string\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType untyped int (2), int\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType untyped string (\"main.main\"), string\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Assign 1 1\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType *github.com/qiniu/x/errors.Frame, error\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> EnsureLoaded error\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val panic func(v interface{})\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val _gop_err error\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Call 1 0 // func(v interface{})\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall func(v interface{})\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType error, interface{}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> EnsureLoaded error\n[Go+ CI/Test]   | 2023/05/30 11:34:02 End // If\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Return 0\n[Go+ CI/Test]   | 2023/05/30 11:34:02 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Call 0 0 // func() (_gop_ret int)\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall func() (_gop_ret int)\n[Go+ CI/Test]   | 2023/05/30 11:34:02 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType int, int\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> ASTFile \n[Go+ CI/Test]   | --- PASS: TestErrWrapPanic (0.00s)\n[Go+ CI/Test]   | === RUN   TestErrWrapCommand\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Preload func mkdir\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Preload func main\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Load func mkdir\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewFunc mkdir func(name string) error\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val nil untyped nil\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Return 1\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType untyped nil, error\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> EnsureLoaded error\n[Go+ CI/Test]   | 2023/05/30 11:34:02 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Load func main\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewFunc main func()\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val mkdir func(name string) error\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 STRING \"foo\"} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Call 1 0 // func(name string) error\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall func(name string) error\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType untyped string (\"foo\"), string\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewClosure func()\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewVar [_gop_err]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 VarRef _gop_err error\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Assign 1 1\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType error, error\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> EnsureLoaded error\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> EnsureLoaded error\n[Go+ CI/Test]   | 2023/05/30 11:34:02 If\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val _gop_err error\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val <nil> <nil>\n[Go+ CI/Test]   | 2023/05/30 11:34:02 BinaryOp !=\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Then\n[Go+ CI/Test]   | 2023/05/30 11:34:02 VarRef _gop_err error\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val NewFrame func(err error, code string, file string, line int, fn string, args ...interface{}) *github.com/qiniu/x/errors.Frame\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val _gop_err error\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val mkdir \"foo\" string\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val /foo/bar.gop string\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val 6 int\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val main.main string\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Call 5 0 // func(err error, code string, file string, line int, fn string, args ...interface{}) *github.com/qiniu/x/errors.Frame\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall func(err error, code string, file string, line int, fn string, args ...interface{}) *github.com/qiniu/x/errors.Frame\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType error, error\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> EnsureLoaded error\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> EnsureLoaded error\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType untyped string (\"mkdir \\\"foo\\\"\"), string\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType untyped string (\"/foo/bar.gop\"), string\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType untyped int (6), int\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType untyped string (\"main.main\"), string\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Assign 1 1\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType *github.com/qiniu/x/errors.Frame, error\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> EnsureLoaded error\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val panic func(v interface{})\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val _gop_err error\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Call 1 0 // func(v interface{})\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall func(v interface{})\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType error, interface{}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> EnsureLoaded error\n[Go+ CI/Test]   | 2023/05/30 11:34:02 End // If\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Return 0\n[Go+ CI/Test]   | 2023/05/30 11:34:02 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Call 0 0 // func()\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall func()\n[Go+ CI/Test]   | 2023/05/30 11:34:02 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> ASTFile \n[Go+ CI/Test]   | --- PASS: TestErrWrapCommand (0.00s)\n[Go+ CI/Test]   | === RUN   TestErrWrapCall\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Preload func foo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Preload func main\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Load func foo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewFunc foo func() (func(), error)\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val nil untyped nil\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val nil untyped nil\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Return 2\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType untyped nil, func()\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType untyped nil, error\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> EnsureLoaded error\n[Go+ CI/Test]   | 2023/05/30 11:34:02 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Load func main\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewFunc main func()\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val foo func() (func(), error)\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Call 0 0 // func() (func(), error)\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall func() (func(), error)\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewClosure func() (_gop_ret unboundType{typ: <nil>})\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewVar [_gop_err]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 VarRef _gop_ret unboundType{typ: <nil>}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 VarRef _gop_err error\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Assign 2 1\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType func(), unboundType{typ: <nil>}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType error, error\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> EnsureLoaded error\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> EnsureLoaded error\n[Go+ CI/Test]   | 2023/05/30 11:34:02 If\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val _gop_err error\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val <nil> <nil>\n[Go+ CI/Test]   | 2023/05/30 11:34:02 BinaryOp !=\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Then\n[Go+ CI/Test]   | 2023/05/30 11:34:02 VarRef _gop_err error\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val NewFrame func(err error, code string, file string, line int, fn string, args ...interface{}) *github.com/qiniu/x/errors.Frame\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val _gop_err error\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val foo() string\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val /foo/bar.gop string\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val 6 int\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val main.main string\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Call 5 0 // func(err error, code string, file string, line int, fn string, args ...interface{}) *github.com/qiniu/x/errors.Frame\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall func(err error, code string, file string, line int, fn string, args ...interface{}) *github.com/qiniu/x/errors.Frame\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType error, error\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> EnsureLoaded error\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> EnsureLoaded error\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType untyped string (\"foo()\"), string\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType untyped string (\"/foo/bar.gop\"), string\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType untyped int (6), int\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType untyped string (\"main.main\"), string\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Assign 1 1\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType *github.com/qiniu/x/errors.Frame, error\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> EnsureLoaded error\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val panic func(v interface{})\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val _gop_err error\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Call 1 0 // func(v interface{})\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall func(v interface{})\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType error, interface{}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> EnsureLoaded error\n[Go+ CI/Test]   | 2023/05/30 11:34:02 End // If\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Return 0\n[Go+ CI/Test]   | 2023/05/30 11:34:02 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Call 0 0 // func() (_gop_ret func())\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall func() (_gop_ret func())\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Call 0 0 // func()\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall func()\n[Go+ CI/Test]   | 2023/05/30 11:34:02 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> ASTFile \n[Go+ CI/Test]   | --- PASS: TestErrWrapCall (0.00s)\n[Go+ CI/Test]   | === RUN   TestMakeAndNew\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Preload var [a]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Preload var [b]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Preload var [c]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Load var *int [a]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewVar [a]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val new instructionType{instr: gox.newInstr}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val int int\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Call 1 0 // instructionType{instr: gox.newInstr}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall instructionType{instr: gox.newInstr}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType *int, *int\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Load var map[string]int [b]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewVar [b]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val make instructionType{instr: gox.makeInstr}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Typ map[string]int\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Call 1 0 // instructionType{instr: gox.makeInstr}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall instructionType{instr: gox.makeInstr}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType map[string]int, map[string]int\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Load var []byte [c]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewVar [c]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val make instructionType{instr: gox.makeInstr}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Typ []byte\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 INT 0} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 INT 2} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Call 3 0 // instructionType{instr: gox.makeInstr}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall instructionType{instr: gox.makeInstr}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType []byte, []byte\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> ASTFile \n[Go+ CI/Test]   | --- PASS: TestMakeAndNew (0.00s)\n[Go+ CI/Test]   | === RUN   TestVarDecl\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Preload var [a]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Preload var [x y]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Load var int [a]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewVar [a]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Load var <nil> [x y]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewVar [x y]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 INT 1} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 STRING \"Hi\"} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 EndInit 2\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> ASTFile \n[Go+ CI/Test]   | --- PASS: TestVarDecl (0.00s)\n[Go+ CI/Test]   | === RUN   TestUint128Add\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Preload var [x y]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Preload var [z]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Load var github.com/goplus/gop/builtin/ng.Uint128 [x y]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewVar [x y]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Load var github.com/goplus/gop/builtin/ng.Uint128 [z]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewVar [z]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val x github.com/goplus/gop/builtin/ng.Uint128\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val y github.com/goplus/gop/builtin/ng.Uint128\n[Go+ CI/Test]   | 2023/05/30 11:34:02 BinaryOp +\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall [func (github.com/goplus/gop/builtin/ng.Uint128).Gop_Add__0(n uint64) (v github.com/goplus/gop/builtin/ng.Uint128) func (github.com/goplus/gop/builtin/ng.Uint128).Gop_Add__1(n github.com/goplus/gop/builtin/ng.Uint128) (v github.com/goplus/gop/builtin/ng.Uint128)]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall func(n uint64) (v github.com/goplus/gop/builtin/ng.Uint128)\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType github.com/goplus/gop/builtin/ng.Uint128, github.com/goplus/gop/builtin/ng.Uint128\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType github.com/goplus/gop/builtin/ng.Uint128, uint64\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall func(n github.com/goplus/gop/builtin/ng.Uint128) (v github.com/goplus/gop/builtin/ng.Uint128)\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType github.com/goplus/gop/builtin/ng.Uint128, github.com/goplus/gop/builtin/ng.Uint128\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType github.com/goplus/gop/builtin/ng.Uint128, github.com/goplus/gop/builtin/ng.Uint128\n[Go+ CI/Test]   | 2023/05/30 11:34:02 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType github.com/goplus/gop/builtin/ng.Uint128, github.com/goplus/gop/builtin/ng.Uint128\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> ASTFile \n[Go+ CI/Test]   | --- PASS: TestUint128Add (0.00s)\n[Go+ CI/Test]   | === RUN   TestInt128Add\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Preload var [x y]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Preload var [z]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Load var github.com/goplus/gop/builtin/ng.Int128 [x y]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewVar [x y]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Load var github.com/goplus/gop/builtin/ng.Int128 [z]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewVar [z]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val x github.com/goplus/gop/builtin/ng.Int128\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val y github.com/goplus/gop/builtin/ng.Int128\n[Go+ CI/Test]   | 2023/05/30 11:34:02 BinaryOp +\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall [func (github.com/goplus/gop/builtin/ng.Int128).Gop_Add__0(n int64) (v github.com/goplus/gop/builtin/ng.Int128) func (github.com/goplus/gop/builtin/ng.Int128).Gop_Add__1(n github.com/goplus/gop/builtin/ng.Int128) (v github.com/goplus/gop/builtin/ng.Int128)]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall func(n int64) (v github.com/goplus/gop/builtin/ng.Int128)\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType github.com/goplus/gop/builtin/ng.Int128, github.com/goplus/gop/builtin/ng.Int128\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType github.com/goplus/gop/builtin/ng.Int128, int64\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall func(n github.com/goplus/gop/builtin/ng.Int128) (v github.com/goplus/gop/builtin/ng.Int128)\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType github.com/goplus/gop/builtin/ng.Int128, github.com/goplus/gop/builtin/ng.Int128\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType github.com/goplus/gop/builtin/ng.Int128, github.com/goplus/gop/builtin/ng.Int128\n[Go+ CI/Test]   | 2023/05/30 11:34:02 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType github.com/goplus/gop/builtin/ng.Int128, github.com/goplus/gop/builtin/ng.Int128\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> ASTFile \n[Go+ CI/Test]   | --- PASS: TestInt128Add (0.00s)\n[Go+ CI/Test]   | === RUN   TestBigIntAdd\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Preload var [x y]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Preload var [z]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Load var github.com/goplus/gop/builtin/ng.Bigint [x y]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewVar [x y]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Load var github.com/goplus/gop/builtin/ng.Bigint [z]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewVar [z]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val x github.com/goplus/gop/builtin/ng.Bigint\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val y github.com/goplus/gop/builtin/ng.Bigint\n[Go+ CI/Test]   | 2023/05/30 11:34:02 BinaryOp +\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall func(b github.com/goplus/gop/builtin/ng.Bigint) github.com/goplus/gop/builtin/ng.Bigint\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType github.com/goplus/gop/builtin/ng.Bigint, github.com/goplus/gop/builtin/ng.Bigint\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType github.com/goplus/gop/builtin/ng.Bigint, github.com/goplus/gop/builtin/ng.Bigint\n[Go+ CI/Test]   | 2023/05/30 11:34:02 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType github.com/goplus/gop/builtin/ng.Bigint, github.com/goplus/gop/builtin/ng.Bigint\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> ASTFile \n[Go+ CI/Test]   | --- PASS: TestBigIntAdd (0.00s)\n[Go+ CI/Test]   | === RUN   TestBigIntLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Preload var [x]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Load var <nil> [x]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewVar [x]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val NewInt func(x int64) *math/big.Int\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 INT 1} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Call 1 0 // func(x int64) *math/big.Int\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall func(x int64) *math/big.Int\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType untyped int (1), int64\n[Go+ CI/Test]   | 2023/05/30 11:34:02 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall overloadFuncType{funcs: [func github.com/goplus/gop/builtin/ng.Bigint_Init__0(x int) github.com/goplus/gop/builtin/ng.Bigint func github.com/goplus/gop/builtin/ng.Bigint_Init__1(x github.com/goplus/gop/builtin/ng.UntypedBigint) github.com/goplus/gop/builtin/ng.Bigint func github.com/goplus/gop/builtin/ng.Bigint_Init__2(x *math/big.Int) github.com/goplus/gop/builtin/ng.Bigint]}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall func(x int) github.com/goplus/gop/builtin/ng.Bigint\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType github.com/goplus/gop/builtin/ng.UntypedBigint, int\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> EnsureLoaded github.com/goplus/gop/builtin/ng.UntypedBigint\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall func(x github.com/goplus/gop/builtin/ng.UntypedBigint) github.com/goplus/gop/builtin/ng.Bigint\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType github.com/goplus/gop/builtin/ng.UntypedBigint, github.com/goplus/gop/builtin/ng.UntypedBigint\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> EnsureLoaded github.com/goplus/gop/builtin/ng.UntypedBigint\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> EnsureLoaded github.com/goplus/gop/builtin/ng.UntypedBigint\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> DefaultConv github.com/goplus/gop/builtin/ng.UntypedBigint github.com/goplus/gop/builtin/ng.Bigint\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> ASTFile \n[Go+ CI/Test]   | --- PASS: TestBigIntLit (0.00s)\n[Go+ CI/Test]   | === RUN   TestUint128Lit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Preload var [x]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Load var github.com/goplus/gop/builtin/ng.Uint128 [x]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewVar [x]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 INT 1} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType untyped int (1), github.com/goplus/gop/builtin/ng.Uint128\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall overloadFuncType{funcs: [func github.com/goplus/gop/builtin/ng.Uint128_Init__0(v int) (out github.com/goplus/gop/builtin/ng.Uint128) func github.com/goplus/gop/builtin/ng.Uint128_Init__1(v github.com/goplus/gop/builtin/ng.UntypedBigint) (out github.com/goplus/gop/builtin/ng.Uint128)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall func(v int) (out github.com/goplus/gop/builtin/ng.Uint128)\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType untyped int (1), int\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> AssignableConv untyped int github.com/goplus/gop/builtin/ng.Uint128 true\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> ASTFile \n[Go+ CI/Test]   | --- PASS: TestUint128Lit (0.00s)\n[Go+ CI/Test]   | === RUN   TestInt128Lit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Preload var [x]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Load var github.com/goplus/gop/builtin/ng.Int128 [x]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewVar [x]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 INT 1} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType untyped int (1), github.com/goplus/gop/builtin/ng.Int128\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall overloadFuncType{funcs: [func github.com/goplus/gop/builtin/ng.Int128_Init__0(v int) (out github.com/goplus/gop/builtin/ng.Int128) func github.com/goplus/gop/builtin/ng.Int128_Init__1(v github.com/goplus/gop/builtin/ng.UntypedBigint) (out github.com/goplus/gop/builtin/ng.Int128)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall func(v int) (out github.com/goplus/gop/builtin/ng.Int128)\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType untyped int (1), int\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> AssignableConv untyped int github.com/goplus/gop/builtin/ng.Int128 true\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> ASTFile \n[Go+ CI/Test]   | --- PASS: TestInt128Lit (0.00s)\n[Go+ CI/Test]   | === RUN   TestBigRatLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Preload var [x]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Load var <nil> [x]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewVar [x]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 INT 1} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val NewInt func(x int64) *math/big.Int\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 INT 2} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Call 1 0 // func(x int64) *math/big.Int\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall func(x int64) *math/big.Int\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType untyped int (2), int64\n[Go+ CI/Test]   | 2023/05/30 11:34:02 BinaryOp /\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall overloadFuncType{funcs: [func Gop_Quo(a TemplateParamType{name: T}, b TemplateParamType{name: T}) TemplateParamType{name: T} func Gop_Quo(a github.com/goplus/gop/builtin/ng.UntypedBigint, b github.com/goplus/gop/builtin/ng.UntypedBigint) github.com/goplus/gop/builtin/ng.UntypedBigrat]}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall func(a TemplateParamType{name: T}, b TemplateParamType{name: T}) TemplateParamType{name: T}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType untyped int (1), unboundFuncParam{typ: <nil>}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType github.com/goplus/gop/builtin/ng.UntypedBigint (2), unboundFuncParam{typ: untyped int}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> EnsureLoaded github.com/goplus/gop/builtin/ng.UntypedBigint\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> EnsureLoaded github.com/goplus/gop/builtin/ng.UntypedBigint\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> AssignableConv untyped int github.com/goplus/gop/builtin/ng.UntypedBigint true\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val NewRat func(a int64, b int64) *math/big.Rat\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 INT 1} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 INT 2} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Call 2 0 // func(a int64, b int64) *math/big.Rat\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall func(a int64, b int64) *math/big.Rat\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType untyped int (1), int64\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType untyped int (2), int64\n[Go+ CI/Test]   | 2023/05/30 11:34:02 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall overloadFuncType{funcs: [func github.com/goplus/gop/builtin/ng.Bigrat_Init__0(x int) github.com/goplus/gop/builtin/ng.Bigrat func github.com/goplus/gop/builtin/ng.Bigrat_Init__1(x github.com/goplus/gop/builtin/ng.UntypedBigint) github.com/goplus/gop/builtin/ng.Bigrat func github.com/goplus/gop/builtin/ng.Bigrat_Init__2(x *math/big.Rat) github.com/goplus/gop/builtin/ng.Bigrat]}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall func(x int) github.com/goplus/gop/builtin/ng.Bigrat\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType github.com/goplus/gop/builtin/ng.UntypedBigrat, int\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> EnsureLoaded github.com/goplus/gop/builtin/ng.UntypedBigrat\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall func(x github.com/goplus/gop/builtin/ng.UntypedBigint) github.com/goplus/gop/builtin/ng.Bigrat\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType github.com/goplus/gop/builtin/ng.UntypedBigrat, github.com/goplus/gop/builtin/ng.UntypedBigint\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> EnsureLoaded github.com/goplus/gop/builtin/ng.UntypedBigrat\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> EnsureLoaded github.com/goplus/gop/builtin/ng.UntypedBigint\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall overloadFuncType{funcs: [func github.com/goplus/gop/builtin/ng.UntypedBigint_Init__0(x int) github.com/goplus/gop/builtin/ng.UntypedBigint]}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall func(x int) github.com/goplus/gop/builtin/ng.UntypedBigint\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType github.com/goplus/gop/builtin/ng.UntypedBigrat, int\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> EnsureLoaded github.com/goplus/gop/builtin/ng.UntypedBigrat\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> AssignableConv github.com/goplus/gop/builtin/ng.UntypedBigrat github.com/goplus/gop/builtin/ng.UntypedBigint false\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall func(x *math/big.Rat) github.com/goplus/gop/builtin/ng.Bigrat\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType github.com/goplus/gop/builtin/ng.UntypedBigrat, *math/big.Rat\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> EnsureLoaded github.com/goplus/gop/builtin/ng.UntypedBigrat\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> DefaultConv github.com/goplus/gop/builtin/ng.UntypedBigrat github.com/goplus/gop/builtin/ng.Bigrat\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> ASTFile \n[Go+ CI/Test]   | --- PASS: TestBigRatLit (0.00s)\n[Go+ CI/Test]   | === RUN   TestBigRatLitAdd\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Preload var [x]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Load var <nil> [x]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewVar [x]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 INT 3} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 INT 1} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val NewInt func(x int64) *math/big.Int\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 INT 2} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Call 1 0 // func(x int64) *math/big.Int\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall func(x int64) *math/big.Int\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType untyped int (2), int64\n[Go+ CI/Test]   | 2023/05/30 11:34:02 BinaryOp /\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall overloadFuncType{funcs: [func Gop_Quo(a TemplateParamType{name: T}, b TemplateParamType{name: T}) TemplateParamType{name: T} func Gop_Quo(a github.com/goplus/gop/builtin/ng.UntypedBigint, b github.com/goplus/gop/builtin/ng.UntypedBigint) github.com/goplus/gop/builtin/ng.UntypedBigrat]}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall func(a TemplateParamType{name: T}, b TemplateParamType{name: T}) TemplateParamType{name: T}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType untyped int (1), unboundFuncParam{typ: <nil>}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType github.com/goplus/gop/builtin/ng.UntypedBigint (2), unboundFuncParam{typ: untyped int}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> EnsureLoaded github.com/goplus/gop/builtin/ng.UntypedBigint\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> EnsureLoaded github.com/goplus/gop/builtin/ng.UntypedBigint\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> AssignableConv untyped int github.com/goplus/gop/builtin/ng.UntypedBigint true\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val NewRat func(a int64, b int64) *math/big.Rat\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 INT 1} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 INT 2} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Call 2 0 // func(a int64, b int64) *math/big.Rat\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall func(a int64, b int64) *math/big.Rat\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType untyped int (1), int64\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType untyped int (2), int64\n[Go+ CI/Test]   | 2023/05/30 11:34:02 BinaryOp +\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall func(a TemplateParamType{name: T}, b TemplateParamType{name: T}) TemplateParamType{name: T}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType untyped int (3), unboundFuncParam{typ: <nil>}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType github.com/goplus/gop/builtin/ng.UntypedBigrat (0.5), unboundFuncParam{typ: untyped int}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> EnsureLoaded github.com/goplus/gop/builtin/ng.UntypedBigrat\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> EnsureLoaded github.com/goplus/gop/builtin/ng.UntypedBigrat\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> AssignableConv untyped int github.com/goplus/gop/builtin/ng.UntypedBigrat true\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val NewRat func(a int64, b int64) *math/big.Rat\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 INT 7} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 INT 2} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Call 2 0 // func(a int64, b int64) *math/big.Rat\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall func(a int64, b int64) *math/big.Rat\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType untyped int (7), int64\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType untyped int (2), int64\n[Go+ CI/Test]   | 2023/05/30 11:34:02 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall overloadFuncType{funcs: [func github.com/goplus/gop/builtin/ng.Bigrat_Init__0(x int) github.com/goplus/gop/builtin/ng.Bigrat func github.com/goplus/gop/builtin/ng.Bigrat_Init__1(x github.com/goplus/gop/builtin/ng.UntypedBigint) github.com/goplus/gop/builtin/ng.Bigrat func github.com/goplus/gop/builtin/ng.Bigrat_Init__2(x *math/big.Rat) github.com/goplus/gop/builtin/ng.Bigrat]}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall func(x int) github.com/goplus/gop/builtin/ng.Bigrat\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType github.com/goplus/gop/builtin/ng.UntypedBigrat, int\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> EnsureLoaded github.com/goplus/gop/builtin/ng.UntypedBigrat\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall func(x github.com/goplus/gop/builtin/ng.UntypedBigint) github.com/goplus/gop/builtin/ng.Bigrat\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType github.com/goplus/gop/builtin/ng.UntypedBigrat, github.com/goplus/gop/builtin/ng.UntypedBigint\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> EnsureLoaded github.com/goplus/gop/builtin/ng.UntypedBigrat\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> EnsureLoaded github.com/goplus/gop/builtin/ng.UntypedBigint\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall overloadFuncType{funcs: [func github.com/goplus/gop/builtin/ng.UntypedBigint_Init__0(x int) github.com/goplus/gop/builtin/ng.UntypedBigint]}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall func(x int) github.com/goplus/gop/builtin/ng.UntypedBigint\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType github.com/goplus/gop/builtin/ng.UntypedBigrat, int\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> EnsureLoaded github.com/goplus/gop/builtin/ng.UntypedBigrat\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> AssignableConv github.com/goplus/gop/builtin/ng.UntypedBigrat github.com/goplus/gop/builtin/ng.UntypedBigint false\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall func(x *math/big.Rat) github.com/goplus/gop/builtin/ng.Bigrat\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType github.com/goplus/gop/builtin/ng.UntypedBigrat, *math/big.Rat\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> EnsureLoaded github.com/goplus/gop/builtin/ng.UntypedBigrat\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> DefaultConv github.com/goplus/gop/builtin/ng.UntypedBigrat github.com/goplus/gop/builtin/ng.Bigrat\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> ASTFile \n[Go+ CI/Test]   | --- PASS: TestBigRatLitAdd (0.00s)\n[Go+ CI/Test]   | === RUN   TestBigRatAdd\n[Go+ CI/Test]   | 2023/05/30 11:34:02 SetDebug: import=true, match=true, instr=true\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Preload var [x]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Preload var [y]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Preload var [z]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Load var <nil> [x]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewVar [x]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 INT 3} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 INT 1} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val NewInt func(x int64) *math/big.Int\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 INT 2} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Call 1 0 // func(x int64) *math/big.Int\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall func(x int64) *math/big.Int\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType untyped int (2), int64\n[Go+ CI/Test]   | 2023/05/30 11:34:02 BinaryOp /\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall overloadFuncType{funcs: [func Gop_Quo(a TemplateParamType{name: T}, b TemplateParamType{name: T}) TemplateParamType{name: T} func Gop_Quo(a github.com/goplus/gop/builtin/ng.UntypedBigint, b github.com/goplus/gop/builtin/ng.UntypedBigint) github.com/goplus/gop/builtin/ng.UntypedBigrat]}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall func(a TemplateParamType{name: T}, b TemplateParamType{name: T}) TemplateParamType{name: T}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType untyped int (1), unboundFuncParam{typ: <nil>}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType github.com/goplus/gop/builtin/ng.UntypedBigint (2), unboundFuncParam{typ: untyped int}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> EnsureLoaded github.com/goplus/gop/builtin/ng.UntypedBigint\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> EnsureLoaded github.com/goplus/gop/builtin/ng.UntypedBigint\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> AssignableConv untyped int github.com/goplus/gop/builtin/ng.UntypedBigint true\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val NewRat func(a int64, b int64) *math/big.Rat\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 INT 1} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 INT 2} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Call 2 0 // func(a int64, b int64) *math/big.Rat\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall func(a int64, b int64) *math/big.Rat\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType untyped int (1), int64\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType untyped int (2), int64\n[Go+ CI/Test]   | 2023/05/30 11:34:02 BinaryOp +\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall func(a TemplateParamType{name: T}, b TemplateParamType{name: T}) TemplateParamType{name: T}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType untyped int (3), unboundFuncParam{typ: <nil>}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType github.com/goplus/gop/builtin/ng.UntypedBigrat (0.5), unboundFuncParam{typ: untyped int}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> EnsureLoaded github.com/goplus/gop/builtin/ng.UntypedBigrat\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> EnsureLoaded github.com/goplus/gop/builtin/ng.UntypedBigrat\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> AssignableConv untyped int github.com/goplus/gop/builtin/ng.UntypedBigrat true\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val NewRat func(a int64, b int64) *math/big.Rat\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 INT 7} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 INT 2} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Call 2 0 // func(a int64, b int64) *math/big.Rat\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall func(a int64, b int64) *math/big.Rat\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType untyped int (7), int64\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType untyped int (2), int64\n[Go+ CI/Test]   | 2023/05/30 11:34:02 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall overloadFuncType{funcs: [func github.com/goplus/gop/builtin/ng.Bigrat_Init__0(x int) github.com/goplus/gop/builtin/ng.Bigrat func github.com/goplus/gop/builtin/ng.Bigrat_Init__1(x github.com/goplus/gop/builtin/ng.UntypedBigint) github.com/goplus/gop/builtin/ng.Bigrat func github.com/goplus/gop/builtin/ng.Bigrat_Init__2(x *math/big.Rat) github.com/goplus/gop/builtin/ng.Bigrat]}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall func(x int) github.com/goplus/gop/builtin/ng.Bigrat\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType github.com/goplus/gop/builtin/ng.UntypedBigrat, int\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> EnsureLoaded github.com/goplus/gop/builtin/ng.UntypedBigrat\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall func(x github.com/goplus/gop/builtin/ng.UntypedBigint) github.com/goplus/gop/builtin/ng.Bigrat\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType github.com/goplus/gop/builtin/ng.UntypedBigrat, github.com/goplus/gop/builtin/ng.UntypedBigint\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> EnsureLoaded github.com/goplus/gop/builtin/ng.UntypedBigrat\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> EnsureLoaded github.com/goplus/gop/builtin/ng.UntypedBigint\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall overloadFuncType{funcs: [func github.com/goplus/gop/builtin/ng.UntypedBigint_Init__0(x int) github.com/goplus/gop/builtin/ng.UntypedBigint]}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall func(x int) github.com/goplus/gop/builtin/ng.UntypedBigint\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType github.com/goplus/gop/builtin/ng.UntypedBigrat, int\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> EnsureLoaded github.com/goplus/gop/builtin/ng.UntypedBigrat\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> AssignableConv github.com/goplus/gop/builtin/ng.UntypedBigrat github.com/goplus/gop/builtin/ng.UntypedBigint false\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall func(x *math/big.Rat) github.com/goplus/gop/builtin/ng.Bigrat\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType github.com/goplus/gop/builtin/ng.UntypedBigrat, *math/big.Rat\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> EnsureLoaded github.com/goplus/gop/builtin/ng.UntypedBigrat\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> DefaultConv github.com/goplus/gop/builtin/ng.UntypedBigrat github.com/goplus/gop/builtin/ng.Bigrat\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Load var <nil> [y]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewVar [y]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val x github.com/goplus/gop/builtin/ng.Bigrat\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 INT 100} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 BinaryOp +\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall func(b github.com/goplus/gop/builtin/ng.Bigrat) github.com/goplus/gop/builtin/ng.Bigrat\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType github.com/goplus/gop/builtin/ng.Bigrat, github.com/goplus/gop/builtin/ng.Bigrat\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType untyped int (100), github.com/goplus/gop/builtin/ng.Bigrat\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall overloadFuncType{funcs: [func github.com/goplus/gop/builtin/ng.Bigrat_Init__0(x int) github.com/goplus/gop/builtin/ng.Bigrat func github.com/goplus/gop/builtin/ng.Bigrat_Init__1(x github.com/goplus/gop/builtin/ng.UntypedBigint) github.com/goplus/gop/builtin/ng.Bigrat func github.com/goplus/gop/builtin/ng.Bigrat_Init__2(x *math/big.Rat) github.com/goplus/gop/builtin/ng.Bigrat]}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall func(x int) github.com/goplus/gop/builtin/ng.Bigrat\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType untyped int (100), int\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> AssignableConv untyped int github.com/goplus/gop/builtin/ng.Bigrat true\n[Go+ CI/Test]   | 2023/05/30 11:34:02 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Load var <nil> [z]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewVar [z]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 INT 100} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val y github.com/goplus/gop/builtin/ng.Bigrat\n[Go+ CI/Test]   | 2023/05/30 11:34:02 BinaryOp +\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall func(a TemplateParamType{name: T}, b TemplateParamType{name: T}) TemplateParamType{name: T}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType untyped int (100), unboundFuncParam{typ: <nil>}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType github.com/goplus/gop/builtin/ng.Bigrat, unboundFuncParam{typ: untyped int}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall overloadFuncType{funcs: [func github.com/goplus/gop/builtin/ng.Bigrat_Init__0(x int) github.com/goplus/gop/builtin/ng.Bigrat func github.com/goplus/gop/builtin/ng.Bigrat_Init__1(x github.com/goplus/gop/builtin/ng.UntypedBigint) github.com/goplus/gop/builtin/ng.Bigrat func github.com/goplus/gop/builtin/ng.Bigrat_Init__2(x *math/big.Rat) github.com/goplus/gop/builtin/ng.Bigrat]}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall func(x int) github.com/goplus/gop/builtin/ng.Bigrat\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType untyped int (100), int\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> AssignableConv untyped int github.com/goplus/gop/builtin/ng.Bigrat true\n[Go+ CI/Test]   | 2023/05/30 11:34:02 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> ASTFile \n[Go+ CI/Test]   | --- PASS: TestBigRatAdd (0.00s)\n[Go+ CI/Test]   | === RUN   TestTypeConv\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Preload var [a]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Preload var [b]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Preload var [c]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Preload var [x]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Preload var [y]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Load var <nil> [a]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewVar [a]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Typ struct{}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Star\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val nil untyped nil\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Call 1 0 // TypeType{typ: *struct{}}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall TypeType{typ: *struct{}}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Load var <nil> [b]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewVar [b]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Typ interface{}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val nil untyped nil\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Call 1 0 // TypeType{typ: interface{}}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall TypeType{typ: interface{}}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Load var <nil> [c]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewVar [c]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Typ func()\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val nil untyped nil\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Call 1 0 // TypeType{typ: func()}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall TypeType{typ: func()}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Load var uint32 [x]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewVar [x]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val uint32 uint32\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 INT 0} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Call 1 0 // TypeType{typ: uint32}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall TypeType{typ: uint32}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType uint32 (0), uint32\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Load var *uint32 [y]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewVar [y]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val uint32 uint32\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Star\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val nil untyped nil\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Call 1 0 // TypeType{typ: *uint32}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall TypeType{typ: *uint32}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType *uint32, *uint32\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> ASTFile \n[Go+ CI/Test]   | --- PASS: TestTypeConv (0.00s)\n[Go+ CI/Test]   | === RUN   TestStar\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Preload var [x]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Preload var [y]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Load var *uint32 [x]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewVar [x]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val uint32 uint32\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Star\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val nil untyped nil\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Call 1 0 // TypeType{typ: *uint32}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall TypeType{typ: *uint32}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType *uint32, *uint32\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Load var uint32 [y]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewVar [y]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val x *uint32\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Star\n[Go+ CI/Test]   | 2023/05/30 11:34:02 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType uint32, uint32\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> ASTFile \n[Go+ CI/Test]   | --- PASS: TestStar (0.00s)\n[Go+ CI/Test]   | === RUN   TestSend\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Preload var [x]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Preload func main\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Load var chan bool [x]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewVar [x]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Load func main\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewFunc main func()\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val x chan bool\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val true untyped bool\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Send\n[Go+ CI/Test]   | 2023/05/30 11:34:02 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> ASTFile \n[Go+ CI/Test]   | --- PASS: TestSend (0.00s)\n[Go+ CI/Test]   | === RUN   TestIncDec\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Preload var [x]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Preload func main\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Load var uint32 [x]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewVar [x]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Load func main\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewFunc main func()\n[Go+ CI/Test]   | 2023/05/30 11:34:02 VarRef x uint32\n[Go+ CI/Test]   | 2023/05/30 11:34:02 IncDec ++\n[Go+ CI/Test]   | 2023/05/30 11:34:02 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> ASTFile \n[Go+ CI/Test]   | --- PASS: TestIncDec (0.00s)\n[Go+ CI/Test]   | === RUN   TestAssignOp\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Preload var [x]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Preload func main\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Load var uint32 [x]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewVar [x]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Load func main\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewFunc main func()\n[Go+ CI/Test]   | 2023/05/30 11:34:02 VarRef x uint32\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 INT 3} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 AssignOp += Gop_AddAssign\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall func(a unboundProxyParam{typ: *TemplateParamType{name: T}}, b TemplateParamType{name: T})\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType refType{typ: uint32}, unboundProxyParam{typ: *unboundFuncParam{typ: <nil>}}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType untyped int (3), unboundFuncParam{typ: uint32}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> ASTFile \n[Go+ CI/Test]   | --- PASS: TestAssignOp (0.00s)\n[Go+ CI/Test]   | === RUN   TestBigIntAssignOp\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Preload var [x]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Preload func main\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Load var github.com/goplus/gop/builtin/ng.Bigint [x]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewVar [x]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Load func main\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewFunc main func()\n[Go+ CI/Test]   | 2023/05/30 11:34:02 VarRef x github.com/goplus/gop/builtin/ng.Bigint\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 INT 3} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 AssignOp += Gop_AddAssign\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall func(b github.com/goplus/gop/builtin/ng.Bigint)\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType refType{typ: github.com/goplus/gop/builtin/ng.Bigint}, github.com/goplus/gop/builtin/ng.Bigint\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType untyped int (3), github.com/goplus/gop/builtin/ng.Bigint\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall overloadFuncType{funcs: [func github.com/goplus/gop/builtin/ng.Bigint_Init__0(x int) github.com/goplus/gop/builtin/ng.Bigint func github.com/goplus/gop/builtin/ng.Bigint_Init__1(x github.com/goplus/gop/builtin/ng.UntypedBigint) github.com/goplus/gop/builtin/ng.Bigint func github.com/goplus/gop/builtin/ng.Bigint_Init__2(x *math/big.Int) github.com/goplus/gop/builtin/ng.Bigint]}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall func(x int) github.com/goplus/gop/builtin/ng.Bigint\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType untyped int (3), int\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> AssignableConv untyped int github.com/goplus/gop/builtin/ng.Bigint true\n[Go+ CI/Test]   | 2023/05/30 11:34:02 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> ASTFile \n[Go+ CI/Test]   | --- PASS: TestBigIntAssignOp (0.00s)\n[Go+ CI/Test]   | === RUN   TestBigIntAssignOp2\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Preload func main\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Load func main\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewFunc main func()\n[Go+ CI/Test]   | 2023/05/30 11:34:02 DefineVarStart [x]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val NewInt func(x int64) *math/big.Int\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 INT 3} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Call 1 0 // func(x int64) *math/big.Int\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall func(x int64) *math/big.Int\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType untyped int (3), int64\n[Go+ CI/Test]   | 2023/05/30 11:34:02 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall overloadFuncType{funcs: [func github.com/goplus/gop/builtin/ng.Bigint_Init__0(x int) github.com/goplus/gop/builtin/ng.Bigint func github.com/goplus/gop/builtin/ng.Bigint_Init__1(x github.com/goplus/gop/builtin/ng.UntypedBigint) github.com/goplus/gop/builtin/ng.Bigint func github.com/goplus/gop/builtin/ng.Bigint_Init__2(x *math/big.Int) github.com/goplus/gop/builtin/ng.Bigint]}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall func(x int) github.com/goplus/gop/builtin/ng.Bigint\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType github.com/goplus/gop/builtin/ng.UntypedBigint, int\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> EnsureLoaded github.com/goplus/gop/builtin/ng.UntypedBigint\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall func(x github.com/goplus/gop/builtin/ng.UntypedBigint) github.com/goplus/gop/builtin/ng.Bigint\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType github.com/goplus/gop/builtin/ng.UntypedBigint, github.com/goplus/gop/builtin/ng.UntypedBigint\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> EnsureLoaded github.com/goplus/gop/builtin/ng.UntypedBigint\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> EnsureLoaded github.com/goplus/gop/builtin/ng.UntypedBigint\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> DefaultConv github.com/goplus/gop/builtin/ng.UntypedBigint github.com/goplus/gop/builtin/ng.Bigint\n[Go+ CI/Test]   | 2023/05/30 11:34:02 VarRef x github.com/goplus/gop/builtin/ng.Bigint\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 INT 2} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 AssignOp *= Gop_MulAssign\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall func(b github.com/goplus/gop/builtin/ng.Bigint)\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType refType{typ: github.com/goplus/gop/builtin/ng.Bigint}, github.com/goplus/gop/builtin/ng.Bigint\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType untyped int (2), github.com/goplus/gop/builtin/ng.Bigint\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall overloadFuncType{funcs: [func github.com/goplus/gop/builtin/ng.Bigint_Init__0(x int) github.com/goplus/gop/builtin/ng.Bigint func github.com/goplus/gop/builtin/ng.Bigint_Init__1(x github.com/goplus/gop/builtin/ng.UntypedBigint) github.com/goplus/gop/builtin/ng.Bigint func github.com/goplus/gop/builtin/ng.Bigint_Init__2(x *math/big.Int) github.com/goplus/gop/builtin/ng.Bigint]}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall func(x int) github.com/goplus/gop/builtin/ng.Bigint\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType untyped int (2), int\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> AssignableConv untyped int github.com/goplus/gop/builtin/ng.Bigint true\n[Go+ CI/Test]   | 2023/05/30 11:34:02 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> ASTFile \n[Go+ CI/Test]   | --- PASS: TestBigIntAssignOp2 (0.00s)\n[Go+ CI/Test]   | === RUN   TestBigIntAssignOp3\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Preload func main\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Load func main\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewFunc main func()\n[Go+ CI/Test]   | 2023/05/30 11:34:02 DefineVarStart [x]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val NewInt func(x int64) *math/big.Int\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 INT 3} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Call 1 0 // func(x int64) *math/big.Int\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall func(x int64) *math/big.Int\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType untyped int (3), int64\n[Go+ CI/Test]   | 2023/05/30 11:34:02 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall overloadFuncType{funcs: [func github.com/goplus/gop/builtin/ng.Bigint_Init__0(x int) github.com/goplus/gop/builtin/ng.Bigint func github.com/goplus/gop/builtin/ng.Bigint_Init__1(x github.com/goplus/gop/builtin/ng.UntypedBigint) github.com/goplus/gop/builtin/ng.Bigint func github.com/goplus/gop/builtin/ng.Bigint_Init__2(x *math/big.Int) github.com/goplus/gop/builtin/ng.Bigint]}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall func(x int) github.com/goplus/gop/builtin/ng.Bigint\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType github.com/goplus/gop/builtin/ng.UntypedBigint, int\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> EnsureLoaded github.com/goplus/gop/builtin/ng.UntypedBigint\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall func(x github.com/goplus/gop/builtin/ng.UntypedBigint) github.com/goplus/gop/builtin/ng.Bigint\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType github.com/goplus/gop/builtin/ng.UntypedBigint, github.com/goplus/gop/builtin/ng.UntypedBigint\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> EnsureLoaded github.com/goplus/gop/builtin/ng.UntypedBigint\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> EnsureLoaded github.com/goplus/gop/builtin/ng.UntypedBigint\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> DefaultConv github.com/goplus/gop/builtin/ng.UntypedBigint github.com/goplus/gop/builtin/ng.Bigint\n[Go+ CI/Test]   | 2023/05/30 11:34:02 VarRef x github.com/goplus/gop/builtin/ng.Bigint\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val NewInt func(x int64) *math/big.Int\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 INT 2} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Call 1 0 // func(x int64) *math/big.Int\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall func(x int64) *math/big.Int\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType untyped int (2), int64\n[Go+ CI/Test]   | 2023/05/30 11:34:02 AssignOp *= Gop_MulAssign\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall func(b github.com/goplus/gop/builtin/ng.Bigint)\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType refType{typ: github.com/goplus/gop/builtin/ng.Bigint}, github.com/goplus/gop/builtin/ng.Bigint\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType github.com/goplus/gop/builtin/ng.UntypedBigint (2), github.com/goplus/gop/builtin/ng.Bigint\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> EnsureLoaded github.com/goplus/gop/builtin/ng.UntypedBigint\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall overloadFuncType{funcs: [func github.com/goplus/gop/builtin/ng.Bigint_Init__0(x int) github.com/goplus/gop/builtin/ng.Bigint func github.com/goplus/gop/builtin/ng.Bigint_Init__1(x github.com/goplus/gop/builtin/ng.UntypedBigint) github.com/goplus/gop/builtin/ng.Bigint func github.com/goplus/gop/builtin/ng.Bigint_Init__2(x *math/big.Int) github.com/goplus/gop/builtin/ng.Bigint]}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall func(x int) github.com/goplus/gop/builtin/ng.Bigint\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType github.com/goplus/gop/builtin/ng.UntypedBigint (2), int\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> EnsureLoaded github.com/goplus/gop/builtin/ng.UntypedBigint\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall func(x github.com/goplus/gop/builtin/ng.UntypedBigint) github.com/goplus/gop/builtin/ng.Bigint\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType github.com/goplus/gop/builtin/ng.UntypedBigint (2), github.com/goplus/gop/builtin/ng.UntypedBigint\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> EnsureLoaded github.com/goplus/gop/builtin/ng.UntypedBigint\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> EnsureLoaded github.com/goplus/gop/builtin/ng.UntypedBigint\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> AssignableConv github.com/goplus/gop/builtin/ng.UntypedBigint github.com/goplus/gop/builtin/ng.Bigint true\n[Go+ CI/Test]   | 2023/05/30 11:34:02 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> ASTFile \n[Go+ CI/Test]   | --- PASS: TestBigIntAssignOp3 (0.00s)\n[Go+ CI/Test]   | === RUN   TestCompositeLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Preload func main\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Load func main\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewFunc main func()\n[Go+ CI/Test]   | 2023/05/30 11:34:02 DefineVarStart [x]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 INT 1} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 FLOAT 3.4} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 INT 5} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 SliceLit []float64 3 false\n[Go+ CI/Test]   | 2023/05/30 11:34:02 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:34:02 DefineVarStart [y]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 STRING \"Hello\"} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 INT 1} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 STRING \"Go+\"} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 INT 5} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 MapLit map[string]int 4\n[Go+ CI/Test]   | 2023/05/30 11:34:02 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:34:02 DefineVarStart [z]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 INT 1} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 INT 3} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 INT 5} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ArrayLit [-1]int 3 false\n[Go+ CI/Test]   | 2023/05/30 11:34:02 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:34:02 DefineVarStart [a]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 STRING \"Hello\"} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 INT 1} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 STRING \"Go+\"} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 FLOAT 5.1} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 MapLit <nil> 4\n[Go+ CI/Test]   | 2023/05/30 11:34:02 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:34:02 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> ASTFile \n[Go+ CI/Test]   | --- PASS: TestCompositeLit (0.00s)\n[Go+ CI/Test]   | === RUN   TestCompositeLit2\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Preload type foo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Preload func main\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Load > NewType foo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewType foo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Load > InitType foo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 InitType foo struct{A int}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Load func main\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewFunc main func()\n[Go+ CI/Test]   | 2023/05/30 11:34:02 DefineVarStart [x]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 INT 1} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 StructLit struct{a int} 1 false\n[Go+ CI/Test]   | 2023/05/30 11:34:02 UnaryOp & flags: 0\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall instructionType{instr: gox.addrInstr}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 INT 3} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 StructLit struct{a int} 1 false\n[Go+ CI/Test]   | 2023/05/30 11:34:02 UnaryOp & flags: 0\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall instructionType{instr: gox.addrInstr}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 INT 5} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 StructLit struct{a int} 1 false\n[Go+ CI/Test]   | 2023/05/30 11:34:02 UnaryOp & flags: 0\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall instructionType{instr: gox.addrInstr}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 SliceLit []*struct{a int} 3 false\n[Go+ CI/Test]   | 2023/05/30 11:34:02 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:34:02 DefineVarStart [y]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> LookupParent foo => type github.com/goplus/gop/cl.foo struct{A int}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 INT 1} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 StructLit github.com/goplus/gop/cl.foo 1 false\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 STRING \"Hi\"} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 StructLit struct{a string} 1 false\n[Go+ CI/Test]   | 2023/05/30 11:34:02 MapLit map[github.com/goplus/gop/cl.foo]struct{a string} 2\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> EnsureLoaded github.com/goplus/gop/cl.foo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> EnsureLoaded github.com/goplus/gop/cl.foo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:34:02 DefineVarStart [z]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> LookupParent foo => type github.com/goplus/gop/cl.foo struct{A int}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 INT 1} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 StructLit github.com/goplus/gop/cl.foo 1 false\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 INT 3} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 StructLit github.com/goplus/gop/cl.foo 1 false\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 INT 5} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 StructLit github.com/goplus/gop/cl.foo 1 false\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ArrayLit [-1]github.com/goplus/gop/cl.foo 3 false\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> EnsureLoaded github.com/goplus/gop/cl.foo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> EnsureLoaded github.com/goplus/gop/cl.foo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> EnsureLoaded github.com/goplus/gop/cl.foo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> EnsureLoaded github.com/goplus/gop/cl.foo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> EnsureLoaded github.com/goplus/gop/cl.foo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> EnsureLoaded github.com/goplus/gop/cl.foo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:34:02 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> ASTFile \n[Go+ CI/Test]   | --- PASS: TestCompositeLit2 (0.00s)\n[Go+ CI/Test]   | === RUN   TestCompositeLit3\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Preload type Config\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Preload func foo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Preload func bar\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Preload func main\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Load > NewType Config\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewType Config\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Load > InitType Config\n[Go+ CI/Test]   | 2023/05/30 11:34:02 InitType Config struct{A int}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Load func foo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> LookupParent Config => type github.com/goplus/gop/cl.Config struct{A int}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewFunc foo func(conf *github.com/goplus/gop/cl.Config)\n[Go+ CI/Test]   | 2023/05/30 11:34:02 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Load func bar\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> LookupParent Config => type github.com/goplus/gop/cl.Config struct{A int}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewFunc bar func(conf ...github.com/goplus/gop/cl.Config)\n[Go+ CI/Test]   | 2023/05/30 11:34:02 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Load func main\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewFunc main func()\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val foo func(conf *github.com/goplus/gop/cl.Config)\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val 0 int\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 INT 1} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 StructLit github.com/goplus/gop/cl.Config 2 true\n[Go+ CI/Test]   | 2023/05/30 11:34:02 UnaryOp & flags: 0\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall instructionType{instr: gox.addrInstr}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Call 1 0 // func(conf *github.com/goplus/gop/cl.Config)\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall func(conf *github.com/goplus/gop/cl.Config)\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType *github.com/goplus/gop/cl.Config, *github.com/goplus/gop/cl.Config\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> EnsureLoaded github.com/goplus/gop/cl.Config\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> EnsureLoaded github.com/goplus/gop/cl.Config\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val bar func(conf ...github.com/goplus/gop/cl.Config)\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val 0 int\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 INT 2} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 StructLit github.com/goplus/gop/cl.Config 2 true\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Call 1 0 // func(conf ...github.com/goplus/gop/cl.Config)\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall func(conf ...github.com/goplus/gop/cl.Config)\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType github.com/goplus/gop/cl.Config, github.com/goplus/gop/cl.Config\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> EnsureLoaded github.com/goplus/gop/cl.Config\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> EnsureLoaded github.com/goplus/gop/cl.Config\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val foo func(conf *github.com/goplus/gop/cl.Config)\n[Go+ CI/Test]   | 2023/05/30 11:34:02 StructLit github.com/goplus/gop/cl.Config 0 true\n[Go+ CI/Test]   | 2023/05/30 11:34:02 UnaryOp & flags: 0\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall instructionType{instr: gox.addrInstr}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Call 1 0 // func(conf *github.com/goplus/gop/cl.Config)\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall func(conf *github.com/goplus/gop/cl.Config)\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType *github.com/goplus/gop/cl.Config, *github.com/goplus/gop/cl.Config\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> EnsureLoaded github.com/goplus/gop/cl.Config\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> EnsureLoaded github.com/goplus/gop/cl.Config\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val bar func(conf ...github.com/goplus/gop/cl.Config)\n[Go+ CI/Test]   | 2023/05/30 11:34:02 StructLit github.com/goplus/gop/cl.Config 0 true\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Call 1 0 // func(conf ...github.com/goplus/gop/cl.Config)\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall func(conf ...github.com/goplus/gop/cl.Config)\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType github.com/goplus/gop/cl.Config, github.com/goplus/gop/cl.Config\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> EnsureLoaded github.com/goplus/gop/cl.Config\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> EnsureLoaded github.com/goplus/gop/cl.Config\n[Go+ CI/Test]   | 2023/05/30 11:34:02 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> ASTFile \n[Go+ CI/Test]   | --- PASS: TestCompositeLit3 (0.00s)\n[Go+ CI/Test]   | === RUN   TestCompositeLit4\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Preload type Result\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Preload func foo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Load > NewType Result\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewType Result\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Load > InitType Result\n[Go+ CI/Test]   | 2023/05/30 11:34:02 InitType Result struct{A int}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Load func foo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> LookupParent Result => type github.com/goplus/gop/cl.Result struct{A int}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewFunc foo func() *github.com/goplus/gop/cl.Result\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val 0 int\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 INT 1} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 StructLit github.com/goplus/gop/cl.Result 2 true\n[Go+ CI/Test]   | 2023/05/30 11:34:02 UnaryOp & flags: 0\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall instructionType{instr: gox.addrInstr}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Return 1\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType *github.com/goplus/gop/cl.Result, *github.com/goplus/gop/cl.Result\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> EnsureLoaded github.com/goplus/gop/cl.Result\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> EnsureLoaded github.com/goplus/gop/cl.Result\n[Go+ CI/Test]   | 2023/05/30 11:34:02 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> ASTFile \n[Go+ CI/Test]   | --- PASS: TestCompositeLit4 (0.00s)\n[Go+ CI/Test]   | === RUN   TestCompositeLit5\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Preload type mymap\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Preload var [x]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Preload var [y]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Preload var [z]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Load > NewType mymap\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewType mymap\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Load > InitType mymap\n[Go+ CI/Test]   | 2023/05/30 11:34:02 InitType mymap map[float64]string\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Load var <nil> [x]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewVar [x]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 INT 1} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 STRING \"hello\"} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 INT 2} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 STRING \"world\"} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 MapLit <nil> 4\n[Go+ CI/Test]   | 2023/05/30 11:34:02 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Load var map[float64]string [y]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewVar [y]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 INT 1} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 STRING \"hello\"} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 INT 2} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 STRING \"world\"} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 MapLit map[float64]string 4\n[Go+ CI/Test]   | 2023/05/30 11:34:02 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType map[float64]string, map[float64]string\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> LookupParent mymap => type github.com/goplus/gop/cl.mymap map[float64]string\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Load var github.com/goplus/gop/cl.mymap [z]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewVar [z]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 INT 1} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 STRING \"hello\"} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 INT 2} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 STRING \"world\"} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 MapLit github.com/goplus/gop/cl.mymap 4\n[Go+ CI/Test]   | 2023/05/30 11:34:02 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType github.com/goplus/gop/cl.mymap, github.com/goplus/gop/cl.mymap\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> EnsureLoaded github.com/goplus/gop/cl.mymap\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> EnsureLoaded github.com/goplus/gop/cl.mymap\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> ASTFile \n[Go+ CI/Test]   | --- PASS: TestCompositeLit5 (0.00s)\n[Go+ CI/Test]   | === RUN   TestSliceLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Preload func main\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Load func main\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewFunc main func()\n[Go+ CI/Test]   | 2023/05/30 11:34:02 DefineVarStart [x]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 INT 1} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 FLOAT 3.4} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 INT 5} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 SliceLit <nil> 3 false\n[Go+ CI/Test]   | 2023/05/30 11:34:02 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:34:02 DefineVarStart [y]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 INT 1} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 SliceLit <nil> 1 false\n[Go+ CI/Test]   | 2023/05/30 11:34:02 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:34:02 DefineVarStart [z]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 SliceLit <nil> 0 false\n[Go+ CI/Test]   | 2023/05/30 11:34:02 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:34:02 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> ASTFile \n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Preload type vector\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Preload var [x]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Preload var [y]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Preload var [z]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Load > NewType vector\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewType vector\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Load > InitType vector\n[Go+ CI/Test]   | 2023/05/30 11:34:02 InitType vector []float64\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Load var <nil> [x]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewVar [x]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 INT 1} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 INT 2} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 INT 3} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 SliceLit <nil> 3 false\n[Go+ CI/Test]   | 2023/05/30 11:34:02 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Load var []float64 [y]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewVar [y]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 INT 1} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 INT 2} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 INT 3} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 SliceLit []float64 3 false\n[Go+ CI/Test]   | 2023/05/30 11:34:02 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType []float64, []float64\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> LookupParent vector => type github.com/goplus/gop/cl.vector []float64\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Load var github.com/goplus/gop/cl.vector [z]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewVar [z]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 INT 1} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 INT 2} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 INT 3} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 SliceLit github.com/goplus/gop/cl.vector 3 false\n[Go+ CI/Test]   | 2023/05/30 11:34:02 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType github.com/goplus/gop/cl.vector, github.com/goplus/gop/cl.vector\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> EnsureLoaded github.com/goplus/gop/cl.vector\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> EnsureLoaded github.com/goplus/gop/cl.vector\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> ASTFile \n[Go+ CI/Test]   | --- PASS: TestSliceLit (0.00s)\n[Go+ CI/Test]   | === RUN   TestChan\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Preload func main\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Load func main\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewFunc main func()\n[Go+ CI/Test]   | 2023/05/30 11:34:02 DefineVarStart [a]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val make instructionType{instr: gox.makeInstr}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Typ chan int\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 INT 10} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Call 2 0 // instructionType{instr: gox.makeInstr}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall instructionType{instr: gox.makeInstr}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val a chan int\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 INT 3} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Send\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Load var int [b]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewVar [b]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val a chan int\n[Go+ CI/Test]   | 2023/05/30 11:34:02 UnaryOp <- flags: 0\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall instructionType{instr: gox.recvInstr}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType int, int\n[Go+ CI/Test]   | 2023/05/30 11:34:02 DefineVarStart [x ok]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val a chan int\n[Go+ CI/Test]   | 2023/05/30 11:34:02 UnaryOp <- flags: 2\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall instructionType{instr: gox.recvInstr}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:34:02 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> ASTFile \n[Go+ CI/Test]   | --- PASS: TestChan (0.00s)\n[Go+ CI/Test]   | === RUN   TestKeyValModeLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Preload func main\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Load func main\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewFunc main func()\n[Go+ CI/Test]   | 2023/05/30 11:34:02 DefineVarStart [a]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 None\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 INT 1} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 INT 3} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 FLOAT 3.4} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 None\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 INT 5} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ArrayLit [-1]float64 6 true\n[Go+ CI/Test]   | 2023/05/30 11:34:02 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:34:02 DefineVarStart [b]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 INT 2} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 FLOAT 1.2} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 None\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 INT 3} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 INT 6} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 FLOAT 4.5} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 SliceLit []float64 6 true\n[Go+ CI/Test]   | 2023/05/30 11:34:02 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:34:02 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> ASTFile \n[Go+ CI/Test]   | --- PASS: TestKeyValModeLit (0.00s)\n[Go+ CI/Test]   | === RUN   TestStructLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Preload type foo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Preload func main\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Load > NewType foo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewType foo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Load > InitType foo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 InitType foo struct{A int; B string \"tag1:123\"}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Load func main\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewFunc main func()\n[Go+ CI/Test]   | 2023/05/30 11:34:02 DefineVarStart [a]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 INT 1} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 STRING \"Hello\"} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 StructLit struct{A int; B string \"tag1:123\"} 2 false\n[Go+ CI/Test]   | 2023/05/30 11:34:02 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:34:02 DefineVarStart [b]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> LookupParent foo => type github.com/goplus/gop/cl.foo struct{A int; B string \"tag1:123\"}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 INT 1} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 STRING \"Hello\"} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 StructLit github.com/goplus/gop/cl.foo 2 false\n[Go+ CI/Test]   | 2023/05/30 11:34:02 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:34:02 DefineVarStart [c]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> LookupParent foo => type github.com/goplus/gop/cl.foo struct{A int; B string \"tag1:123\"}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val 1 int\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 STRING \"Hi\"} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 StructLit github.com/goplus/gop/cl.foo 2 true\n[Go+ CI/Test]   | 2023/05/30 11:34:02 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:34:02 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> ASTFile \n[Go+ CI/Test]   | --- PASS: TestStructLit (0.00s)\n[Go+ CI/Test]   | === RUN   TestStructType\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Preload type bar\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Preload type foo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Preload func main\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Load > AliasType bar\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Load > NewType foo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewType foo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Lookup (LoadSymbol) foo => type github.com/goplus/gop/cl.foo <nil>\n[Go+ CI/Test]   | 2023/05/30 11:34:02 AliasType bar github.com/goplus/gop/cl.foo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Load > InitType foo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> LookupParent bar => type github.com/goplus/gop/cl.bar = github.com/goplus/gop/cl.foo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 InitType foo struct{p *github.com/goplus/gop/cl.foo; A int; B string \"tag1:123\"}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Load func main\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewFunc main func()\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewType a\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> LookupParent a => type a <nil>\n[Go+ CI/Test]   | 2023/05/30 11:34:02 InitType a struct{p *github.com/goplus/gop/cl.a}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> LookupParent a => type a struct{p *github.com/goplus/gop/cl.a}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 AliasType b github.com/goplus/gop/cl.a\n[Go+ CI/Test]   | 2023/05/30 11:34:02 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> ASTFile \n[Go+ CI/Test]   | --- PASS: TestStructType (0.00s)\n[Go+ CI/Test]   | === RUN   TestDeferGo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Preload func main\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Load func main\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewFunc main func()\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val println overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 STRING \"Hi\"} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Call 1 0 // overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall func(a ...interface{}) (n int, err error)\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType untyped string (\"Hi\"), interface{}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Go\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val println overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 STRING \"Go+\"} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Call 1 0 // overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall func(a ...interface{}) (n int, err error)\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType untyped string (\"Go+\"), interface{}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Defer\n[Go+ CI/Test]   | 2023/05/30 11:34:02 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> ASTFile \n[Go+ CI/Test]   | --- PASS: TestDeferGo (0.00s)\n[Go+ CI/Test]   | === RUN   TestFor\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Preload func main\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Load func main\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewFunc main func()\n[Go+ CI/Test]   | 2023/05/30 11:34:02 DefineVarStart [a]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 INT 1} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 FLOAT 3.4} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 INT 5} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 SliceLit <nil> 3 false\n[Go+ CI/Test]   | 2023/05/30 11:34:02 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:34:02 For\n[Go+ CI/Test]   | 2023/05/30 11:34:02 DefineVarStart [i]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 INT 0} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val i int\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 INT 3} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 BinaryOp <\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall func(a TemplateParamType{name: T}, b TemplateParamType{name: T}) untyped bool\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType int, unboundFuncParam{typ: <nil>}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType untyped int (3), unboundFuncParam{typ: int}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Then\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val println overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val i int\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Call 1 0 // overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall func(a ...interface{}) (n int, err error)\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType int, interface{}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Post\n[Go+ CI/Test]   | 2023/05/30 11:34:02 VarRef i int\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val i int\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 INT 1} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 BinaryOp +\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall func(a TemplateParamType{name: T}, b TemplateParamType{name: T}) TemplateParamType{name: T}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType int, unboundFuncParam{typ: <nil>}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType untyped int (1), unboundFuncParam{typ: int}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Assign 1 1\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType int, int\n[Go+ CI/Test]   | 2023/05/30 11:34:02 End // For\n[Go+ CI/Test]   | 2023/05/30 11:34:02 For\n[Go+ CI/Test]   | 2023/05/30 11:34:02 None\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Then\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val println overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 STRING \"loop\"} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Call 1 0 // overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall func(a ...interface{}) (n int, err error)\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType untyped string (\"loop\"), interface{}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 End // For\n[Go+ CI/Test]   | 2023/05/30 11:34:02 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> ASTFile \n[Go+ CI/Test]   | --- PASS: TestFor (0.00s)\n[Go+ CI/Test]   | === RUN   TestRangeStmt\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Preload func main\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Load func main\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewFunc main func()\n[Go+ CI/Test]   | 2023/05/30 11:34:02 DefineVarStart [a]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 INT 1} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 FLOAT 3.4} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 INT 5} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 SliceLit <nil> 3 false\n[Go+ CI/Test]   | 2023/05/30 11:34:02 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ForRange [_ x]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val a []float64\n[Go+ CI/Test]   | 2023/05/30 11:34:02 RangeAssignThen\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val println overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val x float64\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Call 1 0 // overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall func(a ...interface{}) (n int, err error)\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType float64, interface{}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 End // ForRange\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ForRange [i x]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val a []float64\n[Go+ CI/Test]   | 2023/05/30 11:34:02 RangeAssignThen\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val println overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val i int\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val x float64\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Call 2 0 // overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall func(a ...interface{}) (n int, err error)\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType int, interface{}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType float64, interface{}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 End // ForRange\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Load var int [i]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewVar [i]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Load var float64 [x]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewVar [x]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ForRange []\n[Go+ CI/Test]   | 2023/05/30 11:34:02 VarRef _\n[Go+ CI/Test]   | 2023/05/30 11:34:02 VarRef x float64\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val a []float64\n[Go+ CI/Test]   | 2023/05/30 11:34:02 RangeAssignThen\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType float64, float64\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val println overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val i int\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val x float64\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Call 2 0 // overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall func(a ...interface{}) (n int, err error)\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType int, interface{}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType float64, interface{}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 End // ForRange\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ForRange []\n[Go+ CI/Test]   | 2023/05/30 11:34:02 VarRef i int\n[Go+ CI/Test]   | 2023/05/30 11:34:02 VarRef x float64\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val a []float64\n[Go+ CI/Test]   | 2023/05/30 11:34:02 RangeAssignThen\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType int, int\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType float64, float64\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val println overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val i int\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val x float64\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Call 2 0 // overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall func(a ...interface{}) (n int, err error)\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType int, interface{}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType float64, interface{}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 End // ForRange\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ForRange []\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val a []float64\n[Go+ CI/Test]   | 2023/05/30 11:34:02 RangeAssignThen\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val println overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 STRING \"Hi\"} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Call 1 0 // overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall func(a ...interface{}) (n int, err error)\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType untyped string (\"Hi\"), interface{}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 End // ForRange\n[Go+ CI/Test]   | 2023/05/30 11:34:02 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> ASTFile \n[Go+ CI/Test]   | --- PASS: TestRangeStmt (0.00s)\n[Go+ CI/Test]   | === RUN   TestRangeStmtUDT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Preload type foo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Preload method foo.Gop_Enum\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Preload func main\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Load > NewType foo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewType foo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Load > InitType foo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 InitType foo struct{}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> LookupParent foo => type github.com/goplus/gop/cl.foo struct{}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Load method *github.com/goplus/gop/cl.foo.Gop_Enum\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Load func main\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewFunc main func()\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ForRange [k v]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val new instructionType{instr: gox.newInstr}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val foo github.com/goplus/gop/cl.foo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Call 1 0 // instructionType{instr: gox.newInstr}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall instructionType{instr: gox.newInstr}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 RangeAssignThen\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val println overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val k int\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val v string\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Call 2 0 // overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall func(a ...interface{}) (n int, err error)\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType int, interface{}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType string, interface{}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 End // ForRange\n[Go+ CI/Test]   | 2023/05/30 11:34:02 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewFunc Gop_Enum (*github.com/goplus/gop/cl.foo) func(c func(key int, val string))\n[Go+ CI/Test]   | 2023/05/30 11:34:02 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> ASTFile \n[Go+ CI/Test]   | --- PASS: TestRangeStmtUDT (0.00s)\n[Go+ CI/Test]   | === RUN   TestForPhraseUDT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Preload type foo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Preload method foo.Gop_Enum\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Preload func main\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Load > NewType foo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewType foo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Load > InitType foo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 InitType foo struct{}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> LookupParent foo => type github.com/goplus/gop/cl.foo struct{}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Load method *github.com/goplus/gop/cl.foo.Gop_Enum\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Load func main\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewFunc main func()\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ForRange [_ v]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val new instructionType{instr: gox.newInstr}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val foo github.com/goplus/gop/cl.foo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Call 1 0 // instructionType{instr: gox.newInstr}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall instructionType{instr: gox.newInstr}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 RangeAssignThen\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val println overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val v string\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Call 1 0 // overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall func(a ...interface{}) (n int, err error)\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType string, interface{}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 End // ForRange\n[Go+ CI/Test]   | 2023/05/30 11:34:02 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewFunc Gop_Enum (*github.com/goplus/gop/cl.foo) func(c func(val string))\n[Go+ CI/Test]   | 2023/05/30 11:34:02 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> ASTFile \n[Go+ CI/Test]   | --- PASS: TestForPhraseUDT (0.00s)\n[Go+ CI/Test]   | === RUN   TestForPhraseUDT2\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Preload type fooIter\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Preload method fooIter.Next\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Preload type foo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Preload method foo.Gop_Enum\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Preload func main\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Load > NewType fooIter\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewType fooIter\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Load > InitType fooIter\n[Go+ CI/Test]   | 2023/05/30 11:34:02 InitType fooIter struct{}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> LookupParent fooIter => type github.com/goplus/gop/cl.fooIter struct{}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Load method github.com/goplus/gop/cl.fooIter.Next\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Load > NewType foo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewType foo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Load > InitType foo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 InitType foo struct{}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> LookupParent foo => type github.com/goplus/gop/cl.foo struct{}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Load method *github.com/goplus/gop/cl.foo.Gop_Enum\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> LookupParent fooIter => type github.com/goplus/gop/cl.fooIter struct{}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Load func main\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewFunc main func()\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ForRange [k v]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val new instructionType{instr: gox.newInstr}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val foo github.com/goplus/gop/cl.foo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Call 1 0 // instructionType{instr: gox.newInstr}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall instructionType{instr: gox.newInstr}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 RangeAssignThen\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val println overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val k string\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val v int\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Call 2 0 // overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall func(a ...interface{}) (n int, err error)\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType string, interface{}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType int, interface{}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 End // ForRange\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Member Gop_Enum 0 // *github.com/goplus/gop/cl.foo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Call 0 0 // func() github.com/goplus/gop/cl.fooIter\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall func() github.com/goplus/gop/cl.fooIter\n[Go+ CI/Test]   | 2023/05/30 11:34:02 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewFunc Next (github.com/goplus/gop/cl.fooIter) func() (key string, val int, ok bool)\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Return 0\n[Go+ CI/Test]   | 2023/05/30 11:34:02 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewFunc Gop_Enum (*github.com/goplus/gop/cl.foo) func() github.com/goplus/gop/cl.fooIter\n[Go+ CI/Test]   | 2023/05/30 11:34:02 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> ASTFile \n[Go+ CI/Test]   | --- PASS: TestForPhraseUDT2 (0.00s)\n[Go+ CI/Test]   | === RUN   TestForPhraseUDT3\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Preload type foo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Preload method foo.Gop_Enum\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Preload func main\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Load > NewType foo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewType foo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Load > InitType foo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 InitType foo struct{}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> LookupParent foo => type github.com/goplus/gop/cl.foo struct{}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Load method *github.com/goplus/gop/cl.foo.Gop_Enum\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Load func main\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewFunc main func()\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val println overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewClosure func() (_gop_ret unboundType{typ: <nil>})\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ForRange [_ v]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val new instructionType{instr: gox.newInstr}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val foo github.com/goplus/gop/cl.foo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Call 1 0 // instructionType{instr: gox.newInstr}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall instructionType{instr: gox.newInstr}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 RangeAssignThen\n[Go+ CI/Test]   | 2023/05/30 11:34:02 VarRef _gop_ret unboundType{typ: <nil>}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val append overloadFuncType{funcs: [type append = instructionType{instr: gox.appendStringInstr} func append(slice []TemplateParamType{name: Type}, elems ...TemplateParamType{name: Type}) []TemplateParamType{name: Type}]}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val _gop_ret unboundType{typ: <nil>}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val v string\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Call 2 0 // overloadFuncType{funcs: [type append = instructionType{instr: gox.appendStringInstr} func append(slice []TemplateParamType{name: Type}, elems ...TemplateParamType{name: Type}) []TemplateParamType{name: Type}]}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall overloadFuncType{funcs: [type append = instructionType{instr: gox.appendStringInstr} func append(slice []TemplateParamType{name: Type}, elems ...TemplateParamType{name: Type}) []TemplateParamType{name: Type}]}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall instructionType{instr: gox.appendStringInstr}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall func(slice []TemplateParamType{name: Type}, elems ...TemplateParamType{name: Type}) []TemplateParamType{name: Type}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType unboundType{typ: <nil>}, []unboundFuncParam{typ: <nil>}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType string, unboundFuncParam{typ: <nil>}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Assign 1 1\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType []string, unboundType{typ: <nil>}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 End // ForRange\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Return 0\n[Go+ CI/Test]   | 2023/05/30 11:34:02 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Call 0 0 // func() (_gop_ret []string)\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall func() (_gop_ret []string)\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Call 1 0 // overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall func(a ...interface{}) (n int, err error)\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType []string, interface{}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewFunc Gop_Enum (*github.com/goplus/gop/cl.foo) func(c func(val string))\n[Go+ CI/Test]   | 2023/05/30 11:34:02 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> ASTFile \n[Go+ CI/Test]   | --- PASS: TestForPhraseUDT3 (0.00s)\n[Go+ CI/Test]   | === RUN   TestForPhraseUDT4\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Preload type fooIter\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Preload method fooIter.Next\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Preload type foo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Preload func newFoo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Preload method foo.Gop_Enum\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Preload func main\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Load > NewType fooIter\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewType fooIter\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Load > InitType fooIter\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Load > NewType foo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewType foo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Lookup (LoadSymbol) foo => type github.com/goplus/gop/cl.foo <nil>\n[Go+ CI/Test]   | 2023/05/30 11:34:02 InitType fooIter struct{data *github.com/goplus/gop/cl.foo; idx int}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> LookupParent fooIter => type github.com/goplus/gop/cl.fooIter struct{data *github.com/goplus/gop/cl.foo; idx int}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Load method *github.com/goplus/gop/cl.fooIter.Next\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Load > InitType foo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 InitType foo struct{key []int; val []string}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> LookupParent foo => type github.com/goplus/gop/cl.foo struct{key []int; val []string}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Load method *github.com/goplus/gop/cl.foo.Gop_Enum\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> LookupParent fooIter => type github.com/goplus/gop/cl.fooIter struct{data *github.com/goplus/gop/cl.foo; idx int}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Load func newFoo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> LookupParent foo => type github.com/goplus/gop/cl.foo struct{key []int; val []string}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewFunc newFoo func() *github.com/goplus/gop/cl.foo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> LookupParent foo => type github.com/goplus/gop/cl.foo struct{key []int; val []string}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val 0 int\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 INT 3} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 INT 7} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 SliceLit <nil> 2 false\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val 1 int\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 STRING \"Hi\"} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 STRING \"Go+\"} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 SliceLit <nil> 2 false\n[Go+ CI/Test]   | 2023/05/30 11:34:02 StructLit github.com/goplus/gop/cl.foo 4 true\n[Go+ CI/Test]   | 2023/05/30 11:34:02 UnaryOp & flags: 0\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall instructionType{instr: gox.addrInstr}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Return 1\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType *github.com/goplus/gop/cl.foo, *github.com/goplus/gop/cl.foo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Load func main\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewFunc main func()\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ForRange [k v]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val newFoo func() *github.com/goplus/gop/cl.foo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Call 0 0 // func() *github.com/goplus/gop/cl.foo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall func() *github.com/goplus/gop/cl.foo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 RangeAssignThen\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val println overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val k int\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val v string\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Call 2 0 // overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall func(a ...interface{}) (n int, err error)\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType int, interface{}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType string, interface{}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 End // ForRange\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Member Gop_Enum 0 // *github.com/goplus/gop/cl.foo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Call 0 0 // func() *github.com/goplus/gop/cl.fooIter\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall func() *github.com/goplus/gop/cl.fooIter\n[Go+ CI/Test]   | 2023/05/30 11:34:02 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewFunc Next (*github.com/goplus/gop/cl.fooIter) func() (key int, val string, ok bool)\n[Go+ CI/Test]   | 2023/05/30 11:34:02 If\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val p *github.com/goplus/gop/cl.fooIter\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Member idx 2 // *github.com/goplus/gop/cl.fooIter\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val len instructionType{instr: gox.lenInstr}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val p *github.com/goplus/gop/cl.fooIter\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Member data 2 // *github.com/goplus/gop/cl.fooIter\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Member key 2 // *github.com/goplus/gop/cl.foo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Call 1 0 // instructionType{instr: gox.lenInstr}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall instructionType{instr: gox.lenInstr}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 BinaryOp <\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall func(a TemplateParamType{name: T}, b TemplateParamType{name: T}) untyped bool\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType int, unboundFuncParam{typ: <nil>}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType int, unboundFuncParam{typ: int}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Then\n[Go+ CI/Test]   | 2023/05/30 11:34:02 VarRef key int\n[Go+ CI/Test]   | 2023/05/30 11:34:02 VarRef val string\n[Go+ CI/Test]   | 2023/05/30 11:34:02 VarRef ok bool\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val p *github.com/goplus/gop/cl.fooIter\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Member data 2 // *github.com/goplus/gop/cl.fooIter\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Member key 2 // *github.com/goplus/gop/cl.foo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val p *github.com/goplus/gop/cl.fooIter\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Member idx 2 // *github.com/goplus/gop/cl.fooIter\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Index 1 false\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val p *github.com/goplus/gop/cl.fooIter\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Member data 2 // *github.com/goplus/gop/cl.fooIter\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Member val 2 // *github.com/goplus/gop/cl.foo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val p *github.com/goplus/gop/cl.fooIter\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Member idx 2 // *github.com/goplus/gop/cl.fooIter\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Index 1 false\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val true untyped bool\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Assign 3 3\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType int, int\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType string, string\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType untyped bool (true), bool\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val p *github.com/goplus/gop/cl.fooIter\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Member idx -1 // *github.com/goplus/gop/cl.fooIter\n[Go+ CI/Test]   | 2023/05/30 11:34:02 IncDec ++\n[Go+ CI/Test]   | 2023/05/30 11:34:02 End // If\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Return 0\n[Go+ CI/Test]   | 2023/05/30 11:34:02 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewFunc Gop_Enum (*github.com/goplus/gop/cl.foo) func() *github.com/goplus/gop/cl.fooIter\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> LookupParent fooIter => type github.com/goplus/gop/cl.fooIter struct{data *github.com/goplus/gop/cl.foo; idx int}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val 0 int\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val p *github.com/goplus/gop/cl.foo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 StructLit github.com/goplus/gop/cl.fooIter 2 true\n[Go+ CI/Test]   | 2023/05/30 11:34:02 UnaryOp & flags: 0\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall instructionType{instr: gox.addrInstr}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Return 1\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType *github.com/goplus/gop/cl.fooIter, *github.com/goplus/gop/cl.fooIter\n[Go+ CI/Test]   | 2023/05/30 11:34:02 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> ASTFile \n[Go+ CI/Test]   | --- PASS: TestForPhraseUDT4 (0.00s)\n[Go+ CI/Test]   | === RUN   TestForPhrase\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Preload func main\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Load func main\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewFunc main func()\n[Go+ CI/Test]   | 2023/05/30 11:34:02 DefineVarStart [sum]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 INT 0} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ForRange [_ x]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 INT 1} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 INT 3} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 INT 5} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 INT 7} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 INT 11} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 INT 13} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 INT 17} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 SliceLit <nil> 7 false\n[Go+ CI/Test]   | 2023/05/30 11:34:02 RangeAssignThen\n[Go+ CI/Test]   | 2023/05/30 11:34:02 If\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val x int\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 INT 3} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 BinaryOp >\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall func(a TemplateParamType{name: T}, b TemplateParamType{name: T}) untyped bool\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType int, unboundFuncParam{typ: <nil>}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType untyped int (3), unboundFuncParam{typ: int}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Then\n[Go+ CI/Test]   | 2023/05/30 11:34:02 VarRef sum int\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val sum int\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val x int\n[Go+ CI/Test]   | 2023/05/30 11:34:02 BinaryOp +\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall func(a TemplateParamType{name: T}, b TemplateParamType{name: T}) TemplateParamType{name: T}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType int, unboundFuncParam{typ: <nil>}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType int, unboundFuncParam{typ: int}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Assign 1 1\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType int, int\n[Go+ CI/Test]   | 2023/05/30 11:34:02 End // If\n[Go+ CI/Test]   | 2023/05/30 11:34:02 End // ForRange\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ForRange [i x]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 INT 1} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 INT 3} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 INT 5} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 INT 7} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 INT 11} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 INT 13} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 INT 17} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 SliceLit <nil> 7 false\n[Go+ CI/Test]   | 2023/05/30 11:34:02 RangeAssignThen\n[Go+ CI/Test]   | 2023/05/30 11:34:02 VarRef sum int\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val sum int\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val i int\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val x int\n[Go+ CI/Test]   | 2023/05/30 11:34:02 BinaryOp *\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall func(a TemplateParamType{name: T}, b TemplateParamType{name: T}) TemplateParamType{name: T}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType int, unboundFuncParam{typ: <nil>}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType int, unboundFuncParam{typ: int}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 BinaryOp +\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall func(a TemplateParamType{name: T}, b TemplateParamType{name: T}) TemplateParamType{name: T}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType int, unboundFuncParam{typ: <nil>}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType int, unboundFuncParam{typ: int}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Assign 1 1\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType int, int\n[Go+ CI/Test]   | 2023/05/30 11:34:02 End // ForRange\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val println overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 STRING \"sum(5,7,11,13,17):\"} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val sum int\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Call 2 0 // overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall func(a ...interface{}) (n int, err error)\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType untyped string (\"sum(5,7,11,13,17):\"), interface{}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType int, interface{}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> ASTFile \n[Go+ CI/Test]   | --- PASS: TestForPhrase (0.00s)\n[Go+ CI/Test]   | === RUN   TestMapComprehension\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Preload func main\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Load func main\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewFunc main func()\n[Go+ CI/Test]   | 2023/05/30 11:34:02 DefineVarStart [y]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewClosure func() (_gop_ret unboundType{typ: <nil>})\n[Go+ CI/Test]   | 2023/05/30 11:34:02 VarRef _gop_ret unboundType{typ: <nil>}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ZeroLit // unboundType{typ: <nil>}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Assign 1 1\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType unboundType{typ: <nil>}, unboundType{typ: <nil>}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ForRange [i x]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 STRING \"1\"} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 STRING \"3\"} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 STRING \"5\"} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 STRING \"7\"} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 STRING \"11\"} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 SliceLit <nil> 5 false\n[Go+ CI/Test]   | 2023/05/30 11:34:02 RangeAssignThen\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val _gop_ret unboundType{typ: <nil>}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val x string\n[Go+ CI/Test]   | 2023/05/30 11:34:02 IndexRef 1\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val i int\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Assign 1 1\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType int, unboundMapElemType{key: string}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 End // ForRange\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Return 0\n[Go+ CI/Test]   | 2023/05/30 11:34:02 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Call 0 0 // func() (_gop_ret map[string]int)\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall func() (_gop_ret map[string]int)\n[Go+ CI/Test]   | 2023/05/30 11:34:02 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:34:02 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> ASTFile \n[Go+ CI/Test]   | --- PASS: TestMapComprehension (0.00s)\n[Go+ CI/Test]   | === RUN   TestMapComprehensionCond\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Preload func main\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Load func main\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewFunc main func()\n[Go+ CI/Test]   | 2023/05/30 11:34:02 DefineVarStart [z]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewClosure func() (_gop_ret unboundType{typ: <nil>})\n[Go+ CI/Test]   | 2023/05/30 11:34:02 VarRef _gop_ret unboundType{typ: <nil>}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ZeroLit // unboundType{typ: <nil>}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Assign 1 1\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType unboundType{typ: <nil>}, unboundType{typ: <nil>}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ForRange [k v]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 STRING \"Hello\"} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 INT 1} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 STRING \"Hi\"} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 INT 3} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 STRING \"xsw\"} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 INT 5} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 STRING \"Go+\"} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 INT 7} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 MapLit <nil> 8\n[Go+ CI/Test]   | 2023/05/30 11:34:02 RangeAssignThen\n[Go+ CI/Test]   | 2023/05/30 11:34:02 If\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val v int\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 INT 3} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 BinaryOp >\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall func(a TemplateParamType{name: T}, b TemplateParamType{name: T}) untyped bool\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType int, unboundFuncParam{typ: <nil>}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType untyped int (3), unboundFuncParam{typ: int}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Then\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val _gop_ret unboundType{typ: <nil>}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val v int\n[Go+ CI/Test]   | 2023/05/30 11:34:02 IndexRef 1\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val k string\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Assign 1 1\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType string, unboundMapElemType{key: int}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 End // If\n[Go+ CI/Test]   | 2023/05/30 11:34:02 End // ForRange\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Return 0\n[Go+ CI/Test]   | 2023/05/30 11:34:02 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Call 0 0 // func() (_gop_ret map[int]string)\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall func() (_gop_ret map[int]string)\n[Go+ CI/Test]   | 2023/05/30 11:34:02 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:34:02 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> ASTFile \n[Go+ CI/Test]   | --- PASS: TestMapComprehensionCond (0.00s)\n[Go+ CI/Test]   | === RUN   TestMapComprehensionCond2\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Preload func main\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Load func main\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewFunc main func()\n[Go+ CI/Test]   | 2023/05/30 11:34:02 DefineVarStart [z]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewClosure func() (_gop_ret unboundType{typ: <nil>})\n[Go+ CI/Test]   | 2023/05/30 11:34:02 VarRef _gop_ret unboundType{typ: <nil>}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ZeroLit // unboundType{typ: <nil>}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Assign 1 1\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType unboundType{typ: <nil>}, unboundType{typ: <nil>}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ForRange [k v]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 STRING \"Hello\"} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 INT 1} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 STRING \"Hi\"} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 INT 3} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 STRING \"xsw\"} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 INT 5} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 STRING \"Go+\"} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 INT 7} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 MapLit <nil> 8\n[Go+ CI/Test]   | 2023/05/30 11:34:02 RangeAssignThen\n[Go+ CI/Test]   | 2023/05/30 11:34:02 If\n[Go+ CI/Test]   | 2023/05/30 11:34:02 DefineVarStart [t]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val v int\n[Go+ CI/Test]   | 2023/05/30 11:34:02 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val t int\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 INT 3} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 BinaryOp >\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall func(a TemplateParamType{name: T}, b TemplateParamType{name: T}) untyped bool\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType int, unboundFuncParam{typ: <nil>}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType untyped int (3), unboundFuncParam{typ: int}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Then\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val _gop_ret unboundType{typ: <nil>}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val t int\n[Go+ CI/Test]   | 2023/05/30 11:34:02 IndexRef 1\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val k string\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Assign 1 1\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType string, unboundMapElemType{key: int}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 End // If\n[Go+ CI/Test]   | 2023/05/30 11:34:02 End // ForRange\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Return 0\n[Go+ CI/Test]   | 2023/05/30 11:34:02 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Call 0 0 // func() (_gop_ret map[int]string)\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall func() (_gop_ret map[int]string)\n[Go+ CI/Test]   | 2023/05/30 11:34:02 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:34:02 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> ASTFile \n[Go+ CI/Test]   | --- PASS: TestMapComprehensionCond2 (0.00s)\n[Go+ CI/Test]   | === RUN   TestExistsComprehension\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Preload func main\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Load func main\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewFunc main func()\n[Go+ CI/Test]   | 2023/05/30 11:34:02 DefineVarStart [hasFive]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewClosure func() (_gop_ok bool)\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ForRange [_ x]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 STRING \"1\"} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 STRING \"3\"} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 STRING \"5\"} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 STRING \"7\"} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 STRING \"11\"} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 SliceLit <nil> 5 false\n[Go+ CI/Test]   | 2023/05/30 11:34:02 RangeAssignThen\n[Go+ CI/Test]   | 2023/05/30 11:34:02 If\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val x string\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 STRING \"5\"} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 BinaryOp ==\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Then\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val true bool\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Return 1\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType untyped bool (true), bool\n[Go+ CI/Test]   | 2023/05/30 11:34:02 End // If\n[Go+ CI/Test]   | 2023/05/30 11:34:02 End // ForRange\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Return 0\n[Go+ CI/Test]   | 2023/05/30 11:34:02 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Call 0 0 // func() (_gop_ok bool)\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall func() (_gop_ok bool)\n[Go+ CI/Test]   | 2023/05/30 11:34:02 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:34:02 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> ASTFile \n[Go+ CI/Test]   | --- PASS: TestExistsComprehension (0.00s)\n[Go+ CI/Test]   | === RUN   TestSelectComprehension\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Preload func main\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Load func main\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewFunc main func()\n[Go+ CI/Test]   | 2023/05/30 11:34:02 DefineVarStart [y]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewClosure func() (_gop_ret unboundType{typ: <nil>})\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ForRange [i x]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 STRING \"1\"} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 STRING \"3\"} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 STRING \"5\"} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 STRING \"7\"} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 STRING \"11\"} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 SliceLit <nil> 5 false\n[Go+ CI/Test]   | 2023/05/30 11:34:02 RangeAssignThen\n[Go+ CI/Test]   | 2023/05/30 11:34:02 If\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val x string\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 STRING \"5\"} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 BinaryOp ==\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Then\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val i int\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Return 1\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType int, unboundType{typ: <nil>}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 End // If\n[Go+ CI/Test]   | 2023/05/30 11:34:02 End // ForRange\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Return 0\n[Go+ CI/Test]   | 2023/05/30 11:34:02 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Call 0 0 // func() (_gop_ret int)\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall func() (_gop_ret int)\n[Go+ CI/Test]   | 2023/05/30 11:34:02 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:34:02 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> ASTFile \n[Go+ CI/Test]   | --- PASS: TestSelectComprehension (0.00s)\n[Go+ CI/Test]   | === RUN   TestSelectComprehensionTwoValue\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Preload func main\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Load func main\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewFunc main func()\n[Go+ CI/Test]   | 2023/05/30 11:34:02 DefineVarStart [y ok]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewClosure func() (_gop_ret unboundType{typ: <nil>}, _gop_ok bool)\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ForRange [i x]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 STRING \"1\"} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 STRING \"3\"} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 STRING \"5\"} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 STRING \"7\"} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 STRING \"11\"} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 SliceLit <nil> 5 false\n[Go+ CI/Test]   | 2023/05/30 11:34:02 RangeAssignThen\n[Go+ CI/Test]   | 2023/05/30 11:34:02 If\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val x string\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 STRING \"5\"} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 BinaryOp ==\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Then\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val i int\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val true bool\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Return 2\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType int, unboundType{typ: <nil>}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType untyped bool (true), bool\n[Go+ CI/Test]   | 2023/05/30 11:34:02 End // If\n[Go+ CI/Test]   | 2023/05/30 11:34:02 End // ForRange\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Return 0\n[Go+ CI/Test]   | 2023/05/30 11:34:02 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Call 0 0 // func() (_gop_ret int, _gop_ok bool)\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall func() (_gop_ret int, _gop_ok bool)\n[Go+ CI/Test]   | 2023/05/30 11:34:02 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:34:02 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> ASTFile \n[Go+ CI/Test]   | --- PASS: TestSelectComprehensionTwoValue (0.00s)\n[Go+ CI/Test]   | === RUN   TestSelectComprehensionRetTwoValue\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Preload func foo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Load func foo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewFunc foo func() (int, bool)\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewClosure func() (_gop_ret unboundType{typ: <nil>}, _gop_ok bool)\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ForRange [i x]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 STRING \"1\"} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 STRING \"3\"} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 STRING \"5\"} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 STRING \"7\"} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 STRING \"11\"} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 SliceLit <nil> 5 false\n[Go+ CI/Test]   | 2023/05/30 11:34:02 RangeAssignThen\n[Go+ CI/Test]   | 2023/05/30 11:34:02 If\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val x string\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 STRING \"5\"} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 BinaryOp ==\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Then\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val i int\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val true bool\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Return 2\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType int, unboundType{typ: <nil>}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType untyped bool (true), bool\n[Go+ CI/Test]   | 2023/05/30 11:34:02 End // If\n[Go+ CI/Test]   | 2023/05/30 11:34:02 End // ForRange\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Return 0\n[Go+ CI/Test]   | 2023/05/30 11:34:02 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Call 0 0 // func() (_gop_ret int, _gop_ok bool)\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall func() (_gop_ret int, _gop_ok bool)\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Return 1\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType int, int\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType bool, bool\n[Go+ CI/Test]   | 2023/05/30 11:34:02 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> ASTFile \n[Go+ CI/Test]   | --- PASS: TestSelectComprehensionRetTwoValue (0.00s)\n[Go+ CI/Test]   | === RUN   TestListComprehension\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Preload func main\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Load func main\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewFunc main func()\n[Go+ CI/Test]   | 2023/05/30 11:34:02 DefineVarStart [a]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 INT 1} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 FLOAT 3.4} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 INT 5} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 SliceLit <nil> 3 false\n[Go+ CI/Test]   | 2023/05/30 11:34:02 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:34:02 DefineVarStart [b]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewClosure func() (_gop_ret unboundType{typ: <nil>})\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ForRange [_ x]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val a []float64\n[Go+ CI/Test]   | 2023/05/30 11:34:02 RangeAssignThen\n[Go+ CI/Test]   | 2023/05/30 11:34:02 VarRef _gop_ret unboundType{typ: <nil>}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val append overloadFuncType{funcs: [type append = instructionType{instr: gox.appendStringInstr} func append(slice []TemplateParamType{name: Type}, elems ...TemplateParamType{name: Type}) []TemplateParamType{name: Type}]}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val _gop_ret unboundType{typ: <nil>}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val x float64\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val x float64\n[Go+ CI/Test]   | 2023/05/30 11:34:02 BinaryOp *\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall func(a TemplateParamType{name: T}, b TemplateParamType{name: T}) TemplateParamType{name: T}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType float64, unboundFuncParam{typ: <nil>}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType float64, unboundFuncParam{typ: float64}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Call 2 0 // overloadFuncType{funcs: [type append = instructionType{instr: gox.appendStringInstr} func append(slice []TemplateParamType{name: Type}, elems ...TemplateParamType{name: Type}) []TemplateParamType{name: Type}]}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall overloadFuncType{funcs: [type append = instructionType{instr: gox.appendStringInstr} func append(slice []TemplateParamType{name: Type}, elems ...TemplateParamType{name: Type}) []TemplateParamType{name: Type}]}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall instructionType{instr: gox.appendStringInstr}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall func(slice []TemplateParamType{name: Type}, elems ...TemplateParamType{name: Type}) []TemplateParamType{name: Type}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType unboundType{typ: <nil>}, []unboundFuncParam{typ: <nil>}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType float64, unboundFuncParam{typ: <nil>}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Assign 1 1\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType []float64, unboundType{typ: <nil>}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 End // ForRange\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Return 0\n[Go+ CI/Test]   | 2023/05/30 11:34:02 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Call 0 0 // func() (_gop_ret []float64)\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall func() (_gop_ret []float64)\n[Go+ CI/Test]   | 2023/05/30 11:34:02 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:34:02 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> ASTFile \n[Go+ CI/Test]   | --- PASS: TestListComprehension (0.00s)\n[Go+ CI/Test]   | === RUN   TestListComprehensionMultiLevel\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Preload func main\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Load func main\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewFunc main func()\n[Go+ CI/Test]   | 2023/05/30 11:34:02 DefineVarStart [arr]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 INT 1} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 INT 2} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 INT 3} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 FLOAT 4.1} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 INT 5} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 INT 6} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 SliceLit <nil> 6 false\n[Go+ CI/Test]   | 2023/05/30 11:34:02 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:34:02 DefineVarStart [x]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewClosure func() (_gop_ret unboundType{typ: <nil>})\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ForRange [_ b]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val arr []float64\n[Go+ CI/Test]   | 2023/05/30 11:34:02 RangeAssignThen\n[Go+ CI/Test]   | 2023/05/30 11:34:02 If\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val b float64\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 INT 2} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 BinaryOp >\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall func(a TemplateParamType{name: T}, b TemplateParamType{name: T}) untyped bool\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType float64, unboundFuncParam{typ: <nil>}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType untyped int (2), unboundFuncParam{typ: float64}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Then\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ForRange [_ a]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val arr []float64\n[Go+ CI/Test]   | 2023/05/30 11:34:02 RangeAssignThen\n[Go+ CI/Test]   | 2023/05/30 11:34:02 If\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val a float64\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val b float64\n[Go+ CI/Test]   | 2023/05/30 11:34:02 BinaryOp <\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall func(a TemplateParamType{name: T}, b TemplateParamType{name: T}) untyped bool\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType float64, unboundFuncParam{typ: <nil>}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType float64, unboundFuncParam{typ: float64}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Then\n[Go+ CI/Test]   | 2023/05/30 11:34:02 VarRef _gop_ret unboundType{typ: <nil>}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val append overloadFuncType{funcs: [type append = instructionType{instr: gox.appendStringInstr} func append(slice []TemplateParamType{name: Type}, elems ...TemplateParamType{name: Type}) []TemplateParamType{name: Type}]}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val _gop_ret unboundType{typ: <nil>}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val a float64\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val b float64\n[Go+ CI/Test]   | 2023/05/30 11:34:02 SliceLit <nil> 2 false\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Call 2 0 // overloadFuncType{funcs: [type append = instructionType{instr: gox.appendStringInstr} func append(slice []TemplateParamType{name: Type}, elems ...TemplateParamType{name: Type}) []TemplateParamType{name: Type}]}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall overloadFuncType{funcs: [type append = instructionType{instr: gox.appendStringInstr} func append(slice []TemplateParamType{name: Type}, elems ...TemplateParamType{name: Type}) []TemplateParamType{name: Type}]}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall instructionType{instr: gox.appendStringInstr}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall func(slice []TemplateParamType{name: Type}, elems ...TemplateParamType{name: Type}) []TemplateParamType{name: Type}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType unboundType{typ: <nil>}, []unboundFuncParam{typ: <nil>}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType []float64, unboundFuncParam{typ: <nil>}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Assign 1 1\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType [][]float64, unboundType{typ: <nil>}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 End // If\n[Go+ CI/Test]   | 2023/05/30 11:34:02 End // ForRange\n[Go+ CI/Test]   | 2023/05/30 11:34:02 End // If\n[Go+ CI/Test]   | 2023/05/30 11:34:02 End // ForRange\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Return 0\n[Go+ CI/Test]   | 2023/05/30 11:34:02 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Call 0 0 // func() (_gop_ret [][]float64)\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall func() (_gop_ret [][]float64)\n[Go+ CI/Test]   | 2023/05/30 11:34:02 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val println overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 STRING \"x:\"} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val x [][]float64\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Call 2 0 // overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall func(a ...interface{}) (n int, err error)\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType untyped string (\"x:\"), interface{}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType [][]float64, interface{}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> ASTFile \n[Go+ CI/Test]   | --- PASS: TestListComprehensionMultiLevel (0.00s)\n[Go+ CI/Test]   | === RUN   TestSliceGet\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Preload func main\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Load func main\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewFunc main func()\n[Go+ CI/Test]   | 2023/05/30 11:34:02 DefineVarStart [a]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 INT 1} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 INT 3} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 INT 5} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 INT 7} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 INT 9} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 SliceLit <nil> 5 false\n[Go+ CI/Test]   | 2023/05/30 11:34:02 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:34:02 DefineVarStart [b]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val a []int\n[Go+ CI/Test]   | 2023/05/30 11:34:02 None\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 INT 3} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Slice false\n[Go+ CI/Test]   | 2023/05/30 11:34:02 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:34:02 DefineVarStart [c]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val a []int\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 INT 1} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 None\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Slice false\n[Go+ CI/Test]   | 2023/05/30 11:34:02 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:34:02 DefineVarStart [d]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val a []int\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 INT 1} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 INT 2} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 INT 3} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Slice true\n[Go+ CI/Test]   | 2023/05/30 11:34:02 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:34:02 DefineVarStart [e]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 STRING \"Hello, Go+\"} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 INT 7} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 None\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Slice false\n[Go+ CI/Test]   | 2023/05/30 11:34:02 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:34:02 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> ASTFile \n[Go+ CI/Test]   | --- PASS: TestSliceGet (0.00s)\n[Go+ CI/Test]   | === RUN   TestIndexGetTwoValue\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Preload func main\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Load func main\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewFunc main func()\n[Go+ CI/Test]   | 2023/05/30 11:34:02 DefineVarStart [a]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 STRING \"Hello\"} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 INT 1} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 STRING \"Hi\"} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 INT 3} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 STRING \"xsw\"} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 INT 5} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 STRING \"Go+\"} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 INT 7} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 MapLit <nil> 8\n[Go+ CI/Test]   | 2023/05/30 11:34:02 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:34:02 DefineVarStart [x ok]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val a map[string]int\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 STRING \"Hi\"} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Index 1 true\n[Go+ CI/Test]   | 2023/05/30 11:34:02 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:34:02 DefineVarStart [y]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val a map[string]int\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 STRING \"Go+\"} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Index 1 false\n[Go+ CI/Test]   | 2023/05/30 11:34:02 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:34:02 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> ASTFile \n[Go+ CI/Test]   | --- PASS: TestIndexGetTwoValue (0.00s)\n[Go+ CI/Test]   | === RUN   TestIndexGet\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Preload func main\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Load func main\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewFunc main func()\n[Go+ CI/Test]   | 2023/05/30 11:34:02 DefineVarStart [a]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 INT 1} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 FLOAT 3.4} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 INT 5} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 SliceLit <nil> 3 false\n[Go+ CI/Test]   | 2023/05/30 11:34:02 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:34:02 DefineVarStart [b]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val a []float64\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 INT 1} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Index 1 false\n[Go+ CI/Test]   | 2023/05/30 11:34:02 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:34:02 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> ASTFile \n[Go+ CI/Test]   | --- PASS: TestIndexGet (0.00s)\n[Go+ CI/Test]   | === RUN   TestIndexRef\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Preload func main\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Load func main\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewFunc main func()\n[Go+ CI/Test]   | 2023/05/30 11:34:02 DefineVarStart [a]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 INT 1} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 FLOAT 3.4} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 INT 5} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 SliceLit <nil> 3 false\n[Go+ CI/Test]   | 2023/05/30 11:34:02 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val a []float64\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 INT 1} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 IndexRef 1\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 FLOAT 2.1} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Assign 1 1\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType untyped float (2.1), float64\n[Go+ CI/Test]   | 2023/05/30 11:34:02 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> ASTFile \n[Go+ CI/Test]   | --- PASS: TestIndexRef (0.00s)\n[Go+ CI/Test]   | === RUN   TestIndexArrayPtrIssue784\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Preload type intArr\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Preload func foo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Load > NewType intArr\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewType intArr\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Load > InitType intArr\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 INT 2} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 InitType intArr [2]int\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Load func foo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> LookupParent intArr => type github.com/goplus/gop/cl.intArr [2]int\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewFunc foo func(a *github.com/goplus/gop/cl.intArr)\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val a *github.com/goplus/gop/cl.intArr\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 INT 1} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 IndexRef 1\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 INT 10} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Assign 1 1\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType untyped int (10), int\n[Go+ CI/Test]   | 2023/05/30 11:34:02 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> ASTFile \n[Go+ CI/Test]   | --- PASS: TestIndexArrayPtrIssue784 (0.00s)\n[Go+ CI/Test]   | === RUN   TestMemberVal\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Preload func main\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Load func main\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewFunc main func()\n[Go+ CI/Test]   | 2023/05/30 11:34:02 DefineVarStart [x]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val NewReplacer func(oldnew ...string) *strings.Replacer\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 STRING \"?\"} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 STRING \"!\"} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Call 2 0 // func(oldnew ...string) *strings.Replacer\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall func(oldnew ...string) *strings.Replacer\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType untyped string (\"?\"), string\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType untyped string (\"!\"), string\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Member Replace 1 // *strings.Replacer\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 STRING \"hello, world???\"} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Call 1 0 // func(s string) string\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall func(s string) string\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType untyped string (\"hello, world???\"), string\n[Go+ CI/Test]   | 2023/05/30 11:34:02 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val println overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 STRING \"x:\"} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val x string\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Call 2 0 // overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall func(a ...interface{}) (n int, err error)\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType untyped string (\"x:\"), interface{}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType string, interface{}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> ASTFile \n[Go+ CI/Test]   | --- PASS: TestMemberVal (0.00s)\n[Go+ CI/Test]   | === RUN   TestNamedPtrMemberIssue786\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Preload type foo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Preload type pfoo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Preload func bar\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Load > NewType foo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewType foo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Load > InitType foo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 InitType foo struct{req int}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Load > NewType pfoo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewType pfoo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Load > InitType pfoo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> LookupParent foo => type github.com/goplus/gop/cl.foo struct{req int}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 InitType pfoo *github.com/goplus/gop/cl.foo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Load func bar\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> LookupParent pfoo => type github.com/goplus/gop/cl.pfoo *github.com/goplus/gop/cl.foo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewFunc bar func(p github.com/goplus/gop/cl.pfoo)\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val println overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val p github.com/goplus/gop/cl.pfoo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Member req 2 // github.com/goplus/gop/cl.pfoo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Call 1 0 // overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall func(a ...interface{}) (n int, err error)\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType int, interface{}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> ASTFile \n[Go+ CI/Test]   | --- PASS: TestNamedPtrMemberIssue786 (0.00s)\n[Go+ CI/Test]   | === RUN   TestMember\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Preload func main\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Load func main\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewFunc main func()\n[Go+ CI/Test]   | 2023/05/30 11:34:02 DefineVarStart [a]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 INT 1} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 STRING \"Hello\"} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 StructLit struct{A int; B string} 2 false\n[Go+ CI/Test]   | 2023/05/30 11:34:02 UnaryOp & flags: 0\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall instructionType{instr: gox.addrInstr}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:34:02 DefineVarStart [x]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val a *struct{A int; B string}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Member A 2 // *struct{A int; B string}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val a *struct{A int; B string}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Member B -1 // *struct{A int; B string}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 STRING \"Hi\"} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Assign 1 1\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType untyped string (\"Hi\"), string\n[Go+ CI/Test]   | 2023/05/30 11:34:02 VarRef Usage func()\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val nil untyped nil\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Assign 1 1\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType untyped nil, func()\n[Go+ CI/Test]   | 2023/05/30 11:34:02 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> ASTFile \n[Go+ CI/Test]   | --- PASS: TestMember (0.53s)\n[Go+ CI/Test]   | === RUN   TestElem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Preload func foo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Load func foo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewFunc foo func(a *int, b int)\n[Go+ CI/Test]   | 2023/05/30 11:34:02 VarRef b int\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val a *int\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Star\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Assign 1 1\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType int, int\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val a *int\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ElemRef\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val b int\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Assign 1 1\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType int, int\n[Go+ CI/Test]   | 2023/05/30 11:34:02 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> ASTFile \n[Go+ CI/Test]   | --- PASS: TestElem (0.00s)\n[Go+ CI/Test]   | === RUN   TestNamedPtrIssue797\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Preload type Bar\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Preload func foo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Load > NewType Bar\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewType Bar\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Load > InitType Bar\n[Go+ CI/Test]   | 2023/05/30 11:34:02 InitType Bar *int\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Load func foo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> LookupParent Bar => type github.com/goplus/gop/cl.Bar *int\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewFunc foo func(a github.com/goplus/gop/cl.Bar)\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Load var int [b]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewVar [b]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val a github.com/goplus/gop/cl.Bar\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Star\n[Go+ CI/Test]   | 2023/05/30 11:34:02 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType int, int\n[Go+ CI/Test]   | 2023/05/30 11:34:02 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> ASTFile \n[Go+ CI/Test]   | --- PASS: TestNamedPtrIssue797 (0.00s)\n[Go+ CI/Test]   | === RUN   TestMethod\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Preload type M\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Preload method M.Foo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Preload method M.Bar\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Load > NewType M\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewType M\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Load > InitType M\n[Go+ CI/Test]   | 2023/05/30 11:34:02 InitType M int\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> LookupParent M => type github.com/goplus/gop/cl.M int\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Load method github.com/goplus/gop/cl.M.Foo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> LookupParent M => type github.com/goplus/gop/cl.M int\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Load method github.com/goplus/gop/cl.M.Bar\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewFunc Foo (github.com/goplus/gop/cl.M) func()\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val println overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 STRING \"foo\"} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val m github.com/goplus/gop/cl.M\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Call 2 0 // overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall func(a ...interface{}) (n int, err error)\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType untyped string (\"foo\"), interface{}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType github.com/goplus/gop/cl.M, interface{}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewFunc Bar (github.com/goplus/gop/cl.M) func()\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val println overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 STRING \"bar\"} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Call 1 0 // overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall func(a ...interface{}) (n int, err error)\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType untyped string (\"bar\"), interface{}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> ASTFile \n[Go+ CI/Test]   | --- PASS: TestMethod (0.00s)\n[Go+ CI/Test]   | === RUN   TestOverloadOp\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Preload type foo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Preload method foo.+\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Preload method foo.-\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Preload func -\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Preload func ++\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Preload method foo.!=\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Preload var [a b]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Preload var [c]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Preload var [d]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Preload var [e]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Load > NewType foo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewType foo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Load > InitType foo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 InitType foo struct{}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> LookupParent foo => type github.com/goplus/gop/cl.foo struct{}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Load method *github.com/goplus/gop/cl.foo.+\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> LookupParent foo => type github.com/goplus/gop/cl.foo struct{}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> LookupParent foo => type github.com/goplus/gop/cl.foo struct{}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> LookupParent foo => type github.com/goplus/gop/cl.foo struct{}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Load method github.com/goplus/gop/cl.foo.-\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> LookupParent foo => type github.com/goplus/gop/cl.foo struct{}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> LookupParent foo => type github.com/goplus/gop/cl.foo struct{}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> LookupParent foo => type github.com/goplus/gop/cl.foo struct{}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Load method github.com/goplus/gop/cl.foo.!=\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> LookupParent foo => type github.com/goplus/gop/cl.foo struct{}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Load func -\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> LookupParent foo => type github.com/goplus/gop/cl.foo struct{}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Load func ++\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> LookupParent foo => type github.com/goplus/gop/cl.foo struct{}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> LookupParent foo => type github.com/goplus/gop/cl.foo struct{}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Load var github.com/goplus/gop/cl.foo [a b]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewVar [a b]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Load var <nil> [c]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewVar [c]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val a github.com/goplus/gop/cl.foo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val b github.com/goplus/gop/cl.foo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 BinaryOp -\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall func(b github.com/goplus/gop/cl.foo) github.com/goplus/gop/cl.foo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType github.com/goplus/gop/cl.foo, github.com/goplus/gop/cl.foo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType github.com/goplus/gop/cl.foo, github.com/goplus/gop/cl.foo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Load var <nil> [d]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewVar [d]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val a github.com/goplus/gop/cl.foo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 UnaryOp - flags: 0\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall func()\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType github.com/goplus/gop/cl.foo, github.com/goplus/gop/cl.foo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Load var <nil> [e]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewVar [e]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val a github.com/goplus/gop/cl.foo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val b github.com/goplus/gop/cl.foo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 BinaryOp !=\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall func(b github.com/goplus/gop/cl.foo) bool\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType github.com/goplus/gop/cl.foo, github.com/goplus/gop/cl.foo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType github.com/goplus/gop/cl.foo, github.com/goplus/gop/cl.foo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewFunc Gop_Add (*github.com/goplus/gop/cl.foo) func(b *github.com/goplus/gop/cl.foo) *github.com/goplus/gop/cl.foo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val println overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 STRING \"a + b\"} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Call 1 0 // overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall func(a ...interface{}) (n int, err error)\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType untyped string (\"a + b\"), interface{}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> LookupParent foo => type github.com/goplus/gop/cl.foo struct{}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 StructLit github.com/goplus/gop/cl.foo 0 false\n[Go+ CI/Test]   | 2023/05/30 11:34:02 UnaryOp & flags: 0\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall instructionType{instr: gox.addrInstr}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Return 1\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType *github.com/goplus/gop/cl.foo, *github.com/goplus/gop/cl.foo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewFunc Gop_Sub (github.com/goplus/gop/cl.foo) func(b github.com/goplus/gop/cl.foo) github.com/goplus/gop/cl.foo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val println overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 STRING \"a - b\"} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Call 1 0 // overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall func(a ...interface{}) (n int, err error)\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType untyped string (\"a - b\"), interface{}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> LookupParent foo => type github.com/goplus/gop/cl.foo struct{}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 StructLit github.com/goplus/gop/cl.foo 0 false\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Return 1\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType github.com/goplus/gop/cl.foo, github.com/goplus/gop/cl.foo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewFunc Gop_NE (github.com/goplus/gop/cl.foo) func(b github.com/goplus/gop/cl.foo) bool\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val println overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 STRING \"a!=b\"} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Call 1 0 // overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall func(a ...interface{}) (n int, err error)\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType untyped string (\"a!=b\"), interface{}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val true untyped bool\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Return 1\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType untyped bool (true), bool\n[Go+ CI/Test]   | 2023/05/30 11:34:02 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewFunc Gop_Neg (github.com/goplus/gop/cl.foo) func()\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val println overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 STRING \"-a\"} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Call 1 0 // overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall func(a ...interface{}) (n int, err error)\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType untyped string (\"-a\"), interface{}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewFunc Gop_Inc (github.com/goplus/gop/cl.foo) func()\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val println overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 STRING \"a++\"} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Call 1 0 // overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall func(a ...interface{}) (n int, err error)\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType untyped string (\"a++\"), interface{}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> ASTFile \n[Go+ CI/Test]   | --- PASS: TestOverloadOp (0.00s)\n[Go+ CI/Test]   | === RUN   TestCmdlineNoEOL\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Preload func main\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Load func main\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewFunc main func()\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val println overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 STRING \"Hi\"} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Call 1 0 // overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall func(a ...interface{}) (n int, err error)\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType untyped string (\"Hi\"), interface{}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> ASTFile \n[Go+ CI/Test]   | --- PASS: TestCmdlineNoEOL (0.00s)\n[Go+ CI/Test]   | === RUN   TestImport\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Preload func main\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Load func main\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewFunc main func()\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val Println func(a ...interface{}) (n int, err error)\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 STRING \"Hi\"} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Call 1 0 // func(a ...interface{}) (n int, err error)\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall func(a ...interface{}) (n int, err error)\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType untyped string (\"Hi\"), interface{}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> ASTFile \n[Go+ CI/Test]   | --- PASS: TestImport (0.00s)\n[Go+ CI/Test]   | === RUN   TestDotImport\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Preload var [a]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Load var <nil> [a]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewVar [a]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val Round func(x float64) float64\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 FLOAT 1.2} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Call 1 0 // func(x float64) float64\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall func(x float64) float64\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType untyped float (1.2), float64\n[Go+ CI/Test]   | 2023/05/30 11:34:02 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> ASTFile \n[Go+ CI/Test]   | --- PASS: TestDotImport (0.00s)\n[Go+ CI/Test]   | === RUN   TestLocalImport\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Import github.com/goplus/gop/cl/internal/spx\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewTemplateRecvMethod MyGame Main\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewTemplateRecvMethod MyGame Run\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Rand\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod MyGame Broadcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Preload var [a]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Load var <nil> [a]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewVar [a]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val TestIntValue int\n[Go+ CI/Test]   | 2023/05/30 11:34:02 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> ASTFile \n[Go+ CI/Test]   | --- PASS: TestLocalImport (0.00s)\n[Go+ CI/Test]   | === RUN   TestImportUnused\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Preload func main\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Load func main\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewFunc main func()\n[Go+ CI/Test]   | 2023/05/30 11:34:02 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> ASTFile \n[Go+ CI/Test]   | --- PASS: TestImportUnused (0.00s)\n[Go+ CI/Test]   | === RUN   TestImportForceUsed\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Preload func main\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Load func main\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewFunc main func()\n[Go+ CI/Test]   | 2023/05/30 11:34:02 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> ASTFile \n[Go+ CI/Test]   | --- PASS: TestImportForceUsed (0.00s)\n[Go+ CI/Test]   | === RUN   TestAnonymousImport\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Preload func main\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Load func main\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewFunc main func()\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val println overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 STRING \"Hello\"} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Call 1 0 // overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall func(a ...interface{}) (n int, err error)\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType untyped string (\"Hello\"), interface{}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val printf overloadFuncType{funcs: [func fmt.Printf(format string, a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 STRING \"Hello Go+\\n\"} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Call 1 0 // overloadFuncType{funcs: [func fmt.Printf(format string, a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall overloadFuncType{funcs: [func fmt.Printf(format string, a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall func(format string, a ...interface{}) (n int, err error)\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType untyped string (\"Hello Go+\\n\"), string\n[Go+ CI/Test]   | 2023/05/30 11:34:02 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> ASTFile \n[Go+ CI/Test]   | --- PASS: TestAnonymousImport (0.00s)\n[Go+ CI/Test]   | === RUN   TestVarAndConst\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewConstDefs\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Preload const [i]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Preload const [x]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Preload var [j]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Load const [i] <nil>\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewConst [i] 0\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 INT 1} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Load const [x] float64\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewConst [x] 1\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 INT 1} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType untyped int (1), float64\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Load var int [j]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewVar [j]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val i untyped int\n[Go+ CI/Test]   | 2023/05/30 11:34:02 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType untyped int (1), int\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> ASTFile \n[Go+ CI/Test]   | --- PASS: TestVarAndConst (0.00s)\n[Go+ CI/Test]   | === RUN   TestDeclStmt\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Preload func main\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Load func main\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewFunc main func()\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewConstDefs\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Load const [i] <nil>\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewConst [i] 0\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 INT 1} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Load const [x] float64\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewConst [x] 1\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 INT 1} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType untyped int (1), float64\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Load var int [j]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewVar [j]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val i untyped int\n[Go+ CI/Test]   | 2023/05/30 11:34:02 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType untyped int (1), int\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val Println func(a ...interface{}) (n int, err error)\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 STRING \"Hi\"} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Call 1 0 // func(a ...interface{}) (n int, err error)\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall func(a ...interface{}) (n int, err error)\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType untyped string (\"Hi\"), interface{}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> ASTFile \n[Go+ CI/Test]   | --- PASS: TestDeclStmt (0.00s)\n[Go+ CI/Test]   | === RUN   TestIf\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Preload func main\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Load func main\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewFunc main func()\n[Go+ CI/Test]   | 2023/05/30 11:34:02 DefineVarStart [x]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 INT 0} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:34:02 If\n[Go+ CI/Test]   | 2023/05/30 11:34:02 DefineVarStart [t]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val false untyped bool\n[Go+ CI/Test]   | 2023/05/30 11:34:02 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val t bool\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Then\n[Go+ CI/Test]   | 2023/05/30 11:34:02 VarRef x int\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 INT 3} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Assign 1 1\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType untyped int (3), int\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Else\n[Go+ CI/Test]   | 2023/05/30 11:34:02 If\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val t bool\n[Go+ CI/Test]   | 2023/05/30 11:34:02 UnaryOp ! flags: 0\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall func(a TemplateParamType{name: T}) TemplateParamType{name: T}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType bool, unboundFuncParam{typ: <nil>}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Then\n[Go+ CI/Test]   | 2023/05/30 11:34:02 VarRef x int\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 INT 5} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Assign 1 1\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType untyped int (5), int\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Else\n[Go+ CI/Test]   | 2023/05/30 11:34:02 VarRef x int\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 INT 7} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Assign 1 1\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType untyped int (7), int\n[Go+ CI/Test]   | 2023/05/30 11:34:02 End // If\n[Go+ CI/Test]   | 2023/05/30 11:34:02 End // If\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val println overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 STRING \"x:\"} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val x int\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Call 2 0 // overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall func(a ...interface{}) (n int, err error)\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType untyped string (\"x:\"), interface{}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType int, interface{}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> ASTFile \n[Go+ CI/Test]   | --- PASS: TestIf (0.00s)\n[Go+ CI/Test]   | === RUN   TestSwitch\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Preload func main\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Load func main\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewFunc main func()\n[Go+ CI/Test]   | 2023/05/30 11:34:02 DefineVarStart [x]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 INT 0} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Switch\n[Go+ CI/Test]   | 2023/05/30 11:34:02 DefineVarStart [s]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 STRING \"Hello\"} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val s string\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Then\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Case 0\n[Go+ CI/Test]   | 2023/05/30 11:34:02 VarRef x int\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 INT 7} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Assign 1 1\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType untyped int (7), int\n[Go+ CI/Test]   | 2023/05/30 11:34:02 End // Case\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 STRING \"world\"} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 STRING \"hi\"} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Case 2\n[Go+ CI/Test]   | 2023/05/30 11:34:02 VarRef x int\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 INT 5} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Assign 1 1\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType untyped int (5), int\n[Go+ CI/Test]   | 2023/05/30 11:34:02 End // Case\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 STRING \"xsw\"} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Case 1\n[Go+ CI/Test]   | 2023/05/30 11:34:02 VarRef x int\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 INT 3} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Assign 1 1\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType untyped int (3), int\n[Go+ CI/Test]   | 2023/05/30 11:34:02 End // Case\n[Go+ CI/Test]   | 2023/05/30 11:34:02 End // Switch\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val println overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 STRING \"x:\"} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val x int\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Call 2 0 // overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall func(a ...interface{}) (n int, err error)\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType untyped string (\"x:\"), interface{}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType int, interface{}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 DefineVarStart [v]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 STRING \"Hello\"} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Switch\n[Go+ CI/Test]   | 2023/05/30 11:34:02 None\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Then\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val v string\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 STRING \"xsw\"} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 BinaryOp ==\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Case 1\n[Go+ CI/Test]   | 2023/05/30 11:34:02 VarRef x int\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 INT 3} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Assign 1 1\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType untyped int (3), int\n[Go+ CI/Test]   | 2023/05/30 11:34:02 End // Case\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val v string\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 STRING \"hi\"} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 BinaryOp ==\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val v string\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 STRING \"world\"} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 BinaryOp ==\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Case 2\n[Go+ CI/Test]   | 2023/05/30 11:34:02 VarRef x int\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 INT 9} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Assign 1 1\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType untyped int (9), int\n[Go+ CI/Test]   | 2023/05/30 11:34:02 End // Case\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Case 0\n[Go+ CI/Test]   | 2023/05/30 11:34:02 VarRef x int\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 INT 11} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Assign 1 1\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType untyped int (11), int\n[Go+ CI/Test]   | 2023/05/30 11:34:02 End // Case\n[Go+ CI/Test]   | 2023/05/30 11:34:02 End // Switch\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val println overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 STRING \"x:\"} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val x int\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Call 2 0 // overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall func(a ...interface{}) (n int, err error)\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType untyped string (\"x:\"), interface{}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType int, interface{}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> ASTFile \n[Go+ CI/Test]   | --- PASS: TestSwitch (0.00s)\n[Go+ CI/Test]   | === RUN   TestSwitchFallthrough\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Preload func main\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Load func main\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewFunc main func()\n[Go+ CI/Test]   | 2023/05/30 11:34:02 DefineVarStart [v]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 STRING \"Hello\"} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Switch\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val v string\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Then\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 STRING \"Hello\"} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Case 1\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val println overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val v string\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Call 1 0 // overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall func(a ...interface{}) (n int, err error)\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType string, interface{}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Fallthrough\n[Go+ CI/Test]   | 2023/05/30 11:34:02 End // Case\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 STRING \"hi\"} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Case 1\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val println overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val v string\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Call 1 0 // overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall func(a ...interface{}) (n int, err error)\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType string, interface{}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Fallthrough\n[Go+ CI/Test]   | 2023/05/30 11:34:02 End // Case\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Case 0\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val println overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val v string\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Call 1 0 // overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall func(a ...interface{}) (n int, err error)\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType string, interface{}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 End // Case\n[Go+ CI/Test]   | 2023/05/30 11:34:02 End // Switch\n[Go+ CI/Test]   | 2023/05/30 11:34:02 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> ASTFile \n[Go+ CI/Test]   | --- PASS: TestSwitchFallthrough (0.00s)\n[Go+ CI/Test]   | === RUN   TestBranchStmt\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Preload func main\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Load func main\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewFunc main func()\n[Go+ CI/Test]   | 2023/05/30 11:34:02 DefineVarStart [a]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 INT 1} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 FLOAT 3.4} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 INT 5} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 SliceLit <nil> 3 false\n[Go+ CI/Test]   | 2023/05/30 11:34:02 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Label label\n[Go+ CI/Test]   | 2023/05/30 11:34:02 For\n[Go+ CI/Test]   | 2023/05/30 11:34:02 DefineVarStart [i]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 INT 0} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val i int\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 INT 3} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 BinaryOp <\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall func(a TemplateParamType{name: T}, b TemplateParamType{name: T}) untyped bool\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType int, unboundFuncParam{typ: <nil>}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType untyped int (3), unboundFuncParam{typ: int}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Then\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val println overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val i int\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Call 1 0 // overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall func(a ...interface{}) (n int, err error)\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType int, interface{}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Break \n[Go+ CI/Test]   | 2023/05/30 11:34:02 Break label\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Continue \n[Go+ CI/Test]   | 2023/05/30 11:34:02 Continue label\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Goto label\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Post\n[Go+ CI/Test]   | 2023/05/30 11:34:02 VarRef i int\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val i int\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 INT 1} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 BinaryOp +\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall func(a TemplateParamType{name: T}, b TemplateParamType{name: T}) TemplateParamType{name: T}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType int, unboundFuncParam{typ: <nil>}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType untyped int (1), unboundFuncParam{typ: int}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Assign 1 1\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType int, int\n[Go+ CI/Test]   | 2023/05/30 11:34:02 End // For\n[Go+ CI/Test]   | 2023/05/30 11:34:02 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> ASTFile \n[Go+ CI/Test]   | --- PASS: TestBranchStmt (0.00s)\n[Go+ CI/Test]   | === RUN   TestReturn\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Preload func foo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Preload func main\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Load func foo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewFunc foo func(format string, args ...interface{}) (int, error)\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val printf overloadFuncType{funcs: [func fmt.Printf(format string, a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val format string\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val args []interface{}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Call 2 1 // overloadFuncType{funcs: [func fmt.Printf(format string, a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall overloadFuncType{funcs: [func fmt.Printf(format string, a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall func(format string, a ...interface{}) (n int, err error)\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType string, string\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType []interface{}, []interface{}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Return 1\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType int, int\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType error, error\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> EnsureLoaded error\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> EnsureLoaded error\n[Go+ CI/Test]   | 2023/05/30 11:34:02 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Load func main\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewFunc main func()\n[Go+ CI/Test]   | 2023/05/30 11:34:02 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> ASTFile \n[Go+ CI/Test]   | --- PASS: TestReturn (0.00s)\n[Go+ CI/Test]   | === RUN   TestReturnExpr\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Preload func foo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Preload func main\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Load func foo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewFunc foo func(format string, args ...interface{}) (int, error)\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 INT 0} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val nil untyped nil\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Return 2\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType untyped int (0), int\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType untyped nil, error\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> EnsureLoaded error\n[Go+ CI/Test]   | 2023/05/30 11:34:02 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Load func main\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewFunc main func()\n[Go+ CI/Test]   | 2023/05/30 11:34:02 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> ASTFile \n[Go+ CI/Test]   | --- PASS: TestReturnExpr (0.00s)\n[Go+ CI/Test]   | === RUN   TestClosure\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Preload func main\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Load func main\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewFunc main func()\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewClosure func(v string)\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val Println func(a ...interface{}) (n int, err error)\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val v string\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Call 1 0 // func(a ...interface{}) (n int, err error)\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall func(a ...interface{}) (n int, err error)\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType string, interface{}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 STRING \"Hello\"} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Call 1 0 // func(v string)\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall func(v string)\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType untyped string (\"Hello\"), string\n[Go+ CI/Test]   | 2023/05/30 11:34:02 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> ASTFile \n[Go+ CI/Test]   | --- PASS: TestClosure (0.00s)\n[Go+ CI/Test]   | === RUN   TestFunc\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Preload func foo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Preload func main\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Load func foo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 INT 10} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewFunc foo func(format string, a [10]int, args ...interface{})\n[Go+ CI/Test]   | 2023/05/30 11:34:02 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Load func main\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewFunc main func()\n[Go+ CI/Test]   | 2023/05/30 11:34:02 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> ASTFile \n[Go+ CI/Test]   | --- PASS: TestFunc (0.00s)\n[Go+ CI/Test]   | === RUN   TestLambdaExpr\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Preload func Map\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Preload func Map2\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Preload func main\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Load func Map\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewFunc Map func(c []float64, t func(float64) float64)\n[Go+ CI/Test]   | 2023/05/30 11:34:02 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Load func Map2\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewFunc Map2 func(c []float64, t func(float64) (float64, float64))\n[Go+ CI/Test]   | 2023/05/30 11:34:02 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Load func main\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewFunc main func()\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val Map func(c []float64, t func(float64) float64)\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 FLOAT 1.2} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 FLOAT 3.5} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 INT 6} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 SliceLit []float64 3 false\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewClosure func(x float64) float64\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val x float64\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val x float64\n[Go+ CI/Test]   | 2023/05/30 11:34:02 BinaryOp *\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall func(a TemplateParamType{name: T}, b TemplateParamType{name: T}) TemplateParamType{name: T}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType float64, unboundFuncParam{typ: <nil>}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType float64, unboundFuncParam{typ: float64}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Return 1\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType float64, float64\n[Go+ CI/Test]   | 2023/05/30 11:34:02 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Call 2 0 // func(c []float64, t func(float64) float64)\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall func(c []float64, t func(float64) float64)\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType []float64, []float64\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType func(x float64) float64, func(float64) float64\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val Map2 func(c []float64, t func(float64) (float64, float64))\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 FLOAT 1.2} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 FLOAT 3.5} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 INT 6} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 SliceLit []float64 3 false\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewClosure func(x float64) (float64, float64)\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val x float64\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val x float64\n[Go+ CI/Test]   | 2023/05/30 11:34:02 BinaryOp *\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall func(a TemplateParamType{name: T}, b TemplateParamType{name: T}) TemplateParamType{name: T}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType float64, unboundFuncParam{typ: <nil>}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType float64, unboundFuncParam{typ: float64}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val x float64\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val x float64\n[Go+ CI/Test]   | 2023/05/30 11:34:02 BinaryOp +\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall func(a TemplateParamType{name: T}, b TemplateParamType{name: T}) TemplateParamType{name: T}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType float64, unboundFuncParam{typ: <nil>}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType float64, unboundFuncParam{typ: float64}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Return 2\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType float64, float64\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType float64, float64\n[Go+ CI/Test]   | 2023/05/30 11:34:02 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Call 2 0 // func(c []float64, t func(float64) (float64, float64))\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall func(c []float64, t func(float64) (float64, float64))\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType []float64, []float64\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType func(x float64) (float64, float64), func(float64) (float64, float64)\n[Go+ CI/Test]   | 2023/05/30 11:34:02 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> ASTFile \n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Preload type Foo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Preload func main\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Load > NewType Foo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewType Foo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Load > InitType Foo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 InitType Foo struct{Plot func(x float64) (float64, float64)}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Load func main\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewFunc main func()\n[Go+ CI/Test]   | 2023/05/30 11:34:02 DefineVarStart [foo]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> LookupParent Foo => type github.com/goplus/gop/cl.Foo struct{Plot func(x float64) (float64, float64)}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val 0 int\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewClosure func(x float64) (float64, float64)\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val x float64\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 INT 2} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 BinaryOp *\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall func(a TemplateParamType{name: T}, b TemplateParamType{name: T}) TemplateParamType{name: T}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType float64, unboundFuncParam{typ: <nil>}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType untyped int (2), unboundFuncParam{typ: float64}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val x float64\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val x float64\n[Go+ CI/Test]   | 2023/05/30 11:34:02 BinaryOp *\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall func(a TemplateParamType{name: T}, b TemplateParamType{name: T}) TemplateParamType{name: T}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType float64, unboundFuncParam{typ: <nil>}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType float64, unboundFuncParam{typ: float64}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Return 2\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType float64, float64\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType float64, float64\n[Go+ CI/Test]   | 2023/05/30 11:34:02 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:02 StructLit github.com/goplus/gop/cl.Foo 2 true\n[Go+ CI/Test]   | 2023/05/30 11:34:02 UnaryOp & flags: 0\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall instructionType{instr: gox.addrInstr}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:34:02 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> ASTFile \n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Preload type Fn\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Preload type Foo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Preload func main\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Load > NewType Fn\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewType Fn\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Load > InitType Fn\n[Go+ CI/Test]   | 2023/05/30 11:34:02 InitType Fn func(x float64) (float64, float64)\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Load > NewType Foo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewType Foo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Load > InitType Foo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> LookupParent Fn => type github.com/goplus/gop/cl.Fn func(x float64) (float64, float64)\n[Go+ CI/Test]   | 2023/05/30 11:34:02 InitType Foo struct{Plot github.com/goplus/gop/cl.Fn}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Load func main\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewFunc main func()\n[Go+ CI/Test]   | 2023/05/30 11:34:02 DefineVarStart [foo]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> LookupParent Foo => type github.com/goplus/gop/cl.Foo struct{Plot github.com/goplus/gop/cl.Fn}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val 0 int\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewClosure func(x float64) (float64, float64)\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val x float64\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 INT 2} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 BinaryOp *\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall func(a TemplateParamType{name: T}, b TemplateParamType{name: T}) TemplateParamType{name: T}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType float64, unboundFuncParam{typ: <nil>}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType untyped int (2), unboundFuncParam{typ: float64}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val x float64\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val x float64\n[Go+ CI/Test]   | 2023/05/30 11:34:02 BinaryOp *\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall func(a TemplateParamType{name: T}, b TemplateParamType{name: T}) TemplateParamType{name: T}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType float64, unboundFuncParam{typ: <nil>}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType float64, unboundFuncParam{typ: float64}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Return 2\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType float64, float64\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType float64, float64\n[Go+ CI/Test]   | 2023/05/30 11:34:02 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:02 StructLit github.com/goplus/gop/cl.Foo 2 true\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> EnsureLoaded github.com/goplus/gop/cl.Fn\n[Go+ CI/Test]   | 2023/05/30 11:34:02 UnaryOp & flags: 0\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall instructionType{instr: gox.addrInstr}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:34:02 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> ASTFile \n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Preload type Fn\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Preload func Do\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Preload func main\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Load > NewType Fn\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewType Fn\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Load > InitType Fn\n[Go+ CI/Test]   | 2023/05/30 11:34:02 InitType Fn func() (int, error)\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Load func Do\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> LookupParent Fn => type github.com/goplus/gop/cl.Fn func() (int, error)\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewFunc Do func(fn github.com/goplus/gop/cl.Fn)\n[Go+ CI/Test]   | 2023/05/30 11:34:02 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Load func main\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewFunc main func()\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val Do func(fn github.com/goplus/gop/cl.Fn)\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewClosure func() (int, error)\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 INT 100} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val nil untyped nil\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Return 2\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType untyped int (100), int\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType untyped nil, error\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> EnsureLoaded error\n[Go+ CI/Test]   | 2023/05/30 11:34:02 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Call 1 0 // func(fn github.com/goplus/gop/cl.Fn)\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall func(fn github.com/goplus/gop/cl.Fn)\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType func() (int, error), github.com/goplus/gop/cl.Fn\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> EnsureLoaded github.com/goplus/gop/cl.Fn\n[Go+ CI/Test]   | 2023/05/30 11:34:02 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> ASTFile \n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Preload var [fn]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Load var func(int) (int, error) [fn]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewVar [fn]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewClosure func(x int) (int, error)\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val x int\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val x int\n[Go+ CI/Test]   | 2023/05/30 11:34:02 BinaryOp *\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall func(a TemplateParamType{name: T}, b TemplateParamType{name: T}) TemplateParamType{name: T}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType int, unboundFuncParam{typ: <nil>}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType int, unboundFuncParam{typ: int}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val nil untyped nil\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Return 2\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType int, int\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType untyped nil, error\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> EnsureLoaded error\n[Go+ CI/Test]   | 2023/05/30 11:34:02 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:02 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType func(x int) (int, error), func(int) (int, error)\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> ASTFile \n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Preload var [fn]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Preload func main\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Load var func(int) (int, error) [fn]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewVar [fn]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Load func main\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewFunc main func()\n[Go+ CI/Test]   | 2023/05/30 11:34:02 VarRef fn func(int) (int, error)\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewClosure func(x int) (int, error)\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val x int\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val x int\n[Go+ CI/Test]   | 2023/05/30 11:34:02 BinaryOp *\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall func(a TemplateParamType{name: T}, b TemplateParamType{name: T}) TemplateParamType{name: T}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType int, unboundFuncParam{typ: <nil>}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType int, unboundFuncParam{typ: int}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val nil untyped nil\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Return 2\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType int, int\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType untyped nil, error\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> EnsureLoaded error\n[Go+ CI/Test]   | 2023/05/30 11:34:02 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Assign 1 1\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType func(x int) (int, error), func(int) (int, error)\n[Go+ CI/Test]   | 2023/05/30 11:34:02 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> ASTFile \n[Go+ CI/Test]   | --- PASS: TestLambdaExpr (0.00s)\n[Go+ CI/Test]   | === RUN   TestLambdaExpr2\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Preload func Do\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Preload func main\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Load func Do\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewFunc Do func(func())\n[Go+ CI/Test]   | 2023/05/30 11:34:02 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Load func main\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewFunc main func()\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val Do func(func())\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewClosure func()\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val println overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 STRING \"Hi\"} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Call 1 0 // overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall func(a ...interface{}) (n int, err error)\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType untyped string (\"Hi\"), interface{}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Call 1 0 // func(func())\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall func(func())\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType func(), func()\n[Go+ CI/Test]   | 2023/05/30 11:34:02 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> ASTFile \n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Preload func Do\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Preload func main\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Load func Do\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewFunc Do func(fn func() (int, error))\n[Go+ CI/Test]   | 2023/05/30 11:34:02 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Load func main\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewFunc main func()\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val Do func(fn func() (int, error))\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewClosure func() (int, error)\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 INT 100} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val nil untyped nil\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Return 2\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType untyped int (100), int\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType untyped nil, error\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> EnsureLoaded error\n[Go+ CI/Test]   | 2023/05/30 11:34:02 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Call 1 0 // func(fn func() (int, error))\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall func(fn func() (int, error))\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType func() (int, error), func() (int, error)\n[Go+ CI/Test]   | 2023/05/30 11:34:02 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> ASTFile \n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Preload type Foo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Preload func main\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Load > NewType Foo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewType Foo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Load > InitType Foo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 InitType Foo struct{Plot func(x float64) (float64, float64)}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Load func main\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewFunc main func()\n[Go+ CI/Test]   | 2023/05/30 11:34:02 DefineVarStart [foo]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> LookupParent Foo => type github.com/goplus/gop/cl.Foo struct{Plot func(x float64) (float64, float64)}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val 0 int\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewClosure func(x float64) (float64, float64)\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val x float64\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 INT 2} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 BinaryOp *\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall func(a TemplateParamType{name: T}, b TemplateParamType{name: T}) TemplateParamType{name: T}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType float64, unboundFuncParam{typ: <nil>}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType untyped int (2), unboundFuncParam{typ: float64}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val x float64\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val x float64\n[Go+ CI/Test]   | 2023/05/30 11:34:02 BinaryOp *\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall func(a TemplateParamType{name: T}, b TemplateParamType{name: T}) TemplateParamType{name: T}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType float64, unboundFuncParam{typ: <nil>}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType float64, unboundFuncParam{typ: float64}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Return 2\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType float64, float64\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType float64, float64\n[Go+ CI/Test]   | 2023/05/30 11:34:02 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:02 StructLit github.com/goplus/gop/cl.Foo 2 true\n[Go+ CI/Test]   | 2023/05/30 11:34:02 UnaryOp & flags: 0\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall instructionType{instr: gox.addrInstr}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:34:02 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> ASTFile \n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Preload type Fn\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Preload type Foo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Preload func main\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Load > NewType Fn\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewType Fn\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Load > InitType Fn\n[Go+ CI/Test]   | 2023/05/30 11:34:02 InitType Fn func(x float64) (float64, float64)\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Load > NewType Foo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewType Foo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Load > InitType Foo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> LookupParent Fn => type github.com/goplus/gop/cl.Fn func(x float64) (float64, float64)\n[Go+ CI/Test]   | 2023/05/30 11:34:02 InitType Foo struct{Plot github.com/goplus/gop/cl.Fn}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Load func main\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewFunc main func()\n[Go+ CI/Test]   | 2023/05/30 11:34:02 DefineVarStart [foo]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> LookupParent Foo => type github.com/goplus/gop/cl.Foo struct{Plot github.com/goplus/gop/cl.Fn}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val 0 int\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewClosure func(x float64) (float64, float64)\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val x float64\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 INT 2} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 BinaryOp *\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall func(a TemplateParamType{name: T}, b TemplateParamType{name: T}) TemplateParamType{name: T}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType float64, unboundFuncParam{typ: <nil>}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType untyped int (2), unboundFuncParam{typ: float64}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val x float64\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val x float64\n[Go+ CI/Test]   | 2023/05/30 11:34:02 BinaryOp *\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall func(a TemplateParamType{name: T}, b TemplateParamType{name: T}) TemplateParamType{name: T}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType float64, unboundFuncParam{typ: <nil>}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType float64, unboundFuncParam{typ: float64}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Return 2\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType float64, float64\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType float64, float64\n[Go+ CI/Test]   | 2023/05/30 11:34:02 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:02 StructLit github.com/goplus/gop/cl.Foo 2 true\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> EnsureLoaded github.com/goplus/gop/cl.Fn\n[Go+ CI/Test]   | 2023/05/30 11:34:02 UnaryOp & flags: 0\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall instructionType{instr: gox.addrInstr}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:34:02 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> ASTFile \n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Preload type Fn\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Preload func Do\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Preload func main\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Load > NewType Fn\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewType Fn\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Load > InitType Fn\n[Go+ CI/Test]   | 2023/05/30 11:34:02 InitType Fn func() (int, error)\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Load func Do\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> LookupParent Fn => type github.com/goplus/gop/cl.Fn func() (int, error)\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewFunc Do func(fn github.com/goplus/gop/cl.Fn)\n[Go+ CI/Test]   | 2023/05/30 11:34:02 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Load func main\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewFunc main func()\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val Do func(fn github.com/goplus/gop/cl.Fn)\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewClosure func() (int, error)\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 INT 100} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val nil untyped nil\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Return 2\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType untyped int (100), int\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType untyped nil, error\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> EnsureLoaded error\n[Go+ CI/Test]   | 2023/05/30 11:34:02 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Call 1 0 // func(fn github.com/goplus/gop/cl.Fn)\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall func(fn github.com/goplus/gop/cl.Fn)\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType func() (int, error), github.com/goplus/gop/cl.Fn\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> EnsureLoaded github.com/goplus/gop/cl.Fn\n[Go+ CI/Test]   | 2023/05/30 11:34:02 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> ASTFile \n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Preload var [fn]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Load var func(int) (int, error) [fn]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewVar [fn]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewClosure func(x int) (int, error)\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val x int\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val x int\n[Go+ CI/Test]   | 2023/05/30 11:34:02 BinaryOp *\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall func(a TemplateParamType{name: T}, b TemplateParamType{name: T}) TemplateParamType{name: T}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType int, unboundFuncParam{typ: <nil>}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType int, unboundFuncParam{typ: int}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val nil untyped nil\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Return 2\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType int, int\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType untyped nil, error\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> EnsureLoaded error\n[Go+ CI/Test]   | 2023/05/30 11:34:02 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:02 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType func(x int) (int, error), func(int) (int, error)\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> ASTFile \n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Preload var [fn]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Preload func main\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Load var func(int) (int, error) [fn]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewVar [fn]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Load func main\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewFunc main func()\n[Go+ CI/Test]   | 2023/05/30 11:34:02 VarRef fn func(int) (int, error)\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewClosure func(x int) (int, error)\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val x int\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val x int\n[Go+ CI/Test]   | 2023/05/30 11:34:02 BinaryOp *\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall func(a TemplateParamType{name: T}, b TemplateParamType{name: T}) TemplateParamType{name: T}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType int, unboundFuncParam{typ: <nil>}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType int, unboundFuncParam{typ: int}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val nil untyped nil\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Return 2\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType int, int\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType untyped nil, error\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> EnsureLoaded error\n[Go+ CI/Test]   | 2023/05/30 11:34:02 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Assign 1 1\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType func(x int) (int, error), func(int) (int, error)\n[Go+ CI/Test]   | 2023/05/30 11:34:02 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> ASTFile \n[Go+ CI/Test]   | --- PASS: TestLambdaExpr2 (0.01s)\n[Go+ CI/Test]   | === RUN   TestLambdaExpr3\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Preload func intSeq\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Load func intSeq\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewFunc intSeq func() func() int\n[Go+ CI/Test]   | 2023/05/30 11:34:02 DefineVarStart [i]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 INT 0} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewClosure func() int\n[Go+ CI/Test]   | 2023/05/30 11:34:02 VarRef i int\n[Go+ CI/Test]   | 2023/05/30 11:34:02 IncDec ++\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val i int\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Return 1\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType int, int\n[Go+ CI/Test]   | 2023/05/30 11:34:02 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Return 1\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType func() int, func() int\n[Go+ CI/Test]   | 2023/05/30 11:34:02 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> ASTFile \n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Preload func intDouble\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Load func intDouble\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewFunc intDouble func() func(int) int\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewClosure func(i int) int\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val i int\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 INT 2} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 BinaryOp *\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall func(a TemplateParamType{name: T}, b TemplateParamType{name: T}) TemplateParamType{name: T}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType int, unboundFuncParam{typ: <nil>}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType untyped int (2), unboundFuncParam{typ: int}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Return 1\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType int, int\n[Go+ CI/Test]   | 2023/05/30 11:34:02 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Return 1\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType func(i int) int, func(int) int\n[Go+ CI/Test]   | 2023/05/30 11:34:02 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> ASTFile \n[Go+ CI/Test]   | --- PASS: TestLambdaExpr3 (0.00s)\n[Go+ CI/Test]   | === RUN   TestUnnamedMainFunc\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Preload func main\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Load func main\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewFunc main func()\n[Go+ CI/Test]   | 2023/05/30 11:34:02 DefineVarStart [i]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 INT 1} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:34:02 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> ASTFile \n[Go+ CI/Test]   | --- PASS: TestUnnamedMainFunc (0.00s)\n[Go+ CI/Test]   | === RUN   TestFuncAsParam\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Preload func bar\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Preload func main\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Load func bar\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewFunc bar func(foo func(string, ...interface{}) (int, error))\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val foo func(string, ...interface{}) (int, error)\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 STRING \"Hello, %v!\\n\"} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 STRING \"Go+\"} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Call 2 0 // func(string, ...interface{}) (int, error)\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall func(string, ...interface{}) (int, error)\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType untyped string (\"Hello, %v!\\n\"), string\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType untyped string (\"Go+\"), interface{}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Load func main\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewFunc main func()\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val bar func(foo func(string, ...interface{}) (int, error))\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val Printf func(format string, a ...interface{}) (n int, err error)\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Call 1 0 // func(foo func(string, ...interface{}) (int, error))\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall func(foo func(string, ...interface{}) (int, error))\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType func(format string, a ...interface{}) (n int, err error), func(string, ...interface{}) (int, error)\n[Go+ CI/Test]   | 2023/05/30 11:34:02 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> ASTFile \n[Go+ CI/Test]   | --- PASS: TestFuncAsParam (0.00s)\n[Go+ CI/Test]   | === RUN   TestFuncAsParam2\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Preload func foo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Preload func printf\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Preload func bar\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Preload func main\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Load func foo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewFunc foo func(x string) string\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val NewReplacer func(oldnew ...string) *strings.Replacer\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 STRING \"?\"} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 STRING \"!\"} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Call 2 0 // func(oldnew ...string) *strings.Replacer\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall func(oldnew ...string) *strings.Replacer\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType untyped string (\"?\"), string\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType untyped string (\"!\"), string\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Member Replace 1 // *strings.Replacer\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val x string\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Call 1 0 // func(s string) string\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall func(s string) string\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType string, string\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Return 1\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType string, string\n[Go+ CI/Test]   | 2023/05/30 11:34:02 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Load func printf\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewFunc printf func(format string, args ...interface{}) (n int, err error)\n[Go+ CI/Test]   | 2023/05/30 11:34:02 VarRef n int\n[Go+ CI/Test]   | 2023/05/30 11:34:02 VarRef err error\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val Printf func(format string, a ...interface{}) (n int, err error)\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val format string\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val args []interface{}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Call 2 3 // func(format string, a ...interface{}) (n int, err error)\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall func(format string, a ...interface{}) (n int, err error)\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType string, string\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType []interface{}, []interface{}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Assign 2 1\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType int, int\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType error, error\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> EnsureLoaded error\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> EnsureLoaded error\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Return 0\n[Go+ CI/Test]   | 2023/05/30 11:34:02 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Load func bar\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewFunc bar func(foo func(string, ...interface{}) (int, error))\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val foo func(string, ...interface{}) (int, error)\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 STRING \"Hello, %v!\\n\"} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 STRING \"Go+\"} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Call 2 0 // func(string, ...interface{}) (int, error)\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall func(string, ...interface{}) (int, error)\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType untyped string (\"Hello, %v!\\n\"), string\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType untyped string (\"Go+\"), interface{}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Load func main\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewFunc main func()\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val bar func(foo func(string, ...interface{}) (int, error))\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val printf func(format string, args ...interface{}) (n int, err error)\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Call 1 0 // func(foo func(string, ...interface{}) (int, error))\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall func(foo func(string, ...interface{}) (int, error))\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType func(format string, args ...interface{}) (n int, err error), func(string, ...interface{}) (int, error)\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val Println func(a ...interface{}) (n int, err error)\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val foo func(x string) string\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 STRING \"Hello, world???\"} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Call 1 0 // func(x string) string\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall func(x string) string\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType untyped string (\"Hello, world???\"), string\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Call 1 0 // func(a ...interface{}) (n int, err error)\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall func(a ...interface{}) (n int, err error)\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType string, interface{}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val Println func(a ...interface{}) (n int, err error)\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val printf func(format string, args ...interface{}) (n int, err error)\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 STRING \"Hello, %v\\n\"} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 STRING \"Go+\"} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Call 2 0 // func(format string, args ...interface{}) (n int, err error)\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall func(format string, args ...interface{}) (n int, err error)\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType untyped string (\"Hello, %v\\n\"), string\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType untyped string (\"Go+\"), interface{}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Call 1 0 // func(a ...interface{}) (n int, err error)\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall func(a ...interface{}) (n int, err error)\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType int, interface{}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType error, interface{}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> EnsureLoaded error\n[Go+ CI/Test]   | 2023/05/30 11:34:02 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> ASTFile \n[Go+ CI/Test]   | --- PASS: TestFuncAsParam2 (0.00s)\n[Go+ CI/Test]   | === RUN   TestFuncCall\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Preload func main\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Load func main\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewFunc main func()\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val Println func(a ...interface{}) (n int, err error)\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 STRING \"Hello\"} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Call 1 0 // func(a ...interface{}) (n int, err error)\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall func(a ...interface{}) (n int, err error)\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType untyped string (\"Hello\"), interface{}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> ASTFile \n[Go+ CI/Test]   | --- PASS: TestFuncCall (0.00s)\n[Go+ CI/Test]   | === RUN   TestFuncCallEllipsis\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Preload func foo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Preload func main\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Load func foo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewFunc foo func(args ...interface{})\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val Println func(a ...interface{}) (n int, err error)\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val args []interface{}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Call 1 1 // func(a ...interface{}) (n int, err error)\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall func(a ...interface{}) (n int, err error)\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType []interface{}, []interface{}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Load func main\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewFunc main func()\n[Go+ CI/Test]   | 2023/05/30 11:34:02 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> ASTFile \n[Go+ CI/Test]   | --- PASS: TestFuncCallEllipsis (0.00s)\n[Go+ CI/Test]   | === RUN   TestFuncCallCodeOrder\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Preload func main\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Preload func foo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Load func main\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewFunc main func()\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Load func foo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewFunc foo func(args ...interface{})\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val Println func(a ...interface{}) (n int, err error)\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val args []interface{}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Call 1 1 // func(a ...interface{}) (n int, err error)\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall func(a ...interface{}) (n int, err error)\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType []interface{}, []interface{}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val foo func(args ...interface{})\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 STRING \"Hello\"} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 INT 123} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Call 2 0 // func(args ...interface{})\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall func(args ...interface{})\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType untyped string (\"Hello\"), interface{}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType untyped int (123), interface{}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> ASTFile \n[Go+ CI/Test]   | --- PASS: TestFuncCallCodeOrder (0.00s)\n[Go+ CI/Test]   | === RUN   TestInterfaceMethods\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Preload func foo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Preload func main\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Load func foo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewFunc foo func(v ...interface{Bar()})\n[Go+ CI/Test]   | 2023/05/30 11:34:02 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Load func main\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewFunc main func()\n[Go+ CI/Test]   | 2023/05/30 11:34:02 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> ASTFile \n[Go+ CI/Test]   | --- PASS: TestInterfaceMethods (0.00s)\n[Go+ CI/Test]   | === RUN   TestAssignUnderscore\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Preload func main\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Load func main\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewFunc main func()\n[Go+ CI/Test]   | 2023/05/30 11:34:02 DefineVarStart [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val Println func(a ...interface{}) (n int, err error)\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 STRING \"Hello\"} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Call 1 2 // func(a ...interface{}) (n int, err error)\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall func(a ...interface{}) (n int, err error)\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType untyped string (\"Hello\"), interface{}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:34:02 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> ASTFile \n[Go+ CI/Test]   | --- PASS: TestAssignUnderscore (0.00s)\n[Go+ CI/Test]   | === RUN   TestOperator\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Preload func main\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Load func main\n[Go+ CI/Test]   | 2023/05/30 11:34:02 NewFunc main func()\n[Go+ CI/Test]   | 2023/05/30 11:34:02 DefineVarStart [a]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 STRING \"Hi\"} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:34:02 DefineVarStart [b]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val a string\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 STRING \"!\"} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 BinaryOp +\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall func(a TemplateParamType{name: T}, b TemplateParamType{name: T}) TemplateParamType{name: T}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType string, unboundFuncParam{typ: <nil>}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType untyped string (\"!\"), unboundFuncParam{typ: string}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:34:02 DefineVarStart [c]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val &{0 INT 13} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:02 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:34:02 DefineVarStart [d]\n[Go+ CI/Test]   | 2023/05/30 11:34:02 Val c int\n[Go+ CI/Test]   | 2023/05/30 11:34:02 UnaryOp - flags: 0\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchFuncCall func(a TemplateParamType{name: T}) TemplateParamType{name: T}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> MatchType int, unboundFuncParam{typ: <nil>}\n[Go+ CI/Test]   | 2023/05/30 11:34:02 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:34:02 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> ASTFile \n[Go+ CI/Test]   | --- PASS: TestOperator (0.00s)\n[Go+ CI/Test]   | === RUN   TestImportGopPkg\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:02 ==> Preload func ReverseMap\n[Go+ CI/Test]   | 2023/05/30 11:34:03 ==> Preload func TestReverseMap\n[Go+ CI/Test]   | 2023/05/30 11:34:03 ==> Load func TestReverseMap\n[Go+ CI/Test]   | 2023/05/30 11:34:03 NewFunc TestReverseMap func(t *testing.T)\n[Go+ CI/Test]   | 2023/05/30 11:34:03 SetComments 0 \n[Go+ CI/Test]   | //line ../cl/internal/gop-in-go/foo/foo_test.gop:8\n[Go+ CI/Test]   | 2023/05/30 11:34:03 DefineVarStart [out]\n[Go+ CI/Test]   | 2023/05/30 11:34:03 ==> Load func ReverseMap\n[Go+ CI/Test]   | 2023/05/30 11:34:03 NewFunc ReverseMap func(m map[string]int) map[int]string\n[Go+ CI/Test]   | 2023/05/30 11:34:03 SetComments 0 \n[Go+ CI/Test]   | //line ../cl/internal/gop-in-go/foo/foo.gop:4\n[Go+ CI/Test]   | 2023/05/30 11:34:03 NewClosure func() (_gop_ret unboundType{typ: <nil>})\n[Go+ CI/Test]   | 2023/05/30 11:34:03 VarRef _gop_ret unboundType{typ: <nil>}\n[Go+ CI/Test]   | 2023/05/30 11:34:03 ZeroLit // unboundType{typ: <nil>}\n[Go+ CI/Test]   | 2023/05/30 11:34:03 Assign 1 1\n[Go+ CI/Test]   | 2023/05/30 11:34:03 ==> MatchType unboundType{typ: <nil>}, unboundType{typ: <nil>}\n[Go+ CI/Test]   | 2023/05/30 11:34:03 ForRange [k v]\n[Go+ CI/Test]   | 2023/05/30 11:34:03 Val m map[string]int\n[Go+ CI/Test]   | 2023/05/30 11:34:03 RangeAssignThen\n[Go+ CI/Test]   | 2023/05/30 11:34:03 Val _gop_ret unboundType{typ: <nil>}\n[Go+ CI/Test]   | 2023/05/30 11:34:03 Val v int\n[Go+ CI/Test]   | 2023/05/30 11:34:03 IndexRef 1\n[Go+ CI/Test]   | 2023/05/30 11:34:03 Val k string\n[Go+ CI/Test]   | 2023/05/30 11:34:03 Assign 1 1\n[Go+ CI/Test]   | 2023/05/30 11:34:03 ==> MatchType string, unboundMapElemType{key: int}\n[Go+ CI/Test]   | 2023/05/30 11:34:03 End // ForRange\n[Go+ CI/Test]   | 2023/05/30 11:34:03 Return 0\n[Go+ CI/Test]   | 2023/05/30 11:34:03 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:03 Call 0 0 // func() (_gop_ret map[int]string)\n[Go+ CI/Test]   | 2023/05/30 11:34:03 ==> MatchFuncCall func() (_gop_ret map[int]string)\n[Go+ CI/Test]   | 2023/05/30 11:34:03 Return 1\n[Go+ CI/Test]   | 2023/05/30 11:34:03 ==> MatchType map[int]string, map[int]string\n[Go+ CI/Test]   | 2023/05/30 11:34:03 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:03 Val ReverseMap func(m map[string]int) map[int]string\n[Go+ CI/Test]   | 2023/05/30 11:34:03 Val &{0 STRING \"a\"} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:03 Val &{0 INT 1} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:03 MapLit <nil> 2\n[Go+ CI/Test]   | 2023/05/30 11:34:03 Call 1 0 // func(m map[string]int) map[int]string\n[Go+ CI/Test]   | 2023/05/30 11:34:03 ==> MatchFuncCall func(m map[string]int) map[int]string\n[Go+ CI/Test]   | 2023/05/30 11:34:03 ==> MatchType map[string]int, map[string]int\n[Go+ CI/Test]   | 2023/05/30 11:34:03 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:34:03 SetComments 0 \n[Go+ CI/Test]   | //line ../cl/internal/gop-in-go/foo/foo_test.gop:9\n[Go+ CI/Test]   | 2023/05/30 11:34:03 If\n[Go+ CI/Test]   | 2023/05/30 11:34:03 Val len instructionType{instr: gox.lenInstr}\n[Go+ CI/Test]   | 2023/05/30 11:34:03 Val out map[int]string\n[Go+ CI/Test]   | 2023/05/30 11:34:03 Call 1 0 // instructionType{instr: gox.lenInstr}\n[Go+ CI/Test]   | 2023/05/30 11:34:03 ==> MatchFuncCall instructionType{instr: gox.lenInstr}\n[Go+ CI/Test]   | 2023/05/30 11:34:03 Val &{0 INT 1} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:03 BinaryOp !=\n[Go+ CI/Test]   | 2023/05/30 11:34:03 Val out map[int]string\n[Go+ CI/Test]   | 2023/05/30 11:34:03 Val &{0 INT 1} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:03 Index 1 false\n[Go+ CI/Test]   | 2023/05/30 11:34:03 Val &{0 STRING \"a\"} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:03 BinaryOp !=\n[Go+ CI/Test]   | 2023/05/30 11:34:03 BinaryOp ||\n[Go+ CI/Test]   | 2023/05/30 11:34:03 ==> MatchFuncCall func(a TemplateParamType{name: T}, b TemplateParamType{name: T}) TemplateParamType{name: T}\n[Go+ CI/Test]   | 2023/05/30 11:34:03 ==> MatchType untyped bool, unboundFuncParam{typ: <nil>}\n[Go+ CI/Test]   | 2023/05/30 11:34:03 ==> MatchType untyped bool, unboundFuncParam{typ: untyped bool}\n[Go+ CI/Test]   | 2023/05/30 11:34:03 Then\n[Go+ CI/Test]   | 2023/05/30 11:34:03 SetComments 0 \n[Go+ CI/Test]   | //line ../cl/internal/gop-in-go/foo/foo_test.gop:10\n[Go+ CI/Test]   | 2023/05/30 11:34:03 Val t *testing.T\n[Go+ CI/Test]   | 2023/05/30 11:34:03 Member Fatal 1 // *testing.T\n[Go+ CI/Test]   | 2023/05/30 11:34:03 Val &{0 STRING \"ReverseMap failed:\"} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:03 Val out map[int]string\n[Go+ CI/Test]   | 2023/05/30 11:34:03 Call 2 0 // func(args ...interface{})\n[Go+ CI/Test]   | 2023/05/30 11:34:03 ==> MatchFuncCall func(args ...interface{})\n[Go+ CI/Test]   | 2023/05/30 11:34:03 ==> MatchType untyped string (\"ReverseMap failed:\"), interface{}\n[Go+ CI/Test]   | 2023/05/30 11:34:03 ==> MatchType map[int]string, interface{}\n[Go+ CI/Test]   | 2023/05/30 11:34:03 SetComments 0 \n[Go+ CI/Test]   | //line ../cl/internal/gop-in-go/foo/foo_test.gop:9\n[Go+ CI/Test]   | 2023/05/30 11:34:03 End // If\n[Go+ CI/Test]   | 2023/05/30 11:34:03 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:03 ==> ASTFile \n[Go+ CI/Test]   | 2023/05/30 11:34:03 WriteFile ../cl/internal/gop-in-go/foo/gop_autogen.go\n[Go+ CI/Test]   | 2023/05/30 11:34:03 ==> ASTFile _test\n[Go+ CI/Test]   | 2023/05/30 11:34:03 WriteFile ../cl/internal/gop-in-go/foo/gop_autogen_test.go\n[Go+ CI/Test]   | 2023/05/30 11:34:03 ==> Preload func main\n[Go+ CI/Test]   | 2023/05/30 11:34:03 ==> Load func main\n[Go+ CI/Test]   | 2023/05/30 11:34:03 NewFunc main func()\n[Go+ CI/Test]   | 2023/05/30 11:34:03 DefineVarStart [rmap]\n[Go+ CI/Test]   | 2023/05/30 11:34:03 Val ReverseMap func(m map[string]int) map[int]string\n[Go+ CI/Test]   | 2023/05/30 11:34:03 Val &{0 STRING \"Hi\"} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:03 Val &{0 INT 1} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:03 Val &{0 STRING \"Hello\"} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:03 Val &{0 INT 2} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:03 MapLit map[string]int 4\n[Go+ CI/Test]   | 2023/05/30 11:34:03 Call 1 0 // func(m map[string]int) map[int]string\n[Go+ CI/Test]   | 2023/05/30 11:34:03 ==> MatchFuncCall func(m map[string]int) map[int]string\n[Go+ CI/Test]   | 2023/05/30 11:34:03 ==> MatchType map[string]int, map[string]int\n[Go+ CI/Test]   | 2023/05/30 11:34:03 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:34:03 Val println overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:03 Val rmap map[int]string\n[Go+ CI/Test]   | 2023/05/30 11:34:03 Call 1 0 // overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:03 ==> MatchFuncCall overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:03 ==> MatchFuncCall func(a ...interface{}) (n int, err error)\n[Go+ CI/Test]   | 2023/05/30 11:34:03 ==> MatchType map[int]string, interface{}\n[Go+ CI/Test]   | 2023/05/30 11:34:03 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:03 ==> ASTFile \n[Go+ CI/Test]   | --- PASS: TestImportGopPkg (1.08s)\n[Go+ CI/Test]   | === RUN   TestCallDep\n[Go+ CI/Test]   | 2023/05/30 11:34:03 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:03 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:03 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:03 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:03 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:03 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:03 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:03 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:03 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:03 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:03 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:03 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:03 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:03 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:03 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:03 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:03 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:03 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:03 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:03 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:03 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:03 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:03 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:03 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:03 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:03 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:03 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:03 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:03 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:03 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:03 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:03 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:03 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:03 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:03 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:03 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:03 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:03 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:03 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:03 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:03 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:03 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:03 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:03 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Preload func TestNew\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Preload type Repo\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Preload func newRepo\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Preload type Result\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Preload func New\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Load func TestNew\n[Go+ CI/Test]   | 2023/05/30 11:34:04 NewFunc TestNew func(t *testing.T)\n[Go+ CI/Test]   | 2023/05/30 11:34:04 DefineVarStart [ret]\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Load func New\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Load > NewType Result\n[Go+ CI/Test]   | 2023/05/30 11:34:04 NewType Result\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Lookup (LoadSymbol) Result => type github.com/goplus/gop/cl.Result <nil>\n[Go+ CI/Test]   | 2023/05/30 11:34:04 NewFunc New func() github.com/goplus/gop/cl.Result\n[Go+ CI/Test]   | 2023/05/30 11:34:04 DefineVarStart [repo]\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Load func newRepo\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Load > NewType Repo\n[Go+ CI/Test]   | 2023/05/30 11:34:04 NewType Repo\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Lookup (LoadSymbol) Repo => type github.com/goplus/gop/cl.Repo <nil>\n[Go+ CI/Test]   | 2023/05/30 11:34:04 NewFunc newRepo func() github.com/goplus/gop/cl.Repo\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Load > InitType Repo\n[Go+ CI/Test]   | 2023/05/30 11:34:04 InitType Repo struct{Title string}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Val 0 int\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Val &{0 STRING \"Hi\"} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:04 StructLit github.com/goplus/gop/cl.Repo 2 true\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Return 1\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchType github.com/goplus/gop/cl.Repo, github.com/goplus/gop/cl.Repo\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> EnsureLoaded github.com/goplus/gop/cl.Repo\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> EnsureLoaded github.com/goplus/gop/cl.Repo\n[Go+ CI/Test]   | 2023/05/30 11:34:04 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Val newRepo func() github.com/goplus/gop/cl.Repo\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Call 0 0 // func() github.com/goplus/gop/cl.Repo\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchFuncCall func() github.com/goplus/gop/cl.Repo\n[Go+ CI/Test]   | 2023/05/30 11:34:04 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Load > InitType Result\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> LookupParent Repo => type github.com/goplus/gop/cl.Repo struct{Title string}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 InitType Result struct{Repo github.com/goplus/gop/cl.Repo}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Val 0 int\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Val repo github.com/goplus/gop/cl.Repo\n[Go+ CI/Test]   | 2023/05/30 11:34:04 StructLit github.com/goplus/gop/cl.Result 2 true\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> EnsureLoaded github.com/goplus/gop/cl.Repo\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> EnsureLoaded github.com/goplus/gop/cl.Repo\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Return 1\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchType github.com/goplus/gop/cl.Result, github.com/goplus/gop/cl.Result\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> EnsureLoaded github.com/goplus/gop/cl.Result\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> EnsureLoaded github.com/goplus/gop/cl.Result\n[Go+ CI/Test]   | 2023/05/30 11:34:04 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Val New func() github.com/goplus/gop/cl.Result\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Call 0 0 // func() github.com/goplus/gop/cl.Result\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchFuncCall func() github.com/goplus/gop/cl.Result\n[Go+ CI/Test]   | 2023/05/30 11:34:04 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:34:04 DefineVarStart [expected]\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> LookupParent Result => type github.com/goplus/gop/cl.Result struct{Repo github.com/goplus/gop/cl.Repo}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 StructLit github.com/goplus/gop/cl.Result 0 false\n[Go+ CI/Test]   | 2023/05/30 11:34:04 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:34:04 If\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Val DeepEqual func(x interface{}, y interface{}) bool\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Val ret github.com/goplus/gop/cl.Result\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Val expected github.com/goplus/gop/cl.Result\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Call 2 0 // func(x interface{}, y interface{}) bool\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchFuncCall func(x interface{}, y interface{}) bool\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchType github.com/goplus/gop/cl.Result, interface{}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> EnsureLoaded github.com/goplus/gop/cl.Result\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchType github.com/goplus/gop/cl.Result, interface{}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> EnsureLoaded github.com/goplus/gop/cl.Result\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Then\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Val t *testing.T\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Member Fatal 1 // *testing.T\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Val &{0 STRING \"Test failed:\"} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Val ret github.com/goplus/gop/cl.Result\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Val expected github.com/goplus/gop/cl.Result\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Call 3 0 // func(args ...interface{})\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchFuncCall func(args ...interface{})\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchType untyped string (\"Test failed:\"), interface{}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchType github.com/goplus/gop/cl.Result, interface{}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> EnsureLoaded github.com/goplus/gop/cl.Result\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchType github.com/goplus/gop/cl.Result, interface{}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> EnsureLoaded github.com/goplus/gop/cl.Result\n[Go+ CI/Test]   | 2023/05/30 11:34:04 End // If\n[Go+ CI/Test]   | 2023/05/30 11:34:04 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> ASTFile \n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Preload func TestNew\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Preload type Repo\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Preload func newRepo\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Preload type Result\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Preload func New\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Load func TestNew\n[Go+ CI/Test]   | 2023/05/30 11:34:04 NewFunc TestNew func(t *testing.T)\n[Go+ CI/Test]   | 2023/05/30 11:34:04 DefineVarStart [ret]\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Load func New\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Load > NewType Result\n[Go+ CI/Test]   | 2023/05/30 11:34:04 NewType Result\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Lookup (LoadSymbol) Result => type github.com/goplus/gop/cl.Result <nil>\n[Go+ CI/Test]   | 2023/05/30 11:34:04 NewFunc New func() github.com/goplus/gop/cl.Result\n[Go+ CI/Test]   | 2023/05/30 11:34:04 DefineVarStart [repo]\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Load func newRepo\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Load > NewType Repo\n[Go+ CI/Test]   | 2023/05/30 11:34:04 NewType Repo\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Lookup (LoadSymbol) Repo => type github.com/goplus/gop/cl.Repo <nil>\n[Go+ CI/Test]   | 2023/05/30 11:34:04 NewFunc newRepo func() github.com/goplus/gop/cl.Repo\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Load > InitType Repo\n[Go+ CI/Test]   | 2023/05/30 11:34:04 InitType Repo struct{Title string}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Val 0 int\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Val &{0 STRING \"Hi\"} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:04 StructLit github.com/goplus/gop/cl.Repo 2 true\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Return 1\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchType github.com/goplus/gop/cl.Repo, github.com/goplus/gop/cl.Repo\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> EnsureLoaded github.com/goplus/gop/cl.Repo\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> EnsureLoaded github.com/goplus/gop/cl.Repo\n[Go+ CI/Test]   | 2023/05/30 11:34:04 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Val newRepo func() github.com/goplus/gop/cl.Repo\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Call 0 0 // func() github.com/goplus/gop/cl.Repo\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchFuncCall func() github.com/goplus/gop/cl.Repo\n[Go+ CI/Test]   | 2023/05/30 11:34:04 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Load > InitType Result\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> LookupParent Repo => type github.com/goplus/gop/cl.Repo struct{Title string}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 InitType Result struct{Repo github.com/goplus/gop/cl.Repo}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Val 0 int\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Val repo github.com/goplus/gop/cl.Repo\n[Go+ CI/Test]   | 2023/05/30 11:34:04 StructLit github.com/goplus/gop/cl.Result 2 true\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> EnsureLoaded github.com/goplus/gop/cl.Repo\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> EnsureLoaded github.com/goplus/gop/cl.Repo\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Return 1\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchType github.com/goplus/gop/cl.Result, github.com/goplus/gop/cl.Result\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> EnsureLoaded github.com/goplus/gop/cl.Result\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> EnsureLoaded github.com/goplus/gop/cl.Result\n[Go+ CI/Test]   | 2023/05/30 11:34:04 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Val New func() github.com/goplus/gop/cl.Result\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Call 0 0 // func() github.com/goplus/gop/cl.Result\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchFuncCall func() github.com/goplus/gop/cl.Result\n[Go+ CI/Test]   | 2023/05/30 11:34:04 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:34:04 DefineVarStart [expected]\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> LookupParent Result => type github.com/goplus/gop/cl.Result struct{Repo github.com/goplus/gop/cl.Repo}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 StructLit github.com/goplus/gop/cl.Result 0 false\n[Go+ CI/Test]   | 2023/05/30 11:34:04 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:34:04 If\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Val DeepEqual func(x interface{}, y interface{}) bool\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Val ret github.com/goplus/gop/cl.Result\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Val expected github.com/goplus/gop/cl.Result\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Call 2 0 // func(x interface{}, y interface{}) bool\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchFuncCall func(x interface{}, y interface{}) bool\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchType github.com/goplus/gop/cl.Result, interface{}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> EnsureLoaded github.com/goplus/gop/cl.Result\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchType github.com/goplus/gop/cl.Result, interface{}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> EnsureLoaded github.com/goplus/gop/cl.Result\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Then\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Val t *testing.T\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Member Fatal 1 // *testing.T\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Val &{0 STRING \"Test failed:\"} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Val ret github.com/goplus/gop/cl.Result\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Val expected github.com/goplus/gop/cl.Result\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Call 3 0 // func(args ...interface{})\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchFuncCall func(args ...interface{})\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchType untyped string (\"Test failed:\"), interface{}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchType github.com/goplus/gop/cl.Result, interface{}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> EnsureLoaded github.com/goplus/gop/cl.Result\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchType github.com/goplus/gop/cl.Result, interface{}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> EnsureLoaded github.com/goplus/gop/cl.Result\n[Go+ CI/Test]   | 2023/05/30 11:34:04 End // If\n[Go+ CI/Test]   | 2023/05/30 11:34:04 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> ASTFile \n[Go+ CI/Test]   | --- PASS: TestCallDep (0.70s)\n[Go+ CI/Test]   | === RUN   TestRangeExpr\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Preload func main\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Load func main\n[Go+ CI/Test]   | 2023/05/30 11:34:04 NewFunc main func()\n[Go+ CI/Test]   | 2023/05/30 11:34:04 For\n[Go+ CI/Test]   | 2023/05/30 11:34:04 DefineVarStart [i]\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Val &{0 INT 0} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:04 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Val i int\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Val &{0 INT 10} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:04 BinaryOp <\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchFuncCall func(a TemplateParamType{name: T}, b TemplateParamType{name: T}) untyped bool\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchType int, unboundFuncParam{typ: <nil>}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchType untyped int (10), unboundFuncParam{typ: int}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Then\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Val println overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Val i int\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Call 1 0 // overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchFuncCall overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchFuncCall func(a ...interface{}) (n int, err error)\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchType int, interface{}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Post\n[Go+ CI/Test]   | 2023/05/30 11:34:04 VarRef i int\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Val &{0 INT 1} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:04 AssignOp += Gop_AddAssign\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchFuncCall func(a unboundProxyParam{typ: *TemplateParamType{name: T}}, b TemplateParamType{name: T})\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchType refType{typ: int}, unboundProxyParam{typ: *unboundFuncParam{typ: <nil>}}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchType untyped int (1), unboundFuncParam{typ: int}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 End // For\n[Go+ CI/Test]   | 2023/05/30 11:34:04 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> ASTFile \n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Preload func main\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Load func main\n[Go+ CI/Test]   | 2023/05/30 11:34:04 NewFunc main func()\n[Go+ CI/Test]   | 2023/05/30 11:34:04 For\n[Go+ CI/Test]   | 2023/05/30 11:34:04 DefineVarStart [i]\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Val &{0 INT 0} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:04 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Val i int\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Val &{0 INT 10} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:04 BinaryOp <\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchFuncCall func(a TemplateParamType{name: T}, b TemplateParamType{name: T}) untyped bool\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchType int, unboundFuncParam{typ: <nil>}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchType untyped int (10), unboundFuncParam{typ: int}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Then\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Val println overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Val i int\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Call 1 0 // overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchFuncCall overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchFuncCall func(a ...interface{}) (n int, err error)\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchType int, interface{}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Post\n[Go+ CI/Test]   | 2023/05/30 11:34:04 VarRef i int\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Val &{0 INT 1} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:04 AssignOp += Gop_AddAssign\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchFuncCall func(a unboundProxyParam{typ: *TemplateParamType{name: T}}, b TemplateParamType{name: T})\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchType refType{typ: int}, unboundProxyParam{typ: *unboundFuncParam{typ: <nil>}}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchType untyped int (1), unboundFuncParam{typ: int}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 End // For\n[Go+ CI/Test]   | 2023/05/30 11:34:04 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> ASTFile \n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Preload func main\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Load func main\n[Go+ CI/Test]   | 2023/05/30 11:34:04 NewFunc main func()\n[Go+ CI/Test]   | 2023/05/30 11:34:04 DefineVarStart [i]\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Val &{0 INT 0} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:04 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:34:04 For\n[Go+ CI/Test]   | 2023/05/30 11:34:04 VarRef i int\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Val &{0 INT 0} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Assign 1 1\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchType untyped int (0), int\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Val i int\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Val &{0 INT 10} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:04 BinaryOp <\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchFuncCall func(a TemplateParamType{name: T}, b TemplateParamType{name: T}) untyped bool\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchType int, unboundFuncParam{typ: <nil>}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchType untyped int (10), unboundFuncParam{typ: int}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Then\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Val println overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Val i int\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Call 1 0 // overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchFuncCall overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchFuncCall func(a ...interface{}) (n int, err error)\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchType int, interface{}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Post\n[Go+ CI/Test]   | 2023/05/30 11:34:04 VarRef i int\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Val &{0 INT 1} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:04 AssignOp += Gop_AddAssign\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchFuncCall func(a unboundProxyParam{typ: *TemplateParamType{name: T}}, b TemplateParamType{name: T})\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchType refType{typ: int}, unboundProxyParam{typ: *unboundFuncParam{typ: <nil>}}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchType untyped int (1), unboundFuncParam{typ: int}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 End // For\n[Go+ CI/Test]   | 2023/05/30 11:34:04 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> ASTFile \n[Go+ CI/Test]   | --- PASS: TestRangeExpr (0.00s)\n[Go+ CI/Test]   | === RUN   TestRangeExpr2\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Preload func main\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Load func main\n[Go+ CI/Test]   | 2023/05/30 11:34:04 NewFunc main func()\n[Go+ CI/Test]   | 2023/05/30 11:34:04 For\n[Go+ CI/Test]   | 2023/05/30 11:34:04 DefineVarStart [i]\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Val &{0 INT 1} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:04 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Val i int\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Val &{0 INT 10} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:04 BinaryOp <\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchFuncCall func(a TemplateParamType{name: T}, b TemplateParamType{name: T}) untyped bool\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchType int, unboundFuncParam{typ: <nil>}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchType untyped int (10), unboundFuncParam{typ: int}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Then\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Val println overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Val i int\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Call 1 0 // overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchFuncCall overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchFuncCall func(a ...interface{}) (n int, err error)\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchType int, interface{}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Post\n[Go+ CI/Test]   | 2023/05/30 11:34:04 VarRef i int\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Val &{0 INT 2} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:04 AssignOp += Gop_AddAssign\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchFuncCall func(a unboundProxyParam{typ: *TemplateParamType{name: T}}, b TemplateParamType{name: T})\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchType refType{typ: int}, unboundProxyParam{typ: *unboundFuncParam{typ: <nil>}}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchType untyped int (2), unboundFuncParam{typ: int}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 End // For\n[Go+ CI/Test]   | 2023/05/30 11:34:04 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> ASTFile \n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Preload func main\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Load func main\n[Go+ CI/Test]   | 2023/05/30 11:34:04 NewFunc main func()\n[Go+ CI/Test]   | 2023/05/30 11:34:04 For\n[Go+ CI/Test]   | 2023/05/30 11:34:04 DefineVarStart [i]\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Val &{0 INT 1} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:04 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Val i int\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Val &{0 INT 10} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:04 BinaryOp <\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchFuncCall func(a TemplateParamType{name: T}, b TemplateParamType{name: T}) untyped bool\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchType int, unboundFuncParam{typ: <nil>}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchType untyped int (10), unboundFuncParam{typ: int}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Then\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Val println overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Val i int\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Call 1 0 // overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchFuncCall overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchFuncCall func(a ...interface{}) (n int, err error)\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchType int, interface{}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Post\n[Go+ CI/Test]   | 2023/05/30 11:34:04 VarRef i int\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Val &{0 INT 2} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:04 AssignOp += Gop_AddAssign\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchFuncCall func(a unboundProxyParam{typ: *TemplateParamType{name: T}}, b TemplateParamType{name: T})\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchType refType{typ: int}, unboundProxyParam{typ: *unboundFuncParam{typ: <nil>}}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchType untyped int (2), unboundFuncParam{typ: int}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 End // For\n[Go+ CI/Test]   | 2023/05/30 11:34:04 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> ASTFile \n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Preload func main\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Load func main\n[Go+ CI/Test]   | 2023/05/30 11:34:04 NewFunc main func()\n[Go+ CI/Test]   | 2023/05/30 11:34:04 DefineVarStart [i]\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Val &{0 INT 0} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:04 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:34:04 For\n[Go+ CI/Test]   | 2023/05/30 11:34:04 VarRef i int\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Val &{0 INT 1} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Assign 1 1\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchType untyped int (1), int\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Val i int\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Val &{0 INT 10} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:04 BinaryOp <\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchFuncCall func(a TemplateParamType{name: T}, b TemplateParamType{name: T}) untyped bool\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchType int, unboundFuncParam{typ: <nil>}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchType untyped int (10), unboundFuncParam{typ: int}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Then\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Val println overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Val i int\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Call 1 0 // overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchFuncCall overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchFuncCall func(a ...interface{}) (n int, err error)\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchType int, interface{}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Post\n[Go+ CI/Test]   | 2023/05/30 11:34:04 VarRef i int\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Val &{0 INT 2} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:04 AssignOp += Gop_AddAssign\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchFuncCall func(a unboundProxyParam{typ: *TemplateParamType{name: T}}, b TemplateParamType{name: T})\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchType refType{typ: int}, unboundProxyParam{typ: *unboundFuncParam{typ: <nil>}}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchType untyped int (2), unboundFuncParam{typ: int}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 End // For\n[Go+ CI/Test]   | 2023/05/30 11:34:04 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> ASTFile \n[Go+ CI/Test]   | --- PASS: TestRangeExpr2 (0.00s)\n[Go+ CI/Test]   | === RUN   TestRangeExpr3\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Preload func main\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Load func main\n[Go+ CI/Test]   | 2023/05/30 11:34:04 NewFunc main func()\n[Go+ CI/Test]   | 2023/05/30 11:34:04 For\n[Go+ CI/Test]   | 2023/05/30 11:34:04 DefineVarStart [i]\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Val &{0 INT 1} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:04 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Val i int\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Val &{0 INT 10} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:04 BinaryOp <\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchFuncCall func(a TemplateParamType{name: T}, b TemplateParamType{name: T}) untyped bool\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchType int, unboundFuncParam{typ: <nil>}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchType untyped int (10), unboundFuncParam{typ: int}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Then\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Val println overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Val i int\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Call 1 0 // overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchFuncCall overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchFuncCall func(a ...interface{}) (n int, err error)\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchType int, interface{}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Post\n[Go+ CI/Test]   | 2023/05/30 11:34:04 VarRef i int\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Val &{0 INT 1} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:04 AssignOp += Gop_AddAssign\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchFuncCall func(a unboundProxyParam{typ: *TemplateParamType{name: T}}, b TemplateParamType{name: T})\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchType refType{typ: int}, unboundProxyParam{typ: *unboundFuncParam{typ: <nil>}}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchType untyped int (1), unboundFuncParam{typ: int}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 End // For\n[Go+ CI/Test]   | 2023/05/30 11:34:04 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> ASTFile \n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Preload func main\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Load func main\n[Go+ CI/Test]   | 2023/05/30 11:34:04 NewFunc main func()\n[Go+ CI/Test]   | 2023/05/30 11:34:04 For\n[Go+ CI/Test]   | 2023/05/30 11:34:04 DefineVarStart [i]\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Val &{0 INT 1} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:04 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Val i int\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Val &{0 INT 10} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:04 BinaryOp <\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchFuncCall func(a TemplateParamType{name: T}, b TemplateParamType{name: T}) untyped bool\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchType int, unboundFuncParam{typ: <nil>}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchType untyped int (10), unboundFuncParam{typ: int}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Then\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Val println overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Val i int\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Call 1 0 // overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchFuncCall overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchFuncCall func(a ...interface{}) (n int, err error)\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchType int, interface{}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Post\n[Go+ CI/Test]   | 2023/05/30 11:34:04 VarRef i int\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Val &{0 INT 1} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:04 AssignOp += Gop_AddAssign\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchFuncCall func(a unboundProxyParam{typ: *TemplateParamType{name: T}}, b TemplateParamType{name: T})\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchType refType{typ: int}, unboundProxyParam{typ: *unboundFuncParam{typ: <nil>}}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchType untyped int (1), unboundFuncParam{typ: int}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 End // For\n[Go+ CI/Test]   | 2023/05/30 11:34:04 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> ASTFile \n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Preload func main\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Load func main\n[Go+ CI/Test]   | 2023/05/30 11:34:04 NewFunc main func()\n[Go+ CI/Test]   | 2023/05/30 11:34:04 DefineVarStart [i]\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Val &{0 INT 0} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:04 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:34:04 For\n[Go+ CI/Test]   | 2023/05/30 11:34:04 VarRef i int\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Val &{0 INT 1} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Assign 1 1\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchType untyped int (1), int\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Val i int\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Val &{0 INT 10} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:04 BinaryOp <\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchFuncCall func(a TemplateParamType{name: T}, b TemplateParamType{name: T}) untyped bool\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchType int, unboundFuncParam{typ: <nil>}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchType untyped int (10), unboundFuncParam{typ: int}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Then\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Val println overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Val i int\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Call 1 0 // overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchFuncCall overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchFuncCall func(a ...interface{}) (n int, err error)\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchType int, interface{}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Post\n[Go+ CI/Test]   | 2023/05/30 11:34:04 VarRef i int\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Val &{0 INT 1} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:04 AssignOp += Gop_AddAssign\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchFuncCall func(a unboundProxyParam{typ: *TemplateParamType{name: T}}, b TemplateParamType{name: T})\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchType refType{typ: int}, unboundProxyParam{typ: *unboundFuncParam{typ: <nil>}}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchType untyped int (1), unboundFuncParam{typ: int}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 End // For\n[Go+ CI/Test]   | 2023/05/30 11:34:04 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> ASTFile \n[Go+ CI/Test]   | --- PASS: TestRangeExpr3 (0.00s)\n[Go+ CI/Test]   | === RUN   TestRangeExpr4\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Preload func main\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Load func main\n[Go+ CI/Test]   | 2023/05/30 11:34:04 NewFunc main func()\n[Go+ CI/Test]   | 2023/05/30 11:34:04 For\n[Go+ CI/Test]   | 2023/05/30 11:34:04 DefineVarStart [i]\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Val &{0 INT 0} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:04 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Val i int\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Val &{0 INT 10} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:04 BinaryOp <\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchFuncCall func(a TemplateParamType{name: T}, b TemplateParamType{name: T}) untyped bool\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchType int, unboundFuncParam{typ: <nil>}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchType untyped int (10), unboundFuncParam{typ: int}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Then\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Val println overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Val i int\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Call 1 0 // overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchFuncCall overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchFuncCall func(a ...interface{}) (n int, err error)\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchType int, interface{}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Post\n[Go+ CI/Test]   | 2023/05/30 11:34:04 VarRef i int\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Val &{0 INT 2} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:04 AssignOp += Gop_AddAssign\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchFuncCall func(a unboundProxyParam{typ: *TemplateParamType{name: T}}, b TemplateParamType{name: T})\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchType refType{typ: int}, unboundProxyParam{typ: *unboundFuncParam{typ: <nil>}}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchType untyped int (2), unboundFuncParam{typ: int}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 End // For\n[Go+ CI/Test]   | 2023/05/30 11:34:04 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> ASTFile \n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Preload func main\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Load func main\n[Go+ CI/Test]   | 2023/05/30 11:34:04 NewFunc main func()\n[Go+ CI/Test]   | 2023/05/30 11:34:04 For\n[Go+ CI/Test]   | 2023/05/30 11:34:04 DefineVarStart [i]\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Val &{0 INT 0} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:04 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Val i int\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Val &{0 INT 10} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:04 BinaryOp <\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchFuncCall func(a TemplateParamType{name: T}, b TemplateParamType{name: T}) untyped bool\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchType int, unboundFuncParam{typ: <nil>}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchType untyped int (10), unboundFuncParam{typ: int}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Then\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Val println overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Val i int\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Call 1 0 // overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchFuncCall overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchFuncCall func(a ...interface{}) (n int, err error)\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchType int, interface{}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Post\n[Go+ CI/Test]   | 2023/05/30 11:34:04 VarRef i int\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Val &{0 INT 2} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:04 AssignOp += Gop_AddAssign\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchFuncCall func(a unboundProxyParam{typ: *TemplateParamType{name: T}}, b TemplateParamType{name: T})\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchType refType{typ: int}, unboundProxyParam{typ: *unboundFuncParam{typ: <nil>}}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchType untyped int (2), unboundFuncParam{typ: int}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 End // For\n[Go+ CI/Test]   | 2023/05/30 11:34:04 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> ASTFile \n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Preload func main\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Load func main\n[Go+ CI/Test]   | 2023/05/30 11:34:04 NewFunc main func()\n[Go+ CI/Test]   | 2023/05/30 11:34:04 DefineVarStart [i]\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Val &{0 INT 0} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:04 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:34:04 For\n[Go+ CI/Test]   | 2023/05/30 11:34:04 VarRef i int\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Val &{0 INT 0} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Assign 1 1\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchType untyped int (0), int\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Val i int\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Val &{0 INT 10} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:04 BinaryOp <\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchFuncCall func(a TemplateParamType{name: T}, b TemplateParamType{name: T}) untyped bool\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchType int, unboundFuncParam{typ: <nil>}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchType untyped int (10), unboundFuncParam{typ: int}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Then\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Val println overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Val i int\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Call 1 0 // overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchFuncCall overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchFuncCall func(a ...interface{}) (n int, err error)\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchType int, interface{}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Post\n[Go+ CI/Test]   | 2023/05/30 11:34:04 VarRef i int\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Val &{0 INT 2} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:04 AssignOp += Gop_AddAssign\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchFuncCall func(a unboundProxyParam{typ: *TemplateParamType{name: T}}, b TemplateParamType{name: T})\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchType refType{typ: int}, unboundProxyParam{typ: *unboundFuncParam{typ: <nil>}}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchType untyped int (2), unboundFuncParam{typ: int}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 End // For\n[Go+ CI/Test]   | 2023/05/30 11:34:04 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> ASTFile \n[Go+ CI/Test]   | --- PASS: TestRangeExpr4 (0.00s)\n[Go+ CI/Test]   | === RUN   TestRangeExpr5\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Preload func main\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Load func main\n[Go+ CI/Test]   | 2023/05/30 11:34:04 NewFunc main func()\n[Go+ CI/Test]   | 2023/05/30 11:34:04 For\n[Go+ CI/Test]   | 2023/05/30 11:34:04 DefineVarStart [_gop_k]\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Val &{0 INT 0} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:04 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Val _gop_k int\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Val &{0 INT 10} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:04 BinaryOp <\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchFuncCall func(a TemplateParamType{name: T}, b TemplateParamType{name: T}) untyped bool\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchType int, unboundFuncParam{typ: <nil>}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchType untyped int (10), unboundFuncParam{typ: int}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Then\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Val println overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Val &{0 STRING \"Hi\"} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Call 1 0 // overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchFuncCall overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchFuncCall func(a ...interface{}) (n int, err error)\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchType untyped string (\"Hi\"), interface{}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Post\n[Go+ CI/Test]   | 2023/05/30 11:34:04 VarRef _gop_k int\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Val &{0 INT 1} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:04 AssignOp += Gop_AddAssign\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchFuncCall func(a unboundProxyParam{typ: *TemplateParamType{name: T}}, b TemplateParamType{name: T})\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchType refType{typ: int}, unboundProxyParam{typ: *unboundFuncParam{typ: <nil>}}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchType untyped int (1), unboundFuncParam{typ: int}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 End // For\n[Go+ CI/Test]   | 2023/05/30 11:34:04 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> ASTFile \n[Go+ CI/Test]   | --- PASS: TestRangeExpr5 (0.00s)\n[Go+ CI/Test]   | === RUN   TestRangeExpr6\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Preload func main\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Load func main\n[Go+ CI/Test]   | 2023/05/30 11:34:04 NewFunc main func()\n[Go+ CI/Test]   | 2023/05/30 11:34:04 For\n[Go+ CI/Test]   | 2023/05/30 11:34:04 DefineVarStart [_gop_k]\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Val &{0 INT 0} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:04 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Val _gop_k int\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Val &{0 INT 10} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:04 BinaryOp <\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchFuncCall func(a TemplateParamType{name: T}, b TemplateParamType{name: T}) untyped bool\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchType int, unboundFuncParam{typ: <nil>}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchType untyped int (10), unboundFuncParam{typ: int}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Then\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Val println overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Val &{0 STRING \"Hi\"} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Call 1 0 // overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchFuncCall overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchFuncCall func(a ...interface{}) (n int, err error)\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchType untyped string (\"Hi\"), interface{}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Post\n[Go+ CI/Test]   | 2023/05/30 11:34:04 VarRef _gop_k int\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Val &{0 INT 1} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:04 AssignOp += Gop_AddAssign\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchFuncCall func(a unboundProxyParam{typ: *TemplateParamType{name: T}}, b TemplateParamType{name: T})\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchType refType{typ: int}, unboundProxyParam{typ: *unboundFuncParam{typ: <nil>}}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchType untyped int (1), unboundFuncParam{typ: int}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 End // For\n[Go+ CI/Test]   | 2023/05/30 11:34:04 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> ASTFile \n[Go+ CI/Test]   | --- PASS: TestRangeExpr6 (0.00s)\n[Go+ CI/Test]   | === RUN   TestRangeExpr7\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Preload func main\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Load func main\n[Go+ CI/Test]   | 2023/05/30 11:34:04 NewFunc main func()\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Val println overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 NewClosure func() (_gop_ret unboundType{typ: <nil>})\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ForRange [_ x]\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Val newRange overloadFuncType{funcs: [func github.com/goplus/gop/builtin.NewRange__0(start int, end int, step int) *github.com/goplus/gop/builtin.IntRange]}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Val &{0 INT 0} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Val &{0 INT 3} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Val &{0 INT 1} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Call 3 0 // overloadFuncType{funcs: [func github.com/goplus/gop/builtin.NewRange__0(start int, end int, step int) *github.com/goplus/gop/builtin.IntRange]}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchFuncCall overloadFuncType{funcs: [func github.com/goplus/gop/builtin.NewRange__0(start int, end int, step int) *github.com/goplus/gop/builtin.IntRange]}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchFuncCall func(start int, end int, step int) *github.com/goplus/gop/builtin.IntRange\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchType untyped int (0), int\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchType untyped int (3), int\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchType untyped int (1), int\n[Go+ CI/Test]   | 2023/05/30 11:34:04 RangeAssignThen\n[Go+ CI/Test]   | 2023/05/30 11:34:04 VarRef _gop_ret unboundType{typ: <nil>}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Val append overloadFuncType{funcs: [type append = instructionType{instr: gox.appendStringInstr} func append(slice []TemplateParamType{name: Type}, elems ...TemplateParamType{name: Type}) []TemplateParamType{name: Type}]}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Val _gop_ret unboundType{typ: <nil>}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Val x int\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Call 2 0 // overloadFuncType{funcs: [type append = instructionType{instr: gox.appendStringInstr} func append(slice []TemplateParamType{name: Type}, elems ...TemplateParamType{name: Type}) []TemplateParamType{name: Type}]}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchFuncCall overloadFuncType{funcs: [type append = instructionType{instr: gox.appendStringInstr} func append(slice []TemplateParamType{name: Type}, elems ...TemplateParamType{name: Type}) []TemplateParamType{name: Type}]}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchFuncCall instructionType{instr: gox.appendStringInstr}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchFuncCall func(slice []TemplateParamType{name: Type}, elems ...TemplateParamType{name: Type}) []TemplateParamType{name: Type}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchType unboundType{typ: <nil>}, []unboundFuncParam{typ: <nil>}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchType int, unboundFuncParam{typ: <nil>}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Assign 1 1\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchType []int, unboundType{typ: <nil>}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 End // ForRange\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Member Gop_Enum 0 // *github.com/goplus/gop/builtin.IntRange\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Call 0 0 // func() *github.com/goplus/gop/builtin.intRangeIter\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchFuncCall func() *github.com/goplus/gop/builtin.intRangeIter\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Return 0\n[Go+ CI/Test]   | 2023/05/30 11:34:04 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Call 0 0 // func() (_gop_ret []int)\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchFuncCall func() (_gop_ret []int)\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Call 1 0 // overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchFuncCall overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchFuncCall func(a ...interface{}) (n int, err error)\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchType []int, interface{}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> ASTFile \n[Go+ CI/Test]   | --- PASS: TestRangeExpr7 (0.00s)\n[Go+ CI/Test]   | === RUN   TestRangeExpr8\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Preload type T\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Preload method T.start\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Preload method T.end\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Preload method T.step\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Preload func main\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Load > NewType T\n[Go+ CI/Test]   | 2023/05/30 11:34:04 NewType T\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Load > InitType T\n[Go+ CI/Test]   | 2023/05/30 11:34:04 InitType T struct{}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> LookupParent T => type github.com/goplus/gop/cl.T struct{}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Load method github.com/goplus/gop/cl.T.start\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> LookupParent T => type github.com/goplus/gop/cl.T struct{}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Load method github.com/goplus/gop/cl.T.end\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> LookupParent T => type github.com/goplus/gop/cl.T struct{}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Load method github.com/goplus/gop/cl.T.step\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Load func main\n[Go+ CI/Test]   | 2023/05/30 11:34:04 NewFunc main func()\n[Go+ CI/Test]   | 2023/05/30 11:34:04 DefineVarStart [t]\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> LookupParent T => type github.com/goplus/gop/cl.T struct{}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 StructLit github.com/goplus/gop/cl.T 0 false\n[Go+ CI/Test]   | 2023/05/30 11:34:04 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:34:04 For\n[Go+ CI/Test]   | 2023/05/30 11:34:04 DefineVarStart [i _gop_end _gop_step]\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Val t github.com/goplus/gop/cl.T\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Member start 1 // github.com/goplus/gop/cl.T\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Call 0 0 // func() int\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchFuncCall func() int\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Val t github.com/goplus/gop/cl.T\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Member end 1 // github.com/goplus/gop/cl.T\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Call 0 0 // func() int\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchFuncCall func() int\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Val t github.com/goplus/gop/cl.T\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Member step 1 // github.com/goplus/gop/cl.T\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Call 0 0 // func() int\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchFuncCall func() int\n[Go+ CI/Test]   | 2023/05/30 11:34:04 EndInit 3\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Val i int\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Val _gop_end int\n[Go+ CI/Test]   | 2023/05/30 11:34:04 BinaryOp <\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchFuncCall func(a TemplateParamType{name: T}, b TemplateParamType{name: T}) untyped bool\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchType int, unboundFuncParam{typ: <nil>}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchType int, unboundFuncParam{typ: int}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Then\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Val println overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Val i int\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Call 1 0 // overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchFuncCall overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchFuncCall func(a ...interface{}) (n int, err error)\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchType int, interface{}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Post\n[Go+ CI/Test]   | 2023/05/30 11:34:04 VarRef i int\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Val _gop_step int\n[Go+ CI/Test]   | 2023/05/30 11:34:04 AssignOp += Gop_AddAssign\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchFuncCall func(a unboundProxyParam{typ: *TemplateParamType{name: T}}, b TemplateParamType{name: T})\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchType refType{typ: int}, unboundProxyParam{typ: *unboundFuncParam{typ: <nil>}}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchType int, unboundFuncParam{typ: int}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 End // For\n[Go+ CI/Test]   | 2023/05/30 11:34:04 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:04 NewFunc start (github.com/goplus/gop/cl.T) func() int\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Val &{0 INT 0} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Return 1\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchType untyped int (0), int\n[Go+ CI/Test]   | 2023/05/30 11:34:04 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:04 NewFunc end (github.com/goplus/gop/cl.T) func() int\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Val &{0 INT 3} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Return 1\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchType untyped int (3), int\n[Go+ CI/Test]   | 2023/05/30 11:34:04 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:04 NewFunc step (github.com/goplus/gop/cl.T) func() int\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Val &{0 INT 1} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Return 1\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchType untyped int (1), int\n[Go+ CI/Test]   | 2023/05/30 11:34:04 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> ASTFile \n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Preload type T\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Preload method T.start\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Preload method T.end\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Preload method T.step\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Preload func main\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Load > NewType T\n[Go+ CI/Test]   | 2023/05/30 11:34:04 NewType T\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Load > InitType T\n[Go+ CI/Test]   | 2023/05/30 11:34:04 InitType T struct{}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> LookupParent T => type github.com/goplus/gop/cl.T struct{}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Load method github.com/goplus/gop/cl.T.start\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> LookupParent T => type github.com/goplus/gop/cl.T struct{}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Load method github.com/goplus/gop/cl.T.end\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> LookupParent T => type github.com/goplus/gop/cl.T struct{}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Load method github.com/goplus/gop/cl.T.step\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Load func main\n[Go+ CI/Test]   | 2023/05/30 11:34:04 NewFunc main func()\n[Go+ CI/Test]   | 2023/05/30 11:34:04 DefineVarStart [t]\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> LookupParent T => type github.com/goplus/gop/cl.T struct{}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 StructLit github.com/goplus/gop/cl.T 0 false\n[Go+ CI/Test]   | 2023/05/30 11:34:04 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:34:04 For\n[Go+ CI/Test]   | 2023/05/30 11:34:04 DefineVarStart [i _gop_end _gop_step]\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Val t github.com/goplus/gop/cl.T\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Member start 1 // github.com/goplus/gop/cl.T\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Call 0 0 // func() int\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchFuncCall func() int\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Val t github.com/goplus/gop/cl.T\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Member end 1 // github.com/goplus/gop/cl.T\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Call 0 0 // func() int\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchFuncCall func() int\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Val t github.com/goplus/gop/cl.T\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Member step 1 // github.com/goplus/gop/cl.T\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Call 0 0 // func() int\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchFuncCall func() int\n[Go+ CI/Test]   | 2023/05/30 11:34:04 EndInit 3\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Val i int\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Val _gop_end int\n[Go+ CI/Test]   | 2023/05/30 11:34:04 BinaryOp <\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchFuncCall func(a TemplateParamType{name: T}, b TemplateParamType{name: T}) untyped bool\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchType int, unboundFuncParam{typ: <nil>}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchType int, unboundFuncParam{typ: int}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Then\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Val println overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Val i int\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Call 1 0 // overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchFuncCall overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchFuncCall func(a ...interface{}) (n int, err error)\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchType int, interface{}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Post\n[Go+ CI/Test]   | 2023/05/30 11:34:04 VarRef i int\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Val _gop_step int\n[Go+ CI/Test]   | 2023/05/30 11:34:04 AssignOp += Gop_AddAssign\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchFuncCall func(a unboundProxyParam{typ: *TemplateParamType{name: T}}, b TemplateParamType{name: T})\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchType refType{typ: int}, unboundProxyParam{typ: *unboundFuncParam{typ: <nil>}}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchType int, unboundFuncParam{typ: int}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 End // For\n[Go+ CI/Test]   | 2023/05/30 11:34:04 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:04 NewFunc start (github.com/goplus/gop/cl.T) func() int\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Val &{0 INT 0} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Return 1\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchType untyped int (0), int\n[Go+ CI/Test]   | 2023/05/30 11:34:04 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:04 NewFunc end (github.com/goplus/gop/cl.T) func() int\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Val &{0 INT 3} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Return 1\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchType untyped int (3), int\n[Go+ CI/Test]   | 2023/05/30 11:34:04 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:04 NewFunc step (github.com/goplus/gop/cl.T) func() int\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Val &{0 INT 1} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Return 1\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchType untyped int (1), int\n[Go+ CI/Test]   | 2023/05/30 11:34:04 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> ASTFile \n[Go+ CI/Test]   | --- PASS: TestRangeExpr8 (0.00s)\n[Go+ CI/Test]   | === RUN   TestRangeExpr9\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Preload type T\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Preload method T.start\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Preload method T.end\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Preload method T.step\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Preload func main\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Load > NewType T\n[Go+ CI/Test]   | 2023/05/30 11:34:04 NewType T\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Load > InitType T\n[Go+ CI/Test]   | 2023/05/30 11:34:04 InitType T struct{}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> LookupParent T => type github.com/goplus/gop/cl.T struct{}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Load method github.com/goplus/gop/cl.T.start\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> LookupParent T => type github.com/goplus/gop/cl.T struct{}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Load method github.com/goplus/gop/cl.T.end\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> LookupParent T => type github.com/goplus/gop/cl.T struct{}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Load method github.com/goplus/gop/cl.T.step\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Load func main\n[Go+ CI/Test]   | 2023/05/30 11:34:04 NewFunc main func()\n[Go+ CI/Test]   | 2023/05/30 11:34:04 DefineVarStart [t]\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> LookupParent T => type github.com/goplus/gop/cl.T struct{}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 StructLit github.com/goplus/gop/cl.T 0 false\n[Go+ CI/Test]   | 2023/05/30 11:34:04 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:34:04 DefineVarStart [i]\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Val &{0 INT 0} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:04 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:34:04 For\n[Go+ CI/Test]   | 2023/05/30 11:34:04 DefineVarStart [_gop_k _gop_end _gop_step]\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Val t github.com/goplus/gop/cl.T\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Member start 1 // github.com/goplus/gop/cl.T\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Call 0 0 // func() int\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchFuncCall func() int\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Val t github.com/goplus/gop/cl.T\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Member end 1 // github.com/goplus/gop/cl.T\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Call 0 0 // func() int\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchFuncCall func() int\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Val t github.com/goplus/gop/cl.T\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Member step 1 // github.com/goplus/gop/cl.T\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Call 0 0 // func() int\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchFuncCall func() int\n[Go+ CI/Test]   | 2023/05/30 11:34:04 EndInit 3\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Val _gop_k int\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Val _gop_end int\n[Go+ CI/Test]   | 2023/05/30 11:34:04 BinaryOp <\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchFuncCall func(a TemplateParamType{name: T}, b TemplateParamType{name: T}) untyped bool\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchType int, unboundFuncParam{typ: <nil>}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchType int, unboundFuncParam{typ: int}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Then\n[Go+ CI/Test]   | 2023/05/30 11:34:04 VarRef i int\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Val _gop_k int\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Assign 1 1\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchType int, int\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Val println overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Val i int\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Call 1 0 // overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchFuncCall overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchFuncCall func(a ...interface{}) (n int, err error)\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchType int, interface{}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Post\n[Go+ CI/Test]   | 2023/05/30 11:34:04 VarRef _gop_k int\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Val _gop_step int\n[Go+ CI/Test]   | 2023/05/30 11:34:04 AssignOp += Gop_AddAssign\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchFuncCall func(a unboundProxyParam{typ: *TemplateParamType{name: T}}, b TemplateParamType{name: T})\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchType refType{typ: int}, unboundProxyParam{typ: *unboundFuncParam{typ: <nil>}}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchType int, unboundFuncParam{typ: int}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 End // For\n[Go+ CI/Test]   | 2023/05/30 11:34:04 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:04 NewFunc start (github.com/goplus/gop/cl.T) func() int\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Val &{0 INT 0} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Return 1\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchType untyped int (0), int\n[Go+ CI/Test]   | 2023/05/30 11:34:04 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:04 NewFunc end (github.com/goplus/gop/cl.T) func() int\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Val &{0 INT 3} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Return 1\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchType untyped int (3), int\n[Go+ CI/Test]   | 2023/05/30 11:34:04 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:04 NewFunc step (github.com/goplus/gop/cl.T) func() int\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Val &{0 INT 1} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Return 1\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchType untyped int (1), int\n[Go+ CI/Test]   | 2023/05/30 11:34:04 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> ASTFile \n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Preload type T\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Preload method T.start\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Preload method T.end\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Preload method T.step\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Preload func main\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Load > NewType T\n[Go+ CI/Test]   | 2023/05/30 11:34:04 NewType T\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Load > InitType T\n[Go+ CI/Test]   | 2023/05/30 11:34:04 InitType T struct{}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> LookupParent T => type github.com/goplus/gop/cl.T struct{}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Load method github.com/goplus/gop/cl.T.start\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> LookupParent T => type github.com/goplus/gop/cl.T struct{}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Load method github.com/goplus/gop/cl.T.end\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> LookupParent T => type github.com/goplus/gop/cl.T struct{}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Load method github.com/goplus/gop/cl.T.step\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Load func main\n[Go+ CI/Test]   | 2023/05/30 11:34:04 NewFunc main func()\n[Go+ CI/Test]   | 2023/05/30 11:34:04 DefineVarStart [t]\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> LookupParent T => type github.com/goplus/gop/cl.T struct{}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 StructLit github.com/goplus/gop/cl.T 0 false\n[Go+ CI/Test]   | 2023/05/30 11:34:04 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:34:04 DefineVarStart [i]\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Val &{0 INT 0} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:04 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:34:04 For\n[Go+ CI/Test]   | 2023/05/30 11:34:04 DefineVarStart [_gop_k _gop_end _gop_step]\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Val t github.com/goplus/gop/cl.T\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Member start 1 // github.com/goplus/gop/cl.T\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Call 0 0 // func() int\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchFuncCall func() int\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Val t github.com/goplus/gop/cl.T\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Member end 1 // github.com/goplus/gop/cl.T\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Call 0 0 // func() int\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchFuncCall func() int\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Val t github.com/goplus/gop/cl.T\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Member step 1 // github.com/goplus/gop/cl.T\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Call 0 0 // func() int\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchFuncCall func() int\n[Go+ CI/Test]   | 2023/05/30 11:34:04 EndInit 3\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Val _gop_k int\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Val _gop_end int\n[Go+ CI/Test]   | 2023/05/30 11:34:04 BinaryOp <\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchFuncCall func(a TemplateParamType{name: T}, b TemplateParamType{name: T}) untyped bool\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchType int, unboundFuncParam{typ: <nil>}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchType int, unboundFuncParam{typ: int}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Then\n[Go+ CI/Test]   | 2023/05/30 11:34:04 VarRef i int\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Val _gop_k int\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Assign 1 1\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchType int, int\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Val println overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Val i int\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Call 1 0 // overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchFuncCall overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchFuncCall func(a ...interface{}) (n int, err error)\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchType int, interface{}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Post\n[Go+ CI/Test]   | 2023/05/30 11:34:04 VarRef _gop_k int\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Val _gop_step int\n[Go+ CI/Test]   | 2023/05/30 11:34:04 AssignOp += Gop_AddAssign\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchFuncCall func(a unboundProxyParam{typ: *TemplateParamType{name: T}}, b TemplateParamType{name: T})\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchType refType{typ: int}, unboundProxyParam{typ: *unboundFuncParam{typ: <nil>}}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchType int, unboundFuncParam{typ: int}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 End // For\n[Go+ CI/Test]   | 2023/05/30 11:34:04 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:04 NewFunc start (github.com/goplus/gop/cl.T) func() int\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Val &{0 INT 0} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Return 1\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchType untyped int (0), int\n[Go+ CI/Test]   | 2023/05/30 11:34:04 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:04 NewFunc end (github.com/goplus/gop/cl.T) func() int\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Val &{0 INT 3} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Return 1\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchType untyped int (3), int\n[Go+ CI/Test]   | 2023/05/30 11:34:04 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:04 NewFunc step (github.com/goplus/gop/cl.T) func() int\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Val &{0 INT 1} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Return 1\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchType untyped int (1), int\n[Go+ CI/Test]   | 2023/05/30 11:34:04 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> ASTFile \n[Go+ CI/Test]   | --- PASS: TestRangeExpr9 (0.00s)\n[Go+ CI/Test]   | === RUN   TestGoFuncInstr\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Preload func test\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Load func test\n[Go+ CI/Test]   | 2023/05/30 11:34:04 NewFunc test func(s string, p uintptr, q uintptr, rest ...uintptr) int\n[Go+ CI/Test]   | 2023/05/30 11:34:04 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> ASTFile \n[Go+ CI/Test]   | --- PASS: TestGoFuncInstr (0.00s)\n[Go+ CI/Test]   | === RUN   TestGoTypeInstr\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Preload type S\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Load > NewType S\n[Go+ CI/Test]   | 2023/05/30 11:34:04 NewType S\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Load > InitType S\n[Go+ CI/Test]   | 2023/05/30 11:34:04 InitType S struct{x int}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> ASTFile \n[Go+ CI/Test]   | --- PASS: TestGoTypeInstr (0.00s)\n[Go+ CI/Test]   | === RUN   TestNoEntrypoint\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Preload func main\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Load func main\n[Go+ CI/Test]   | 2023/05/30 11:34:04 NewFunc main func()\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Val println overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Val &{0 STRING \"init\"} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Call 1 0 // overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchFuncCall overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchFuncCall func(a ...interface{}) (n int, err error)\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchType untyped string (\"init\"), interface{}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> ASTFile \n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Preload func init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Load func init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 NewFunc init func()\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Val println overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Val &{0 STRING \"init\"} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Call 1 0 // overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchFuncCall overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchFuncCall func(a ...interface{}) (n int, err error)\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchType untyped string (\"init\"), interface{}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> ASTFile \n[Go+ CI/Test]   | --- PASS: TestNoEntrypoint (0.00s)\n[Go+ CI/Test]   | === RUN   TestParentExpr\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Preload var [t1]\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Preload var [t2]\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Load var *int [t1]\n[Go+ CI/Test]   | 2023/05/30 11:34:04 NewVar [t1]\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Load var chan int [t2]\n[Go+ CI/Test]   | 2023/05/30 11:34:04 NewVar [t2]\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> ASTFile \n[Go+ CI/Test]   | --- PASS: TestParentExpr (0.00s)\n[Go+ CI/Test]   | === RUN   TestCommandStyle\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Preload func main\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Load func main\n[Go+ CI/Test]   | 2023/05/30 11:34:04 NewFunc main func()\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Val println overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 SliceLit <nil> 0 false\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Call 1 0 // overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchFuncCall overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchFuncCall func(a ...interface{}) (n int, err error)\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchType []interface{}, interface{}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Val println overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 MapLit <nil> 0\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Call 1 0 // overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchFuncCall overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchFuncCall func(a ...interface{}) (n int, err error)\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchType map[string]interface{}, interface{}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> ASTFile \n[Go+ CI/Test]   | --- PASS: TestCommandStyle (0.00s)\n[Go+ CI/Test]   | === RUN   TestTypeLoader\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Preload method Point.String\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Preload type Point\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Load > NewType Point\n[Go+ CI/Test]   | 2023/05/30 11:34:04 NewType Point\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Load > InitType Point\n[Go+ CI/Test]   | 2023/05/30 11:34:04 InitType Point struct{X int; Y int}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> LookupParent Point => type github.com/goplus/gop/cl.Point struct{X int; Y int}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Load method *github.com/goplus/gop/cl.Point.String\n[Go+ CI/Test]   | 2023/05/30 11:34:04 NewFunc String (*github.com/goplus/gop/cl.Point) func() string\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Val Sprintf func(format string, a ...interface{}) string\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Val &{0 STRING \"%v-%v\"} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Val p *github.com/goplus/gop/cl.Point\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Member X 2 // *github.com/goplus/gop/cl.Point\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Val p *github.com/goplus/gop/cl.Point\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Member Y 2 // *github.com/goplus/gop/cl.Point\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Call 3 0 // func(format string, a ...interface{}) string\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchFuncCall func(format string, a ...interface{}) string\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchType untyped string (\"%v-%v\"), string\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchType int, interface{}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchType int, interface{}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Return 1\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchType string, string\n[Go+ CI/Test]   | 2023/05/30 11:34:04 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> ASTFile \n[Go+ CI/Test]   | --- PASS: TestTypeLoader (0.00s)\n[Go+ CI/Test]   | === RUN   TestCallPrintln\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Preload func main\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Load func main\n[Go+ CI/Test]   | 2023/05/30 11:34:04 NewFunc main func()\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Val print overloadFuncType{funcs: [func fmt.Print(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Call 0 0 // overloadFuncType{funcs: [func fmt.Print(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchFuncCall overloadFuncType{funcs: [func fmt.Print(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchFuncCall func(a ...interface{}) (n int, err error)\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Val print overloadFuncType{funcs: [func fmt.Print(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Val &{0 STRING \"hello\"} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Call 1 0 // overloadFuncType{funcs: [func fmt.Print(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchFuncCall overloadFuncType{funcs: [func fmt.Print(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchFuncCall func(a ...interface{}) (n int, err error)\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchType untyped string (\"hello\"), interface{}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Val print overloadFuncType{funcs: [func fmt.Print(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Val &{0 STRING \"hello\"} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Call 1 0 // overloadFuncType{funcs: [func fmt.Print(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchFuncCall overloadFuncType{funcs: [func fmt.Print(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchFuncCall func(a ...interface{}) (n int, err error)\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchType untyped string (\"hello\"), interface{}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Val println overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Call 0 0 // overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchFuncCall overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchFuncCall func(a ...interface{}) (n int, err error)\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Val println overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Val &{0 STRING \"hello\"} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Call 1 0 // overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchFuncCall overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchFuncCall func(a ...interface{}) (n int, err error)\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchType untyped string (\"hello\"), interface{}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Val println overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Val &{0 STRING \"hello\"} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Call 1 0 // overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchFuncCall overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchFuncCall func(a ...interface{}) (n int, err error)\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchType untyped string (\"hello\"), interface{}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> ASTFile \n[Go+ CI/Test]   | --- PASS: TestCallPrintln (0.00s)\n[Go+ CI/Test]   | === RUN   TestAnyAlias\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Preload var [a]\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Preload func main\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Load var interface{} [a]\n[Go+ CI/Test]   | 2023/05/30 11:34:04 NewVar [a]\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Val &{0 INT 100} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:04 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchType untyped int (100), interface{}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Load func main\n[Go+ CI/Test]   | 2023/05/30 11:34:04 NewFunc main func()\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Val println overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Val a interface{}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Call 1 0 // overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchFuncCall overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchFuncCall func(a ...interface{}) (n int, err error)\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchType interface{}, interface{}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> ASTFile \n[Go+ CI/Test]   | --- PASS: TestAnyAlias (0.00s)\n[Go+ CI/Test]   | === RUN   TestMainEntry\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:04 NewFunc main func()\n[Go+ CI/Test]   | 2023/05/30 11:34:04 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> ASTFile \n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Preload func test\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Load func test\n[Go+ CI/Test]   | 2023/05/30 11:34:04 NewFunc test func()\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Val println overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Val &{0 STRING \"hello\"} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Call 1 0 // overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchFuncCall overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchFuncCall func(a ...interface{}) (n int, err error)\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchType untyped string (\"hello\"), interface{}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:04 NewFunc main func()\n[Go+ CI/Test]   | 2023/05/30 11:34:04 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> ASTFile \n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Preload func main\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Load func main\n[Go+ CI/Test]   | 2023/05/30 11:34:04 NewFunc main func()\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Val println overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Val &{0 STRING \"hello\"} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Call 1 0 // overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchFuncCall overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchFuncCall func(a ...interface{}) (n int, err error)\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchType untyped string (\"hello\"), interface{}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> ASTFile \n[Go+ CI/Test]   | --- PASS: TestMainEntry (0.00s)\n[Go+ CI/Test]   | === RUN   TestCommandNotExpr\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Preload func main\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Load func main\n[Go+ CI/Test]   | 2023/05/30 11:34:04 NewFunc main func()\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Val println overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Val true untyped bool\n[Go+ CI/Test]   | 2023/05/30 11:34:04 UnaryOp ! flags: 0\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchFuncCall func(a TemplateParamType{name: T}) TemplateParamType{name: T}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchType untyped bool (true), unboundFuncParam{typ: <nil>}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Call 1 0 // overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchFuncCall overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchFuncCall func(a ...interface{}) (n int, err error)\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchType untyped bool (false), interface{}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> ASTFile \n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Preload func main\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Load func main\n[Go+ CI/Test]   | 2023/05/30 11:34:04 NewFunc main func()\n[Go+ CI/Test]   | 2023/05/30 11:34:04 DefineVarStart [a]\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Val true untyped bool\n[Go+ CI/Test]   | 2023/05/30 11:34:04 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Val println overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Val a bool\n[Go+ CI/Test]   | 2023/05/30 11:34:04 UnaryOp ! flags: 0\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchFuncCall func(a TemplateParamType{name: T}) TemplateParamType{name: T}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchType bool, unboundFuncParam{typ: <nil>}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Call 1 0 // overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchFuncCall overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchFuncCall func(a ...interface{}) (n int, err error)\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchType bool, interface{}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> ASTFile \n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Preload func main\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Load func main\n[Go+ CI/Test]   | 2023/05/30 11:34:04 NewFunc main func()\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Val println overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 NewClosure func() bool\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Val true untyped bool\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Return 1\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchType untyped bool (true), bool\n[Go+ CI/Test]   | 2023/05/30 11:34:04 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Call 0 0 // func() bool\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchFuncCall func() bool\n[Go+ CI/Test]   | 2023/05/30 11:34:04 UnaryOp ! flags: 0\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchFuncCall func(a TemplateParamType{name: T}) TemplateParamType{name: T}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchType bool, unboundFuncParam{typ: <nil>}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Call 1 0 // overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchFuncCall overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchFuncCall func(a ...interface{}) (n int, err error)\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchType bool, interface{}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> ASTFile \n[Go+ CI/Test]   | --- PASS: TestCommandNotExpr (0.00s)\n[Go+ CI/Test]   | === RUN   TestErrLambdaExpr\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Preload func foo\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Preload func main\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Load func foo\n[Go+ CI/Test]   | 2023/05/30 11:34:04 NewFunc foo func(func(int, int))\n[Go+ CI/Test]   | 2023/05/30 11:34:04 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Load func main\n[Go+ CI/Test]   | 2023/05/30 11:34:04 NewFunc main func()\n[Go+ CI/Test]   | 2023/05/30 11:34:04 SetComments 0 \n[Go+ CI/Test]   | //line /foo/bar.gop:7\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Val foo func(func(int, int))\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ResetStmt\n[Go+ CI/Test]   | 2023/05/30 11:34:04 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Preload func foo\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Preload func main\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Load func foo\n[Go+ CI/Test]   | 2023/05/30 11:34:04 NewFunc foo func(func(int, int))\n[Go+ CI/Test]   | 2023/05/30 11:34:04 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Load func main\n[Go+ CI/Test]   | 2023/05/30 11:34:04 NewFunc main func()\n[Go+ CI/Test]   | 2023/05/30 11:34:04 SetComments 0 \n[Go+ CI/Test]   | //line /foo/bar.gop:7\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Val foo func(func(int, int))\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ResetStmt\n[Go+ CI/Test]   | 2023/05/30 11:34:04 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Preload type Foo\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Preload func main\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Load > NewType Foo\n[Go+ CI/Test]   | 2023/05/30 11:34:04 NewType Foo\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Load > InitType Foo\n[Go+ CI/Test]   | 2023/05/30 11:34:04 InitType Foo struct{Plot int}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Load func main\n[Go+ CI/Test]   | 2023/05/30 11:34:04 NewFunc main func()\n[Go+ CI/Test]   | 2023/05/30 11:34:04 SetComments 0 \n[Go+ CI/Test]   | //line /foo/bar.gop:5\n[Go+ CI/Test]   | 2023/05/30 11:34:04 DefineVarStart [foo]\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> LookupParent Foo => type Foo struct{Plot int}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Val 0 int\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ResetInit\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ResetStmt\n[Go+ CI/Test]   | 2023/05/30 11:34:04 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Preload type Foo\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Preload func main\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Load > NewType Foo\n[Go+ CI/Test]   | 2023/05/30 11:34:04 NewType Foo\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Load > InitType Foo\n[Go+ CI/Test]   | 2023/05/30 11:34:04 InitType Foo struct{Plot int}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Load func main\n[Go+ CI/Test]   | 2023/05/30 11:34:04 NewFunc main func()\n[Go+ CI/Test]   | 2023/05/30 11:34:04 SetComments 0 \n[Go+ CI/Test]   | //line /foo/bar.gop:5\n[Go+ CI/Test]   | 2023/05/30 11:34:04 DefineVarStart [foo]\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> LookupParent Foo => type Foo struct{Plot int}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Val 0 int\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ResetInit\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ResetStmt\n[Go+ CI/Test]   | 2023/05/30 11:34:04 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Preload func foo\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Preload func main\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Load func foo\n[Go+ CI/Test]   | 2023/05/30 11:34:04 NewFunc foo func(int)\n[Go+ CI/Test]   | 2023/05/30 11:34:04 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Load func main\n[Go+ CI/Test]   | 2023/05/30 11:34:04 NewFunc main func()\n[Go+ CI/Test]   | 2023/05/30 11:34:04 SetComments 0 \n[Go+ CI/Test]   | //line /foo/bar.gop:4\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Val foo func(int)\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ResetStmt\n[Go+ CI/Test]   | 2023/05/30 11:34:04 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Preload func foo\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Preload func main\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Load func foo\n[Go+ CI/Test]   | 2023/05/30 11:34:04 NewFunc foo func(func())\n[Go+ CI/Test]   | 2023/05/30 11:34:04 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Load func main\n[Go+ CI/Test]   | 2023/05/30 11:34:04 NewFunc main func()\n[Go+ CI/Test]   | 2023/05/30 11:34:04 SetComments 0 \n[Go+ CI/Test]   | //line /foo/bar.gop:4\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Val foo func(func())\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ResetStmt\n[Go+ CI/Test]   | 2023/05/30 11:34:04 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Preload type Foo\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Preload func main\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Load > NewType Foo\n[Go+ CI/Test]   | 2023/05/30 11:34:04 NewType Foo\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Load > InitType Foo\n[Go+ CI/Test]   | 2023/05/30 11:34:04 InitType Foo struct{Plot func() int}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Load func main\n[Go+ CI/Test]   | 2023/05/30 11:34:04 NewFunc main func()\n[Go+ CI/Test]   | 2023/05/30 11:34:04 SetComments 0 \n[Go+ CI/Test]   | //line /foo/bar.gop:5\n[Go+ CI/Test]   | 2023/05/30 11:34:04 DefineVarStart [foo]\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> LookupParent Foo => type Foo struct{Plot func() int}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Val 0 int\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ResetInit\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ResetStmt\n[Go+ CI/Test]   | 2023/05/30 11:34:04 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Preload var [foo]\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Load var func() [foo]\n[Go+ CI/Test]   | 2023/05/30 11:34:04 NewVar [foo]\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Preload var [foo]\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Preload func main\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Load var func() [foo]\n[Go+ CI/Test]   | 2023/05/30 11:34:04 NewVar [foo]\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Load func main\n[Go+ CI/Test]   | 2023/05/30 11:34:04 NewFunc main func()\n[Go+ CI/Test]   | 2023/05/30 11:34:04 SetComments 0 \n[Go+ CI/Test]   | //line /foo/bar.gop:3\n[Go+ CI/Test]   | 2023/05/30 11:34:04 VarRef foo func()\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ResetStmt\n[Go+ CI/Test]   | 2023/05/30 11:34:04 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Preload var [foo foo1]\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Load var func() [foo foo1]\n[Go+ CI/Test]   | 2023/05/30 11:34:04 NewVar [foo foo1]\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Val nil untyped nil\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Preload var [foo]\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Preload func main\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Load var func() [foo]\n[Go+ CI/Test]   | 2023/05/30 11:34:04 NewVar [foo]\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Load func main\n[Go+ CI/Test]   | 2023/05/30 11:34:04 NewFunc main func()\n[Go+ CI/Test]   | 2023/05/30 11:34:04 SetComments 0 \n[Go+ CI/Test]   | //line /foo/bar.gop:3\n[Go+ CI/Test]   | 2023/05/30 11:34:04 VarRef _\n[Go+ CI/Test]   | 2023/05/30 11:34:04 VarRef foo func()\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Val nil untyped nil\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ResetStmt\n[Go+ CI/Test]   | 2023/05/30 11:34:04 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Preload func intSeq\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Load func intSeq\n[Go+ CI/Test]   | 2023/05/30 11:34:04 NewFunc intSeq func() int\n[Go+ CI/Test]   | 2023/05/30 11:34:04 SetComments 0 \n[Go+ CI/Test]   | //line /foo/bar.gop:3\n[Go+ CI/Test]   | 2023/05/30 11:34:04 DefineVarStart [i]\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Val &{0 INT 0} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:04 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:34:04 SetComments 0 \n[Go+ CI/Test]   | //line /foo/bar.gop:4\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ResetStmt\n[Go+ CI/Test]   | 2023/05/30 11:34:04 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Preload func intSeq\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Load func intSeq\n[Go+ CI/Test]   | 2023/05/30 11:34:04 NewFunc intSeq func() func() string\n[Go+ CI/Test]   | 2023/05/30 11:34:04 SetComments 0 \n[Go+ CI/Test]   | //line /foo/bar.gop:3\n[Go+ CI/Test]   | 2023/05/30 11:34:04 DefineVarStart [i]\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Val &{0 INT 0} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:04 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:34:04 SetComments 0 \n[Go+ CI/Test]   | //line /foo/bar.gop:4\n[Go+ CI/Test]   | 2023/05/30 11:34:04 NewClosure func() string\n[Go+ CI/Test]   | 2023/05/30 11:34:04 SetComments 0 \n[Go+ CI/Test]   | //line /foo/bar.gop:5\n[Go+ CI/Test]   | 2023/05/30 11:34:04 VarRef i int\n[Go+ CI/Test]   | 2023/05/30 11:34:04 IncDec ++\n[Go+ CI/Test]   | 2023/05/30 11:34:04 SetComments 0 \n[Go+ CI/Test]   | //line /foo/bar.gop:6\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Val i int\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Return 1\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchType int, string\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ResetStmt\n[Go+ CI/Test]   | 2023/05/30 11:34:04 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:04 SetComments 0 \n[Go+ CI/Test]   | //line /foo/bar.gop:4\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Return 1\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchType func() string, func() string\n[Go+ CI/Test]   | 2023/05/30 11:34:04 End // Func\n[Go+ CI/Test]   | --- PASS: TestErrLambdaExpr (0.01s)\n[Go+ CI/Test]   | === RUN   TestErrErrWrap\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Preload func main\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Load func main\n[Go+ CI/Test]   | 2023/05/30 11:34:04 NewFunc main func()\n[Go+ CI/Test]   | 2023/05/30 11:34:04 SetComments 0 \n[Go+ CI/Test]   | //line /foo/bar.gop:2\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ResetStmt\n[Go+ CI/Test]   | 2023/05/30 11:34:04 End // Func\n[Go+ CI/Test]   | --- PASS: TestErrErrWrap (0.00s)\n[Go+ CI/Test]   | === RUN   TestErrVar\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Preload func main\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Preload var [a]\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Load func main\n[Go+ CI/Test]   | 2023/05/30 11:34:04 NewFunc main func()\n[Go+ CI/Test]   | 2023/05/30 11:34:04 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Load var <nil> [a]\n[Go+ CI/Test]   | 2023/05/30 11:34:04 NewVar [a]\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Val Println func(a ...interface{}) (n int, err error)\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Val &{0 INT 1} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Call 1 0 // func(a ...interface{}) (n int, err error)\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchFuncCall func(a ...interface{}) (n int, err error)\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> MatchType untyped int (1), interface{}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Preload func main\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Preload var [a]\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Load func main\n[Go+ CI/Test]   | 2023/05/30 11:34:04 NewFunc main func()\n[Go+ CI/Test]   | 2023/05/30 11:34:04 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Load var <nil> [a]\n[Go+ CI/Test]   | 2023/05/30 11:34:04 NewVar [a]\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Val &{0 INT 1} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Val &{0 INT 2} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:04 EndInit 2\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Preload func main\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Load func main\n[Go+ CI/Test]   | 2023/05/30 11:34:04 NewFunc main func()\n[Go+ CI/Test]   | 2023/05/30 11:34:04 SetComments 0 \n[Go+ CI/Test]   | //line /foo/bar.gop:2\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ResetStmt\n[Go+ CI/Test]   | 2023/05/30 11:34:04 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Preload func main\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Load func main\n[Go+ CI/Test]   | 2023/05/30 11:34:04 NewFunc main func()\n[Go+ CI/Test]   | 2023/05/30 11:34:04 SetComments 0 \n[Go+ CI/Test]   | //line /foo/bar.gop:2\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ResetStmt\n[Go+ CI/Test]   | 2023/05/30 11:34:04 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Preload func main\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Load func main\n[Go+ CI/Test]   | 2023/05/30 11:34:04 NewFunc main func()\n[Go+ CI/Test]   | 2023/05/30 11:34:04 SetComments 0 \n[Go+ CI/Test]   | //line /foo/bar.gop:2\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Val println overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ResetStmt\n[Go+ CI/Test]   | 2023/05/30 11:34:04 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Preload func main\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Load func main\n[Go+ CI/Test]   | 2023/05/30 11:34:04 NewFunc main func()\n[Go+ CI/Test]   | 2023/05/30 11:34:04 SetComments 0 \n[Go+ CI/Test]   | //line /foo/bar.gop:2\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Val println overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ResetStmt\n[Go+ CI/Test]   | 2023/05/30 11:34:04 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Preload func main\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Load func main\n[Go+ CI/Test]   | 2023/05/30 11:34:04 NewFunc main func()\n[Go+ CI/Test]   | 2023/05/30 11:34:04 SetComments 0 \n[Go+ CI/Test]   | //line /foo/bar.gop:2\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Val println overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ResetStmt\n[Go+ CI/Test]   | 2023/05/30 11:34:04 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Preload func foo\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Load func foo\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Preload var [bar]\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Preload func foo\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Load var <nil> [bar]\n[Go+ CI/Test]   | 2023/05/30 11:34:04 NewVar [bar]\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Val &{0 INT 1} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:04 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Load func foo\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> LookupParent bar => var bar int\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Preload func main\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Load func main\n[Go+ CI/Test]   | 2023/05/30 11:34:04 NewFunc main func()\n[Go+ CI/Test]   | 2023/05/30 11:34:04 SetComments 0 \n[Go+ CI/Test]   | //line /foo/bar.gop:2\n[Go+ CI/Test]   | 2023/05/30 11:34:04 Val new instructionType{instr: gox.newInstr}\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ResetStmt\n[Go+ CI/Test]   | 2023/05/30 11:34:04 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Preload func main\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Load func main\n[Go+ CI/Test]   | 2023/05/30 11:34:04 NewFunc main func()\n[Go+ CI/Test]   | 2023/05/30 11:34:04 SetComments 0 \n[Go+ CI/Test]   | //line /foo/bar.gop:2\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ResetStmt\n[Go+ CI/Test]   | 2023/05/30 11:34:04 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Preload func main\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Load func main\n[Go+ CI/Test]   | 2023/05/30 11:34:04 NewFunc main func()\n[Go+ CI/Test]   | 2023/05/30 11:34:04 SetComments 0 \n[Go+ CI/Test]   | //line /foo/bar.gop:2\n[Go+ CI/Test]   | 2023/05/30 11:34:04 DefineVarStart [foo]\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ResetInit\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ResetStmt\n[Go+ CI/Test]   | 2023/05/30 11:34:04 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Preload func main\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Load func main\n[Go+ CI/Test]   | 2023/05/30 11:34:04 NewFunc main func()\n[Go+ CI/Test]   | 2023/05/30 11:34:04 SetComments 0 \n[Go+ CI/Test]   | //line /foo/bar.gop:2\n[Go+ CI/Test]   | 2023/05/30 11:34:04 DefineVarStart [foo]\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ResetInit\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ResetStmt\n[Go+ CI/Test]   | 2023/05/30 11:34:04 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Preload func main\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Load func main\n[Go+ CI/Test]   | 2023/05/30 11:34:04 NewFunc main func()\n[Go+ CI/Test]   | 2023/05/30 11:34:04 SetComments 0 \n[Go+ CI/Test]   | //line /foo/bar.gop:2\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ResetStmt\n[Go+ CI/Test]   | 2023/05/30 11:34:04 End // Func\n[Go+ CI/Test]   | --- PASS: TestErrVar (0.01s)\n[Go+ CI/Test]   | === RUN   TestErrImport\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:04 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Preload func foo\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Load func foo\n[Go+ CI/Test]   | 2023/05/30 11:34:05 NewFunc foo func()\n[Go+ CI/Test]   | 2023/05/30 11:34:05 SetComments 0 \n[Go+ CI/Test]   | //line /foo/bar.gop:8\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ResetStmt\n[Go+ CI/Test]   | 2023/05/30 11:34:05 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Preload func foo\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Load func foo\n[Go+ CI/Test]   | 2023/05/30 11:34:05 NewFunc foo func()\n[Go+ CI/Test]   | 2023/05/30 11:34:05 SetComments 0 \n[Go+ CI/Test]   | //line /foo/bar.gop:5\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ResetStmt\n[Go+ CI/Test]   | 2023/05/30 11:34:05 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Preload func foo\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Load func foo\n[Go+ CI/Test]   | 2023/05/30 11:34:05 NewFunc foo func()\n[Go+ CI/Test]   | 2023/05/30 11:34:05 SetComments 0 \n[Go+ CI/Test]   | //line /foo/bar.gop:5\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ResetStmt\n[Go+ CI/Test]   | 2023/05/30 11:34:05 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Preload func foo\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Load func foo\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Preload func foo\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Load func foo\n[Go+ CI/Test]   | --- PASS: TestErrImport (1.14s)\n[Go+ CI/Test]   | === RUN   TestErrConst\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Preload var [a]\n[Go+ CI/Test]   | 2023/05/30 11:34:05 NewConstDefs\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Preload const [a]\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Load var int [a]\n[Go+ CI/Test]   | 2023/05/30 11:34:05 NewVar [a]\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:05 NewConstDefs\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Preload const [a]\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Preload const [b c]\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Load const [a] <nil>\n[Go+ CI/Test]   | 2023/05/30 11:34:05 NewConst [a] 0\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Val iota untyped int\n[Go+ CI/Test]   | 2023/05/30 11:34:05 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Load const [b c]\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Val iota untyped int\n[Go+ CI/Test]   | --- PASS: TestErrConst (0.00s)\n[Go+ CI/Test]   | === RUN   TestErrNewVar\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Preload var [a]\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Preload var [a]\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Load var int [a]\n[Go+ CI/Test]   | 2023/05/30 11:34:05 NewVar [a]\n[Go+ CI/Test]   | --- PASS: TestErrNewVar (0.00s)\n[Go+ CI/Test]   | === RUN   TestErrDefineVar\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Preload func main\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Load func main\n[Go+ CI/Test]   | 2023/05/30 11:34:05 NewFunc main func()\n[Go+ CI/Test]   | 2023/05/30 11:34:05 SetComments 0 \n[Go+ CI/Test]   | //line /foo/bar.gop:2\n[Go+ CI/Test]   | 2023/05/30 11:34:05 DefineVarStart [a]\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Val &{0 INT 1} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:05 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:34:05 SetComments 0 \n[Go+ CI/Test]   | //line /foo/bar.gop:3\n[Go+ CI/Test]   | 2023/05/30 11:34:05 DefineVarStart [a]\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Val &{0 STRING \"Hi\"} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:05 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> MatchType untyped string (\"Hi\"), int\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ResetInit\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ResetStmt\n[Go+ CI/Test]   | 2023/05/30 11:34:05 End // Func\n[Go+ CI/Test]   | --- PASS: TestErrDefineVar (0.00s)\n[Go+ CI/Test]   | === RUN   TestErrAssign\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Preload func bar\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Preload func main\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Load func bar\n[Go+ CI/Test]   | 2023/05/30 11:34:05 NewFunc bar func() (n int, err error)\n[Go+ CI/Test]   | 2023/05/30 11:34:05 SetComments 0 \n[Go+ CI/Test]   | //line /foo/bar.gop:4\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Return 0\n[Go+ CI/Test]   | 2023/05/30 11:34:05 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Load func main\n[Go+ CI/Test]   | 2023/05/30 11:34:05 NewFunc main func()\n[Go+ CI/Test]   | 2023/05/30 11:34:05 SetComments 0 \n[Go+ CI/Test]   | //line /foo/bar.gop:7\n[Go+ CI/Test]   | 2023/05/30 11:34:05 DefineVarStart [x]\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Val &{0 INT 1} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:05 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:34:05 SetComments 0 \n[Go+ CI/Test]   | //line /foo/bar.gop:8\n[Go+ CI/Test]   | 2023/05/30 11:34:05 VarRef x int\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Val bar func() (n int, err error)\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Call 0 0 // func() (n int, err error)\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> MatchFuncCall func() (n int, err error)\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Assign 1 1\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ResetStmt\n[Go+ CI/Test]   | 2023/05/30 11:34:05 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Preload func main\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Load func main\n[Go+ CI/Test]   | 2023/05/30 11:34:05 NewFunc main func()\n[Go+ CI/Test]   | 2023/05/30 11:34:05 SetComments 0 \n[Go+ CI/Test]   | //line /foo/bar.gop:3\n[Go+ CI/Test]   | 2023/05/30 11:34:05 DefineVarStart [x]\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Val &{0 INT 1} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:05 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:34:05 SetComments 0 \n[Go+ CI/Test]   | //line /foo/bar.gop:4\n[Go+ CI/Test]   | 2023/05/30 11:34:05 VarRef x int\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Val &{0 INT 1} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Val &{0 STRING \"Hi\"} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Assign 1 2\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ResetStmt\n[Go+ CI/Test]   | 2023/05/30 11:34:05 End // Func\n[Go+ CI/Test]   | --- PASS: TestErrAssign (0.00s)\n[Go+ CI/Test]   | === RUN   TestErrReturn\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Preload func foo\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Load func foo\n[Go+ CI/Test]   | 2023/05/30 11:34:05 NewFunc foo func() (int, error)\n[Go+ CI/Test]   | 2023/05/30 11:34:05 SetComments 0 \n[Go+ CI/Test]   | //line /foo/bar.gop:4\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Val &{0 INT 1} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Return 1\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ResetStmt\n[Go+ CI/Test]   | 2023/05/30 11:34:05 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Preload func foo\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Load func foo\n[Go+ CI/Test]   | 2023/05/30 11:34:05 NewFunc foo func() (int, error)\n[Go+ CI/Test]   | 2023/05/30 11:34:05 SetComments 0 \n[Go+ CI/Test]   | //line /foo/bar.gop:4\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Val &{0 INT 1} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Val &{0 INT 2} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Val &{0 STRING \"Hi\"} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Return 3\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ResetStmt\n[Go+ CI/Test]   | 2023/05/30 11:34:05 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Preload func foo\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Load func foo\n[Go+ CI/Test]   | 2023/05/30 11:34:05 NewFunc foo func() (int, error)\n[Go+ CI/Test]   | 2023/05/30 11:34:05 SetComments 0 \n[Go+ CI/Test]   | //line /foo/bar.gop:4\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Val &{0 INT 1} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Val &{0 STRING \"Hi\"} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Return 2\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> MatchType untyped int (1), int\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> MatchType untyped string (\"Hi\"), error\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> EnsureLoaded error\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> AssignableConv untyped string error false\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ResetStmt\n[Go+ CI/Test]   | 2023/05/30 11:34:05 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Preload func bar\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Preload func foo\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Load func bar\n[Go+ CI/Test]   | 2023/05/30 11:34:05 NewFunc bar func() (v byte)\n[Go+ CI/Test]   | 2023/05/30 11:34:05 SetComments 0 \n[Go+ CI/Test]   | //line /foo/bar.gop:4\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Return 0\n[Go+ CI/Test]   | 2023/05/30 11:34:05 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Load func foo\n[Go+ CI/Test]   | 2023/05/30 11:34:05 NewFunc foo func() (int, error)\n[Go+ CI/Test]   | 2023/05/30 11:34:05 SetComments 0 \n[Go+ CI/Test]   | //line /foo/bar.gop:8\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Val bar func() (v byte)\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Call 0 0 // func() (v byte)\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> MatchFuncCall func() (v byte)\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Return 1\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ResetStmt\n[Go+ CI/Test]   | 2023/05/30 11:34:05 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Preload func bar\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Preload func foo\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Load func bar\n[Go+ CI/Test]   | 2023/05/30 11:34:05 NewFunc bar func() (n int, err error)\n[Go+ CI/Test]   | 2023/05/30 11:34:05 SetComments 0 \n[Go+ CI/Test]   | //line /foo/bar.gop:4\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Return 0\n[Go+ CI/Test]   | 2023/05/30 11:34:05 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Load func foo\n[Go+ CI/Test]   | 2023/05/30 11:34:05 NewFunc foo func() (v byte)\n[Go+ CI/Test]   | 2023/05/30 11:34:05 SetComments 0 \n[Go+ CI/Test]   | //line /foo/bar.gop:8\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Val bar func() (n int, err error)\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Call 0 0 // func() (n int, err error)\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> MatchFuncCall func() (n int, err error)\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Return 1\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ResetStmt\n[Go+ CI/Test]   | 2023/05/30 11:34:05 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Preload func bar\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Preload func foo\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Load func bar\n[Go+ CI/Test]   | 2023/05/30 11:34:05 NewFunc bar func() (n int, v byte)\n[Go+ CI/Test]   | 2023/05/30 11:34:05 SetComments 0 \n[Go+ CI/Test]   | //line /foo/bar.gop:4\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Return 0\n[Go+ CI/Test]   | 2023/05/30 11:34:05 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Load func foo\n[Go+ CI/Test]   | 2023/05/30 11:34:05 NewFunc foo func() (int, error)\n[Go+ CI/Test]   | 2023/05/30 11:34:05 SetComments 0 \n[Go+ CI/Test]   | //line /foo/bar.gop:8\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Val bar func() (n int, v byte)\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Call 0 0 // func() (n int, v byte)\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> MatchFuncCall func() (n int, v byte)\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Return 1\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> MatchType int, int\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> MatchType byte, error\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> EnsureLoaded error\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> AssignableConv byte error false\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ResetStmt\n[Go+ CI/Test]   | 2023/05/30 11:34:05 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Preload func foo\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Load func foo\n[Go+ CI/Test]   | 2023/05/30 11:34:05 NewFunc foo func() byte\n[Go+ CI/Test]   | 2023/05/30 11:34:05 SetComments 0 \n[Go+ CI/Test]   | //line /foo/bar.gop:4\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Return 0\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ResetStmt\n[Go+ CI/Test]   | 2023/05/30 11:34:05 End // Func\n[Go+ CI/Test]   | --- PASS: TestErrReturn (0.00s)\n[Go+ CI/Test]   | === RUN   TestErrForRange\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Preload func main\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Load func main\n[Go+ CI/Test]   | 2023/05/30 11:34:05 NewFunc main func()\n[Go+ CI/Test]   | 2023/05/30 11:34:05 SetComments 0 \n[Go+ CI/Test]   | //line /foo/bar.gop:2\n[Go+ CI/Test]   | 2023/05/30 11:34:05 DefineVarStart [a]\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Val &{0 INT 1} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:05 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:34:05 SetComments 0 \n[Go+ CI/Test]   | //line /foo/bar.gop:3\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Load var []string [b]\n[Go+ CI/Test]   | 2023/05/30 11:34:05 NewVar [b]\n[Go+ CI/Test]   | 2023/05/30 11:34:05 SetComments 0 \n[Go+ CI/Test]   | //line /foo/bar.gop:4\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ForRange []\n[Go+ CI/Test]   | 2023/05/30 11:34:05 VarRef _\n[Go+ CI/Test]   | 2023/05/30 11:34:05 VarRef a int\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Val b []string\n[Go+ CI/Test]   | 2023/05/30 11:34:05 RangeAssignThen\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> MatchType string, int\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ResetStmt\n[Go+ CI/Test]   | 2023/05/30 11:34:05 End // ForRange\n[Go+ CI/Test]   | --- PASS: TestErrForRange (0.00s)\n[Go+ CI/Test]   | === RUN   TestErrInitFunc\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Preload func init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Load func init\n[Go+ CI/Test]   | --- PASS: TestErrInitFunc (0.00s)\n[Go+ CI/Test]   | === RUN   TestErrRecv\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Preload type a\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Preload method a.foo\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Load > NewType a\n[Go+ CI/Test]   | 2023/05/30 11:34:05 NewType a\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Load > InitType a\n[Go+ CI/Test]   | 2023/05/30 11:34:05 InitType a *int\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> LookupParent a => type a *int\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Load method a.foo\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Preload method error.foo\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Load method error.foo\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | --- PASS: TestErrRecv (0.00s)\n[Go+ CI/Test]   | === RUN   TestErrStructLit\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Preload func main\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Load func main\n[Go+ CI/Test]   | 2023/05/30 11:34:05 NewFunc main func()\n[Go+ CI/Test]   | 2023/05/30 11:34:05 SetComments 0 \n[Go+ CI/Test]   | //line /foo/bar.gop:2\n[Go+ CI/Test]   | 2023/05/30 11:34:05 DefineVarStart [x]\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Val &{0 INT 1} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:05 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:34:05 SetComments 0 \n[Go+ CI/Test]   | //line /foo/bar.gop:3\n[Go+ CI/Test]   | 2023/05/30 11:34:05 DefineVarStart [a]\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Val &{0 INT 1} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Val &{0 STRING \"Hi\"} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Val &{0 INT 2} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:05 StructLit struct{x int; y string} 3 false\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ResetInit\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ResetStmt\n[Go+ CI/Test]   | 2023/05/30 11:34:05 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Preload func main\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Load func main\n[Go+ CI/Test]   | 2023/05/30 11:34:05 NewFunc main func()\n[Go+ CI/Test]   | 2023/05/30 11:34:05 SetComments 0 \n[Go+ CI/Test]   | //line /foo/bar.gop:2\n[Go+ CI/Test]   | 2023/05/30 11:34:05 DefineVarStart [x]\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Val &{0 INT 1} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:05 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:34:05 SetComments 0 \n[Go+ CI/Test]   | //line /foo/bar.gop:3\n[Go+ CI/Test]   | 2023/05/30 11:34:05 DefineVarStart [a]\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Val &{0 INT 1} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:05 StructLit struct{x int; y string} 1 false\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ResetInit\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ResetStmt\n[Go+ CI/Test]   | 2023/05/30 11:34:05 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Preload func main\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Load func main\n[Go+ CI/Test]   | 2023/05/30 11:34:05 NewFunc main func()\n[Go+ CI/Test]   | 2023/05/30 11:34:05 SetComments 0 \n[Go+ CI/Test]   | //line /foo/bar.gop:2\n[Go+ CI/Test]   | 2023/05/30 11:34:05 DefineVarStart [x]\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Val &{0 INT 1} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:05 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:34:05 SetComments 0 \n[Go+ CI/Test]   | //line /foo/bar.gop:3\n[Go+ CI/Test]   | 2023/05/30 11:34:05 DefineVarStart [a]\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Val &{0 INT 1} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Val x int\n[Go+ CI/Test]   | 2023/05/30 11:34:05 StructLit struct{x int; y string} 2 false\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ResetInit\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ResetStmt\n[Go+ CI/Test]   | 2023/05/30 11:34:05 End // Func\n[Go+ CI/Test]   | --- PASS: TestErrStructLit (0.00s)\n[Go+ CI/Test]   | === RUN   TestErrArray\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Preload var [n]\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Preload var [a]\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Load var int [n]\n[Go+ CI/Test]   | 2023/05/30 11:34:05 NewVar [n]\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Val n int\n[Go+ CI/Test]   | --- PASS: TestErrArray (0.00s)\n[Go+ CI/Test]   | === RUN   TestErrArrayLit\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Preload func main\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Load func main\n[Go+ CI/Test]   | 2023/05/30 11:34:05 NewFunc main func()\n[Go+ CI/Test]   | 2023/05/30 11:34:05 SetComments 0 \n[Go+ CI/Test]   | //line /foo/bar.gop:2\n[Go+ CI/Test]   | 2023/05/30 11:34:05 DefineVarStart [a]\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Val &{0 STRING \"Hi\"} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:05 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:34:05 SetComments 0 \n[Go+ CI/Test]   | //line /foo/bar.gop:3\n[Go+ CI/Test]   | 2023/05/30 11:34:05 DefineVarStart [b]\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Val &{0 INT 10} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Val a string\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Val &{0 INT 1} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ArrayLit [10]int 2 true\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ResetInit\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ResetStmt\n[Go+ CI/Test]   | 2023/05/30 11:34:05 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Preload func main\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Load func main\n[Go+ CI/Test]   | 2023/05/30 11:34:05 NewFunc main func()\n[Go+ CI/Test]   | 2023/05/30 11:34:05 SetComments 0 \n[Go+ CI/Test]   | //line /foo/bar.gop:2\n[Go+ CI/Test]   | 2023/05/30 11:34:05 DefineVarStart [a]\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Val &{0 STRING \"Hi\"} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:05 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:34:05 SetComments 0 \n[Go+ CI/Test]   | //line /foo/bar.gop:3\n[Go+ CI/Test]   | 2023/05/30 11:34:05 DefineVarStart [b]\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Val &{0 INT 10} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Val &{0 INT 9} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Val &{0 INT 1} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:05 None\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Val &{0 INT 3} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ArrayLit [10]int 4 true\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ResetInit\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ResetStmt\n[Go+ CI/Test]   | 2023/05/30 11:34:05 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Preload func main\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Load func main\n[Go+ CI/Test]   | 2023/05/30 11:34:05 NewFunc main func()\n[Go+ CI/Test]   | 2023/05/30 11:34:05 SetComments 0 \n[Go+ CI/Test]   | //line /foo/bar.gop:2\n[Go+ CI/Test]   | 2023/05/30 11:34:05 DefineVarStart [a]\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Val &{0 STRING \"Hi\"} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:05 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:34:05 SetComments 0 \n[Go+ CI/Test]   | //line /foo/bar.gop:3\n[Go+ CI/Test]   | 2023/05/30 11:34:05 DefineVarStart [b]\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Val &{0 INT 1} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Val &{0 INT 1} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Val &{0 INT 2} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ArrayLit [1]int 2 false\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ResetInit\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ResetStmt\n[Go+ CI/Test]   | 2023/05/30 11:34:05 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Preload func main\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Load func main\n[Go+ CI/Test]   | 2023/05/30 11:34:05 NewFunc main func()\n[Go+ CI/Test]   | 2023/05/30 11:34:05 SetComments 0 \n[Go+ CI/Test]   | //line /foo/bar.gop:2\n[Go+ CI/Test]   | 2023/05/30 11:34:05 DefineVarStart [a]\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Val &{0 STRING \"Hi\"} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:05 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:34:05 SetComments 0 \n[Go+ CI/Test]   | //line /foo/bar.gop:3\n[Go+ CI/Test]   | 2023/05/30 11:34:05 DefineVarStart [b]\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Val &{0 INT 10} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Val &{0 INT 12} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Val &{0 INT 2} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ArrayLit [10]int 2 true\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ResetInit\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ResetStmt\n[Go+ CI/Test]   | 2023/05/30 11:34:05 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Preload func main\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Load func main\n[Go+ CI/Test]   | 2023/05/30 11:34:05 NewFunc main func()\n[Go+ CI/Test]   | 2023/05/30 11:34:05 SetComments 0 \n[Go+ CI/Test]   | //line /foo/bar.gop:2\n[Go+ CI/Test]   | 2023/05/30 11:34:05 DefineVarStart [a]\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Val &{0 STRING \"Hi\"} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:05 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:34:05 SetComments 0 \n[Go+ CI/Test]   | //line /foo/bar.gop:3\n[Go+ CI/Test]   | 2023/05/30 11:34:05 DefineVarStart [b]\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Val &{0 INT 10} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Val a string\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Val &{0 STRING \"!\"} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:05 BinaryOp +\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> MatchFuncCall func(a TemplateParamType{name: T}, b TemplateParamType{name: T}) TemplateParamType{name: T}\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> MatchType string, unboundFuncParam{typ: <nil>}\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> MatchType untyped string (\"!\"), unboundFuncParam{typ: string}\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ArrayLit [10]int 1 false\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ResetInit\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ResetStmt\n[Go+ CI/Test]   | 2023/05/30 11:34:05 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Preload func main\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Load func main\n[Go+ CI/Test]   | 2023/05/30 11:34:05 NewFunc main func()\n[Go+ CI/Test]   | 2023/05/30 11:34:05 SetComments 0 \n[Go+ CI/Test]   | //line /foo/bar.gop:2\n[Go+ CI/Test]   | 2023/05/30 11:34:05 DefineVarStart [a]\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Val &{0 STRING \"Hi\"} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:05 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:34:05 SetComments 0 \n[Go+ CI/Test]   | //line /foo/bar.gop:3\n[Go+ CI/Test]   | 2023/05/30 11:34:05 DefineVarStart [b]\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Val &{0 INT 10} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Val &{0 INT 2} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Val a string\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ArrayLit [10]int 2 true\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ResetInit\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ResetStmt\n[Go+ CI/Test]   | 2023/05/30 11:34:05 End // Func\n[Go+ CI/Test]   | --- PASS: TestErrArrayLit (0.00s)\n[Go+ CI/Test]   | === RUN   TestErrSliceLit\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Preload func main\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Load func main\n[Go+ CI/Test]   | 2023/05/30 11:34:05 NewFunc main func()\n[Go+ CI/Test]   | 2023/05/30 11:34:05 SetComments 0 \n[Go+ CI/Test]   | //line /foo/bar.gop:2\n[Go+ CI/Test]   | 2023/05/30 11:34:05 DefineVarStart [a]\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Val &{0 STRING \"Hi\"} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:05 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:34:05 SetComments 0 \n[Go+ CI/Test]   | //line /foo/bar.gop:3\n[Go+ CI/Test]   | 2023/05/30 11:34:05 DefineVarStart [b]\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Val a string\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Val &{0 INT 1} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:05 SliceLit []int 2 true\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ResetInit\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ResetStmt\n[Go+ CI/Test]   | 2023/05/30 11:34:05 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Preload func main\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Load func main\n[Go+ CI/Test]   | 2023/05/30 11:34:05 NewFunc main func()\n[Go+ CI/Test]   | 2023/05/30 11:34:05 SetComments 0 \n[Go+ CI/Test]   | //line /foo/bar.gop:2\n[Go+ CI/Test]   | 2023/05/30 11:34:05 DefineVarStart [a]\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Val &{0 STRING \"Hi\"} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:05 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:34:05 SetComments 0 \n[Go+ CI/Test]   | //line /foo/bar.gop:3\n[Go+ CI/Test]   | 2023/05/30 11:34:05 DefineVarStart [b]\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Val a string\n[Go+ CI/Test]   | 2023/05/30 11:34:05 SliceLit []int 1 false\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ResetInit\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ResetStmt\n[Go+ CI/Test]   | 2023/05/30 11:34:05 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Preload func main\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Load func main\n[Go+ CI/Test]   | 2023/05/30 11:34:05 NewFunc main func()\n[Go+ CI/Test]   | 2023/05/30 11:34:05 SetComments 0 \n[Go+ CI/Test]   | //line /foo/bar.gop:2\n[Go+ CI/Test]   | 2023/05/30 11:34:05 DefineVarStart [a]\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Val &{0 STRING \"Hi\"} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:05 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:34:05 SetComments 0 \n[Go+ CI/Test]   | //line /foo/bar.gop:3\n[Go+ CI/Test]   | 2023/05/30 11:34:05 DefineVarStart [b]\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Val &{0 INT 2} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Val a string\n[Go+ CI/Test]   | 2023/05/30 11:34:05 SliceLit []int 2 true\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ResetInit\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ResetStmt\n[Go+ CI/Test]   | 2023/05/30 11:34:05 End // Func\n[Go+ CI/Test]   | --- PASS: TestErrSliceLit (0.00s)\n[Go+ CI/Test]   | === RUN   TestErrMapLit\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Preload func main\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Load func main\n[Go+ CI/Test]   | 2023/05/30 11:34:05 NewFunc main func()\n[Go+ CI/Test]   | 2023/05/30 11:34:05 SetComments 0 \n[Go+ CI/Test]   | //line /foo/bar.gop:2\n[Go+ CI/Test]   | 2023/05/30 11:34:05 DefineVarStart [a]\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Val &{0 INT 1} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Val &{0 INT 2} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:05 BinaryOp +\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> MatchFuncCall func(a TemplateParamType{name: T}, b TemplateParamType{name: T}) TemplateParamType{name: T}\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> MatchType untyped int (1), unboundFuncParam{typ: <nil>}\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> MatchType untyped int (2), unboundFuncParam{typ: untyped int}\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Val &{0 INT 2} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:05 MapLit map[string]int 2\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ResetInit\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ResetStmt\n[Go+ CI/Test]   | 2023/05/30 11:34:05 SetComments 0 \n[Go+ CI/Test]   | //line /foo/bar.gop:3\n[Go+ CI/Test]   | 2023/05/30 11:34:05 DefineVarStart [b]\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Val &{0 STRING \"Hi\"} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Val &{0 STRING \"Go\"} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Val &{0 STRING \"+\"} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:05 BinaryOp +\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> MatchFuncCall func(a TemplateParamType{name: T}, b TemplateParamType{name: T}) TemplateParamType{name: T}\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> MatchType untyped string (\"Go\"), unboundFuncParam{typ: <nil>}\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> MatchType untyped string (\"+\"), unboundFuncParam{typ: untyped string}\n[Go+ CI/Test]   | 2023/05/30 11:34:05 MapLit map[string]int 2\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ResetInit\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ResetStmt\n[Go+ CI/Test]   | 2023/05/30 11:34:05 End // Func\n[Go+ CI/Test]   | --- PASS: TestErrMapLit (0.00s)\n[Go+ CI/Test]   | === RUN   TestErrSlice\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Preload var [a]\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Preload func main\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Load var *byte [a]\n[Go+ CI/Test]   | 2023/05/30 11:34:05 NewVar [a]\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Load func main\n[Go+ CI/Test]   | 2023/05/30 11:34:05 NewFunc main func()\n[Go+ CI/Test]   | 2023/05/30 11:34:05 SetComments 0 \n[Go+ CI/Test]   | //line /foo/bar.gop:3\n[Go+ CI/Test]   | 2023/05/30 11:34:05 DefineVarStart [x]\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Val &{0 INT 1} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:05 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:34:05 SetComments 0 \n[Go+ CI/Test]   | //line /foo/bar.gop:4\n[Go+ CI/Test]   | 2023/05/30 11:34:05 DefineVarStart [b]\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Val a *byte\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Val x int\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Val &{0 INT 2} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Slice false\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ResetInit\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ResetStmt\n[Go+ CI/Test]   | 2023/05/30 11:34:05 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Preload func main\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Load func main\n[Go+ CI/Test]   | 2023/05/30 11:34:05 NewFunc main func()\n[Go+ CI/Test]   | 2023/05/30 11:34:05 SetComments 0 \n[Go+ CI/Test]   | //line /foo/bar.gop:2\n[Go+ CI/Test]   | 2023/05/30 11:34:05 DefineVarStart [a]\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Val true untyped bool\n[Go+ CI/Test]   | 2023/05/30 11:34:05 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:34:05 SetComments 0 \n[Go+ CI/Test]   | //line /foo/bar.gop:3\n[Go+ CI/Test]   | 2023/05/30 11:34:05 DefineVarStart [b]\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Val a bool\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Val &{0 INT 1} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Val &{0 INT 2} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Slice false\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ResetInit\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ResetStmt\n[Go+ CI/Test]   | 2023/05/30 11:34:05 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Preload func main\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Load func main\n[Go+ CI/Test]   | 2023/05/30 11:34:05 NewFunc main func()\n[Go+ CI/Test]   | 2023/05/30 11:34:05 SetComments 0 \n[Go+ CI/Test]   | //line /foo/bar.gop:2\n[Go+ CI/Test]   | 2023/05/30 11:34:05 DefineVarStart [a]\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Val &{0 STRING \"Hi\"} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:05 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:34:05 SetComments 0 \n[Go+ CI/Test]   | //line /foo/bar.gop:3\n[Go+ CI/Test]   | 2023/05/30 11:34:05 DefineVarStart [b]\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Val a string\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Val &{0 INT 1} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Val &{0 INT 2} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Val &{0 INT 5} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Slice true\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ResetInit\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ResetStmt\n[Go+ CI/Test]   | 2023/05/30 11:34:05 End // Func\n[Go+ CI/Test]   | --- PASS: TestErrSlice (0.00s)\n[Go+ CI/Test]   | === RUN   TestErrIndex\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Preload func main\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Load func main\n[Go+ CI/Test]   | 2023/05/30 11:34:05 NewFunc main func()\n[Go+ CI/Test]   | 2023/05/30 11:34:05 SetComments 0 \n[Go+ CI/Test]   | //line /foo/bar.gop:2\n[Go+ CI/Test]   | 2023/05/30 11:34:05 DefineVarStart [a]\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Val &{0 STRING \"Hi\"} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:05 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:34:05 SetComments 0 \n[Go+ CI/Test]   | //line /foo/bar.gop:3\n[Go+ CI/Test]   | 2023/05/30 11:34:05 DefineVarStart [b ok]\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Val a string\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Val &{0 INT 1} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Index 1 true\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ResetInit\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ResetStmt\n[Go+ CI/Test]   | 2023/05/30 11:34:05 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Preload func main\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Load func main\n[Go+ CI/Test]   | 2023/05/30 11:34:05 NewFunc main func()\n[Go+ CI/Test]   | 2023/05/30 11:34:05 SetComments 0 \n[Go+ CI/Test]   | //line /foo/bar.gop:2\n[Go+ CI/Test]   | 2023/05/30 11:34:05 DefineVarStart [a]\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Val true untyped bool\n[Go+ CI/Test]   | 2023/05/30 11:34:05 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:34:05 SetComments 0 \n[Go+ CI/Test]   | //line /foo/bar.gop:3\n[Go+ CI/Test]   | 2023/05/30 11:34:05 DefineVarStart [b]\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Val a bool\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Val &{0 INT 1} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Index 1 false\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ResetInit\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ResetStmt\n[Go+ CI/Test]   | 2023/05/30 11:34:05 End // Func\n[Go+ CI/Test]   | --- PASS: TestErrIndex (0.00s)\n[Go+ CI/Test]   | === RUN   TestErrIndexRef\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Preload func main\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Load func main\n[Go+ CI/Test]   | 2023/05/30 11:34:05 NewFunc main func()\n[Go+ CI/Test]   | 2023/05/30 11:34:05 SetComments 0 \n[Go+ CI/Test]   | //line /foo/bar.gop:2\n[Go+ CI/Test]   | 2023/05/30 11:34:05 DefineVarStart [a]\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Val &{0 STRING \"Hi\"} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:05 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:34:05 SetComments 0 \n[Go+ CI/Test]   | //line /foo/bar.gop:3\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Val a string\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Val &{0 INT 1} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:05 IndexRef 1\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ResetStmt\n[Go+ CI/Test]   | 2023/05/30 11:34:05 End // Func\n[Go+ CI/Test]   | --- PASS: TestErrIndexRef (0.00s)\n[Go+ CI/Test]   | === RUN   TestErrStar\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Preload func main\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Load func main\n[Go+ CI/Test]   | 2023/05/30 11:34:05 NewFunc main func()\n[Go+ CI/Test]   | 2023/05/30 11:34:05 SetComments 0 \n[Go+ CI/Test]   | //line /foo/bar.gop:2\n[Go+ CI/Test]   | 2023/05/30 11:34:05 DefineVarStart [a]\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Val &{0 STRING \"Hi\"} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:05 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:34:05 SetComments 0 \n[Go+ CI/Test]   | //line /foo/bar.gop:3\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Val a string\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ElemRef\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ResetStmt\n[Go+ CI/Test]   | 2023/05/30 11:34:05 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Preload func main\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Load func main\n[Go+ CI/Test]   | 2023/05/30 11:34:05 NewFunc main func()\n[Go+ CI/Test]   | 2023/05/30 11:34:05 SetComments 0 \n[Go+ CI/Test]   | //line /foo/bar.gop:2\n[Go+ CI/Test]   | 2023/05/30 11:34:05 DefineVarStart [a]\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Val &{0 STRING \"Hi\"} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:05 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:34:05 SetComments 0 \n[Go+ CI/Test]   | //line /foo/bar.gop:3\n[Go+ CI/Test]   | 2023/05/30 11:34:05 DefineVarStart [b]\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Val a string\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Star\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ResetInit\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ResetStmt\n[Go+ CI/Test]   | 2023/05/30 11:34:05 End // Func\n[Go+ CI/Test]   | --- PASS: TestErrStar (0.00s)\n[Go+ CI/Test]   | === RUN   TestErrMember\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Preload func main\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Load func main\n[Go+ CI/Test]   | 2023/05/30 11:34:05 NewFunc main func()\n[Go+ CI/Test]   | 2023/05/30 11:34:05 SetComments 0 \n[Go+ CI/Test]   | //line /foo/bar.gop:2\n[Go+ CI/Test]   | 2023/05/30 11:34:05 DefineVarStart [a]\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Val &{0 STRING \"Hello\"} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:05 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:34:05 SetComments 0 \n[Go+ CI/Test]   | //line /foo/bar.gop:3\n[Go+ CI/Test]   | 2023/05/30 11:34:05 DefineVarStart [b]\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Val a string\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Member x 2 // string\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ResetInit\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ResetStmt\n[Go+ CI/Test]   | 2023/05/30 11:34:05 End // Func\n[Go+ CI/Test]   | --- PASS: TestErrMember (0.00s)\n[Go+ CI/Test]   | === RUN   TestErrMemberRef\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Preload func main\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Load func main\n[Go+ CI/Test]   | 2023/05/30 11:34:05 NewFunc main func()\n[Go+ CI/Test]   | 2023/05/30 11:34:05 SetComments 0 \n[Go+ CI/Test]   | //line /foo/bar.gop:2\n[Go+ CI/Test]   | 2023/05/30 11:34:05 DefineVarStart [a]\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Val &{0 STRING \"Hello\"} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:05 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:34:05 SetComments 0 \n[Go+ CI/Test]   | //line /foo/bar.gop:3\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Val a string\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Member x -1 // string\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ResetStmt\n[Go+ CI/Test]   | 2023/05/30 11:34:05 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Preload type aaa\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Preload func main\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Load > NewType aaa\n[Go+ CI/Test]   | 2023/05/30 11:34:05 NewType aaa\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Load > InitType aaa\n[Go+ CI/Test]   | 2023/05/30 11:34:05 InitType aaa byte\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Load func main\n[Go+ CI/Test]   | 2023/05/30 11:34:05 NewFunc main func()\n[Go+ CI/Test]   | 2023/05/30 11:34:05 SetComments 0 \n[Go+ CI/Test]   | //line /foo/bar.gop:4\n[Go+ CI/Test]   | 2023/05/30 11:34:05 DefineVarStart [a]\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Val aaa aaa\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Val &{0 INT 0} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Call 1 0 // TypeType{typ: aaa}\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> MatchFuncCall TypeType{typ: aaa}\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> EnsureLoaded aaa\n[Go+ CI/Test]   | 2023/05/30 11:34:05 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:34:05 SetComments 0 \n[Go+ CI/Test]   | //line /foo/bar.gop:5\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Val a aaa\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Member x -1 // aaa\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ResetStmt\n[Go+ CI/Test]   | 2023/05/30 11:34:05 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Preload type aaa\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Preload func main\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Load > NewType aaa\n[Go+ CI/Test]   | 2023/05/30 11:34:05 NewType aaa\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Load > InitType aaa\n[Go+ CI/Test]   | 2023/05/30 11:34:05 InitType aaa struct{x int; y string}\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Load func main\n[Go+ CI/Test]   | 2023/05/30 11:34:05 NewFunc main func()\n[Go+ CI/Test]   | 2023/05/30 11:34:05 SetComments 0 \n[Go+ CI/Test]   | //line /foo/bar.gop:4\n[Go+ CI/Test]   | 2023/05/30 11:34:05 DefineVarStart [a]\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> LookupParent aaa => type aaa struct{x int; y string}\n[Go+ CI/Test]   | 2023/05/30 11:34:05 StructLit aaa 0 false\n[Go+ CI/Test]   | 2023/05/30 11:34:05 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:34:05 SetComments 0 \n[Go+ CI/Test]   | //line /foo/bar.gop:5\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Val a aaa\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Member z -1 // aaa\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ResetStmt\n[Go+ CI/Test]   | 2023/05/30 11:34:05 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Preload func main\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Load func main\n[Go+ CI/Test]   | 2023/05/30 11:34:05 NewFunc main func()\n[Go+ CI/Test]   | 2023/05/30 11:34:05 SetComments 0 \n[Go+ CI/Test]   | //line /foo/bar.gop:2\n[Go+ CI/Test]   | 2023/05/30 11:34:05 DefineVarStart [a]\n[Go+ CI/Test]   | 2023/05/30 11:34:05 StructLit struct{x int; y string} 0 false\n[Go+ CI/Test]   | 2023/05/30 11:34:05 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:34:05 SetComments 0 \n[Go+ CI/Test]   | //line /foo/bar.gop:3\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Val a struct{x int; y string}\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Member z -1 // struct{x int; y string}\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ResetStmt\n[Go+ CI/Test]   | 2023/05/30 11:34:05 End // Func\n[Go+ CI/Test]   | --- PASS: TestErrMemberRef (0.00s)\n[Go+ CI/Test]   | === RUN   TestErrLabel\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Preload func main\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Load func main\n[Go+ CI/Test]   | 2023/05/30 11:34:05 NewFunc main func()\n[Go+ CI/Test]   | 2023/05/30 11:34:05 SetComments 0 \n[Go+ CI/Test]   | //line /foo/bar.gop:1\n[Go+ CI/Test]   | 2023/05/30 11:34:05 DefineVarStart [x]\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Val &{0 INT 1} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:05 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:34:05 SetComments 0 \n[Go+ CI/Test]   | //line /foo/bar.gop:2\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Label foo\n[Go+ CI/Test]   | 2023/05/30 11:34:05 SetComments 0 \n[Go+ CI/Test]   | //line /foo/bar.gop:3\n[Go+ CI/Test]   | 2023/05/30 11:34:05 DefineVarStart [i]\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Val &{0 INT 1} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:05 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:34:05 SetComments 0 \n[Go+ CI/Test]   | //line /foo/bar.gop:4\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Label foo\n[Go+ CI/Test]   | 2023/05/30 11:34:05 SetComments 0 \n[Go+ CI/Test]   | //line /foo/bar.gop:5\n[Go+ CI/Test]   | 2023/05/30 11:34:05 VarRef i int\n[Go+ CI/Test]   | 2023/05/30 11:34:05 IncDec ++\n[Go+ CI/Test]   | 2023/05/30 11:34:05 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Preload func main\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Load func main\n[Go+ CI/Test]   | 2023/05/30 11:34:05 NewFunc main func()\n[Go+ CI/Test]   | 2023/05/30 11:34:05 SetComments 0 \n[Go+ CI/Test]   | //line /foo/bar.gop:1\n[Go+ CI/Test]   | 2023/05/30 11:34:05 DefineVarStart [x]\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Val &{0 INT 1} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:05 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:34:05 SetComments 0 \n[Go+ CI/Test]   | //line /foo/bar.gop:2\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ResetStmt\n[Go+ CI/Test]   | 2023/05/30 11:34:05 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Preload func main\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Load func main\n[Go+ CI/Test]   | 2023/05/30 11:34:05 NewFunc main func()\n[Go+ CI/Test]   | 2023/05/30 11:34:05 SetComments 0 \n[Go+ CI/Test]   | //line /foo/bar.gop:1\n[Go+ CI/Test]   | 2023/05/30 11:34:05 DefineVarStart [x]\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Val &{0 INT 1} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:05 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:34:05 SetComments 0 \n[Go+ CI/Test]   | //line /foo/bar.gop:2\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Break \n[Go+ CI/Test]   | 2023/05/30 11:34:05 End // Func\n[Go+ CI/Test]   | --- PASS: TestErrLabel (0.00s)\n[Go+ CI/Test]   | === RUN   TestErrBranchStmt\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Preload func foo\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Load func foo\n[Go+ CI/Test]   | 2023/05/30 11:34:05 NewFunc foo func()\n[Go+ CI/Test]   | 2023/05/30 11:34:05 SetComments 0 \n[Go+ CI/Test]   | //line /foo/bar.gop:2\n[Go+ CI/Test]   | 2023/05/30 11:34:05 End // Func\n[Go+ CI/Test]   | --- PASS: TestErrBranchStmt (0.00s)\n[Go+ CI/Test]   | === RUN   TestErrNoEntrypoint\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Preload func main\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Load func main\n[Go+ CI/Test]   | 2023/05/30 11:34:05 NewFunc main func()\n[Go+ CI/Test]   | 2023/05/30 11:34:05 SetComments 0 \n[Go+ CI/Test]   | //line /foo/bar.gop:2\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ResetStmt\n[Go+ CI/Test]   | 2023/05/30 11:34:05 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Preload func main\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Load func main\n[Go+ CI/Test]   | 2023/05/30 11:34:05 NewFunc main func()\n[Go+ CI/Test]   | 2023/05/30 11:34:05 SetComments 0 \n[Go+ CI/Test]   | //line /foo/bar.gop:1\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ResetStmt\n[Go+ CI/Test]   | 2023/05/30 11:34:05 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Preload func main\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Load func main\n[Go+ CI/Test]   | 2023/05/30 11:34:05 NewFunc main func()\n[Go+ CI/Test]   | 2023/05/30 11:34:05 SetComments 0 \n[Go+ CI/Test]   | //line /foo/bar.gop:2\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ResetStmt\n[Go+ CI/Test]   | 2023/05/30 11:34:05 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Preload func main\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Load func main\n[Go+ CI/Test]   | 2023/05/30 11:34:05 NewFunc main func()\n[Go+ CI/Test]   | 2023/05/30 11:34:05 SetComments 0 \n[Go+ CI/Test]   | //line /foo/bar.gop:2\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ResetStmt\n[Go+ CI/Test]   | 2023/05/30 11:34:05 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Preload func main\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Load func main\n[Go+ CI/Test]   | 2023/05/30 11:34:05 NewFunc main func()\n[Go+ CI/Test]   | 2023/05/30 11:34:05 SetComments 0 \n[Go+ CI/Test]   | //line /foo/bar.gop:1\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Val println overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ResetStmt\n[Go+ CI/Test]   | 2023/05/30 11:34:05 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Preload func init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Load func init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 NewFunc init func()\n[Go+ CI/Test]   | 2023/05/30 11:34:05 SetComments 0 \n[Go+ CI/Test]   | //line /foo/bar.gop:2\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Val println overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ResetStmt\n[Go+ CI/Test]   | 2023/05/30 11:34:05 End // Func\n[Go+ CI/Test]   | --- PASS: TestErrNoEntrypoint (0.00s)\n[Go+ CI/Test]   | === RUN   TestErrTypeRedefine\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Preload method Point.String\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Preload type Point\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Preload type Point\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Load > NewType Point\n[Go+ CI/Test]   | 2023/05/30 11:34:05 NewType Point\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Load > InitType Point\n[Go+ CI/Test]   | 2023/05/30 11:34:05 InitType Point struct{X int; Y int}\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> LookupParent Point => type Point struct{X int; Y int}\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Load method *Point.String\n[Go+ CI/Test]   | 2023/05/30 11:34:05 NewFunc String (*Point) func() string\n[Go+ CI/Test]   | 2023/05/30 11:34:05 SetComments 0 \n[Go+ CI/Test]   | //line /foo/bar.gop:3\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Val Sprintf func(format string, a ...interface{}) string\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Val &{0 STRING \"%v-%v\"} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Val p *Point\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Member X 2 // *Point\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Val p *Point\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Member Y 2 // *Point\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Call 3 0 // func(format string, a ...interface{}) string\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> MatchFuncCall func(format string, a ...interface{}) string\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> MatchType untyped string (\"%v-%v\"), string\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> MatchType int, interface{}\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> MatchType int, interface{}\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Return 1\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> MatchType string, string\n[Go+ CI/Test]   | 2023/05/30 11:34:05 End // Func\n[Go+ CI/Test]   | --- PASS: TestErrTypeRedefine (0.00s)\n[Go+ CI/Test]   | === RUN   TestErrSwitchDuplicate\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Preload var [n]\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Preload func main\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Load var int [n]\n[Go+ CI/Test]   | 2023/05/30 11:34:05 NewVar [n]\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Load func main\n[Go+ CI/Test]   | 2023/05/30 11:34:05 NewFunc main func()\n[Go+ CI/Test]   | 2023/05/30 11:34:05 SetComments 0 \n[Go+ CI/Test]   | //line /foo/bar.gop:2\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Switch\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Val n int\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Then\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Val &{0 INT 100} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Case 1\n[Go+ CI/Test]   | 2023/05/30 11:34:05 SetComments 0 \n[Go+ CI/Test]   | //line /foo/bar.gop:3\n[Go+ CI/Test]   | 2023/05/30 11:34:05 End // Case\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Val &{0 INT 100} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Case 1\n[Go+ CI/Test]   | 2023/05/30 11:34:05 SetComments 0 \n[Go+ CI/Test]   | //line /foo/bar.gop:4\n[Go+ CI/Test]   | 2023/05/30 11:34:05 End // Case\n[Go+ CI/Test]   | 2023/05/30 11:34:05 SetComments 0 \n[Go+ CI/Test]   | //line /foo/bar.gop:2\n[Go+ CI/Test]   | 2023/05/30 11:34:05 End // Switch\n[Go+ CI/Test]   | 2023/05/30 11:34:05 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Preload var [n]\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Preload func main\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Load var int [n]\n[Go+ CI/Test]   | 2023/05/30 11:34:05 NewVar [n]\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Load func main\n[Go+ CI/Test]   | 2023/05/30 11:34:05 NewFunc main func()\n[Go+ CI/Test]   | 2023/05/30 11:34:05 SetComments 0 \n[Go+ CI/Test]   | //line /foo/bar.gop:2\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Switch\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Val n int\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Then\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Val &{0 INT 100} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Case 1\n[Go+ CI/Test]   | 2023/05/30 11:34:05 SetComments 0 \n[Go+ CI/Test]   | //line /foo/bar.gop:3\n[Go+ CI/Test]   | 2023/05/30 11:34:05 End // Case\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Val int int\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Val &{0 INT 100} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Call 1 0 // TypeType{typ: int}\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> MatchFuncCall TypeType{typ: int}\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Case 1\n[Go+ CI/Test]   | 2023/05/30 11:34:05 SetComments 0 \n[Go+ CI/Test]   | //line /foo/bar.gop:4\n[Go+ CI/Test]   | 2023/05/30 11:34:05 End // Case\n[Go+ CI/Test]   | 2023/05/30 11:34:05 SetComments 0 \n[Go+ CI/Test]   | //line /foo/bar.gop:2\n[Go+ CI/Test]   | 2023/05/30 11:34:05 End // Switch\n[Go+ CI/Test]   | 2023/05/30 11:34:05 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Preload var [n]\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Preload func main\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Load var int [n]\n[Go+ CI/Test]   | 2023/05/30 11:34:05 NewVar [n]\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Load func main\n[Go+ CI/Test]   | 2023/05/30 11:34:05 NewFunc main func()\n[Go+ CI/Test]   | 2023/05/30 11:34:05 SetComments 0 \n[Go+ CI/Test]   | //line /foo/bar.gop:2\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Switch\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Val n int\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Then\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Val &{0 INT 100} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Case 1\n[Go+ CI/Test]   | 2023/05/30 11:34:05 SetComments 0 \n[Go+ CI/Test]   | //line /foo/bar.gop:3\n[Go+ CI/Test]   | 2023/05/30 11:34:05 End // Case\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Val &{0 INT 50} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Val &{0 INT 50} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:05 BinaryOp +\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> MatchFuncCall func(a TemplateParamType{name: T}, b TemplateParamType{name: T}) TemplateParamType{name: T}\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> MatchType untyped int (50), unboundFuncParam{typ: <nil>}\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> MatchType untyped int (50), unboundFuncParam{typ: untyped int}\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Case 1\n[Go+ CI/Test]   | 2023/05/30 11:34:05 SetComments 0 \n[Go+ CI/Test]   | //line /foo/bar.gop:4\n[Go+ CI/Test]   | 2023/05/30 11:34:05 End // Case\n[Go+ CI/Test]   | 2023/05/30 11:34:05 SetComments 0 \n[Go+ CI/Test]   | //line /foo/bar.gop:2\n[Go+ CI/Test]   | 2023/05/30 11:34:05 End // Switch\n[Go+ CI/Test]   | 2023/05/30 11:34:05 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Preload var [n]\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Preload func main\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Load var interface{} [n]\n[Go+ CI/Test]   | 2023/05/30 11:34:05 NewVar [n]\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Load func main\n[Go+ CI/Test]   | 2023/05/30 11:34:05 NewFunc main func()\n[Go+ CI/Test]   | 2023/05/30 11:34:05 SetComments 0 \n[Go+ CI/Test]   | //line /foo/bar.gop:2\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Switch\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Val n interface{}\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Then\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Val &{0 INT 100} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Case 1\n[Go+ CI/Test]   | 2023/05/30 11:34:05 SetComments 0 \n[Go+ CI/Test]   | //line /foo/bar.gop:3\n[Go+ CI/Test]   | 2023/05/30 11:34:05 End // Case\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Val uint uint\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Val &{0 INT 100} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Call 1 0 // TypeType{typ: uint}\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> MatchFuncCall TypeType{typ: uint}\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Case 1\n[Go+ CI/Test]   | 2023/05/30 11:34:05 SetComments 0 \n[Go+ CI/Test]   | //line /foo/bar.gop:4\n[Go+ CI/Test]   | 2023/05/30 11:34:05 End // Case\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Val int int\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Val &{0 INT 100} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Call 1 0 // TypeType{typ: int}\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> MatchFuncCall TypeType{typ: int}\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Case 1\n[Go+ CI/Test]   | 2023/05/30 11:34:05 SetComments 0 \n[Go+ CI/Test]   | //line /foo/bar.gop:5\n[Go+ CI/Test]   | 2023/05/30 11:34:05 End // Case\n[Go+ CI/Test]   | 2023/05/30 11:34:05 SetComments 0 \n[Go+ CI/Test]   | //line /foo/bar.gop:2\n[Go+ CI/Test]   | 2023/05/30 11:34:05 End // Switch\n[Go+ CI/Test]   | 2023/05/30 11:34:05 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Preload var [n]\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Preload func main\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Load var interface{} [n]\n[Go+ CI/Test]   | 2023/05/30 11:34:05 NewVar [n]\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Load func main\n[Go+ CI/Test]   | 2023/05/30 11:34:05 NewFunc main func()\n[Go+ CI/Test]   | 2023/05/30 11:34:05 SetComments 0 \n[Go+ CI/Test]   | //line /foo/bar.gop:2\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Switch\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Val n interface{}\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Then\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Val &{0 FLOAT 100.0} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Case 1\n[Go+ CI/Test]   | 2023/05/30 11:34:05 SetComments 0 \n[Go+ CI/Test]   | //line /foo/bar.gop:3\n[Go+ CI/Test]   | 2023/05/30 11:34:05 End // Case\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Val &{0 FLOAT 100.0} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Case 1\n[Go+ CI/Test]   | 2023/05/30 11:34:05 SetComments 0 \n[Go+ CI/Test]   | //line /foo/bar.gop:4\n[Go+ CI/Test]   | 2023/05/30 11:34:05 End // Case\n[Go+ CI/Test]   | 2023/05/30 11:34:05 SetComments 0 \n[Go+ CI/Test]   | //line /foo/bar.gop:2\n[Go+ CI/Test]   | 2023/05/30 11:34:05 End // Switch\n[Go+ CI/Test]   | 2023/05/30 11:34:05 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Preload var [n]\n[Go+ CI/Test]   | 2023/05/30 11:34:05 NewConstDefs\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Preload const [v]\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Preload func main\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Load var interface{} [n]\n[Go+ CI/Test]   | 2023/05/30 11:34:05 NewVar [n]\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Load const [v] <nil>\n[Go+ CI/Test]   | 2023/05/30 11:34:05 NewConst [v] 0\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Val &{0 FLOAT 100.0} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:05 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Load func main\n[Go+ CI/Test]   | 2023/05/30 11:34:05 NewFunc main func()\n[Go+ CI/Test]   | 2023/05/30 11:34:05 SetComments 0 \n[Go+ CI/Test]   | //line /foo/bar.gop:3\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Switch\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Val n interface{}\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Then\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Val &{0 FLOAT 100.0} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Case 1\n[Go+ CI/Test]   | 2023/05/30 11:34:05 SetComments 0 \n[Go+ CI/Test]   | //line /foo/bar.gop:4\n[Go+ CI/Test]   | 2023/05/30 11:34:05 End // Case\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Val v untyped float\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Case 1\n[Go+ CI/Test]   | 2023/05/30 11:34:05 SetComments 0 \n[Go+ CI/Test]   | //line /foo/bar.gop:5\n[Go+ CI/Test]   | 2023/05/30 11:34:05 End // Case\n[Go+ CI/Test]   | 2023/05/30 11:34:05 SetComments 0 \n[Go+ CI/Test]   | //line /foo/bar.gop:3\n[Go+ CI/Test]   | 2023/05/30 11:34:05 End // Switch\n[Go+ CI/Test]   | 2023/05/30 11:34:05 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Preload var [n]\n[Go+ CI/Test]   | 2023/05/30 11:34:05 NewConstDefs\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Preload const [v]\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Preload func main\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Load var interface{} [n]\n[Go+ CI/Test]   | 2023/05/30 11:34:05 NewVar [n]\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Load const [v] <nil>\n[Go+ CI/Test]   | 2023/05/30 11:34:05 NewConst [v] 0\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Val &{0 STRING \"hello\"} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:05 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Load func main\n[Go+ CI/Test]   | 2023/05/30 11:34:05 NewFunc main func()\n[Go+ CI/Test]   | 2023/05/30 11:34:05 SetComments 0 \n[Go+ CI/Test]   | //line /foo/bar.gop:3\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Switch\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Val n interface{}\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Then\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Val &{0 STRING \"hello\"} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Case 1\n[Go+ CI/Test]   | 2023/05/30 11:34:05 SetComments 0 \n[Go+ CI/Test]   | //line /foo/bar.gop:4\n[Go+ CI/Test]   | 2023/05/30 11:34:05 End // Case\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Val v untyped string\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Case 1\n[Go+ CI/Test]   | 2023/05/30 11:34:05 SetComments 0 \n[Go+ CI/Test]   | //line /foo/bar.gop:5\n[Go+ CI/Test]   | 2023/05/30 11:34:05 End // Case\n[Go+ CI/Test]   | 2023/05/30 11:34:05 SetComments 0 \n[Go+ CI/Test]   | //line /foo/bar.gop:3\n[Go+ CI/Test]   | 2023/05/30 11:34:05 End // Switch\n[Go+ CI/Test]   | 2023/05/30 11:34:05 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Preload var [n]\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Preload func main\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Load var int [n]\n[Go+ CI/Test]   | 2023/05/30 11:34:05 NewVar [n]\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Load func main\n[Go+ CI/Test]   | 2023/05/30 11:34:05 NewFunc main func()\n[Go+ CI/Test]   | 2023/05/30 11:34:05 SetComments 0 \n[Go+ CI/Test]   | //line /foo/bar.gop:2\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Switch\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Val n int\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Then\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Val &{0 INT 100} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Case 1\n[Go+ CI/Test]   | 2023/05/30 11:34:05 SetComments 0 \n[Go+ CI/Test]   | //line /foo/bar.gop:3\n[Go+ CI/Test]   | 2023/05/30 11:34:05 End // Case\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Val &{0 INT 100} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Case 1\n[Go+ CI/Test]   | 2023/05/30 11:34:05 SetComments 0 \n[Go+ CI/Test]   | //line /foo/bar.gop:4\n[Go+ CI/Test]   | 2023/05/30 11:34:05 End // Case\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Val &{0 INT 50} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Val &{0 INT 50} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:05 BinaryOp +\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> MatchFuncCall func(a TemplateParamType{name: T}, b TemplateParamType{name: T}) TemplateParamType{name: T}\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> MatchType untyped int (50), unboundFuncParam{typ: <nil>}\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> MatchType untyped int (50), unboundFuncParam{typ: untyped int}\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Case 1\n[Go+ CI/Test]   | 2023/05/30 11:34:05 SetComments 0 \n[Go+ CI/Test]   | //line /foo/bar.gop:5\n[Go+ CI/Test]   | 2023/05/30 11:34:05 End // Case\n[Go+ CI/Test]   | 2023/05/30 11:34:05 SetComments 0 \n[Go+ CI/Test]   | //line /foo/bar.gop:2\n[Go+ CI/Test]   | 2023/05/30 11:34:05 End // Switch\n[Go+ CI/Test]   | 2023/05/30 11:34:05 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Preload var [n]\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Preload func main\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Load var interface{} [n]\n[Go+ CI/Test]   | 2023/05/30 11:34:05 NewVar [n]\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Load func main\n[Go+ CI/Test]   | 2023/05/30 11:34:05 NewFunc main func()\n[Go+ CI/Test]   | 2023/05/30 11:34:05 SetComments 0 \n[Go+ CI/Test]   | //line /foo/bar.gop:2\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Switch\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Val n interface{}\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Then\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Case 0\n[Go+ CI/Test]   | 2023/05/30 11:34:05 SetComments 0 \n[Go+ CI/Test]   | //line /foo/bar.gop:3\n[Go+ CI/Test]   | 2023/05/30 11:34:05 End // Case\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Case 0\n[Go+ CI/Test]   | 2023/05/30 11:34:05 SetComments 0 \n[Go+ CI/Test]   | //line /foo/bar.gop:4\n[Go+ CI/Test]   | 2023/05/30 11:34:05 End // Case\n[Go+ CI/Test]   | 2023/05/30 11:34:05 SetComments 0 \n[Go+ CI/Test]   | //line /foo/bar.gop:2\n[Go+ CI/Test]   | 2023/05/30 11:34:05 End // Switch\n[Go+ CI/Test]   | 2023/05/30 11:34:05 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Preload var [n]\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Preload func main\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Load var interface{} [n]\n[Go+ CI/Test]   | 2023/05/30 11:34:05 NewVar [n]\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Load func main\n[Go+ CI/Test]   | 2023/05/30 11:34:05 NewFunc main func()\n[Go+ CI/Test]   | 2023/05/30 11:34:05 SetComments 0 \n[Go+ CI/Test]   | //line /foo/bar.gop:2\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Switch\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Val n interface{}\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Then\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Case 0\n[Go+ CI/Test]   | 2023/05/30 11:34:05 SetComments 0 \n[Go+ CI/Test]   | //line /foo/bar.gop:3\n[Go+ CI/Test]   | 2023/05/30 11:34:05 End // Case\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Case 0\n[Go+ CI/Test]   | 2023/05/30 11:34:05 SetComments 0 \n[Go+ CI/Test]   | //line /foo/bar.gop:4\n[Go+ CI/Test]   | 2023/05/30 11:34:05 End // Case\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Case 0\n[Go+ CI/Test]   | 2023/05/30 11:34:05 SetComments 0 \n[Go+ CI/Test]   | //line /foo/bar.gop:5\n[Go+ CI/Test]   | 2023/05/30 11:34:05 End // Case\n[Go+ CI/Test]   | 2023/05/30 11:34:05 SetComments 0 \n[Go+ CI/Test]   | //line /foo/bar.gop:2\n[Go+ CI/Test]   | 2023/05/30 11:34:05 End // Switch\n[Go+ CI/Test]   | 2023/05/30 11:34:05 End // Func\n[Go+ CI/Test]   | --- PASS: TestErrSwitchDuplicate (0.01s)\n[Go+ CI/Test]   | === RUN   TestErrTypeSwitchDuplicate\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Preload var [n]\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Preload func main\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Load var interface{} [n]\n[Go+ CI/Test]   | 2023/05/30 11:34:05 NewVar [n]\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Val &{0 INT 100} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:05 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> MatchType untyped int (100), interface{}\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Load func main\n[Go+ CI/Test]   | 2023/05/30 11:34:05 NewFunc main func()\n[Go+ CI/Test]   | 2023/05/30 11:34:05 SetComments 0 \n[Go+ CI/Test]   | //line /foo/bar.gop:2\n[Go+ CI/Test]   | 2023/05/30 11:34:05 TypeSwitch\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Val n interface{}\n[Go+ CI/Test]   | 2023/05/30 11:34:05 TypeAssertThen\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Val int int\n[Go+ CI/Test]   | 2023/05/30 11:34:05 TypeCase 1\n[Go+ CI/Test]   | 2023/05/30 11:34:05 SetComments 0 \n[Go+ CI/Test]   | //line /foo/bar.gop:3\n[Go+ CI/Test]   | 2023/05/30 11:34:05 End // TypeCase\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Val int int\n[Go+ CI/Test]   | 2023/05/30 11:34:05 TypeCase 1\n[Go+ CI/Test]   | 2023/05/30 11:34:05 SetComments 0 \n[Go+ CI/Test]   | //line /foo/bar.gop:4\n[Go+ CI/Test]   | 2023/05/30 11:34:05 End // TypeCase\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Val int int\n[Go+ CI/Test]   | 2023/05/30 11:34:05 TypeCase 1\n[Go+ CI/Test]   | 2023/05/30 11:34:05 SetComments 0 \n[Go+ CI/Test]   | //line /foo/bar.gop:5\n[Go+ CI/Test]   | 2023/05/30 11:34:05 End // TypeCase\n[Go+ CI/Test]   | 2023/05/30 11:34:05 SetComments 0 \n[Go+ CI/Test]   | //line /foo/bar.gop:2\n[Go+ CI/Test]   | 2023/05/30 11:34:05 End // TypeSwitch\n[Go+ CI/Test]   | 2023/05/30 11:34:05 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Preload var [n]\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Preload func main\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Load var interface{} [n]\n[Go+ CI/Test]   | 2023/05/30 11:34:05 NewVar [n]\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Val &{0 INT 100} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:05 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> MatchType untyped int (100), interface{}\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Load func main\n[Go+ CI/Test]   | 2023/05/30 11:34:05 NewFunc main func()\n[Go+ CI/Test]   | 2023/05/30 11:34:05 SetComments 0 \n[Go+ CI/Test]   | //line /foo/bar.gop:2\n[Go+ CI/Test]   | 2023/05/30 11:34:05 TypeSwitch\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Val n interface{}\n[Go+ CI/Test]   | 2023/05/30 11:34:05 TypeAssertThen\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Val nil untyped nil\n[Go+ CI/Test]   | 2023/05/30 11:34:05 TypeCase 1\n[Go+ CI/Test]   | 2023/05/30 11:34:05 SetComments 0 \n[Go+ CI/Test]   | //line /foo/bar.gop:3\n[Go+ CI/Test]   | 2023/05/30 11:34:05 End // TypeCase\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Val nil untyped nil\n[Go+ CI/Test]   | 2023/05/30 11:34:05 TypeCase 1\n[Go+ CI/Test]   | 2023/05/30 11:34:05 SetComments 0 \n[Go+ CI/Test]   | //line /foo/bar.gop:4\n[Go+ CI/Test]   | 2023/05/30 11:34:05 End // TypeCase\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Val nil untyped nil\n[Go+ CI/Test]   | 2023/05/30 11:34:05 TypeCase 1\n[Go+ CI/Test]   | 2023/05/30 11:34:05 SetComments 0 \n[Go+ CI/Test]   | //line /foo/bar.gop:5\n[Go+ CI/Test]   | 2023/05/30 11:34:05 End // TypeCase\n[Go+ CI/Test]   | 2023/05/30 11:34:05 SetComments 0 \n[Go+ CI/Test]   | //line /foo/bar.gop:2\n[Go+ CI/Test]   | 2023/05/30 11:34:05 End // TypeSwitch\n[Go+ CI/Test]   | 2023/05/30 11:34:05 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Preload var [n]\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Preload func main\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Load var interface{} [n]\n[Go+ CI/Test]   | 2023/05/30 11:34:05 NewVar [n]\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Val &{0 INT 100} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:05 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> MatchType untyped int (100), interface{}\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Load func main\n[Go+ CI/Test]   | 2023/05/30 11:34:05 NewFunc main func()\n[Go+ CI/Test]   | 2023/05/30 11:34:05 SetComments 0 \n[Go+ CI/Test]   | //line /foo/bar.gop:2\n[Go+ CI/Test]   | 2023/05/30 11:34:05 TypeSwitch\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Val n interface{}\n[Go+ CI/Test]   | 2023/05/30 11:34:05 TypeAssertThen\n[Go+ CI/Test]   | 2023/05/30 11:34:05 TypeCase 0\n[Go+ CI/Test]   | 2023/05/30 11:34:05 SetComments 0 \n[Go+ CI/Test]   | //line /foo/bar.gop:3\n[Go+ CI/Test]   | 2023/05/30 11:34:05 End // TypeCase\n[Go+ CI/Test]   | 2023/05/30 11:34:05 TypeCase 0\n[Go+ CI/Test]   | 2023/05/30 11:34:05 SetComments 0 \n[Go+ CI/Test]   | //line /foo/bar.gop:4\n[Go+ CI/Test]   | 2023/05/30 11:34:05 End // TypeCase\n[Go+ CI/Test]   | 2023/05/30 11:34:05 TypeCase 0\n[Go+ CI/Test]   | 2023/05/30 11:34:05 SetComments 0 \n[Go+ CI/Test]   | //line /foo/bar.gop:5\n[Go+ CI/Test]   | 2023/05/30 11:34:05 End // TypeCase\n[Go+ CI/Test]   | 2023/05/30 11:34:05 SetComments 0 \n[Go+ CI/Test]   | //line /foo/bar.gop:2\n[Go+ CI/Test]   | 2023/05/30 11:34:05 End // TypeSwitch\n[Go+ CI/Test]   | 2023/05/30 11:34:05 End // Func\n[Go+ CI/Test]   | --- PASS: TestErrTypeSwitchDuplicate (0.00s)\n[Go+ CI/Test]   | === RUN   TestErrAutoProperty\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Preload func main\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Load func main\n[Go+ CI/Test]   | 2023/05/30 11:34:05 NewFunc main func()\n[Go+ CI/Test]   | 2023/05/30 11:34:05 SetComments 0 \n[Go+ CI/Test]   | //line /foo/bar.gop:4\n[Go+ CI/Test]   | 2023/05/30 11:34:05 DefineVarStart [n err]\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ResetInit\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ResetStmt\n[Go+ CI/Test]   | 2023/05/30 11:34:05 End // Func\n[Go+ CI/Test]   | --- PASS: TestErrAutoProperty (0.00s)\n[Go+ CI/Test]   | === RUN   TestFiledsNameRedecl\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Preload type Id\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Preload type A\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Load > NewType Id\n[Go+ CI/Test]   | 2023/05/30 11:34:05 NewType Id\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Load > InitType Id\n[Go+ CI/Test]   | 2023/05/30 11:34:05 InitType Id struct{}\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Load > NewType A\n[Go+ CI/Test]   | 2023/05/30 11:34:05 NewType A\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Load > InitType A\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> LookupParent Id => type Id struct{}\n[Go+ CI/Test]   | 2023/05/30 11:34:05 InitType A struct{Id int; name string}\n[Go+ CI/Test]   | --- PASS: TestFiledsNameRedecl (0.00s)\n[Go+ CI/Test]   | === RUN   TestErrImportPkg\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | --- PASS: TestErrImportPkg (0.08s)\n[Go+ CI/Test]   | === RUN   TestUint128_run\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Preload func main\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Load func main\n[Go+ CI/Test]   | 2023/05/30 11:34:05 NewFunc main func()\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Block\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Load var string [name]\n[Go+ CI/Test]   | 2023/05/30 11:34:05 NewVar [name]\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Load var github.com/goplus/gop/builtin/ng.Uint128 [age]\n[Go+ CI/Test]   | 2023/05/30 11:34:05 NewVar [age]\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Val Sscanf func(str string, format string, a ...interface{}) (n int, err error)\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Val &{0 STRING \"Kim is 22 years old\"} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Val &{0 STRING \"%s is %d years old\"} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Val name string\n[Go+ CI/Test]   | 2023/05/30 11:34:05 UnaryOp & flags: 0\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> MatchFuncCall instructionType{instr: gox.addrInstr}\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Val age github.com/goplus/gop/builtin/ng.Uint128\n[Go+ CI/Test]   | 2023/05/30 11:34:05 UnaryOp & flags: 0\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> MatchFuncCall instructionType{instr: gox.addrInstr}\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Call 4 0 // func(str string, format string, a ...interface{}) (n int, err error)\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> MatchFuncCall func(str string, format string, a ...interface{}) (n int, err error)\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> MatchType untyped string (\"Kim is 22 years old\"), string\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> MatchType untyped string (\"%s is %d years old\"), string\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> MatchType *string, interface{}\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> MatchType *github.com/goplus/gop/builtin/ng.Uint128, interface{}\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Val println overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Val name string\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Val age github.com/goplus/gop/builtin/ng.Uint128\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Call 2 0 // overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> MatchFuncCall overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> MatchFuncCall func(a ...interface{}) (n int, err error)\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> MatchType string, interface{}\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> MatchType github.com/goplus/gop/builtin/ng.Uint128, interface{}\n[Go+ CI/Test]   | 2023/05/30 11:34:05 End // Block\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Block\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Load var github.com/goplus/gop/builtin/ng.Uint128 [x]\n[Go+ CI/Test]   | 2023/05/30 11:34:05 NewVar [x]\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Val &{0 INT 1} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:05 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> MatchType untyped int (1), github.com/goplus/gop/builtin/ng.Uint128\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> MatchFuncCall overloadFuncType{funcs: [func github.com/goplus/gop/builtin/ng.Uint128_Init__0(v int) (out github.com/goplus/gop/builtin/ng.Uint128) func github.com/goplus/gop/builtin/ng.Uint128_Init__1(v github.com/goplus/gop/builtin/ng.UntypedBigint) (out github.com/goplus/gop/builtin/ng.Uint128)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> MatchFuncCall func(v int) (out github.com/goplus/gop/builtin/ng.Uint128)\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> MatchType untyped int (1), int\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> AssignableConv untyped int github.com/goplus/gop/builtin/ng.Uint128 true\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Load var <nil> [y]\n[Go+ CI/Test]   | 2023/05/30 11:34:05 NewVar [y]\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Val x github.com/goplus/gop/builtin/ng.Uint128\n[Go+ CI/Test]   | 2023/05/30 11:34:05 UnaryOp + flags: 0\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> MatchFuncCall func() (v github.com/goplus/gop/builtin/ng.Uint128)\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> MatchType github.com/goplus/gop/builtin/ng.Uint128, github.com/goplus/gop/builtin/ng.Uint128\n[Go+ CI/Test]   | 2023/05/30 11:34:05 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:34:05 VarRef x github.com/goplus/gop/builtin/ng.Uint128\n[Go+ CI/Test]   | 2023/05/30 11:34:05 IncDec ++\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> MatchFuncCall func()\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> MatchType refType{typ: github.com/goplus/gop/builtin/ng.Uint128}, *github.com/goplus/gop/builtin/ng.Uint128\n[Go+ CI/Test]   | 2023/05/30 11:34:05 VarRef x github.com/goplus/gop/builtin/ng.Uint128\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Val &{0 INT 10} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:05 AssignOp += Gop_AddAssign\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> MatchFuncCall func(b github.com/goplus/gop/builtin/ng.Uint128)\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> MatchType refType{typ: github.com/goplus/gop/builtin/ng.Uint128}, *github.com/goplus/gop/builtin/ng.Uint128\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> MatchType untyped int (10), github.com/goplus/gop/builtin/ng.Uint128\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> MatchFuncCall overloadFuncType{funcs: [func github.com/goplus/gop/builtin/ng.Uint128_Init__0(v int) (out github.com/goplus/gop/builtin/ng.Uint128) func github.com/goplus/gop/builtin/ng.Uint128_Init__1(v github.com/goplus/gop/builtin/ng.UntypedBigint) (out github.com/goplus/gop/builtin/ng.Uint128)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> MatchFuncCall func(v int) (out github.com/goplus/gop/builtin/ng.Uint128)\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> MatchType untyped int (10), int\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> AssignableConv untyped int github.com/goplus/gop/builtin/ng.Uint128 true\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Val println overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Val x github.com/goplus/gop/builtin/ng.Uint128\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Val y github.com/goplus/gop/builtin/ng.Uint128\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Call 2 0 // overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> MatchFuncCall overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> MatchFuncCall func(a ...interface{}) (n int, err error)\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> MatchType github.com/goplus/gop/builtin/ng.Uint128, interface{}\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> MatchType github.com/goplus/gop/builtin/ng.Uint128, interface{}\n[Go+ CI/Test]   | 2023/05/30 11:34:05 End // Block\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Block\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Load var github.com/goplus/gop/builtin/ng.Uint128 [x]\n[Go+ CI/Test]   | 2023/05/30 11:34:05 NewVar [x]\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Val &{0 INT 1} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Val &{0 INT 65} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:05 BinaryOp <<\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> MatchFuncCall func(a TemplateParamType{name: T}, n TemplateParamType{name: N}) TemplateParamType{name: T}\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> MatchType untyped int (1), unboundFuncParam{typ: <nil>}\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> MatchType untyped int (65), unboundFuncParam{typ: <nil>}\n[Go+ CI/Test]   | 2023/05/30 11:34:05 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> MatchType untyped int (36893488147419103232), github.com/goplus/gop/builtin/ng.Uint128\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> MatchFuncCall overloadFuncType{funcs: [func github.com/goplus/gop/builtin/ng.Uint128_Init__0(v int) (out github.com/goplus/gop/builtin/ng.Uint128) func github.com/goplus/gop/builtin/ng.Uint128_Init__1(v github.com/goplus/gop/builtin/ng.UntypedBigint) (out github.com/goplus/gop/builtin/ng.Uint128)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> MatchFuncCall func(v int) (out github.com/goplus/gop/builtin/ng.Uint128)\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> MatchType untyped int (36893488147419103232), int\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> AssignableConv untyped int (36893488147419103232): value is out of int range\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> MatchFuncCall func(v github.com/goplus/gop/builtin/ng.UntypedBigint) (out github.com/goplus/gop/builtin/ng.Uint128)\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> MatchType untyped int (36893488147419103232), github.com/goplus/gop/builtin/ng.UntypedBigint\n[Go+ CI/Test]   | 2023/05/30 11:34:05 NewClosure func() *math/big.Int\n[Go+ CI/Test]   | 2023/05/30 11:34:05 DefineVarStart [v _]\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Val new instructionType{instr: gox.newInstr}\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Typ math/big.Int\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Call 1 0 // instructionType{instr: gox.newInstr}\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> MatchFuncCall instructionType{instr: gox.newInstr}\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Member SetString 0 // *math/big.Int\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Val 36893488147419103232 string\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Val 10 int\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Call 2 0 // func(s string, base int) (*math/big.Int, bool)\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> MatchFuncCall func(s string, base int) (*math/big.Int, bool)\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> MatchType untyped string (\"36893488147419103232\"), string\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> MatchType untyped int (10), int\n[Go+ CI/Test]   | 2023/05/30 11:34:05 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Val v *math/big.Int\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Return 1\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> MatchType *math/big.Int, *math/big.Int\n[Go+ CI/Test]   | 2023/05/30 11:34:05 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Call 0 0 // func() *math/big.Int\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> MatchFuncCall func() *math/big.Int\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> AssignableConv untyped int github.com/goplus/gop/builtin/ng.Uint128 true\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Load var <nil> [y]\n[Go+ CI/Test]   | 2023/05/30 11:34:05 NewVar [y]\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Val x github.com/goplus/gop/builtin/ng.Uint128\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Val &{0 INT 63} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:05 BinaryOp >>\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> MatchFuncCall func(n uint) github.com/goplus/gop/builtin/ng.Uint128\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> MatchType github.com/goplus/gop/builtin/ng.Uint128, github.com/goplus/gop/builtin/ng.Uint128\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> MatchType untyped int (63), uint\n[Go+ CI/Test]   | 2023/05/30 11:34:05 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Load var <nil> [z]\n[Go+ CI/Test]   | 2023/05/30 11:34:05 NewVar [z]\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Val x github.com/goplus/gop/builtin/ng.Uint128\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Val &{0 INT 65} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:05 BinaryOp >>\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> MatchFuncCall func(n uint) github.com/goplus/gop/builtin/ng.Uint128\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> MatchType github.com/goplus/gop/builtin/ng.Uint128, github.com/goplus/gop/builtin/ng.Uint128\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> MatchType untyped int (65), uint\n[Go+ CI/Test]   | 2023/05/30 11:34:05 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Val println overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Val x github.com/goplus/gop/builtin/ng.Uint128\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Call 1 0 // overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> MatchFuncCall overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> MatchFuncCall func(a ...interface{}) (n int, err error)\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> MatchType github.com/goplus/gop/builtin/ng.Uint128, interface{}\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Val println overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Val y github.com/goplus/gop/builtin/ng.Uint128\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Val z github.com/goplus/gop/builtin/ng.Uint128\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Call 2 0 // overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> MatchFuncCall overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> MatchFuncCall func(a ...interface{}) (n int, err error)\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> MatchType github.com/goplus/gop/builtin/ng.Uint128, interface{}\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> MatchType github.com/goplus/gop/builtin/ng.Uint128, interface{}\n[Go+ CI/Test]   | 2023/05/30 11:34:05 End // Block\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Block\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Val println overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Val uint128 github.com/goplus/gop/builtin/ng.Uint128\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Val &{0 INT 1} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Val &{0 INT 65} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:05 BinaryOp <<\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> MatchFuncCall func(a TemplateParamType{name: T}, n TemplateParamType{name: N}) TemplateParamType{name: T}\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> MatchType untyped int (1), unboundFuncParam{typ: <nil>}\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> MatchType untyped int (65), unboundFuncParam{typ: <nil>}\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Call 1 0 // TypeType{typ: github.com/goplus/gop/builtin/ng.Uint128}\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> MatchFuncCall TypeType{typ: github.com/goplus/gop/builtin/ng.Uint128}\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> MatchFuncCall overloadFuncType{funcs: [func github.com/goplus/gop/builtin/ng.Uint128_Cast__0(v int) github.com/goplus/gop/builtin/ng.Uint128 func github.com/goplus/gop/builtin/ng.Uint128_Cast__1(v github.com/goplus/gop/builtin/ng.UntypedBigint) github.com/goplus/gop/builtin/ng.Uint128 func github.com/goplus/gop/builtin/ng.Uint128_Cast__2(v uint64) github.com/goplus/gop/builtin/ng.Uint128 func github.com/goplus/gop/builtin/ng.Uint128_Cast__3(v uint32) github.com/goplus/gop/builtin/ng.Uint128 func github.com/goplus/gop/builtin/ng.Uint128_Cast__4(v uint16) github.com/goplus/gop/builtin/ng.Uint128 func github.com/goplus/gop/builtin/ng.Uint128_Cast__5(v uint8) github.com/goplus/gop/builtin/ng.Uint128 func github.com/goplus/gop/builtin/ng.Uint128_Cast__6(v int64) (out github.com/goplus/gop/builtin/ng.Uint128) func github.com/goplus/gop/builtin/ng.Uint128_Cast__7(v int64) (out github.com/goplus/gop/builtin/ng.Uint128, inRange bool) func github.com/goplus/gop/builtin/ng.Uint128_Cast__8(v *math/big.Int) github.com/goplus/gop/builtin/ng.Uint128 func github.com/goplus/gop/builtin/ng.Uint128_Cast__9(v *math/big.Int) (out github.com/goplus/gop/builtin/ng.Uint128, inRange bool) func github.com/goplus/gop/builtin/ng.Uint128_Cast__a() github.com/goplus/gop/builtin/ng.Uint128 func github.com/goplus/gop/builtin/ng.Uint128_Cast__b(v uint) github.com/goplus/gop/builtin/ng.Uint128 func github.com/goplus/gop/builtin/ng.Uint128_Cast__c(hi uint64, lo uint64) github.com/goplus/gop/builtin/ng.Uint128]}\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> MatchFuncCall func(v int) github.com/goplus/gop/builtin/ng.Uint128\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> MatchType untyped int (36893488147419103232), int\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> AssignableConv untyped int (36893488147419103232): value is out of int range\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> MatchFuncCall func(v github.com/goplus/gop/builtin/ng.UntypedBigint) github.com/goplus/gop/builtin/ng.Uint128\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> MatchType untyped int (36893488147419103232), github.com/goplus/gop/builtin/ng.UntypedBigint\n[Go+ CI/Test]   | 2023/05/30 11:34:05 NewClosure func() *math/big.Int\n[Go+ CI/Test]   | 2023/05/30 11:34:05 DefineVarStart [v _]\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Val new instructionType{instr: gox.newInstr}\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Typ math/big.Int\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Call 1 0 // instructionType{instr: gox.newInstr}\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> MatchFuncCall instructionType{instr: gox.newInstr}\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Member SetString 0 // *math/big.Int\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Val 36893488147419103232 string\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Val 10 int\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Call 2 0 // func(s string, base int) (*math/big.Int, bool)\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> MatchFuncCall func(s string, base int) (*math/big.Int, bool)\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> MatchType untyped string (\"36893488147419103232\"), string\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> MatchType untyped int (10), int\n[Go+ CI/Test]   | 2023/05/30 11:34:05 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Val v *math/big.Int\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Return 1\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> MatchType *math/big.Int, *math/big.Int\n[Go+ CI/Test]   | 2023/05/30 11:34:05 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Call 0 0 // func() *math/big.Int\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> MatchFuncCall func() *math/big.Int\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Val uint128 github.com/goplus/gop/builtin/ng.Uint128\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Call 0 0 // TypeType{typ: github.com/goplus/gop/builtin/ng.Uint128}\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> MatchFuncCall TypeType{typ: github.com/goplus/gop/builtin/ng.Uint128}\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> MatchFuncCall overloadFuncType{funcs: [func github.com/goplus/gop/builtin/ng.Uint128_Cast__0(v int) github.com/goplus/gop/builtin/ng.Uint128 func github.com/goplus/gop/builtin/ng.Uint128_Cast__1(v github.com/goplus/gop/builtin/ng.UntypedBigint) github.com/goplus/gop/builtin/ng.Uint128 func github.com/goplus/gop/builtin/ng.Uint128_Cast__2(v uint64) github.com/goplus/gop/builtin/ng.Uint128 func github.com/goplus/gop/builtin/ng.Uint128_Cast__3(v uint32) github.com/goplus/gop/builtin/ng.Uint128 func github.com/goplus/gop/builtin/ng.Uint128_Cast__4(v uint16) github.com/goplus/gop/builtin/ng.Uint128 func github.com/goplus/gop/builtin/ng.Uint128_Cast__5(v uint8) github.com/goplus/gop/builtin/ng.Uint128 func github.com/goplus/gop/builtin/ng.Uint128_Cast__6(v int64) (out github.com/goplus/gop/builtin/ng.Uint128) func github.com/goplus/gop/builtin/ng.Uint128_Cast__7(v int64) (out github.com/goplus/gop/builtin/ng.Uint128, inRange bool) func github.com/goplus/gop/builtin/ng.Uint128_Cast__8(v *math/big.Int) github.com/goplus/gop/builtin/ng.Uint128 func github.com/goplus/gop/builtin/ng.Uint128_Cast__9(v *math/big.Int) (out github.com/goplus/gop/builtin/ng.Uint128, inRange bool) func github.com/goplus/gop/builtin/ng.Uint128_Cast__a() github.com/goplus/gop/builtin/ng.Uint128 func github.com/goplus/gop/builtin/ng.Uint128_Cast__b(v uint) github.com/goplus/gop/builtin/ng.Uint128 func github.com/goplus/gop/builtin/ng.Uint128_Cast__c(hi uint64, lo uint64) github.com/goplus/gop/builtin/ng.Uint128]}\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> MatchFuncCall func(v int) github.com/goplus/gop/builtin/ng.Uint128\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> MatchFuncCall func(v github.com/goplus/gop/builtin/ng.UntypedBigint) github.com/goplus/gop/builtin/ng.Uint128\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> MatchFuncCall func(v uint64) github.com/goplus/gop/builtin/ng.Uint128\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> MatchFuncCall func(v uint32) github.com/goplus/gop/builtin/ng.Uint128\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> MatchFuncCall func(v uint16) github.com/goplus/gop/builtin/ng.Uint128\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> MatchFuncCall func(v uint8) github.com/goplus/gop/builtin/ng.Uint128\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> MatchFuncCall func(v int64) (out github.com/goplus/gop/builtin/ng.Uint128)\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> MatchFuncCall func(v int64) (out github.com/goplus/gop/builtin/ng.Uint128, inRange bool)\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> MatchFuncCall func(v *math/big.Int) github.com/goplus/gop/builtin/ng.Uint128\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> MatchFuncCall func(v *math/big.Int) (out github.com/goplus/gop/builtin/ng.Uint128, inRange bool)\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> MatchFuncCall func() github.com/goplus/gop/builtin/ng.Uint128\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Call 2 0 // overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> MatchFuncCall overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> MatchFuncCall func(a ...interface{}) (n int, err error)\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> MatchType github.com/goplus/gop/builtin/ng.Uint128, interface{}\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> MatchType github.com/goplus/gop/builtin/ng.Uint128, interface{}\n[Go+ CI/Test]   | 2023/05/30 11:34:05 End // Block\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Block\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Load var github.com/goplus/gop/builtin/ng.Uint128 [x]\n[Go+ CI/Test]   | 2023/05/30 11:34:05 NewVar [x]\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Val &{0 INT 1} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:05 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> MatchType untyped int (1), github.com/goplus/gop/builtin/ng.Uint128\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> MatchFuncCall overloadFuncType{funcs: [func github.com/goplus/gop/builtin/ng.Uint128_Init__0(v int) (out github.com/goplus/gop/builtin/ng.Uint128) func github.com/goplus/gop/builtin/ng.Uint128_Init__1(v github.com/goplus/gop/builtin/ng.UntypedBigint) (out github.com/goplus/gop/builtin/ng.Uint128)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> MatchFuncCall func(v int) (out github.com/goplus/gop/builtin/ng.Uint128)\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> MatchType untyped int (1), int\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> AssignableConv untyped int github.com/goplus/gop/builtin/ng.Uint128 true\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Val printf overloadFuncType{funcs: [func fmt.Printf(format string, a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Val &{0 STRING \"%4d\\n\"} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Val x github.com/goplus/gop/builtin/ng.Uint128\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Call 2 0 // overloadFuncType{funcs: [func fmt.Printf(format string, a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> MatchFuncCall overloadFuncType{funcs: [func fmt.Printf(format string, a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> MatchFuncCall func(format string, a ...interface{}) (n int, err error)\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> MatchType untyped string (\"%4d\\n\"), string\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> MatchType github.com/goplus/gop/builtin/ng.Uint128, interface{}\n[Go+ CI/Test]   | 2023/05/30 11:34:05 End // Block\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Block\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Load var github.com/goplus/gop/builtin/ng.Uint128 [x]\n[Go+ CI/Test]   | 2023/05/30 11:34:05 NewVar [x]\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Val &{0 INT 1} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Val &{0 INT 65} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:05 BinaryOp <<\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> MatchFuncCall func(a TemplateParamType{name: T}, n TemplateParamType{name: N}) TemplateParamType{name: T}\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> MatchType untyped int (1), unboundFuncParam{typ: <nil>}\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> MatchType untyped int (65), unboundFuncParam{typ: <nil>}\n[Go+ CI/Test]   | 2023/05/30 11:34:05 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> MatchType untyped int (36893488147419103232), github.com/goplus/gop/builtin/ng.Uint128\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> MatchFuncCall overloadFuncType{funcs: [func github.com/goplus/gop/builtin/ng.Uint128_Init__0(v int) (out github.com/goplus/gop/builtin/ng.Uint128) func github.com/goplus/gop/builtin/ng.Uint128_Init__1(v github.com/goplus/gop/builtin/ng.UntypedBigint) (out github.com/goplus/gop/builtin/ng.Uint128)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> MatchFuncCall func(v int) (out github.com/goplus/gop/builtin/ng.Uint128)\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> MatchType untyped int (36893488147419103232), int\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> AssignableConv untyped int (36893488147419103232): value is out of int range\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> MatchFuncCall func(v github.com/goplus/gop/builtin/ng.UntypedBigint) (out github.com/goplus/gop/builtin/ng.Uint128)\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> MatchType untyped int (36893488147419103232), github.com/goplus/gop/builtin/ng.UntypedBigint\n[Go+ CI/Test]   | 2023/05/30 11:34:05 NewClosure func() *math/big.Int\n[Go+ CI/Test]   | 2023/05/30 11:34:05 DefineVarStart [v _]\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Val new instructionType{instr: gox.newInstr}\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Typ math/big.Int\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Call 1 0 // instructionType{instr: gox.newInstr}\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> MatchFuncCall instructionType{instr: gox.newInstr}\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Member SetString 0 // *math/big.Int\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Val 36893488147419103232 string\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Val 10 int\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Call 2 0 // func(s string, base int) (*math/big.Int, bool)\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> MatchFuncCall func(s string, base int) (*math/big.Int, bool)\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> MatchType untyped string (\"36893488147419103232\"), string\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> MatchType untyped int (10), int\n[Go+ CI/Test]   | 2023/05/30 11:34:05 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Val v *math/big.Int\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Return 1\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> MatchType *math/big.Int, *math/big.Int\n[Go+ CI/Test]   | 2023/05/30 11:34:05 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Call 0 0 // func() *math/big.Int\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> MatchFuncCall func() *math/big.Int\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> AssignableConv untyped int github.com/goplus/gop/builtin/ng.Uint128 true\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> Load var <nil> [y]\n[Go+ CI/Test]   | 2023/05/30 11:34:05 NewVar [y]\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Val x github.com/goplus/gop/builtin/ng.Uint128\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Val &{0 INT 2} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:05 BinaryOp >>\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> MatchFuncCall func(n uint) github.com/goplus/gop/builtin/ng.Uint128\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> MatchType github.com/goplus/gop/builtin/ng.Uint128, github.com/goplus/gop/builtin/ng.Uint128\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> MatchType untyped int (2), uint\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Val &{0 INT 1} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:05 BinaryOp -\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> MatchFuncCall [func (github.com/goplus/gop/builtin/ng.Uint128).Gop_Sub__0(n uint64) (v github.com/goplus/gop/builtin/ng.Uint128) func (github.com/goplus/gop/builtin/ng.Uint128).Gop_Sub__1(n github.com/goplus/gop/builtin/ng.Uint128) (v github.com/goplus/gop/builtin/ng.Uint128)]\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> MatchFuncCall func(n uint64) (v github.com/goplus/gop/builtin/ng.Uint128)\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> MatchType github.com/goplus/gop/builtin/ng.Uint128, github.com/goplus/gop/builtin/ng.Uint128\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> MatchType untyped int (1), uint64\n[Go+ CI/Test]   | 2023/05/30 11:34:05 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:34:05 DefineVarStart [v1 ok1]\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Val int64 int64\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Val x github.com/goplus/gop/builtin/ng.Uint128\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Call 1 2 // TypeType{typ: int64}\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> MatchFuncCall TypeType{typ: int64}\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Val &{x github.com/goplus/gop/builtin/ng.Uint128 <nil> x} *internal.Elem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Member Gop_Rcast__4 0 // github.com/goplus/gop/builtin/ng.Uint128\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Call 0 2 // func() (out int64, inRange bool)\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> MatchFuncCall func() (out int64, inRange bool)\n[Go+ CI/Test]   | 2023/05/30 11:34:05 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:34:05 DefineVarStart [v2 ok2]\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Val int64 int64\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Val y github.com/goplus/gop/builtin/ng.Uint128\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Call 1 2 // TypeType{typ: int64}\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> MatchFuncCall TypeType{typ: int64}\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Val &{y github.com/goplus/gop/builtin/ng.Uint128 <nil> y} *internal.Elem\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Member Gop_Rcast__4 0 // github.com/goplus/gop/builtin/ng.Uint128\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Call 0 2 // func() (out int64, inRange bool)\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> MatchFuncCall func() (out int64, inRange bool)\n[Go+ CI/Test]   | 2023/05/30 11:34:05 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Val println overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Val v1 int64\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Val ok1 bool\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Call 2 0 // overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> MatchFuncCall overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> MatchFuncCall func(a ...interface{}) (n int, err error)\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> MatchType int64, interface{}\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> MatchType bool, interface{}\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Val println overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Val v2 int64\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Val ok2 bool\n[Go+ CI/Test]   | 2023/05/30 11:34:05 Call 2 0 // overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> MatchFuncCall overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> MatchFuncCall func(a ...interface{}) (n int, err error)\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> MatchType int64, interface{}\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> MatchType bool, interface{}\n[Go+ CI/Test]   | 2023/05/30 11:34:05 End // Block\n[Go+ CI/Test]   | 2023/05/30 11:34:05 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:05 ==> ASTFile \n[Go+ CI/Test]   | --- PASS: TestUint128_run (0.99s)\n[Go+ CI/Test]   | === RUN   TestInt128_run\n[Go+ CI/Test]   | 2023/05/30 11:34:06 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:06 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:06 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:06 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:06 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:06 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:06 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:06 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:06 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:06 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:06 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:06 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:06 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:06 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:06 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:06 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:06 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:06 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:06 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:06 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:06 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:06 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:06 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:06 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:06 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:06 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:06 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:06 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:06 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:06 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:06 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:06 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:06 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:06 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:06 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:06 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:06 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:06 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:06 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:06 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:06 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:06 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:06 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:06 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:06 ==> Preload func main\n[Go+ CI/Test]   | 2023/05/30 11:34:06 ==> Load func main\n[Go+ CI/Test]   | 2023/05/30 11:34:06 NewFunc main func()\n[Go+ CI/Test]   | 2023/05/30 11:34:06 Block\n[Go+ CI/Test]   | 2023/05/30 11:34:06 ==> Load var string [name]\n[Go+ CI/Test]   | 2023/05/30 11:34:06 NewVar [name]\n[Go+ CI/Test]   | 2023/05/30 11:34:06 ==> Load var github.com/goplus/gop/builtin/ng.Int128 [age]\n[Go+ CI/Test]   | 2023/05/30 11:34:06 NewVar [age]\n[Go+ CI/Test]   | 2023/05/30 11:34:06 Val Sscanf func(str string, format string, a ...interface{}) (n int, err error)\n[Go+ CI/Test]   | 2023/05/30 11:34:06 Val &{0 STRING \"Kim is 22 years old\"} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:06 Val &{0 STRING \"%s is %d years old\"} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:06 Val name string\n[Go+ CI/Test]   | 2023/05/30 11:34:06 UnaryOp & flags: 0\n[Go+ CI/Test]   | 2023/05/30 11:34:06 ==> MatchFuncCall instructionType{instr: gox.addrInstr}\n[Go+ CI/Test]   | 2023/05/30 11:34:06 Val age github.com/goplus/gop/builtin/ng.Int128\n[Go+ CI/Test]   | 2023/05/30 11:34:06 UnaryOp & flags: 0\n[Go+ CI/Test]   | 2023/05/30 11:34:06 ==> MatchFuncCall instructionType{instr: gox.addrInstr}\n[Go+ CI/Test]   | 2023/05/30 11:34:06 Call 4 0 // func(str string, format string, a ...interface{}) (n int, err error)\n[Go+ CI/Test]   | 2023/05/30 11:34:06 ==> MatchFuncCall func(str string, format string, a ...interface{}) (n int, err error)\n[Go+ CI/Test]   | 2023/05/30 11:34:06 ==> MatchType untyped string (\"Kim is 22 years old\"), string\n[Go+ CI/Test]   | 2023/05/30 11:34:06 ==> MatchType untyped string (\"%s is %d years old\"), string\n[Go+ CI/Test]   | 2023/05/30 11:34:06 ==> MatchType *string, interface{}\n[Go+ CI/Test]   | 2023/05/30 11:34:06 ==> MatchType *github.com/goplus/gop/builtin/ng.Int128, interface{}\n[Go+ CI/Test]   | 2023/05/30 11:34:06 Val println overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:06 Val name string\n[Go+ CI/Test]   | 2023/05/30 11:34:06 Val age github.com/goplus/gop/builtin/ng.Int128\n[Go+ CI/Test]   | 2023/05/30 11:34:06 Call 2 0 // overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:06 ==> MatchFuncCall overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:06 ==> MatchFuncCall func(a ...interface{}) (n int, err error)\n[Go+ CI/Test]   | 2023/05/30 11:34:06 ==> MatchType string, interface{}\n[Go+ CI/Test]   | 2023/05/30 11:34:06 ==> MatchType github.com/goplus/gop/builtin/ng.Int128, interface{}\n[Go+ CI/Test]   | 2023/05/30 11:34:06 End // Block\n[Go+ CI/Test]   | 2023/05/30 11:34:06 Block\n[Go+ CI/Test]   | 2023/05/30 11:34:06 ==> Load var github.com/goplus/gop/builtin/ng.Int128 [x]\n[Go+ CI/Test]   | 2023/05/30 11:34:06 NewVar [x]\n[Go+ CI/Test]   | 2023/05/30 11:34:06 Val &{0 INT 1} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:06 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:34:06 ==> MatchType untyped int (1), github.com/goplus/gop/builtin/ng.Int128\n[Go+ CI/Test]   | 2023/05/30 11:34:06 ==> MatchFuncCall overloadFuncType{funcs: [func github.com/goplus/gop/builtin/ng.Int128_Init__0(v int) (out github.com/goplus/gop/builtin/ng.Int128) func github.com/goplus/gop/builtin/ng.Int128_Init__1(v github.com/goplus/gop/builtin/ng.UntypedBigint) (out github.com/goplus/gop/builtin/ng.Int128)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:06 ==> MatchFuncCall func(v int) (out github.com/goplus/gop/builtin/ng.Int128)\n[Go+ CI/Test]   | 2023/05/30 11:34:06 ==> MatchType untyped int (1), int\n[Go+ CI/Test]   | 2023/05/30 11:34:06 ==> AssignableConv untyped int github.com/goplus/gop/builtin/ng.Int128 true\n[Go+ CI/Test]   | 2023/05/30 11:34:06 ==> Load var <nil> [y]\n[Go+ CI/Test]   | 2023/05/30 11:34:06 NewVar [y]\n[Go+ CI/Test]   | 2023/05/30 11:34:06 Val x github.com/goplus/gop/builtin/ng.Int128\n[Go+ CI/Test]   | 2023/05/30 11:34:06 UnaryOp + flags: 0\n[Go+ CI/Test]   | 2023/05/30 11:34:06 ==> MatchFuncCall func() (v github.com/goplus/gop/builtin/ng.Int128)\n[Go+ CI/Test]   | 2023/05/30 11:34:06 ==> MatchType github.com/goplus/gop/builtin/ng.Int128, github.com/goplus/gop/builtin/ng.Int128\n[Go+ CI/Test]   | 2023/05/30 11:34:06 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:34:06 VarRef x github.com/goplus/gop/builtin/ng.Int128\n[Go+ CI/Test]   | 2023/05/30 11:34:06 IncDec ++\n[Go+ CI/Test]   | 2023/05/30 11:34:06 ==> MatchFuncCall func()\n[Go+ CI/Test]   | 2023/05/30 11:34:06 ==> MatchType refType{typ: github.com/goplus/gop/builtin/ng.Int128}, *github.com/goplus/gop/builtin/ng.Int128\n[Go+ CI/Test]   | 2023/05/30 11:34:06 VarRef x github.com/goplus/gop/builtin/ng.Int128\n[Go+ CI/Test]   | 2023/05/30 11:34:06 Val &{0 INT 10} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:06 AssignOp += Gop_AddAssign\n[Go+ CI/Test]   | 2023/05/30 11:34:06 ==> MatchFuncCall func(b github.com/goplus/gop/builtin/ng.Int128)\n[Go+ CI/Test]   | 2023/05/30 11:34:06 ==> MatchType refType{typ: github.com/goplus/gop/builtin/ng.Int128}, *github.com/goplus/gop/builtin/ng.Int128\n[Go+ CI/Test]   | 2023/05/30 11:34:06 ==> MatchType untyped int (10), github.com/goplus/gop/builtin/ng.Int128\n[Go+ CI/Test]   | 2023/05/30 11:34:06 ==> MatchFuncCall overloadFuncType{funcs: [func github.com/goplus/gop/builtin/ng.Int128_Init__0(v int) (out github.com/goplus/gop/builtin/ng.Int128) func github.com/goplus/gop/builtin/ng.Int128_Init__1(v github.com/goplus/gop/builtin/ng.UntypedBigint) (out github.com/goplus/gop/builtin/ng.Int128)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:06 ==> MatchFuncCall func(v int) (out github.com/goplus/gop/builtin/ng.Int128)\n[Go+ CI/Test]   | 2023/05/30 11:34:06 ==> MatchType untyped int (10), int\n[Go+ CI/Test]   | 2023/05/30 11:34:06 ==> AssignableConv untyped int github.com/goplus/gop/builtin/ng.Int128 true\n[Go+ CI/Test]   | 2023/05/30 11:34:06 Val println overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:06 Val x github.com/goplus/gop/builtin/ng.Int128\n[Go+ CI/Test]   | 2023/05/30 11:34:06 Val y github.com/goplus/gop/builtin/ng.Int128\n[Go+ CI/Test]   | 2023/05/30 11:34:06 Call 2 0 // overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:06 ==> MatchFuncCall overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:06 ==> MatchFuncCall func(a ...interface{}) (n int, err error)\n[Go+ CI/Test]   | 2023/05/30 11:34:06 ==> MatchType github.com/goplus/gop/builtin/ng.Int128, interface{}\n[Go+ CI/Test]   | 2023/05/30 11:34:06 ==> MatchType github.com/goplus/gop/builtin/ng.Int128, interface{}\n[Go+ CI/Test]   | 2023/05/30 11:34:06 End // Block\n[Go+ CI/Test]   | 2023/05/30 11:34:06 Block\n[Go+ CI/Test]   | 2023/05/30 11:34:06 ==> Load var github.com/goplus/gop/builtin/ng.Int128 [x]\n[Go+ CI/Test]   | 2023/05/30 11:34:06 NewVar [x]\n[Go+ CI/Test]   | 2023/05/30 11:34:06 Val &{0 INT 1} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:06 Val &{0 INT 65} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:06 BinaryOp <<\n[Go+ CI/Test]   | 2023/05/30 11:34:06 ==> MatchFuncCall func(a TemplateParamType{name: T}, n TemplateParamType{name: N}) TemplateParamType{name: T}\n[Go+ CI/Test]   | 2023/05/30 11:34:06 ==> MatchType untyped int (1), unboundFuncParam{typ: <nil>}\n[Go+ CI/Test]   | 2023/05/30 11:34:06 ==> MatchType untyped int (65), unboundFuncParam{typ: <nil>}\n[Go+ CI/Test]   | 2023/05/30 11:34:06 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:34:06 ==> MatchType untyped int (36893488147419103232), github.com/goplus/gop/builtin/ng.Int128\n[Go+ CI/Test]   | 2023/05/30 11:34:06 ==> MatchFuncCall overloadFuncType{funcs: [func github.com/goplus/gop/builtin/ng.Int128_Init__0(v int) (out github.com/goplus/gop/builtin/ng.Int128) func github.com/goplus/gop/builtin/ng.Int128_Init__1(v github.com/goplus/gop/builtin/ng.UntypedBigint) (out github.com/goplus/gop/builtin/ng.Int128)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:06 ==> MatchFuncCall func(v int) (out github.com/goplus/gop/builtin/ng.Int128)\n[Go+ CI/Test]   | 2023/05/30 11:34:06 ==> MatchType untyped int (36893488147419103232), int\n[Go+ CI/Test]   | 2023/05/30 11:34:06 ==> AssignableConv untyped int (36893488147419103232): value is out of int range\n[Go+ CI/Test]   | 2023/05/30 11:34:06 ==> MatchFuncCall func(v github.com/goplus/gop/builtin/ng.UntypedBigint) (out github.com/goplus/gop/builtin/ng.Int128)\n[Go+ CI/Test]   | 2023/05/30 11:34:06 ==> MatchType untyped int (36893488147419103232), github.com/goplus/gop/builtin/ng.UntypedBigint\n[Go+ CI/Test]   | 2023/05/30 11:34:06 NewClosure func() *math/big.Int\n[Go+ CI/Test]   | 2023/05/30 11:34:06 DefineVarStart [v _]\n[Go+ CI/Test]   | 2023/05/30 11:34:06 Val new instructionType{instr: gox.newInstr}\n[Go+ CI/Test]   | 2023/05/30 11:34:06 Typ math/big.Int\n[Go+ CI/Test]   | 2023/05/30 11:34:06 Call 1 0 // instructionType{instr: gox.newInstr}\n[Go+ CI/Test]   | 2023/05/30 11:34:06 ==> MatchFuncCall instructionType{instr: gox.newInstr}\n[Go+ CI/Test]   | 2023/05/30 11:34:06 Member SetString 0 // *math/big.Int\n[Go+ CI/Test]   | 2023/05/30 11:34:06 Val 36893488147419103232 string\n[Go+ CI/Test]   | 2023/05/30 11:34:06 Val 10 int\n[Go+ CI/Test]   | 2023/05/30 11:34:06 Call 2 0 // func(s string, base int) (*math/big.Int, bool)\n[Go+ CI/Test]   | 2023/05/30 11:34:06 ==> MatchFuncCall func(s string, base int) (*math/big.Int, bool)\n[Go+ CI/Test]   | 2023/05/30 11:34:06 ==> MatchType untyped string (\"36893488147419103232\"), string\n[Go+ CI/Test]   | 2023/05/30 11:34:06 ==> MatchType untyped int (10), int\n[Go+ CI/Test]   | 2023/05/30 11:34:06 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:34:06 Val v *math/big.Int\n[Go+ CI/Test]   | 2023/05/30 11:34:06 Return 1\n[Go+ CI/Test]   | 2023/05/30 11:34:06 ==> MatchType *math/big.Int, *math/big.Int\n[Go+ CI/Test]   | 2023/05/30 11:34:06 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:06 Call 0 0 // func() *math/big.Int\n[Go+ CI/Test]   | 2023/05/30 11:34:06 ==> MatchFuncCall func() *math/big.Int\n[Go+ CI/Test]   | 2023/05/30 11:34:06 ==> AssignableConv untyped int github.com/goplus/gop/builtin/ng.Int128 true\n[Go+ CI/Test]   | 2023/05/30 11:34:06 ==> Load var <nil> [y]\n[Go+ CI/Test]   | 2023/05/30 11:34:06 NewVar [y]\n[Go+ CI/Test]   | 2023/05/30 11:34:06 Val x github.com/goplus/gop/builtin/ng.Int128\n[Go+ CI/Test]   | 2023/05/30 11:34:06 Val &{0 INT 63} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:06 BinaryOp >>\n[Go+ CI/Test]   | 2023/05/30 11:34:06 ==> MatchFuncCall func(n uint) github.com/goplus/gop/builtin/ng.Int128\n[Go+ CI/Test]   | 2023/05/30 11:34:06 ==> MatchType github.com/goplus/gop/builtin/ng.Int128, github.com/goplus/gop/builtin/ng.Int128\n[Go+ CI/Test]   | 2023/05/30 11:34:06 ==> MatchType untyped int (63), uint\n[Go+ CI/Test]   | 2023/05/30 11:34:06 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:34:06 ==> Load var <nil> [z]\n[Go+ CI/Test]   | 2023/05/30 11:34:06 NewVar [z]\n[Go+ CI/Test]   | 2023/05/30 11:34:06 Val x github.com/goplus/gop/builtin/ng.Int128\n[Go+ CI/Test]   | 2023/05/30 11:34:06 Val &{0 INT 65} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:06 BinaryOp >>\n[Go+ CI/Test]   | 2023/05/30 11:34:06 ==> MatchFuncCall func(n uint) github.com/goplus/gop/builtin/ng.Int128\n[Go+ CI/Test]   | 2023/05/30 11:34:06 ==> MatchType github.com/goplus/gop/builtin/ng.Int128, github.com/goplus/gop/builtin/ng.Int128\n[Go+ CI/Test]   | 2023/05/30 11:34:06 ==> MatchType untyped int (65), uint\n[Go+ CI/Test]   | 2023/05/30 11:34:06 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:34:06 Val println overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:06 Val x github.com/goplus/gop/builtin/ng.Int128\n[Go+ CI/Test]   | 2023/05/30 11:34:06 Call 1 0 // overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:06 ==> MatchFuncCall overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:06 ==> MatchFuncCall func(a ...interface{}) (n int, err error)\n[Go+ CI/Test]   | 2023/05/30 11:34:06 ==> MatchType github.com/goplus/gop/builtin/ng.Int128, interface{}\n[Go+ CI/Test]   | 2023/05/30 11:34:06 Val println overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:06 Val y github.com/goplus/gop/builtin/ng.Int128\n[Go+ CI/Test]   | 2023/05/30 11:34:06 Val z github.com/goplus/gop/builtin/ng.Int128\n[Go+ CI/Test]   | 2023/05/30 11:34:06 Call 2 0 // overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:06 ==> MatchFuncCall overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:06 ==> MatchFuncCall func(a ...interface{}) (n int, err error)\n[Go+ CI/Test]   | 2023/05/30 11:34:06 ==> MatchType github.com/goplus/gop/builtin/ng.Int128, interface{}\n[Go+ CI/Test]   | 2023/05/30 11:34:06 ==> MatchType github.com/goplus/gop/builtin/ng.Int128, interface{}\n[Go+ CI/Test]   | 2023/05/30 11:34:06 End // Block\n[Go+ CI/Test]   | 2023/05/30 11:34:06 Block\n[Go+ CI/Test]   | 2023/05/30 11:34:06 Val println overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:06 Val int128 github.com/goplus/gop/builtin/ng.Int128\n[Go+ CI/Test]   | 2023/05/30 11:34:06 Val &{0 INT 1} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:06 Val &{0 INT 65} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:06 BinaryOp <<\n[Go+ CI/Test]   | 2023/05/30 11:34:06 ==> MatchFuncCall func(a TemplateParamType{name: T}, n TemplateParamType{name: N}) TemplateParamType{name: T}\n[Go+ CI/Test]   | 2023/05/30 11:34:06 ==> MatchType untyped int (1), unboundFuncParam{typ: <nil>}\n[Go+ CI/Test]   | 2023/05/30 11:34:06 ==> MatchType untyped int (65), unboundFuncParam{typ: <nil>}\n[Go+ CI/Test]   | 2023/05/30 11:34:06 Call 1 0 // TypeType{typ: github.com/goplus/gop/builtin/ng.Int128}\n[Go+ CI/Test]   | 2023/05/30 11:34:06 ==> MatchFuncCall TypeType{typ: github.com/goplus/gop/builtin/ng.Int128}\n[Go+ CI/Test]   | 2023/05/30 11:34:06 ==> MatchFuncCall overloadFuncType{funcs: [func github.com/goplus/gop/builtin/ng.Int128_Cast__0(v int) github.com/goplus/gop/builtin/ng.Int128 func github.com/goplus/gop/builtin/ng.Int128_Cast__1(v github.com/goplus/gop/builtin/ng.UntypedBigint) (out github.com/goplus/gop/builtin/ng.Int128) func github.com/goplus/gop/builtin/ng.Int128_Cast__2(v int64) (out github.com/goplus/gop/builtin/ng.Int128) func github.com/goplus/gop/builtin/ng.Int128_Cast__3(v uint64) github.com/goplus/gop/builtin/ng.Int128 func github.com/goplus/gop/builtin/ng.Int128_Cast__4(v int32) github.com/goplus/gop/builtin/ng.Int128 func github.com/goplus/gop/builtin/ng.Int128_Cast__5(v int16) github.com/goplus/gop/builtin/ng.Int128 func github.com/goplus/gop/builtin/ng.Int128_Cast__6(v int8) github.com/goplus/gop/builtin/ng.Int128 func github.com/goplus/gop/builtin/ng.Int128_Cast__7(v github.com/goplus/gop/builtin/ng.Uint128) (out github.com/goplus/gop/builtin/ng.Int128) func github.com/goplus/gop/builtin/ng.Int128_Cast__8(v *math/big.Int) github.com/goplus/gop/builtin/ng.Int128 func github.com/goplus/gop/builtin/ng.Int128_Cast__9(v *math/big.Int) (out github.com/goplus/gop/builtin/ng.Int128, inRange bool) func github.com/goplus/gop/builtin/ng.Int128_Cast__a() github.com/goplus/gop/builtin/ng.Int128]}\n[Go+ CI/Test]   | 2023/05/30 11:34:06 ==> MatchFuncCall func(v int) github.com/goplus/gop/builtin/ng.Int128\n[Go+ CI/Test]   | 2023/05/30 11:34:06 ==> MatchType untyped int (36893488147419103232), int\n[Go+ CI/Test]   | 2023/05/30 11:34:06 ==> AssignableConv untyped int (36893488147419103232): value is out of int range\n[Go+ CI/Test]   | 2023/05/30 11:34:06 ==> MatchFuncCall func(v github.com/goplus/gop/builtin/ng.UntypedBigint) (out github.com/goplus/gop/builtin/ng.Int128)\n[Go+ CI/Test]   | 2023/05/30 11:34:06 ==> MatchType untyped int (36893488147419103232), github.com/goplus/gop/builtin/ng.UntypedBigint\n[Go+ CI/Test]   | 2023/05/30 11:34:06 NewClosure func() *math/big.Int\n[Go+ CI/Test]   | 2023/05/30 11:34:06 DefineVarStart [v _]\n[Go+ CI/Test]   | 2023/05/30 11:34:06 Val new instructionType{instr: gox.newInstr}\n[Go+ CI/Test]   | 2023/05/30 11:34:06 Typ math/big.Int\n[Go+ CI/Test]   | 2023/05/30 11:34:06 Call 1 0 // instructionType{instr: gox.newInstr}\n[Go+ CI/Test]   | 2023/05/30 11:34:06 ==> MatchFuncCall instructionType{instr: gox.newInstr}\n[Go+ CI/Test]   | 2023/05/30 11:34:06 Member SetString 0 // *math/big.Int\n[Go+ CI/Test]   | 2023/05/30 11:34:06 Val 36893488147419103232 string\n[Go+ CI/Test]   | 2023/05/30 11:34:06 Val 10 int\n[Go+ CI/Test]   | 2023/05/30 11:34:06 Call 2 0 // func(s string, base int) (*math/big.Int, bool)\n[Go+ CI/Test]   | 2023/05/30 11:34:06 ==> MatchFuncCall func(s string, base int) (*math/big.Int, bool)\n[Go+ CI/Test]   | 2023/05/30 11:34:06 ==> MatchType untyped string (\"36893488147419103232\"), string\n[Go+ CI/Test]   | 2023/05/30 11:34:06 ==> MatchType untyped int (10), int\n[Go+ CI/Test]   | 2023/05/30 11:34:06 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:34:06 Val v *math/big.Int\n[Go+ CI/Test]   | 2023/05/30 11:34:06 Return 1\n[Go+ CI/Test]   | 2023/05/30 11:34:06 ==> MatchType *math/big.Int, *math/big.Int\n[Go+ CI/Test]   | 2023/05/30 11:34:06 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:06 Call 0 0 // func() *math/big.Int\n[Go+ CI/Test]   | 2023/05/30 11:34:06 ==> MatchFuncCall func() *math/big.Int\n[Go+ CI/Test]   | 2023/05/30 11:34:06 Val int128 github.com/goplus/gop/builtin/ng.Int128\n[Go+ CI/Test]   | 2023/05/30 11:34:06 Call 0 0 // TypeType{typ: github.com/goplus/gop/builtin/ng.Int128}\n[Go+ CI/Test]   | 2023/05/30 11:34:06 ==> MatchFuncCall TypeType{typ: github.com/goplus/gop/builtin/ng.Int128}\n[Go+ CI/Test]   | 2023/05/30 11:34:06 ==> MatchFuncCall overloadFuncType{funcs: [func github.com/goplus/gop/builtin/ng.Int128_Cast__0(v int) github.com/goplus/gop/builtin/ng.Int128 func github.com/goplus/gop/builtin/ng.Int128_Cast__1(v github.com/goplus/gop/builtin/ng.UntypedBigint) (out github.com/goplus/gop/builtin/ng.Int128) func github.com/goplus/gop/builtin/ng.Int128_Cast__2(v int64) (out github.com/goplus/gop/builtin/ng.Int128) func github.com/goplus/gop/builtin/ng.Int128_Cast__3(v uint64) github.com/goplus/gop/builtin/ng.Int128 func github.com/goplus/gop/builtin/ng.Int128_Cast__4(v int32) github.com/goplus/gop/builtin/ng.Int128 func github.com/goplus/gop/builtin/ng.Int128_Cast__5(v int16) github.com/goplus/gop/builtin/ng.Int128 func github.com/goplus/gop/builtin/ng.Int128_Cast__6(v int8) github.com/goplus/gop/builtin/ng.Int128 func github.com/goplus/gop/builtin/ng.Int128_Cast__7(v github.com/goplus/gop/builtin/ng.Uint128) (out github.com/goplus/gop/builtin/ng.Int128) func github.com/goplus/gop/builtin/ng.Int128_Cast__8(v *math/big.Int) github.com/goplus/gop/builtin/ng.Int128 func github.com/goplus/gop/builtin/ng.Int128_Cast__9(v *math/big.Int) (out github.com/goplus/gop/builtin/ng.Int128, inRange bool) func github.com/goplus/gop/builtin/ng.Int128_Cast__a() github.com/goplus/gop/builtin/ng.Int128]}\n[Go+ CI/Test]   | 2023/05/30 11:34:06 ==> MatchFuncCall func(v int) github.com/goplus/gop/builtin/ng.Int128\n[Go+ CI/Test]   | 2023/05/30 11:34:06 ==> MatchFuncCall func(v github.com/goplus/gop/builtin/ng.UntypedBigint) (out github.com/goplus/gop/builtin/ng.Int128)\n[Go+ CI/Test]   | 2023/05/30 11:34:06 ==> MatchFuncCall func(v int64) (out github.com/goplus/gop/builtin/ng.Int128)\n[Go+ CI/Test]   | 2023/05/30 11:34:06 ==> MatchFuncCall func(v uint64) github.com/goplus/gop/builtin/ng.Int128\n[Go+ CI/Test]   | 2023/05/30 11:34:06 ==> MatchFuncCall func(v int32) github.com/goplus/gop/builtin/ng.Int128\n[Go+ CI/Test]   | 2023/05/30 11:34:06 ==> MatchFuncCall func(v int16) github.com/goplus/gop/builtin/ng.Int128\n[Go+ CI/Test]   | 2023/05/30 11:34:06 ==> MatchFuncCall func(v int8) github.com/goplus/gop/builtin/ng.Int128\n[Go+ CI/Test]   | 2023/05/30 11:34:06 ==> MatchFuncCall func(v github.com/goplus/gop/builtin/ng.Uint128) (out github.com/goplus/gop/builtin/ng.Int128)\n[Go+ CI/Test]   | 2023/05/30 11:34:06 ==> MatchFuncCall func(v *math/big.Int) github.com/goplus/gop/builtin/ng.Int128\n[Go+ CI/Test]   | 2023/05/30 11:34:06 ==> MatchFuncCall func(v *math/big.Int) (out github.com/goplus/gop/builtin/ng.Int128, inRange bool)\n[Go+ CI/Test]   | 2023/05/30 11:34:06 ==> MatchFuncCall func() github.com/goplus/gop/builtin/ng.Int128\n[Go+ CI/Test]   | 2023/05/30 11:34:06 Call 2 0 // overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:06 ==> MatchFuncCall overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:06 ==> MatchFuncCall func(a ...interface{}) (n int, err error)\n[Go+ CI/Test]   | 2023/05/30 11:34:06 ==> MatchType github.com/goplus/gop/builtin/ng.Int128, interface{}\n[Go+ CI/Test]   | 2023/05/30 11:34:06 ==> MatchType github.com/goplus/gop/builtin/ng.Int128, interface{}\n[Go+ CI/Test]   | 2023/05/30 11:34:06 End // Block\n[Go+ CI/Test]   | 2023/05/30 11:34:06 Block\n[Go+ CI/Test]   | 2023/05/30 11:34:06 ==> Load var github.com/goplus/gop/builtin/ng.Int128 [x]\n[Go+ CI/Test]   | 2023/05/30 11:34:06 NewVar [x]\n[Go+ CI/Test]   | 2023/05/30 11:34:06 Val &{0 INT 1} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:06 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:34:06 ==> MatchType untyped int (1), github.com/goplus/gop/builtin/ng.Int128\n[Go+ CI/Test]   | 2023/05/30 11:34:06 ==> MatchFuncCall overloadFuncType{funcs: [func github.com/goplus/gop/builtin/ng.Int128_Init__0(v int) (out github.com/goplus/gop/builtin/ng.Int128) func github.com/goplus/gop/builtin/ng.Int128_Init__1(v github.com/goplus/gop/builtin/ng.UntypedBigint) (out github.com/goplus/gop/builtin/ng.Int128)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:06 ==> MatchFuncCall func(v int) (out github.com/goplus/gop/builtin/ng.Int128)\n[Go+ CI/Test]   | 2023/05/30 11:34:06 ==> MatchType untyped int (1), int\n[Go+ CI/Test]   | 2023/05/30 11:34:06 ==> AssignableConv untyped int github.com/goplus/gop/builtin/ng.Int128 true\n[Go+ CI/Test]   | 2023/05/30 11:34:06 Val printf overloadFuncType{funcs: [func fmt.Printf(format string, a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:06 Val &{0 STRING \"%4d\\n\"} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:06 Val x github.com/goplus/gop/builtin/ng.Int128\n[Go+ CI/Test]   | 2023/05/30 11:34:06 Call 2 0 // overloadFuncType{funcs: [func fmt.Printf(format string, a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:06 ==> MatchFuncCall overloadFuncType{funcs: [func fmt.Printf(format string, a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:06 ==> MatchFuncCall func(format string, a ...interface{}) (n int, err error)\n[Go+ CI/Test]   | 2023/05/30 11:34:06 ==> MatchType untyped string (\"%4d\\n\"), string\n[Go+ CI/Test]   | 2023/05/30 11:34:06 ==> MatchType github.com/goplus/gop/builtin/ng.Int128, interface{}\n[Go+ CI/Test]   | 2023/05/30 11:34:06 End // Block\n[Go+ CI/Test]   | 2023/05/30 11:34:06 Block\n[Go+ CI/Test]   | 2023/05/30 11:34:06 ==> Load var github.com/goplus/gop/builtin/ng.Int128 [x]\n[Go+ CI/Test]   | 2023/05/30 11:34:06 NewVar [x]\n[Go+ CI/Test]   | 2023/05/30 11:34:06 Val &{0 INT 1} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:06 Val &{0 INT 65} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:06 BinaryOp <<\n[Go+ CI/Test]   | 2023/05/30 11:34:06 ==> MatchFuncCall func(a TemplateParamType{name: T}, n TemplateParamType{name: N}) TemplateParamType{name: T}\n[Go+ CI/Test]   | 2023/05/30 11:34:06 ==> MatchType untyped int (1), unboundFuncParam{typ: <nil>}\n[Go+ CI/Test]   | 2023/05/30 11:34:06 ==> MatchType untyped int (65), unboundFuncParam{typ: <nil>}\n[Go+ CI/Test]   | 2023/05/30 11:34:06 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:34:06 ==> MatchType untyped int (36893488147419103232), github.com/goplus/gop/builtin/ng.Int128\n[Go+ CI/Test]   | 2023/05/30 11:34:06 ==> MatchFuncCall overloadFuncType{funcs: [func github.com/goplus/gop/builtin/ng.Int128_Init__0(v int) (out github.com/goplus/gop/builtin/ng.Int128) func github.com/goplus/gop/builtin/ng.Int128_Init__1(v github.com/goplus/gop/builtin/ng.UntypedBigint) (out github.com/goplus/gop/builtin/ng.Int128)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:06 ==> MatchFuncCall func(v int) (out github.com/goplus/gop/builtin/ng.Int128)\n[Go+ CI/Test]   | 2023/05/30 11:34:06 ==> MatchType untyped int (36893488147419103232), int\n[Go+ CI/Test]   | 2023/05/30 11:34:06 ==> AssignableConv untyped int (36893488147419103232): value is out of int range\n[Go+ CI/Test]   | 2023/05/30 11:34:06 ==> MatchFuncCall func(v github.com/goplus/gop/builtin/ng.UntypedBigint) (out github.com/goplus/gop/builtin/ng.Int128)\n[Go+ CI/Test]   | 2023/05/30 11:34:06 ==> MatchType untyped int (36893488147419103232), github.com/goplus/gop/builtin/ng.UntypedBigint\n[Go+ CI/Test]   | 2023/05/30 11:34:06 NewClosure func() *math/big.Int\n[Go+ CI/Test]   | 2023/05/30 11:34:06 DefineVarStart [v _]\n[Go+ CI/Test]   | 2023/05/30 11:34:06 Val new instructionType{instr: gox.newInstr}\n[Go+ CI/Test]   | 2023/05/30 11:34:06 Typ math/big.Int\n[Go+ CI/Test]   | 2023/05/30 11:34:06 Call 1 0 // instructionType{instr: gox.newInstr}\n[Go+ CI/Test]   | 2023/05/30 11:34:06 ==> MatchFuncCall instructionType{instr: gox.newInstr}\n[Go+ CI/Test]   | 2023/05/30 11:34:06 Member SetString 0 // *math/big.Int\n[Go+ CI/Test]   | 2023/05/30 11:34:06 Val 36893488147419103232 string\n[Go+ CI/Test]   | 2023/05/30 11:34:06 Val 10 int\n[Go+ CI/Test]   | 2023/05/30 11:34:06 Call 2 0 // func(s string, base int) (*math/big.Int, bool)\n[Go+ CI/Test]   | 2023/05/30 11:34:06 ==> MatchFuncCall func(s string, base int) (*math/big.Int, bool)\n[Go+ CI/Test]   | 2023/05/30 11:34:06 ==> MatchType untyped string (\"36893488147419103232\"), string\n[Go+ CI/Test]   | 2023/05/30 11:34:06 ==> MatchType untyped int (10), int\n[Go+ CI/Test]   | 2023/05/30 11:34:06 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:34:06 Val v *math/big.Int\n[Go+ CI/Test]   | 2023/05/30 11:34:06 Return 1\n[Go+ CI/Test]   | 2023/05/30 11:34:06 ==> MatchType *math/big.Int, *math/big.Int\n[Go+ CI/Test]   | 2023/05/30 11:34:06 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:06 Call 0 0 // func() *math/big.Int\n[Go+ CI/Test]   | 2023/05/30 11:34:06 ==> MatchFuncCall func() *math/big.Int\n[Go+ CI/Test]   | 2023/05/30 11:34:06 ==> AssignableConv untyped int github.com/goplus/gop/builtin/ng.Int128 true\n[Go+ CI/Test]   | 2023/05/30 11:34:06 ==> Load var <nil> [y]\n[Go+ CI/Test]   | 2023/05/30 11:34:06 NewVar [y]\n[Go+ CI/Test]   | 2023/05/30 11:34:06 Val x github.com/goplus/gop/builtin/ng.Int128\n[Go+ CI/Test]   | 2023/05/30 11:34:06 Val &{0 INT 2} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:06 BinaryOp >>\n[Go+ CI/Test]   | 2023/05/30 11:34:06 ==> MatchFuncCall func(n uint) github.com/goplus/gop/builtin/ng.Int128\n[Go+ CI/Test]   | 2023/05/30 11:34:06 ==> MatchType github.com/goplus/gop/builtin/ng.Int128, github.com/goplus/gop/builtin/ng.Int128\n[Go+ CI/Test]   | 2023/05/30 11:34:06 ==> MatchType untyped int (2), uint\n[Go+ CI/Test]   | 2023/05/30 11:34:06 Val &{0 INT 1} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:06 BinaryOp -\n[Go+ CI/Test]   | 2023/05/30 11:34:06 ==> MatchFuncCall [func (github.com/goplus/gop/builtin/ng.Int128).Gop_Sub__0(n int64) (v github.com/goplus/gop/builtin/ng.Int128) func (github.com/goplus/gop/builtin/ng.Int128).Gop_Sub__1(n github.com/goplus/gop/builtin/ng.Int128) (v github.com/goplus/gop/builtin/ng.Int128)]\n[Go+ CI/Test]   | 2023/05/30 11:34:06 ==> MatchFuncCall func(n int64) (v github.com/goplus/gop/builtin/ng.Int128)\n[Go+ CI/Test]   | 2023/05/30 11:34:06 ==> MatchType github.com/goplus/gop/builtin/ng.Int128, github.com/goplus/gop/builtin/ng.Int128\n[Go+ CI/Test]   | 2023/05/30 11:34:06 ==> MatchType untyped int (1), int64\n[Go+ CI/Test]   | 2023/05/30 11:34:06 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:34:06 DefineVarStart [v1 ok1]\n[Go+ CI/Test]   | 2023/05/30 11:34:06 Val int64 int64\n[Go+ CI/Test]   | 2023/05/30 11:34:06 Val x github.com/goplus/gop/builtin/ng.Int128\n[Go+ CI/Test]   | 2023/05/30 11:34:06 Call 1 2 // TypeType{typ: int64}\n[Go+ CI/Test]   | 2023/05/30 11:34:06 ==> MatchFuncCall TypeType{typ: int64}\n[Go+ CI/Test]   | 2023/05/30 11:34:06 Val &{x github.com/goplus/gop/builtin/ng.Int128 <nil> x} *internal.Elem\n[Go+ CI/Test]   | 2023/05/30 11:34:06 Member Gop_Rcast__3 0 // github.com/goplus/gop/builtin/ng.Int128\n[Go+ CI/Test]   | 2023/05/30 11:34:06 Call 0 2 // func() (out int64, inRange bool)\n[Go+ CI/Test]   | 2023/05/30 11:34:06 ==> MatchFuncCall func() (out int64, inRange bool)\n[Go+ CI/Test]   | 2023/05/30 11:34:06 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:34:06 DefineVarStart [v2 ok2]\n[Go+ CI/Test]   | 2023/05/30 11:34:06 Val int64 int64\n[Go+ CI/Test]   | 2023/05/30 11:34:06 Val y github.com/goplus/gop/builtin/ng.Int128\n[Go+ CI/Test]   | 2023/05/30 11:34:06 Call 1 2 // TypeType{typ: int64}\n[Go+ CI/Test]   | 2023/05/30 11:34:06 ==> MatchFuncCall TypeType{typ: int64}\n[Go+ CI/Test]   | 2023/05/30 11:34:06 Val &{y github.com/goplus/gop/builtin/ng.Int128 <nil> y} *internal.Elem\n[Go+ CI/Test]   | 2023/05/30 11:34:06 Member Gop_Rcast__3 0 // github.com/goplus/gop/builtin/ng.Int128\n[Go+ CI/Test]   | 2023/05/30 11:34:06 Call 0 2 // func() (out int64, inRange bool)\n[Go+ CI/Test]   | 2023/05/30 11:34:06 ==> MatchFuncCall func() (out int64, inRange bool)\n[Go+ CI/Test]   | 2023/05/30 11:34:06 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:34:06 Val println overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:06 Val v1 int64\n[Go+ CI/Test]   | 2023/05/30 11:34:06 Val ok1 bool\n[Go+ CI/Test]   | 2023/05/30 11:34:06 Call 2 0 // overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:06 ==> MatchFuncCall overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:06 ==> MatchFuncCall func(a ...interface{}) (n int, err error)\n[Go+ CI/Test]   | 2023/05/30 11:34:06 ==> MatchType int64, interface{}\n[Go+ CI/Test]   | 2023/05/30 11:34:06 ==> MatchType bool, interface{}\n[Go+ CI/Test]   | 2023/05/30 11:34:06 Val println overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:06 Val v2 int64\n[Go+ CI/Test]   | 2023/05/30 11:34:06 Val ok2 bool\n[Go+ CI/Test]   | 2023/05/30 11:34:06 Call 2 0 // overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:06 ==> MatchFuncCall overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:06 ==> MatchFuncCall func(a ...interface{}) (n int, err error)\n[Go+ CI/Test]   | 2023/05/30 11:34:06 ==> MatchType int64, interface{}\n[Go+ CI/Test]   | 2023/05/30 11:34:06 ==> MatchType bool, interface{}\n[Go+ CI/Test]   | 2023/05/30 11:34:06 End // Block\n[Go+ CI/Test]   | 2023/05/30 11:34:06 Block\n[Go+ CI/Test]   | 2023/05/30 11:34:06 ==> Load var github.com/goplus/gop/builtin/ng.Int128 [x]\n[Go+ CI/Test]   | 2023/05/30 11:34:06 NewVar [x]\n[Go+ CI/Test]   | 2023/05/30 11:34:06 Val &{0 INT 0} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:06 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:34:06 ==> MatchType untyped int (0), github.com/goplus/gop/builtin/ng.Int128\n[Go+ CI/Test]   | 2023/05/30 11:34:06 ==> MatchFuncCall overloadFuncType{funcs: [func github.com/goplus/gop/builtin/ng.Int128_Init__0(v int) (out github.com/goplus/gop/builtin/ng.Int128) func github.com/goplus/gop/builtin/ng.Int128_Init__1(v github.com/goplus/gop/builtin/ng.UntypedBigint) (out github.com/goplus/gop/builtin/ng.Int128)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:06 ==> MatchFuncCall func(v int) (out github.com/goplus/gop/builtin/ng.Int128)\n[Go+ CI/Test]   | 2023/05/30 11:34:06 ==> MatchType untyped int (0), int\n[Go+ CI/Test]   | 2023/05/30 11:34:06 ==> AssignableConv untyped int github.com/goplus/gop/builtin/ng.Int128 true\n[Go+ CI/Test]   | 2023/05/30 11:34:06 VarRef x github.com/goplus/gop/builtin/ng.Int128\n[Go+ CI/Test]   | 2023/05/30 11:34:06 IncDec --\n[Go+ CI/Test]   | 2023/05/30 11:34:06 ==> MatchFuncCall func()\n[Go+ CI/Test]   | 2023/05/30 11:34:06 ==> MatchType refType{typ: github.com/goplus/gop/builtin/ng.Int128}, *github.com/goplus/gop/builtin/ng.Int128\n[Go+ CI/Test]   | 2023/05/30 11:34:06 Val println overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:06 Val x github.com/goplus/gop/builtin/ng.Int128\n[Go+ CI/Test]   | 2023/05/30 11:34:06 Call 1 0 // overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:06 ==> MatchFuncCall overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:06 ==> MatchFuncCall func(a ...interface{}) (n int, err error)\n[Go+ CI/Test]   | 2023/05/30 11:34:06 ==> MatchType github.com/goplus/gop/builtin/ng.Int128, interface{}\n[Go+ CI/Test]   | 2023/05/30 11:34:06 End // Block\n[Go+ CI/Test]   | 2023/05/30 11:34:06 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:06 ==> ASTFile \n[Go+ CI/Test]   | --- PASS: TestInt128_run (1.00s)\n[Go+ CI/Test]   | === RUN   TestBigint_run\n[Go+ CI/Test]   | 2023/05/30 11:34:07 ==> Import github.com/goplus/gop/builtin\n[Go+ CI/Test]   | 2023/05/30 11:34:07 ==> NewOverloadFunc NewRange\n[Go+ CI/Test]   | 2023/05/30 11:34:07 ==> Import github.com/goplus/gop/builtin/ng\n[Go+ CI/Test]   | 2023/05/30 11:34:07 ==> NewOverloadFunc Int128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:07 ==> NewOverloadFunc Uint128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:07 ==> NewOverloadFunc UntypedBigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:07 ==> NewOverloadFunc UntypedBigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:07 ==> NewOverloadFunc Bigint_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:07 ==> NewOverloadFunc Bigrat_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:07 ==> NewOverloadFunc Bigrat_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:07 ==> NewOverloadFunc Int128_Cast\n[Go+ CI/Test]   | 2023/05/30 11:34:07 ==> NewOverloadFunc Uint128_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:07 ==> NewOverloadFunc Bigint_Init\n[Go+ CI/Test]   | 2023/05/30 11:34:07 ==> NewOverloadMethod Int128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:07 ==> NewOverloadMethod Int128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:07 ==> NewOverloadMethod Uint128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:07 ==> NewOverloadMethod Uint128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:07 ==> NewOverloadMethod Int128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:07 ==> NewOverloadMethod Uint128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:07 ==> NewOverloadMethod Uint128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:07 ==> NewOverloadMethod Uint128 Gop_Or\n[Go+ CI/Test]   | 2023/05/30 11:34:07 ==> NewOverloadMethod Int128 Abs\n[Go+ CI/Test]   | 2023/05/30 11:34:07 ==> NewOverloadMethod Int128 Cmp\n[Go+ CI/Test]   | 2023/05/30 11:34:07 ==> NewOverloadMethod Uint128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:07 ==> NewOverloadMethod Uint128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:07 ==> NewOverloadMethod Int128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:07 ==> NewOverloadMethod Uint128 Gop_GE\n[Go+ CI/Test]   | 2023/05/30 11:34:07 ==> NewOverloadMethod Uint128 Gop_EQ\n[Go+ CI/Test]   | 2023/05/30 11:34:07 ==> NewOverloadMethod Bigint Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:07 ==> NewOverloadMethod Int128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:07 ==> NewOverloadMethod Uint128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:07 ==> NewOverloadMethod Uint128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:07 ==> NewOverloadMethod Uint128 Gop_And\n[Go+ CI/Test]   | 2023/05/30 11:34:07 ==> NewOverloadMethod Uint128 Gop_Xor\n[Go+ CI/Test]   | 2023/05/30 11:34:07 ==> NewOverloadMethod Int128 Gop_Rcast\n[Go+ CI/Test]   | 2023/05/30 11:34:07 ==> NewOverloadMethod Int128 Gop_Mul\n[Go+ CI/Test]   | 2023/05/30 11:34:07 ==> NewOverloadMethod Int128 QuoRem\n[Go+ CI/Test]   | 2023/05/30 11:34:07 ==> NewOverloadMethod Uint128 Gop_LT\n[Go+ CI/Test]   | 2023/05/30 11:34:07 ==> NewOverloadMethod Int128 Gop_Add\n[Go+ CI/Test]   | 2023/05/30 11:34:07 ==> NewOverloadMethod Int128 Gop_Sub\n[Go+ CI/Test]   | 2023/05/30 11:34:07 ==> NewOverloadMethod Int128 Gop_Quo\n[Go+ CI/Test]   | 2023/05/30 11:34:07 ==> NewOverloadMethod Int128 Gop_Rem\n[Go+ CI/Test]   | 2023/05/30 11:34:07 ==> NewOverloadMethod Uint128 Gop_GT\n[Go+ CI/Test]   | 2023/05/30 11:34:07 ==> NewOverloadMethod Uint128 Gop_LE\n[Go+ CI/Test]   | 2023/05/30 11:34:07 ==> Preload func main\n[Go+ CI/Test]   | 2023/05/30 11:34:07 ==> Load func main\n[Go+ CI/Test]   | 2023/05/30 11:34:07 NewFunc main func()\n[Go+ CI/Test]   | 2023/05/30 11:34:07 Block\n[Go+ CI/Test]   | 2023/05/30 11:34:07 ==> Load var github.com/goplus/gop/builtin/ng.Bigint [x]\n[Go+ CI/Test]   | 2023/05/30 11:34:07 NewVar [x]\n[Go+ CI/Test]   | 2023/05/30 11:34:07 Val &{0 INT 1} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:07 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:34:07 ==> MatchType untyped int (1), github.com/goplus/gop/builtin/ng.Bigint\n[Go+ CI/Test]   | 2023/05/30 11:34:07 ==> MatchFuncCall overloadFuncType{funcs: [func github.com/goplus/gop/builtin/ng.Bigint_Init__0(x int) github.com/goplus/gop/builtin/ng.Bigint func github.com/goplus/gop/builtin/ng.Bigint_Init__1(x github.com/goplus/gop/builtin/ng.UntypedBigint) github.com/goplus/gop/builtin/ng.Bigint func github.com/goplus/gop/builtin/ng.Bigint_Init__2(x *math/big.Int) github.com/goplus/gop/builtin/ng.Bigint]}\n[Go+ CI/Test]   | 2023/05/30 11:34:07 ==> MatchFuncCall func(x int) github.com/goplus/gop/builtin/ng.Bigint\n[Go+ CI/Test]   | 2023/05/30 11:34:07 ==> MatchType untyped int (1), int\n[Go+ CI/Test]   | 2023/05/30 11:34:07 ==> AssignableConv untyped int github.com/goplus/gop/builtin/ng.Bigint true\n[Go+ CI/Test]   | 2023/05/30 11:34:07 ==> Load var <nil> [y]\n[Go+ CI/Test]   | 2023/05/30 11:34:07 NewVar [y]\n[Go+ CI/Test]   | 2023/05/30 11:34:07 Val x github.com/goplus/gop/builtin/ng.Bigint\n[Go+ CI/Test]   | 2023/05/30 11:34:07 UnaryOp + flags: 0\n[Go+ CI/Test]   | 2023/05/30 11:34:07 ==> MatchFuncCall func() github.com/goplus/gop/builtin/ng.Bigint\n[Go+ CI/Test]   | 2023/05/30 11:34:07 ==> MatchType github.com/goplus/gop/builtin/ng.Bigint, github.com/goplus/gop/builtin/ng.Bigint\n[Go+ CI/Test]   | 2023/05/30 11:34:07 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:34:07 VarRef x github.com/goplus/gop/builtin/ng.Bigint\n[Go+ CI/Test]   | 2023/05/30 11:34:07 IncDec ++\n[Go+ CI/Test]   | 2023/05/30 11:34:07 ==> MatchFuncCall func()\n[Go+ CI/Test]   | 2023/05/30 11:34:07 ==> MatchType refType{typ: github.com/goplus/gop/builtin/ng.Bigint}, github.com/goplus/gop/builtin/ng.Bigint\n[Go+ CI/Test]   | 2023/05/30 11:34:07 VarRef x github.com/goplus/gop/builtin/ng.Bigint\n[Go+ CI/Test]   | 2023/05/30 11:34:07 Val &{0 INT 10} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:07 AssignOp += Gop_AddAssign\n[Go+ CI/Test]   | 2023/05/30 11:34:07 ==> MatchFuncCall func(b github.com/goplus/gop/builtin/ng.Bigint)\n[Go+ CI/Test]   | 2023/05/30 11:34:07 ==> MatchType refType{typ: github.com/goplus/gop/builtin/ng.Bigint}, github.com/goplus/gop/builtin/ng.Bigint\n[Go+ CI/Test]   | 2023/05/30 11:34:07 ==> MatchType untyped int (10), github.com/goplus/gop/builtin/ng.Bigint\n[Go+ CI/Test]   | 2023/05/30 11:34:07 ==> MatchFuncCall overloadFuncType{funcs: [func github.com/goplus/gop/builtin/ng.Bigint_Init__0(x int) github.com/goplus/gop/builtin/ng.Bigint func github.com/goplus/gop/builtin/ng.Bigint_Init__1(x github.com/goplus/gop/builtin/ng.UntypedBigint) github.com/goplus/gop/builtin/ng.Bigint func github.com/goplus/gop/builtin/ng.Bigint_Init__2(x *math/big.Int) github.com/goplus/gop/builtin/ng.Bigint]}\n[Go+ CI/Test]   | 2023/05/30 11:34:07 ==> MatchFuncCall func(x int) github.com/goplus/gop/builtin/ng.Bigint\n[Go+ CI/Test]   | 2023/05/30 11:34:07 ==> MatchType untyped int (10), int\n[Go+ CI/Test]   | 2023/05/30 11:34:07 ==> AssignableConv untyped int github.com/goplus/gop/builtin/ng.Bigint true\n[Go+ CI/Test]   | 2023/05/30 11:34:07 Val println overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:07 Val x github.com/goplus/gop/builtin/ng.Bigint\n[Go+ CI/Test]   | 2023/05/30 11:34:07 Val y github.com/goplus/gop/builtin/ng.Bigint\n[Go+ CI/Test]   | 2023/05/30 11:34:07 Call 2 0 // overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:07 ==> MatchFuncCall overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:07 ==> MatchFuncCall func(a ...interface{}) (n int, err error)\n[Go+ CI/Test]   | 2023/05/30 11:34:07 ==> MatchType github.com/goplus/gop/builtin/ng.Bigint, interface{}\n[Go+ CI/Test]   | 2023/05/30 11:34:07 ==> MatchType github.com/goplus/gop/builtin/ng.Bigint, interface{}\n[Go+ CI/Test]   | 2023/05/30 11:34:07 End // Block\n[Go+ CI/Test]   | 2023/05/30 11:34:07 Block\n[Go+ CI/Test]   | 2023/05/30 11:34:07 ==> Load var github.com/goplus/gop/builtin/ng.Bigint [x]\n[Go+ CI/Test]   | 2023/05/30 11:34:07 NewVar [x]\n[Go+ CI/Test]   | 2023/05/30 11:34:07 Val &{0 INT 1} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:07 Val &{0 INT 65} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:07 BinaryOp <<\n[Go+ CI/Test]   | 2023/05/30 11:34:07 ==> MatchFuncCall func(a TemplateParamType{name: T}, n TemplateParamType{name: N}) TemplateParamType{name: T}\n[Go+ CI/Test]   | 2023/05/30 11:34:07 ==> MatchType untyped int (1), unboundFuncParam{typ: <nil>}\n[Go+ CI/Test]   | 2023/05/30 11:34:07 ==> MatchType untyped int (65), unboundFuncParam{typ: <nil>}\n[Go+ CI/Test]   | 2023/05/30 11:34:07 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:34:07 ==> MatchType untyped int (36893488147419103232), github.com/goplus/gop/builtin/ng.Bigint\n[Go+ CI/Test]   | 2023/05/30 11:34:07 ==> MatchFuncCall overloadFuncType{funcs: [func github.com/goplus/gop/builtin/ng.Bigint_Init__0(x int) github.com/goplus/gop/builtin/ng.Bigint func github.com/goplus/gop/builtin/ng.Bigint_Init__1(x github.com/goplus/gop/builtin/ng.UntypedBigint) github.com/goplus/gop/builtin/ng.Bigint func github.com/goplus/gop/builtin/ng.Bigint_Init__2(x *math/big.Int) github.com/goplus/gop/builtin/ng.Bigint]}\n[Go+ CI/Test]   | 2023/05/30 11:34:07 ==> MatchFuncCall func(x int) github.com/goplus/gop/builtin/ng.Bigint\n[Go+ CI/Test]   | 2023/05/30 11:34:07 ==> MatchType untyped int (36893488147419103232), int\n[Go+ CI/Test]   | 2023/05/30 11:34:07 ==> AssignableConv untyped int (36893488147419103232): value is out of int range\n[Go+ CI/Test]   | 2023/05/30 11:34:07 ==> MatchFuncCall func(x github.com/goplus/gop/builtin/ng.UntypedBigint) github.com/goplus/gop/builtin/ng.Bigint\n[Go+ CI/Test]   | 2023/05/30 11:34:07 ==> MatchType untyped int (36893488147419103232), github.com/goplus/gop/builtin/ng.UntypedBigint\n[Go+ CI/Test]   | 2023/05/30 11:34:07 NewClosure func() *math/big.Int\n[Go+ CI/Test]   | 2023/05/30 11:34:07 DefineVarStart [v _]\n[Go+ CI/Test]   | 2023/05/30 11:34:07 Val new instructionType{instr: gox.newInstr}\n[Go+ CI/Test]   | 2023/05/30 11:34:07 Typ math/big.Int\n[Go+ CI/Test]   | 2023/05/30 11:34:07 Call 1 0 // instructionType{instr: gox.newInstr}\n[Go+ CI/Test]   | 2023/05/30 11:34:07 ==> MatchFuncCall instructionType{instr: gox.newInstr}\n[Go+ CI/Test]   | 2023/05/30 11:34:07 Member SetString 0 // *math/big.Int\n[Go+ CI/Test]   | 2023/05/30 11:34:07 Val 36893488147419103232 string\n[Go+ CI/Test]   | 2023/05/30 11:34:07 Val 10 int\n[Go+ CI/Test]   | 2023/05/30 11:34:07 Call 2 0 // func(s string, base int) (*math/big.Int, bool)\n[Go+ CI/Test]   | 2023/05/30 11:34:07 ==> MatchFuncCall func(s string, base int) (*math/big.Int, bool)\n[Go+ CI/Test]   | 2023/05/30 11:34:07 ==> MatchType untyped string (\"36893488147419103232\"), string\n[Go+ CI/Test]   | 2023/05/30 11:34:07 ==> MatchType untyped int (10), int\n[Go+ CI/Test]   | 2023/05/30 11:34:07 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:34:07 Val v *math/big.Int\n[Go+ CI/Test]   | 2023/05/30 11:34:07 Return 1\n[Go+ CI/Test]   | 2023/05/30 11:34:07 ==> MatchType *math/big.Int, *math/big.Int\n[Go+ CI/Test]   | 2023/05/30 11:34:07 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:07 Call 0 0 // func() *math/big.Int\n[Go+ CI/Test]   | 2023/05/30 11:34:07 ==> MatchFuncCall func() *math/big.Int\n[Go+ CI/Test]   | 2023/05/30 11:34:07 ==> AssignableConv untyped int github.com/goplus/gop/builtin/ng.Bigint true\n[Go+ CI/Test]   | 2023/05/30 11:34:07 ==> Load var <nil> [y]\n[Go+ CI/Test]   | 2023/05/30 11:34:07 NewVar [y]\n[Go+ CI/Test]   | 2023/05/30 11:34:07 Val x github.com/goplus/gop/builtin/ng.Bigint\n[Go+ CI/Test]   | 2023/05/30 11:34:07 Val &{0 INT 63} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:07 BinaryOp >>\n[Go+ CI/Test]   | 2023/05/30 11:34:07 ==> MatchFuncCall func(n uint) github.com/goplus/gop/builtin/ng.Bigint\n[Go+ CI/Test]   | 2023/05/30 11:34:07 ==> MatchType github.com/goplus/gop/builtin/ng.Bigint, github.com/goplus/gop/builtin/ng.Bigint\n[Go+ CI/Test]   | 2023/05/30 11:34:07 ==> MatchType untyped int (63), uint\n[Go+ CI/Test]   | 2023/05/30 11:34:07 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:34:07 ==> Load var <nil> [z]\n[Go+ CI/Test]   | 2023/05/30 11:34:07 NewVar [z]\n[Go+ CI/Test]   | 2023/05/30 11:34:07 Val x github.com/goplus/gop/builtin/ng.Bigint\n[Go+ CI/Test]   | 2023/05/30 11:34:07 Val &{0 INT 65} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:07 BinaryOp >>\n[Go+ CI/Test]   | 2023/05/30 11:34:07 ==> MatchFuncCall func(n uint) github.com/goplus/gop/builtin/ng.Bigint\n[Go+ CI/Test]   | 2023/05/30 11:34:07 ==> MatchType github.com/goplus/gop/builtin/ng.Bigint, github.com/goplus/gop/builtin/ng.Bigint\n[Go+ CI/Test]   | 2023/05/30 11:34:07 ==> MatchType untyped int (65), uint\n[Go+ CI/Test]   | 2023/05/30 11:34:07 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:34:07 Val println overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:07 Val x github.com/goplus/gop/builtin/ng.Bigint\n[Go+ CI/Test]   | 2023/05/30 11:34:07 Call 1 0 // overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:07 ==> MatchFuncCall overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:07 ==> MatchFuncCall func(a ...interface{}) (n int, err error)\n[Go+ CI/Test]   | 2023/05/30 11:34:07 ==> MatchType github.com/goplus/gop/builtin/ng.Bigint, interface{}\n[Go+ CI/Test]   | 2023/05/30 11:34:07 Val println overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:07 Val y github.com/goplus/gop/builtin/ng.Bigint\n[Go+ CI/Test]   | 2023/05/30 11:34:07 Val z github.com/goplus/gop/builtin/ng.Bigint\n[Go+ CI/Test]   | 2023/05/30 11:34:07 Call 2 0 // overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:07 ==> MatchFuncCall overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:07 ==> MatchFuncCall func(a ...interface{}) (n int, err error)\n[Go+ CI/Test]   | 2023/05/30 11:34:07 ==> MatchType github.com/goplus/gop/builtin/ng.Bigint, interface{}\n[Go+ CI/Test]   | 2023/05/30 11:34:07 ==> MatchType github.com/goplus/gop/builtin/ng.Bigint, interface{}\n[Go+ CI/Test]   | 2023/05/30 11:34:07 End // Block\n[Go+ CI/Test]   | 2023/05/30 11:34:07 Block\n[Go+ CI/Test]   | 2023/05/30 11:34:07 Val println overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:07 Val bigint github.com/goplus/gop/builtin/ng.Bigint\n[Go+ CI/Test]   | 2023/05/30 11:34:07 Val &{0 INT 1} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:07 Val &{0 INT 65} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:07 BinaryOp <<\n[Go+ CI/Test]   | 2023/05/30 11:34:07 ==> MatchFuncCall func(a TemplateParamType{name: T}, n TemplateParamType{name: N}) TemplateParamType{name: T}\n[Go+ CI/Test]   | 2023/05/30 11:34:07 ==> MatchType untyped int (1), unboundFuncParam{typ: <nil>}\n[Go+ CI/Test]   | 2023/05/30 11:34:07 ==> MatchType untyped int (65), unboundFuncParam{typ: <nil>}\n[Go+ CI/Test]   | 2023/05/30 11:34:07 Call 1 0 // TypeType{typ: github.com/goplus/gop/builtin/ng.Bigint}\n[Go+ CI/Test]   | 2023/05/30 11:34:07 ==> MatchFuncCall TypeType{typ: github.com/goplus/gop/builtin/ng.Bigint}\n[Go+ CI/Test]   | 2023/05/30 11:34:07 ==> MatchFuncCall overloadFuncType{funcs: [func github.com/goplus/gop/builtin/ng.Bigint_Cast__0(x int) github.com/goplus/gop/builtin/ng.Bigint func github.com/goplus/gop/builtin/ng.Bigint_Cast__1(x github.com/goplus/gop/builtin/ng.UntypedBigint) github.com/goplus/gop/builtin/ng.Bigint func github.com/goplus/gop/builtin/ng.Bigint_Cast__2(x int64) github.com/goplus/gop/builtin/ng.Bigint func github.com/goplus/gop/builtin/ng.Bigint_Cast__3(x uint64) github.com/goplus/gop/builtin/ng.Bigint func github.com/goplus/gop/builtin/ng.Bigint_Cast__4(x uint) github.com/goplus/gop/builtin/ng.Bigint func github.com/goplus/gop/builtin/ng.Bigint_Cast__5(x *math/big.Int) github.com/goplus/gop/builtin/ng.Bigint func github.com/goplus/gop/builtin/ng.Bigint_Cast__6(x *math/big.Rat) github.com/goplus/gop/builtin/ng.Bigint func github.com/goplus/gop/builtin/ng.Bigint_Cast__7() github.com/goplus/gop/builtin/ng.Bigint]}\n[Go+ CI/Test]   | 2023/05/30 11:34:07 ==> MatchFuncCall func(x int) github.com/goplus/gop/builtin/ng.Bigint\n[Go+ CI/Test]   | 2023/05/30 11:34:07 ==> MatchType untyped int (36893488147419103232), int\n[Go+ CI/Test]   | 2023/05/30 11:34:07 ==> AssignableConv untyped int (36893488147419103232): value is out of int range\n[Go+ CI/Test]   | 2023/05/30 11:34:07 ==> MatchFuncCall func(x github.com/goplus/gop/builtin/ng.UntypedBigint) github.com/goplus/gop/builtin/ng.Bigint\n[Go+ CI/Test]   | 2023/05/30 11:34:07 ==> MatchType untyped int (36893488147419103232), github.com/goplus/gop/builtin/ng.UntypedBigint\n[Go+ CI/Test]   | 2023/05/30 11:34:07 NewClosure func() *math/big.Int\n[Go+ CI/Test]   | 2023/05/30 11:34:07 DefineVarStart [v _]\n[Go+ CI/Test]   | 2023/05/30 11:34:07 Val new instructionType{instr: gox.newInstr}\n[Go+ CI/Test]   | 2023/05/30 11:34:07 Typ math/big.Int\n[Go+ CI/Test]   | 2023/05/30 11:34:07 Call 1 0 // instructionType{instr: gox.newInstr}\n[Go+ CI/Test]   | 2023/05/30 11:34:07 ==> MatchFuncCall instructionType{instr: gox.newInstr}\n[Go+ CI/Test]   | 2023/05/30 11:34:07 Member SetString 0 // *math/big.Int\n[Go+ CI/Test]   | 2023/05/30 11:34:07 Val 36893488147419103232 string\n[Go+ CI/Test]   | 2023/05/30 11:34:07 Val 10 int\n[Go+ CI/Test]   | 2023/05/30 11:34:07 Call 2 0 // func(s string, base int) (*math/big.Int, bool)\n[Go+ CI/Test]   | 2023/05/30 11:34:07 ==> MatchFuncCall func(s string, base int) (*math/big.Int, bool)\n[Go+ CI/Test]   | 2023/05/30 11:34:07 ==> MatchType untyped string (\"36893488147419103232\"), string\n[Go+ CI/Test]   | 2023/05/30 11:34:07 ==> MatchType untyped int (10), int\n[Go+ CI/Test]   | 2023/05/30 11:34:07 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:34:07 Val v *math/big.Int\n[Go+ CI/Test]   | 2023/05/30 11:34:07 Return 1\n[Go+ CI/Test]   | 2023/05/30 11:34:07 ==> MatchType *math/big.Int, *math/big.Int\n[Go+ CI/Test]   | 2023/05/30 11:34:07 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:07 Call 0 0 // func() *math/big.Int\n[Go+ CI/Test]   | 2023/05/30 11:34:07 ==> MatchFuncCall func() *math/big.Int\n[Go+ CI/Test]   | 2023/05/30 11:34:07 Val bigint github.com/goplus/gop/builtin/ng.Bigint\n[Go+ CI/Test]   | 2023/05/30 11:34:07 Call 0 0 // TypeType{typ: github.com/goplus/gop/builtin/ng.Bigint}\n[Go+ CI/Test]   | 2023/05/30 11:34:07 ==> MatchFuncCall TypeType{typ: github.com/goplus/gop/builtin/ng.Bigint}\n[Go+ CI/Test]   | 2023/05/30 11:34:07 ==> MatchFuncCall overloadFuncType{funcs: [func github.com/goplus/gop/builtin/ng.Bigint_Cast__0(x int) github.com/goplus/gop/builtin/ng.Bigint func github.com/goplus/gop/builtin/ng.Bigint_Cast__1(x github.com/goplus/gop/builtin/ng.UntypedBigint) github.com/goplus/gop/builtin/ng.Bigint func github.com/goplus/gop/builtin/ng.Bigint_Cast__2(x int64) github.com/goplus/gop/builtin/ng.Bigint func github.com/goplus/gop/builtin/ng.Bigint_Cast__3(x uint64) github.com/goplus/gop/builtin/ng.Bigint func github.com/goplus/gop/builtin/ng.Bigint_Cast__4(x uint) github.com/goplus/gop/builtin/ng.Bigint func github.com/goplus/gop/builtin/ng.Bigint_Cast__5(x *math/big.Int) github.com/goplus/gop/builtin/ng.Bigint func github.com/goplus/gop/builtin/ng.Bigint_Cast__6(x *math/big.Rat) github.com/goplus/gop/builtin/ng.Bigint func github.com/goplus/gop/builtin/ng.Bigint_Cast__7() github.com/goplus/gop/builtin/ng.Bigint]}\n[Go+ CI/Test]   | 2023/05/30 11:34:07 ==> MatchFuncCall func(x int) github.com/goplus/gop/builtin/ng.Bigint\n[Go+ CI/Test]   | 2023/05/30 11:34:07 ==> MatchFuncCall func(x github.com/goplus/gop/builtin/ng.UntypedBigint) github.com/goplus/gop/builtin/ng.Bigint\n[Go+ CI/Test]   | 2023/05/30 11:34:07 ==> MatchFuncCall func(x int64) github.com/goplus/gop/builtin/ng.Bigint\n[Go+ CI/Test]   | 2023/05/30 11:34:07 ==> MatchFuncCall func(x uint64) github.com/goplus/gop/builtin/ng.Bigint\n[Go+ CI/Test]   | 2023/05/30 11:34:07 ==> MatchFuncCall func(x uint) github.com/goplus/gop/builtin/ng.Bigint\n[Go+ CI/Test]   | 2023/05/30 11:34:07 ==> MatchFuncCall func(x *math/big.Int) github.com/goplus/gop/builtin/ng.Bigint\n[Go+ CI/Test]   | 2023/05/30 11:34:07 ==> MatchFuncCall func(x *math/big.Rat) github.com/goplus/gop/builtin/ng.Bigint\n[Go+ CI/Test]   | 2023/05/30 11:34:07 ==> MatchFuncCall func() github.com/goplus/gop/builtin/ng.Bigint\n[Go+ CI/Test]   | 2023/05/30 11:34:07 Call 2 0 // overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:07 ==> MatchFuncCall overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:07 ==> MatchFuncCall func(a ...interface{}) (n int, err error)\n[Go+ CI/Test]   | 2023/05/30 11:34:07 ==> MatchType github.com/goplus/gop/builtin/ng.Bigint, interface{}\n[Go+ CI/Test]   | 2023/05/30 11:34:07 ==> MatchType github.com/goplus/gop/builtin/ng.Bigint, interface{}\n[Go+ CI/Test]   | 2023/05/30 11:34:07 End // Block\n[Go+ CI/Test]   | 2023/05/30 11:34:07 Block\n[Go+ CI/Test]   | 2023/05/30 11:34:07 ==> Load var github.com/goplus/gop/builtin/ng.Bigint [x]\n[Go+ CI/Test]   | 2023/05/30 11:34:07 NewVar [x]\n[Go+ CI/Test]   | 2023/05/30 11:34:07 Val &{0 INT 1} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:07 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:34:07 ==> MatchType untyped int (1), github.com/goplus/gop/builtin/ng.Bigint\n[Go+ CI/Test]   | 2023/05/30 11:34:07 ==> MatchFuncCall overloadFuncType{funcs: [func github.com/goplus/gop/builtin/ng.Bigint_Init__0(x int) github.com/goplus/gop/builtin/ng.Bigint func github.com/goplus/gop/builtin/ng.Bigint_Init__1(x github.com/goplus/gop/builtin/ng.UntypedBigint) github.com/goplus/gop/builtin/ng.Bigint func github.com/goplus/gop/builtin/ng.Bigint_Init__2(x *math/big.Int) github.com/goplus/gop/builtin/ng.Bigint]}\n[Go+ CI/Test]   | 2023/05/30 11:34:07 ==> MatchFuncCall func(x int) github.com/goplus/gop/builtin/ng.Bigint\n[Go+ CI/Test]   | 2023/05/30 11:34:07 ==> MatchType untyped int (1), int\n[Go+ CI/Test]   | 2023/05/30 11:34:07 ==> AssignableConv untyped int github.com/goplus/gop/builtin/ng.Bigint true\n[Go+ CI/Test]   | 2023/05/30 11:34:07 Val printf overloadFuncType{funcs: [func fmt.Printf(format string, a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:07 Val &{0 STRING \"%4d\\n\"} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:07 Val x github.com/goplus/gop/builtin/ng.Bigint\n[Go+ CI/Test]   | 2023/05/30 11:34:07 Call 2 0 // overloadFuncType{funcs: [func fmt.Printf(format string, a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:07 ==> MatchFuncCall overloadFuncType{funcs: [func fmt.Printf(format string, a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:07 ==> MatchFuncCall func(format string, a ...interface{}) (n int, err error)\n[Go+ CI/Test]   | 2023/05/30 11:34:07 ==> MatchType untyped string (\"%4d\\n\"), string\n[Go+ CI/Test]   | 2023/05/30 11:34:07 ==> MatchType github.com/goplus/gop/builtin/ng.Bigint, interface{}\n[Go+ CI/Test]   | 2023/05/30 11:34:07 End // Block\n[Go+ CI/Test]   | 2023/05/30 11:34:07 Block\n[Go+ CI/Test]   | 2023/05/30 11:34:07 ==> Load var github.com/goplus/gop/builtin/ng.Bigint [x]\n[Go+ CI/Test]   | 2023/05/30 11:34:07 NewVar [x]\n[Go+ CI/Test]   | 2023/05/30 11:34:07 Val &{0 INT 1} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:07 Val &{0 INT 65} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:07 BinaryOp <<\n[Go+ CI/Test]   | 2023/05/30 11:34:07 ==> MatchFuncCall func(a TemplateParamType{name: T}, n TemplateParamType{name: N}) TemplateParamType{name: T}\n[Go+ CI/Test]   | 2023/05/30 11:34:07 ==> MatchType untyped int (1), unboundFuncParam{typ: <nil>}\n[Go+ CI/Test]   | 2023/05/30 11:34:07 ==> MatchType untyped int (65), unboundFuncParam{typ: <nil>}\n[Go+ CI/Test]   | 2023/05/30 11:34:07 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:34:07 ==> MatchType untyped int (36893488147419103232), github.com/goplus/gop/builtin/ng.Bigint\n[Go+ CI/Test]   | 2023/05/30 11:34:07 ==> MatchFuncCall overloadFuncType{funcs: [func github.com/goplus/gop/builtin/ng.Bigint_Init__0(x int) github.com/goplus/gop/builtin/ng.Bigint func github.com/goplus/gop/builtin/ng.Bigint_Init__1(x github.com/goplus/gop/builtin/ng.UntypedBigint) github.com/goplus/gop/builtin/ng.Bigint func github.com/goplus/gop/builtin/ng.Bigint_Init__2(x *math/big.Int) github.com/goplus/gop/builtin/ng.Bigint]}\n[Go+ CI/Test]   | 2023/05/30 11:34:07 ==> MatchFuncCall func(x int) github.com/goplus/gop/builtin/ng.Bigint\n[Go+ CI/Test]   | 2023/05/30 11:34:07 ==> MatchType untyped int (36893488147419103232), int\n[Go+ CI/Test]   | 2023/05/30 11:34:07 ==> AssignableConv untyped int (36893488147419103232): value is out of int range\n[Go+ CI/Test]   | 2023/05/30 11:34:07 ==> MatchFuncCall func(x github.com/goplus/gop/builtin/ng.UntypedBigint) github.com/goplus/gop/builtin/ng.Bigint\n[Go+ CI/Test]   | 2023/05/30 11:34:07 ==> MatchType untyped int (36893488147419103232), github.com/goplus/gop/builtin/ng.UntypedBigint\n[Go+ CI/Test]   | 2023/05/30 11:34:07 NewClosure func() *math/big.Int\n[Go+ CI/Test]   | 2023/05/30 11:34:07 DefineVarStart [v _]\n[Go+ CI/Test]   | 2023/05/30 11:34:07 Val new instructionType{instr: gox.newInstr}\n[Go+ CI/Test]   | 2023/05/30 11:34:07 Typ math/big.Int\n[Go+ CI/Test]   | 2023/05/30 11:34:07 Call 1 0 // instructionType{instr: gox.newInstr}\n[Go+ CI/Test]   | 2023/05/30 11:34:07 ==> MatchFuncCall instructionType{instr: gox.newInstr}\n[Go+ CI/Test]   | 2023/05/30 11:34:07 Member SetString 0 // *math/big.Int\n[Go+ CI/Test]   | 2023/05/30 11:34:07 Val 36893488147419103232 string\n[Go+ CI/Test]   | 2023/05/30 11:34:07 Val 10 int\n[Go+ CI/Test]   | 2023/05/30 11:34:07 Call 2 0 // func(s string, base int) (*math/big.Int, bool)\n[Go+ CI/Test]   | 2023/05/30 11:34:07 ==> MatchFuncCall func(s string, base int) (*math/big.Int, bool)\n[Go+ CI/Test]   | 2023/05/30 11:34:07 ==> MatchType untyped string (\"36893488147419103232\"), string\n[Go+ CI/Test]   | 2023/05/30 11:34:07 ==> MatchType untyped int (10), int\n[Go+ CI/Test]   | 2023/05/30 11:34:07 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:34:07 Val v *math/big.Int\n[Go+ CI/Test]   | 2023/05/30 11:34:07 Return 1\n[Go+ CI/Test]   | 2023/05/30 11:34:07 ==> MatchType *math/big.Int, *math/big.Int\n[Go+ CI/Test]   | 2023/05/30 11:34:07 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:07 Call 0 0 // func() *math/big.Int\n[Go+ CI/Test]   | 2023/05/30 11:34:07 ==> MatchFuncCall func() *math/big.Int\n[Go+ CI/Test]   | 2023/05/30 11:34:07 ==> AssignableConv untyped int github.com/goplus/gop/builtin/ng.Bigint true\n[Go+ CI/Test]   | 2023/05/30 11:34:07 ==> Load var <nil> [y]\n[Go+ CI/Test]   | 2023/05/30 11:34:07 NewVar [y]\n[Go+ CI/Test]   | 2023/05/30 11:34:07 Val x github.com/goplus/gop/builtin/ng.Bigint\n[Go+ CI/Test]   | 2023/05/30 11:34:07 Val &{0 INT 2} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:07 BinaryOp >>\n[Go+ CI/Test]   | 2023/05/30 11:34:07 ==> MatchFuncCall func(n uint) github.com/goplus/gop/builtin/ng.Bigint\n[Go+ CI/Test]   | 2023/05/30 11:34:07 ==> MatchType github.com/goplus/gop/builtin/ng.Bigint, github.com/goplus/gop/builtin/ng.Bigint\n[Go+ CI/Test]   | 2023/05/30 11:34:07 ==> MatchType untyped int (2), uint\n[Go+ CI/Test]   | 2023/05/30 11:34:07 Val &{0 INT 1} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:07 BinaryOp -\n[Go+ CI/Test]   | 2023/05/30 11:34:07 ==> MatchFuncCall func(b github.com/goplus/gop/builtin/ng.Bigint) github.com/goplus/gop/builtin/ng.Bigint\n[Go+ CI/Test]   | 2023/05/30 11:34:07 ==> MatchType github.com/goplus/gop/builtin/ng.Bigint, github.com/goplus/gop/builtin/ng.Bigint\n[Go+ CI/Test]   | 2023/05/30 11:34:07 ==> MatchType untyped int (1), github.com/goplus/gop/builtin/ng.Bigint\n[Go+ CI/Test]   | 2023/05/30 11:34:07 ==> MatchFuncCall overloadFuncType{funcs: [func github.com/goplus/gop/builtin/ng.Bigint_Init__0(x int) github.com/goplus/gop/builtin/ng.Bigint func github.com/goplus/gop/builtin/ng.Bigint_Init__1(x github.com/goplus/gop/builtin/ng.UntypedBigint) github.com/goplus/gop/builtin/ng.Bigint func github.com/goplus/gop/builtin/ng.Bigint_Init__2(x *math/big.Int) github.com/goplus/gop/builtin/ng.Bigint]}\n[Go+ CI/Test]   | 2023/05/30 11:34:07 ==> MatchFuncCall func(x int) github.com/goplus/gop/builtin/ng.Bigint\n[Go+ CI/Test]   | 2023/05/30 11:34:07 ==> MatchType untyped int (1), int\n[Go+ CI/Test]   | 2023/05/30 11:34:07 ==> AssignableConv untyped int github.com/goplus/gop/builtin/ng.Bigint true\n[Go+ CI/Test]   | 2023/05/30 11:34:07 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:34:07 DefineVarStart [v1 ok1]\n[Go+ CI/Test]   | 2023/05/30 11:34:07 Val int64 int64\n[Go+ CI/Test]   | 2023/05/30 11:34:07 Val x github.com/goplus/gop/builtin/ng.Bigint\n[Go+ CI/Test]   | 2023/05/30 11:34:07 Call 1 2 // TypeType{typ: int64}\n[Go+ CI/Test]   | 2023/05/30 11:34:07 ==> MatchFuncCall TypeType{typ: int64}\n[Go+ CI/Test]   | 2023/05/30 11:34:07 Val &{x github.com/goplus/gop/builtin/ng.Bigint <nil> x} *internal.Elem\n[Go+ CI/Test]   | 2023/05/30 11:34:07 Member Gop_Rcast__1 0 // github.com/goplus/gop/builtin/ng.Bigint\n[Go+ CI/Test]   | 2023/05/30 11:34:07 Call 0 2 // func() (int64, bool)\n[Go+ CI/Test]   | 2023/05/30 11:34:07 ==> MatchFuncCall func() (int64, bool)\n[Go+ CI/Test]   | 2023/05/30 11:34:07 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:34:07 DefineVarStart [v2 ok2]\n[Go+ CI/Test]   | 2023/05/30 11:34:07 Val int64 int64\n[Go+ CI/Test]   | 2023/05/30 11:34:07 Val y github.com/goplus/gop/builtin/ng.Bigint\n[Go+ CI/Test]   | 2023/05/30 11:34:07 Call 1 2 // TypeType{typ: int64}\n[Go+ CI/Test]   | 2023/05/30 11:34:07 ==> MatchFuncCall TypeType{typ: int64}\n[Go+ CI/Test]   | 2023/05/30 11:34:07 Val &{y github.com/goplus/gop/builtin/ng.Bigint <nil> y} *internal.Elem\n[Go+ CI/Test]   | 2023/05/30 11:34:07 Member Gop_Rcast__1 0 // github.com/goplus/gop/builtin/ng.Bigint\n[Go+ CI/Test]   | 2023/05/30 11:34:07 Call 0 2 // func() (int64, bool)\n[Go+ CI/Test]   | 2023/05/30 11:34:07 ==> MatchFuncCall func() (int64, bool)\n[Go+ CI/Test]   | 2023/05/30 11:34:07 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:34:07 Val println overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:07 Val v1 int64\n[Go+ CI/Test]   | 2023/05/30 11:34:07 Val ok1 bool\n[Go+ CI/Test]   | 2023/05/30 11:34:07 Call 2 0 // overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:07 ==> MatchFuncCall overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:07 ==> MatchFuncCall func(a ...interface{}) (n int, err error)\n[Go+ CI/Test]   | 2023/05/30 11:34:07 ==> MatchType int64, interface{}\n[Go+ CI/Test]   | 2023/05/30 11:34:07 ==> MatchType bool, interface{}\n[Go+ CI/Test]   | 2023/05/30 11:34:07 Val println overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:07 Val v2 int64\n[Go+ CI/Test]   | 2023/05/30 11:34:07 Val ok2 bool\n[Go+ CI/Test]   | 2023/05/30 11:34:07 Call 2 0 // overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:07 ==> MatchFuncCall overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:07 ==> MatchFuncCall func(a ...interface{}) (n int, err error)\n[Go+ CI/Test]   | 2023/05/30 11:34:07 ==> MatchType int64, interface{}\n[Go+ CI/Test]   | 2023/05/30 11:34:07 ==> MatchType bool, interface{}\n[Go+ CI/Test]   | 2023/05/30 11:34:07 End // Block\n[Go+ CI/Test]   | 2023/05/30 11:34:07 Block\n[Go+ CI/Test]   | 2023/05/30 11:34:07 ==> Load var github.com/goplus/gop/builtin/ng.Bigint [x]\n[Go+ CI/Test]   | 2023/05/30 11:34:07 NewVar [x]\n[Go+ CI/Test]   | 2023/05/30 11:34:07 Val &{0 INT 0} *ast.BasicLit\n[Go+ CI/Test]   | 2023/05/30 11:34:07 EndInit 1\n[Go+ CI/Test]   | 2023/05/30 11:34:07 ==> MatchType untyped int (0), github.com/goplus/gop/builtin/ng.Bigint\n[Go+ CI/Test]   | 2023/05/30 11:34:07 ==> MatchFuncCall overloadFuncType{funcs: [func github.com/goplus/gop/builtin/ng.Bigint_Init__0(x int) github.com/goplus/gop/builtin/ng.Bigint func github.com/goplus/gop/builtin/ng.Bigint_Init__1(x github.com/goplus/gop/builtin/ng.UntypedBigint) github.com/goplus/gop/builtin/ng.Bigint func github.com/goplus/gop/builtin/ng.Bigint_Init__2(x *math/big.Int) github.com/goplus/gop/builtin/ng.Bigint]}\n[Go+ CI/Test]   | 2023/05/30 11:34:07 ==> MatchFuncCall func(x int) github.com/goplus/gop/builtin/ng.Bigint\n[Go+ CI/Test]   | 2023/05/30 11:34:07 ==> MatchType untyped int (0), int\n[Go+ CI/Test]   | 2023/05/30 11:34:07 ==> AssignableConv untyped int github.com/goplus/gop/builtin/ng.Bigint true\n[Go+ CI/Test]   | 2023/05/30 11:34:07 VarRef x github.com/goplus/gop/builtin/ng.Bigint\n[Go+ CI/Test]   | 2023/05/30 11:34:07 IncDec --\n[Go+ CI/Test]   | 2023/05/30 11:34:07 ==> MatchFuncCall func()\n[Go+ CI/Test]   | 2023/05/30 11:34:07 ==> MatchType refType{typ: github.com/goplus/gop/builtin/ng.Bigint}, github.com/goplus/gop/builtin/ng.Bigint\n[Go+ CI/Test]   | 2023/05/30 11:34:07 Val println overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:07 Val x github.com/goplus/gop/builtin/ng.Bigint\n[Go+ CI/Test]   | 2023/05/30 11:34:07 Call 1 0 // overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:07 ==> MatchFuncCall overloadFuncType{funcs: [func fmt.Println(a ...interface{}) (n int, err error)]}\n[Go+ CI/Test]   | 2023/05/30 11:34:07 ==> MatchFuncCall func(a ...interface{}) (n int, err error)\n[Go+ CI/Test]   | 2023/05/30 11:34:07 ==> MatchType github.com/goplus/gop/builtin/ng.Bigint, interface{}\n[Go+ CI/Test]   | 2023/05/30 11:34:07 End // Block\n[Go+ CI/Test]   | 2023/05/30 11:34:07 End // Func\n[Go+ CI/Test]   | 2023/05/30 11:34:07 ==> ASTFile \n[Go+ CI/Test]   | --- PASS: TestBigint_run (1.20s)\n[Go+ CI/Test]   | PASS\n[Go+ CI/Test]   | coverage: 95.1% of statements\n[Go+ CI/Test]   | ok  \tgithub.com/goplus/gop/cl\t38.154s\tcoverage: 95.1% of statements\n[Go+ CI/Test]   | ?   \tgithub.com/goplus/gop/cl/internal/dummy\t[no test files]\n[Go+ CI/Test]   | === RUN   TestReverseMap\n[Go+ CI/Test]   | --- PASS: TestReverseMap (0.00s)\n[Go+ CI/Test]   | PASS\n[Go+ CI/Test]   | coverage: 100.0% of statements\n[Go+ CI/Test]   | ok  \tgithub.com/goplus/gop/cl/internal/gop-in-go/foo\t0.223s\tcoverage: 100.0% of statements\n[Go+ CI/Test]   | ?   \tgithub.com/goplus/gop/cl/internal/libc\t[no test files]\n[Go+ CI/Test]   | ?   \tgithub.com/goplus/gop/cl/internal/spx\t[no test files]\n[Go+ CI/Test]   | ?   \tgithub.com/goplus/gop/cl/internal/spx2\t[no test files]\n[Go+ CI/Test]   | ?   \tgithub.com/goplus/gop/cmd/gop\t[no test files]\n[Go+ CI/Test]   | ?   \tgithub.com/goplus/gop/cmd/gopdecl\t[no test files]\n[Go+ CI/Test]   | ?   \tgithub.com/goplus/gop/cmd/gopfmt\t[no test files]\n[Go+ CI/Test]   | ?   \tgithub.com/goplus/gop/cmd/goptestgo\t[no test files]\n[Go+ CI/Test]   | ?   \tgithub.com/goplus/gop/cmd/internal/base\t[no test files]\n[Go+ CI/Test]   | ?   \tgithub.com/goplus/gop/cmd/internal/bug\t[no test files]\n[Go+ CI/Test]   | ?   \tgithub.com/goplus/gop/cmd/internal/build\t[no test files]\n[Go+ CI/Test]   | ?   \tgithub.com/goplus/gop/cmd/internal/c2go\t[no test files]\n[Go+ CI/Test]   | ?   \tgithub.com/goplus/gop/cmd/internal/clean\t[no test files]\n[Go+ CI/Test]   | ?   \tgithub.com/goplus/gop/cmd/internal/deps\t[no test files]\n[Go+ CI/Test]   | ?   \tgithub.com/goplus/gop/cmd/internal/env\t[no test files]\n[Go+ CI/Test]   | ?   \tgithub.com/goplus/gop/cmd/internal/gengo\t[no test files]\n[Go+ CI/Test]   | ?   \tgithub.com/goplus/gop/cmd/internal/gopfmt\t[no test files]\n[Go+ CI/Test]   | ?   \tgithub.com/goplus/gop/cmd/internal/gopget\t[no test files]\n[Go+ CI/Test]   | ?   \tgithub.com/goplus/gop/cmd/internal/help\t[no test files]\n[Go+ CI/Test]   | ?   \tgithub.com/goplus/gop/cmd/internal/install\t[no test files]\n[Go+ CI/Test]   | ?   \tgithub.com/goplus/gop/cmd/internal/list\t[no test files]\n[Go+ CI/Test]   | ?   \tgithub.com/goplus/gop/cmd/internal/mod\t[no test files]\n[Go+ CI/Test]   | ?   \tgithub.com/goplus/gop/cmd/internal/run\t[no test files]\n[Go+ CI/Test]   | ?   \tgithub.com/goplus/gop/cmd/internal/test\t[no test files]\n[Go+ CI/Test]   | ?   \tgithub.com/goplus/gop/cmd/internal/version\t[no test files]\n[Go+ CI/Test]   | === RUN   TestBasic\n[Go+ CI/Test]   | --- PASS: TestBasic (0.00s)\n[Go+ CI/Test]   | === RUN   TestFindGoModFileInGoModDir\n[Go+ CI/Test]   | === RUN   TestFindGoModFileInGoModDir/the_src/_is_a_valid_mod_dir\n[Go+ CI/Test]   | === RUN   TestFindGoModFileInGoModDir/the_src/_is_not_a_valid_mod_dir\n[Go+ CI/Test]   | --- PASS: TestFindGoModFileInGoModDir (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestFindGoModFileInGoModDir/the_src/_is_a_valid_mod_dir (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestFindGoModFileInGoModDir/the_src/_is_not_a_valid_mod_dir (0.00s)\n[Go+ CI/Test]   | === RUN   TestFindGoModFileInGopRoot\n[Go+ CI/Test]   | === RUN   TestFindGoModFileInGopRoot/without_gop_root\n[Go+ CI/Test]   | === RUN   TestFindGoModFileInGopRoot/set_GOPROOT_to_a_valid_goproot_path\n[Go+ CI/Test]   | === RUN   TestFindGoModFileInGopRoot/set_GOPROOT_to_an_invalid_goproot_path\n[Go+ CI/Test]   | 2023/05/30 11:33:29 \n[Go+ CI/Test]   | GOPROOT (/tmp/TestFindGoModFileInGopRoot_set_GOPROOT_to_an_invalid_goproot_path1297771517/001/invalid_goproot) is not valid\n[Go+ CI/Test]   | === RUN   TestFindGoModFileInGopRoot/set_defaultGopRoot_to_a_valid_goproot_path\n[Go+ CI/Test]   | === RUN   TestFindGoModFileInGopRoot/set_defaultGopRoot_to_an_invalid_path\n[Go+ CI/Test]   | === RUN   TestFindGoModFileInGopRoot/use_$HOME/gop_or_$HOME/goplus\n[Go+ CI/Test]   | === RUN   TestFindGoModFileInGopRoot/check_if_parent_dir_of_the_executable_is_valid_gop_root\n[Go+ CI/Test]   | === RUN   TestFindGoModFileInGopRoot/test_gop_root_priority\n[Go+ CI/Test]   | === RUN   TestFindGoModFileInGopRoot/test_gop_root_priority/without_gop_root\n[Go+ CI/Test]   | === RUN   TestFindGoModFileInGopRoot/test_gop_root_priority/set_HOME_but_hasn't_$HOME/gop/_and_$HOME/goplus/\n[Go+ CI/Test]   | === RUN   TestFindGoModFileInGopRoot/test_gop_root_priority/set_HOME,_and_has_valid_$HOME/goplus/\n[Go+ CI/Test]   | === RUN   TestFindGoModFileInGopRoot/test_gop_root_priority/set_HOME,_and_has_valid_$HOME/gop/\n[Go+ CI/Test]   | === RUN   TestFindGoModFileInGopRoot/test_gop_root_priority/set_defaultGopRoot_to_an_invalid_gop_root_dir\n[Go+ CI/Test]   | === RUN   TestFindGoModFileInGopRoot/test_gop_root_priority/set_defaultGopRoot_to_a_valid_gop_root_dir\n[Go+ CI/Test]   | === RUN   TestFindGoModFileInGopRoot/test_gop_root_priority/the_executable's_parent_dir_is_a_valid_gop_root_dir\n[Go+ CI/Test]   | === RUN   TestFindGoModFileInGopRoot/test_gop_root_priority/set_GOPROOT_to_an_invalid_gop_root_dir\n[Go+ CI/Test]   | 2023/05/30 11:33:29 \n[Go+ CI/Test]   | GOPROOT (/tmp/TestFindGoModFileInGopRoot_test_gop_root_priority4155930693/001/new_gop_root3) is not valid\n[Go+ CI/Test]   | === RUN   TestFindGoModFileInGopRoot/test_gop_root_priority/set_GOPROOT_to_a_valid_gop_root_dir\n[Go+ CI/Test]   | --- PASS: TestFindGoModFileInGopRoot (0.01s)\n[Go+ CI/Test]   |     --- PASS: TestFindGoModFileInGopRoot/without_gop_root (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestFindGoModFileInGopRoot/set_GOPROOT_to_a_valid_goproot_path (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestFindGoModFileInGopRoot/set_GOPROOT_to_an_invalid_goproot_path (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestFindGoModFileInGopRoot/set_defaultGopRoot_to_a_valid_goproot_path (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestFindGoModFileInGopRoot/set_defaultGopRoot_to_an_invalid_path (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestFindGoModFileInGopRoot/use_$HOME/gop_or_$HOME/goplus (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestFindGoModFileInGopRoot/check_if_parent_dir_of_the_executable_is_valid_gop_root (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestFindGoModFileInGopRoot/test_gop_root_priority (0.00s)\n[Go+ CI/Test]   |         --- PASS: TestFindGoModFileInGopRoot/test_gop_root_priority/without_gop_root (0.00s)\n[Go+ CI/Test]   |         --- PASS: TestFindGoModFileInGopRoot/test_gop_root_priority/set_HOME_but_hasn't_$HOME/gop/_and_$HOME/goplus/ (0.00s)\n[Go+ CI/Test]   |         --- PASS: TestFindGoModFileInGopRoot/test_gop_root_priority/set_HOME,_and_has_valid_$HOME/goplus/ (0.00s)\n[Go+ CI/Test]   |         --- PASS: TestFindGoModFileInGopRoot/test_gop_root_priority/set_HOME,_and_has_valid_$HOME/gop/ (0.00s)\n[Go+ CI/Test]   |         --- PASS: TestFindGoModFileInGopRoot/test_gop_root_priority/set_defaultGopRoot_to_an_invalid_gop_root_dir (0.00s)\n[Go+ CI/Test]   |         --- PASS: TestFindGoModFileInGopRoot/test_gop_root_priority/set_defaultGopRoot_to_a_valid_gop_root_dir (0.00s)\n[Go+ CI/Test]   |         --- PASS: TestFindGoModFileInGopRoot/test_gop_root_priority/the_executable's_parent_dir_is_a_valid_gop_root_dir (0.00s)\n[Go+ CI/Test]   |         --- PASS: TestFindGoModFileInGopRoot/test_gop_root_priority/set_GOPROOT_to_an_invalid_gop_root_dir (0.00s)\n[Go+ CI/Test]   |         --- PASS: TestFindGoModFileInGopRoot/test_gop_root_priority/set_GOPROOT_to_a_valid_gop_root_dir (0.00s)\n[Go+ CI/Test]   | === RUN   TestVersion\n[Go+ CI/Test]   | --- PASS: TestVersion (0.00s)\n[Go+ CI/Test]   | === RUN   TestBuild\n[Go+ CI/Test]   | --- PASS: TestBuild (0.00s)\n[Go+ CI/Test]   | PASS\n[Go+ CI/Test]   | coverage: 95.5% of statements\n[Go+ CI/Test]   | ok  \tgithub.com/goplus/gop/env\t0.088s\tcoverage: 95.5% of statements\n[Go+ CI/Test]   | ?   \tgithub.com/goplus/gop/format\t[no test files]\n[Go+ CI/Test]   | === RUN   TestErrTuple\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: println}\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: INT, Value: 1}\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: INT, Value: 2}\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1878: ast.CallExpr{Fun: println, Ellipsis: false, isCmd: true}\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:3252: expected ';', found 'EOF'\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: println}\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: INT, Value: 2}\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: INT, Value: 1}\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1642: expected ')', found ','\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1644: ast.ParenExpr{X: &{12 INT 1}}\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1865: missing ',' in argument list\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1689: expected operand, found ')'\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1865: missing ',' in argument list\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1878: ast.CallExpr{Fun: println, Ellipsis: false, isCmd: true}\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:3252: expected ';', found 'EOF'\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: test}\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: int}\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: int}\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: INT, Value: 100}\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: INT, Value: 100}\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:2666: expected ';', found 'EOF'\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1551: expected '}', found 'EOF'\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:3527: expected ';', found 'EOF'\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:3564: ast.FuncDecl{Name: test, ...}\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:3584: expected declaration\n[Go+ CI/Test]   | --- PASS: TestErrTuple (0.00s)\n[Go+ CI/Test]   | === RUN   TestErrOperand\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: a}\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1689: expected operand, found 'EOF'\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:3252: expected ';', found 'EOF'\n[Go+ CI/Test]   | --- PASS: TestErrOperand (0.00s)\n[Go+ CI/Test]   | === RUN   TestErrMissingComma\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: a}\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: b}\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: int}\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1069: missing ',' in parameter list\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:3564: ast.FuncDecl{Name: a, ...}\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:3584: expected declaration\n[Go+ CI/Test]   | --- PASS: TestErrMissingComma (0.00s)\n[Go+ CI/Test]   | === RUN   TestErrLambda\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: test}\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: v}\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: string}\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: f}\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: int}\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:3564: ast.FuncDecl{Name: test, ...}\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: test}\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: STRING, Value: \"hello\"}\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: println}\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: STRING, Value: \"lambda\"}\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: x}\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1878: ast.CallExpr{Fun: println, Ellipsis: false, isCmd: true}\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:3105: expected 'IDENT', found \"hello\"\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:2443: ast.LambdaExpr{Lhs: [<nil>]}\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1878: ast.CallExpr{Fun: test, Ellipsis: false, isCmd: true}\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: test}\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: v}\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: string}\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: f}\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: int}\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:3564: ast.FuncDecl{Name: test, ...}\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: test}\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: STRING, Value: \"hello\"}\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: STRING, Value: \"x\"}\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: println}\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: STRING, Value: \"lambda\"}\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: x}\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1878: ast.CallExpr{Fun: println, Ellipsis: false, isCmd: true}\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:3105: expected 'IDENT', found \"x\"\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:2443: ast.LambdaExpr{Lhs: [<nil>]}\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1878: ast.CallExpr{Fun: test, Ellipsis: false, isCmd: true}\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: test}\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: v}\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: string}\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: f}\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: int}\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:3564: ast.FuncDecl{Name: test, ...}\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: test}\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: STRING, Value: \"hello\"}\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: STRING, Value: \"x\"}\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1644: ast.ParenExpr{X: &{54 STRING \"x\"}}\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: println}\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: STRING, Value: \"lambda\"}\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: x}\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1878: ast.CallExpr{Fun: println, Ellipsis: false, isCmd: true}\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:3105: expected 'IDENT', found \"x\"\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:2443: ast.LambdaExpr{Lhs: [<nil>]}\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1878: ast.CallExpr{Fun: test, Ellipsis: false, isCmd: true}\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: test}\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: v}\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: string}\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: f}\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: int}\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: int}\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:3564: ast.FuncDecl{Name: test, ...}\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: test}\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: STRING, Value: \"hello\"}\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: x}\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: STRING, Value: \"y\"}\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: println}\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: STRING, Value: \"lambda\"}\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: x}\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: y}\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1878: ast.CallExpr{Fun: println, Ellipsis: false, isCmd: true}\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:3105: expected 'IDENT', found \"y\"\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:2443: ast.LambdaExpr{Lhs: [x <nil>]}\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1878: ast.CallExpr{Fun: test, Ellipsis: false, isCmd: true}\n[Go+ CI/Test]   | --- PASS: TestErrLambda (0.00s)\n[Go+ CI/Test]   | === RUN   TestErrTooMany\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: f}\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:658: expected 'IDENT', found '}'\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: _}\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1256: expected '(', found g\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:744: expected type, found ')'\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1069: missing ',' in parameter list\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1219: expected ')', found 'var'\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1069: missing ',' in parameter list\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1219: expected ')', found newline\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1069: missing ',' before newline in parameter list\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1256: expected '(', found h\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:744: expected type, found ')'\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1069: missing ',' in parameter list\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1219: expected ')', found 'var'\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1069: missing ',' in parameter list\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1219: expected ')', found newline\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1069: missing ',' before newline in parameter list\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1256: expected '(', found h\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:744: expected type, found ')'\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1069: missing ',' in parameter list\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1219: expected ')', found 'var'\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1069: missing ',' in parameter list\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1219: expected ')', found newline\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1069: missing ',' before newline in parameter list\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1256: expected '(', found h\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:744: expected type, found ')'\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1069: missing ',' in parameter list\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1219: expected ')', found 'var'\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1069: missing ',' in parameter list\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1219: expected ')', found newline\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1069: missing ',' before newline in parameter list\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1256: expected '(', found h\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:744: expected type, found ')'\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1069: missing ',' in parameter list\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1219: expected ')', found 'var'\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1069: missing ',' in parameter list\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1219: expected ')', found newline\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1069: missing ',' before newline in parameter list\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1256: expected '(', found h\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:744: expected type, found ')'\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1069: missing ',' in parameter list\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1219: expected ')', found 'var'\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1069: missing ',' in parameter list\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1219: expected ')', found newline\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1069: missing ',' before newline in parameter list\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1256: expected '(', found h\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:744: expected type, found ')'\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1069: missing ',' in parameter list\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1219: expected ')', found 'var'\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1069: missing ',' in parameter list\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1219: expected ')', found newline\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1069: missing ',' before newline in parameter list\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1256: expected '(', found h\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:744: expected type, found ')'\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1069: missing ',' in parameter list\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1219: expected ')', found 'var'\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1069: missing ',' in parameter list\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1219: expected ')', found newline\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1069: missing ',' before newline in parameter list\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1256: expected '(', found h\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:744: expected type, found ')'\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1069: missing ',' in parameter list\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1219: expected ')', found 'var'\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1069: missing ',' in parameter list\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1219: expected ')', found newline\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1069: missing ',' before newline in parameter list\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1256: expected '(', found h\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:744: expected type, found ')'\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1069: missing ',' in parameter list\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1219: expected ')', found 'var'\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1069: missing ',' in parameter list\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1219: expected ')', found newline\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1069: missing ',' before newline in parameter list\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1261: expected ')', found 'EOF'\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1069: missing ',' in parameter list\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1261: expected ')', found 'EOF'\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1069: missing ',' in parameter list\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1261: expected ')', found 'EOF'\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1069: missing ',' in parameter list\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1261: expected ')', found 'EOF'\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1069: missing ',' in parameter list\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1261: expected ')', found 'EOF'\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1069: missing ',' in parameter list\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1261: expected ')', found 'EOF'\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1069: missing ',' in parameter list\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1261: expected ')', found 'EOF'\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1069: missing ',' in parameter list\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1261: expected ')', found 'EOF'\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1069: missing ',' in parameter list\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1261: expected ')', found 'EOF'\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1069: missing ',' in parameter list\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1261: expected ')', found 'EOF'\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:3252: expected ';', found 'EOF'\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1551: expected '}', found 'EOF'\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:3527: expected ';', found 'EOF'\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:3564: ast.FuncDecl{Name: f, ...}\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:3584: expected declaration\n[Go+ CI/Test]   | --- PASS: TestErrTooMany (0.00s)\n[Go+ CI/Test]   | === RUN   TestStd\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: bar}\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: x}\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: INT, Value: 0}\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: t}\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: false}\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: t}\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: x}\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: INT, Value: 3}\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: x}\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: INT, Value: 5}\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: println}\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: STRING, Value: \"x:\"}\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: x}\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1878: ast.CallExpr{Fun: println, Ellipsis: false, isCmd: false}\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: x}\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: INT, Value: 0}\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: s}\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: STRING, Value: \"Hello\"}\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: s}\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: x}\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: INT, Value: 7}\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: STRING, Value: \"world\"}\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: STRING, Value: \"hi\"}\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: x}\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: INT, Value: 5}\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: STRING, Value: \"xsw\"}\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: x}\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: INT, Value: 3}\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: println}\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: STRING, Value: \"x:\"}\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: x}\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1878: ast.CallExpr{Fun: println, Ellipsis: false, isCmd: false}\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: c}\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: make}\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: bool}\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: INT, Value: 100}\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1878: ast.CallExpr{Fun: make, Ellipsis: false, isCmd: false}\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: c}\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: true}\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: v}\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: c}\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: panic}\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: STRING, Value: \"error\"}\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1878: ast.CallExpr{Fun: panic, Ellipsis: false, isCmd: false}\n[Go+ CI/Test]   | --- PASS: TestStd (0.00s)\n[Go+ CI/Test]   | === RUN   TestReadSource\n[Go+ CI/Test]   | --- PASS: TestReadSource (0.00s)\n[Go+ CI/Test]   | === RUN   TestParseFiles\n[Go+ CI/Test]   | --- PASS: TestParseFiles (0.00s)\n[Go+ CI/Test]   | === RUN   TestIparseFileInvalidSrc\n[Go+ CI/Test]   | --- PASS: TestIparseFileInvalidSrc (0.00s)\n[Go+ CI/Test]   | === RUN   TestIparseFileNoFset\n[Go+ CI/Test]   | --- PASS: TestIparseFileNoFset (0.00s)\n[Go+ CI/Test]   | === RUN   TestParseDir\n[Go+ CI/Test]   | --- PASS: TestParseDir (0.00s)\n[Go+ CI/Test]   | === RUN   TestParseGo\n[Go+ CI/Test]   |    17:  1: File (\n[Go+ CI/Test]   |    17:  1: . Declaration (\n[Go+ CI/Test]   |    17:  1: . . GenDecl(type) (\n[Go+ CI/Test]   |    17:  1: . . . \"type\"\n[Go+ CI/Test]   |    17:  6: . . . TypeSpec (\n[Go+ CI/Test]   |    17:  6: . . . . IDENT T\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: T}\n[Go+ CI/Test]   |    17:  8: . . . . Type (\n[Go+ CI/Test]   |    17:  8: . . . . . StructType (\n[Go+ CI/Test]   |    17:  8: . . . . . . \"struct\"\n[Go+ CI/Test]   |    17: 15: . . . . . . \"{\"\n[Go+ CI/Test]   |    18:  2: . . . . . . FieldDecl (\n[Go+ CI/Test]   |    18:  2: . . . . . . . \"*\"\n[Go+ CI/Test]   |    18:  3: . . . . . . . QualifiedIdent (\n[Go+ CI/Test]   |    18:  3: . . . . . . . . TypeName (\n[Go+ CI/Test]   |    18:  3: . . . . . . . . . IDENT T\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: T}\n[Go+ CI/Test]   |    18:  4: . . . . . . . . )\n[Go+ CI/Test]   |    18:  4: . . . . . . . )\n[Go+ CI/Test]   |    18:  4: . . . . . . . \";\"\n[Go+ CI/Test]   |    19:  2: . . . . . . )\n[Go+ CI/Test]   |    19:  2: . . . . . . FieldDecl (\n[Go+ CI/Test]   |    19:  2: . . . . . . . IDENT A\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: A}\n[Go+ CI/Test]   |    19:  4: . . . . . . . Type (\n[Go+ CI/Test]   |    19:  4: . . . . . . . . TypeName (\n[Go+ CI/Test]   |    19:  4: . . . . . . . . . IDENT int\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: int}\n[Go+ CI/Test]   |    19:  8: . . . . . . . . )\n[Go+ CI/Test]   |    19:  8: . . . . . . . )\n[Go+ CI/Test]   |    19:  8: . . . . . . . STRING `json:\"a\"`\n[Go+ CI/Test]   |    19: 18: . . . . . . . \";\"\n[Go+ CI/Test]   |    20:  1: . . . . . . )\n[Go+ CI/Test]   |    20:  1: . . . . . . \"}\"\n[Go+ CI/Test]   |    20:  2: . . . . . )\n[Go+ CI/Test]   |    20:  2: . . . . )\n[Go+ CI/Test]   |    20:  2: . . . . \";\"\n[Go+ CI/Test]   |    22:  1: . . . )\n[Go+ CI/Test]   |    22:  1: . . )\n[Go+ CI/Test]   |    22:  1: . )\n[Go+ CI/Test]   |    22:  1: . Declaration (\n[Go+ CI/Test]   |    22:  1: . . FunctionDecl (\n[Go+ CI/Test]   |    22:  1: . . . \"func\"\n[Go+ CI/Test]   |    22:  6: . . . IDENT bar\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: bar}\n[Go+ CI/Test]   |    22:  9: . . . Signature (\n[Go+ CI/Test]   |    22:  9: . . . . Parameters (\n[Go+ CI/Test]   |    22:  9: . . . . . \"(\"\n[Go+ CI/Test]   |    22: 10: . . . . . ParameterList (\n[Go+ CI/Test]   |    22: 10: . . . . . . ParamDeclOrNil (\n[Go+ CI/Test]   |    22: 10: . . . . . . . IDENT v\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: v}\n[Go+ CI/Test]   |    22: 12: . . . . . . . Type (\n[Go+ CI/Test]   |    22: 12: . . . . . . . . ChanType (\n[Go+ CI/Test]   |    22: 12: . . . . . . . . . \"chan\"\n[Go+ CI/Test]   |    22: 17: . . . . . . . . . Type (\n[Go+ CI/Test]   |    22: 17: . . . . . . . . . . TypeName (\n[Go+ CI/Test]   |    22: 17: . . . . . . . . . . . IDENT bool\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: bool}\n[Go+ CI/Test]   |    22: 21: . . . . . . . . . . )\n[Go+ CI/Test]   |    22: 21: . . . . . . . . . )\n[Go+ CI/Test]   |    22: 21: . . . . . . . . )\n[Go+ CI/Test]   |    22: 21: . . . . . . . )\n[Go+ CI/Test]   |    22: 21: . . . . . . )\n[Go+ CI/Test]   |    22: 21: . . . . . )\n[Go+ CI/Test]   |    22: 21: . . . . . \")\"\n[Go+ CI/Test]   |    22: 23: . . . . )\n[Go+ CI/Test]   |    22: 23: . . . . Result (\n[Go+ CI/Test]   |    22: 23: . . . . . Parameters (\n[Go+ CI/Test]   |    22: 23: . . . . . . \"(\"\n[Go+ CI/Test]   |    22: 24: . . . . . . ParameterList (\n[Go+ CI/Test]   |    22: 24: . . . . . . . ParamDeclOrNil (\n[Go+ CI/Test]   |    22: 24: . . . . . . . . IDENT int\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: int}\n[Go+ CI/Test]   |    22: 27: . . . . . . . )\n[Go+ CI/Test]   |    22: 27: . . . . . . . \",\"\n[Go+ CI/Test]   |    22: 29: . . . . . . . ParamDeclOrNil (\n[Go+ CI/Test]   |    22: 29: . . . . . . . . Type (\n[Go+ CI/Test]   |    22: 29: . . . . . . . . . ChanType (\n[Go+ CI/Test]   |    22: 29: . . . . . . . . . . \"<-\"\n[Go+ CI/Test]   |    22: 31: . . . . . . . . . . \"chan\"\n[Go+ CI/Test]   |    22: 36: . . . . . . . . . . Type (\n[Go+ CI/Test]   |    22: 36: . . . . . . . . . . . TypeName (\n[Go+ CI/Test]   |    22: 36: . . . . . . . . . . . . IDENT error\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: error}\n[Go+ CI/Test]   |    22: 41: . . . . . . . . . . . )\n[Go+ CI/Test]   |    22: 41: . . . . . . . . . . )\n[Go+ CI/Test]   |    22: 41: . . . . . . . . . )\n[Go+ CI/Test]   |    22: 41: . . . . . . . . )\n[Go+ CI/Test]   |    22: 41: . . . . . . . )\n[Go+ CI/Test]   |    22: 41: . . . . . . )\n[Go+ CI/Test]   |    22: 41: . . . . . . \")\"\n[Go+ CI/Test]   |    22: 43: . . . . . )\n[Go+ CI/Test]   |    22: 43: . . . . )\n[Go+ CI/Test]   |    22: 43: . . . )\n[Go+ CI/Test]   |    22: 43: . . . Body (\n[Go+ CI/Test]   |    22: 43: . . . . \"{\"\n[Go+ CI/Test]   |    23:  2: . . . . StatementList (\n[Go+ CI/Test]   |    23:  2: . . . . . Statement (\n[Go+ CI/Test]   |    23:  2: . . . . . . SimpleStmt (\n[Go+ CI/Test]   |    23:  2: . . . . . . . ExpressionList (\n[Go+ CI/Test]   |    23:  2: . . . . . . . . Expression (\n[Go+ CI/Test]   |    23:  2: . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    23:  2: . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    23:  2: . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    23:  2: . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |    23:  2: . . . . . . . . . . . . . IDENT v\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: v}\n[Go+ CI/Test]   |    23:  4: . . . . . . . . . . . . )\n[Go+ CI/Test]   |    23:  4: . . . . . . . . . . . . \"<-\"\n[Go+ CI/Test]   |    23:  4: . . . . . . . . . . . )\n[Go+ CI/Test]   |    23:  4: . . . . . . . . . . )\n[Go+ CI/Test]   |    23:  4: . . . . . . . . . )\n[Go+ CI/Test]   |    23:  4: . . . . . . . . )\n[Go+ CI/Test]   |    23:  4: . . . . . . . )\n[Go+ CI/Test]   |    23:  7: . . . . . . . Expression (\n[Go+ CI/Test]   |    23:  7: . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    23:  7: . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    23:  7: . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    23:  7: . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |    23:  7: . . . . . . . . . . . . IDENT true\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: true}\n[Go+ CI/Test]   |    23: 11: . . . . . . . . . . . )\n[Go+ CI/Test]   |    23: 11: . . . . . . . . . . )\n[Go+ CI/Test]   |    23: 11: . . . . . . . . . )\n[Go+ CI/Test]   |    23: 11: . . . . . . . . )\n[Go+ CI/Test]   |    23: 11: . . . . . . . )\n[Go+ CI/Test]   |    23: 11: . . . . . . )\n[Go+ CI/Test]   |    23: 11: . . . . . . \";\"\n[Go+ CI/Test]   |    24:  2: . . . . . )\n[Go+ CI/Test]   |    24:  2: . . . . . Statement (\n[Go+ CI/Test]   |    24:  2: . . . . . . SimpleStmt (\n[Go+ CI/Test]   |    24:  2: . . . . . . . ExpressionList (\n[Go+ CI/Test]   |    24:  2: . . . . . . . . Expression (\n[Go+ CI/Test]   |    24:  2: . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    24:  2: . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    24:  2: . . . . . . . . . . . \"<-\"\n[Go+ CI/Test]   |    24:  4: . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    24:  4: . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    24:  4: . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |    24:  4: . . . . . . . . . . . . . . IDENT v\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: v}\n[Go+ CI/Test]   |    24:  5: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    24:  5: . . . . . . . . . . . . )\n[Go+ CI/Test]   |    24:  5: . . . . . . . . . . . )\n[Go+ CI/Test]   |    24:  5: . . . . . . . . . . )\n[Go+ CI/Test]   |    24:  5: . . . . . . . . . )\n[Go+ CI/Test]   |    24:  5: . . . . . . . . )\n[Go+ CI/Test]   |    24:  5: . . . . . . . )\n[Go+ CI/Test]   |    24:  5: . . . . . . )\n[Go+ CI/Test]   |    24:  5: . . . . . . \";\"\n[Go+ CI/Test]   |    25:  2: . . . . . )\n[Go+ CI/Test]   |    25:  2: . . . . . Statement (\n[Go+ CI/Test]   |    25:  2: . . . . . . ReturnStmt (\n[Go+ CI/Test]   |    25:  2: . . . . . . . \"return\"\n[Go+ CI/Test]   |    25:  9: . . . . . . . ExpressionList (\n[Go+ CI/Test]   |    25:  9: . . . . . . . . Expression (\n[Go+ CI/Test]   |    25:  9: . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    25:  9: . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    25:  9: . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    25:  9: . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: INT, Value: 0}\n[Go+ CI/Test]   |    25:  9: . . . . . . . . . . . . . INT 0\n[Go+ CI/Test]   |    25: 10: . . . . . . . . . . . . )\n[Go+ CI/Test]   |    25: 10: . . . . . . . . . . . )\n[Go+ CI/Test]   |    25: 10: . . . . . . . . . . )\n[Go+ CI/Test]   |    25: 10: . . . . . . . . . )\n[Go+ CI/Test]   |    25: 10: . . . . . . . . )\n[Go+ CI/Test]   |    25: 10: . . . . . . . . \",\"\n[Go+ CI/Test]   |    25: 12: . . . . . . . . Expression (\n[Go+ CI/Test]   |    25: 12: . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    25: 12: . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    25: 12: . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    25: 12: . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |    25: 12: . . . . . . . . . . . . . \"(\"\n[Go+ CI/Test]   |    25: 13: . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |    25: 13: . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    25: 13: . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    25: 13: . . . . . . . . . . . . . . . . \"<-\"\n[Go+ CI/Test]   |    25: 15: . . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    25: 15: . . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    25: 15: . . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |    25: 15: . . . . . . . . . . . . . . . . . . . ChanType (\n[Go+ CI/Test]   |    25: 15: . . . . . . . . . . . . . . . . . . . . \"chan\"\n[Go+ CI/Test]   |    25: 20: . . . . . . . . . . . . . . . . . . . . Type (\n[Go+ CI/Test]   |    25: 20: . . . . . . . . . . . . . . . . . . . . . TypeName (\n[Go+ CI/Test]   |    25: 20: . . . . . . . . . . . . . . . . . . . . . . IDENT error\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: error}\n[Go+ CI/Test]   |    25: 25: . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    25: 25: . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    25: 25: . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    25: 25: . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    25: 25: . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    25: 25: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    25: 25: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    25: 25: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    25: 25: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    25: 25: . . . . . . . . . . . . . \")\"\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1644: ast.ParenExpr{X: &{756 756 2 error}}\n[Go+ CI/Test]   |    25: 26: . . . . . . . . . . . . )\n[Go+ CI/Test]   |    25: 26: . . . . . . . . . . . . CallOrConversion (\n[Go+ CI/Test]   |    25: 26: . . . . . . . . . . . . . \"(\"\n[Go+ CI/Test]   |    25: 27: . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |    25: 27: . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    25: 27: . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    25: 27: . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    25: 27: . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |    25: 27: . . . . . . . . . . . . . . . . . . IDENT nil\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: nil}\n[Go+ CI/Test]   |    25: 30: . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    25: 30: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    25: 30: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    25: 30: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    25: 30: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    25: 30: . . . . . . . . . . . . . \")\"\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1878: ast.CallExpr{Fun: &{755 0xc000316630 768}, Ellipsis: false, isCmd: false}\n[Go+ CI/Test]   |    25: 31: . . . . . . . . . . . . )\n[Go+ CI/Test]   |    25: 31: . . . . . . . . . . . )\n[Go+ CI/Test]   |    25: 31: . . . . . . . . . . )\n[Go+ CI/Test]   |    25: 31: . . . . . . . . . )\n[Go+ CI/Test]   |    25: 31: . . . . . . . . )\n[Go+ CI/Test]   |    25: 31: . . . . . . . )\n[Go+ CI/Test]   |    25: 31: . . . . . . . \";\"\n[Go+ CI/Test]   |    26:  1: . . . . . . )\n[Go+ CI/Test]   |    26:  1: . . . . . )\n[Go+ CI/Test]   |    26:  1: . . . . )\n[Go+ CI/Test]   |    26:  1: . . . . \"}\"\n[Go+ CI/Test]   |    26:  2: . . . )\n[Go+ CI/Test]   |    26:  2: . . . \";\"\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:3564: ast.FuncDecl{Name: bar, ...}\n[Go+ CI/Test]   |    28:  1: . . )\n[Go+ CI/Test]   |    28:  1: . )\n[Go+ CI/Test]   |    28:  1: . Declaration (\n[Go+ CI/Test]   |    28:  1: . . FunctionDecl (\n[Go+ CI/Test]   |    28:  1: . . . \"func\"\n[Go+ CI/Test]   |    28:  6: . . . IDENT foo\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: foo}\n[Go+ CI/Test]   |    28:  9: . . . Signature (\n[Go+ CI/Test]   |    28:  9: . . . . Parameters (\n[Go+ CI/Test]   |    28:  9: . . . . . \"(\"\n[Go+ CI/Test]   |    28: 10: . . . . . ParameterList (\n[Go+ CI/Test]   |    28: 10: . . . . . . ParamDeclOrNil (\n[Go+ CI/Test]   |    28: 10: . . . . . . . IDENT f\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: f}\n[Go+ CI/Test]   |    28: 12: . . . . . . . Type (\n[Go+ CI/Test]   |    28: 12: . . . . . . . . FuncType (\n[Go+ CI/Test]   |    28: 12: . . . . . . . . . \"func\"\n[Go+ CI/Test]   |    28: 16: . . . . . . . . . Signature (\n[Go+ CI/Test]   |    28: 16: . . . . . . . . . . Parameters (\n[Go+ CI/Test]   |    28: 16: . . . . . . . . . . . \"(\"\n[Go+ CI/Test]   |    28: 17: . . . . . . . . . . . ParameterList (\n[Go+ CI/Test]   |    28: 17: . . . . . . . . . . . . ParamDeclOrNil (\n[Go+ CI/Test]   |    28: 17: . . . . . . . . . . . . . Type (\n[Go+ CI/Test]   |    28: 17: . . . . . . . . . . . . . . ArrayType (\n[Go+ CI/Test]   |    28: 17: . . . . . . . . . . . . . . . \"[\"\n[Go+ CI/Test]   |    28: 18: . . . . . . . . . . . . . . . \"]\"\n[Go+ CI/Test]   |    28: 19: . . . . . . . . . . . . . . . Type (\n[Go+ CI/Test]   |    28: 19: . . . . . . . . . . . . . . . . TypeName (\n[Go+ CI/Test]   |    28: 19: . . . . . . . . . . . . . . . . . IDENT byte\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: byte}\n[Go+ CI/Test]   |    28: 23: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    28: 23: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:870: ast.ArrayType{Len: <nil>, Elt: byte}\n[Go+ CI/Test]   |    28: 23: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    28: 23: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    28: 23: . . . . . . . . . . . . )\n[Go+ CI/Test]   |    28: 23: . . . . . . . . . . . . \",\"\n[Go+ CI/Test]   |    28: 25: . . . . . . . . . . . . ParamDeclOrNil (\n[Go+ CI/Test]   |    28: 25: . . . . . . . . . . . . . Type (\n[Go+ CI/Test]   |    28: 25: . . . . . . . . . . . . . . PointerType (\n[Go+ CI/Test]   |    28: 25: . . . . . . . . . . . . . . . \"*\"\n[Go+ CI/Test]   |    28: 26: . . . . . . . . . . . . . . . Type (\n[Go+ CI/Test]   |    28: 26: . . . . . . . . . . . . . . . . TypeName (\n[Go+ CI/Test]   |    28: 26: . . . . . . . . . . . . . . . . . IDENT string\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: string}\n[Go+ CI/Test]   |    28: 32: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    28: 32: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    28: 32: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    28: 32: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    28: 32: . . . . . . . . . . . . )\n[Go+ CI/Test]   |    28: 32: . . . . . . . . . . . . \",\"\n[Go+ CI/Test]   |    28: 34: . . . . . . . . . . . . ParamDeclOrNil (\n[Go+ CI/Test]   |    28: 34: . . . . . . . . . . . . . DotsType (\n[Go+ CI/Test]   |    28: 34: . . . . . . . . . . . . . . \"...\"\n[Go+ CI/Test]   |    28: 37: . . . . . . . . . . . . . . Type (\n[Go+ CI/Test]   |    28: 37: . . . . . . . . . . . . . . . TypeName (\n[Go+ CI/Test]   |    28: 37: . . . . . . . . . . . . . . . . IDENT T\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: T}\n[Go+ CI/Test]   |    28: 38: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    28: 38: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    28: 38: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    28: 38: . . . . . . . . . . . . )\n[Go+ CI/Test]   |    28: 38: . . . . . . . . . . . )\n[Go+ CI/Test]   |    28: 38: . . . . . . . . . . . \")\"\n[Go+ CI/Test]   |    28: 40: . . . . . . . . . . )\n[Go+ CI/Test]   |    28: 40: . . . . . . . . . . Result (\n[Go+ CI/Test]   |    28: 40: . . . . . . . . . . . ChanType (\n[Go+ CI/Test]   |    28: 40: . . . . . . . . . . . . \"chan\"\n[Go+ CI/Test]   |    28: 44: . . . . . . . . . . . . \"<-\"\n[Go+ CI/Test]   |    28: 47: . . . . . . . . . . . . Type (\n[Go+ CI/Test]   |    28: 47: . . . . . . . . . . . . . TypeName (\n[Go+ CI/Test]   |    28: 47: . . . . . . . . . . . . . . IDENT int\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: int}\n[Go+ CI/Test]   |    28: 50: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    28: 50: . . . . . . . . . . . . )\n[Go+ CI/Test]   |    28: 50: . . . . . . . . . . . )\n[Go+ CI/Test]   |    28: 50: . . . . . . . . . . )\n[Go+ CI/Test]   |    28: 50: . . . . . . . . . )\n[Go+ CI/Test]   |    28: 50: . . . . . . . . )\n[Go+ CI/Test]   |    28: 50: . . . . . . . )\n[Go+ CI/Test]   |    28: 50: . . . . . . )\n[Go+ CI/Test]   |    28: 50: . . . . . )\n[Go+ CI/Test]   |    28: 50: . . . . . \")\"\n[Go+ CI/Test]   |    28: 52: . . . . )\n[Go+ CI/Test]   |    28: 52: . . . . Result (\n[Go+ CI/Test]   |    28: 52: . . . . . Parameters (\n[Go+ CI/Test]   |    28: 52: . . . . . . \"(\"\n[Go+ CI/Test]   |    28: 53: . . . . . . ParameterList (\n[Go+ CI/Test]   |    28: 53: . . . . . . . ParamDeclOrNil (\n[Go+ CI/Test]   |    28: 53: . . . . . . . . IDENT v\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: v}\n[Go+ CI/Test]   |    28: 55: . . . . . . . . Type (\n[Go+ CI/Test]   |    28: 55: . . . . . . . . . TypeName (\n[Go+ CI/Test]   |    28: 55: . . . . . . . . . . IDENT int\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: int}\n[Go+ CI/Test]   |    28: 58: . . . . . . . . . )\n[Go+ CI/Test]   |    28: 58: . . . . . . . . )\n[Go+ CI/Test]   |    28: 58: . . . . . . . )\n[Go+ CI/Test]   |    28: 58: . . . . . . . \",\"\n[Go+ CI/Test]   |    28: 60: . . . . . . . ParamDeclOrNil (\n[Go+ CI/Test]   |    28: 60: . . . . . . . . IDENT err\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: err}\n[Go+ CI/Test]   |    28: 64: . . . . . . . . Type (\n[Go+ CI/Test]   |    28: 64: . . . . . . . . . TypeName (\n[Go+ CI/Test]   |    28: 64: . . . . . . . . . . IDENT error\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: error}\n[Go+ CI/Test]   |    28: 69: . . . . . . . . . )\n[Go+ CI/Test]   |    28: 69: . . . . . . . . )\n[Go+ CI/Test]   |    28: 69: . . . . . . . )\n[Go+ CI/Test]   |    28: 69: . . . . . . )\n[Go+ CI/Test]   |    28: 69: . . . . . . \")\"\n[Go+ CI/Test]   |    28: 71: . . . . . )\n[Go+ CI/Test]   |    28: 71: . . . . )\n[Go+ CI/Test]   |    28: 71: . . . )\n[Go+ CI/Test]   |    28: 71: . . . Body (\n[Go+ CI/Test]   |    28: 71: . . . . \"{\"\n[Go+ CI/Test]   |    29:  2: . . . . StatementList (\n[Go+ CI/Test]   |    29:  2: . . . . . Statement (\n[Go+ CI/Test]   |    29:  2: . . . . . . ReturnStmt (\n[Go+ CI/Test]   |    29:  2: . . . . . . . \"return\"\n[Go+ CI/Test]   |    29:  8: . . . . . . . \";\"\n[Go+ CI/Test]   |    30:  1: . . . . . . )\n[Go+ CI/Test]   |    30:  1: . . . . . )\n[Go+ CI/Test]   |    30:  1: . . . . )\n[Go+ CI/Test]   |    30:  1: . . . . \"}\"\n[Go+ CI/Test]   |    30:  2: . . . )\n[Go+ CI/Test]   |    30:  2: . . . \";\"\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:3564: ast.FuncDecl{Name: foo, ...}\n[Go+ CI/Test]   |    30:  3: . . )\n[Go+ CI/Test]   |    30:  3: . )\n[Go+ CI/Test]   |    30:  3: )\n[Go+ CI/Test]   | --- PASS: TestParseGo (0.00s)\n[Go+ CI/Test]   | === RUN   TestParseGoFiles\n[Go+ CI/Test]   |    17:  1: File (\n[Go+ CI/Test]   |    17:  1: . Declaration (\n[Go+ CI/Test]   |    17:  1: . . GenDecl(type) (\n[Go+ CI/Test]   |    17:  1: . . . \"type\"\n[Go+ CI/Test]   |    17:  6: . . . TypeSpec (\n[Go+ CI/Test]   |    17:  6: . . . . IDENT T\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: T}\n[Go+ CI/Test]   |    17:  8: . . . . Type (\n[Go+ CI/Test]   |    17:  8: . . . . . StructType (\n[Go+ CI/Test]   |    17:  8: . . . . . . \"struct\"\n[Go+ CI/Test]   |    17: 15: . . . . . . \"{\"\n[Go+ CI/Test]   |    18:  2: . . . . . . FieldDecl (\n[Go+ CI/Test]   |    18:  2: . . . . . . . \"*\"\n[Go+ CI/Test]   |    18:  3: . . . . . . . QualifiedIdent (\n[Go+ CI/Test]   |    18:  3: . . . . . . . . TypeName (\n[Go+ CI/Test]   |    18:  3: . . . . . . . . . IDENT T\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: T}\n[Go+ CI/Test]   |    18:  4: . . . . . . . . )\n[Go+ CI/Test]   |    18:  4: . . . . . . . )\n[Go+ CI/Test]   |    18:  4: . . . . . . . \";\"\n[Go+ CI/Test]   |    19:  2: . . . . . . )\n[Go+ CI/Test]   |    19:  2: . . . . . . FieldDecl (\n[Go+ CI/Test]   |    19:  2: . . . . . . . IDENT A\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: A}\n[Go+ CI/Test]   |    19:  4: . . . . . . . Type (\n[Go+ CI/Test]   |    19:  4: . . . . . . . . TypeName (\n[Go+ CI/Test]   |    19:  4: . . . . . . . . . IDENT int\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: int}\n[Go+ CI/Test]   |    19:  8: . . . . . . . . )\n[Go+ CI/Test]   |    19:  8: . . . . . . . )\n[Go+ CI/Test]   |    19:  8: . . . . . . . STRING `json:\"a\"`\n[Go+ CI/Test]   |    19: 18: . . . . . . . \";\"\n[Go+ CI/Test]   |    20:  1: . . . . . . )\n[Go+ CI/Test]   |    20:  1: . . . . . . \"}\"\n[Go+ CI/Test]   |    20:  2: . . . . . )\n[Go+ CI/Test]   |    20:  2: . . . . )\n[Go+ CI/Test]   |    20:  2: . . . . \";\"\n[Go+ CI/Test]   |    22:  1: . . . )\n[Go+ CI/Test]   |    22:  1: . . )\n[Go+ CI/Test]   |    22:  1: . )\n[Go+ CI/Test]   |    22:  1: . Declaration (\n[Go+ CI/Test]   |    22:  1: . . FunctionDecl (\n[Go+ CI/Test]   |    22:  1: . . . \"func\"\n[Go+ CI/Test]   |    22:  6: . . . IDENT bar\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: bar}\n[Go+ CI/Test]   |    22:  9: . . . Signature (\n[Go+ CI/Test]   |    22:  9: . . . . Parameters (\n[Go+ CI/Test]   |    22:  9: . . . . . \"(\"\n[Go+ CI/Test]   |    22: 10: . . . . . ParameterList (\n[Go+ CI/Test]   |    22: 10: . . . . . . ParamDeclOrNil (\n[Go+ CI/Test]   |    22: 10: . . . . . . . IDENT v\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: v}\n[Go+ CI/Test]   |    22: 12: . . . . . . . Type (\n[Go+ CI/Test]   |    22: 12: . . . . . . . . ChanType (\n[Go+ CI/Test]   |    22: 12: . . . . . . . . . \"chan\"\n[Go+ CI/Test]   |    22: 17: . . . . . . . . . Type (\n[Go+ CI/Test]   |    22: 17: . . . . . . . . . . TypeName (\n[Go+ CI/Test]   |    22: 17: . . . . . . . . . . . IDENT bool\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: bool}\n[Go+ CI/Test]   |    22: 21: . . . . . . . . . . )\n[Go+ CI/Test]   |    22: 21: . . . . . . . . . )\n[Go+ CI/Test]   |    22: 21: . . . . . . . . )\n[Go+ CI/Test]   |    22: 21: . . . . . . . )\n[Go+ CI/Test]   |    22: 21: . . . . . . )\n[Go+ CI/Test]   |    22: 21: . . . . . )\n[Go+ CI/Test]   |    22: 21: . . . . . \")\"\n[Go+ CI/Test]   |    22: 23: . . . . )\n[Go+ CI/Test]   |    22: 23: . . . . Result (\n[Go+ CI/Test]   |    22: 23: . . . . . Parameters (\n[Go+ CI/Test]   |    22: 23: . . . . . . \"(\"\n[Go+ CI/Test]   |    22: 24: . . . . . . ParameterList (\n[Go+ CI/Test]   |    22: 24: . . . . . . . ParamDeclOrNil (\n[Go+ CI/Test]   |    22: 24: . . . . . . . . IDENT int\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: int}\n[Go+ CI/Test]   |    22: 27: . . . . . . . )\n[Go+ CI/Test]   |    22: 27: . . . . . . . \",\"\n[Go+ CI/Test]   |    22: 29: . . . . . . . ParamDeclOrNil (\n[Go+ CI/Test]   |    22: 29: . . . . . . . . Type (\n[Go+ CI/Test]   |    22: 29: . . . . . . . . . ChanType (\n[Go+ CI/Test]   |    22: 29: . . . . . . . . . . \"<-\"\n[Go+ CI/Test]   |    22: 31: . . . . . . . . . . \"chan\"\n[Go+ CI/Test]   |    22: 36: . . . . . . . . . . Type (\n[Go+ CI/Test]   |    22: 36: . . . . . . . . . . . TypeName (\n[Go+ CI/Test]   |    22: 36: . . . . . . . . . . . . IDENT error\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: error}\n[Go+ CI/Test]   |    22: 41: . . . . . . . . . . . )\n[Go+ CI/Test]   |    22: 41: . . . . . . . . . . )\n[Go+ CI/Test]   |    22: 41: . . . . . . . . . )\n[Go+ CI/Test]   |    22: 41: . . . . . . . . )\n[Go+ CI/Test]   |    22: 41: . . . . . . . )\n[Go+ CI/Test]   |    22: 41: . . . . . . )\n[Go+ CI/Test]   |    22: 41: . . . . . . \")\"\n[Go+ CI/Test]   |    22: 43: . . . . . )\n[Go+ CI/Test]   |    22: 43: . . . . )\n[Go+ CI/Test]   |    22: 43: . . . )\n[Go+ CI/Test]   |    22: 43: . . . Body (\n[Go+ CI/Test]   |    22: 43: . . . . \"{\"\n[Go+ CI/Test]   |    23:  2: . . . . StatementList (\n[Go+ CI/Test]   |    23:  2: . . . . . Statement (\n[Go+ CI/Test]   |    23:  2: . . . . . . SimpleStmt (\n[Go+ CI/Test]   |    23:  2: . . . . . . . ExpressionList (\n[Go+ CI/Test]   |    23:  2: . . . . . . . . Expression (\n[Go+ CI/Test]   |    23:  2: . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    23:  2: . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    23:  2: . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    23:  2: . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |    23:  2: . . . . . . . . . . . . . IDENT v\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: v}\n[Go+ CI/Test]   |    23:  4: . . . . . . . . . . . . )\n[Go+ CI/Test]   |    23:  4: . . . . . . . . . . . . \"<-\"\n[Go+ CI/Test]   |    23:  4: . . . . . . . . . . . )\n[Go+ CI/Test]   |    23:  4: . . . . . . . . . . )\n[Go+ CI/Test]   |    23:  4: . . . . . . . . . )\n[Go+ CI/Test]   |    23:  4: . . . . . . . . )\n[Go+ CI/Test]   |    23:  4: . . . . . . . )\n[Go+ CI/Test]   |    23:  7: . . . . . . . Expression (\n[Go+ CI/Test]   |    23:  7: . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    23:  7: . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    23:  7: . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    23:  7: . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |    23:  7: . . . . . . . . . . . . IDENT true\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: true}\n[Go+ CI/Test]   |    23: 11: . . . . . . . . . . . )\n[Go+ CI/Test]   |    23: 11: . . . . . . . . . . )\n[Go+ CI/Test]   |    23: 11: . . . . . . . . . )\n[Go+ CI/Test]   |    23: 11: . . . . . . . . )\n[Go+ CI/Test]   |    23: 11: . . . . . . . )\n[Go+ CI/Test]   |    23: 11: . . . . . . )\n[Go+ CI/Test]   |    23: 11: . . . . . . \";\"\n[Go+ CI/Test]   |    24:  2: . . . . . )\n[Go+ CI/Test]   |    24:  2: . . . . . Statement (\n[Go+ CI/Test]   |    24:  2: . . . . . . SimpleStmt (\n[Go+ CI/Test]   |    24:  2: . . . . . . . ExpressionList (\n[Go+ CI/Test]   |    24:  2: . . . . . . . . Expression (\n[Go+ CI/Test]   |    24:  2: . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    24:  2: . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    24:  2: . . . . . . . . . . . \"<-\"\n[Go+ CI/Test]   |    24:  4: . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    24:  4: . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    24:  4: . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |    24:  4: . . . . . . . . . . . . . . IDENT v\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: v}\n[Go+ CI/Test]   |    24:  5: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    24:  5: . . . . . . . . . . . . )\n[Go+ CI/Test]   |    24:  5: . . . . . . . . . . . )\n[Go+ CI/Test]   |    24:  5: . . . . . . . . . . )\n[Go+ CI/Test]   |    24:  5: . . . . . . . . . )\n[Go+ CI/Test]   |    24:  5: . . . . . . . . )\n[Go+ CI/Test]   |    24:  5: . . . . . . . )\n[Go+ CI/Test]   |    24:  5: . . . . . . )\n[Go+ CI/Test]   |    24:  5: . . . . . . \";\"\n[Go+ CI/Test]   |    25:  2: . . . . . )\n[Go+ CI/Test]   |    25:  2: . . . . . Statement (\n[Go+ CI/Test]   |    25:  2: . . . . . . ReturnStmt (\n[Go+ CI/Test]   |    25:  2: . . . . . . . \"return\"\n[Go+ CI/Test]   |    25:  9: . . . . . . . ExpressionList (\n[Go+ CI/Test]   |    25:  9: . . . . . . . . Expression (\n[Go+ CI/Test]   |    25:  9: . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    25:  9: . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    25:  9: . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    25:  9: . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: INT, Value: 0}\n[Go+ CI/Test]   |    25:  9: . . . . . . . . . . . . . INT 0\n[Go+ CI/Test]   |    25: 10: . . . . . . . . . . . . )\n[Go+ CI/Test]   |    25: 10: . . . . . . . . . . . )\n[Go+ CI/Test]   |    25: 10: . . . . . . . . . . )\n[Go+ CI/Test]   |    25: 10: . . . . . . . . . )\n[Go+ CI/Test]   |    25: 10: . . . . . . . . )\n[Go+ CI/Test]   |    25: 10: . . . . . . . . \",\"\n[Go+ CI/Test]   |    25: 12: . . . . . . . . Expression (\n[Go+ CI/Test]   |    25: 12: . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    25: 12: . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    25: 12: . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    25: 12: . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |    25: 12: . . . . . . . . . . . . . \"(\"\n[Go+ CI/Test]   |    25: 13: . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |    25: 13: . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    25: 13: . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    25: 13: . . . . . . . . . . . . . . . . \"<-\"\n[Go+ CI/Test]   |    25: 15: . . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    25: 15: . . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    25: 15: . . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |    25: 15: . . . . . . . . . . . . . . . . . . . ChanType (\n[Go+ CI/Test]   |    25: 15: . . . . . . . . . . . . . . . . . . . . \"chan\"\n[Go+ CI/Test]   |    25: 20: . . . . . . . . . . . . . . . . . . . . Type (\n[Go+ CI/Test]   |    25: 20: . . . . . . . . . . . . . . . . . . . . . TypeName (\n[Go+ CI/Test]   |    25: 20: . . . . . . . . . . . . . . . . . . . . . . IDENT error\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: error}\n[Go+ CI/Test]   |    25: 25: . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    25: 25: . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    25: 25: . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    25: 25: . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    25: 25: . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    25: 25: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    25: 25: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    25: 25: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    25: 25: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    25: 25: . . . . . . . . . . . . . \")\"\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1644: ast.ParenExpr{X: &{756 756 2 error}}\n[Go+ CI/Test]   |    25: 26: . . . . . . . . . . . . )\n[Go+ CI/Test]   |    25: 26: . . . . . . . . . . . . CallOrConversion (\n[Go+ CI/Test]   |    25: 26: . . . . . . . . . . . . . \"(\"\n[Go+ CI/Test]   |    25: 27: . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |    25: 27: . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    25: 27: . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    25: 27: . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    25: 27: . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |    25: 27: . . . . . . . . . . . . . . . . . . IDENT nil\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: nil}\n[Go+ CI/Test]   |    25: 30: . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    25: 30: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    25: 30: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    25: 30: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    25: 30: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    25: 30: . . . . . . . . . . . . . \")\"\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1878: ast.CallExpr{Fun: &{755 0xc000316bd0 768}, Ellipsis: false, isCmd: false}\n[Go+ CI/Test]   |    25: 31: . . . . . . . . . . . . )\n[Go+ CI/Test]   |    25: 31: . . . . . . . . . . . )\n[Go+ CI/Test]   |    25: 31: . . . . . . . . . . )\n[Go+ CI/Test]   |    25: 31: . . . . . . . . . )\n[Go+ CI/Test]   |    25: 31: . . . . . . . . )\n[Go+ CI/Test]   |    25: 31: . . . . . . . )\n[Go+ CI/Test]   |    25: 31: . . . . . . . \";\"\n[Go+ CI/Test]   |    26:  1: . . . . . . )\n[Go+ CI/Test]   |    26:  1: . . . . . )\n[Go+ CI/Test]   |    26:  1: . . . . )\n[Go+ CI/Test]   |    26:  1: . . . . \"}\"\n[Go+ CI/Test]   |    26:  2: . . . )\n[Go+ CI/Test]   |    26:  2: . . . \";\"\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:3564: ast.FuncDecl{Name: bar, ...}\n[Go+ CI/Test]   |    28:  1: . . )\n[Go+ CI/Test]   |    28:  1: . )\n[Go+ CI/Test]   |    28:  1: . Declaration (\n[Go+ CI/Test]   |    28:  1: . . FunctionDecl (\n[Go+ CI/Test]   |    28:  1: . . . \"func\"\n[Go+ CI/Test]   |    28:  6: . . . IDENT foo\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: foo}\n[Go+ CI/Test]   |    28:  9: . . . Signature (\n[Go+ CI/Test]   |    28:  9: . . . . Parameters (\n[Go+ CI/Test]   |    28:  9: . . . . . \"(\"\n[Go+ CI/Test]   |    28: 10: . . . . . ParameterList (\n[Go+ CI/Test]   |    28: 10: . . . . . . ParamDeclOrNil (\n[Go+ CI/Test]   |    28: 10: . . . . . . . IDENT f\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: f}\n[Go+ CI/Test]   |    28: 12: . . . . . . . Type (\n[Go+ CI/Test]   |    28: 12: . . . . . . . . FuncType (\n[Go+ CI/Test]   |    28: 12: . . . . . . . . . \"func\"\n[Go+ CI/Test]   |    28: 16: . . . . . . . . . Signature (\n[Go+ CI/Test]   |    28: 16: . . . . . . . . . . Parameters (\n[Go+ CI/Test]   |    28: 16: . . . . . . . . . . . \"(\"\n[Go+ CI/Test]   |    28: 17: . . . . . . . . . . . ParameterList (\n[Go+ CI/Test]   |    28: 17: . . . . . . . . . . . . ParamDeclOrNil (\n[Go+ CI/Test]   |    28: 17: . . . . . . . . . . . . . Type (\n[Go+ CI/Test]   |    28: 17: . . . . . . . . . . . . . . ArrayType (\n[Go+ CI/Test]   |    28: 17: . . . . . . . . . . . . . . . \"[\"\n[Go+ CI/Test]   |    28: 18: . . . . . . . . . . . . . . . \"]\"\n[Go+ CI/Test]   |    28: 19: . . . . . . . . . . . . . . . Type (\n[Go+ CI/Test]   |    28: 19: . . . . . . . . . . . . . . . . TypeName (\n[Go+ CI/Test]   |    28: 19: . . . . . . . . . . . . . . . . . IDENT byte\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: byte}\n[Go+ CI/Test]   |    28: 23: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    28: 23: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:870: ast.ArrayType{Len: <nil>, Elt: byte}\n[Go+ CI/Test]   |    28: 23: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    28: 23: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    28: 23: . . . . . . . . . . . . )\n[Go+ CI/Test]   |    28: 23: . . . . . . . . . . . . \",\"\n[Go+ CI/Test]   |    28: 25: . . . . . . . . . . . . ParamDeclOrNil (\n[Go+ CI/Test]   |    28: 25: . . . . . . . . . . . . . Type (\n[Go+ CI/Test]   |    28: 25: . . . . . . . . . . . . . . PointerType (\n[Go+ CI/Test]   |    28: 25: . . . . . . . . . . . . . . . \"*\"\n[Go+ CI/Test]   |    28: 26: . . . . . . . . . . . . . . . Type (\n[Go+ CI/Test]   |    28: 26: . . . . . . . . . . . . . . . . TypeName (\n[Go+ CI/Test]   |    28: 26: . . . . . . . . . . . . . . . . . IDENT string\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: string}\n[Go+ CI/Test]   |    28: 32: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    28: 32: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    28: 32: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    28: 32: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    28: 32: . . . . . . . . . . . . )\n[Go+ CI/Test]   |    28: 32: . . . . . . . . . . . . \",\"\n[Go+ CI/Test]   |    28: 34: . . . . . . . . . . . . ParamDeclOrNil (\n[Go+ CI/Test]   |    28: 34: . . . . . . . . . . . . . DotsType (\n[Go+ CI/Test]   |    28: 34: . . . . . . . . . . . . . . \"...\"\n[Go+ CI/Test]   |    28: 37: . . . . . . . . . . . . . . Type (\n[Go+ CI/Test]   |    28: 37: . . . . . . . . . . . . . . . TypeName (\n[Go+ CI/Test]   |    28: 37: . . . . . . . . . . . . . . . . IDENT T\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: T}\n[Go+ CI/Test]   |    28: 38: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    28: 38: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    28: 38: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    28: 38: . . . . . . . . . . . . )\n[Go+ CI/Test]   |    28: 38: . . . . . . . . . . . )\n[Go+ CI/Test]   |    28: 38: . . . . . . . . . . . \")\"\n[Go+ CI/Test]   |    28: 40: . . . . . . . . . . )\n[Go+ CI/Test]   |    28: 40: . . . . . . . . . . Result (\n[Go+ CI/Test]   |    28: 40: . . . . . . . . . . . ChanType (\n[Go+ CI/Test]   |    28: 40: . . . . . . . . . . . . \"chan\"\n[Go+ CI/Test]   |    28: 44: . . . . . . . . . . . . \"<-\"\n[Go+ CI/Test]   |    28: 47: . . . . . . . . . . . . Type (\n[Go+ CI/Test]   |    28: 47: . . . . . . . . . . . . . TypeName (\n[Go+ CI/Test]   |    28: 47: . . . . . . . . . . . . . . IDENT int\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: int}\n[Go+ CI/Test]   |    28: 50: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    28: 50: . . . . . . . . . . . . )\n[Go+ CI/Test]   |    28: 50: . . . . . . . . . . . )\n[Go+ CI/Test]   |    28: 50: . . . . . . . . . . )\n[Go+ CI/Test]   |    28: 50: . . . . . . . . . )\n[Go+ CI/Test]   |    28: 50: . . . . . . . . )\n[Go+ CI/Test]   |    28: 50: . . . . . . . )\n[Go+ CI/Test]   |    28: 50: . . . . . . )\n[Go+ CI/Test]   |    28: 50: . . . . . )\n[Go+ CI/Test]   |    28: 50: . . . . . \")\"\n[Go+ CI/Test]   |    28: 52: . . . . )\n[Go+ CI/Test]   |    28: 52: . . . . Result (\n[Go+ CI/Test]   |    28: 52: . . . . . Parameters (\n[Go+ CI/Test]   |    28: 52: . . . . . . \"(\"\n[Go+ CI/Test]   |    28: 53: . . . . . . ParameterList (\n[Go+ CI/Test]   |    28: 53: . . . . . . . ParamDeclOrNil (\n[Go+ CI/Test]   |    28: 53: . . . . . . . . IDENT v\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: v}\n[Go+ CI/Test]   |    28: 55: . . . . . . . . Type (\n[Go+ CI/Test]   |    28: 55: . . . . . . . . . TypeName (\n[Go+ CI/Test]   |    28: 55: . . . . . . . . . . IDENT int\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: int}\n[Go+ CI/Test]   |    28: 58: . . . . . . . . . )\n[Go+ CI/Test]   |    28: 58: . . . . . . . . )\n[Go+ CI/Test]   |    28: 58: . . . . . . . )\n[Go+ CI/Test]   |    28: 58: . . . . . . . \",\"\n[Go+ CI/Test]   |    28: 60: . . . . . . . ParamDeclOrNil (\n[Go+ CI/Test]   |    28: 60: . . . . . . . . IDENT err\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: err}\n[Go+ CI/Test]   |    28: 64: . . . . . . . . Type (\n[Go+ CI/Test]   |    28: 64: . . . . . . . . . TypeName (\n[Go+ CI/Test]   |    28: 64: . . . . . . . . . . IDENT error\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: error}\n[Go+ CI/Test]   |    28: 69: . . . . . . . . . )\n[Go+ CI/Test]   |    28: 69: . . . . . . . . )\n[Go+ CI/Test]   |    28: 69: . . . . . . . )\n[Go+ CI/Test]   |    28: 69: . . . . . . )\n[Go+ CI/Test]   |    28: 69: . . . . . . \")\"\n[Go+ CI/Test]   |    28: 71: . . . . . )\n[Go+ CI/Test]   |    28: 71: . . . . )\n[Go+ CI/Test]   |    28: 71: . . . )\n[Go+ CI/Test]   |    28: 71: . . . Body (\n[Go+ CI/Test]   |    28: 71: . . . . \"{\"\n[Go+ CI/Test]   |    29:  2: . . . . StatementList (\n[Go+ CI/Test]   |    29:  2: . . . . . Statement (\n[Go+ CI/Test]   |    29:  2: . . . . . . ReturnStmt (\n[Go+ CI/Test]   |    29:  2: . . . . . . . \"return\"\n[Go+ CI/Test]   |    29:  8: . . . . . . . \";\"\n[Go+ CI/Test]   |    30:  1: . . . . . . )\n[Go+ CI/Test]   |    30:  1: . . . . . )\n[Go+ CI/Test]   |    30:  1: . . . . )\n[Go+ CI/Test]   |    30:  1: . . . . \"}\"\n[Go+ CI/Test]   |    30:  2: . . . )\n[Go+ CI/Test]   |    30:  2: . . . \";\"\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:3564: ast.FuncDecl{Name: foo, ...}\n[Go+ CI/Test]   |    30:  3: . . )\n[Go+ CI/Test]   |    30:  3: . )\n[Go+ CI/Test]   |    30:  3: )\n[Go+ CI/Test]   | --- PASS: TestParseGoFiles (0.00s)\n[Go+ CI/Test]   | === RUN   TestGopAutoGen\n[Go+ CI/Test]   | --- PASS: TestGopAutoGen (0.00s)\n[Go+ CI/Test]   | === RUN   TestGoFile\n[Go+ CI/Test]   | --- PASS: TestGoFile (0.00s)\n[Go+ CI/Test]   | === RUN   TestErrParse\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: foo}\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:3647: expected ';', found bar\n[Go+ CI/Test]   | --- PASS: TestErrParse (0.00s)\n[Go+ CI/Test]   | === RUN   TestFromTestdata\n[Go+ CI/Test]   | === RUN   TestFromTestdata/autoprop\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parserdir_test.go:90: Parsing /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/_testdata/autoprop\n[Go+ CI/Test]   |     1:  1: File (\n[Go+ CI/Test]   |     1:  1: . Declaration (\n[Go+ CI/Test]   |     1:  1: . . StatementList (\n[Go+ CI/Test]   |     1:  1: . . . Statement (\n[Go+ CI/Test]   |     1:  1: . . . . SimpleStmt (\n[Go+ CI/Test]   |     1:  1: . . . . . ExpressionList (\n[Go+ CI/Test]   |     1:  1: . . . . . . Expression (\n[Go+ CI/Test]   |     1:  1: . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     1:  1: . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     1:  1: . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     1:  1: . . . . . . . . . . Operand (\n[Go+ CI/Test]   |     1:  1: . . . . . . . . . . . IDENT L\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: L}\n[Go+ CI/Test]   |     1:  2: . . . . . . . . . . )\n[Go+ CI/Test]   |     1:  2: . . . . . . . . . )\n[Go+ CI/Test]   |     1:  2: . . . . . . . . )\n[Go+ CI/Test]   |     1:  2: . . . . . . . )\n[Go+ CI/Test]   |     1:  2: . . . . . . )\n[Go+ CI/Test]   |     1:  2: . . . . . )\n[Go+ CI/Test]   |     1:  2: . . . . . \":\"\n[Go+ CI/Test]   |     2:  2: . . . . . Statement (\n[Go+ CI/Test]   |     2:  2: . . . . . . BranchStmt (\n[Go+ CI/Test]   |     2:  2: . . . . . . . \"goto\"\n[Go+ CI/Test]   |     2:  2: . . . . . . . SimpleStmt (\n[Go+ CI/Test]   |     2:  2: . . . . . . . . ExpressionList (\n[Go+ CI/Test]   |     2:  2: . . . . . . . . . Expression (\n[Go+ CI/Test]   |     2:  2: . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     2:  2: . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     2:  2: . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     2:  2: . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: goto}\n[Go+ CI/Test]   |     2:  6: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     2:  6: . . . . . . . . . . . . . CallOrConversion (\n[Go+ CI/Test]   |     2:  6: . . . . . . . . . . . . . . \"(\"\n[Go+ CI/Test]   |     2:  7: . . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |     2:  7: . . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     2:  7: . . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     2:  7: . . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     2:  7: . . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: INT, Value: 1}\n[Go+ CI/Test]   |     2:  7: . . . . . . . . . . . . . . . . . . . INT 1\n[Go+ CI/Test]   |     2:  8: . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     2:  8: . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     2:  8: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     2:  8: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     2:  8: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     2:  8: . . . . . . . . . . . . . . \",\"\n[Go+ CI/Test]   |     2: 10: . . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |     2: 10: . . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     2: 10: . . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     2: 10: . . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     2: 10: . . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: INT, Value: 2}\n[Go+ CI/Test]   |     2: 10: . . . . . . . . . . . . . . . . . . . INT 2\n[Go+ CI/Test]   |     2: 11: . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 11: . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 11: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 11: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 11: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 11: . . . . . . . . . . . . . . \")\"\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1878: ast.CallExpr{Fun: goto, Ellipsis: false, isCmd: false}\n[Go+ CI/Test]   |     2: 13: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 13: . . . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 13: . . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 13: . . . . . . . . . . . \"+\"\n[Go+ CI/Test]   |     2: 15: . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     2: 15: . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     2: 15: . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     2: 15: . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |     2: 15: . . . . . . . . . . . . . . . IDENT break\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: break}\n[Go+ CI/Test]   |     2: 20: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 20: . . . . . . . . . . . . . . CallOrConversion (\n[Go+ CI/Test]   |     2: 20: . . . . . . . . . . . . . . . \"(\"\n[Go+ CI/Test]   |     2: 21: . . . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |     2: 21: . . . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     2: 21: . . . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     2: 21: . . . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     2: 21: . . . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: INT, Value: 3}\n[Go+ CI/Test]   |     2: 21: . . . . . . . . . . . . . . . . . . . . INT 3\n[Go+ CI/Test]   |     2: 22: . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 22: . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 22: . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 22: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 22: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 22: . . . . . . . . . . . . . . . \",\"\n[Go+ CI/Test]   |     2: 24: . . . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |     2: 24: . . . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     2: 24: . . . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     2: 24: . . . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     2: 24: . . . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: INT, Value: 4}\n[Go+ CI/Test]   |     2: 24: . . . . . . . . . . . . . . . . . . . . INT 4\n[Go+ CI/Test]   |     2: 25: . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 25: . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 25: . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 25: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 25: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 25: . . . . . . . . . . . . . . . \")\"\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1878: ast.CallExpr{Fun: break, Ellipsis: false, isCmd: false}\n[Go+ CI/Test]   |     2: 27: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 27: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 27: . . . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 27: . . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 27: . . . . . . . . . . . \"+\"\n[Go+ CI/Test]   |     2: 29: . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     2: 29: . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     2: 29: . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     2: 29: . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |     2: 29: . . . . . . . . . . . . . . . IDENT a\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: a}\n[Go+ CI/Test]   |     2: 30: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 30: . . . . . . . . . . . . . . \".\"\n[Go+ CI/Test]   |     2: 31: . . . . . . . . . . . . . . Selector (\n[Go+ CI/Test]   |     2: 31: . . . . . . . . . . . . . . . IDENT goto\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: goto}\n[Go+ CI/Test]   |     2: 35: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 35: . . . . . . . . . . . . . . CallOrConversion (\n[Go+ CI/Test]   |     2: 35: . . . . . . . . . . . . . . . \"(\"\n[Go+ CI/Test]   |     2: 36: . . . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |     2: 36: . . . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     2: 36: . . . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     2: 36: . . . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     2: 36: . . . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: INT, Value: 6}\n[Go+ CI/Test]   |     2: 36: . . . . . . . . . . . . . . . . . . . . INT 6\n[Go+ CI/Test]   |     2: 37: . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 37: . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 37: . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 37: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 37: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 37: . . . . . . . . . . . . . . . \")\"\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1878: ast.CallExpr{Fun: &{a goto}, Ellipsis: false, isCmd: false}\n[Go+ CI/Test]   |     2: 38: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 38: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 38: . . . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 38: . . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 38: . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 38: . . . . . . . . . )\n[Go+ CI/Test]   |     2: 38: . . . . . . . . )\n[Go+ CI/Test]   |     2: 38: . . . . . . . )\n[Go+ CI/Test]   |     2: 38: . . . . . . . \";\"\n[Go+ CI/Test]   |     3:  2: . . . . . . )\n[Go+ CI/Test]   |     3:  2: . . . . . )\n[Go+ CI/Test]   |     3:  2: . . . . )\n[Go+ CI/Test]   |     3:  2: . . . )\n[Go+ CI/Test]   |     3:  2: . . . Statement (\n[Go+ CI/Test]   |     3:  2: . . . . BranchStmt (\n[Go+ CI/Test]   |     3:  2: . . . . . \"goto\"\n[Go+ CI/Test]   |     3:  7: . . . . . IDENT L\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: L}\n[Go+ CI/Test]   |     3:  8: . . . . . \";\"\n[Go+ CI/Test]   |     3:  9: . . . . )\n[Go+ CI/Test]   |     3:  9: . . . )\n[Go+ CI/Test]   |     3:  9: . . )\n[Go+ CI/Test]   |     3:  9: . )\n[Go+ CI/Test]   |     3:  9: )\n[Go+ CI/Test]   | === RUN   TestFromTestdata/build\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parserdir_test.go:90: Parsing /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/_testdata/build\n[Go+ CI/Test]   |     1:  1: File (\n[Go+ CI/Test]   |     1:  1: . Declaration (\n[Go+ CI/Test]   |     1:  1: . . GenDecl(type) (\n[Go+ CI/Test]   |     1:  1: . . . \"type\"\n[Go+ CI/Test]   |     1:  6: . . . TypeSpec (\n[Go+ CI/Test]   |     1:  6: . . . . IDENT cstring\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: cstring}\n[Go+ CI/Test]   |     1: 14: . . . . Type (\n[Go+ CI/Test]   |     1: 14: . . . . . TypeName (\n[Go+ CI/Test]   |     1: 14: . . . . . . IDENT string\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: string}\n[Go+ CI/Test]   |     1: 20: . . . . . )\n[Go+ CI/Test]   |     1: 20: . . . . )\n[Go+ CI/Test]   |     1: 20: . . . . \";\"\n[Go+ CI/Test]   |     3:  1: . . . )\n[Go+ CI/Test]   |     3:  1: . . )\n[Go+ CI/Test]   |     3:  1: . )\n[Go+ CI/Test]   |     3:  1: . Declaration (\n[Go+ CI/Test]   |     3:  1: . . StatementList (\n[Go+ CI/Test]   |     3:  1: . . . Statement (\n[Go+ CI/Test]   |     3:  1: . . . . SimpleStmt (\n[Go+ CI/Test]   |     3:  1: . . . . . ExpressionList (\n[Go+ CI/Test]   |     3:  1: . . . . . . Expression (\n[Go+ CI/Test]   |     3:  1: . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     3:  1: . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     3:  1: . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     3:  1: . . . . . . . . . . Operand (\n[Go+ CI/Test]   |     3:  1: . . . . . . . . . . . IDENT title\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: title}\n[Go+ CI/Test]   |     3:  7: . . . . . . . . . . )\n[Go+ CI/Test]   |     3:  7: . . . . . . . . . )\n[Go+ CI/Test]   |     3:  7: . . . . . . . . )\n[Go+ CI/Test]   |     3:  7: . . . . . . . )\n[Go+ CI/Test]   |     3:  7: . . . . . . )\n[Go+ CI/Test]   |     3:  7: . . . . . )\n[Go+ CI/Test]   |     3:  7: . . . . . \":=\"\n[Go+ CI/Test]   |     3: 10: . . . . . ExpressionList (\n[Go+ CI/Test]   |     3: 10: . . . . . . Expression (\n[Go+ CI/Test]   |     3: 10: . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     3: 10: . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     3: 10: . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     3: 10: . . . . . . . . . . Operand (\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: STRING, Value: \"Hello,world!2020-05-27\"}\n[Go+ CI/Test]   |     3: 10: . . . . . . . . . . . STRING \"Hello,world!2020-05-27\"\n[Go+ CI/Test]   |     3: 34: . . . . . . . . . . )\n[Go+ CI/Test]   |     3: 34: . . . . . . . . . )\n[Go+ CI/Test]   |     3: 34: . . . . . . . . )\n[Go+ CI/Test]   |     3: 34: . . . . . . . )\n[Go+ CI/Test]   |     3: 34: . . . . . . )\n[Go+ CI/Test]   |     3: 34: . . . . . )\n[Go+ CI/Test]   |     3: 34: . . . . )\n[Go+ CI/Test]   |     3: 34: . . . . \";\"\n[Go+ CI/Test]   |     4:  1: . . . )\n[Go+ CI/Test]   |     4:  1: . . . Statement (\n[Go+ CI/Test]   |     4:  1: . . . . SimpleStmt (\n[Go+ CI/Test]   |     4:  1: . . . . . ExpressionList (\n[Go+ CI/Test]   |     4:  1: . . . . . . Expression (\n[Go+ CI/Test]   |     4:  1: . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     4:  1: . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     4:  1: . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     4:  1: . . . . . . . . . . Operand (\n[Go+ CI/Test]   |     4:  1: . . . . . . . . . . . IDENT s\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: s}\n[Go+ CI/Test]   |     4:  3: . . . . . . . . . . )\n[Go+ CI/Test]   |     4:  3: . . . . . . . . . )\n[Go+ CI/Test]   |     4:  3: . . . . . . . . )\n[Go+ CI/Test]   |     4:  3: . . . . . . . )\n[Go+ CI/Test]   |     4:  3: . . . . . . )\n[Go+ CI/Test]   |     4:  3: . . . . . )\n[Go+ CI/Test]   |     4:  3: . . . . . \":=\"\n[Go+ CI/Test]   |     4:  6: . . . . . ExpressionList (\n[Go+ CI/Test]   |     4:  6: . . . . . . Expression (\n[Go+ CI/Test]   |     4:  6: . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     4:  6: . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     4:  6: . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     4:  6: . . . . . . . . . . Operand (\n[Go+ CI/Test]   |     4:  6: . . . . . . . . . . . \"(\"\n[Go+ CI/Test]   |     4:  7: . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |     4:  7: . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     4:  7: . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     4:  7: . . . . . . . . . . . . . . \"*\"\n[Go+ CI/Test]   |     4:  8: . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     4:  8: . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     4:  8: . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |     4:  8: . . . . . . . . . . . . . . . . . IDENT cstring\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: cstring}\n[Go+ CI/Test]   |     4: 15: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     4: 15: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     4: 15: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     4: 15: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     4: 15: . . . . . . . . . . . . )\n[Go+ CI/Test]   |     4: 15: . . . . . . . . . . . )\n[Go+ CI/Test]   |     4: 15: . . . . . . . . . . . \")\"\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1644: ast.ParenExpr{X: &{62 cstring}}\n[Go+ CI/Test]   |     4: 16: . . . . . . . . . . )\n[Go+ CI/Test]   |     4: 16: . . . . . . . . . . CallOrConversion (\n[Go+ CI/Test]   |     4: 16: . . . . . . . . . . . \"(\"\n[Go+ CI/Test]   |     4: 17: . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |     4: 17: . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     4: 17: . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     4: 17: . . . . . . . . . . . . . . \"&\"\n[Go+ CI/Test]   |     4: 18: . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     4: 18: . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     4: 18: . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |     4: 18: . . . . . . . . . . . . . . . . . IDENT title\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: title}\n[Go+ CI/Test]   |     4: 23: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     4: 23: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     4: 23: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     4: 23: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     4: 23: . . . . . . . . . . . . )\n[Go+ CI/Test]   |     4: 23: . . . . . . . . . . . )\n[Go+ CI/Test]   |     4: 23: . . . . . . . . . . . \")\"\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1878: ast.CallExpr{Fun: &{61 0xc0002acf90 70}, Ellipsis: false, isCmd: false}\n[Go+ CI/Test]   |     4: 24: . . . . . . . . . . )\n[Go+ CI/Test]   |     4: 24: . . . . . . . . . )\n[Go+ CI/Test]   |     4: 24: . . . . . . . . )\n[Go+ CI/Test]   |     4: 24: . . . . . . . )\n[Go+ CI/Test]   |     4: 24: . . . . . . )\n[Go+ CI/Test]   |     4: 24: . . . . . )\n[Go+ CI/Test]   |     4: 24: . . . . )\n[Go+ CI/Test]   |     4: 24: . . . . \";\"\n[Go+ CI/Test]   |     5:  1: . . . )\n[Go+ CI/Test]   |     5:  1: . . . Statement (\n[Go+ CI/Test]   |     5:  1: . . . . SimpleStmt (\n[Go+ CI/Test]   |     5:  1: . . . . . ExpressionList (\n[Go+ CI/Test]   |     5:  1: . . . . . . Expression (\n[Go+ CI/Test]   |     5:  1: . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     5:  1: . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     5:  1: . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     5:  1: . . . . . . . . . . Operand (\n[Go+ CI/Test]   |     5:  1: . . . . . . . . . . . IDENT println\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: println}\n[Go+ CI/Test]   |     5:  8: . . . . . . . . . . )\n[Go+ CI/Test]   |     5:  8: . . . . . . . . . . CallOrConversion (\n[Go+ CI/Test]   |     5:  8: . . . . . . . . . . . \"(\"\n[Go+ CI/Test]   |     5:  9: . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |     5:  9: . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     5:  9: . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     5:  9: . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     5:  9: . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |     5:  9: . . . . . . . . . . . . . . . . IDENT title\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: title}\n[Go+ CI/Test]   |     5: 14: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     5: 14: . . . . . . . . . . . . . . . IndexOrSlice (\n[Go+ CI/Test]   |     5: 14: . . . . . . . . . . . . . . . . \"[\"\n[Go+ CI/Test]   |     5: 15: . . . . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |     5: 15: . . . . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     5: 15: . . . . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     5: 15: . . . . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     5: 15: . . . . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: INT, Value: 0}\n[Go+ CI/Test]   |     5: 15: . . . . . . . . . . . . . . . . . . . . . INT 0\n[Go+ CI/Test]   |     5: 17: . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     5: 17: . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     5: 17: . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     5: 17: . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     5: 17: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     5: 17: . . . . . . . . . . . . . . . . \":\"\n[Go+ CI/Test]   |     5: 19: . . . . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |     5: 19: . . . . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     5: 19: . . . . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     5: 19: . . . . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     5: 19: . . . . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |     5: 19: . . . . . . . . . . . . . . . . . . . . . IDENT len\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: len}\n[Go+ CI/Test]   |     5: 22: . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     5: 22: . . . . . . . . . . . . . . . . . . . . CallOrConversion (\n[Go+ CI/Test]   |     5: 22: . . . . . . . . . . . . . . . . . . . . . \"(\"\n[Go+ CI/Test]   |     5: 23: . . . . . . . . . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |     5: 23: . . . . . . . . . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     5: 23: . . . . . . . . . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     5: 23: . . . . . . . . . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     5: 23: . . . . . . . . . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |     5: 23: . . . . . . . . . . . . . . . . . . . . . . . . . . IDENT title\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: title}\n[Go+ CI/Test]   |     5: 28: . . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     5: 28: . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     5: 28: . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     5: 28: . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     5: 28: . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     5: 28: . . . . . . . . . . . . . . . . . . . . . \")\"\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1878: ast.CallExpr{Fun: len, Ellipsis: false, isCmd: false}\n[Go+ CI/Test]   |     5: 29: . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     5: 29: . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     5: 29: . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     5: 29: . . . . . . . . . . . . . . . . . . \"-\"\n[Go+ CI/Test]   |     5: 30: . . . . . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     5: 30: . . . . . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     5: 30: . . . . . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     5: 30: . . . . . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |     5: 30: . . . . . . . . . . . . . . . . . . . . . . IDENT len\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: len}\n[Go+ CI/Test]   |     5: 33: . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     5: 33: . . . . . . . . . . . . . . . . . . . . . CallOrConversion (\n[Go+ CI/Test]   |     5: 33: . . . . . . . . . . . . . . . . . . . . . . \"(\"\n[Go+ CI/Test]   |     5: 34: . . . . . . . . . . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |     5: 34: . . . . . . . . . . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     5: 34: . . . . . . . . . . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     5: 34: . . . . . . . . . . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     5: 34: . . . . . . . . . . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: STRING, Value: \"2006-01-02\"}\n[Go+ CI/Test]   |     5: 34: . . . . . . . . . . . . . . . . . . . . . . . . . . . STRING \"2006-01-02\"\n[Go+ CI/Test]   |     5: 46: . . . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     5: 46: . . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     5: 46: . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     5: 46: . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     5: 46: . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     5: 46: . . . . . . . . . . . . . . . . . . . . . . \")\"\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1878: ast.CallExpr{Fun: len, Ellipsis: false, isCmd: false}\n[Go+ CI/Test]   |     5: 47: . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     5: 47: . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     5: 47: . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     5: 47: . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     5: 47: . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     5: 47: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     5: 47: . . . . . . . . . . . . . . . . \"]\"\n[Go+ CI/Test]   |     5: 48: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     5: 48: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     5: 48: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     5: 48: . . . . . . . . . . . . )\n[Go+ CI/Test]   |     5: 48: . . . . . . . . . . . )\n[Go+ CI/Test]   |     5: 48: . . . . . . . . . . . \")\"\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1878: ast.CallExpr{Fun: println, Ellipsis: false, isCmd: false}\n[Go+ CI/Test]   |     5: 49: . . . . . . . . . . )\n[Go+ CI/Test]   |     5: 49: . . . . . . . . . )\n[Go+ CI/Test]   |     5: 49: . . . . . . . . )\n[Go+ CI/Test]   |     5: 49: . . . . . . . )\n[Go+ CI/Test]   |     5: 49: . . . . . . )\n[Go+ CI/Test]   |     5: 49: . . . . . )\n[Go+ CI/Test]   |     5: 49: . . . . )\n[Go+ CI/Test]   |     5: 49: . . . . \";\"\n[Go+ CI/Test]   |     5: 50: . . . )\n[Go+ CI/Test]   |     5: 50: . . )\n[Go+ CI/Test]   |     5: 50: . )\n[Go+ CI/Test]   |     5: 50: )\n[Go+ CI/Test]   | === RUN   TestFromTestdata/c2gohello\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parserdir_test.go:90: Parsing /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/_testdata/c2gohello\n[Go+ CI/Test]   |     1:  1: File (\n[Go+ CI/Test]   |     1:  1: . GenDecl(import) (\n[Go+ CI/Test]   |     1:  1: . . \"import\"\n[Go+ CI/Test]   |     1:  8: . . ImportSpec (\n[Go+ CI/Test]   |     1:  8: . . . STRING \"C\"\n[Go+ CI/Test]   |     1: 11: . . . \";\"\n[Go+ CI/Test]   |     3:  1: . . )\n[Go+ CI/Test]   |     3:  1: . )\n[Go+ CI/Test]   |     3:  1: . Declaration (\n[Go+ CI/Test]   |     3:  1: . . StatementList (\n[Go+ CI/Test]   |     3:  1: . . . Statement (\n[Go+ CI/Test]   |     3:  1: . . . . SimpleStmt (\n[Go+ CI/Test]   |     3:  1: . . . . . ExpressionList (\n[Go+ CI/Test]   |     3:  1: . . . . . . Expression (\n[Go+ CI/Test]   |     3:  1: . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     3:  1: . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     3:  1: . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     3:  1: . . . . . . . . . . Operand (\n[Go+ CI/Test]   |     3:  1: . . . . . . . . . . . IDENT C\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: C}\n[Go+ CI/Test]   |     3:  2: . . . . . . . . . . )\n[Go+ CI/Test]   |     3:  2: . . . . . . . . . . \".\"\n[Go+ CI/Test]   |     3:  3: . . . . . . . . . . Selector (\n[Go+ CI/Test]   |     3:  3: . . . . . . . . . . . IDENT printf\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: printf}\n[Go+ CI/Test]   |     3: 10: . . . . . . . . . . )\n[Go+ CI/Test]   |     3: 10: . . . . . . . . . . CallOrConversion (\n[Go+ CI/Test]   |     3: 10: . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |     3: 10: . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     3: 10: . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     3: 10: . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     3: 10: . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: CSTRING, Value: \"Hello, world!\\n\"}\n[Go+ CI/Test]   |     3: 10: . . . . . . . . . . . . . . . . CSTRING \"Hello, world!\\n\"\n[Go+ CI/Test]   |     3: 28: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     3: 28: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     3: 28: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     3: 28: . . . . . . . . . . . . )\n[Go+ CI/Test]   |     3: 28: . . . . . . . . . . . )\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1878: ast.CallExpr{Fun: &{C printf}, Ellipsis: false, isCmd: true}\n[Go+ CI/Test]   |     3: 28: . . . . . . . . . . )\n[Go+ CI/Test]   |     3: 28: . . . . . . . . . )\n[Go+ CI/Test]   |     3: 28: . . . . . . . . )\n[Go+ CI/Test]   |     3: 28: . . . . . . . )\n[Go+ CI/Test]   |     3: 28: . . . . . . )\n[Go+ CI/Test]   |     3: 28: . . . . . )\n[Go+ CI/Test]   |     3: 28: . . . . )\n[Go+ CI/Test]   |     3: 28: . . . . \";\"\n[Go+ CI/Test]   |     3: 29: . . . )\n[Go+ CI/Test]   |     3: 29: . . )\n[Go+ CI/Test]   |     3: 29: . )\n[Go+ CI/Test]   |     3: 29: )\n[Go+ CI/Test]   | === RUN   TestFromTestdata/cmdlinestyle1\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parserdir_test.go:90: Parsing /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/_testdata/cmdlinestyle1\n[Go+ CI/Test]   |     1:  1: File (\n[Go+ CI/Test]   |     1:  1: . Declaration (\n[Go+ CI/Test]   |     1:  1: . . StatementList (\n[Go+ CI/Test]   |     1:  1: . . . Statement (\n[Go+ CI/Test]   |     1:  1: . . . . SimpleStmt (\n[Go+ CI/Test]   |     1:  1: . . . . . ExpressionList (\n[Go+ CI/Test]   |     1:  1: . . . . . . Expression (\n[Go+ CI/Test]   |     1:  1: . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     1:  1: . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     1:  1: . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     1:  1: . . . . . . . . . . Operand (\n[Go+ CI/Test]   |     1:  1: . . . . . . . . . . . IDENT println\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: println}\n[Go+ CI/Test]   |     1:  9: . . . . . . . . . . )\n[Go+ CI/Test]   |     1:  9: . . . . . . . . . . CallOrConversion (\n[Go+ CI/Test]   |     1:  9: . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |     1:  9: . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     1:  9: . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     1:  9: . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     1:  9: . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |     1:  9: . . . . . . . . . . . . . . . . \"(\"\n[Go+ CI/Test]   |     1: 10: . . . . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |     1: 10: . . . . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     1: 10: . . . . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     1: 10: . . . . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     1: 10: . . . . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: INT, Value: 1}\n[Go+ CI/Test]   |     1: 10: . . . . . . . . . . . . . . . . . . . . . INT 1\n[Go+ CI/Test]   |     1: 11: . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     1: 11: . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     1: 11: . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     1: 11: . . . . . . . . . . . . . . . . . . \"+\"\n[Go+ CI/Test]   |     1: 12: . . . . . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     1: 12: . . . . . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     1: 12: . . . . . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     1: 12: . . . . . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: IMAG, Value: 2i}\n[Go+ CI/Test]   |     1: 12: . . . . . . . . . . . . . . . . . . . . . . IMAG 2i\n[Go+ CI/Test]   |     1: 14: . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     1: 14: . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     1: 14: . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     1: 14: . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     1: 14: . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     1: 14: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     1: 14: . . . . . . . . . . . . . . . . \")\"\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1644: ast.ParenExpr{X: &{0xc000348ce0 11 + 0xc000348d00}}\n[Go+ CI/Test]   |     1: 15: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     1: 15: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     1: 15: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     1: 15: . . . . . . . . . . . . . \"*\"\n[Go+ CI/Test]   |     1: 16: . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     1: 16: . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     1: 16: . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     1: 16: . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: INT, Value: 2}\n[Go+ CI/Test]   |     1: 16: . . . . . . . . . . . . . . . . . INT 2\n[Go+ CI/Test]   |     1: 17: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     1: 17: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     1: 17: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     1: 17: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     1: 17: . . . . . . . . . . . . )\n[Go+ CI/Test]   |     1: 17: . . . . . . . . . . . )\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1878: ast.CallExpr{Fun: println, Ellipsis: false, isCmd: true}\n[Go+ CI/Test]   |     1: 17: . . . . . . . . . . )\n[Go+ CI/Test]   |     1: 17: . . . . . . . . . )\n[Go+ CI/Test]   |     1: 17: . . . . . . . . )\n[Go+ CI/Test]   |     1: 17: . . . . . . . )\n[Go+ CI/Test]   |     1: 17: . . . . . . )\n[Go+ CI/Test]   |     1: 17: . . . . . )\n[Go+ CI/Test]   |     1: 17: . . . . )\n[Go+ CI/Test]   |     1: 17: . . . . \";\"\n[Go+ CI/Test]   |     1: 18: . . . )\n[Go+ CI/Test]   |     1: 18: . . )\n[Go+ CI/Test]   |     1: 18: . )\n[Go+ CI/Test]   |     1: 18: )\n[Go+ CI/Test]   | === RUN   TestFromTestdata/cmdlinestyle2\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parserdir_test.go:90: Parsing /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/_testdata/cmdlinestyle2\n[Go+ CI/Test]   |     1:  1: File (\n[Go+ CI/Test]   |     1:  1: . Declaration (\n[Go+ CI/Test]   |     1:  1: . . StatementList (\n[Go+ CI/Test]   |     1:  1: . . . Statement (\n[Go+ CI/Test]   |     1:  1: . . . . SimpleStmt (\n[Go+ CI/Test]   |     1:  1: . . . . . ExpressionList (\n[Go+ CI/Test]   |     1:  1: . . . . . . Expression (\n[Go+ CI/Test]   |     1:  1: . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     1:  1: . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     1:  1: . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     1:  1: . . . . . . . . . . Operand (\n[Go+ CI/Test]   |     1:  1: . . . . . . . . . . . IDENT x\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: x}\n[Go+ CI/Test]   |     1:  3: . . . . . . . . . . )\n[Go+ CI/Test]   |     1:  3: . . . . . . . . . . CallOrConversion (\n[Go+ CI/Test]   |     1:  3: . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |     1:  3: . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     1:  3: . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     1:  3: . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     1:  3: . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |     1:  3: . . . . . . . . . . . . . . . . LiteralValue (\n[Go+ CI/Test]   |     1:  3: . . . . . . . . . . . . . . . . . \"{\"\n[Go+ CI/Test]   |     1:  4: . . . . . . . . . . . . . . . . . \"}\"\n[Go+ CI/Test]   |     1:  5: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     1:  5: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     1:  5: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     1:  5: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     1:  5: . . . . . . . . . . . . )\n[Go+ CI/Test]   |     1:  5: . . . . . . . . . . . )\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1878: ast.CallExpr{Fun: x, Ellipsis: false, isCmd: true}\n[Go+ CI/Test]   |     1:  5: . . . . . . . . . . )\n[Go+ CI/Test]   |     1:  5: . . . . . . . . . )\n[Go+ CI/Test]   |     1:  5: . . . . . . . . )\n[Go+ CI/Test]   |     1:  5: . . . . . . . )\n[Go+ CI/Test]   |     1:  5: . . . . . . )\n[Go+ CI/Test]   |     1:  5: . . . . . )\n[Go+ CI/Test]   |     1:  5: . . . . )\n[Go+ CI/Test]   |     1:  5: . . . . \";\"\n[Go+ CI/Test]   |     2:  1: . . . )\n[Go+ CI/Test]   |     2:  1: . . . Statement (\n[Go+ CI/Test]   |     2:  1: . . . . SimpleStmt (\n[Go+ CI/Test]   |     2:  1: . . . . . ExpressionList (\n[Go+ CI/Test]   |     2:  1: . . . . . . Expression (\n[Go+ CI/Test]   |     2:  1: . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     2:  1: . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     2:  1: . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     2:  1: . . . . . . . . . . Operand (\n[Go+ CI/Test]   |     2:  1: . . . . . . . . . . . IDENT x\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: x}\n[Go+ CI/Test]   |     2:  2: . . . . . . . . . . )\n[Go+ CI/Test]   |     2:  2: . . . . . . . . . . LiteralValue (\n[Go+ CI/Test]   |     2:  2: . . . . . . . . . . . \"{\"\n[Go+ CI/Test]   |     2:  3: . . . . . . . . . . . \"}\"\n[Go+ CI/Test]   |     2:  4: . . . . . . . . . . )\n[Go+ CI/Test]   |     2:  4: . . . . . . . . . )\n[Go+ CI/Test]   |     2:  4: . . . . . . . . )\n[Go+ CI/Test]   |     2:  4: . . . . . . . )\n[Go+ CI/Test]   |     2:  4: . . . . . . )\n[Go+ CI/Test]   |     2:  4: . . . . . )\n[Go+ CI/Test]   |     2:  4: . . . . )\n[Go+ CI/Test]   |     2:  4: . . . . \";\"\n[Go+ CI/Test]   |     2:  5: . . . )\n[Go+ CI/Test]   |     2:  5: . . )\n[Go+ CI/Test]   |     2:  5: . )\n[Go+ CI/Test]   |     2:  5: )\n[Go+ CI/Test]   | === RUN   TestFromTestdata/cmdlinestyle3\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parserdir_test.go:90: Parsing /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/_testdata/cmdlinestyle3\n[Go+ CI/Test]   |     1:  1: File (\n[Go+ CI/Test]   |     1:  1: . Declaration (\n[Go+ CI/Test]   |     1:  1: . . StatementList (\n[Go+ CI/Test]   |     1:  1: . . . Statement (\n[Go+ CI/Test]   |     1:  1: . . . . SimpleStmt (\n[Go+ CI/Test]   |     1:  1: . . . . . ExpressionList (\n[Go+ CI/Test]   |     1:  1: . . . . . . Expression (\n[Go+ CI/Test]   |     1:  1: . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     1:  1: . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     1:  1: . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     1:  1: . . . . . . . . . . Operand (\n[Go+ CI/Test]   |     1:  1: . . . . . . . . . . . IDENT println\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: println}\n[Go+ CI/Test]   |     1:  9: . . . . . . . . . . )\n[Go+ CI/Test]   |     1:  9: . . . . . . . . . . \"&\"\n[Go+ CI/Test]   |     1:  9: . . . . . . . . . . CallOrConversion (\n[Go+ CI/Test]   |     1:  9: . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |     1:  9: . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     1:  9: . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     1: 10: . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     1: 10: . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     1: 10: . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |     1: 10: . . . . . . . . . . . . . . . . . IDENT x\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: x}\n[Go+ CI/Test]   |     1: 11: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     1: 11: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     1: 11: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     1: 11: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     1: 11: . . . . . . . . . . . . )\n[Go+ CI/Test]   |     1: 11: . . . . . . . . . . . )\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1878: ast.CallExpr{Fun: println, Ellipsis: false, isCmd: true}\n[Go+ CI/Test]   |     1: 11: . . . . . . . . . . )\n[Go+ CI/Test]   |     1: 11: . . . . . . . . . )\n[Go+ CI/Test]   |     1: 11: . . . . . . . . )\n[Go+ CI/Test]   |     1: 11: . . . . . . . )\n[Go+ CI/Test]   |     1: 11: . . . . . . )\n[Go+ CI/Test]   |     1: 11: . . . . . )\n[Go+ CI/Test]   |     1: 11: . . . . )\n[Go+ CI/Test]   |     1: 11: . . . . \";\"\n[Go+ CI/Test]   |     2:  1: . . . )\n[Go+ CI/Test]   |     2:  1: . . . Statement (\n[Go+ CI/Test]   |     2:  1: . . . . SimpleStmt (\n[Go+ CI/Test]   |     2:  1: . . . . . ExpressionList (\n[Go+ CI/Test]   |     2:  1: . . . . . . Expression (\n[Go+ CI/Test]   |     2:  1: . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     2:  1: . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     2:  1: . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     2:  1: . . . . . . . . . . Operand (\n[Go+ CI/Test]   |     2:  1: . . . . . . . . . . . IDENT println\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: println}\n[Go+ CI/Test]   |     2:  9: . . . . . . . . . . )\n[Go+ CI/Test]   |     2:  9: . . . . . . . . . . CallOrConversion (\n[Go+ CI/Test]   |     2:  9: . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |     2:  9: . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     2:  9: . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     2:  9: . . . . . . . . . . . . . . \"!\"\n[Go+ CI/Test]   |     2: 10: . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     2: 10: . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     2: 10: . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |     2: 10: . . . . . . . . . . . . . . . . . IDENT x\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: x}\n[Go+ CI/Test]   |     2: 11: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 11: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 11: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 11: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 11: . . . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 11: . . . . . . . . . . . )\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1878: ast.CallExpr{Fun: println, Ellipsis: false, isCmd: true}\n[Go+ CI/Test]   |     2: 11: . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 11: . . . . . . . . . )\n[Go+ CI/Test]   |     2: 11: . . . . . . . . )\n[Go+ CI/Test]   |     2: 11: . . . . . . . )\n[Go+ CI/Test]   |     2: 11: . . . . . . )\n[Go+ CI/Test]   |     2: 11: . . . . . )\n[Go+ CI/Test]   |     2: 11: . . . . )\n[Go+ CI/Test]   |     2: 11: . . . . \";\"\n[Go+ CI/Test]   |     2: 12: . . . )\n[Go+ CI/Test]   |     2: 12: . . )\n[Go+ CI/Test]   |     2: 12: . )\n[Go+ CI/Test]   |     2: 12: )\n[Go+ CI/Test]   | === RUN   TestFromTestdata/cmdlinestyle4\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parserdir_test.go:90: Parsing /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/_testdata/cmdlinestyle4\n[Go+ CI/Test]   |     1:  1: File (\n[Go+ CI/Test]   |     1:  1: . Declaration (\n[Go+ CI/Test]   |     1:  1: . . FunctionDecl (\n[Go+ CI/Test]   |     1:  1: . . . \"func\"\n[Go+ CI/Test]   |     1:  6: . . . IDENT call\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: call}\n[Go+ CI/Test]   |     1: 10: . . . Signature (\n[Go+ CI/Test]   |     1: 10: . . . . Parameters (\n[Go+ CI/Test]   |     1: 10: . . . . . \"(\"\n[Go+ CI/Test]   |     1: 11: . . . . . ParameterList (\n[Go+ CI/Test]   |     1: 11: . . . . . . ParamDeclOrNil (\n[Go+ CI/Test]   |     1: 11: . . . . . . . IDENT fn\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: fn}\n[Go+ CI/Test]   |     1: 14: . . . . . . . Type (\n[Go+ CI/Test]   |     1: 14: . . . . . . . . FuncType (\n[Go+ CI/Test]   |     1: 14: . . . . . . . . . \"func\"\n[Go+ CI/Test]   |     1: 18: . . . . . . . . . Signature (\n[Go+ CI/Test]   |     1: 18: . . . . . . . . . . Parameters (\n[Go+ CI/Test]   |     1: 18: . . . . . . . . . . . \"(\"\n[Go+ CI/Test]   |     1: 19: . . . . . . . . . . . ParameterList (\n[Go+ CI/Test]   |     1: 19: . . . . . . . . . . . . ParamDeclOrNil (\n[Go+ CI/Test]   |     1: 19: . . . . . . . . . . . . . IDENT x\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: x}\n[Go+ CI/Test]   |     1: 21: . . . . . . . . . . . . . Type (\n[Go+ CI/Test]   |     1: 21: . . . . . . . . . . . . . . TypeName (\n[Go+ CI/Test]   |     1: 21: . . . . . . . . . . . . . . . IDENT int\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: int}\n[Go+ CI/Test]   |     1: 24: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     1: 24: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     1: 24: . . . . . . . . . . . . )\n[Go+ CI/Test]   |     1: 24: . . . . . . . . . . . )\n[Go+ CI/Test]   |     1: 24: . . . . . . . . . . . \")\"\n[Go+ CI/Test]   |     1: 25: . . . . . . . . . . )\n[Go+ CI/Test]   |     1: 25: . . . . . . . . . . Result (\n[Go+ CI/Test]   |     1: 25: . . . . . . . . . . )\n[Go+ CI/Test]   |     1: 25: . . . . . . . . . )\n[Go+ CI/Test]   |     1: 25: . . . . . . . . )\n[Go+ CI/Test]   |     1: 25: . . . . . . . )\n[Go+ CI/Test]   |     1: 25: . . . . . . )\n[Go+ CI/Test]   |     1: 25: . . . . . )\n[Go+ CI/Test]   |     1: 25: . . . . . \")\"\n[Go+ CI/Test]   |     1: 27: . . . . )\n[Go+ CI/Test]   |     1: 27: . . . . Result (\n[Go+ CI/Test]   |     1: 27: . . . . )\n[Go+ CI/Test]   |     1: 27: . . . )\n[Go+ CI/Test]   |     1: 27: . . . Body (\n[Go+ CI/Test]   |     1: 27: . . . . \"{\"\n[Go+ CI/Test]   |     1: 29: . . . . StatementList (\n[Go+ CI/Test]   |     1: 29: . . . . . Statement (\n[Go+ CI/Test]   |     1: 29: . . . . . . SimpleStmt (\n[Go+ CI/Test]   |     1: 29: . . . . . . . ExpressionList (\n[Go+ CI/Test]   |     1: 29: . . . . . . . . Expression (\n[Go+ CI/Test]   |     1: 29: . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     1: 29: . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     1: 29: . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     1: 29: . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |     1: 29: . . . . . . . . . . . . . IDENT fn\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: fn}\n[Go+ CI/Test]   |     1: 31: . . . . . . . . . . . . )\n[Go+ CI/Test]   |     1: 31: . . . . . . . . . . . . CallOrConversion (\n[Go+ CI/Test]   |     1: 31: . . . . . . . . . . . . . \"(\"\n[Go+ CI/Test]   |     1: 32: . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |     1: 32: . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     1: 32: . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     1: 32: . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     1: 32: . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: INT, Value: 100}\n[Go+ CI/Test]   |     1: 32: . . . . . . . . . . . . . . . . . . INT 100\n[Go+ CI/Test]   |     1: 35: . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     1: 35: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     1: 35: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     1: 35: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     1: 35: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     1: 35: . . . . . . . . . . . . . \")\"\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1878: ast.CallExpr{Fun: fn, Ellipsis: false, isCmd: false}\n[Go+ CI/Test]   |     1: 37: . . . . . . . . . . . . )\n[Go+ CI/Test]   |     1: 37: . . . . . . . . . . . )\n[Go+ CI/Test]   |     1: 37: . . . . . . . . . . )\n[Go+ CI/Test]   |     1: 37: . . . . . . . . . )\n[Go+ CI/Test]   |     1: 37: . . . . . . . . )\n[Go+ CI/Test]   |     1: 37: . . . . . . . )\n[Go+ CI/Test]   |     1: 37: . . . . . . )\n[Go+ CI/Test]   |     1: 37: . . . . . )\n[Go+ CI/Test]   |     1: 37: . . . . )\n[Go+ CI/Test]   |     1: 37: . . . . \"}\"\n[Go+ CI/Test]   |     1: 38: . . . )\n[Go+ CI/Test]   |     1: 38: . . . \";\"\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:3564: ast.FuncDecl{Name: call, ...}\n[Go+ CI/Test]   |     3:  1: . . )\n[Go+ CI/Test]   |     3:  1: . )\n[Go+ CI/Test]   |     3:  1: . Declaration (\n[Go+ CI/Test]   |     3:  1: . . StatementList (\n[Go+ CI/Test]   |     3:  1: . . . Statement (\n[Go+ CI/Test]   |     3:  1: . . . . SimpleStmt (\n[Go+ CI/Test]   |     3:  1: . . . . . ExpressionList (\n[Go+ CI/Test]   |     3:  1: . . . . . . Expression (\n[Go+ CI/Test]   |     3:  1: . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     3:  1: . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     3:  1: . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     3:  1: . . . . . . . . . . Operand (\n[Go+ CI/Test]   |     3:  1: . . . . . . . . . . . IDENT call\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: call}\n[Go+ CI/Test]   |     3:  5: . . . . . . . . . . )\n[Go+ CI/Test]   |     3:  5: . . . . . . . . . . CallOrConversion (\n[Go+ CI/Test]   |     3:  5: . . . . . . . . . . . \"(\"\n[Go+ CI/Test]   |     3:  6: . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |     3:  6: . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     3:  6: . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     3:  6: . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     3:  6: . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |     3:  6: . . . . . . . . . . . . . . . . FuncTypeOrLit (\n[Go+ CI/Test]   |     3:  6: . . . . . . . . . . . . . . . . . FuncType (\n[Go+ CI/Test]   |     3:  6: . . . . . . . . . . . . . . . . . . \"func\"\n[Go+ CI/Test]   |     3: 10: . . . . . . . . . . . . . . . . . . Signature (\n[Go+ CI/Test]   |     3: 10: . . . . . . . . . . . . . . . . . . . Parameters (\n[Go+ CI/Test]   |     3: 10: . . . . . . . . . . . . . . . . . . . . \"(\"\n[Go+ CI/Test]   |     3: 11: . . . . . . . . . . . . . . . . . . . . ParameterList (\n[Go+ CI/Test]   |     3: 11: . . . . . . . . . . . . . . . . . . . . . ParamDeclOrNil (\n[Go+ CI/Test]   |     3: 11: . . . . . . . . . . . . . . . . . . . . . . IDENT x\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: x}\n[Go+ CI/Test]   |     3: 13: . . . . . . . . . . . . . . . . . . . . . . Type (\n[Go+ CI/Test]   |     3: 13: . . . . . . . . . . . . . . . . . . . . . . . TypeName (\n[Go+ CI/Test]   |     3: 13: . . . . . . . . . . . . . . . . . . . . . . . . IDENT int\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: int}\n[Go+ CI/Test]   |     3: 16: . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     3: 16: . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     3: 16: . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     3: 16: . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     3: 16: . . . . . . . . . . . . . . . . . . . . \")\"\n[Go+ CI/Test]   |     3: 18: . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     3: 18: . . . . . . . . . . . . . . . . . . . Result (\n[Go+ CI/Test]   |     3: 18: . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     3: 18: . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     3: 18: . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     3: 18: . . . . . . . . . . . . . . . . . Body (\n[Go+ CI/Test]   |     3: 18: . . . . . . . . . . . . . . . . . . \"{\"\n[Go+ CI/Test]   |     3: 20: . . . . . . . . . . . . . . . . . . StatementList (\n[Go+ CI/Test]   |     3: 20: . . . . . . . . . . . . . . . . . . . Statement (\n[Go+ CI/Test]   |     3: 20: . . . . . . . . . . . . . . . . . . . . SimpleStmt (\n[Go+ CI/Test]   |     3: 20: . . . . . . . . . . . . . . . . . . . . . ExpressionList (\n[Go+ CI/Test]   |     3: 20: . . . . . . . . . . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |     3: 20: . . . . . . . . . . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     3: 20: . . . . . . . . . . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     3: 20: . . . . . . . . . . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     3: 20: . . . . . . . . . . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |     3: 20: . . . . . . . . . . . . . . . . . . . . . . . . . . . IDENT println\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: println}\n[Go+ CI/Test]   |     3: 28: . . . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     3: 28: . . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     3: 28: . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     3: 28: . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     3: 28: . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     3: 28: . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     3: 28: . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     3: 28: . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     3: 28: . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     3: 28: . . . . . . . . . . . . . . . . . . \"}\"\n[Go+ CI/Test]   |     3: 29: . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     3: 29: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     3: 29: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     3: 29: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     3: 29: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     3: 29: . . . . . . . . . . . . )\n[Go+ CI/Test]   |     3: 29: . . . . . . . . . . . )\n[Go+ CI/Test]   |     3: 29: . . . . . . . . . . . \")\"\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1878: ast.CallExpr{Fun: call, Ellipsis: false, isCmd: false}\n[Go+ CI/Test]   |     3: 30: . . . . . . . . . . )\n[Go+ CI/Test]   |     3: 30: . . . . . . . . . )\n[Go+ CI/Test]   |     3: 30: . . . . . . . . )\n[Go+ CI/Test]   |     3: 30: . . . . . . . )\n[Go+ CI/Test]   |     3: 30: . . . . . . )\n[Go+ CI/Test]   |     3: 30: . . . . . )\n[Go+ CI/Test]   |     3: 30: . . . . )\n[Go+ CI/Test]   |     3: 30: . . . . \";\"\n[Go+ CI/Test]   |     4:  1: . . . )\n[Go+ CI/Test]   |     4:  1: . . . Statement (\n[Go+ CI/Test]   |     4:  1: . . . . SimpleStmt (\n[Go+ CI/Test]   |     4:  1: . . . . . ExpressionList (\n[Go+ CI/Test]   |     4:  1: . . . . . . Expression (\n[Go+ CI/Test]   |     4:  1: . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     4:  1: . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     4:  1: . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     4:  1: . . . . . . . . . . Operand (\n[Go+ CI/Test]   |     4:  1: . . . . . . . . . . . IDENT call\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: call}\n[Go+ CI/Test]   |     4:  5: . . . . . . . . . . )\n[Go+ CI/Test]   |     4:  5: . . . . . . . . . . CallOrConversion (\n[Go+ CI/Test]   |     4:  5: . . . . . . . . . . . \"(\"\n[Go+ CI/Test]   |     4:  6: . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |     4:  6: . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     4:  6: . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     4:  6: . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     4:  6: . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |     4:  6: . . . . . . . . . . . . . . . . FuncTypeOrLit (\n[Go+ CI/Test]   |     4:  6: . . . . . . . . . . . . . . . . . FuncType (\n[Go+ CI/Test]   |     4:  6: . . . . . . . . . . . . . . . . . . \"func\"\n[Go+ CI/Test]   |     4: 10: . . . . . . . . . . . . . . . . . . Signature (\n[Go+ CI/Test]   |     4: 10: . . . . . . . . . . . . . . . . . . . Parameters (\n[Go+ CI/Test]   |     4: 10: . . . . . . . . . . . . . . . . . . . . \"(\"\n[Go+ CI/Test]   |     4: 11: . . . . . . . . . . . . . . . . . . . . ParameterList (\n[Go+ CI/Test]   |     4: 11: . . . . . . . . . . . . . . . . . . . . . ParamDeclOrNil (\n[Go+ CI/Test]   |     4: 11: . . . . . . . . . . . . . . . . . . . . . . IDENT x\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: x}\n[Go+ CI/Test]   |     4: 13: . . . . . . . . . . . . . . . . . . . . . . Type (\n[Go+ CI/Test]   |     4: 13: . . . . . . . . . . . . . . . . . . . . . . . TypeName (\n[Go+ CI/Test]   |     4: 13: . . . . . . . . . . . . . . . . . . . . . . . . IDENT int\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: int}\n[Go+ CI/Test]   |     4: 16: . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     4: 16: . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     4: 16: . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     4: 16: . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     4: 16: . . . . . . . . . . . . . . . . . . . . \")\"\n[Go+ CI/Test]   |     4: 18: . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     4: 18: . . . . . . . . . . . . . . . . . . . Result (\n[Go+ CI/Test]   |     4: 18: . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     4: 18: . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     4: 18: . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     4: 18: . . . . . . . . . . . . . . . . . Body (\n[Go+ CI/Test]   |     4: 18: . . . . . . . . . . . . . . . . . . \"{\"\n[Go+ CI/Test]   |     4: 20: . . . . . . . . . . . . . . . . . . StatementList (\n[Go+ CI/Test]   |     4: 20: . . . . . . . . . . . . . . . . . . . Statement (\n[Go+ CI/Test]   |     4: 20: . . . . . . . . . . . . . . . . . . . . SimpleStmt (\n[Go+ CI/Test]   |     4: 20: . . . . . . . . . . . . . . . . . . . . . ExpressionList (\n[Go+ CI/Test]   |     4: 20: . . . . . . . . . . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |     4: 20: . . . . . . . . . . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     4: 20: . . . . . . . . . . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     4: 20: . . . . . . . . . . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     4: 20: . . . . . . . . . . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |     4: 20: . . . . . . . . . . . . . . . . . . . . . . . . . . . IDENT println\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: println}\n[Go+ CI/Test]   |     4: 28: . . . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     4: 28: . . . . . . . . . . . . . . . . . . . . . . . . . . CallOrConversion (\n[Go+ CI/Test]   |     4: 28: . . . . . . . . . . . . . . . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |     4: 28: . . . . . . . . . . . . . . . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     4: 28: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     4: 28: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     4: 28: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |     4: 28: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . IDENT x\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: x}\n[Go+ CI/Test]   |     4: 30: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     4: 30: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     4: 30: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     4: 30: . . . . . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     4: 30: . . . . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1878: ast.CallExpr{Fun: println, Ellipsis: false, isCmd: true}\n[Go+ CI/Test]   |     4: 30: . . . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     4: 30: . . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     4: 30: . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     4: 30: . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     4: 30: . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     4: 30: . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     4: 30: . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     4: 30: . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     4: 30: . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     4: 30: . . . . . . . . . . . . . . . . . . \"}\"\n[Go+ CI/Test]   |     4: 31: . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     4: 31: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     4: 31: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     4: 31: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     4: 31: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     4: 31: . . . . . . . . . . . . )\n[Go+ CI/Test]   |     4: 31: . . . . . . . . . . . )\n[Go+ CI/Test]   |     4: 31: . . . . . . . . . . . \")\"\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1878: ast.CallExpr{Fun: call, Ellipsis: false, isCmd: false}\n[Go+ CI/Test]   |     4: 32: . . . . . . . . . . )\n[Go+ CI/Test]   |     4: 32: . . . . . . . . . )\n[Go+ CI/Test]   |     4: 32: . . . . . . . . )\n[Go+ CI/Test]   |     4: 32: . . . . . . . )\n[Go+ CI/Test]   |     4: 32: . . . . . . )\n[Go+ CI/Test]   |     4: 32: . . . . . )\n[Go+ CI/Test]   |     4: 32: . . . . )\n[Go+ CI/Test]   |     4: 32: . . . . \";\"\n[Go+ CI/Test]   |     5:  1: . . . )\n[Go+ CI/Test]   |     5:  1: . . . Statement (\n[Go+ CI/Test]   |     5:  1: . . . . SimpleStmt (\n[Go+ CI/Test]   |     5:  1: . . . . . ExpressionList (\n[Go+ CI/Test]   |     5:  1: . . . . . . Expression (\n[Go+ CI/Test]   |     5:  1: . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     5:  1: . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     5:  1: . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     5:  1: . . . . . . . . . . Operand (\n[Go+ CI/Test]   |     5:  1: . . . . . . . . . . . IDENT call\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: call}\n[Go+ CI/Test]   |     5:  5: . . . . . . . . . . )\n[Go+ CI/Test]   |     5:  5: . . . . . . . . . . CallOrConversion (\n[Go+ CI/Test]   |     5:  5: . . . . . . . . . . . \"(\"\n[Go+ CI/Test]   |     5:  6: . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |     5:  6: . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     5:  6: . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     5:  6: . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     5:  6: . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |     5:  6: . . . . . . . . . . . . . . . . FuncTypeOrLit (\n[Go+ CI/Test]   |     5:  6: . . . . . . . . . . . . . . . . . FuncType (\n[Go+ CI/Test]   |     5:  6: . . . . . . . . . . . . . . . . . . \"func\"\n[Go+ CI/Test]   |     5: 10: . . . . . . . . . . . . . . . . . . Signature (\n[Go+ CI/Test]   |     5: 10: . . . . . . . . . . . . . . . . . . . Parameters (\n[Go+ CI/Test]   |     5: 10: . . . . . . . . . . . . . . . . . . . . \"(\"\n[Go+ CI/Test]   |     5: 11: . . . . . . . . . . . . . . . . . . . . ParameterList (\n[Go+ CI/Test]   |     5: 11: . . . . . . . . . . . . . . . . . . . . . ParamDeclOrNil (\n[Go+ CI/Test]   |     5: 11: . . . . . . . . . . . . . . . . . . . . . . IDENT x\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: x}\n[Go+ CI/Test]   |     5: 13: . . . . . . . . . . . . . . . . . . . . . . Type (\n[Go+ CI/Test]   |     5: 13: . . . . . . . . . . . . . . . . . . . . . . . TypeName (\n[Go+ CI/Test]   |     5: 13: . . . . . . . . . . . . . . . . . . . . . . . . IDENT int\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: int}\n[Go+ CI/Test]   |     5: 16: . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     5: 16: . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     5: 16: . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     5: 16: . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     5: 16: . . . . . . . . . . . . . . . . . . . . \")\"\n[Go+ CI/Test]   |     5: 18: . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     5: 18: . . . . . . . . . . . . . . . . . . . Result (\n[Go+ CI/Test]   |     5: 18: . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     5: 18: . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     5: 18: . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     5: 18: . . . . . . . . . . . . . . . . . Body (\n[Go+ CI/Test]   |     5: 18: . . . . . . . . . . . . . . . . . . \"{\"\n[Go+ CI/Test]   |     5: 20: . . . . . . . . . . . . . . . . . . StatementList (\n[Go+ CI/Test]   |     5: 20: . . . . . . . . . . . . . . . . . . . Statement (\n[Go+ CI/Test]   |     5: 20: . . . . . . . . . . . . . . . . . . . . SimpleStmt (\n[Go+ CI/Test]   |     5: 20: . . . . . . . . . . . . . . . . . . . . . ExpressionList (\n[Go+ CI/Test]   |     5: 20: . . . . . . . . . . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |     5: 20: . . . . . . . . . . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     5: 20: . . . . . . . . . . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     5: 20: . . . . . . . . . . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     5: 20: . . . . . . . . . . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |     5: 20: . . . . . . . . . . . . . . . . . . . . . . . . . . . IDENT println\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: println}\n[Go+ CI/Test]   |     5: 28: . . . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     5: 28: . . . . . . . . . . . . . . . . . . . . . . . . . . CallOrConversion (\n[Go+ CI/Test]   |     5: 28: . . . . . . . . . . . . . . . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |     5: 28: . . . . . . . . . . . . . . . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     5: 28: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     5: 28: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     5: 28: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |     5: 28: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . LiteralValue (\n[Go+ CI/Test]   |     5: 28: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . \"{\"\n[Go+ CI/Test]   |     5: 29: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ElementList (\n[Go+ CI/Test]   |     5: 29: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . Element (\n[Go+ CI/Test]   |     5: 29: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . Element (\n[Go+ CI/Test]   |     5: 29: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |     5: 29: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     5: 29: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     5: 29: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     5: 29: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: STRING, Value: \"x\"}\n[Go+ CI/Test]   |     5: 29: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . STRING \"x\"\n[Go+ CI/Test]   |     5: 32: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     5: 32: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     5: 32: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     5: 32: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     5: 32: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     5: 32: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     5: 32: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . \":\"\n[Go+ CI/Test]   |     5: 34: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . Element (\n[Go+ CI/Test]   |     5: 34: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |     5: 34: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     5: 34: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     5: 34: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     5: 34: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: INT, Value: 100}\n[Go+ CI/Test]   |     5: 34: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . INT 100\n[Go+ CI/Test]   |     5: 37: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     5: 37: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     5: 37: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     5: 37: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     5: 37: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     5: 37: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     5: 37: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     5: 37: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . \",\"\n[Go+ CI/Test]   |     5: 39: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . Element (\n[Go+ CI/Test]   |     5: 39: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . Element (\n[Go+ CI/Test]   |     5: 39: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |     5: 39: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     5: 39: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     5: 39: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     5: 39: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: STRING, Value: \"y\"}\n[Go+ CI/Test]   |     5: 39: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . STRING \"y\"\n[Go+ CI/Test]   |     5: 42: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     5: 42: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     5: 42: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     5: 42: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     5: 42: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     5: 42: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     5: 42: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . \":\"\n[Go+ CI/Test]   |     5: 44: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . Element (\n[Go+ CI/Test]   |     5: 44: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |     5: 44: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     5: 44: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     5: 44: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     5: 44: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: INT, Value: 200}\n[Go+ CI/Test]   |     5: 44: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . INT 200\n[Go+ CI/Test]   |     5: 47: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     5: 47: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     5: 47: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     5: 47: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     5: 47: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     5: 47: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     5: 47: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     5: 47: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     5: 47: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . \"}\"\n[Go+ CI/Test]   |     5: 48: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     5: 48: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     5: 48: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     5: 48: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     5: 48: . . . . . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     5: 48: . . . . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     5: 48: . . . . . . . . . . . . . . . . . . . . . . . . . . . \",\"\n[Go+ CI/Test]   |     5: 50: . . . . . . . . . . . . . . . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |     5: 50: . . . . . . . . . . . . . . . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     5: 50: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     5: 50: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     5: 50: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |     5: 50: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . IDENT x\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: x}\n[Go+ CI/Test]   |     5: 52: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     5: 52: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     5: 52: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     5: 52: . . . . . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     5: 52: . . . . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1878: ast.CallExpr{Fun: println, Ellipsis: false, isCmd: true}\n[Go+ CI/Test]   |     5: 52: . . . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     5: 52: . . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     5: 52: . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     5: 52: . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     5: 52: . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     5: 52: . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     5: 52: . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     5: 52: . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     5: 52: . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     5: 52: . . . . . . . . . . . . . . . . . . \"}\"\n[Go+ CI/Test]   |     5: 53: . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     5: 53: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     5: 53: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     5: 53: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     5: 53: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     5: 53: . . . . . . . . . . . . )\n[Go+ CI/Test]   |     5: 53: . . . . . . . . . . . )\n[Go+ CI/Test]   |     5: 53: . . . . . . . . . . . \")\"\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1878: ast.CallExpr{Fun: call, Ellipsis: false, isCmd: false}\n[Go+ CI/Test]   |     5: 54: . . . . . . . . . . )\n[Go+ CI/Test]   |     5: 54: . . . . . . . . . )\n[Go+ CI/Test]   |     5: 54: . . . . . . . . )\n[Go+ CI/Test]   |     5: 54: . . . . . . . )\n[Go+ CI/Test]   |     5: 54: . . . . . . )\n[Go+ CI/Test]   |     5: 54: . . . . . )\n[Go+ CI/Test]   |     5: 54: . . . . )\n[Go+ CI/Test]   |     5: 54: . . . . \";\"\n[Go+ CI/Test]   |     5: 55: . . . )\n[Go+ CI/Test]   |     5: 55: . . )\n[Go+ CI/Test]   |     5: 55: . )\n[Go+ CI/Test]   |     5: 55: )\n[Go+ CI/Test]   | === RUN   TestFromTestdata/collection\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parserdir_test.go:90: Parsing /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/_testdata/collection\n[Go+ CI/Test]   |     1:  1: COMMENT\n[Go+ CI/Test]   |     2:  1: COMMENT\n[Go+ CI/Test]   |     3:  1: COMMENT\n[Go+ CI/Test]   |     4:  1: COMMENT\n[Go+ CI/Test]   |     6:  1: COMMENT\n[Go+ CI/Test]   |     7:  1: COMMENT\n[Go+ CI/Test]   |     8:  1: COMMENT\n[Go+ CI/Test]   |     9:  1: COMMENT\n[Go+ CI/Test]   |    10:  1: COMMENT\n[Go+ CI/Test]   |    12:  1: COMMENT\n[Go+ CI/Test]   |    13:  1: COMMENT\n[Go+ CI/Test]   |    14:  1: COMMENT\n[Go+ CI/Test]   |    15:  1: COMMENT\n[Go+ CI/Test]   |    16:  1: COMMENT\n[Go+ CI/Test]   |    17:  1: COMMENT\n[Go+ CI/Test]   |    19:  1: File (\n[Go+ CI/Test]   |    19:  1: . \"package\"\n[Go+ CI/Test]   |    19:  9: . IDENT main\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: main}\n[Go+ CI/Test]   |    19: 13: . \";\"\n[Go+ CI/Test]   |    21:  1: . GenDecl(import) (\n[Go+ CI/Test]   |    21:  1: . . \"import\"\n[Go+ CI/Test]   |    21:  8: . . \"(\"\n[Go+ CI/Test]   |    22:  2: . . ImportSpec (\n[Go+ CI/Test]   |    22:  2: . . . STRING \"fmt\"\n[Go+ CI/Test]   |    22:  7: . . . \";\"\n[Go+ CI/Test]   |    23:  2: . . )\n[Go+ CI/Test]   |    23:  2: . . ImportSpec (\n[Go+ CI/Test]   |    23:  2: . . . STRING \"strings\"\n[Go+ CI/Test]   |    23: 11: . . . \";\"\n[Go+ CI/Test]   |    24:  1: . . )\n[Go+ CI/Test]   |    24:  1: . . \")\"\n[Go+ CI/Test]   |    24:  2: . . \";\"\n[Go+ CI/Test]   |    26:  1: . . COMMENT\n[Go+ CI/Test]   |    27:  1: . . COMMENT\n[Go+ CI/Test]   |    28:  1: . )\n[Go+ CI/Test]   |    28:  1: . Declaration (\n[Go+ CI/Test]   |    28:  1: . . FunctionDecl (\n[Go+ CI/Test]   |    28:  1: . . . \"func\"\n[Go+ CI/Test]   |    28:  6: . . . IDENT Index\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: Index}\n[Go+ CI/Test]   |    28: 11: . . . Signature (\n[Go+ CI/Test]   |    28: 11: . . . . Parameters (\n[Go+ CI/Test]   |    28: 11: . . . . . \"(\"\n[Go+ CI/Test]   |    28: 12: . . . . . ParameterList (\n[Go+ CI/Test]   |    28: 12: . . . . . . ParamDeclOrNil (\n[Go+ CI/Test]   |    28: 12: . . . . . . . IDENT vs\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: vs}\n[Go+ CI/Test]   |    28: 15: . . . . . . . ArrayFieldOrTypeInstance (\n[Go+ CI/Test]   |    28: 15: . . . . . . . . \"[\"\n[Go+ CI/Test]   |    28: 16: . . . . . . . . \"]\"\n[Go+ CI/Test]   |    28: 17: . . . . . . . . Type (\n[Go+ CI/Test]   |    28: 17: . . . . . . . . . TypeName (\n[Go+ CI/Test]   |    28: 17: . . . . . . . . . . IDENT string\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: string}\n[Go+ CI/Test]   |    28: 23: . . . . . . . . . )\n[Go+ CI/Test]   |    28: 23: . . . . . . . . )\n[Go+ CI/Test]   |    28: 23: . . . . . . . )\n[Go+ CI/Test]   |    28: 23: . . . . . . )\n[Go+ CI/Test]   |    28: 23: . . . . . . \",\"\n[Go+ CI/Test]   |    28: 25: . . . . . . ParamDeclOrNil (\n[Go+ CI/Test]   |    28: 25: . . . . . . . IDENT t\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: t}\n[Go+ CI/Test]   |    28: 27: . . . . . . . Type (\n[Go+ CI/Test]   |    28: 27: . . . . . . . . TypeName (\n[Go+ CI/Test]   |    28: 27: . . . . . . . . . IDENT string\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: string}\n[Go+ CI/Test]   |    28: 33: . . . . . . . . )\n[Go+ CI/Test]   |    28: 33: . . . . . . . )\n[Go+ CI/Test]   |    28: 33: . . . . . . )\n[Go+ CI/Test]   |    28: 33: . . . . . )\n[Go+ CI/Test]   |    28: 33: . . . . . \")\"\n[Go+ CI/Test]   |    28: 35: . . . . )\n[Go+ CI/Test]   |    28: 35: . . . . Result (\n[Go+ CI/Test]   |    28: 35: . . . . . TypeName (\n[Go+ CI/Test]   |    28: 35: . . . . . . IDENT int\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: int}\n[Go+ CI/Test]   |    28: 39: . . . . . )\n[Go+ CI/Test]   |    28: 39: . . . . )\n[Go+ CI/Test]   |    28: 39: . . . )\n[Go+ CI/Test]   |    28: 39: . . . Body (\n[Go+ CI/Test]   |    28: 39: . . . . \"{\"\n[Go+ CI/Test]   |    29:  2: . . . . StatementList (\n[Go+ CI/Test]   |    29:  2: . . . . . Statement (\n[Go+ CI/Test]   |    29:  2: . . . . . . ForStmt (\n[Go+ CI/Test]   |    29:  2: . . . . . . . \"for\"\n[Go+ CI/Test]   |    29:  6: . . . . . . . SimpleStmt (\n[Go+ CI/Test]   |    29:  6: . . . . . . . . ExpressionList (\n[Go+ CI/Test]   |    29:  6: . . . . . . . . . Expression (\n[Go+ CI/Test]   |    29:  6: . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    29:  6: . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    29:  6: . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    29:  6: . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |    29:  6: . . . . . . . . . . . . . . IDENT i\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: i}\n[Go+ CI/Test]   |    29:  7: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    29:  7: . . . . . . . . . . . . )\n[Go+ CI/Test]   |    29:  7: . . . . . . . . . . . )\n[Go+ CI/Test]   |    29:  7: . . . . . . . . . . )\n[Go+ CI/Test]   |    29:  7: . . . . . . . . . )\n[Go+ CI/Test]   |    29:  7: . . . . . . . . . \",\"\n[Go+ CI/Test]   |    29:  9: . . . . . . . . . Expression (\n[Go+ CI/Test]   |    29:  9: . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    29:  9: . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    29:  9: . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    29:  9: . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |    29:  9: . . . . . . . . . . . . . . IDENT v\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: v}\n[Go+ CI/Test]   |    29: 11: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    29: 11: . . . . . . . . . . . . )\n[Go+ CI/Test]   |    29: 11: . . . . . . . . . . . )\n[Go+ CI/Test]   |    29: 11: . . . . . . . . . . )\n[Go+ CI/Test]   |    29: 11: . . . . . . . . . )\n[Go+ CI/Test]   |    29: 11: . . . . . . . . )\n[Go+ CI/Test]   |    29: 11: . . . . . . . . \":=\"\n[Go+ CI/Test]   |    29: 14: . . . . . . . . \"range\"\n[Go+ CI/Test]   |    29: 20: . . . . . . . . Expression (\n[Go+ CI/Test]   |    29: 20: . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    29: 20: . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    29: 20: . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    29: 20: . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |    29: 20: . . . . . . . . . . . . . IDENT vs\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: vs}\n[Go+ CI/Test]   |    29: 23: . . . . . . . . . . . . )\n[Go+ CI/Test]   |    29: 23: . . . . . . . . . . . )\n[Go+ CI/Test]   |    29: 23: . . . . . . . . . . )\n[Go+ CI/Test]   |    29: 23: . . . . . . . . . )\n[Go+ CI/Test]   |    29: 23: . . . . . . . . )\n[Go+ CI/Test]   |    29: 23: . . . . . . . )\n[Go+ CI/Test]   |    29: 23: . . . . . . . BlockStmt (\n[Go+ CI/Test]   |    29: 23: . . . . . . . . \"{\"\n[Go+ CI/Test]   |    30:  3: . . . . . . . . StatementList (\n[Go+ CI/Test]   |    30:  3: . . . . . . . . . Statement (\n[Go+ CI/Test]   |    30:  3: . . . . . . . . . . IfStmt (\n[Go+ CI/Test]   |    30:  3: . . . . . . . . . . . \"if\"\n[Go+ CI/Test]   |    30:  6: . . . . . . . . . . . SimpleStmt (\n[Go+ CI/Test]   |    30:  6: . . . . . . . . . . . . ExpressionList (\n[Go+ CI/Test]   |    30:  6: . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |    30:  6: . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    30:  6: . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    30:  6: . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    30:  6: . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |    30:  6: . . . . . . . . . . . . . . . . . . IDENT v\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: v}\n[Go+ CI/Test]   |    30:  8: . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    30:  8: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    30:  8: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    30:  8: . . . . . . . . . . . . . . . \"==\"\n[Go+ CI/Test]   |    30: 11: . . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    30: 11: . . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    30: 11: . . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    30: 11: . . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |    30: 11: . . . . . . . . . . . . . . . . . . . IDENT t\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: t}\n[Go+ CI/Test]   |    30: 13: . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    30: 13: . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    30: 13: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    30: 13: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    30: 13: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    30: 13: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    30: 13: . . . . . . . . . . . . )\n[Go+ CI/Test]   |    30: 13: . . . . . . . . . . . )\n[Go+ CI/Test]   |    30: 13: . . . . . . . . . . . BlockStmt (\n[Go+ CI/Test]   |    30: 13: . . . . . . . . . . . . \"{\"\n[Go+ CI/Test]   |    31:  4: . . . . . . . . . . . . StatementList (\n[Go+ CI/Test]   |    31:  4: . . . . . . . . . . . . . Statement (\n[Go+ CI/Test]   |    31:  4: . . . . . . . . . . . . . . ReturnStmt (\n[Go+ CI/Test]   |    31:  4: . . . . . . . . . . . . . . . \"return\"\n[Go+ CI/Test]   |    31: 11: . . . . . . . . . . . . . . . ExpressionList (\n[Go+ CI/Test]   |    31: 11: . . . . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |    31: 11: . . . . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    31: 11: . . . . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    31: 11: . . . . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    31: 11: . . . . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |    31: 11: . . . . . . . . . . . . . . . . . . . . . IDENT i\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: i}\n[Go+ CI/Test]   |    31: 12: . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    31: 12: . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    31: 12: . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    31: 12: . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    31: 12: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    31: 12: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    31: 12: . . . . . . . . . . . . . . . \";\"\n[Go+ CI/Test]   |    32:  3: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    32:  3: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    32:  3: . . . . . . . . . . . . )\n[Go+ CI/Test]   |    32:  3: . . . . . . . . . . . . \"}\"\n[Go+ CI/Test]   |    32:  4: . . . . . . . . . . . )\n[Go+ CI/Test]   |    32:  4: . . . . . . . . . . . \";\"\n[Go+ CI/Test]   |    33:  2: . . . . . . . . . . )\n[Go+ CI/Test]   |    33:  2: . . . . . . . . . )\n[Go+ CI/Test]   |    33:  2: . . . . . . . . )\n[Go+ CI/Test]   |    33:  2: . . . . . . . . \"}\"\n[Go+ CI/Test]   |    33:  3: . . . . . . . )\n[Go+ CI/Test]   |    33:  3: . . . . . . . \";\"\n[Go+ CI/Test]   |    34:  2: . . . . . . )\n[Go+ CI/Test]   |    34:  2: . . . . . )\n[Go+ CI/Test]   |    34:  2: . . . . . Statement (\n[Go+ CI/Test]   |    34:  2: . . . . . . ReturnStmt (\n[Go+ CI/Test]   |    34:  2: . . . . . . . \"return\"\n[Go+ CI/Test]   |    34:  9: . . . . . . . ExpressionList (\n[Go+ CI/Test]   |    34:  9: . . . . . . . . Expression (\n[Go+ CI/Test]   |    34:  9: . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    34:  9: . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    34:  9: . . . . . . . . . . . \"-\"\n[Go+ CI/Test]   |    34: 10: . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    34: 10: . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    34: 10: . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: INT, Value: 1}\n[Go+ CI/Test]   |    34: 10: . . . . . . . . . . . . . . INT 1\n[Go+ CI/Test]   |    34: 11: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    34: 11: . . . . . . . . . . . . )\n[Go+ CI/Test]   |    34: 11: . . . . . . . . . . . )\n[Go+ CI/Test]   |    34: 11: . . . . . . . . . . )\n[Go+ CI/Test]   |    34: 11: . . . . . . . . . )\n[Go+ CI/Test]   |    34: 11: . . . . . . . . )\n[Go+ CI/Test]   |    34: 11: . . . . . . . )\n[Go+ CI/Test]   |    34: 11: . . . . . . . \";\"\n[Go+ CI/Test]   |    35:  1: . . . . . . )\n[Go+ CI/Test]   |    35:  1: . . . . . )\n[Go+ CI/Test]   |    35:  1: . . . . )\n[Go+ CI/Test]   |    35:  1: . . . . \"}\"\n[Go+ CI/Test]   |    35:  2: . . . )\n[Go+ CI/Test]   |    35:  2: . . . \";\"\n[Go+ CI/Test]   |    37:  1: . . . COMMENT\n[Go+ CI/Test]   |    38:  1: . . . COMMENT\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:3564: ast.FuncDecl{Name: Index, ...}\n[Go+ CI/Test]   |    39:  1: . . )\n[Go+ CI/Test]   |    39:  1: . )\n[Go+ CI/Test]   |    39:  1: . Declaration (\n[Go+ CI/Test]   |    39:  1: . . FunctionDecl (\n[Go+ CI/Test]   |    39:  1: . . . \"func\"\n[Go+ CI/Test]   |    39:  6: . . . IDENT Include\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: Include}\n[Go+ CI/Test]   |    39: 13: . . . Signature (\n[Go+ CI/Test]   |    39: 13: . . . . Parameters (\n[Go+ CI/Test]   |    39: 13: . . . . . \"(\"\n[Go+ CI/Test]   |    39: 14: . . . . . ParameterList (\n[Go+ CI/Test]   |    39: 14: . . . . . . ParamDeclOrNil (\n[Go+ CI/Test]   |    39: 14: . . . . . . . IDENT vs\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: vs}\n[Go+ CI/Test]   |    39: 17: . . . . . . . ArrayFieldOrTypeInstance (\n[Go+ CI/Test]   |    39: 17: . . . . . . . . \"[\"\n[Go+ CI/Test]   |    39: 18: . . . . . . . . \"]\"\n[Go+ CI/Test]   |    39: 19: . . . . . . . . Type (\n[Go+ CI/Test]   |    39: 19: . . . . . . . . . TypeName (\n[Go+ CI/Test]   |    39: 19: . . . . . . . . . . IDENT string\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: string}\n[Go+ CI/Test]   |    39: 25: . . . . . . . . . )\n[Go+ CI/Test]   |    39: 25: . . . . . . . . )\n[Go+ CI/Test]   |    39: 25: . . . . . . . )\n[Go+ CI/Test]   |    39: 25: . . . . . . )\n[Go+ CI/Test]   |    39: 25: . . . . . . \",\"\n[Go+ CI/Test]   |    39: 27: . . . . . . ParamDeclOrNil (\n[Go+ CI/Test]   |    39: 27: . . . . . . . IDENT t\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: t}\n[Go+ CI/Test]   |    39: 29: . . . . . . . Type (\n[Go+ CI/Test]   |    39: 29: . . . . . . . . TypeName (\n[Go+ CI/Test]   |    39: 29: . . . . . . . . . IDENT string\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: string}\n[Go+ CI/Test]   |    39: 35: . . . . . . . . )\n[Go+ CI/Test]   |    39: 35: . . . . . . . )\n[Go+ CI/Test]   |    39: 35: . . . . . . )\n[Go+ CI/Test]   |    39: 35: . . . . . )\n[Go+ CI/Test]   |    39: 35: . . . . . \")\"\n[Go+ CI/Test]   |    39: 37: . . . . )\n[Go+ CI/Test]   |    39: 37: . . . . Result (\n[Go+ CI/Test]   |    39: 37: . . . . . TypeName (\n[Go+ CI/Test]   |    39: 37: . . . . . . IDENT bool\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: bool}\n[Go+ CI/Test]   |    39: 42: . . . . . )\n[Go+ CI/Test]   |    39: 42: . . . . )\n[Go+ CI/Test]   |    39: 42: . . . )\n[Go+ CI/Test]   |    39: 42: . . . Body (\n[Go+ CI/Test]   |    39: 42: . . . . \"{\"\n[Go+ CI/Test]   |    40:  2: . . . . StatementList (\n[Go+ CI/Test]   |    40:  2: . . . . . Statement (\n[Go+ CI/Test]   |    40:  2: . . . . . . ReturnStmt (\n[Go+ CI/Test]   |    40:  2: . . . . . . . \"return\"\n[Go+ CI/Test]   |    40:  9: . . . . . . . ExpressionList (\n[Go+ CI/Test]   |    40:  9: . . . . . . . . Expression (\n[Go+ CI/Test]   |    40:  9: . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    40:  9: . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    40:  9: . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    40:  9: . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |    40:  9: . . . . . . . . . . . . . IDENT Index\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: Index}\n[Go+ CI/Test]   |    40: 14: . . . . . . . . . . . . )\n[Go+ CI/Test]   |    40: 14: . . . . . . . . . . . . CallOrConversion (\n[Go+ CI/Test]   |    40: 14: . . . . . . . . . . . . . \"(\"\n[Go+ CI/Test]   |    40: 15: . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |    40: 15: . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    40: 15: . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    40: 15: . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    40: 15: . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |    40: 15: . . . . . . . . . . . . . . . . . . IDENT vs\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: vs}\n[Go+ CI/Test]   |    40: 17: . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    40: 17: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    40: 17: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    40: 17: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    40: 17: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    40: 17: . . . . . . . . . . . . . \",\"\n[Go+ CI/Test]   |    40: 19: . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |    40: 19: . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    40: 19: . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    40: 19: . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    40: 19: . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |    40: 19: . . . . . . . . . . . . . . . . . . IDENT t\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: t}\n[Go+ CI/Test]   |    40: 20: . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    40: 20: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    40: 20: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    40: 20: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    40: 20: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    40: 20: . . . . . . . . . . . . . \")\"\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1878: ast.CallExpr{Fun: Index, Ellipsis: false, isCmd: false}\n[Go+ CI/Test]   |    40: 22: . . . . . . . . . . . . )\n[Go+ CI/Test]   |    40: 22: . . . . . . . . . . . )\n[Go+ CI/Test]   |    40: 22: . . . . . . . . . . )\n[Go+ CI/Test]   |    40: 22: . . . . . . . . . . \">=\"\n[Go+ CI/Test]   |    40: 25: . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    40: 25: . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    40: 25: . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    40: 25: . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: INT, Value: 0}\n[Go+ CI/Test]   |    40: 25: . . . . . . . . . . . . . . INT 0\n[Go+ CI/Test]   |    40: 26: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    40: 26: . . . . . . . . . . . . )\n[Go+ CI/Test]   |    40: 26: . . . . . . . . . . . )\n[Go+ CI/Test]   |    40: 26: . . . . . . . . . . )\n[Go+ CI/Test]   |    40: 26: . . . . . . . . . )\n[Go+ CI/Test]   |    40: 26: . . . . . . . . )\n[Go+ CI/Test]   |    40: 26: . . . . . . . )\n[Go+ CI/Test]   |    40: 26: . . . . . . . \";\"\n[Go+ CI/Test]   |    41:  1: . . . . . . )\n[Go+ CI/Test]   |    41:  1: . . . . . )\n[Go+ CI/Test]   |    41:  1: . . . . )\n[Go+ CI/Test]   |    41:  1: . . . . \"}\"\n[Go+ CI/Test]   |    41:  2: . . . )\n[Go+ CI/Test]   |    41:  2: . . . \";\"\n[Go+ CI/Test]   |    43:  1: . . . COMMENT\n[Go+ CI/Test]   |    44:  1: . . . COMMENT\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:3564: ast.FuncDecl{Name: Include, ...}\n[Go+ CI/Test]   |    45:  1: . . )\n[Go+ CI/Test]   |    45:  1: . )\n[Go+ CI/Test]   |    45:  1: . Declaration (\n[Go+ CI/Test]   |    45:  1: . . FunctionDecl (\n[Go+ CI/Test]   |    45:  1: . . . \"func\"\n[Go+ CI/Test]   |    45:  6: . . . IDENT Any\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: Any}\n[Go+ CI/Test]   |    45:  9: . . . Signature (\n[Go+ CI/Test]   |    45:  9: . . . . Parameters (\n[Go+ CI/Test]   |    45:  9: . . . . . \"(\"\n[Go+ CI/Test]   |    45: 10: . . . . . ParameterList (\n[Go+ CI/Test]   |    45: 10: . . . . . . ParamDeclOrNil (\n[Go+ CI/Test]   |    45: 10: . . . . . . . IDENT vs\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: vs}\n[Go+ CI/Test]   |    45: 13: . . . . . . . ArrayFieldOrTypeInstance (\n[Go+ CI/Test]   |    45: 13: . . . . . . . . \"[\"\n[Go+ CI/Test]   |    45: 14: . . . . . . . . \"]\"\n[Go+ CI/Test]   |    45: 15: . . . . . . . . Type (\n[Go+ CI/Test]   |    45: 15: . . . . . . . . . TypeName (\n[Go+ CI/Test]   |    45: 15: . . . . . . . . . . IDENT string\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: string}\n[Go+ CI/Test]   |    45: 21: . . . . . . . . . )\n[Go+ CI/Test]   |    45: 21: . . . . . . . . )\n[Go+ CI/Test]   |    45: 21: . . . . . . . )\n[Go+ CI/Test]   |    45: 21: . . . . . . )\n[Go+ CI/Test]   |    45: 21: . . . . . . \",\"\n[Go+ CI/Test]   |    45: 23: . . . . . . ParamDeclOrNil (\n[Go+ CI/Test]   |    45: 23: . . . . . . . IDENT f\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: f}\n[Go+ CI/Test]   |    45: 25: . . . . . . . Type (\n[Go+ CI/Test]   |    45: 25: . . . . . . . . FuncType (\n[Go+ CI/Test]   |    45: 25: . . . . . . . . . \"func\"\n[Go+ CI/Test]   |    45: 29: . . . . . . . . . Signature (\n[Go+ CI/Test]   |    45: 29: . . . . . . . . . . Parameters (\n[Go+ CI/Test]   |    45: 29: . . . . . . . . . . . \"(\"\n[Go+ CI/Test]   |    45: 30: . . . . . . . . . . . ParameterList (\n[Go+ CI/Test]   |    45: 30: . . . . . . . . . . . . ParamDeclOrNil (\n[Go+ CI/Test]   |    45: 30: . . . . . . . . . . . . . IDENT string\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: string}\n[Go+ CI/Test]   |    45: 36: . . . . . . . . . . . . )\n[Go+ CI/Test]   |    45: 36: . . . . . . . . . . . )\n[Go+ CI/Test]   |    45: 36: . . . . . . . . . . . \")\"\n[Go+ CI/Test]   |    45: 38: . . . . . . . . . . )\n[Go+ CI/Test]   |    45: 38: . . . . . . . . . . Result (\n[Go+ CI/Test]   |    45: 38: . . . . . . . . . . . TypeName (\n[Go+ CI/Test]   |    45: 38: . . . . . . . . . . . . IDENT bool\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: bool}\n[Go+ CI/Test]   |    45: 42: . . . . . . . . . . . )\n[Go+ CI/Test]   |    45: 42: . . . . . . . . . . )\n[Go+ CI/Test]   |    45: 42: . . . . . . . . . )\n[Go+ CI/Test]   |    45: 42: . . . . . . . . )\n[Go+ CI/Test]   |    45: 42: . . . . . . . )\n[Go+ CI/Test]   |    45: 42: . . . . . . )\n[Go+ CI/Test]   |    45: 42: . . . . . )\n[Go+ CI/Test]   |    45: 42: . . . . . \")\"\n[Go+ CI/Test]   |    45: 44: . . . . )\n[Go+ CI/Test]   |    45: 44: . . . . Result (\n[Go+ CI/Test]   |    45: 44: . . . . . TypeName (\n[Go+ CI/Test]   |    45: 44: . . . . . . IDENT bool\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: bool}\n[Go+ CI/Test]   |    45: 49: . . . . . )\n[Go+ CI/Test]   |    45: 49: . . . . )\n[Go+ CI/Test]   |    45: 49: . . . )\n[Go+ CI/Test]   |    45: 49: . . . Body (\n[Go+ CI/Test]   |    45: 49: . . . . \"{\"\n[Go+ CI/Test]   |    46:  2: . . . . StatementList (\n[Go+ CI/Test]   |    46:  2: . . . . . Statement (\n[Go+ CI/Test]   |    46:  2: . . . . . . ForStmt (\n[Go+ CI/Test]   |    46:  2: . . . . . . . \"for\"\n[Go+ CI/Test]   |    46:  6: . . . . . . . SimpleStmt (\n[Go+ CI/Test]   |    46:  6: . . . . . . . . ExpressionList (\n[Go+ CI/Test]   |    46:  6: . . . . . . . . . Expression (\n[Go+ CI/Test]   |    46:  6: . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    46:  6: . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    46:  6: . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    46:  6: . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |    46:  6: . . . . . . . . . . . . . . IDENT _\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: _}\n[Go+ CI/Test]   |    46:  7: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    46:  7: . . . . . . . . . . . . )\n[Go+ CI/Test]   |    46:  7: . . . . . . . . . . . )\n[Go+ CI/Test]   |    46:  7: . . . . . . . . . . )\n[Go+ CI/Test]   |    46:  7: . . . . . . . . . )\n[Go+ CI/Test]   |    46:  7: . . . . . . . . . \",\"\n[Go+ CI/Test]   |    46:  9: . . . . . . . . . Expression (\n[Go+ CI/Test]   |    46:  9: . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    46:  9: . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    46:  9: . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    46:  9: . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |    46:  9: . . . . . . . . . . . . . . IDENT v\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: v}\n[Go+ CI/Test]   |    46: 11: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    46: 11: . . . . . . . . . . . . )\n[Go+ CI/Test]   |    46: 11: . . . . . . . . . . . )\n[Go+ CI/Test]   |    46: 11: . . . . . . . . . . )\n[Go+ CI/Test]   |    46: 11: . . . . . . . . . )\n[Go+ CI/Test]   |    46: 11: . . . . . . . . )\n[Go+ CI/Test]   |    46: 11: . . . . . . . . \":=\"\n[Go+ CI/Test]   |    46: 14: . . . . . . . . \"range\"\n[Go+ CI/Test]   |    46: 20: . . . . . . . . Expression (\n[Go+ CI/Test]   |    46: 20: . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    46: 20: . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    46: 20: . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    46: 20: . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |    46: 20: . . . . . . . . . . . . . IDENT vs\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: vs}\n[Go+ CI/Test]   |    46: 23: . . . . . . . . . . . . )\n[Go+ CI/Test]   |    46: 23: . . . . . . . . . . . )\n[Go+ CI/Test]   |    46: 23: . . . . . . . . . . )\n[Go+ CI/Test]   |    46: 23: . . . . . . . . . )\n[Go+ CI/Test]   |    46: 23: . . . . . . . . )\n[Go+ CI/Test]   |    46: 23: . . . . . . . )\n[Go+ CI/Test]   |    46: 23: . . . . . . . BlockStmt (\n[Go+ CI/Test]   |    46: 23: . . . . . . . . \"{\"\n[Go+ CI/Test]   |    47:  3: . . . . . . . . StatementList (\n[Go+ CI/Test]   |    47:  3: . . . . . . . . . Statement (\n[Go+ CI/Test]   |    47:  3: . . . . . . . . . . IfStmt (\n[Go+ CI/Test]   |    47:  3: . . . . . . . . . . . \"if\"\n[Go+ CI/Test]   |    47:  6: . . . . . . . . . . . SimpleStmt (\n[Go+ CI/Test]   |    47:  6: . . . . . . . . . . . . ExpressionList (\n[Go+ CI/Test]   |    47:  6: . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |    47:  6: . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    47:  6: . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    47:  6: . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    47:  6: . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |    47:  6: . . . . . . . . . . . . . . . . . . IDENT f\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: f}\n[Go+ CI/Test]   |    47:  7: . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    47:  7: . . . . . . . . . . . . . . . . . CallOrConversion (\n[Go+ CI/Test]   |    47:  7: . . . . . . . . . . . . . . . . . . \"(\"\n[Go+ CI/Test]   |    47:  8: . . . . . . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |    47:  8: . . . . . . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    47:  8: . . . . . . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    47:  8: . . . . . . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    47:  8: . . . . . . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |    47:  8: . . . . . . . . . . . . . . . . . . . . . . . IDENT v\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: v}\n[Go+ CI/Test]   |    47:  9: . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    47:  9: . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    47:  9: . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    47:  9: . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    47:  9: . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    47:  9: . . . . . . . . . . . . . . . . . . \")\"\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1878: ast.CallExpr{Fun: f, Ellipsis: false, isCmd: false}\n[Go+ CI/Test]   |    47: 11: . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    47: 11: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    47: 11: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    47: 11: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    47: 11: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    47: 11: . . . . . . . . . . . . )\n[Go+ CI/Test]   |    47: 11: . . . . . . . . . . . )\n[Go+ CI/Test]   |    47: 11: . . . . . . . . . . . BlockStmt (\n[Go+ CI/Test]   |    47: 11: . . . . . . . . . . . . \"{\"\n[Go+ CI/Test]   |    48:  4: . . . . . . . . . . . . StatementList (\n[Go+ CI/Test]   |    48:  4: . . . . . . . . . . . . . Statement (\n[Go+ CI/Test]   |    48:  4: . . . . . . . . . . . . . . ReturnStmt (\n[Go+ CI/Test]   |    48:  4: . . . . . . . . . . . . . . . \"return\"\n[Go+ CI/Test]   |    48: 11: . . . . . . . . . . . . . . . ExpressionList (\n[Go+ CI/Test]   |    48: 11: . . . . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |    48: 11: . . . . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    48: 11: . . . . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    48: 11: . . . . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    48: 11: . . . . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |    48: 11: . . . . . . . . . . . . . . . . . . . . . IDENT true\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: true}\n[Go+ CI/Test]   |    48: 15: . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    48: 15: . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    48: 15: . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    48: 15: . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    48: 15: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    48: 15: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    48: 15: . . . . . . . . . . . . . . . \";\"\n[Go+ CI/Test]   |    49:  3: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    49:  3: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    49:  3: . . . . . . . . . . . . )\n[Go+ CI/Test]   |    49:  3: . . . . . . . . . . . . \"}\"\n[Go+ CI/Test]   |    49:  4: . . . . . . . . . . . )\n[Go+ CI/Test]   |    49:  4: . . . . . . . . . . . \";\"\n[Go+ CI/Test]   |    50:  2: . . . . . . . . . . )\n[Go+ CI/Test]   |    50:  2: . . . . . . . . . )\n[Go+ CI/Test]   |    50:  2: . . . . . . . . )\n[Go+ CI/Test]   |    50:  2: . . . . . . . . \"}\"\n[Go+ CI/Test]   |    50:  3: . . . . . . . )\n[Go+ CI/Test]   |    50:  3: . . . . . . . \";\"\n[Go+ CI/Test]   |    51:  2: . . . . . . )\n[Go+ CI/Test]   |    51:  2: . . . . . )\n[Go+ CI/Test]   |    51:  2: . . . . . Statement (\n[Go+ CI/Test]   |    51:  2: . . . . . . ReturnStmt (\n[Go+ CI/Test]   |    51:  2: . . . . . . . \"return\"\n[Go+ CI/Test]   |    51:  9: . . . . . . . ExpressionList (\n[Go+ CI/Test]   |    51:  9: . . . . . . . . Expression (\n[Go+ CI/Test]   |    51:  9: . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    51:  9: . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    51:  9: . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    51:  9: . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |    51:  9: . . . . . . . . . . . . . IDENT false\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: false}\n[Go+ CI/Test]   |    51: 14: . . . . . . . . . . . . )\n[Go+ CI/Test]   |    51: 14: . . . . . . . . . . . )\n[Go+ CI/Test]   |    51: 14: . . . . . . . . . . )\n[Go+ CI/Test]   |    51: 14: . . . . . . . . . )\n[Go+ CI/Test]   |    51: 14: . . . . . . . . )\n[Go+ CI/Test]   |    51: 14: . . . . . . . )\n[Go+ CI/Test]   |    51: 14: . . . . . . . \";\"\n[Go+ CI/Test]   |    52:  1: . . . . . . )\n[Go+ CI/Test]   |    52:  1: . . . . . )\n[Go+ CI/Test]   |    52:  1: . . . . )\n[Go+ CI/Test]   |    52:  1: . . . . \"}\"\n[Go+ CI/Test]   |    52:  2: . . . )\n[Go+ CI/Test]   |    52:  2: . . . \";\"\n[Go+ CI/Test]   |    54:  1: . . . COMMENT\n[Go+ CI/Test]   |    55:  1: . . . COMMENT\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:3564: ast.FuncDecl{Name: Any, ...}\n[Go+ CI/Test]   |    56:  1: . . )\n[Go+ CI/Test]   |    56:  1: . )\n[Go+ CI/Test]   |    56:  1: . Declaration (\n[Go+ CI/Test]   |    56:  1: . . FunctionDecl (\n[Go+ CI/Test]   |    56:  1: . . . \"func\"\n[Go+ CI/Test]   |    56:  6: . . . IDENT All\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: All}\n[Go+ CI/Test]   |    56:  9: . . . Signature (\n[Go+ CI/Test]   |    56:  9: . . . . Parameters (\n[Go+ CI/Test]   |    56:  9: . . . . . \"(\"\n[Go+ CI/Test]   |    56: 10: . . . . . ParameterList (\n[Go+ CI/Test]   |    56: 10: . . . . . . ParamDeclOrNil (\n[Go+ CI/Test]   |    56: 10: . . . . . . . IDENT vs\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: vs}\n[Go+ CI/Test]   |    56: 13: . . . . . . . ArrayFieldOrTypeInstance (\n[Go+ CI/Test]   |    56: 13: . . . . . . . . \"[\"\n[Go+ CI/Test]   |    56: 14: . . . . . . . . \"]\"\n[Go+ CI/Test]   |    56: 15: . . . . . . . . Type (\n[Go+ CI/Test]   |    56: 15: . . . . . . . . . TypeName (\n[Go+ CI/Test]   |    56: 15: . . . . . . . . . . IDENT string\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: string}\n[Go+ CI/Test]   |    56: 21: . . . . . . . . . )\n[Go+ CI/Test]   |    56: 21: . . . . . . . . )\n[Go+ CI/Test]   |    56: 21: . . . . . . . )\n[Go+ CI/Test]   |    56: 21: . . . . . . )\n[Go+ CI/Test]   |    56: 21: . . . . . . \",\"\n[Go+ CI/Test]   |    56: 23: . . . . . . ParamDeclOrNil (\n[Go+ CI/Test]   |    56: 23: . . . . . . . IDENT f\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: f}\n[Go+ CI/Test]   |    56: 25: . . . . . . . Type (\n[Go+ CI/Test]   |    56: 25: . . . . . . . . FuncType (\n[Go+ CI/Test]   |    56: 25: . . . . . . . . . \"func\"\n[Go+ CI/Test]   |    56: 29: . . . . . . . . . Signature (\n[Go+ CI/Test]   |    56: 29: . . . . . . . . . . Parameters (\n[Go+ CI/Test]   |    56: 29: . . . . . . . . . . . \"(\"\n[Go+ CI/Test]   |    56: 30: . . . . . . . . . . . ParameterList (\n[Go+ CI/Test]   |    56: 30: . . . . . . . . . . . . ParamDeclOrNil (\n[Go+ CI/Test]   |    56: 30: . . . . . . . . . . . . . IDENT string\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: string}\n[Go+ CI/Test]   |    56: 36: . . . . . . . . . . . . )\n[Go+ CI/Test]   |    56: 36: . . . . . . . . . . . )\n[Go+ CI/Test]   |    56: 36: . . . . . . . . . . . \")\"\n[Go+ CI/Test]   |    56: 38: . . . . . . . . . . )\n[Go+ CI/Test]   |    56: 38: . . . . . . . . . . Result (\n[Go+ CI/Test]   |    56: 38: . . . . . . . . . . . TypeName (\n[Go+ CI/Test]   |    56: 38: . . . . . . . . . . . . IDENT bool\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: bool}\n[Go+ CI/Test]   |    56: 42: . . . . . . . . . . . )\n[Go+ CI/Test]   |    56: 42: . . . . . . . . . . )\n[Go+ CI/Test]   |    56: 42: . . . . . . . . . )\n[Go+ CI/Test]   |    56: 42: . . . . . . . . )\n[Go+ CI/Test]   |    56: 42: . . . . . . . )\n[Go+ CI/Test]   |    56: 42: . . . . . . )\n[Go+ CI/Test]   |    56: 42: . . . . . )\n[Go+ CI/Test]   |    56: 42: . . . . . \")\"\n[Go+ CI/Test]   |    56: 44: . . . . )\n[Go+ CI/Test]   |    56: 44: . . . . Result (\n[Go+ CI/Test]   |    56: 44: . . . . . TypeName (\n[Go+ CI/Test]   |    56: 44: . . . . . . IDENT bool\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: bool}\n[Go+ CI/Test]   |    56: 49: . . . . . )\n[Go+ CI/Test]   |    56: 49: . . . . )\n[Go+ CI/Test]   |    56: 49: . . . )\n[Go+ CI/Test]   |    56: 49: . . . Body (\n[Go+ CI/Test]   |    56: 49: . . . . \"{\"\n[Go+ CI/Test]   |    57:  2: . . . . StatementList (\n[Go+ CI/Test]   |    57:  2: . . . . . Statement (\n[Go+ CI/Test]   |    57:  2: . . . . . . ForStmt (\n[Go+ CI/Test]   |    57:  2: . . . . . . . \"for\"\n[Go+ CI/Test]   |    57:  6: . . . . . . . SimpleStmt (\n[Go+ CI/Test]   |    57:  6: . . . . . . . . ExpressionList (\n[Go+ CI/Test]   |    57:  6: . . . . . . . . . Expression (\n[Go+ CI/Test]   |    57:  6: . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    57:  6: . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    57:  6: . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    57:  6: . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |    57:  6: . . . . . . . . . . . . . . IDENT _\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: _}\n[Go+ CI/Test]   |    57:  7: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    57:  7: . . . . . . . . . . . . )\n[Go+ CI/Test]   |    57:  7: . . . . . . . . . . . )\n[Go+ CI/Test]   |    57:  7: . . . . . . . . . . )\n[Go+ CI/Test]   |    57:  7: . . . . . . . . . )\n[Go+ CI/Test]   |    57:  7: . . . . . . . . . \",\"\n[Go+ CI/Test]   |    57:  9: . . . . . . . . . Expression (\n[Go+ CI/Test]   |    57:  9: . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    57:  9: . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    57:  9: . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    57:  9: . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |    57:  9: . . . . . . . . . . . . . . IDENT v\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: v}\n[Go+ CI/Test]   |    57: 11: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    57: 11: . . . . . . . . . . . . )\n[Go+ CI/Test]   |    57: 11: . . . . . . . . . . . )\n[Go+ CI/Test]   |    57: 11: . . . . . . . . . . )\n[Go+ CI/Test]   |    57: 11: . . . . . . . . . )\n[Go+ CI/Test]   |    57: 11: . . . . . . . . )\n[Go+ CI/Test]   |    57: 11: . . . . . . . . \":=\"\n[Go+ CI/Test]   |    57: 14: . . . . . . . . \"range\"\n[Go+ CI/Test]   |    57: 20: . . . . . . . . Expression (\n[Go+ CI/Test]   |    57: 20: . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    57: 20: . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    57: 20: . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    57: 20: . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |    57: 20: . . . . . . . . . . . . . IDENT vs\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: vs}\n[Go+ CI/Test]   |    57: 23: . . . . . . . . . . . . )\n[Go+ CI/Test]   |    57: 23: . . . . . . . . . . . )\n[Go+ CI/Test]   |    57: 23: . . . . . . . . . . )\n[Go+ CI/Test]   |    57: 23: . . . . . . . . . )\n[Go+ CI/Test]   |    57: 23: . . . . . . . . )\n[Go+ CI/Test]   |    57: 23: . . . . . . . )\n[Go+ CI/Test]   |    57: 23: . . . . . . . BlockStmt (\n[Go+ CI/Test]   |    57: 23: . . . . . . . . \"{\"\n[Go+ CI/Test]   |    58:  3: . . . . . . . . StatementList (\n[Go+ CI/Test]   |    58:  3: . . . . . . . . . Statement (\n[Go+ CI/Test]   |    58:  3: . . . . . . . . . . IfStmt (\n[Go+ CI/Test]   |    58:  3: . . . . . . . . . . . \"if\"\n[Go+ CI/Test]   |    58:  6: . . . . . . . . . . . SimpleStmt (\n[Go+ CI/Test]   |    58:  6: . . . . . . . . . . . . ExpressionList (\n[Go+ CI/Test]   |    58:  6: . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |    58:  6: . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    58:  6: . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    58:  6: . . . . . . . . . . . . . . . . \"!\"\n[Go+ CI/Test]   |    58:  7: . . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    58:  7: . . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    58:  7: . . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |    58:  7: . . . . . . . . . . . . . . . . . . . IDENT f\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: f}\n[Go+ CI/Test]   |    58:  8: . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    58:  8: . . . . . . . . . . . . . . . . . . CallOrConversion (\n[Go+ CI/Test]   |    58:  8: . . . . . . . . . . . . . . . . . . . \"(\"\n[Go+ CI/Test]   |    58:  9: . . . . . . . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |    58:  9: . . . . . . . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    58:  9: . . . . . . . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    58:  9: . . . . . . . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    58:  9: . . . . . . . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |    58:  9: . . . . . . . . . . . . . . . . . . . . . . . . IDENT v\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: v}\n[Go+ CI/Test]   |    58: 10: . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    58: 10: . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    58: 10: . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    58: 10: . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    58: 10: . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    58: 10: . . . . . . . . . . . . . . . . . . . \")\"\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1878: ast.CallExpr{Fun: f, Ellipsis: false, isCmd: false}\n[Go+ CI/Test]   |    58: 12: . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    58: 12: . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    58: 12: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    58: 12: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    58: 12: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    58: 12: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    58: 12: . . . . . . . . . . . . )\n[Go+ CI/Test]   |    58: 12: . . . . . . . . . . . )\n[Go+ CI/Test]   |    58: 12: . . . . . . . . . . . BlockStmt (\n[Go+ CI/Test]   |    58: 12: . . . . . . . . . . . . \"{\"\n[Go+ CI/Test]   |    59:  4: . . . . . . . . . . . . StatementList (\n[Go+ CI/Test]   |    59:  4: . . . . . . . . . . . . . Statement (\n[Go+ CI/Test]   |    59:  4: . . . . . . . . . . . . . . ReturnStmt (\n[Go+ CI/Test]   |    59:  4: . . . . . . . . . . . . . . . \"return\"\n[Go+ CI/Test]   |    59: 11: . . . . . . . . . . . . . . . ExpressionList (\n[Go+ CI/Test]   |    59: 11: . . . . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |    59: 11: . . . . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    59: 11: . . . . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    59: 11: . . . . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    59: 11: . . . . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |    59: 11: . . . . . . . . . . . . . . . . . . . . . IDENT false\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: false}\n[Go+ CI/Test]   |    59: 16: . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    59: 16: . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    59: 16: . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    59: 16: . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    59: 16: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    59: 16: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    59: 16: . . . . . . . . . . . . . . . \";\"\n[Go+ CI/Test]   |    60:  3: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    60:  3: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    60:  3: . . . . . . . . . . . . )\n[Go+ CI/Test]   |    60:  3: . . . . . . . . . . . . \"}\"\n[Go+ CI/Test]   |    60:  4: . . . . . . . . . . . )\n[Go+ CI/Test]   |    60:  4: . . . . . . . . . . . \";\"\n[Go+ CI/Test]   |    61:  2: . . . . . . . . . . )\n[Go+ CI/Test]   |    61:  2: . . . . . . . . . )\n[Go+ CI/Test]   |    61:  2: . . . . . . . . )\n[Go+ CI/Test]   |    61:  2: . . . . . . . . \"}\"\n[Go+ CI/Test]   |    61:  3: . . . . . . . )\n[Go+ CI/Test]   |    61:  3: . . . . . . . \";\"\n[Go+ CI/Test]   |    62:  2: . . . . . . )\n[Go+ CI/Test]   |    62:  2: . . . . . )\n[Go+ CI/Test]   |    62:  2: . . . . . Statement (\n[Go+ CI/Test]   |    62:  2: . . . . . . ReturnStmt (\n[Go+ CI/Test]   |    62:  2: . . . . . . . \"return\"\n[Go+ CI/Test]   |    62:  9: . . . . . . . ExpressionList (\n[Go+ CI/Test]   |    62:  9: . . . . . . . . Expression (\n[Go+ CI/Test]   |    62:  9: . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    62:  9: . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    62:  9: . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    62:  9: . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |    62:  9: . . . . . . . . . . . . . IDENT true\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: true}\n[Go+ CI/Test]   |    62: 13: . . . . . . . . . . . . )\n[Go+ CI/Test]   |    62: 13: . . . . . . . . . . . )\n[Go+ CI/Test]   |    62: 13: . . . . . . . . . . )\n[Go+ CI/Test]   |    62: 13: . . . . . . . . . )\n[Go+ CI/Test]   |    62: 13: . . . . . . . . )\n[Go+ CI/Test]   |    62: 13: . . . . . . . )\n[Go+ CI/Test]   |    62: 13: . . . . . . . \";\"\n[Go+ CI/Test]   |    63:  1: . . . . . . )\n[Go+ CI/Test]   |    63:  1: . . . . . )\n[Go+ CI/Test]   |    63:  1: . . . . )\n[Go+ CI/Test]   |    63:  1: . . . . \"}\"\n[Go+ CI/Test]   |    63:  2: . . . )\n[Go+ CI/Test]   |    63:  2: . . . \";\"\n[Go+ CI/Test]   |    65:  1: . . . COMMENT\n[Go+ CI/Test]   |    66:  1: . . . COMMENT\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:3564: ast.FuncDecl{Name: All, ...}\n[Go+ CI/Test]   |    67:  1: . . )\n[Go+ CI/Test]   |    67:  1: . )\n[Go+ CI/Test]   |    67:  1: . Declaration (\n[Go+ CI/Test]   |    67:  1: . . FunctionDecl (\n[Go+ CI/Test]   |    67:  1: . . . \"func\"\n[Go+ CI/Test]   |    67:  6: . . . IDENT Filter\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: Filter}\n[Go+ CI/Test]   |    67: 12: . . . Signature (\n[Go+ CI/Test]   |    67: 12: . . . . Parameters (\n[Go+ CI/Test]   |    67: 12: . . . . . \"(\"\n[Go+ CI/Test]   |    67: 13: . . . . . ParameterList (\n[Go+ CI/Test]   |    67: 13: . . . . . . ParamDeclOrNil (\n[Go+ CI/Test]   |    67: 13: . . . . . . . IDENT vs\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: vs}\n[Go+ CI/Test]   |    67: 16: . . . . . . . ArrayFieldOrTypeInstance (\n[Go+ CI/Test]   |    67: 16: . . . . . . . . \"[\"\n[Go+ CI/Test]   |    67: 17: . . . . . . . . \"]\"\n[Go+ CI/Test]   |    67: 18: . . . . . . . . Type (\n[Go+ CI/Test]   |    67: 18: . . . . . . . . . TypeName (\n[Go+ CI/Test]   |    67: 18: . . . . . . . . . . IDENT string\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: string}\n[Go+ CI/Test]   |    67: 24: . . . . . . . . . )\n[Go+ CI/Test]   |    67: 24: . . . . . . . . )\n[Go+ CI/Test]   |    67: 24: . . . . . . . )\n[Go+ CI/Test]   |    67: 24: . . . . . . )\n[Go+ CI/Test]   |    67: 24: . . . . . . \",\"\n[Go+ CI/Test]   |    67: 26: . . . . . . ParamDeclOrNil (\n[Go+ CI/Test]   |    67: 26: . . . . . . . IDENT f\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: f}\n[Go+ CI/Test]   |    67: 28: . . . . . . . Type (\n[Go+ CI/Test]   |    67: 28: . . . . . . . . FuncType (\n[Go+ CI/Test]   |    67: 28: . . . . . . . . . \"func\"\n[Go+ CI/Test]   |    67: 32: . . . . . . . . . Signature (\n[Go+ CI/Test]   |    67: 32: . . . . . . . . . . Parameters (\n[Go+ CI/Test]   |    67: 32: . . . . . . . . . . . \"(\"\n[Go+ CI/Test]   |    67: 33: . . . . . . . . . . . ParameterList (\n[Go+ CI/Test]   |    67: 33: . . . . . . . . . . . . ParamDeclOrNil (\n[Go+ CI/Test]   |    67: 33: . . . . . . . . . . . . . IDENT string\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: string}\n[Go+ CI/Test]   |    67: 39: . . . . . . . . . . . . )\n[Go+ CI/Test]   |    67: 39: . . . . . . . . . . . )\n[Go+ CI/Test]   |    67: 39: . . . . . . . . . . . \")\"\n[Go+ CI/Test]   |    67: 41: . . . . . . . . . . )\n[Go+ CI/Test]   |    67: 41: . . . . . . . . . . Result (\n[Go+ CI/Test]   |    67: 41: . . . . . . . . . . . TypeName (\n[Go+ CI/Test]   |    67: 41: . . . . . . . . . . . . IDENT bool\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: bool}\n[Go+ CI/Test]   |    67: 45: . . . . . . . . . . . )\n[Go+ CI/Test]   |    67: 45: . . . . . . . . . . )\n[Go+ CI/Test]   |    67: 45: . . . . . . . . . )\n[Go+ CI/Test]   |    67: 45: . . . . . . . . )\n[Go+ CI/Test]   |    67: 45: . . . . . . . )\n[Go+ CI/Test]   |    67: 45: . . . . . . )\n[Go+ CI/Test]   |    67: 45: . . . . . )\n[Go+ CI/Test]   |    67: 45: . . . . . \")\"\n[Go+ CI/Test]   |    67: 47: . . . . )\n[Go+ CI/Test]   |    67: 47: . . . . Result (\n[Go+ CI/Test]   |    67: 47: . . . . . ArrayType (\n[Go+ CI/Test]   |    67: 47: . . . . . . \"[\"\n[Go+ CI/Test]   |    67: 48: . . . . . . \"]\"\n[Go+ CI/Test]   |    67: 49: . . . . . . Type (\n[Go+ CI/Test]   |    67: 49: . . . . . . . TypeName (\n[Go+ CI/Test]   |    67: 49: . . . . . . . . IDENT string\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: string}\n[Go+ CI/Test]   |    67: 56: . . . . . . . )\n[Go+ CI/Test]   |    67: 56: . . . . . . )\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:870: ast.ArrayType{Len: <nil>, Elt: string}\n[Go+ CI/Test]   |    67: 56: . . . . . )\n[Go+ CI/Test]   |    67: 56: . . . . )\n[Go+ CI/Test]   |    67: 56: . . . )\n[Go+ CI/Test]   |    67: 56: . . . Body (\n[Go+ CI/Test]   |    67: 56: . . . . \"{\"\n[Go+ CI/Test]   |    68:  2: . . . . StatementList (\n[Go+ CI/Test]   |    68:  2: . . . . . Statement (\n[Go+ CI/Test]   |    68:  2: . . . . . . SimpleStmt (\n[Go+ CI/Test]   |    68:  2: . . . . . . . ExpressionList (\n[Go+ CI/Test]   |    68:  2: . . . . . . . . Expression (\n[Go+ CI/Test]   |    68:  2: . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    68:  2: . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    68:  2: . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    68:  2: . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |    68:  2: . . . . . . . . . . . . . IDENT vsf\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: vsf}\n[Go+ CI/Test]   |    68:  6: . . . . . . . . . . . . )\n[Go+ CI/Test]   |    68:  6: . . . . . . . . . . . )\n[Go+ CI/Test]   |    68:  6: . . . . . . . . . . )\n[Go+ CI/Test]   |    68:  6: . . . . . . . . . )\n[Go+ CI/Test]   |    68:  6: . . . . . . . . )\n[Go+ CI/Test]   |    68:  6: . . . . . . . )\n[Go+ CI/Test]   |    68:  6: . . . . . . . \":=\"\n[Go+ CI/Test]   |    68:  9: . . . . . . . ExpressionList (\n[Go+ CI/Test]   |    68:  9: . . . . . . . . Expression (\n[Go+ CI/Test]   |    68:  9: . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    68:  9: . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    68:  9: . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    68:  9: . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |    68:  9: . . . . . . . . . . . . . IDENT make\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: make}\n[Go+ CI/Test]   |    68: 13: . . . . . . . . . . . . )\n[Go+ CI/Test]   |    68: 13: . . . . . . . . . . . . CallOrConversion (\n[Go+ CI/Test]   |    68: 13: . . . . . . . . . . . . . \"(\"\n[Go+ CI/Test]   |    68: 14: . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |    68: 14: . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    68: 14: . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    68: 14: . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    68: 14: . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |    68: 14: . . . . . . . . . . . . . . . . . . ArrayType (\n[Go+ CI/Test]   |    68: 14: . . . . . . . . . . . . . . . . . . . \"[\"\n[Go+ CI/Test]   |    68: 15: . . . . . . . . . . . . . . . . . . . \"]\"\n[Go+ CI/Test]   |    68: 16: . . . . . . . . . . . . . . . . . . . TypeName (\n[Go+ CI/Test]   |    68: 16: . . . . . . . . . . . . . . . . . . . . IDENT string\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: string}\n[Go+ CI/Test]   |    68: 22: . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:870: ast.ArrayType{Len: <nil>, Elt: string}\n[Go+ CI/Test]   |    68: 22: . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    68: 22: . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    68: 22: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    68: 22: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    68: 22: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    68: 22: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    68: 22: . . . . . . . . . . . . . \",\"\n[Go+ CI/Test]   |    68: 24: . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |    68: 24: . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    68: 24: . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    68: 24: . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    68: 24: . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: INT, Value: 0}\n[Go+ CI/Test]   |    68: 24: . . . . . . . . . . . . . . . . . . INT 0\n[Go+ CI/Test]   |    68: 25: . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    68: 25: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    68: 25: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    68: 25: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    68: 25: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    68: 25: . . . . . . . . . . . . . \")\"\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1878: ast.CallExpr{Fun: make, Ellipsis: false, isCmd: false}\n[Go+ CI/Test]   |    68: 26: . . . . . . . . . . . . )\n[Go+ CI/Test]   |    68: 26: . . . . . . . . . . . )\n[Go+ CI/Test]   |    68: 26: . . . . . . . . . . )\n[Go+ CI/Test]   |    68: 26: . . . . . . . . . )\n[Go+ CI/Test]   |    68: 26: . . . . . . . . )\n[Go+ CI/Test]   |    68: 26: . . . . . . . )\n[Go+ CI/Test]   |    68: 26: . . . . . . )\n[Go+ CI/Test]   |    68: 26: . . . . . . \";\"\n[Go+ CI/Test]   |    69:  2: . . . . . )\n[Go+ CI/Test]   |    69:  2: . . . . . Statement (\n[Go+ CI/Test]   |    69:  2: . . . . . . ForStmt (\n[Go+ CI/Test]   |    69:  2: . . . . . . . \"for\"\n[Go+ CI/Test]   |    69:  6: . . . . . . . SimpleStmt (\n[Go+ CI/Test]   |    69:  6: . . . . . . . . ExpressionList (\n[Go+ CI/Test]   |    69:  6: . . . . . . . . . Expression (\n[Go+ CI/Test]   |    69:  6: . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    69:  6: . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    69:  6: . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    69:  6: . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |    69:  6: . . . . . . . . . . . . . . IDENT _\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: _}\n[Go+ CI/Test]   |    69:  7: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    69:  7: . . . . . . . . . . . . )\n[Go+ CI/Test]   |    69:  7: . . . . . . . . . . . )\n[Go+ CI/Test]   |    69:  7: . . . . . . . . . . )\n[Go+ CI/Test]   |    69:  7: . . . . . . . . . )\n[Go+ CI/Test]   |    69:  7: . . . . . . . . . \",\"\n[Go+ CI/Test]   |    69:  9: . . . . . . . . . Expression (\n[Go+ CI/Test]   |    69:  9: . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    69:  9: . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    69:  9: . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    69:  9: . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |    69:  9: . . . . . . . . . . . . . . IDENT v\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: v}\n[Go+ CI/Test]   |    69: 11: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    69: 11: . . . . . . . . . . . . )\n[Go+ CI/Test]   |    69: 11: . . . . . . . . . . . )\n[Go+ CI/Test]   |    69: 11: . . . . . . . . . . )\n[Go+ CI/Test]   |    69: 11: . . . . . . . . . )\n[Go+ CI/Test]   |    69: 11: . . . . . . . . )\n[Go+ CI/Test]   |    69: 11: . . . . . . . . \":=\"\n[Go+ CI/Test]   |    69: 14: . . . . . . . . \"range\"\n[Go+ CI/Test]   |    69: 20: . . . . . . . . Expression (\n[Go+ CI/Test]   |    69: 20: . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    69: 20: . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    69: 20: . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    69: 20: . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |    69: 20: . . . . . . . . . . . . . IDENT vs\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: vs}\n[Go+ CI/Test]   |    69: 23: . . . . . . . . . . . . )\n[Go+ CI/Test]   |    69: 23: . . . . . . . . . . . )\n[Go+ CI/Test]   |    69: 23: . . . . . . . . . . )\n[Go+ CI/Test]   |    69: 23: . . . . . . . . . )\n[Go+ CI/Test]   |    69: 23: . . . . . . . . )\n[Go+ CI/Test]   |    69: 23: . . . . . . . )\n[Go+ CI/Test]   |    69: 23: . . . . . . . BlockStmt (\n[Go+ CI/Test]   |    69: 23: . . . . . . . . \"{\"\n[Go+ CI/Test]   |    70:  3: . . . . . . . . StatementList (\n[Go+ CI/Test]   |    70:  3: . . . . . . . . . Statement (\n[Go+ CI/Test]   |    70:  3: . . . . . . . . . . IfStmt (\n[Go+ CI/Test]   |    70:  3: . . . . . . . . . . . \"if\"\n[Go+ CI/Test]   |    70:  6: . . . . . . . . . . . SimpleStmt (\n[Go+ CI/Test]   |    70:  6: . . . . . . . . . . . . ExpressionList (\n[Go+ CI/Test]   |    70:  6: . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |    70:  6: . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    70:  6: . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    70:  6: . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    70:  6: . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |    70:  6: . . . . . . . . . . . . . . . . . . IDENT f\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: f}\n[Go+ CI/Test]   |    70:  7: . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    70:  7: . . . . . . . . . . . . . . . . . CallOrConversion (\n[Go+ CI/Test]   |    70:  7: . . . . . . . . . . . . . . . . . . \"(\"\n[Go+ CI/Test]   |    70:  8: . . . . . . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |    70:  8: . . . . . . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    70:  8: . . . . . . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    70:  8: . . . . . . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    70:  8: . . . . . . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |    70:  8: . . . . . . . . . . . . . . . . . . . . . . . IDENT v\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: v}\n[Go+ CI/Test]   |    70:  9: . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    70:  9: . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    70:  9: . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    70:  9: . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    70:  9: . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    70:  9: . . . . . . . . . . . . . . . . . . \")\"\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1878: ast.CallExpr{Fun: f, Ellipsis: false, isCmd: false}\n[Go+ CI/Test]   |    70: 11: . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    70: 11: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    70: 11: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    70: 11: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    70: 11: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    70: 11: . . . . . . . . . . . . )\n[Go+ CI/Test]   |    70: 11: . . . . . . . . . . . )\n[Go+ CI/Test]   |    70: 11: . . . . . . . . . . . BlockStmt (\n[Go+ CI/Test]   |    70: 11: . . . . . . . . . . . . \"{\"\n[Go+ CI/Test]   |    71:  4: . . . . . . . . . . . . StatementList (\n[Go+ CI/Test]   |    71:  4: . . . . . . . . . . . . . Statement (\n[Go+ CI/Test]   |    71:  4: . . . . . . . . . . . . . . SimpleStmt (\n[Go+ CI/Test]   |    71:  4: . . . . . . . . . . . . . . . ExpressionList (\n[Go+ CI/Test]   |    71:  4: . . . . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |    71:  4: . . . . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    71:  4: . . . . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    71:  4: . . . . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    71:  4: . . . . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |    71:  4: . . . . . . . . . . . . . . . . . . . . . IDENT vsf\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: vsf}\n[Go+ CI/Test]   |    71:  8: . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    71:  8: . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    71:  8: . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    71:  8: . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    71:  8: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    71:  8: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    71:  8: . . . . . . . . . . . . . . . \"=\"\n[Go+ CI/Test]   |    71: 10: . . . . . . . . . . . . . . . ExpressionList (\n[Go+ CI/Test]   |    71: 10: . . . . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |    71: 10: . . . . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    71: 10: . . . . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    71: 10: . . . . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    71: 10: . . . . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |    71: 10: . . . . . . . . . . . . . . . . . . . . . IDENT append\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: append}\n[Go+ CI/Test]   |    71: 16: . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    71: 16: . . . . . . . . . . . . . . . . . . . . CallOrConversion (\n[Go+ CI/Test]   |    71: 16: . . . . . . . . . . . . . . . . . . . . . \"(\"\n[Go+ CI/Test]   |    71: 17: . . . . . . . . . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |    71: 17: . . . . . . . . . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    71: 17: . . . . . . . . . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    71: 17: . . . . . . . . . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    71: 17: . . . . . . . . . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |    71: 17: . . . . . . . . . . . . . . . . . . . . . . . . . . IDENT vsf\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: vsf}\n[Go+ CI/Test]   |    71: 20: . . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    71: 20: . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    71: 20: . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    71: 20: . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    71: 20: . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    71: 20: . . . . . . . . . . . . . . . . . . . . . \",\"\n[Go+ CI/Test]   |    71: 22: . . . . . . . . . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |    71: 22: . . . . . . . . . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    71: 22: . . . . . . . . . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    71: 22: . . . . . . . . . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    71: 22: . . . . . . . . . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |    71: 22: . . . . . . . . . . . . . . . . . . . . . . . . . . IDENT v\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: v}\n[Go+ CI/Test]   |    71: 23: . . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    71: 23: . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    71: 23: . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    71: 23: . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    71: 23: . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    71: 23: . . . . . . . . . . . . . . . . . . . . . \")\"\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1878: ast.CallExpr{Fun: append, Ellipsis: false, isCmd: false}\n[Go+ CI/Test]   |    71: 24: . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    71: 24: . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    71: 24: . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    71: 24: . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    71: 24: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    71: 24: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    71: 24: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    71: 24: . . . . . . . . . . . . . . \";\"\n[Go+ CI/Test]   |    72:  3: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    72:  3: . . . . . . . . . . . . )\n[Go+ CI/Test]   |    72:  3: . . . . . . . . . . . . \"}\"\n[Go+ CI/Test]   |    72:  4: . . . . . . . . . . . )\n[Go+ CI/Test]   |    72:  4: . . . . . . . . . . . \";\"\n[Go+ CI/Test]   |    73:  2: . . . . . . . . . . )\n[Go+ CI/Test]   |    73:  2: . . . . . . . . . )\n[Go+ CI/Test]   |    73:  2: . . . . . . . . )\n[Go+ CI/Test]   |    73:  2: . . . . . . . . \"}\"\n[Go+ CI/Test]   |    73:  3: . . . . . . . )\n[Go+ CI/Test]   |    73:  3: . . . . . . . \";\"\n[Go+ CI/Test]   |    74:  2: . . . . . . )\n[Go+ CI/Test]   |    74:  2: . . . . . )\n[Go+ CI/Test]   |    74:  2: . . . . . Statement (\n[Go+ CI/Test]   |    74:  2: . . . . . . ReturnStmt (\n[Go+ CI/Test]   |    74:  2: . . . . . . . \"return\"\n[Go+ CI/Test]   |    74:  9: . . . . . . . ExpressionList (\n[Go+ CI/Test]   |    74:  9: . . . . . . . . Expression (\n[Go+ CI/Test]   |    74:  9: . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    74:  9: . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    74:  9: . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    74:  9: . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |    74:  9: . . . . . . . . . . . . . IDENT vsf\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: vsf}\n[Go+ CI/Test]   |    74: 12: . . . . . . . . . . . . )\n[Go+ CI/Test]   |    74: 12: . . . . . . . . . . . )\n[Go+ CI/Test]   |    74: 12: . . . . . . . . . . )\n[Go+ CI/Test]   |    74: 12: . . . . . . . . . )\n[Go+ CI/Test]   |    74: 12: . . . . . . . . )\n[Go+ CI/Test]   |    74: 12: . . . . . . . )\n[Go+ CI/Test]   |    74: 12: . . . . . . . \";\"\n[Go+ CI/Test]   |    75:  1: . . . . . . )\n[Go+ CI/Test]   |    75:  1: . . . . . )\n[Go+ CI/Test]   |    75:  1: . . . . )\n[Go+ CI/Test]   |    75:  1: . . . . \"}\"\n[Go+ CI/Test]   |    75:  2: . . . )\n[Go+ CI/Test]   |    75:  2: . . . \";\"\n[Go+ CI/Test]   |    77:  1: . . . COMMENT\n[Go+ CI/Test]   |    78:  1: . . . COMMENT\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:3564: ast.FuncDecl{Name: Filter, ...}\n[Go+ CI/Test]   |    79:  1: . . )\n[Go+ CI/Test]   |    79:  1: . )\n[Go+ CI/Test]   |    79:  1: . Declaration (\n[Go+ CI/Test]   |    79:  1: . . FunctionDecl (\n[Go+ CI/Test]   |    79:  1: . . . \"func\"\n[Go+ CI/Test]   |    79:  6: . . . IDENT Map\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: Map}\n[Go+ CI/Test]   |    79:  9: . . . Signature (\n[Go+ CI/Test]   |    79:  9: . . . . Parameters (\n[Go+ CI/Test]   |    79:  9: . . . . . \"(\"\n[Go+ CI/Test]   |    79: 10: . . . . . ParameterList (\n[Go+ CI/Test]   |    79: 10: . . . . . . ParamDeclOrNil (\n[Go+ CI/Test]   |    79: 10: . . . . . . . IDENT vs\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: vs}\n[Go+ CI/Test]   |    79: 13: . . . . . . . ArrayFieldOrTypeInstance (\n[Go+ CI/Test]   |    79: 13: . . . . . . . . \"[\"\n[Go+ CI/Test]   |    79: 14: . . . . . . . . \"]\"\n[Go+ CI/Test]   |    79: 15: . . . . . . . . Type (\n[Go+ CI/Test]   |    79: 15: . . . . . . . . . TypeName (\n[Go+ CI/Test]   |    79: 15: . . . . . . . . . . IDENT string\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: string}\n[Go+ CI/Test]   |    79: 21: . . . . . . . . . )\n[Go+ CI/Test]   |    79: 21: . . . . . . . . )\n[Go+ CI/Test]   |    79: 21: . . . . . . . )\n[Go+ CI/Test]   |    79: 21: . . . . . . )\n[Go+ CI/Test]   |    79: 21: . . . . . . \",\"\n[Go+ CI/Test]   |    79: 23: . . . . . . ParamDeclOrNil (\n[Go+ CI/Test]   |    79: 23: . . . . . . . IDENT f\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: f}\n[Go+ CI/Test]   |    79: 25: . . . . . . . Type (\n[Go+ CI/Test]   |    79: 25: . . . . . . . . FuncType (\n[Go+ CI/Test]   |    79: 25: . . . . . . . . . \"func\"\n[Go+ CI/Test]   |    79: 29: . . . . . . . . . Signature (\n[Go+ CI/Test]   |    79: 29: . . . . . . . . . . Parameters (\n[Go+ CI/Test]   |    79: 29: . . . . . . . . . . . \"(\"\n[Go+ CI/Test]   |    79: 30: . . . . . . . . . . . ParameterList (\n[Go+ CI/Test]   |    79: 30: . . . . . . . . . . . . ParamDeclOrNil (\n[Go+ CI/Test]   |    79: 30: . . . . . . . . . . . . . IDENT string\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: string}\n[Go+ CI/Test]   |    79: 36: . . . . . . . . . . . . )\n[Go+ CI/Test]   |    79: 36: . . . . . . . . . . . )\n[Go+ CI/Test]   |    79: 36: . . . . . . . . . . . \")\"\n[Go+ CI/Test]   |    79: 38: . . . . . . . . . . )\n[Go+ CI/Test]   |    79: 38: . . . . . . . . . . Result (\n[Go+ CI/Test]   |    79: 38: . . . . . . . . . . . TypeName (\n[Go+ CI/Test]   |    79: 38: . . . . . . . . . . . . IDENT string\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: string}\n[Go+ CI/Test]   |    79: 44: . . . . . . . . . . . )\n[Go+ CI/Test]   |    79: 44: . . . . . . . . . . )\n[Go+ CI/Test]   |    79: 44: . . . . . . . . . )\n[Go+ CI/Test]   |    79: 44: . . . . . . . . )\n[Go+ CI/Test]   |    79: 44: . . . . . . . )\n[Go+ CI/Test]   |    79: 44: . . . . . . )\n[Go+ CI/Test]   |    79: 44: . . . . . )\n[Go+ CI/Test]   |    79: 44: . . . . . \")\"\n[Go+ CI/Test]   |    79: 46: . . . . )\n[Go+ CI/Test]   |    79: 46: . . . . Result (\n[Go+ CI/Test]   |    79: 46: . . . . . ArrayType (\n[Go+ CI/Test]   |    79: 46: . . . . . . \"[\"\n[Go+ CI/Test]   |    79: 47: . . . . . . \"]\"\n[Go+ CI/Test]   |    79: 48: . . . . . . Type (\n[Go+ CI/Test]   |    79: 48: . . . . . . . TypeName (\n[Go+ CI/Test]   |    79: 48: . . . . . . . . IDENT string\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: string}\n[Go+ CI/Test]   |    79: 55: . . . . . . . )\n[Go+ CI/Test]   |    79: 55: . . . . . . )\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:870: ast.ArrayType{Len: <nil>, Elt: string}\n[Go+ CI/Test]   |    79: 55: . . . . . )\n[Go+ CI/Test]   |    79: 55: . . . . )\n[Go+ CI/Test]   |    79: 55: . . . )\n[Go+ CI/Test]   |    79: 55: . . . Body (\n[Go+ CI/Test]   |    79: 55: . . . . \"{\"\n[Go+ CI/Test]   |    80:  2: . . . . StatementList (\n[Go+ CI/Test]   |    80:  2: . . . . . Statement (\n[Go+ CI/Test]   |    80:  2: . . . . . . SimpleStmt (\n[Go+ CI/Test]   |    80:  2: . . . . . . . ExpressionList (\n[Go+ CI/Test]   |    80:  2: . . . . . . . . Expression (\n[Go+ CI/Test]   |    80:  2: . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    80:  2: . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    80:  2: . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    80:  2: . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |    80:  2: . . . . . . . . . . . . . IDENT vsm\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: vsm}\n[Go+ CI/Test]   |    80:  6: . . . . . . . . . . . . )\n[Go+ CI/Test]   |    80:  6: . . . . . . . . . . . )\n[Go+ CI/Test]   |    80:  6: . . . . . . . . . . )\n[Go+ CI/Test]   |    80:  6: . . . . . . . . . )\n[Go+ CI/Test]   |    80:  6: . . . . . . . . )\n[Go+ CI/Test]   |    80:  6: . . . . . . . )\n[Go+ CI/Test]   |    80:  6: . . . . . . . \":=\"\n[Go+ CI/Test]   |    80:  9: . . . . . . . ExpressionList (\n[Go+ CI/Test]   |    80:  9: . . . . . . . . Expression (\n[Go+ CI/Test]   |    80:  9: . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    80:  9: . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    80:  9: . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    80:  9: . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |    80:  9: . . . . . . . . . . . . . IDENT make\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: make}\n[Go+ CI/Test]   |    80: 13: . . . . . . . . . . . . )\n[Go+ CI/Test]   |    80: 13: . . . . . . . . . . . . CallOrConversion (\n[Go+ CI/Test]   |    80: 13: . . . . . . . . . . . . . \"(\"\n[Go+ CI/Test]   |    80: 14: . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |    80: 14: . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    80: 14: . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    80: 14: . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    80: 14: . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |    80: 14: . . . . . . . . . . . . . . . . . . ArrayType (\n[Go+ CI/Test]   |    80: 14: . . . . . . . . . . . . . . . . . . . \"[\"\n[Go+ CI/Test]   |    80: 15: . . . . . . . . . . . . . . . . . . . \"]\"\n[Go+ CI/Test]   |    80: 16: . . . . . . . . . . . . . . . . . . . TypeName (\n[Go+ CI/Test]   |    80: 16: . . . . . . . . . . . . . . . . . . . . IDENT string\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: string}\n[Go+ CI/Test]   |    80: 22: . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:870: ast.ArrayType{Len: <nil>, Elt: string}\n[Go+ CI/Test]   |    80: 22: . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    80: 22: . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    80: 22: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    80: 22: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    80: 22: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    80: 22: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    80: 22: . . . . . . . . . . . . . \",\"\n[Go+ CI/Test]   |    80: 24: . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |    80: 24: . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    80: 24: . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    80: 24: . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    80: 24: . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |    80: 24: . . . . . . . . . . . . . . . . . . IDENT len\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: len}\n[Go+ CI/Test]   |    80: 27: . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    80: 27: . . . . . . . . . . . . . . . . . CallOrConversion (\n[Go+ CI/Test]   |    80: 27: . . . . . . . . . . . . . . . . . . \"(\"\n[Go+ CI/Test]   |    80: 28: . . . . . . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |    80: 28: . . . . . . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    80: 28: . . . . . . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    80: 28: . . . . . . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    80: 28: . . . . . . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |    80: 28: . . . . . . . . . . . . . . . . . . . . . . . IDENT vs\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: vs}\n[Go+ CI/Test]   |    80: 30: . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    80: 30: . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    80: 30: . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    80: 30: . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    80: 30: . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    80: 30: . . . . . . . . . . . . . . . . . . \")\"\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1878: ast.CallExpr{Fun: len, Ellipsis: false, isCmd: false}\n[Go+ CI/Test]   |    80: 31: . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    80: 31: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    80: 31: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    80: 31: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    80: 31: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    80: 31: . . . . . . . . . . . . . \")\"\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1878: ast.CallExpr{Fun: make, Ellipsis: false, isCmd: false}\n[Go+ CI/Test]   |    80: 32: . . . . . . . . . . . . )\n[Go+ CI/Test]   |    80: 32: . . . . . . . . . . . )\n[Go+ CI/Test]   |    80: 32: . . . . . . . . . . )\n[Go+ CI/Test]   |    80: 32: . . . . . . . . . )\n[Go+ CI/Test]   |    80: 32: . . . . . . . . )\n[Go+ CI/Test]   |    80: 32: . . . . . . . )\n[Go+ CI/Test]   |    80: 32: . . . . . . )\n[Go+ CI/Test]   |    80: 32: . . . . . . \";\"\n[Go+ CI/Test]   |    81:  2: . . . . . )\n[Go+ CI/Test]   |    81:  2: . . . . . Statement (\n[Go+ CI/Test]   |    81:  2: . . . . . . ForStmt (\n[Go+ CI/Test]   |    81:  2: . . . . . . . \"for\"\n[Go+ CI/Test]   |    81:  6: . . . . . . . SimpleStmt (\n[Go+ CI/Test]   |    81:  6: . . . . . . . . ExpressionList (\n[Go+ CI/Test]   |    81:  6: . . . . . . . . . Expression (\n[Go+ CI/Test]   |    81:  6: . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    81:  6: . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    81:  6: . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    81:  6: . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |    81:  6: . . . . . . . . . . . . . . IDENT i\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: i}\n[Go+ CI/Test]   |    81:  7: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    81:  7: . . . . . . . . . . . . )\n[Go+ CI/Test]   |    81:  7: . . . . . . . . . . . )\n[Go+ CI/Test]   |    81:  7: . . . . . . . . . . )\n[Go+ CI/Test]   |    81:  7: . . . . . . . . . )\n[Go+ CI/Test]   |    81:  7: . . . . . . . . . \",\"\n[Go+ CI/Test]   |    81:  9: . . . . . . . . . Expression (\n[Go+ CI/Test]   |    81:  9: . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    81:  9: . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    81:  9: . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    81:  9: . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |    81:  9: . . . . . . . . . . . . . . IDENT v\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: v}\n[Go+ CI/Test]   |    81: 11: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    81: 11: . . . . . . . . . . . . )\n[Go+ CI/Test]   |    81: 11: . . . . . . . . . . . )\n[Go+ CI/Test]   |    81: 11: . . . . . . . . . . )\n[Go+ CI/Test]   |    81: 11: . . . . . . . . . )\n[Go+ CI/Test]   |    81: 11: . . . . . . . . )\n[Go+ CI/Test]   |    81: 11: . . . . . . . . \":=\"\n[Go+ CI/Test]   |    81: 14: . . . . . . . . \"range\"\n[Go+ CI/Test]   |    81: 20: . . . . . . . . Expression (\n[Go+ CI/Test]   |    81: 20: . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    81: 20: . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    81: 20: . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    81: 20: . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |    81: 20: . . . . . . . . . . . . . IDENT vs\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: vs}\n[Go+ CI/Test]   |    81: 23: . . . . . . . . . . . . )\n[Go+ CI/Test]   |    81: 23: . . . . . . . . . . . )\n[Go+ CI/Test]   |    81: 23: . . . . . . . . . . )\n[Go+ CI/Test]   |    81: 23: . . . . . . . . . )\n[Go+ CI/Test]   |    81: 23: . . . . . . . . )\n[Go+ CI/Test]   |    81: 23: . . . . . . . )\n[Go+ CI/Test]   |    81: 23: . . . . . . . BlockStmt (\n[Go+ CI/Test]   |    81: 23: . . . . . . . . \"{\"\n[Go+ CI/Test]   |    82:  3: . . . . . . . . StatementList (\n[Go+ CI/Test]   |    82:  3: . . . . . . . . . Statement (\n[Go+ CI/Test]   |    82:  3: . . . . . . . . . . SimpleStmt (\n[Go+ CI/Test]   |    82:  3: . . . . . . . . . . . ExpressionList (\n[Go+ CI/Test]   |    82:  3: . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |    82:  3: . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    82:  3: . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    82:  3: . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    82:  3: . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |    82:  3: . . . . . . . . . . . . . . . . . IDENT vsm\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: vsm}\n[Go+ CI/Test]   |    82:  6: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    82:  6: . . . . . . . . . . . . . . . . IndexOrSlice (\n[Go+ CI/Test]   |    82:  6: . . . . . . . . . . . . . . . . . \"[\"\n[Go+ CI/Test]   |    82:  7: . . . . . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |    82:  7: . . . . . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    82:  7: . . . . . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    82:  7: . . . . . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    82:  7: . . . . . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |    82:  7: . . . . . . . . . . . . . . . . . . . . . . IDENT i\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: i}\n[Go+ CI/Test]   |    82:  8: . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    82:  8: . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    82:  8: . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    82:  8: . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    82:  8: . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    82:  8: . . . . . . . . . . . . . . . . . \"]\"\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1791: ast.IndexExpr{X: vsm, Index: i}\n[Go+ CI/Test]   |    82: 10: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    82: 10: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    82: 10: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    82: 10: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    82: 10: . . . . . . . . . . . . )\n[Go+ CI/Test]   |    82: 10: . . . . . . . . . . . )\n[Go+ CI/Test]   |    82: 10: . . . . . . . . . . . \"=\"\n[Go+ CI/Test]   |    82: 12: . . . . . . . . . . . ExpressionList (\n[Go+ CI/Test]   |    82: 12: . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |    82: 12: . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    82: 12: . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    82: 12: . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    82: 12: . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |    82: 12: . . . . . . . . . . . . . . . . . IDENT f\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: f}\n[Go+ CI/Test]   |    82: 13: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    82: 13: . . . . . . . . . . . . . . . . CallOrConversion (\n[Go+ CI/Test]   |    82: 13: . . . . . . . . . . . . . . . . . \"(\"\n[Go+ CI/Test]   |    82: 14: . . . . . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |    82: 14: . . . . . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    82: 14: . . . . . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    82: 14: . . . . . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    82: 14: . . . . . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |    82: 14: . . . . . . . . . . . . . . . . . . . . . . IDENT v\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: v}\n[Go+ CI/Test]   |    82: 15: . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    82: 15: . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    82: 15: . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    82: 15: . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    82: 15: . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    82: 15: . . . . . . . . . . . . . . . . . \")\"\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1878: ast.CallExpr{Fun: f, Ellipsis: false, isCmd: false}\n[Go+ CI/Test]   |    82: 16: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    82: 16: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    82: 16: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    82: 16: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    82: 16: . . . . . . . . . . . . )\n[Go+ CI/Test]   |    82: 16: . . . . . . . . . . . )\n[Go+ CI/Test]   |    82: 16: . . . . . . . . . . )\n[Go+ CI/Test]   |    82: 16: . . . . . . . . . . \";\"\n[Go+ CI/Test]   |    83:  2: . . . . . . . . . )\n[Go+ CI/Test]   |    83:  2: . . . . . . . . )\n[Go+ CI/Test]   |    83:  2: . . . . . . . . \"}\"\n[Go+ CI/Test]   |    83:  3: . . . . . . . )\n[Go+ CI/Test]   |    83:  3: . . . . . . . \";\"\n[Go+ CI/Test]   |    84:  2: . . . . . . )\n[Go+ CI/Test]   |    84:  2: . . . . . )\n[Go+ CI/Test]   |    84:  2: . . . . . Statement (\n[Go+ CI/Test]   |    84:  2: . . . . . . ReturnStmt (\n[Go+ CI/Test]   |    84:  2: . . . . . . . \"return\"\n[Go+ CI/Test]   |    84:  9: . . . . . . . ExpressionList (\n[Go+ CI/Test]   |    84:  9: . . . . . . . . Expression (\n[Go+ CI/Test]   |    84:  9: . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    84:  9: . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    84:  9: . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    84:  9: . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |    84:  9: . . . . . . . . . . . . . IDENT vsm\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: vsm}\n[Go+ CI/Test]   |    84: 12: . . . . . . . . . . . . )\n[Go+ CI/Test]   |    84: 12: . . . . . . . . . . . )\n[Go+ CI/Test]   |    84: 12: . . . . . . . . . . )\n[Go+ CI/Test]   |    84: 12: . . . . . . . . . )\n[Go+ CI/Test]   |    84: 12: . . . . . . . . )\n[Go+ CI/Test]   |    84: 12: . . . . . . . )\n[Go+ CI/Test]   |    84: 12: . . . . . . . \";\"\n[Go+ CI/Test]   |    85:  1: . . . . . . )\n[Go+ CI/Test]   |    85:  1: . . . . . )\n[Go+ CI/Test]   |    85:  1: . . . . )\n[Go+ CI/Test]   |    85:  1: . . . . \"}\"\n[Go+ CI/Test]   |    85:  2: . . . )\n[Go+ CI/Test]   |    85:  2: . . . \";\"\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:3564: ast.FuncDecl{Name: Map, ...}\n[Go+ CI/Test]   |    87:  1: . . )\n[Go+ CI/Test]   |    87:  1: . )\n[Go+ CI/Test]   |    87:  1: . Declaration (\n[Go+ CI/Test]   |    87:  1: . . FunctionDecl (\n[Go+ CI/Test]   |    87:  1: . . . \"func\"\n[Go+ CI/Test]   |    87:  6: . . . IDENT main\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: main}\n[Go+ CI/Test]   |    87: 10: . . . Signature (\n[Go+ CI/Test]   |    87: 10: . . . . Parameters (\n[Go+ CI/Test]   |    87: 10: . . . . . \"(\"\n[Go+ CI/Test]   |    87: 11: . . . . . \")\"\n[Go+ CI/Test]   |    87: 13: . . . . )\n[Go+ CI/Test]   |    87: 13: . . . . Result (\n[Go+ CI/Test]   |    87: 13: . . . . )\n[Go+ CI/Test]   |    87: 13: . . . )\n[Go+ CI/Test]   |    87: 13: . . . Body (\n[Go+ CI/Test]   |    87: 13: . . . . \"{\"\n[Go+ CI/Test]   |    89:  2: . . . . COMMENT\n[Go+ CI/Test]   |    90:  2: . . . . StatementList (\n[Go+ CI/Test]   |    90:  2: . . . . . Statement (\n[Go+ CI/Test]   |    90:  2: . . . . . . GenDecl(var) (\n[Go+ CI/Test]   |    90:  2: . . . . . . . \"var\"\n[Go+ CI/Test]   |    90:  6: . . . . . . . varSpec (\n[Go+ CI/Test]   |    90:  6: . . . . . . . . IdentList (\n[Go+ CI/Test]   |    90:  6: . . . . . . . . . IDENT strs\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: strs}\n[Go+ CI/Test]   |    90: 11: . . . . . . . . )\n[Go+ CI/Test]   |    90: 11: . . . . . . . . \"=\"\n[Go+ CI/Test]   |    90: 13: . . . . . . . . ExpressionList (\n[Go+ CI/Test]   |    90: 13: . . . . . . . . . Expression (\n[Go+ CI/Test]   |    90: 13: . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    90: 13: . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    90: 13: . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    90: 13: . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |    90: 13: . . . . . . . . . . . . . . ArrayType (\n[Go+ CI/Test]   |    90: 13: . . . . . . . . . . . . . . . \"[\"\n[Go+ CI/Test]   |    90: 14: . . . . . . . . . . . . . . . \"]\"\n[Go+ CI/Test]   |    90: 15: . . . . . . . . . . . . . . . TypeName (\n[Go+ CI/Test]   |    90: 15: . . . . . . . . . . . . . . . . IDENT string\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: string}\n[Go+ CI/Test]   |    90: 21: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:870: ast.ArrayType{Len: <nil>, Elt: string}\n[Go+ CI/Test]   |    90: 21: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    90: 21: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    90: 21: . . . . . . . . . . . . . LiteralValue (\n[Go+ CI/Test]   |    90: 21: . . . . . . . . . . . . . . \"{\"\n[Go+ CI/Test]   |    90: 22: . . . . . . . . . . . . . . ElementList (\n[Go+ CI/Test]   |    90: 22: . . . . . . . . . . . . . . . Element (\n[Go+ CI/Test]   |    90: 22: . . . . . . . . . . . . . . . . Element (\n[Go+ CI/Test]   |    90: 22: . . . . . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |    90: 22: . . . . . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    90: 22: . . . . . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    90: 22: . . . . . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    90: 22: . . . . . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: STRING, Value: \"peach\"}\n[Go+ CI/Test]   |    90: 22: . . . . . . . . . . . . . . . . . . . . . . STRING \"peach\"\n[Go+ CI/Test]   |    90: 29: . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    90: 29: . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    90: 29: . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    90: 29: . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    90: 29: . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    90: 29: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    90: 29: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    90: 29: . . . . . . . . . . . . . . . \",\"\n[Go+ CI/Test]   |    90: 31: . . . . . . . . . . . . . . . Element (\n[Go+ CI/Test]   |    90: 31: . . . . . . . . . . . . . . . . Element (\n[Go+ CI/Test]   |    90: 31: . . . . . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |    90: 31: . . . . . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    90: 31: . . . . . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    90: 31: . . . . . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    90: 31: . . . . . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: STRING, Value: \"apple\"}\n[Go+ CI/Test]   |    90: 31: . . . . . . . . . . . . . . . . . . . . . . STRING \"apple\"\n[Go+ CI/Test]   |    90: 38: . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    90: 38: . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    90: 38: . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    90: 38: . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    90: 38: . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    90: 38: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    90: 38: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    90: 38: . . . . . . . . . . . . . . . \",\"\n[Go+ CI/Test]   |    90: 40: . . . . . . . . . . . . . . . Element (\n[Go+ CI/Test]   |    90: 40: . . . . . . . . . . . . . . . . Element (\n[Go+ CI/Test]   |    90: 40: . . . . . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |    90: 40: . . . . . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    90: 40: . . . . . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    90: 40: . . . . . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    90: 40: . . . . . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: STRING, Value: \"pear\"}\n[Go+ CI/Test]   |    90: 40: . . . . . . . . . . . . . . . . . . . . . . STRING \"pear\"\n[Go+ CI/Test]   |    90: 46: . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    90: 46: . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    90: 46: . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    90: 46: . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    90: 46: . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    90: 46: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    90: 46: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    90: 46: . . . . . . . . . . . . . . . \",\"\n[Go+ CI/Test]   |    90: 48: . . . . . . . . . . . . . . . Element (\n[Go+ CI/Test]   |    90: 48: . . . . . . . . . . . . . . . . Element (\n[Go+ CI/Test]   |    90: 48: . . . . . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |    90: 48: . . . . . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    90: 48: . . . . . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    90: 48: . . . . . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    90: 48: . . . . . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: STRING, Value: \"plum\"}\n[Go+ CI/Test]   |    90: 48: . . . . . . . . . . . . . . . . . . . . . . STRING \"plum\"\n[Go+ CI/Test]   |    90: 54: . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    90: 54: . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    90: 54: . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    90: 54: . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    90: 54: . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    90: 54: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    90: 54: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    90: 54: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    90: 54: . . . . . . . . . . . . . . \"}\"\n[Go+ CI/Test]   |    90: 55: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    90: 55: . . . . . . . . . . . . )\n[Go+ CI/Test]   |    90: 55: . . . . . . . . . . . )\n[Go+ CI/Test]   |    90: 55: . . . . . . . . . . )\n[Go+ CI/Test]   |    90: 55: . . . . . . . . . )\n[Go+ CI/Test]   |    90: 55: . . . . . . . . )\n[Go+ CI/Test]   |    90: 55: . . . . . . . . \";\"\n[Go+ CI/Test]   |    92:  2: . . . . . . . )\n[Go+ CI/Test]   |    92:  2: . . . . . . )\n[Go+ CI/Test]   |    92:  2: . . . . . )\n[Go+ CI/Test]   |    92:  2: . . . . . Statement (\n[Go+ CI/Test]   |    92:  2: . . . . . . SimpleStmt (\n[Go+ CI/Test]   |    92:  2: . . . . . . . ExpressionList (\n[Go+ CI/Test]   |    92:  2: . . . . . . . . Expression (\n[Go+ CI/Test]   |    92:  2: . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    92:  2: . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    92:  2: . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    92:  2: . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |    92:  2: . . . . . . . . . . . . . IDENT fmt\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: fmt}\n[Go+ CI/Test]   |    92:  5: . . . . . . . . . . . . )\n[Go+ CI/Test]   |    92:  5: . . . . . . . . . . . . \".\"\n[Go+ CI/Test]   |    92:  6: . . . . . . . . . . . . Selector (\n[Go+ CI/Test]   |    92:  6: . . . . . . . . . . . . . IDENT Println\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: Println}\n[Go+ CI/Test]   |    92: 13: . . . . . . . . . . . . )\n[Go+ CI/Test]   |    92: 13: . . . . . . . . . . . . CallOrConversion (\n[Go+ CI/Test]   |    92: 13: . . . . . . . . . . . . . \"(\"\n[Go+ CI/Test]   |    92: 14: . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |    92: 14: . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    92: 14: . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    92: 14: . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    92: 14: . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |    92: 14: . . . . . . . . . . . . . . . . . . IDENT Index\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: Index}\n[Go+ CI/Test]   |    92: 19: . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    92: 19: . . . . . . . . . . . . . . . . . CallOrConversion (\n[Go+ CI/Test]   |    92: 19: . . . . . . . . . . . . . . . . . . \"(\"\n[Go+ CI/Test]   |    92: 20: . . . . . . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |    92: 20: . . . . . . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    92: 20: . . . . . . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    92: 20: . . . . . . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    92: 20: . . . . . . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |    92: 20: . . . . . . . . . . . . . . . . . . . . . . . IDENT strs\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: strs}\n[Go+ CI/Test]   |    92: 24: . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    92: 24: . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    92: 24: . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    92: 24: . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    92: 24: . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    92: 24: . . . . . . . . . . . . . . . . . . \",\"\n[Go+ CI/Test]   |    92: 26: . . . . . . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |    92: 26: . . . . . . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    92: 26: . . . . . . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    92: 26: . . . . . . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    92: 26: . . . . . . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: STRING, Value: \"pear\"}\n[Go+ CI/Test]   |    92: 26: . . . . . . . . . . . . . . . . . . . . . . . STRING \"pear\"\n[Go+ CI/Test]   |    92: 32: . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    92: 32: . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    92: 32: . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    92: 32: . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    92: 32: . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    92: 32: . . . . . . . . . . . . . . . . . . \")\"\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1878: ast.CallExpr{Fun: Index, Ellipsis: false, isCmd: false}\n[Go+ CI/Test]   |    92: 33: . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    92: 33: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    92: 33: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    92: 33: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    92: 33: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    92: 33: . . . . . . . . . . . . . \")\"\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1878: ast.CallExpr{Fun: &{fmt Println}, Ellipsis: false, isCmd: false}\n[Go+ CI/Test]   |    92: 34: . . . . . . . . . . . . )\n[Go+ CI/Test]   |    92: 34: . . . . . . . . . . . )\n[Go+ CI/Test]   |    92: 34: . . . . . . . . . . )\n[Go+ CI/Test]   |    92: 34: . . . . . . . . . )\n[Go+ CI/Test]   |    92: 34: . . . . . . . . )\n[Go+ CI/Test]   |    92: 34: . . . . . . . )\n[Go+ CI/Test]   |    92: 34: . . . . . . )\n[Go+ CI/Test]   |    92: 34: . . . . . . \";\"\n[Go+ CI/Test]   |    94:  2: . . . . . )\n[Go+ CI/Test]   |    94:  2: . . . . . Statement (\n[Go+ CI/Test]   |    94:  2: . . . . . . SimpleStmt (\n[Go+ CI/Test]   |    94:  2: . . . . . . . ExpressionList (\n[Go+ CI/Test]   |    94:  2: . . . . . . . . Expression (\n[Go+ CI/Test]   |    94:  2: . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    94:  2: . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    94:  2: . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    94:  2: . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |    94:  2: . . . . . . . . . . . . . IDENT fmt\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: fmt}\n[Go+ CI/Test]   |    94:  5: . . . . . . . . . . . . )\n[Go+ CI/Test]   |    94:  5: . . . . . . . . . . . . \".\"\n[Go+ CI/Test]   |    94:  6: . . . . . . . . . . . . Selector (\n[Go+ CI/Test]   |    94:  6: . . . . . . . . . . . . . IDENT Println\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: Println}\n[Go+ CI/Test]   |    94: 13: . . . . . . . . . . . . )\n[Go+ CI/Test]   |    94: 13: . . . . . . . . . . . . CallOrConversion (\n[Go+ CI/Test]   |    94: 13: . . . . . . . . . . . . . \"(\"\n[Go+ CI/Test]   |    94: 14: . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |    94: 14: . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    94: 14: . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    94: 14: . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    94: 14: . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |    94: 14: . . . . . . . . . . . . . . . . . . IDENT Include\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: Include}\n[Go+ CI/Test]   |    94: 21: . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    94: 21: . . . . . . . . . . . . . . . . . CallOrConversion (\n[Go+ CI/Test]   |    94: 21: . . . . . . . . . . . . . . . . . . \"(\"\n[Go+ CI/Test]   |    94: 22: . . . . . . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |    94: 22: . . . . . . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    94: 22: . . . . . . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    94: 22: . . . . . . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    94: 22: . . . . . . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |    94: 22: . . . . . . . . . . . . . . . . . . . . . . . IDENT strs\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: strs}\n[Go+ CI/Test]   |    94: 26: . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    94: 26: . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    94: 26: . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    94: 26: . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    94: 26: . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    94: 26: . . . . . . . . . . . . . . . . . . \",\"\n[Go+ CI/Test]   |    94: 28: . . . . . . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |    94: 28: . . . . . . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    94: 28: . . . . . . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    94: 28: . . . . . . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    94: 28: . . . . . . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: STRING, Value: \"grape\"}\n[Go+ CI/Test]   |    94: 28: . . . . . . . . . . . . . . . . . . . . . . . STRING \"grape\"\n[Go+ CI/Test]   |    94: 35: . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    94: 35: . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    94: 35: . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    94: 35: . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    94: 35: . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    94: 35: . . . . . . . . . . . . . . . . . . \")\"\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1878: ast.CallExpr{Fun: Include, Ellipsis: false, isCmd: false}\n[Go+ CI/Test]   |    94: 36: . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    94: 36: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    94: 36: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    94: 36: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    94: 36: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    94: 36: . . . . . . . . . . . . . \")\"\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1878: ast.CallExpr{Fun: &{fmt Println}, Ellipsis: false, isCmd: false}\n[Go+ CI/Test]   |    94: 37: . . . . . . . . . . . . )\n[Go+ CI/Test]   |    94: 37: . . . . . . . . . . . )\n[Go+ CI/Test]   |    94: 37: . . . . . . . . . . )\n[Go+ CI/Test]   |    94: 37: . . . . . . . . . )\n[Go+ CI/Test]   |    94: 37: . . . . . . . . )\n[Go+ CI/Test]   |    94: 37: . . . . . . . )\n[Go+ CI/Test]   |    94: 37: . . . . . . )\n[Go+ CI/Test]   |    94: 37: . . . . . . \";\"\n[Go+ CI/Test]   |    96:  2: . . . . . )\n[Go+ CI/Test]   |    96:  2: . . . . . Statement (\n[Go+ CI/Test]   |    96:  2: . . . . . . SimpleStmt (\n[Go+ CI/Test]   |    96:  2: . . . . . . . ExpressionList (\n[Go+ CI/Test]   |    96:  2: . . . . . . . . Expression (\n[Go+ CI/Test]   |    96:  2: . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    96:  2: . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    96:  2: . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    96:  2: . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |    96:  2: . . . . . . . . . . . . . IDENT fmt\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: fmt}\n[Go+ CI/Test]   |    96:  5: . . . . . . . . . . . . )\n[Go+ CI/Test]   |    96:  5: . . . . . . . . . . . . \".\"\n[Go+ CI/Test]   |    96:  6: . . . . . . . . . . . . Selector (\n[Go+ CI/Test]   |    96:  6: . . . . . . . . . . . . . IDENT Println\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: Println}\n[Go+ CI/Test]   |    96: 13: . . . . . . . . . . . . )\n[Go+ CI/Test]   |    96: 13: . . . . . . . . . . . . CallOrConversion (\n[Go+ CI/Test]   |    96: 13: . . . . . . . . . . . . . \"(\"\n[Go+ CI/Test]   |    96: 14: . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |    96: 14: . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    96: 14: . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    96: 14: . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    96: 14: . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |    96: 14: . . . . . . . . . . . . . . . . . . IDENT Any\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: Any}\n[Go+ CI/Test]   |    96: 17: . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    96: 17: . . . . . . . . . . . . . . . . . CallOrConversion (\n[Go+ CI/Test]   |    96: 17: . . . . . . . . . . . . . . . . . . \"(\"\n[Go+ CI/Test]   |    96: 18: . . . . . . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |    96: 18: . . . . . . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    96: 18: . . . . . . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    96: 18: . . . . . . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    96: 18: . . . . . . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |    96: 18: . . . . . . . . . . . . . . . . . . . . . . . IDENT strs\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: strs}\n[Go+ CI/Test]   |    96: 22: . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    96: 22: . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    96: 22: . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    96: 22: . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    96: 22: . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    96: 22: . . . . . . . . . . . . . . . . . . \",\"\n[Go+ CI/Test]   |    96: 24: . . . . . . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |    96: 24: . . . . . . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    96: 24: . . . . . . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    96: 24: . . . . . . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    96: 24: . . . . . . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |    96: 24: . . . . . . . . . . . . . . . . . . . . . . . FuncTypeOrLit (\n[Go+ CI/Test]   |    96: 24: . . . . . . . . . . . . . . . . . . . . . . . . FuncType (\n[Go+ CI/Test]   |    96: 24: . . . . . . . . . . . . . . . . . . . . . . . . . \"func\"\n[Go+ CI/Test]   |    96: 28: . . . . . . . . . . . . . . . . . . . . . . . . . Signature (\n[Go+ CI/Test]   |    96: 28: . . . . . . . . . . . . . . . . . . . . . . . . . . Parameters (\n[Go+ CI/Test]   |    96: 28: . . . . . . . . . . . . . . . . . . . . . . . . . . . \"(\"\n[Go+ CI/Test]   |    96: 29: . . . . . . . . . . . . . . . . . . . . . . . . . . . ParameterList (\n[Go+ CI/Test]   |    96: 29: . . . . . . . . . . . . . . . . . . . . . . . . . . . . ParamDeclOrNil (\n[Go+ CI/Test]   |    96: 29: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . IDENT v\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: v}\n[Go+ CI/Test]   |    96: 31: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . Type (\n[Go+ CI/Test]   |    96: 31: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . TypeName (\n[Go+ CI/Test]   |    96: 31: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . IDENT string\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: string}\n[Go+ CI/Test]   |    96: 37: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    96: 37: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    96: 37: . . . . . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    96: 37: . . . . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    96: 37: . . . . . . . . . . . . . . . . . . . . . . . . . . . \")\"\n[Go+ CI/Test]   |    96: 39: . . . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    96: 39: . . . . . . . . . . . . . . . . . . . . . . . . . . Result (\n[Go+ CI/Test]   |    96: 39: . . . . . . . . . . . . . . . . . . . . . . . . . . . TypeName (\n[Go+ CI/Test]   |    96: 39: . . . . . . . . . . . . . . . . . . . . . . . . . . . . IDENT bool\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: bool}\n[Go+ CI/Test]   |    96: 44: . . . . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    96: 44: . . . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    96: 44: . . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    96: 44: . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    96: 44: . . . . . . . . . . . . . . . . . . . . . . . . Body (\n[Go+ CI/Test]   |    96: 44: . . . . . . . . . . . . . . . . . . . . . . . . . \"{\"\n[Go+ CI/Test]   |    97:  3: . . . . . . . . . . . . . . . . . . . . . . . . . StatementList (\n[Go+ CI/Test]   |    97:  3: . . . . . . . . . . . . . . . . . . . . . . . . . . Statement (\n[Go+ CI/Test]   |    97:  3: . . . . . . . . . . . . . . . . . . . . . . . . . . . ReturnStmt (\n[Go+ CI/Test]   |    97:  3: . . . . . . . . . . . . . . . . . . . . . . . . . . . . \"return\"\n[Go+ CI/Test]   |    97: 10: . . . . . . . . . . . . . . . . . . . . . . . . . . . . ExpressionList (\n[Go+ CI/Test]   |    97: 10: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |    97: 10: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    97: 10: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    97: 10: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    97: 10: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |    97: 10: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . IDENT strings\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: strings}\n[Go+ CI/Test]   |    97: 17: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    97: 17: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . \".\"\n[Go+ CI/Test]   |    97: 18: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . Selector (\n[Go+ CI/Test]   |    97: 18: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . IDENT HasPrefix\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: HasPrefix}\n[Go+ CI/Test]   |    97: 27: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    97: 27: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . CallOrConversion (\n[Go+ CI/Test]   |    97: 27: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . \"(\"\n[Go+ CI/Test]   |    97: 28: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |    97: 28: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    97: 28: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    97: 28: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    97: 28: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |    97: 28: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . IDENT v\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: v}\n[Go+ CI/Test]   |    97: 29: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    97: 29: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    97: 29: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    97: 29: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    97: 29: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    97: 29: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . \",\"\n[Go+ CI/Test]   |    97: 31: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |    97: 31: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    97: 31: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    97: 31: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    97: 31: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: STRING, Value: \"p\"}\n[Go+ CI/Test]   |    97: 31: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . STRING \"p\"\n[Go+ CI/Test]   |    97: 34: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    97: 34: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    97: 34: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    97: 34: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    97: 34: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    97: 34: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . \")\"\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1878: ast.CallExpr{Fun: &{strings HasPrefix}, Ellipsis: false, isCmd: false}\n[Go+ CI/Test]   |    97: 35: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    97: 35: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    97: 35: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    97: 35: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    97: 35: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    97: 35: . . . . . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    97: 35: . . . . . . . . . . . . . . . . . . . . . . . . . . . . \";\"\n[Go+ CI/Test]   |    98:  2: . . . . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    98:  2: . . . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    98:  2: . . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    98:  2: . . . . . . . . . . . . . . . . . . . . . . . . . \"}\"\n[Go+ CI/Test]   |    98:  3: . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    98:  3: . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    98:  3: . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    98:  3: . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    98:  3: . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    98:  3: . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    98:  3: . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    98:  3: . . . . . . . . . . . . . . . . . . \")\"\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1878: ast.CallExpr{Fun: Any, Ellipsis: false, isCmd: false}\n[Go+ CI/Test]   |    98:  4: . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    98:  4: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    98:  4: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    98:  4: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    98:  4: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    98:  4: . . . . . . . . . . . . . \")\"\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1878: ast.CallExpr{Fun: &{fmt Println}, Ellipsis: false, isCmd: false}\n[Go+ CI/Test]   |    98:  5: . . . . . . . . . . . . )\n[Go+ CI/Test]   |    98:  5: . . . . . . . . . . . )\n[Go+ CI/Test]   |    98:  5: . . . . . . . . . . )\n[Go+ CI/Test]   |    98:  5: . . . . . . . . . )\n[Go+ CI/Test]   |    98:  5: . . . . . . . . )\n[Go+ CI/Test]   |    98:  5: . . . . . . . )\n[Go+ CI/Test]   |    98:  5: . . . . . . )\n[Go+ CI/Test]   |    98:  5: . . . . . . \";\"\n[Go+ CI/Test]   |   100:  2: . . . . . )\n[Go+ CI/Test]   |   100:  2: . . . . . Statement (\n[Go+ CI/Test]   |   100:  2: . . . . . . SimpleStmt (\n[Go+ CI/Test]   |   100:  2: . . . . . . . ExpressionList (\n[Go+ CI/Test]   |   100:  2: . . . . . . . . Expression (\n[Go+ CI/Test]   |   100:  2: . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |   100:  2: . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |   100:  2: . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |   100:  2: . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |   100:  2: . . . . . . . . . . . . . IDENT fmt\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: fmt}\n[Go+ CI/Test]   |   100:  5: . . . . . . . . . . . . )\n[Go+ CI/Test]   |   100:  5: . . . . . . . . . . . . \".\"\n[Go+ CI/Test]   |   100:  6: . . . . . . . . . . . . Selector (\n[Go+ CI/Test]   |   100:  6: . . . . . . . . . . . . . IDENT Println\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: Println}\n[Go+ CI/Test]   |   100: 13: . . . . . . . . . . . . )\n[Go+ CI/Test]   |   100: 13: . . . . . . . . . . . . CallOrConversion (\n[Go+ CI/Test]   |   100: 13: . . . . . . . . . . . . . \"(\"\n[Go+ CI/Test]   |   100: 14: . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |   100: 14: . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |   100: 14: . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |   100: 14: . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |   100: 14: . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |   100: 14: . . . . . . . . . . . . . . . . . . IDENT All\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: All}\n[Go+ CI/Test]   |   100: 17: . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |   100: 17: . . . . . . . . . . . . . . . . . CallOrConversion (\n[Go+ CI/Test]   |   100: 17: . . . . . . . . . . . . . . . . . . \"(\"\n[Go+ CI/Test]   |   100: 18: . . . . . . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |   100: 18: . . . . . . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |   100: 18: . . . . . . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |   100: 18: . . . . . . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |   100: 18: . . . . . . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |   100: 18: . . . . . . . . . . . . . . . . . . . . . . . IDENT strs\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: strs}\n[Go+ CI/Test]   |   100: 22: . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |   100: 22: . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |   100: 22: . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |   100: 22: . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |   100: 22: . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |   100: 22: . . . . . . . . . . . . . . . . . . \",\"\n[Go+ CI/Test]   |   100: 24: . . . . . . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |   100: 24: . . . . . . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |   100: 24: . . . . . . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |   100: 24: . . . . . . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |   100: 24: . . . . . . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |   100: 24: . . . . . . . . . . . . . . . . . . . . . . . FuncTypeOrLit (\n[Go+ CI/Test]   |   100: 24: . . . . . . . . . . . . . . . . . . . . . . . . FuncType (\n[Go+ CI/Test]   |   100: 24: . . . . . . . . . . . . . . . . . . . . . . . . . \"func\"\n[Go+ CI/Test]   |   100: 28: . . . . . . . . . . . . . . . . . . . . . . . . . Signature (\n[Go+ CI/Test]   |   100: 28: . . . . . . . . . . . . . . . . . . . . . . . . . . Parameters (\n[Go+ CI/Test]   |   100: 28: . . . . . . . . . . . . . . . . . . . . . . . . . . . \"(\"\n[Go+ CI/Test]   |   100: 29: . . . . . . . . . . . . . . . . . . . . . . . . . . . ParameterList (\n[Go+ CI/Test]   |   100: 29: . . . . . . . . . . . . . . . . . . . . . . . . . . . . ParamDeclOrNil (\n[Go+ CI/Test]   |   100: 29: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . IDENT v\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: v}\n[Go+ CI/Test]   |   100: 31: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . Type (\n[Go+ CI/Test]   |   100: 31: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . TypeName (\n[Go+ CI/Test]   |   100: 31: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . IDENT string\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: string}\n[Go+ CI/Test]   |   100: 37: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |   100: 37: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |   100: 37: . . . . . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |   100: 37: . . . . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |   100: 37: . . . . . . . . . . . . . . . . . . . . . . . . . . . \")\"\n[Go+ CI/Test]   |   100: 39: . . . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |   100: 39: . . . . . . . . . . . . . . . . . . . . . . . . . . Result (\n[Go+ CI/Test]   |   100: 39: . . . . . . . . . . . . . . . . . . . . . . . . . . . TypeName (\n[Go+ CI/Test]   |   100: 39: . . . . . . . . . . . . . . . . . . . . . . . . . . . . IDENT bool\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: bool}\n[Go+ CI/Test]   |   100: 44: . . . . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |   100: 44: . . . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |   100: 44: . . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |   100: 44: . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |   100: 44: . . . . . . . . . . . . . . . . . . . . . . . . Body (\n[Go+ CI/Test]   |   100: 44: . . . . . . . . . . . . . . . . . . . . . . . . . \"{\"\n[Go+ CI/Test]   |   101:  3: . . . . . . . . . . . . . . . . . . . . . . . . . StatementList (\n[Go+ CI/Test]   |   101:  3: . . . . . . . . . . . . . . . . . . . . . . . . . . Statement (\n[Go+ CI/Test]   |   101:  3: . . . . . . . . . . . . . . . . . . . . . . . . . . . ReturnStmt (\n[Go+ CI/Test]   |   101:  3: . . . . . . . . . . . . . . . . . . . . . . . . . . . . \"return\"\n[Go+ CI/Test]   |   101: 10: . . . . . . . . . . . . . . . . . . . . . . . . . . . . ExpressionList (\n[Go+ CI/Test]   |   101: 10: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |   101: 10: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |   101: 10: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |   101: 10: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |   101: 10: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |   101: 10: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . IDENT strings\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: strings}\n[Go+ CI/Test]   |   101: 17: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |   101: 17: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . \".\"\n[Go+ CI/Test]   |   101: 18: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . Selector (\n[Go+ CI/Test]   |   101: 18: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . IDENT HasPrefix\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: HasPrefix}\n[Go+ CI/Test]   |   101: 27: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |   101: 27: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . CallOrConversion (\n[Go+ CI/Test]   |   101: 27: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . \"(\"\n[Go+ CI/Test]   |   101: 28: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |   101: 28: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |   101: 28: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |   101: 28: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |   101: 28: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |   101: 28: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . IDENT v\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: v}\n[Go+ CI/Test]   |   101: 29: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |   101: 29: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |   101: 29: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |   101: 29: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |   101: 29: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |   101: 29: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . \",\"\n[Go+ CI/Test]   |   101: 31: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |   101: 31: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |   101: 31: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |   101: 31: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |   101: 31: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: STRING, Value: \"p\"}\n[Go+ CI/Test]   |   101: 31: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . STRING \"p\"\n[Go+ CI/Test]   |   101: 34: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |   101: 34: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |   101: 34: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |   101: 34: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |   101: 34: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |   101: 34: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . \")\"\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1878: ast.CallExpr{Fun: &{strings HasPrefix}, Ellipsis: false, isCmd: false}\n[Go+ CI/Test]   |   101: 35: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |   101: 35: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |   101: 35: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |   101: 35: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |   101: 35: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |   101: 35: . . . . . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |   101: 35: . . . . . . . . . . . . . . . . . . . . . . . . . . . . \";\"\n[Go+ CI/Test]   |   102:  2: . . . . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |   102:  2: . . . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |   102:  2: . . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |   102:  2: . . . . . . . . . . . . . . . . . . . . . . . . . \"}\"\n[Go+ CI/Test]   |   102:  3: . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |   102:  3: . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |   102:  3: . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |   102:  3: . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |   102:  3: . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |   102:  3: . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |   102:  3: . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |   102:  3: . . . . . . . . . . . . . . . . . . \")\"\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1878: ast.CallExpr{Fun: All, Ellipsis: false, isCmd: false}\n[Go+ CI/Test]   |   102:  4: . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |   102:  4: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |   102:  4: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |   102:  4: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |   102:  4: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |   102:  4: . . . . . . . . . . . . . \")\"\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1878: ast.CallExpr{Fun: &{fmt Println}, Ellipsis: false, isCmd: false}\n[Go+ CI/Test]   |   102:  5: . . . . . . . . . . . . )\n[Go+ CI/Test]   |   102:  5: . . . . . . . . . . . )\n[Go+ CI/Test]   |   102:  5: . . . . . . . . . . )\n[Go+ CI/Test]   |   102:  5: . . . . . . . . . )\n[Go+ CI/Test]   |   102:  5: . . . . . . . . )\n[Go+ CI/Test]   |   102:  5: . . . . . . . )\n[Go+ CI/Test]   |   102:  5: . . . . . . )\n[Go+ CI/Test]   |   102:  5: . . . . . . \";\"\n[Go+ CI/Test]   |   104:  2: . . . . . )\n[Go+ CI/Test]   |   104:  2: . . . . . Statement (\n[Go+ CI/Test]   |   104:  2: . . . . . . SimpleStmt (\n[Go+ CI/Test]   |   104:  2: . . . . . . . ExpressionList (\n[Go+ CI/Test]   |   104:  2: . . . . . . . . Expression (\n[Go+ CI/Test]   |   104:  2: . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |   104:  2: . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |   104:  2: . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |   104:  2: . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |   104:  2: . . . . . . . . . . . . . IDENT fmt\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: fmt}\n[Go+ CI/Test]   |   104:  5: . . . . . . . . . . . . )\n[Go+ CI/Test]   |   104:  5: . . . . . . . . . . . . \".\"\n[Go+ CI/Test]   |   104:  6: . . . . . . . . . . . . Selector (\n[Go+ CI/Test]   |   104:  6: . . . . . . . . . . . . . IDENT Println\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: Println}\n[Go+ CI/Test]   |   104: 13: . . . . . . . . . . . . )\n[Go+ CI/Test]   |   104: 13: . . . . . . . . . . . . CallOrConversion (\n[Go+ CI/Test]   |   104: 13: . . . . . . . . . . . . . \"(\"\n[Go+ CI/Test]   |   104: 14: . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |   104: 14: . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |   104: 14: . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |   104: 14: . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |   104: 14: . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |   104: 14: . . . . . . . . . . . . . . . . . . IDENT Filter\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: Filter}\n[Go+ CI/Test]   |   104: 20: . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |   104: 20: . . . . . . . . . . . . . . . . . CallOrConversion (\n[Go+ CI/Test]   |   104: 20: . . . . . . . . . . . . . . . . . . \"(\"\n[Go+ CI/Test]   |   104: 21: . . . . . . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |   104: 21: . . . . . . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |   104: 21: . . . . . . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |   104: 21: . . . . . . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |   104: 21: . . . . . . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |   104: 21: . . . . . . . . . . . . . . . . . . . . . . . IDENT strs\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: strs}\n[Go+ CI/Test]   |   104: 25: . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |   104: 25: . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |   104: 25: . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |   104: 25: . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |   104: 25: . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |   104: 25: . . . . . . . . . . . . . . . . . . \",\"\n[Go+ CI/Test]   |   104: 27: . . . . . . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |   104: 27: . . . . . . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |   104: 27: . . . . . . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |   104: 27: . . . . . . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |   104: 27: . . . . . . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |   104: 27: . . . . . . . . . . . . . . . . . . . . . . . FuncTypeOrLit (\n[Go+ CI/Test]   |   104: 27: . . . . . . . . . . . . . . . . . . . . . . . . FuncType (\n[Go+ CI/Test]   |   104: 27: . . . . . . . . . . . . . . . . . . . . . . . . . \"func\"\n[Go+ CI/Test]   |   104: 31: . . . . . . . . . . . . . . . . . . . . . . . . . Signature (\n[Go+ CI/Test]   |   104: 31: . . . . . . . . . . . . . . . . . . . . . . . . . . Parameters (\n[Go+ CI/Test]   |   104: 31: . . . . . . . . . . . . . . . . . . . . . . . . . . . \"(\"\n[Go+ CI/Test]   |   104: 32: . . . . . . . . . . . . . . . . . . . . . . . . . . . ParameterList (\n[Go+ CI/Test]   |   104: 32: . . . . . . . . . . . . . . . . . . . . . . . . . . . . ParamDeclOrNil (\n[Go+ CI/Test]   |   104: 32: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . IDENT v\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: v}\n[Go+ CI/Test]   |   104: 34: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . Type (\n[Go+ CI/Test]   |   104: 34: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . TypeName (\n[Go+ CI/Test]   |   104: 34: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . IDENT string\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: string}\n[Go+ CI/Test]   |   104: 40: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |   104: 40: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |   104: 40: . . . . . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |   104: 40: . . . . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |   104: 40: . . . . . . . . . . . . . . . . . . . . . . . . . . . \")\"\n[Go+ CI/Test]   |   104: 42: . . . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |   104: 42: . . . . . . . . . . . . . . . . . . . . . . . . . . Result (\n[Go+ CI/Test]   |   104: 42: . . . . . . . . . . . . . . . . . . . . . . . . . . . TypeName (\n[Go+ CI/Test]   |   104: 42: . . . . . . . . . . . . . . . . . . . . . . . . . . . . IDENT bool\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: bool}\n[Go+ CI/Test]   |   104: 47: . . . . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |   104: 47: . . . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |   104: 47: . . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |   104: 47: . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |   104: 47: . . . . . . . . . . . . . . . . . . . . . . . . Body (\n[Go+ CI/Test]   |   104: 47: . . . . . . . . . . . . . . . . . . . . . . . . . \"{\"\n[Go+ CI/Test]   |   105:  3: . . . . . . . . . . . . . . . . . . . . . . . . . StatementList (\n[Go+ CI/Test]   |   105:  3: . . . . . . . . . . . . . . . . . . . . . . . . . . Statement (\n[Go+ CI/Test]   |   105:  3: . . . . . . . . . . . . . . . . . . . . . . . . . . . ReturnStmt (\n[Go+ CI/Test]   |   105:  3: . . . . . . . . . . . . . . . . . . . . . . . . . . . . \"return\"\n[Go+ CI/Test]   |   105: 10: . . . . . . . . . . . . . . . . . . . . . . . . . . . . ExpressionList (\n[Go+ CI/Test]   |   105: 10: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |   105: 10: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |   105: 10: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |   105: 10: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |   105: 10: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |   105: 10: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . IDENT strings\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: strings}\n[Go+ CI/Test]   |   105: 17: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |   105: 17: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . \".\"\n[Go+ CI/Test]   |   105: 18: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . Selector (\n[Go+ CI/Test]   |   105: 18: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . IDENT Contains\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: Contains}\n[Go+ CI/Test]   |   105: 26: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |   105: 26: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . CallOrConversion (\n[Go+ CI/Test]   |   105: 26: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . \"(\"\n[Go+ CI/Test]   |   105: 27: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |   105: 27: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |   105: 27: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |   105: 27: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |   105: 27: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |   105: 27: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . IDENT v\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: v}\n[Go+ CI/Test]   |   105: 28: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |   105: 28: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |   105: 28: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |   105: 28: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |   105: 28: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |   105: 28: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . \",\"\n[Go+ CI/Test]   |   105: 30: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |   105: 30: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |   105: 30: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |   105: 30: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |   105: 30: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: STRING, Value: \"e\"}\n[Go+ CI/Test]   |   105: 30: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . STRING \"e\"\n[Go+ CI/Test]   |   105: 33: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |   105: 33: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |   105: 33: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |   105: 33: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |   105: 33: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |   105: 33: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . \")\"\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1878: ast.CallExpr{Fun: &{strings Contains}, Ellipsis: false, isCmd: false}\n[Go+ CI/Test]   |   105: 34: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |   105: 34: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |   105: 34: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |   105: 34: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |   105: 34: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |   105: 34: . . . . . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |   105: 34: . . . . . . . . . . . . . . . . . . . . . . . . . . . . \";\"\n[Go+ CI/Test]   |   106:  2: . . . . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |   106:  2: . . . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |   106:  2: . . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |   106:  2: . . . . . . . . . . . . . . . . . . . . . . . . . \"}\"\n[Go+ CI/Test]   |   106:  3: . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |   106:  3: . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |   106:  3: . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |   106:  3: . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |   106:  3: . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |   106:  3: . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |   106:  3: . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |   106:  3: . . . . . . . . . . . . . . . . . . \")\"\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1878: ast.CallExpr{Fun: Filter, Ellipsis: false, isCmd: false}\n[Go+ CI/Test]   |   106:  4: . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |   106:  4: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |   106:  4: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |   106:  4: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |   106:  4: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |   106:  4: . . . . . . . . . . . . . \")\"\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1878: ast.CallExpr{Fun: &{fmt Println}, Ellipsis: false, isCmd: false}\n[Go+ CI/Test]   |   106:  5: . . . . . . . . . . . . )\n[Go+ CI/Test]   |   106:  5: . . . . . . . . . . . )\n[Go+ CI/Test]   |   106:  5: . . . . . . . . . . )\n[Go+ CI/Test]   |   106:  5: . . . . . . . . . )\n[Go+ CI/Test]   |   106:  5: . . . . . . . . )\n[Go+ CI/Test]   |   106:  5: . . . . . . . )\n[Go+ CI/Test]   |   106:  5: . . . . . . )\n[Go+ CI/Test]   |   106:  5: . . . . . . \";\"\n[Go+ CI/Test]   |   108:  2: . . . . . . COMMENT\n[Go+ CI/Test]   |   109:  2: . . . . . . COMMENT\n[Go+ CI/Test]   |   110:  2: . . . . . . COMMENT\n[Go+ CI/Test]   |   111:  2: . . . . . )\n[Go+ CI/Test]   |   111:  2: . . . . . Statement (\n[Go+ CI/Test]   |   111:  2: . . . . . . SimpleStmt (\n[Go+ CI/Test]   |   111:  2: . . . . . . . ExpressionList (\n[Go+ CI/Test]   |   111:  2: . . . . . . . . Expression (\n[Go+ CI/Test]   |   111:  2: . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |   111:  2: . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |   111:  2: . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |   111:  2: . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |   111:  2: . . . . . . . . . . . . . IDENT fmt\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: fmt}\n[Go+ CI/Test]   |   111:  5: . . . . . . . . . . . . )\n[Go+ CI/Test]   |   111:  5: . . . . . . . . . . . . \".\"\n[Go+ CI/Test]   |   111:  6: . . . . . . . . . . . . Selector (\n[Go+ CI/Test]   |   111:  6: . . . . . . . . . . . . . IDENT Println\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: Println}\n[Go+ CI/Test]   |   111: 13: . . . . . . . . . . . . )\n[Go+ CI/Test]   |   111: 13: . . . . . . . . . . . . CallOrConversion (\n[Go+ CI/Test]   |   111: 13: . . . . . . . . . . . . . \"(\"\n[Go+ CI/Test]   |   111: 14: . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |   111: 14: . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |   111: 14: . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |   111: 14: . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |   111: 14: . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |   111: 14: . . . . . . . . . . . . . . . . . . IDENT Map\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: Map}\n[Go+ CI/Test]   |   111: 17: . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |   111: 17: . . . . . . . . . . . . . . . . . CallOrConversion (\n[Go+ CI/Test]   |   111: 17: . . . . . . . . . . . . . . . . . . \"(\"\n[Go+ CI/Test]   |   111: 18: . . . . . . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |   111: 18: . . . . . . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |   111: 18: . . . . . . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |   111: 18: . . . . . . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |   111: 18: . . . . . . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |   111: 18: . . . . . . . . . . . . . . . . . . . . . . . IDENT strs\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: strs}\n[Go+ CI/Test]   |   111: 22: . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |   111: 22: . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |   111: 22: . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |   111: 22: . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |   111: 22: . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |   111: 22: . . . . . . . . . . . . . . . . . . \",\"\n[Go+ CI/Test]   |   111: 24: . . . . . . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |   111: 24: . . . . . . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |   111: 24: . . . . . . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |   111: 24: . . . . . . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |   111: 24: . . . . . . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |   111: 24: . . . . . . . . . . . . . . . . . . . . . . . IDENT strings\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: strings}\n[Go+ CI/Test]   |   111: 31: . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |   111: 31: . . . . . . . . . . . . . . . . . . . . . . \".\"\n[Go+ CI/Test]   |   111: 32: . . . . . . . . . . . . . . . . . . . . . . Selector (\n[Go+ CI/Test]   |   111: 32: . . . . . . . . . . . . . . . . . . . . . . . IDENT ToUpper\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: ToUpper}\n[Go+ CI/Test]   |   111: 39: . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |   111: 39: . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |   111: 39: . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |   111: 39: . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |   111: 39: . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |   111: 39: . . . . . . . . . . . . . . . . . . \")\"\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1878: ast.CallExpr{Fun: Map, Ellipsis: false, isCmd: false}\n[Go+ CI/Test]   |   111: 40: . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |   111: 40: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |   111: 40: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |   111: 40: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |   111: 40: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |   111: 40: . . . . . . . . . . . . . \")\"\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1878: ast.CallExpr{Fun: &{fmt Println}, Ellipsis: false, isCmd: false}\n[Go+ CI/Test]   |   111: 41: . . . . . . . . . . . . )\n[Go+ CI/Test]   |   111: 41: . . . . . . . . . . . )\n[Go+ CI/Test]   |   111: 41: . . . . . . . . . . )\n[Go+ CI/Test]   |   111: 41: . . . . . . . . . )\n[Go+ CI/Test]   |   111: 41: . . . . . . . . )\n[Go+ CI/Test]   |   111: 41: . . . . . . . )\n[Go+ CI/Test]   |   111: 41: . . . . . . )\n[Go+ CI/Test]   |   111: 41: . . . . . . \";\"\n[Go+ CI/Test]   |   113:  1: . . . . . )\n[Go+ CI/Test]   |   113:  1: . . . . )\n[Go+ CI/Test]   |   113:  1: . . . . \"}\"\n[Go+ CI/Test]   |   113:  2: . . . )\n[Go+ CI/Test]   |   113:  2: . . . \";\"\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:3564: ast.FuncDecl{Name: main, ...}\n[Go+ CI/Test]   |   113:  3: . . )\n[Go+ CI/Test]   |   113:  3: . )\n[Go+ CI/Test]   |   113:  3: )\n[Go+ CI/Test]   | === RUN   TestFromTestdata/complit\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parserdir_test.go:90: Parsing /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/_testdata/complit\n[Go+ CI/Test]   |     1:  1: File (\n[Go+ CI/Test]   |     1:  1: . Declaration (\n[Go+ CI/Test]   |     1:  1: . . StatementList (\n[Go+ CI/Test]   |     1:  1: . . . Statement (\n[Go+ CI/Test]   |     1:  1: . . . . SimpleStmt (\n[Go+ CI/Test]   |     1:  1: . . . . . ExpressionList (\n[Go+ CI/Test]   |     1:  1: . . . . . . Expression (\n[Go+ CI/Test]   |     1:  1: . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     1:  1: . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     1:  1: . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     1:  1: . . . . . . . . . . Operand (\n[Go+ CI/Test]   |     1:  1: . . . . . . . . . . . IDENT a\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: a}\n[Go+ CI/Test]   |     1:  3: . . . . . . . . . . )\n[Go+ CI/Test]   |     1:  3: . . . . . . . . . )\n[Go+ CI/Test]   |     1:  3: . . . . . . . . )\n[Go+ CI/Test]   |     1:  3: . . . . . . . )\n[Go+ CI/Test]   |     1:  3: . . . . . . )\n[Go+ CI/Test]   |     1:  3: . . . . . )\n[Go+ CI/Test]   |     1:  3: . . . . . \":=\"\n[Go+ CI/Test]   |     1:  6: . . . . . ExpressionList (\n[Go+ CI/Test]   |     1:  6: . . . . . . Expression (\n[Go+ CI/Test]   |     1:  6: . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     1:  6: . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     1:  6: . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     1:  6: . . . . . . . . . . Operand (\n[Go+ CI/Test]   |     1:  6: . . . . . . . . . . . ArrayType (\n[Go+ CI/Test]   |     1:  6: . . . . . . . . . . . . \"[\"\n[Go+ CI/Test]   |     1:  7: . . . . . . . . . . . . \"]\"\n[Go+ CI/Test]   |     1:  8: . . . . . . . . . . . . ArrayType (\n[Go+ CI/Test]   |     1:  8: . . . . . . . . . . . . . \"[\"\n[Go+ CI/Test]   |     1:  9: . . . . . . . . . . . . . \"]\"\n[Go+ CI/Test]   |     1: 10: . . . . . . . . . . . . . TypeName (\n[Go+ CI/Test]   |     1: 10: . . . . . . . . . . . . . . IDENT int\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: int}\n[Go+ CI/Test]   |     1: 13: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:870: ast.ArrayType{Len: <nil>, Elt: int}\n[Go+ CI/Test]   |     1: 13: . . . . . . . . . . . . )\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:870: ast.ArrayType{Len: <nil>, Elt: &{8 <nil> int}}\n[Go+ CI/Test]   |     1: 13: . . . . . . . . . . . )\n[Go+ CI/Test]   |     1: 13: . . . . . . . . . . )\n[Go+ CI/Test]   |     1: 13: . . . . . . . . . . LiteralValue (\n[Go+ CI/Test]   |     1: 13: . . . . . . . . . . . \"{\"\n[Go+ CI/Test]   |     1: 14: . . . . . . . . . . . \"}\"\n[Go+ CI/Test]   |     1: 15: . . . . . . . . . . )\n[Go+ CI/Test]   |     1: 15: . . . . . . . . . )\n[Go+ CI/Test]   |     1: 15: . . . . . . . . )\n[Go+ CI/Test]   |     1: 15: . . . . . . . )\n[Go+ CI/Test]   |     1: 15: . . . . . . )\n[Go+ CI/Test]   |     1: 15: . . . . . )\n[Go+ CI/Test]   |     1: 15: . . . . )\n[Go+ CI/Test]   |     1: 15: . . . . \";\"\n[Go+ CI/Test]   |     2:  1: . . . )\n[Go+ CI/Test]   |     2:  1: . . . Statement (\n[Go+ CI/Test]   |     2:  1: . . . . SimpleStmt (\n[Go+ CI/Test]   |     2:  1: . . . . . ExpressionList (\n[Go+ CI/Test]   |     2:  1: . . . . . . Expression (\n[Go+ CI/Test]   |     2:  1: . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     2:  1: . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     2:  1: . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     2:  1: . . . . . . . . . . Operand (\n[Go+ CI/Test]   |     2:  1: . . . . . . . . . . . IDENT println\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: println}\n[Go+ CI/Test]   |     2:  8: . . . . . . . . . . )\n[Go+ CI/Test]   |     2:  8: . . . . . . . . . . CallOrConversion (\n[Go+ CI/Test]   |     2:  8: . . . . . . . . . . . \"(\"\n[Go+ CI/Test]   |     2:  9: . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |     2:  9: . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     2:  9: . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     2:  9: . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     2:  9: . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |     2:  9: . . . . . . . . . . . . . . . . IDENT a\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: a}\n[Go+ CI/Test]   |     2: 10: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 10: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 10: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 10: . . . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 10: . . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 10: . . . . . . . . . . . \")\"\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1878: ast.CallExpr{Fun: println, Ellipsis: false, isCmd: false}\n[Go+ CI/Test]   |     2: 11: . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 11: . . . . . . . . . )\n[Go+ CI/Test]   |     2: 11: . . . . . . . . )\n[Go+ CI/Test]   |     2: 11: . . . . . . . )\n[Go+ CI/Test]   |     2: 11: . . . . . . )\n[Go+ CI/Test]   |     2: 11: . . . . . )\n[Go+ CI/Test]   |     2: 11: . . . . )\n[Go+ CI/Test]   |     2: 11: . . . . \";\"\n[Go+ CI/Test]   |     2: 12: . . . )\n[Go+ CI/Test]   |     2: 12: . . )\n[Go+ CI/Test]   |     2: 12: . )\n[Go+ CI/Test]   |     2: 12: )\n[Go+ CI/Test]   | === RUN   TestFromTestdata/errwrap1\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parserdir_test.go:90: Parsing /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/_testdata/errwrap1\n[Go+ CI/Test]   |     1:  1: File (\n[Go+ CI/Test]   |     1:  1: . GenDecl(import) (\n[Go+ CI/Test]   |     1:  1: . . \"import\"\n[Go+ CI/Test]   |     1:  8: . . \"(\"\n[Go+ CI/Test]   |     2:  2: . . ImportSpec (\n[Go+ CI/Test]   |     2:  2: . . . STRING \"strconv\"\n[Go+ CI/Test]   |     2: 11: . . . \";\"\n[Go+ CI/Test]   |     3:  1: . . )\n[Go+ CI/Test]   |     3:  1: . . \")\"\n[Go+ CI/Test]   |     3:  2: . . \";\"\n[Go+ CI/Test]   |     5:  1: . )\n[Go+ CI/Test]   |     5:  1: . Declaration (\n[Go+ CI/Test]   |     5:  1: . . FunctionDecl (\n[Go+ CI/Test]   |     5:  1: . . . \"func\"\n[Go+ CI/Test]   |     5:  6: . . . IDENT add\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: add}\n[Go+ CI/Test]   |     5:  9: . . . Signature (\n[Go+ CI/Test]   |     5:  9: . . . . Parameters (\n[Go+ CI/Test]   |     5:  9: . . . . . \"(\"\n[Go+ CI/Test]   |     5: 10: . . . . . ParameterList (\n[Go+ CI/Test]   |     5: 10: . . . . . . ParamDeclOrNil (\n[Go+ CI/Test]   |     5: 10: . . . . . . . IDENT x\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: x}\n[Go+ CI/Test]   |     5: 11: . . . . . . )\n[Go+ CI/Test]   |     5: 11: . . . . . . \",\"\n[Go+ CI/Test]   |     5: 13: . . . . . . ParamDeclOrNil (\n[Go+ CI/Test]   |     5: 13: . . . . . . . IDENT y\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: y}\n[Go+ CI/Test]   |     5: 15: . . . . . . . Type (\n[Go+ CI/Test]   |     5: 15: . . . . . . . . TypeName (\n[Go+ CI/Test]   |     5: 15: . . . . . . . . . IDENT string\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: string}\n[Go+ CI/Test]   |     5: 21: . . . . . . . . )\n[Go+ CI/Test]   |     5: 21: . . . . . . . )\n[Go+ CI/Test]   |     5: 21: . . . . . . )\n[Go+ CI/Test]   |     5: 21: . . . . . )\n[Go+ CI/Test]   |     5: 21: . . . . . \")\"\n[Go+ CI/Test]   |     5: 23: . . . . )\n[Go+ CI/Test]   |     5: 23: . . . . Result (\n[Go+ CI/Test]   |     5: 23: . . . . . Parameters (\n[Go+ CI/Test]   |     5: 23: . . . . . . \"(\"\n[Go+ CI/Test]   |     5: 24: . . . . . . ParameterList (\n[Go+ CI/Test]   |     5: 24: . . . . . . . ParamDeclOrNil (\n[Go+ CI/Test]   |     5: 24: . . . . . . . . IDENT int\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: int}\n[Go+ CI/Test]   |     5: 27: . . . . . . . )\n[Go+ CI/Test]   |     5: 27: . . . . . . . \",\"\n[Go+ CI/Test]   |     5: 29: . . . . . . . ParamDeclOrNil (\n[Go+ CI/Test]   |     5: 29: . . . . . . . . IDENT error\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: error}\n[Go+ CI/Test]   |     5: 34: . . . . . . . )\n[Go+ CI/Test]   |     5: 34: . . . . . . )\n[Go+ CI/Test]   |     5: 34: . . . . . . \")\"\n[Go+ CI/Test]   |     5: 36: . . . . . )\n[Go+ CI/Test]   |     5: 36: . . . . )\n[Go+ CI/Test]   |     5: 36: . . . )\n[Go+ CI/Test]   |     5: 36: . . . Body (\n[Go+ CI/Test]   |     5: 36: . . . . \"{\"\n[Go+ CI/Test]   |     6:  2: . . . . StatementList (\n[Go+ CI/Test]   |     6:  2: . . . . . Statement (\n[Go+ CI/Test]   |     6:  2: . . . . . . ReturnStmt (\n[Go+ CI/Test]   |     6:  2: . . . . . . . \"return\"\n[Go+ CI/Test]   |     6:  9: . . . . . . . ExpressionList (\n[Go+ CI/Test]   |     6:  9: . . . . . . . . Expression (\n[Go+ CI/Test]   |     6:  9: . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     6:  9: . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     6:  9: . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     6:  9: . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |     6:  9: . . . . . . . . . . . . . IDENT strconv\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: strconv}\n[Go+ CI/Test]   |     6: 16: . . . . . . . . . . . . )\n[Go+ CI/Test]   |     6: 16: . . . . . . . . . . . . \".\"\n[Go+ CI/Test]   |     6: 17: . . . . . . . . . . . . Selector (\n[Go+ CI/Test]   |     6: 17: . . . . . . . . . . . . . IDENT Atoi\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: Atoi}\n[Go+ CI/Test]   |     6: 21: . . . . . . . . . . . . )\n[Go+ CI/Test]   |     6: 21: . . . . . . . . . . . . CallOrConversion (\n[Go+ CI/Test]   |     6: 21: . . . . . . . . . . . . . \"(\"\n[Go+ CI/Test]   |     6: 22: . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |     6: 22: . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     6: 22: . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     6: 22: . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     6: 22: . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |     6: 22: . . . . . . . . . . . . . . . . . . IDENT x\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: x}\n[Go+ CI/Test]   |     6: 23: . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     6: 23: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     6: 23: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     6: 23: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     6: 23: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     6: 23: . . . . . . . . . . . . . \")\"\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1878: ast.CallExpr{Fun: &{strconv Atoi}, Ellipsis: false, isCmd: false}\n[Go+ CI/Test]   |     6: 24: . . . . . . . . . . . . )\n[Go+ CI/Test]   |     6: 24: . . . . . . . . . . . . \"?\"\n[Go+ CI/Test]   |     6: 26: . . . . . . . . . . . )\n[Go+ CI/Test]   |     6: 26: . . . . . . . . . . )\n[Go+ CI/Test]   |     6: 26: . . . . . . . . . . \"+\"\n[Go+ CI/Test]   |     6: 28: . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     6: 28: . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     6: 28: . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     6: 28: . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |     6: 28: . . . . . . . . . . . . . . IDENT strconv\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: strconv}\n[Go+ CI/Test]   |     6: 35: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     6: 35: . . . . . . . . . . . . . \".\"\n[Go+ CI/Test]   |     6: 36: . . . . . . . . . . . . . Selector (\n[Go+ CI/Test]   |     6: 36: . . . . . . . . . . . . . . IDENT Atoi\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: Atoi}\n[Go+ CI/Test]   |     6: 40: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     6: 40: . . . . . . . . . . . . . CallOrConversion (\n[Go+ CI/Test]   |     6: 40: . . . . . . . . . . . . . . \"(\"\n[Go+ CI/Test]   |     6: 41: . . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |     6: 41: . . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     6: 41: . . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     6: 41: . . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     6: 41: . . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |     6: 41: . . . . . . . . . . . . . . . . . . . IDENT y\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: y}\n[Go+ CI/Test]   |     6: 42: . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     6: 42: . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     6: 42: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     6: 42: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     6: 42: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     6: 42: . . . . . . . . . . . . . . \")\"\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1878: ast.CallExpr{Fun: &{strconv Atoi}, Ellipsis: false, isCmd: false}\n[Go+ CI/Test]   |     6: 43: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     6: 43: . . . . . . . . . . . . . \"?\"\n[Go+ CI/Test]   |     6: 44: . . . . . . . . . . . . )\n[Go+ CI/Test]   |     6: 44: . . . . . . . . . . . )\n[Go+ CI/Test]   |     6: 44: . . . . . . . . . . )\n[Go+ CI/Test]   |     6: 44: . . . . . . . . . )\n[Go+ CI/Test]   |     6: 44: . . . . . . . . )\n[Go+ CI/Test]   |     6: 44: . . . . . . . . \",\"\n[Go+ CI/Test]   |     6: 46: . . . . . . . . Expression (\n[Go+ CI/Test]   |     6: 46: . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     6: 46: . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     6: 46: . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     6: 46: . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |     6: 46: . . . . . . . . . . . . . IDENT nil\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: nil}\n[Go+ CI/Test]   |     6: 49: . . . . . . . . . . . . )\n[Go+ CI/Test]   |     6: 49: . . . . . . . . . . . )\n[Go+ CI/Test]   |     6: 49: . . . . . . . . . . )\n[Go+ CI/Test]   |     6: 49: . . . . . . . . . )\n[Go+ CI/Test]   |     6: 49: . . . . . . . . )\n[Go+ CI/Test]   |     6: 49: . . . . . . . )\n[Go+ CI/Test]   |     6: 49: . . . . . . . \";\"\n[Go+ CI/Test]   |     7:  1: . . . . . . )\n[Go+ CI/Test]   |     7:  1: . . . . . )\n[Go+ CI/Test]   |     7:  1: . . . . )\n[Go+ CI/Test]   |     7:  1: . . . . \"}\"\n[Go+ CI/Test]   |     7:  2: . . . )\n[Go+ CI/Test]   |     7:  2: . . . \";\"\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:3564: ast.FuncDecl{Name: add, ...}\n[Go+ CI/Test]   |     9:  1: . . )\n[Go+ CI/Test]   |     9:  1: . )\n[Go+ CI/Test]   |     9:  1: . Declaration (\n[Go+ CI/Test]   |     9:  1: . . FunctionDecl (\n[Go+ CI/Test]   |     9:  1: . . . \"func\"\n[Go+ CI/Test]   |     9:  6: . . . IDENT addSafe\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: addSafe}\n[Go+ CI/Test]   |     9: 13: . . . Signature (\n[Go+ CI/Test]   |     9: 13: . . . . Parameters (\n[Go+ CI/Test]   |     9: 13: . . . . . \"(\"\n[Go+ CI/Test]   |     9: 14: . . . . . ParameterList (\n[Go+ CI/Test]   |     9: 14: . . . . . . ParamDeclOrNil (\n[Go+ CI/Test]   |     9: 14: . . . . . . . IDENT x\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: x}\n[Go+ CI/Test]   |     9: 15: . . . . . . )\n[Go+ CI/Test]   |     9: 15: . . . . . . \",\"\n[Go+ CI/Test]   |     9: 17: . . . . . . ParamDeclOrNil (\n[Go+ CI/Test]   |     9: 17: . . . . . . . IDENT y\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: y}\n[Go+ CI/Test]   |     9: 19: . . . . . . . Type (\n[Go+ CI/Test]   |     9: 19: . . . . . . . . TypeName (\n[Go+ CI/Test]   |     9: 19: . . . . . . . . . IDENT string\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: string}\n[Go+ CI/Test]   |     9: 25: . . . . . . . . )\n[Go+ CI/Test]   |     9: 25: . . . . . . . )\n[Go+ CI/Test]   |     9: 25: . . . . . . )\n[Go+ CI/Test]   |     9: 25: . . . . . )\n[Go+ CI/Test]   |     9: 25: . . . . . \")\"\n[Go+ CI/Test]   |     9: 27: . . . . )\n[Go+ CI/Test]   |     9: 27: . . . . Result (\n[Go+ CI/Test]   |     9: 27: . . . . . TypeName (\n[Go+ CI/Test]   |     9: 27: . . . . . . IDENT int\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: int}\n[Go+ CI/Test]   |     9: 31: . . . . . )\n[Go+ CI/Test]   |     9: 31: . . . . )\n[Go+ CI/Test]   |     9: 31: . . . )\n[Go+ CI/Test]   |     9: 31: . . . Body (\n[Go+ CI/Test]   |     9: 31: . . . . \"{\"\n[Go+ CI/Test]   |    10:  2: . . . . StatementList (\n[Go+ CI/Test]   |    10:  2: . . . . . Statement (\n[Go+ CI/Test]   |    10:  2: . . . . . . ReturnStmt (\n[Go+ CI/Test]   |    10:  2: . . . . . . . \"return\"\n[Go+ CI/Test]   |    10:  9: . . . . . . . ExpressionList (\n[Go+ CI/Test]   |    10:  9: . . . . . . . . Expression (\n[Go+ CI/Test]   |    10:  9: . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    10:  9: . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    10:  9: . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    10:  9: . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |    10:  9: . . . . . . . . . . . . . IDENT strconv\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: strconv}\n[Go+ CI/Test]   |    10: 16: . . . . . . . . . . . . )\n[Go+ CI/Test]   |    10: 16: . . . . . . . . . . . . \".\"\n[Go+ CI/Test]   |    10: 17: . . . . . . . . . . . . Selector (\n[Go+ CI/Test]   |    10: 17: . . . . . . . . . . . . . IDENT Atoi\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: Atoi}\n[Go+ CI/Test]   |    10: 21: . . . . . . . . . . . . )\n[Go+ CI/Test]   |    10: 21: . . . . . . . . . . . . CallOrConversion (\n[Go+ CI/Test]   |    10: 21: . . . . . . . . . . . . . \"(\"\n[Go+ CI/Test]   |    10: 22: . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |    10: 22: . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    10: 22: . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    10: 22: . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    10: 22: . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |    10: 22: . . . . . . . . . . . . . . . . . . IDENT x\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: x}\n[Go+ CI/Test]   |    10: 23: . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    10: 23: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    10: 23: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    10: 23: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    10: 23: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    10: 23: . . . . . . . . . . . . . \")\"\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1878: ast.CallExpr{Fun: &{strconv Atoi}, Ellipsis: false, isCmd: false}\n[Go+ CI/Test]   |    10: 24: . . . . . . . . . . . . )\n[Go+ CI/Test]   |    10: 24: . . . . . . . . . . . . \"?\"\n[Go+ CI/Test]   |    10: 25: . . . . . . . . . . . )\n[Go+ CI/Test]   |    10: 25: . . . . . . . . . . . \":\"\n[Go+ CI/Test]   |    10: 26: . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    10: 26: . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    10: 26: . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: INT, Value: 0}\n[Go+ CI/Test]   |    10: 26: . . . . . . . . . . . . . . INT 0\n[Go+ CI/Test]   |    10: 28: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    10: 28: . . . . . . . . . . . . )\n[Go+ CI/Test]   |    10: 28: . . . . . . . . . . . )\n[Go+ CI/Test]   |    10: 28: . . . . . . . . . . )\n[Go+ CI/Test]   |    10: 28: . . . . . . . . . . \"+\"\n[Go+ CI/Test]   |    10: 30: . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    10: 30: . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    10: 30: . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    10: 30: . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |    10: 30: . . . . . . . . . . . . . . IDENT strconv\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: strconv}\n[Go+ CI/Test]   |    10: 37: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    10: 37: . . . . . . . . . . . . . \".\"\n[Go+ CI/Test]   |    10: 38: . . . . . . . . . . . . . Selector (\n[Go+ CI/Test]   |    10: 38: . . . . . . . . . . . . . . IDENT Atoi\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: Atoi}\n[Go+ CI/Test]   |    10: 42: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    10: 42: . . . . . . . . . . . . . CallOrConversion (\n[Go+ CI/Test]   |    10: 42: . . . . . . . . . . . . . . \"(\"\n[Go+ CI/Test]   |    10: 43: . . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |    10: 43: . . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    10: 43: . . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    10: 43: . . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    10: 43: . . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |    10: 43: . . . . . . . . . . . . . . . . . . . IDENT y\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: y}\n[Go+ CI/Test]   |    10: 44: . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    10: 44: . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    10: 44: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    10: 44: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    10: 44: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    10: 44: . . . . . . . . . . . . . . \")\"\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1878: ast.CallExpr{Fun: &{strconv Atoi}, Ellipsis: false, isCmd: false}\n[Go+ CI/Test]   |    10: 45: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    10: 45: . . . . . . . . . . . . . \"?\"\n[Go+ CI/Test]   |    10: 46: . . . . . . . . . . . . )\n[Go+ CI/Test]   |    10: 46: . . . . . . . . . . . . \":\"\n[Go+ CI/Test]   |    10: 47: . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    10: 47: . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    10: 47: . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: INT, Value: 0}\n[Go+ CI/Test]   |    10: 47: . . . . . . . . . . . . . . . INT 0\n[Go+ CI/Test]   |    10: 48: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    10: 48: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    10: 48: . . . . . . . . . . . . )\n[Go+ CI/Test]   |    10: 48: . . . . . . . . . . . )\n[Go+ CI/Test]   |    10: 48: . . . . . . . . . . )\n[Go+ CI/Test]   |    10: 48: . . . . . . . . . )\n[Go+ CI/Test]   |    10: 48: . . . . . . . . )\n[Go+ CI/Test]   |    10: 48: . . . . . . . )\n[Go+ CI/Test]   |    10: 48: . . . . . . . \";\"\n[Go+ CI/Test]   |    11:  1: . . . . . . )\n[Go+ CI/Test]   |    11:  1: . . . . . )\n[Go+ CI/Test]   |    11:  1: . . . . )\n[Go+ CI/Test]   |    11:  1: . . . . \"}\"\n[Go+ CI/Test]   |    11:  2: . . . )\n[Go+ CI/Test]   |    11:  2: . . . \";\"\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:3564: ast.FuncDecl{Name: addSafe, ...}\n[Go+ CI/Test]   |    13:  1: . . )\n[Go+ CI/Test]   |    13:  1: . )\n[Go+ CI/Test]   |    13:  1: . Declaration (\n[Go+ CI/Test]   |    13:  1: . . StatementList (\n[Go+ CI/Test]   |    13:  1: . . . Statement (\n[Go+ CI/Test]   |    13:  1: . . . . SimpleStmt (\n[Go+ CI/Test]   |    13:  1: . . . . . ExpressionList (\n[Go+ CI/Test]   |    13:  1: . . . . . . Expression (\n[Go+ CI/Test]   |    13:  1: . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    13:  1: . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    13:  1: . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    13:  1: . . . . . . . . . . Operand (\n[Go+ CI/Test]   |    13:  1: . . . . . . . . . . . IDENT println\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: println}\n[Go+ CI/Test]   |    13:  8: . . . . . . . . . . )\n[Go+ CI/Test]   |    13:  8: . . . . . . . . . . CallOrConversion (\n[Go+ CI/Test]   |    13:  8: . . . . . . . . . . . \"(\"\n[Go+ CI/Test]   |    13:  9: . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |    13:  9: . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    13:  9: . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    13:  9: . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    13:  9: . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: STRING, Value: `add(\"100\", \"23\"):`}\n[Go+ CI/Test]   |    13:  9: . . . . . . . . . . . . . . . . STRING `add(\"100\", \"23\"):`\n[Go+ CI/Test]   |    13: 28: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    13: 28: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    13: 28: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    13: 28: . . . . . . . . . . . . )\n[Go+ CI/Test]   |    13: 28: . . . . . . . . . . . )\n[Go+ CI/Test]   |    13: 28: . . . . . . . . . . . \",\"\n[Go+ CI/Test]   |    13: 30: . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |    13: 30: . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    13: 30: . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    13: 30: . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    13: 30: . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |    13: 30: . . . . . . . . . . . . . . . . IDENT add\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: add}\n[Go+ CI/Test]   |    13: 33: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    13: 33: . . . . . . . . . . . . . . . CallOrConversion (\n[Go+ CI/Test]   |    13: 33: . . . . . . . . . . . . . . . . \"(\"\n[Go+ CI/Test]   |    13: 34: . . . . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |    13: 34: . . . . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    13: 34: . . . . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    13: 34: . . . . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    13: 34: . . . . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: STRING, Value: \"100\"}\n[Go+ CI/Test]   |    13: 34: . . . . . . . . . . . . . . . . . . . . . STRING \"100\"\n[Go+ CI/Test]   |    13: 39: . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    13: 39: . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    13: 39: . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    13: 39: . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    13: 39: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    13: 39: . . . . . . . . . . . . . . . . \",\"\n[Go+ CI/Test]   |    13: 41: . . . . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |    13: 41: . . . . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    13: 41: . . . . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    13: 41: . . . . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    13: 41: . . . . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: STRING, Value: \"23\"}\n[Go+ CI/Test]   |    13: 41: . . . . . . . . . . . . . . . . . . . . . STRING \"23\"\n[Go+ CI/Test]   |    13: 45: . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    13: 45: . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    13: 45: . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    13: 45: . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    13: 45: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    13: 45: . . . . . . . . . . . . . . . . \")\"\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1878: ast.CallExpr{Fun: add, Ellipsis: false, isCmd: false}\n[Go+ CI/Test]   |    13: 46: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    13: 46: . . . . . . . . . . . . . . . \"!\"\n[Go+ CI/Test]   |    13: 47: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    13: 47: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    13: 47: . . . . . . . . . . . . )\n[Go+ CI/Test]   |    13: 47: . . . . . . . . . . . )\n[Go+ CI/Test]   |    13: 47: . . . . . . . . . . . \")\"\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1878: ast.CallExpr{Fun: println, Ellipsis: false, isCmd: false}\n[Go+ CI/Test]   |    13: 48: . . . . . . . . . . )\n[Go+ CI/Test]   |    13: 48: . . . . . . . . . )\n[Go+ CI/Test]   |    13: 48: . . . . . . . . )\n[Go+ CI/Test]   |    13: 48: . . . . . . . )\n[Go+ CI/Test]   |    13: 48: . . . . . . )\n[Go+ CI/Test]   |    13: 48: . . . . . )\n[Go+ CI/Test]   |    13: 48: . . . . )\n[Go+ CI/Test]   |    13: 48: . . . . \";\"\n[Go+ CI/Test]   |    15:  1: . . . )\n[Go+ CI/Test]   |    15:  1: . . . Statement (\n[Go+ CI/Test]   |    15:  1: . . . . SimpleStmt (\n[Go+ CI/Test]   |    15:  1: . . . . . ExpressionList (\n[Go+ CI/Test]   |    15:  1: . . . . . . Expression (\n[Go+ CI/Test]   |    15:  1: . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    15:  1: . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    15:  1: . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    15:  1: . . . . . . . . . . Operand (\n[Go+ CI/Test]   |    15:  1: . . . . . . . . . . . IDENT sum\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: sum}\n[Go+ CI/Test]   |    15:  4: . . . . . . . . . . )\n[Go+ CI/Test]   |    15:  4: . . . . . . . . . )\n[Go+ CI/Test]   |    15:  4: . . . . . . . . )\n[Go+ CI/Test]   |    15:  4: . . . . . . . )\n[Go+ CI/Test]   |    15:  4: . . . . . . )\n[Go+ CI/Test]   |    15:  4: . . . . . . \",\"\n[Go+ CI/Test]   |    15:  6: . . . . . . Expression (\n[Go+ CI/Test]   |    15:  6: . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    15:  6: . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    15:  6: . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    15:  6: . . . . . . . . . . Operand (\n[Go+ CI/Test]   |    15:  6: . . . . . . . . . . . IDENT err\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: err}\n[Go+ CI/Test]   |    15: 10: . . . . . . . . . . )\n[Go+ CI/Test]   |    15: 10: . . . . . . . . . )\n[Go+ CI/Test]   |    15: 10: . . . . . . . . )\n[Go+ CI/Test]   |    15: 10: . . . . . . . )\n[Go+ CI/Test]   |    15: 10: . . . . . . )\n[Go+ CI/Test]   |    15: 10: . . . . . )\n[Go+ CI/Test]   |    15: 10: . . . . . \":=\"\n[Go+ CI/Test]   |    15: 13: . . . . . ExpressionList (\n[Go+ CI/Test]   |    15: 13: . . . . . . Expression (\n[Go+ CI/Test]   |    15: 13: . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    15: 13: . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    15: 13: . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    15: 13: . . . . . . . . . . Operand (\n[Go+ CI/Test]   |    15: 13: . . . . . . . . . . . IDENT add\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: add}\n[Go+ CI/Test]   |    15: 16: . . . . . . . . . . )\n[Go+ CI/Test]   |    15: 16: . . . . . . . . . . CallOrConversion (\n[Go+ CI/Test]   |    15: 16: . . . . . . . . . . . \"(\"\n[Go+ CI/Test]   |    15: 17: . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |    15: 17: . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    15: 17: . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    15: 17: . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    15: 17: . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: STRING, Value: \"10\"}\n[Go+ CI/Test]   |    15: 17: . . . . . . . . . . . . . . . . STRING \"10\"\n[Go+ CI/Test]   |    15: 21: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    15: 21: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    15: 21: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    15: 21: . . . . . . . . . . . . )\n[Go+ CI/Test]   |    15: 21: . . . . . . . . . . . )\n[Go+ CI/Test]   |    15: 21: . . . . . . . . . . . \",\"\n[Go+ CI/Test]   |    15: 23: . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |    15: 23: . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    15: 23: . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    15: 23: . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    15: 23: . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: STRING, Value: \"abc\"}\n[Go+ CI/Test]   |    15: 23: . . . . . . . . . . . . . . . . STRING \"abc\"\n[Go+ CI/Test]   |    15: 28: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    15: 28: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    15: 28: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    15: 28: . . . . . . . . . . . . )\n[Go+ CI/Test]   |    15: 28: . . . . . . . . . . . )\n[Go+ CI/Test]   |    15: 28: . . . . . . . . . . . \")\"\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1878: ast.CallExpr{Fun: add, Ellipsis: false, isCmd: false}\n[Go+ CI/Test]   |    15: 29: . . . . . . . . . . )\n[Go+ CI/Test]   |    15: 29: . . . . . . . . . )\n[Go+ CI/Test]   |    15: 29: . . . . . . . . )\n[Go+ CI/Test]   |    15: 29: . . . . . . . )\n[Go+ CI/Test]   |    15: 29: . . . . . . )\n[Go+ CI/Test]   |    15: 29: . . . . . )\n[Go+ CI/Test]   |    15: 29: . . . . )\n[Go+ CI/Test]   |    15: 29: . . . . \";\"\n[Go+ CI/Test]   |    16:  1: . . . )\n[Go+ CI/Test]   |    16:  1: . . . Statement (\n[Go+ CI/Test]   |    16:  1: . . . . SimpleStmt (\n[Go+ CI/Test]   |    16:  1: . . . . . ExpressionList (\n[Go+ CI/Test]   |    16:  1: . . . . . . Expression (\n[Go+ CI/Test]   |    16:  1: . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    16:  1: . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    16:  1: . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    16:  1: . . . . . . . . . . Operand (\n[Go+ CI/Test]   |    16:  1: . . . . . . . . . . . IDENT println\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: println}\n[Go+ CI/Test]   |    16:  8: . . . . . . . . . . )\n[Go+ CI/Test]   |    16:  8: . . . . . . . . . . CallOrConversion (\n[Go+ CI/Test]   |    16:  8: . . . . . . . . . . . \"(\"\n[Go+ CI/Test]   |    16:  9: . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |    16:  9: . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    16:  9: . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    16:  9: . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    16:  9: . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: STRING, Value: `add(\"10\", \"abc\"):`}\n[Go+ CI/Test]   |    16:  9: . . . . . . . . . . . . . . . . STRING `add(\"10\", \"abc\"):`\n[Go+ CI/Test]   |    16: 28: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    16: 28: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    16: 28: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    16: 28: . . . . . . . . . . . . )\n[Go+ CI/Test]   |    16: 28: . . . . . . . . . . . )\n[Go+ CI/Test]   |    16: 28: . . . . . . . . . . . \",\"\n[Go+ CI/Test]   |    16: 30: . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |    16: 30: . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    16: 30: . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    16: 30: . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    16: 30: . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |    16: 30: . . . . . . . . . . . . . . . . IDENT sum\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: sum}\n[Go+ CI/Test]   |    16: 33: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    16: 33: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    16: 33: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    16: 33: . . . . . . . . . . . . )\n[Go+ CI/Test]   |    16: 33: . . . . . . . . . . . )\n[Go+ CI/Test]   |    16: 33: . . . . . . . . . . . \",\"\n[Go+ CI/Test]   |    16: 35: . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |    16: 35: . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    16: 35: . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    16: 35: . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    16: 35: . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |    16: 35: . . . . . . . . . . . . . . . . IDENT err\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: err}\n[Go+ CI/Test]   |    16: 38: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    16: 38: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    16: 38: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    16: 38: . . . . . . . . . . . . )\n[Go+ CI/Test]   |    16: 38: . . . . . . . . . . . )\n[Go+ CI/Test]   |    16: 38: . . . . . . . . . . . \")\"\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1878: ast.CallExpr{Fun: println, Ellipsis: false, isCmd: false}\n[Go+ CI/Test]   |    16: 39: . . . . . . . . . . )\n[Go+ CI/Test]   |    16: 39: . . . . . . . . . )\n[Go+ CI/Test]   |    16: 39: . . . . . . . . )\n[Go+ CI/Test]   |    16: 39: . . . . . . . )\n[Go+ CI/Test]   |    16: 39: . . . . . . )\n[Go+ CI/Test]   |    16: 39: . . . . . )\n[Go+ CI/Test]   |    16: 39: . . . . )\n[Go+ CI/Test]   |    16: 39: . . . . \";\"\n[Go+ CI/Test]   |    18:  1: . . . )\n[Go+ CI/Test]   |    18:  1: . . . Statement (\n[Go+ CI/Test]   |    18:  1: . . . . SimpleStmt (\n[Go+ CI/Test]   |    18:  1: . . . . . ExpressionList (\n[Go+ CI/Test]   |    18:  1: . . . . . . Expression (\n[Go+ CI/Test]   |    18:  1: . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    18:  1: . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    18:  1: . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    18:  1: . . . . . . . . . . Operand (\n[Go+ CI/Test]   |    18:  1: . . . . . . . . . . . IDENT println\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: println}\n[Go+ CI/Test]   |    18:  8: . . . . . . . . . . )\n[Go+ CI/Test]   |    18:  8: . . . . . . . . . . CallOrConversion (\n[Go+ CI/Test]   |    18:  8: . . . . . . . . . . . \"(\"\n[Go+ CI/Test]   |    18:  9: . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |    18:  9: . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    18:  9: . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    18:  9: . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    18:  9: . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: STRING, Value: `addSafe(\"10\", \"abc\"):`}\n[Go+ CI/Test]   |    18:  9: . . . . . . . . . . . . . . . . STRING `addSafe(\"10\", \"abc\"):`\n[Go+ CI/Test]   |    18: 32: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    18: 32: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    18: 32: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    18: 32: . . . . . . . . . . . . )\n[Go+ CI/Test]   |    18: 32: . . . . . . . . . . . )\n[Go+ CI/Test]   |    18: 32: . . . . . . . . . . . \",\"\n[Go+ CI/Test]   |    18: 34: . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |    18: 34: . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    18: 34: . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    18: 34: . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    18: 34: . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |    18: 34: . . . . . . . . . . . . . . . . IDENT addSafe\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: addSafe}\n[Go+ CI/Test]   |    18: 41: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    18: 41: . . . . . . . . . . . . . . . CallOrConversion (\n[Go+ CI/Test]   |    18: 41: . . . . . . . . . . . . . . . . \"(\"\n[Go+ CI/Test]   |    18: 42: . . . . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |    18: 42: . . . . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    18: 42: . . . . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    18: 42: . . . . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    18: 42: . . . . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: STRING, Value: \"10\"}\n[Go+ CI/Test]   |    18: 42: . . . . . . . . . . . . . . . . . . . . . STRING \"10\"\n[Go+ CI/Test]   |    18: 46: . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    18: 46: . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    18: 46: . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    18: 46: . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    18: 46: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    18: 46: . . . . . . . . . . . . . . . . \",\"\n[Go+ CI/Test]   |    18: 48: . . . . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |    18: 48: . . . . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    18: 48: . . . . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    18: 48: . . . . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    18: 48: . . . . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: STRING, Value: \"abc\"}\n[Go+ CI/Test]   |    18: 48: . . . . . . . . . . . . . . . . . . . . . STRING \"abc\"\n[Go+ CI/Test]   |    18: 53: . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    18: 53: . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    18: 53: . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    18: 53: . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    18: 53: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    18: 53: . . . . . . . . . . . . . . . . \")\"\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1878: ast.CallExpr{Fun: addSafe, Ellipsis: false, isCmd: false}\n[Go+ CI/Test]   |    18: 54: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    18: 54: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    18: 54: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    18: 54: . . . . . . . . . . . . )\n[Go+ CI/Test]   |    18: 54: . . . . . . . . . . . )\n[Go+ CI/Test]   |    18: 54: . . . . . . . . . . . \")\"\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1878: ast.CallExpr{Fun: println, Ellipsis: false, isCmd: false}\n[Go+ CI/Test]   |    18: 55: . . . . . . . . . . )\n[Go+ CI/Test]   |    18: 55: . . . . . . . . . )\n[Go+ CI/Test]   |    18: 55: . . . . . . . . )\n[Go+ CI/Test]   |    18: 55: . . . . . . . )\n[Go+ CI/Test]   |    18: 55: . . . . . . )\n[Go+ CI/Test]   |    18: 55: . . . . . )\n[Go+ CI/Test]   |    18: 55: . . . . )\n[Go+ CI/Test]   |    18: 55: . . . . \";\"\n[Go+ CI/Test]   |    18: 56: . . . )\n[Go+ CI/Test]   |    18: 56: . . )\n[Go+ CI/Test]   |    18: 56: . )\n[Go+ CI/Test]   |    18: 56: )\n[Go+ CI/Test]   | === RUN   TestFromTestdata/errwrap2\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parserdir_test.go:90: Parsing /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/_testdata/errwrap2\n[Go+ CI/Test]   |     1:  1: File (\n[Go+ CI/Test]   |     1:  1: . Declaration (\n[Go+ CI/Test]   |     1:  1: . . FunctionDecl (\n[Go+ CI/Test]   |     1:  1: . . . \"func\"\n[Go+ CI/Test]   |     1:  6: . . . IDENT neg\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: neg}\n[Go+ CI/Test]   |     1:  9: . . . Signature (\n[Go+ CI/Test]   |     1:  9: . . . . Parameters (\n[Go+ CI/Test]   |     1:  9: . . . . . \"(\"\n[Go+ CI/Test]   |     1: 10: . . . . . ParameterList (\n[Go+ CI/Test]   |     1: 10: . . . . . . ParamDeclOrNil (\n[Go+ CI/Test]   |     1: 10: . . . . . . . IDENT x\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: x}\n[Go+ CI/Test]   |     1: 12: . . . . . . . Type (\n[Go+ CI/Test]   |     1: 12: . . . . . . . . TypeName (\n[Go+ CI/Test]   |     1: 12: . . . . . . . . . IDENT string\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: string}\n[Go+ CI/Test]   |     1: 18: . . . . . . . . )\n[Go+ CI/Test]   |     1: 18: . . . . . . . )\n[Go+ CI/Test]   |     1: 18: . . . . . . )\n[Go+ CI/Test]   |     1: 18: . . . . . )\n[Go+ CI/Test]   |     1: 18: . . . . . \")\"\n[Go+ CI/Test]   |     1: 20: . . . . )\n[Go+ CI/Test]   |     1: 20: . . . . Result (\n[Go+ CI/Test]   |     1: 20: . . . . . Parameters (\n[Go+ CI/Test]   |     1: 20: . . . . . . \"(\"\n[Go+ CI/Test]   |     1: 21: . . . . . . ParameterList (\n[Go+ CI/Test]   |     1: 21: . . . . . . . ParamDeclOrNil (\n[Go+ CI/Test]   |     1: 21: . . . . . . . . IDENT int\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: int}\n[Go+ CI/Test]   |     1: 24: . . . . . . . )\n[Go+ CI/Test]   |     1: 24: . . . . . . . \",\"\n[Go+ CI/Test]   |     1: 26: . . . . . . . ParamDeclOrNil (\n[Go+ CI/Test]   |     1: 26: . . . . . . . . IDENT error\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: error}\n[Go+ CI/Test]   |     1: 31: . . . . . . . )\n[Go+ CI/Test]   |     1: 31: . . . . . . )\n[Go+ CI/Test]   |     1: 31: . . . . . . \")\"\n[Go+ CI/Test]   |     1: 33: . . . . . )\n[Go+ CI/Test]   |     1: 33: . . . . )\n[Go+ CI/Test]   |     1: 33: . . . )\n[Go+ CI/Test]   |     1: 33: . . . Body (\n[Go+ CI/Test]   |     1: 33: . . . . \"{\"\n[Go+ CI/Test]   |     2:  2: . . . . StatementList (\n[Go+ CI/Test]   |     2:  2: . . . . . Statement (\n[Go+ CI/Test]   |     2:  2: . . . . . . ReturnStmt (\n[Go+ CI/Test]   |     2:  2: . . . . . . . \"return\"\n[Go+ CI/Test]   |     2:  9: . . . . . . . ExpressionList (\n[Go+ CI/Test]   |     2:  9: . . . . . . . . Expression (\n[Go+ CI/Test]   |     2:  9: . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     2:  9: . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     2:  9: . . . . . . . . . . . \"-\"\n[Go+ CI/Test]   |     2: 10: . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     2: 10: . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     2: 10: . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |     2: 10: . . . . . . . . . . . . . . IDENT atoi\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: atoi}\n[Go+ CI/Test]   |     2: 14: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 14: . . . . . . . . . . . . . CallOrConversion (\n[Go+ CI/Test]   |     2: 14: . . . . . . . . . . . . . . \"(\"\n[Go+ CI/Test]   |     2: 15: . . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |     2: 15: . . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     2: 15: . . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     2: 15: . . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     2: 15: . . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |     2: 15: . . . . . . . . . . . . . . . . . . . IDENT x\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: x}\n[Go+ CI/Test]   |     2: 16: . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 16: . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 16: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 16: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 16: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 16: . . . . . . . . . . . . . . \")\"\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1878: ast.CallExpr{Fun: atoi, Ellipsis: false, isCmd: false}\n[Go+ CI/Test]   |     2: 17: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 17: . . . . . . . . . . . . . \"?\"\n[Go+ CI/Test]   |     2: 18: . . . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 18: . . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 18: . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 18: . . . . . . . . . )\n[Go+ CI/Test]   |     2: 18: . . . . . . . . )\n[Go+ CI/Test]   |     2: 18: . . . . . . . . \",\"\n[Go+ CI/Test]   |     2: 20: . . . . . . . . Expression (\n[Go+ CI/Test]   |     2: 20: . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     2: 20: . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     2: 20: . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     2: 20: . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |     2: 20: . . . . . . . . . . . . . IDENT nil\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: nil}\n[Go+ CI/Test]   |     2: 23: . . . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 23: . . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 23: . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 23: . . . . . . . . . )\n[Go+ CI/Test]   |     2: 23: . . . . . . . . )\n[Go+ CI/Test]   |     2: 23: . . . . . . . )\n[Go+ CI/Test]   |     2: 23: . . . . . . . \";\"\n[Go+ CI/Test]   |     3:  1: . . . . . . )\n[Go+ CI/Test]   |     3:  1: . . . . . )\n[Go+ CI/Test]   |     3:  1: . . . . )\n[Go+ CI/Test]   |     3:  1: . . . . \"}\"\n[Go+ CI/Test]   |     3:  2: . . . )\n[Go+ CI/Test]   |     3:  2: . . . \";\"\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:3564: ast.FuncDecl{Name: neg, ...}\n[Go+ CI/Test]   |     3:  3: . . )\n[Go+ CI/Test]   |     3:  3: . )\n[Go+ CI/Test]   |     3:  3: )\n[Go+ CI/Test]   | === RUN   TestFromTestdata/errwrap3\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parserdir_test.go:90: Parsing /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/_testdata/errwrap3\n[Go+ CI/Test]   |     1:  1: File (\n[Go+ CI/Test]   |     1:  1: . Declaration (\n[Go+ CI/Test]   |     1:  1: . . StatementList (\n[Go+ CI/Test]   |     1:  1: . . . Statement (\n[Go+ CI/Test]   |     1:  1: . . . . SimpleStmt (\n[Go+ CI/Test]   |     1:  1: . . . . . ExpressionList (\n[Go+ CI/Test]   |     1:  1: . . . . . . Expression (\n[Go+ CI/Test]   |     1:  1: . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     1:  1: . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     1:  1: . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     1:  1: . . . . . . . . . . Operand (\n[Go+ CI/Test]   |     1:  1: . . . . . . . . . . . IDENT mkdir\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: mkdir}\n[Go+ CI/Test]   |     1:  6: . . . . . . . . . . )\n[Go+ CI/Test]   |     1:  6: . . . . . . . . . . \"!\"\n[Go+ CI/Test]   |     1:  8: . . . . . . . . . . CallOrConversion (\n[Go+ CI/Test]   |     1:  8: . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |     1:  8: . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     1:  8: . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     1:  8: . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     1:  8: . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: STRING, Value: \"foo\"}\n[Go+ CI/Test]   |     1:  8: . . . . . . . . . . . . . . . . STRING \"foo\"\n[Go+ CI/Test]   |     1: 13: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     1: 13: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     1: 13: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     1: 13: . . . . . . . . . . . . )\n[Go+ CI/Test]   |     1: 13: . . . . . . . . . . . )\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1878: ast.CallExpr{Fun: &{mkdir ! 6 <nil>}, Ellipsis: false, isCmd: true}\n[Go+ CI/Test]   |     1: 13: . . . . . . . . . . )\n[Go+ CI/Test]   |     1: 13: . . . . . . . . . )\n[Go+ CI/Test]   |     1: 13: . . . . . . . . )\n[Go+ CI/Test]   |     1: 13: . . . . . . . )\n[Go+ CI/Test]   |     1: 13: . . . . . . )\n[Go+ CI/Test]   |     1: 13: . . . . . )\n[Go+ CI/Test]   |     1: 13: . . . . )\n[Go+ CI/Test]   |     1: 13: . . . . \";\"\n[Go+ CI/Test]   |     2:  1: . . . )\n[Go+ CI/Test]   |     2:  1: . . . Statement (\n[Go+ CI/Test]   |     2:  1: . . . . SimpleStmt (\n[Go+ CI/Test]   |     2:  1: . . . . . ExpressionList (\n[Go+ CI/Test]   |     2:  1: . . . . . . Expression (\n[Go+ CI/Test]   |     2:  1: . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     2:  1: . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     2:  1: . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     2:  1: . . . . . . . . . . Operand (\n[Go+ CI/Test]   |     2:  1: . . . . . . . . . . . IDENT println\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: println}\n[Go+ CI/Test]   |     2:  9: . . . . . . . . . . )\n[Go+ CI/Test]   |     2:  9: . . . . . . . . . . CallOrConversion (\n[Go+ CI/Test]   |     2:  9: . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |     2:  9: . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     2:  9: . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     2:  9: . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     2:  9: . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |     2:  9: . . . . . . . . . . . . . . . . IDENT foo\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: foo}\n[Go+ CI/Test]   |     2: 12: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 12: . . . . . . . . . . . . . . . CallOrConversion (\n[Go+ CI/Test]   |     2: 12: . . . . . . . . . . . . . . . . \"(\"\n[Go+ CI/Test]   |     2: 13: . . . . . . . . . . . . . . . . \")\"\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1878: ast.CallExpr{Fun: foo, Ellipsis: false, isCmd: false}\n[Go+ CI/Test]   |     2: 14: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 14: . . . . . . . . . . . . . . . \"!\"\n[Go+ CI/Test]   |     2: 15: . . . . . . . . . . . . . . . \".\"\n[Go+ CI/Test]   |     2: 16: . . . . . . . . . . . . . . . Selector (\n[Go+ CI/Test]   |     2: 16: . . . . . . . . . . . . . . . . IDENT fields\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: fields}\n[Go+ CI/Test]   |     2: 22: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 22: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 22: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 22: . . . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 22: . . . . . . . . . . . )\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1878: ast.CallExpr{Fun: println, Ellipsis: false, isCmd: true}\n[Go+ CI/Test]   |     2: 22: . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 22: . . . . . . . . . )\n[Go+ CI/Test]   |     2: 22: . . . . . . . . )\n[Go+ CI/Test]   |     2: 22: . . . . . . . )\n[Go+ CI/Test]   |     2: 22: . . . . . . )\n[Go+ CI/Test]   |     2: 22: . . . . . )\n[Go+ CI/Test]   |     2: 22: . . . . )\n[Go+ CI/Test]   |     2: 22: . . . . \";\"\n[Go+ CI/Test]   |     2: 23: . . . )\n[Go+ CI/Test]   |     2: 23: . . )\n[Go+ CI/Test]   |     2: 23: . )\n[Go+ CI/Test]   |     2: 23: )\n[Go+ CI/Test]   | === RUN   TestFromTestdata/exists\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parserdir_test.go:90: Parsing /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/_testdata/exists\n[Go+ CI/Test]   |     1:  1: File (\n[Go+ CI/Test]   |     1:  1: . Declaration (\n[Go+ CI/Test]   |     1:  1: . . StatementList (\n[Go+ CI/Test]   |     1:  1: . . . Statement (\n[Go+ CI/Test]   |     1:  1: . . . . SimpleStmt (\n[Go+ CI/Test]   |     1:  1: . . . . . ExpressionList (\n[Go+ CI/Test]   |     1:  1: . . . . . . Expression (\n[Go+ CI/Test]   |     1:  1: . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     1:  1: . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     1:  1: . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     1:  1: . . . . . . . . . . Operand (\n[Go+ CI/Test]   |     1:  1: . . . . . . . . . . . IDENT a\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: a}\n[Go+ CI/Test]   |     1:  3: . . . . . . . . . . )\n[Go+ CI/Test]   |     1:  3: . . . . . . . . . )\n[Go+ CI/Test]   |     1:  3: . . . . . . . . )\n[Go+ CI/Test]   |     1:  3: . . . . . . . )\n[Go+ CI/Test]   |     1:  3: . . . . . . )\n[Go+ CI/Test]   |     1:  3: . . . . . )\n[Go+ CI/Test]   |     1:  3: . . . . . \":=\"\n[Go+ CI/Test]   |     1:  6: . . . . . ExpressionList (\n[Go+ CI/Test]   |     1:  6: . . . . . . Expression (\n[Go+ CI/Test]   |     1:  6: . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     1:  6: . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     1:  6: . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     1:  6: . . . . . . . . . . Operand (\n[Go+ CI/Test]   |     1:  6: . . . . . . . . . . . ArrayType (\n[Go+ CI/Test]   |     1:  6: . . . . . . . . . . . . \"[\"\n[Go+ CI/Test]   |     1:  7: . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |     1:  7: . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     1:  7: . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     1:  7: . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     1:  7: . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: INT, Value: 1}\n[Go+ CI/Test]   |     1:  7: . . . . . . . . . . . . . . . . . INT 1\n[Go+ CI/Test]   |     1:  8: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     1:  8: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     1:  8: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     1:  8: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     1:  8: . . . . . . . . . . . . )\n[Go+ CI/Test]   |     1:  8: . . . . . . . . . . . . \",\"\n[Go+ CI/Test]   |     1: 10: . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |     1: 10: . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     1: 10: . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     1: 10: . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     1: 10: . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: INT, Value: 3}\n[Go+ CI/Test]   |     1: 10: . . . . . . . . . . . . . . . . . INT 3\n[Go+ CI/Test]   |     1: 11: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     1: 11: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     1: 11: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     1: 11: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     1: 11: . . . . . . . . . . . . )\n[Go+ CI/Test]   |     1: 11: . . . . . . . . . . . . \",\"\n[Go+ CI/Test]   |     1: 13: . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |     1: 13: . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     1: 13: . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     1: 13: . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     1: 13: . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: INT, Value: 5}\n[Go+ CI/Test]   |     1: 13: . . . . . . . . . . . . . . . . . INT 5\n[Go+ CI/Test]   |     1: 14: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     1: 14: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     1: 14: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     1: 14: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     1: 14: . . . . . . . . . . . . )\n[Go+ CI/Test]   |     1: 14: . . . . . . . . . . . . \",\"\n[Go+ CI/Test]   |     1: 16: . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |     1: 16: . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     1: 16: . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     1: 16: . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     1: 16: . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: INT, Value: 7}\n[Go+ CI/Test]   |     1: 16: . . . . . . . . . . . . . . . . . INT 7\n[Go+ CI/Test]   |     1: 17: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     1: 17: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     1: 17: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     1: 17: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     1: 17: . . . . . . . . . . . . )\n[Go+ CI/Test]   |     1: 17: . . . . . . . . . . . . \",\"\n[Go+ CI/Test]   |     1: 19: . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |     1: 19: . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     1: 19: . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     1: 19: . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     1: 19: . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: INT, Value: 8}\n[Go+ CI/Test]   |     1: 19: . . . . . . . . . . . . . . . . . INT 8\n[Go+ CI/Test]   |     1: 20: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     1: 20: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     1: 20: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     1: 20: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     1: 20: . . . . . . . . . . . . )\n[Go+ CI/Test]   |     1: 20: . . . . . . . . . . . . \",\"\n[Go+ CI/Test]   |     1: 22: . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |     1: 22: . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     1: 22: . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     1: 22: . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     1: 22: . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: INT, Value: 19}\n[Go+ CI/Test]   |     1: 22: . . . . . . . . . . . . . . . . . INT 19\n[Go+ CI/Test]   |     1: 24: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     1: 24: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     1: 24: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     1: 24: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     1: 24: . . . . . . . . . . . . )\n[Go+ CI/Test]   |     1: 24: . . . . . . . . . . . . \"]\"\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:888: ast.SliceLit{Elts: [0xc000450020 0xc000450040 0xc000450060 0xc000450080 0xc0004500a0 0xc0004500c0]}\n[Go+ CI/Test]   |     1: 25: . . . . . . . . . . . )\n[Go+ CI/Test]   |     1: 25: . . . . . . . . . . )\n[Go+ CI/Test]   |     1: 25: . . . . . . . . . )\n[Go+ CI/Test]   |     1: 25: . . . . . . . . )\n[Go+ CI/Test]   |     1: 25: . . . . . . . )\n[Go+ CI/Test]   |     1: 25: . . . . . . )\n[Go+ CI/Test]   |     1: 25: . . . . . )\n[Go+ CI/Test]   |     1: 25: . . . . )\n[Go+ CI/Test]   |     1: 25: . . . . \";\"\n[Go+ CI/Test]   |     2:  1: . . . )\n[Go+ CI/Test]   |     2:  1: . . . Statement (\n[Go+ CI/Test]   |     2:  1: . . . . SimpleStmt (\n[Go+ CI/Test]   |     2:  1: . . . . . ExpressionList (\n[Go+ CI/Test]   |     2:  1: . . . . . . Expression (\n[Go+ CI/Test]   |     2:  1: . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     2:  1: . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     2:  1: . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     2:  1: . . . . . . . . . . Operand (\n[Go+ CI/Test]   |     2:  1: . . . . . . . . . . . IDENT hasEven\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: hasEven}\n[Go+ CI/Test]   |     2:  9: . . . . . . . . . . )\n[Go+ CI/Test]   |     2:  9: . . . . . . . . . )\n[Go+ CI/Test]   |     2:  9: . . . . . . . . )\n[Go+ CI/Test]   |     2:  9: . . . . . . . )\n[Go+ CI/Test]   |     2:  9: . . . . . . )\n[Go+ CI/Test]   |     2:  9: . . . . . )\n[Go+ CI/Test]   |     2:  9: . . . . . \":=\"\n[Go+ CI/Test]   |     2: 12: . . . . . ExpressionList (\n[Go+ CI/Test]   |     2: 12: . . . . . . Expression (\n[Go+ CI/Test]   |     2: 12: . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     2: 12: . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     2: 12: . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     2: 12: . . . . . . . . . . Operand (\n[Go+ CI/Test]   |     2: 12: . . . . . . . . . . . LiteralValue (\n[Go+ CI/Test]   |     2: 12: . . . . . . . . . . . . \"{\"\n[Go+ CI/Test]   |     2: 13: . . . . . . . . . . . . ElementList (\n[Go+ CI/Test]   |     2: 13: . . . . . . . . . . . . . ForPhrase (\n[Go+ CI/Test]   |     2: 13: . . . . . . . . . . . . . . \"for\"\n[Go+ CI/Test]   |     2: 17: . . . . . . . . . . . . . . IDENT x\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: x}\n[Go+ CI/Test]   |     2: 19: . . . . . . . . . . . . . . \"<-\"\n[Go+ CI/Test]   |     2: 22: . . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |     2: 22: . . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     2: 22: . . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     2: 22: . . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     2: 22: . . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |     2: 22: . . . . . . . . . . . . . . . . . . . IDENT a\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: a}\n[Go+ CI/Test]   |     2: 24: . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 24: . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 24: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 24: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 24: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 24: . . . . . . . . . . . . . . \"if\"\n[Go+ CI/Test]   |     2: 27: . . . . . . . . . . . . . . SimpleStmt (\n[Go+ CI/Test]   |     2: 27: . . . . . . . . . . . . . . . ExpressionList (\n[Go+ CI/Test]   |     2: 27: . . . . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |     2: 27: . . . . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     2: 27: . . . . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     2: 27: . . . . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     2: 27: . . . . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |     2: 27: . . . . . . . . . . . . . . . . . . . . . IDENT x\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: x}\n[Go+ CI/Test]   |     2: 28: . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 28: . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 28: . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 28: . . . . . . . . . . . . . . . . . . \"%\"\n[Go+ CI/Test]   |     2: 29: . . . . . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     2: 29: . . . . . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     2: 29: . . . . . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     2: 29: . . . . . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: INT, Value: 2}\n[Go+ CI/Test]   |     2: 29: . . . . . . . . . . . . . . . . . . . . . . INT 2\n[Go+ CI/Test]   |     2: 31: . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 31: . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 31: . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 31: . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 31: . . . . . . . . . . . . . . . . . . \"==\"\n[Go+ CI/Test]   |     2: 34: . . . . . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     2: 34: . . . . . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     2: 34: . . . . . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     2: 34: . . . . . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: INT, Value: 0}\n[Go+ CI/Test]   |     2: 34: . . . . . . . . . . . . . . . . . . . . . . INT 0\n[Go+ CI/Test]   |     2: 35: . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 35: . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 35: . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 35: . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 35: . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 35: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 35: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 35: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 35: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 35: . . . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 35: . . . . . . . . . . . . \"}\"\n[Go+ CI/Test]   |     2: 36: . . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 36: . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 36: . . . . . . . . . )\n[Go+ CI/Test]   |     2: 36: . . . . . . . . )\n[Go+ CI/Test]   |     2: 36: . . . . . . . )\n[Go+ CI/Test]   |     2: 36: . . . . . . )\n[Go+ CI/Test]   |     2: 36: . . . . . )\n[Go+ CI/Test]   |     2: 36: . . . . )\n[Go+ CI/Test]   |     2: 36: . . . . \";\"\n[Go+ CI/Test]   |     2: 37: . . . )\n[Go+ CI/Test]   |     2: 37: . . )\n[Go+ CI/Test]   |     2: 37: . )\n[Go+ CI/Test]   |     2: 37: )\n[Go+ CI/Test]   | === RUN   TestFromTestdata/fnbody\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parserdir_test.go:90: Parsing /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/_testdata/fnbody\n[Go+ CI/Test]   |     1:  1: File (\n[Go+ CI/Test]   |     1:  1: . Declaration (\n[Go+ CI/Test]   |     1:  1: . . StatementList (\n[Go+ CI/Test]   |     1:  1: . . . Statement (\n[Go+ CI/Test]   |     1:  1: . . . . SimpleStmt (\n[Go+ CI/Test]   |     1:  1: . . . . . ExpressionList (\n[Go+ CI/Test]   |     1:  1: . . . . . . Expression (\n[Go+ CI/Test]   |     1:  1: . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     1:  1: . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     1:  1: . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     1:  1: . . . . . . . . . . Operand (\n[Go+ CI/Test]   |     1:  1: . . . . . . . . . . . IDENT a\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: a}\n[Go+ CI/Test]   |     1:  3: . . . . . . . . . . )\n[Go+ CI/Test]   |     1:  3: . . . . . . . . . )\n[Go+ CI/Test]   |     1:  3: . . . . . . . . )\n[Go+ CI/Test]   |     1:  3: . . . . . . . )\n[Go+ CI/Test]   |     1:  3: . . . . . . )\n[Go+ CI/Test]   |     1:  3: . . . . . )\n[Go+ CI/Test]   |     1:  3: . . . . . \":=\"\n[Go+ CI/Test]   |     1:  6: . . . . . ExpressionList (\n[Go+ CI/Test]   |     1:  6: . . . . . . Expression (\n[Go+ CI/Test]   |     1:  6: . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     1:  6: . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     1:  6: . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     1:  6: . . . . . . . . . . Operand (\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: INT, Value: 1}\n[Go+ CI/Test]   |     1:  6: . . . . . . . . . . . INT 1\n[Go+ CI/Test]   |     1:  7: . . . . . . . . . . )\n[Go+ CI/Test]   |     1:  7: . . . . . . . . . )\n[Go+ CI/Test]   |     1:  7: . . . . . . . . )\n[Go+ CI/Test]   |     1:  7: . . . . . . . )\n[Go+ CI/Test]   |     1:  7: . . . . . . )\n[Go+ CI/Test]   |     1:  7: . . . . . )\n[Go+ CI/Test]   |     1:  7: . . . . )\n[Go+ CI/Test]   |     1:  7: . . . . \";\"\n[Go+ CI/Test]   |     2:  1: . . . )\n[Go+ CI/Test]   |     2:  1: . . . Statement (\n[Go+ CI/Test]   |     2:  1: . . . . BlockStmt (\n[Go+ CI/Test]   |     2:  1: . . . . . \"{\"\n[Go+ CI/Test]   |     3:  2: . . . . . StatementList (\n[Go+ CI/Test]   |     3:  2: . . . . . . Statement (\n[Go+ CI/Test]   |     3:  2: . . . . . . . GenDecl(type) (\n[Go+ CI/Test]   |     3:  2: . . . . . . . . \"type\"\n[Go+ CI/Test]   |     3:  7: . . . . . . . . TypeSpec (\n[Go+ CI/Test]   |     3:  7: . . . . . . . . . IDENT T\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: T}\n[Go+ CI/Test]   |     3:  9: . . . . . . . . . \"=\"\n[Go+ CI/Test]   |     3: 11: . . . . . . . . . Type (\n[Go+ CI/Test]   |     3: 11: . . . . . . . . . . TypeName (\n[Go+ CI/Test]   |     3: 11: . . . . . . . . . . . IDENT int\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: int}\n[Go+ CI/Test]   |     3: 14: . . . . . . . . . . )\n[Go+ CI/Test]   |     3: 14: . . . . . . . . . )\n[Go+ CI/Test]   |     3: 14: . . . . . . . . . \";\"\n[Go+ CI/Test]   |     4:  2: . . . . . . . . )\n[Go+ CI/Test]   |     4:  2: . . . . . . . )\n[Go+ CI/Test]   |     4:  2: . . . . . . )\n[Go+ CI/Test]   |     4:  2: . . . . . . Statement (\n[Go+ CI/Test]   |     4:  2: . . . . . . . GenDecl(var) (\n[Go+ CI/Test]   |     4:  2: . . . . . . . . \"var\"\n[Go+ CI/Test]   |     4:  6: . . . . . . . . varSpec (\n[Go+ CI/Test]   |     4:  6: . . . . . . . . . IdentList (\n[Go+ CI/Test]   |     4:  6: . . . . . . . . . . IDENT b\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: b}\n[Go+ CI/Test]   |     4:  8: . . . . . . . . . )\n[Go+ CI/Test]   |     4:  8: . . . . . . . . . \"=\"\n[Go+ CI/Test]   |     4: 10: . . . . . . . . . ExpressionList (\n[Go+ CI/Test]   |     4: 10: . . . . . . . . . . Expression (\n[Go+ CI/Test]   |     4: 10: . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     4: 10: . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     4: 10: . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     4: 10: . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: INT, Value: 2}\n[Go+ CI/Test]   |     4: 10: . . . . . . . . . . . . . . . INT 2\n[Go+ CI/Test]   |     4: 11: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     4: 11: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     4: 11: . . . . . . . . . . . . )\n[Go+ CI/Test]   |     4: 11: . . . . . . . . . . . )\n[Go+ CI/Test]   |     4: 11: . . . . . . . . . . )\n[Go+ CI/Test]   |     4: 11: . . . . . . . . . )\n[Go+ CI/Test]   |     4: 11: . . . . . . . . . \";\"\n[Go+ CI/Test]   |     5:  2: . . . . . . . . )\n[Go+ CI/Test]   |     5:  2: . . . . . . . )\n[Go+ CI/Test]   |     5:  2: . . . . . . )\n[Go+ CI/Test]   |     5:  2: . . . . . . Statement (\n[Go+ CI/Test]   |     5:  2: . . . . . . . GenDecl(var) (\n[Go+ CI/Test]   |     5:  2: . . . . . . . . \"var\"\n[Go+ CI/Test]   |     5:  6: . . . . . . . . varSpec (\n[Go+ CI/Test]   |     5:  6: . . . . . . . . . IdentList (\n[Go+ CI/Test]   |     5:  6: . . . . . . . . . . IDENT c\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: c}\n[Go+ CI/Test]   |     5:  8: . . . . . . . . . )\n[Go+ CI/Test]   |     5:  8: . . . . . . . . . TypeName (\n[Go+ CI/Test]   |     5:  8: . . . . . . . . . . IDENT T\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: T}\n[Go+ CI/Test]   |     5: 10: . . . . . . . . . )\n[Go+ CI/Test]   |     5: 10: . . . . . . . . . \"=\"\n[Go+ CI/Test]   |     5: 12: . . . . . . . . . ExpressionList (\n[Go+ CI/Test]   |     5: 12: . . . . . . . . . . Expression (\n[Go+ CI/Test]   |     5: 12: . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     5: 12: . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     5: 12: . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     5: 12: . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: INT, Value: 3}\n[Go+ CI/Test]   |     5: 12: . . . . . . . . . . . . . . . INT 3\n[Go+ CI/Test]   |     5: 13: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     5: 13: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     5: 13: . . . . . . . . . . . . )\n[Go+ CI/Test]   |     5: 13: . . . . . . . . . . . )\n[Go+ CI/Test]   |     5: 13: . . . . . . . . . . )\n[Go+ CI/Test]   |     5: 13: . . . . . . . . . )\n[Go+ CI/Test]   |     5: 13: . . . . . . . . . \";\"\n[Go+ CI/Test]   |     6:  1: . . . . . . . . )\n[Go+ CI/Test]   |     6:  1: . . . . . . . )\n[Go+ CI/Test]   |     6:  1: . . . . . . )\n[Go+ CI/Test]   |     6:  1: . . . . . )\n[Go+ CI/Test]   |     6:  1: . . . . . \"}\"\n[Go+ CI/Test]   |     6:  2: . . . . )\n[Go+ CI/Test]   |     6:  2: . . . . \";\"\n[Go+ CI/Test]   |     6:  3: . . . )\n[Go+ CI/Test]   |     6:  3: . . )\n[Go+ CI/Test]   |     6:  3: . )\n[Go+ CI/Test]   |     6:  3: )\n[Go+ CI/Test]   | === RUN   TestFromTestdata/fncall\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parserdir_test.go:90: Parsing /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/_testdata/fncall\n[Go+ CI/Test]   |     1:  1: File (\n[Go+ CI/Test]   |     1:  1: . Declaration (\n[Go+ CI/Test]   |     1:  1: . . StatementList (\n[Go+ CI/Test]   |     1:  1: . . . Statement (\n[Go+ CI/Test]   |     1:  1: . . . . SimpleStmt (\n[Go+ CI/Test]   |     1:  1: . . . . . ExpressionList (\n[Go+ CI/Test]   |     1:  1: . . . . . . Expression (\n[Go+ CI/Test]   |     1:  1: . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     1:  1: . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     1:  1: . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     1:  1: . . . . . . . . . . Operand (\n[Go+ CI/Test]   |     1:  1: . . . . . . . . . . . IDENT fn\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: fn}\n[Go+ CI/Test]   |     1:  3: . . . . . . . . . . )\n[Go+ CI/Test]   |     1:  3: . . . . . . . . . . CallOrConversion (\n[Go+ CI/Test]   |     1:  3: . . . . . . . . . . . \"(\"\n[Go+ CI/Test]   |     1:  4: . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |     1:  4: . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     1:  4: . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     1:  4: . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     1:  4: . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: INT, Value: 1}\n[Go+ CI/Test]   |     1:  4: . . . . . . . . . . . . . . . . INT 1\n[Go+ CI/Test]   |     1:  5: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     1:  5: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     1:  5: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     1:  5: . . . . . . . . . . . . )\n[Go+ CI/Test]   |     1:  5: . . . . . . . . . . . )\n[Go+ CI/Test]   |     1:  5: . . . . . . . . . . . \")\"\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1878: ast.CallExpr{Fun: fn, Ellipsis: false, isCmd: false}\n[Go+ CI/Test]   |     1:  6: . . . . . . . . . . )\n[Go+ CI/Test]   |     1:  6: . . . . . . . . . . CallOrConversion (\n[Go+ CI/Test]   |     1:  6: . . . . . . . . . . . \"(\"\n[Go+ CI/Test]   |     1:  7: . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |     1:  7: . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     1:  7: . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     1:  7: . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     1:  7: . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |     1:  7: . . . . . . . . . . . . . . . . IDENT x\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: x}\n[Go+ CI/Test]   |     1:  8: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     1:  8: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     1:  8: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     1:  8: . . . . . . . . . . . . )\n[Go+ CI/Test]   |     1:  8: . . . . . . . . . . . )\n[Go+ CI/Test]   |     1:  8: . . . . . . . . . . . \")\"\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1878: ast.CallExpr{Fun: &{fn 3 [0xc000450500] 0 5 0}, Ellipsis: false, isCmd: false}\n[Go+ CI/Test]   |     1:  9: . . . . . . . . . . )\n[Go+ CI/Test]   |     1:  9: . . . . . . . . . )\n[Go+ CI/Test]   |     1:  9: . . . . . . . . )\n[Go+ CI/Test]   |     1:  9: . . . . . . . )\n[Go+ CI/Test]   |     1:  9: . . . . . . )\n[Go+ CI/Test]   |     1:  9: . . . . . )\n[Go+ CI/Test]   |     1:  9: . . . . )\n[Go+ CI/Test]   |     1:  9: . . . . \";\"\n[Go+ CI/Test]   |     1: 10: . . . )\n[Go+ CI/Test]   |     1: 10: . . )\n[Go+ CI/Test]   |     1: 10: . )\n[Go+ CI/Test]   |     1: 10: )\n[Go+ CI/Test]   | === RUN   TestFromTestdata/forloop\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parserdir_test.go:90: Parsing /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/_testdata/forloop\n[Go+ CI/Test]   |     1:  1: File (\n[Go+ CI/Test]   |     1:  1: . Declaration (\n[Go+ CI/Test]   |     1:  1: . . StatementList (\n[Go+ CI/Test]   |     1:  1: . . . Statement (\n[Go+ CI/Test]   |     1:  1: . . . . SimpleStmt (\n[Go+ CI/Test]   |     1:  1: . . . . . ExpressionList (\n[Go+ CI/Test]   |     1:  1: . . . . . . Expression (\n[Go+ CI/Test]   |     1:  1: . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     1:  1: . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     1:  1: . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     1:  1: . . . . . . . . . . Operand (\n[Go+ CI/Test]   |     1:  1: . . . . . . . . . . . IDENT n\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: n}\n[Go+ CI/Test]   |     1:  3: . . . . . . . . . . )\n[Go+ CI/Test]   |     1:  3: . . . . . . . . . )\n[Go+ CI/Test]   |     1:  3: . . . . . . . . )\n[Go+ CI/Test]   |     1:  3: . . . . . . . )\n[Go+ CI/Test]   |     1:  3: . . . . . . )\n[Go+ CI/Test]   |     1:  3: . . . . . )\n[Go+ CI/Test]   |     1:  3: . . . . . \":=\"\n[Go+ CI/Test]   |     1:  6: . . . . . ExpressionList (\n[Go+ CI/Test]   |     1:  6: . . . . . . Expression (\n[Go+ CI/Test]   |     1:  6: . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     1:  6: . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     1:  6: . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     1:  6: . . . . . . . . . . Operand (\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: INT, Value: 0}\n[Go+ CI/Test]   |     1:  6: . . . . . . . . . . . INT 0\n[Go+ CI/Test]   |     1:  7: . . . . . . . . . . )\n[Go+ CI/Test]   |     1:  7: . . . . . . . . . )\n[Go+ CI/Test]   |     1:  7: . . . . . . . . )\n[Go+ CI/Test]   |     1:  7: . . . . . . . )\n[Go+ CI/Test]   |     1:  7: . . . . . . )\n[Go+ CI/Test]   |     1:  7: . . . . . )\n[Go+ CI/Test]   |     1:  7: . . . . )\n[Go+ CI/Test]   |     1:  7: . . . . \";\"\n[Go+ CI/Test]   |     2:  1: . . . )\n[Go+ CI/Test]   |     2:  1: . . . Statement (\n[Go+ CI/Test]   |     2:  1: . . . . ForStmt (\n[Go+ CI/Test]   |     2:  1: . . . . . \"for\"\n[Go+ CI/Test]   |     2:  5: . . . . . \"range\"\n[Go+ CI/Test]   |     2: 11: . . . . . Expression (\n[Go+ CI/Test]   |     2: 11: . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     2: 11: . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     2: 11: . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     2: 11: . . . . . . . . . Operand (\n[Go+ CI/Test]   |     2: 11: . . . . . . . . . . ArrayType (\n[Go+ CI/Test]   |     2: 11: . . . . . . . . . . . \"[\"\n[Go+ CI/Test]   |     2: 12: . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |     2: 12: . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     2: 12: . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     2: 12: . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     2: 12: . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: INT, Value: 1}\n[Go+ CI/Test]   |     2: 12: . . . . . . . . . . . . . . . . INT 1\n[Go+ CI/Test]   |     2: 13: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 13: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 13: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 13: . . . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 13: . . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 13: . . . . . . . . . . . \",\"\n[Go+ CI/Test]   |     2: 15: . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |     2: 15: . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     2: 15: . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     2: 15: . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     2: 15: . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: INT, Value: 3}\n[Go+ CI/Test]   |     2: 15: . . . . . . . . . . . . . . . . INT 3\n[Go+ CI/Test]   |     2: 16: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 16: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 16: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 16: . . . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 16: . . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 16: . . . . . . . . . . . \",\"\n[Go+ CI/Test]   |     2: 18: . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |     2: 18: . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     2: 18: . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     2: 18: . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     2: 18: . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: INT, Value: 5}\n[Go+ CI/Test]   |     2: 18: . . . . . . . . . . . . . . . . INT 5\n[Go+ CI/Test]   |     2: 19: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 19: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 19: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 19: . . . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 19: . . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 19: . . . . . . . . . . . \",\"\n[Go+ CI/Test]   |     2: 21: . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |     2: 21: . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     2: 21: . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     2: 21: . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     2: 21: . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: INT, Value: 7}\n[Go+ CI/Test]   |     2: 21: . . . . . . . . . . . . . . . . INT 7\n[Go+ CI/Test]   |     2: 22: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 22: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 22: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 22: . . . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 22: . . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 22: . . . . . . . . . . . \",\"\n[Go+ CI/Test]   |     2: 24: . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |     2: 24: . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     2: 24: . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     2: 24: . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     2: 24: . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: INT, Value: 11}\n[Go+ CI/Test]   |     2: 24: . . . . . . . . . . . . . . . . INT 11\n[Go+ CI/Test]   |     2: 26: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 26: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 26: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 26: . . . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 26: . . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 26: . . . . . . . . . . . \"]\"\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:888: ast.SliceLit{Elts: [0xc000450660 0xc000450680 0xc0004506a0 0xc0004506c0 0xc0004506e0]}\n[Go+ CI/Test]   |     2: 28: . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 28: . . . . . . . . . )\n[Go+ CI/Test]   |     2: 28: . . . . . . . . )\n[Go+ CI/Test]   |     2: 28: . . . . . . . )\n[Go+ CI/Test]   |     2: 28: . . . . . . )\n[Go+ CI/Test]   |     2: 28: . . . . . )\n[Go+ CI/Test]   |     2: 28: . . . . . BlockStmt (\n[Go+ CI/Test]   |     2: 28: . . . . . . \"{\"\n[Go+ CI/Test]   |     3:  2: . . . . . . StatementList (\n[Go+ CI/Test]   |     3:  2: . . . . . . . Statement (\n[Go+ CI/Test]   |     3:  2: . . . . . . . . SimpleStmt (\n[Go+ CI/Test]   |     3:  2: . . . . . . . . . ExpressionList (\n[Go+ CI/Test]   |     3:  2: . . . . . . . . . . Expression (\n[Go+ CI/Test]   |     3:  2: . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     3:  2: . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     3:  2: . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     3:  2: . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |     3:  2: . . . . . . . . . . . . . . . IDENT n\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: n}\n[Go+ CI/Test]   |     3:  3: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     3:  3: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     3:  3: . . . . . . . . . . . . )\n[Go+ CI/Test]   |     3:  3: . . . . . . . . . . . )\n[Go+ CI/Test]   |     3:  3: . . . . . . . . . . )\n[Go+ CI/Test]   |     3:  3: . . . . . . . . . )\n[Go+ CI/Test]   |     3:  3: . . . . . . . . . \"++\"\n[Go+ CI/Test]   |     3:  5: . . . . . . . . )\n[Go+ CI/Test]   |     3:  5: . . . . . . . . \";\"\n[Go+ CI/Test]   |     4:  1: . . . . . . . )\n[Go+ CI/Test]   |     4:  1: . . . . . . )\n[Go+ CI/Test]   |     4:  1: . . . . . . \"}\"\n[Go+ CI/Test]   |     4:  2: . . . . . )\n[Go+ CI/Test]   |     4:  2: . . . . . \";\"\n[Go+ CI/Test]   |     5:  1: . . . . )\n[Go+ CI/Test]   |     5:  1: . . . )\n[Go+ CI/Test]   |     5:  1: . . . Statement (\n[Go+ CI/Test]   |     5:  1: . . . . SimpleStmt (\n[Go+ CI/Test]   |     5:  1: . . . . . ExpressionList (\n[Go+ CI/Test]   |     5:  1: . . . . . . Expression (\n[Go+ CI/Test]   |     5:  1: . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     5:  1: . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     5:  1: . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     5:  1: . . . . . . . . . . Operand (\n[Go+ CI/Test]   |     5:  1: . . . . . . . . . . . IDENT println\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: println}\n[Go+ CI/Test]   |     5:  8: . . . . . . . . . . )\n[Go+ CI/Test]   |     5:  8: . . . . . . . . . . CallOrConversion (\n[Go+ CI/Test]   |     5:  8: . . . . . . . . . . . \"(\"\n[Go+ CI/Test]   |     5:  9: . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |     5:  9: . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     5:  9: . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     5:  9: . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     5:  9: . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: STRING, Value: \"n:\"}\n[Go+ CI/Test]   |     5:  9: . . . . . . . . . . . . . . . . STRING \"n:\"\n[Go+ CI/Test]   |     5: 13: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     5: 13: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     5: 13: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     5: 13: . . . . . . . . . . . . )\n[Go+ CI/Test]   |     5: 13: . . . . . . . . . . . )\n[Go+ CI/Test]   |     5: 13: . . . . . . . . . . . \",\"\n[Go+ CI/Test]   |     5: 15: . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |     5: 15: . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     5: 15: . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     5: 15: . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     5: 15: . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |     5: 15: . . . . . . . . . . . . . . . . IDENT n\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: n}\n[Go+ CI/Test]   |     5: 16: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     5: 16: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     5: 16: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     5: 16: . . . . . . . . . . . . )\n[Go+ CI/Test]   |     5: 16: . . . . . . . . . . . )\n[Go+ CI/Test]   |     5: 16: . . . . . . . . . . . \")\"\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1878: ast.CallExpr{Fun: println, Ellipsis: false, isCmd: false}\n[Go+ CI/Test]   |     5: 17: . . . . . . . . . . )\n[Go+ CI/Test]   |     5: 17: . . . . . . . . . )\n[Go+ CI/Test]   |     5: 17: . . . . . . . . )\n[Go+ CI/Test]   |     5: 17: . . . . . . . )\n[Go+ CI/Test]   |     5: 17: . . . . . . )\n[Go+ CI/Test]   |     5: 17: . . . . . )\n[Go+ CI/Test]   |     5: 17: . . . . )\n[Go+ CI/Test]   |     5: 17: . . . . \";\"\n[Go+ CI/Test]   |     7:  1: . . . )\n[Go+ CI/Test]   |     7:  1: . . . Statement (\n[Go+ CI/Test]   |     7:  1: . . . . ForStmt (\n[Go+ CI/Test]   |     7:  1: . . . . . \"for\"\n[Go+ CI/Test]   |     7:  5: . . . . . SimpleStmt (\n[Go+ CI/Test]   |     7:  5: . . . . . . ExpressionList (\n[Go+ CI/Test]   |     7:  5: . . . . . . . Expression (\n[Go+ CI/Test]   |     7:  5: . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     7:  5: . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     7:  5: . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     7:  5: . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |     7:  5: . . . . . . . . . . . . IDENT x\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: x}\n[Go+ CI/Test]   |     7:  7: . . . . . . . . . . . )\n[Go+ CI/Test]   |     7:  7: . . . . . . . . . . )\n[Go+ CI/Test]   |     7:  7: . . . . . . . . . )\n[Go+ CI/Test]   |     7:  7: . . . . . . . . )\n[Go+ CI/Test]   |     7:  7: . . . . . . . )\n[Go+ CI/Test]   |     7:  7: . . . . . . )\n[Go+ CI/Test]   |     7:  7: . . . . . . \":=\"\n[Go+ CI/Test]   |     7: 10: . . . . . . \"range\"\n[Go+ CI/Test]   |     7: 16: . . . . . . Expression (\n[Go+ CI/Test]   |     7: 16: . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     7: 16: . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     7: 16: . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     7: 16: . . . . . . . . . . Operand (\n[Go+ CI/Test]   |     7: 16: . . . . . . . . . . . ArrayType (\n[Go+ CI/Test]   |     7: 16: . . . . . . . . . . . . \"[\"\n[Go+ CI/Test]   |     7: 17: . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |     7: 17: . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     7: 17: . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     7: 17: . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     7: 17: . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: INT, Value: 1}\n[Go+ CI/Test]   |     7: 17: . . . . . . . . . . . . . . . . . INT 1\n[Go+ CI/Test]   |     7: 18: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     7: 18: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     7: 18: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     7: 18: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     7: 18: . . . . . . . . . . . . )\n[Go+ CI/Test]   |     7: 18: . . . . . . . . . . . . \"]\"\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:847: ast.SliceLit{Elts: [0xc000450820]}\n[Go+ CI/Test]   |     7: 20: . . . . . . . . . . . )\n[Go+ CI/Test]   |     7: 20: . . . . . . . . . . )\n[Go+ CI/Test]   |     7: 20: . . . . . . . . . )\n[Go+ CI/Test]   |     7: 20: . . . . . . . . )\n[Go+ CI/Test]   |     7: 20: . . . . . . . )\n[Go+ CI/Test]   |     7: 20: . . . . . . )\n[Go+ CI/Test]   |     7: 20: . . . . . )\n[Go+ CI/Test]   |     7: 20: . . . . . BlockStmt (\n[Go+ CI/Test]   |     7: 20: . . . . . . \"{\"\n[Go+ CI/Test]   |     8:  1: . . . . . . StatementList (\n[Go+ CI/Test]   |     8:  1: . . . . . . )\n[Go+ CI/Test]   |     8:  1: . . . . . . \"}\"\n[Go+ CI/Test]   |     8:  2: . . . . . )\n[Go+ CI/Test]   |     8:  2: . . . . . \";\"\n[Go+ CI/Test]   |    10:  1: . . . . )\n[Go+ CI/Test]   |    10:  1: . . . )\n[Go+ CI/Test]   |    10:  1: . . . Statement (\n[Go+ CI/Test]   |    10:  1: . . . . SimpleStmt (\n[Go+ CI/Test]   |    10:  1: . . . . . ExpressionList (\n[Go+ CI/Test]   |    10:  1: . . . . . . Expression (\n[Go+ CI/Test]   |    10:  1: . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    10:  1: . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    10:  1: . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    10:  1: . . . . . . . . . . Operand (\n[Go+ CI/Test]   |    10:  1: . . . . . . . . . . . IDENT sum\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: sum}\n[Go+ CI/Test]   |    10:  5: . . . . . . . . . . )\n[Go+ CI/Test]   |    10:  5: . . . . . . . . . )\n[Go+ CI/Test]   |    10:  5: . . . . . . . . )\n[Go+ CI/Test]   |    10:  5: . . . . . . . )\n[Go+ CI/Test]   |    10:  5: . . . . . . )\n[Go+ CI/Test]   |    10:  5: . . . . . )\n[Go+ CI/Test]   |    10:  5: . . . . . \":=\"\n[Go+ CI/Test]   |    10:  8: . . . . . ExpressionList (\n[Go+ CI/Test]   |    10:  8: . . . . . . Expression (\n[Go+ CI/Test]   |    10:  8: . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    10:  8: . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    10:  8: . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    10:  8: . . . . . . . . . . Operand (\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: INT, Value: 0}\n[Go+ CI/Test]   |    10:  8: . . . . . . . . . . . INT 0\n[Go+ CI/Test]   |    10:  9: . . . . . . . . . . )\n[Go+ CI/Test]   |    10:  9: . . . . . . . . . )\n[Go+ CI/Test]   |    10:  9: . . . . . . . . )\n[Go+ CI/Test]   |    10:  9: . . . . . . . )\n[Go+ CI/Test]   |    10:  9: . . . . . . )\n[Go+ CI/Test]   |    10:  9: . . . . . )\n[Go+ CI/Test]   |    10:  9: . . . . )\n[Go+ CI/Test]   |    10:  9: . . . . \";\"\n[Go+ CI/Test]   |    11:  1: . . . )\n[Go+ CI/Test]   |    11:  1: . . . Statement (\n[Go+ CI/Test]   |    11:  1: . . . . ForStmt (\n[Go+ CI/Test]   |    11:  1: . . . . . \"for\"\n[Go+ CI/Test]   |    11:  5: . . . . . SimpleStmt (\n[Go+ CI/Test]   |    11:  5: . . . . . . ExpressionList (\n[Go+ CI/Test]   |    11:  5: . . . . . . . Expression (\n[Go+ CI/Test]   |    11:  5: . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    11:  5: . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    11:  5: . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    11:  5: . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |    11:  5: . . . . . . . . . . . . IDENT _\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: _}\n[Go+ CI/Test]   |    11:  6: . . . . . . . . . . . )\n[Go+ CI/Test]   |    11:  6: . . . . . . . . . . )\n[Go+ CI/Test]   |    11:  6: . . . . . . . . . )\n[Go+ CI/Test]   |    11:  6: . . . . . . . . )\n[Go+ CI/Test]   |    11:  6: . . . . . . . )\n[Go+ CI/Test]   |    11:  6: . . . . . . . \",\"\n[Go+ CI/Test]   |    11:  8: . . . . . . . Expression (\n[Go+ CI/Test]   |    11:  8: . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    11:  8: . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    11:  8: . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    11:  8: . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |    11:  8: . . . . . . . . . . . . IDENT x\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: x}\n[Go+ CI/Test]   |    11: 10: . . . . . . . . . . . )\n[Go+ CI/Test]   |    11: 10: . . . . . . . . . . )\n[Go+ CI/Test]   |    11: 10: . . . . . . . . . )\n[Go+ CI/Test]   |    11: 10: . . . . . . . . )\n[Go+ CI/Test]   |    11: 10: . . . . . . . )\n[Go+ CI/Test]   |    11: 10: . . . . . . )\n[Go+ CI/Test]   |    11: 10: . . . . . . \":=\"\n[Go+ CI/Test]   |    11: 13: . . . . . . \"range\"\n[Go+ CI/Test]   |    11: 19: . . . . . . Expression (\n[Go+ CI/Test]   |    11: 19: . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    11: 19: . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    11: 19: . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    11: 19: . . . . . . . . . . Operand (\n[Go+ CI/Test]   |    11: 19: . . . . . . . . . . . ArrayType (\n[Go+ CI/Test]   |    11: 19: . . . . . . . . . . . . \"[\"\n[Go+ CI/Test]   |    11: 20: . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |    11: 20: . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    11: 20: . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    11: 20: . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    11: 20: . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: INT, Value: 1}\n[Go+ CI/Test]   |    11: 20: . . . . . . . . . . . . . . . . . INT 1\n[Go+ CI/Test]   |    11: 21: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    11: 21: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    11: 21: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    11: 21: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    11: 21: . . . . . . . . . . . . )\n[Go+ CI/Test]   |    11: 21: . . . . . . . . . . . . \",\"\n[Go+ CI/Test]   |    11: 23: . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |    11: 23: . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    11: 23: . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    11: 23: . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    11: 23: . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: INT, Value: 3}\n[Go+ CI/Test]   |    11: 23: . . . . . . . . . . . . . . . . . INT 3\n[Go+ CI/Test]   |    11: 24: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    11: 24: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    11: 24: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    11: 24: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    11: 24: . . . . . . . . . . . . )\n[Go+ CI/Test]   |    11: 24: . . . . . . . . . . . . \",\"\n[Go+ CI/Test]   |    11: 26: . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |    11: 26: . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    11: 26: . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    11: 26: . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    11: 26: . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: INT, Value: 5}\n[Go+ CI/Test]   |    11: 26: . . . . . . . . . . . . . . . . . INT 5\n[Go+ CI/Test]   |    11: 27: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    11: 27: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    11: 27: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    11: 27: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    11: 27: . . . . . . . . . . . . )\n[Go+ CI/Test]   |    11: 27: . . . . . . . . . . . . \",\"\n[Go+ CI/Test]   |    11: 29: . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |    11: 29: . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    11: 29: . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    11: 29: . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    11: 29: . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: INT, Value: 7}\n[Go+ CI/Test]   |    11: 29: . . . . . . . . . . . . . . . . . INT 7\n[Go+ CI/Test]   |    11: 30: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    11: 30: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    11: 30: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    11: 30: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    11: 30: . . . . . . . . . . . . )\n[Go+ CI/Test]   |    11: 30: . . . . . . . . . . . . \",\"\n[Go+ CI/Test]   |    11: 32: . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |    11: 32: . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    11: 32: . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    11: 32: . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    11: 32: . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: INT, Value: 11}\n[Go+ CI/Test]   |    11: 32: . . . . . . . . . . . . . . . . . INT 11\n[Go+ CI/Test]   |    11: 34: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    11: 34: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    11: 34: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    11: 34: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    11: 34: . . . . . . . . . . . . )\n[Go+ CI/Test]   |    11: 34: . . . . . . . . . . . . \"]\"\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:888: ast.SliceLit{Elts: [0xc000450900 0xc000450920 0xc000450940 0xc000450960 0xc000450980]}\n[Go+ CI/Test]   |    11: 36: . . . . . . . . . . . )\n[Go+ CI/Test]   |    11: 36: . . . . . . . . . . )\n[Go+ CI/Test]   |    11: 36: . . . . . . . . . )\n[Go+ CI/Test]   |    11: 36: . . . . . . . . )\n[Go+ CI/Test]   |    11: 36: . . . . . . . )\n[Go+ CI/Test]   |    11: 36: . . . . . . )\n[Go+ CI/Test]   |    11: 36: . . . . . )\n[Go+ CI/Test]   |    11: 36: . . . . . BlockStmt (\n[Go+ CI/Test]   |    11: 36: . . . . . . \"{\"\n[Go+ CI/Test]   |    12:  2: . . . . . . StatementList (\n[Go+ CI/Test]   |    12:  2: . . . . . . . Statement (\n[Go+ CI/Test]   |    12:  2: . . . . . . . . IfStmt (\n[Go+ CI/Test]   |    12:  2: . . . . . . . . . \"if\"\n[Go+ CI/Test]   |    12:  5: . . . . . . . . . SimpleStmt (\n[Go+ CI/Test]   |    12:  5: . . . . . . . . . . ExpressionList (\n[Go+ CI/Test]   |    12:  5: . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |    12:  5: . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    12:  5: . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    12:  5: . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    12:  5: . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |    12:  5: . . . . . . . . . . . . . . . . IDENT x\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: x}\n[Go+ CI/Test]   |    12:  7: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    12:  7: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    12:  7: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    12:  7: . . . . . . . . . . . . . \">\"\n[Go+ CI/Test]   |    12:  9: . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    12:  9: . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    12:  9: . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    12:  9: . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: INT, Value: 3}\n[Go+ CI/Test]   |    12:  9: . . . . . . . . . . . . . . . . . INT 3\n[Go+ CI/Test]   |    12: 11: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    12: 11: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    12: 11: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    12: 11: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    12: 11: . . . . . . . . . . . . )\n[Go+ CI/Test]   |    12: 11: . . . . . . . . . . . )\n[Go+ CI/Test]   |    12: 11: . . . . . . . . . . )\n[Go+ CI/Test]   |    12: 11: . . . . . . . . . )\n[Go+ CI/Test]   |    12: 11: . . . . . . . . . BlockStmt (\n[Go+ CI/Test]   |    12: 11: . . . . . . . . . . \"{\"\n[Go+ CI/Test]   |    13:  3: . . . . . . . . . . StatementList (\n[Go+ CI/Test]   |    13:  3: . . . . . . . . . . . Statement (\n[Go+ CI/Test]   |    13:  3: . . . . . . . . . . . . SimpleStmt (\n[Go+ CI/Test]   |    13:  3: . . . . . . . . . . . . . ExpressionList (\n[Go+ CI/Test]   |    13:  3: . . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |    13:  3: . . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    13:  3: . . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    13:  3: . . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    13:  3: . . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |    13:  3: . . . . . . . . . . . . . . . . . . . IDENT sum\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: sum}\n[Go+ CI/Test]   |    13:  7: . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    13:  7: . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    13:  7: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    13:  7: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    13:  7: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    13:  7: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    13:  7: . . . . . . . . . . . . . \"+=\"\n[Go+ CI/Test]   |    13: 10: . . . . . . . . . . . . . ExpressionList (\n[Go+ CI/Test]   |    13: 10: . . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |    13: 10: . . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    13: 10: . . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    13: 10: . . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    13: 10: . . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |    13: 10: . . . . . . . . . . . . . . . . . . . IDENT x\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: x}\n[Go+ CI/Test]   |    13: 11: . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    13: 11: . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    13: 11: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    13: 11: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    13: 11: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    13: 11: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    13: 11: . . . . . . . . . . . . )\n[Go+ CI/Test]   |    13: 11: . . . . . . . . . . . . \";\"\n[Go+ CI/Test]   |    14:  2: . . . . . . . . . . . )\n[Go+ CI/Test]   |    14:  2: . . . . . . . . . . )\n[Go+ CI/Test]   |    14:  2: . . . . . . . . . . \"}\"\n[Go+ CI/Test]   |    14:  3: . . . . . . . . . )\n[Go+ CI/Test]   |    14:  3: . . . . . . . . . \";\"\n[Go+ CI/Test]   |    15:  1: . . . . . . . . )\n[Go+ CI/Test]   |    15:  1: . . . . . . . )\n[Go+ CI/Test]   |    15:  1: . . . . . . )\n[Go+ CI/Test]   |    15:  1: . . . . . . \"}\"\n[Go+ CI/Test]   |    15:  2: . . . . . )\n[Go+ CI/Test]   |    15:  2: . . . . . \";\"\n[Go+ CI/Test]   |    16:  1: . . . . )\n[Go+ CI/Test]   |    16:  1: . . . )\n[Go+ CI/Test]   |    16:  1: . . . Statement (\n[Go+ CI/Test]   |    16:  1: . . . . SimpleStmt (\n[Go+ CI/Test]   |    16:  1: . . . . . ExpressionList (\n[Go+ CI/Test]   |    16:  1: . . . . . . Expression (\n[Go+ CI/Test]   |    16:  1: . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    16:  1: . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    16:  1: . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    16:  1: . . . . . . . . . . Operand (\n[Go+ CI/Test]   |    16:  1: . . . . . . . . . . . IDENT println\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: println}\n[Go+ CI/Test]   |    16:  8: . . . . . . . . . . )\n[Go+ CI/Test]   |    16:  8: . . . . . . . . . . CallOrConversion (\n[Go+ CI/Test]   |    16:  8: . . . . . . . . . . . \"(\"\n[Go+ CI/Test]   |    16:  9: . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |    16:  9: . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    16:  9: . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    16:  9: . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    16:  9: . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: STRING, Value: \"sum(1,3,5,7,11):\"}\n[Go+ CI/Test]   |    16:  9: . . . . . . . . . . . . . . . . STRING \"sum(1,3,5,7,11):\"\n[Go+ CI/Test]   |    16: 27: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    16: 27: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    16: 27: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    16: 27: . . . . . . . . . . . . )\n[Go+ CI/Test]   |    16: 27: . . . . . . . . . . . )\n[Go+ CI/Test]   |    16: 27: . . . . . . . . . . . \",\"\n[Go+ CI/Test]   |    16: 29: . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |    16: 29: . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    16: 29: . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    16: 29: . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    16: 29: . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |    16: 29: . . . . . . . . . . . . . . . . IDENT sum\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: sum}\n[Go+ CI/Test]   |    16: 32: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    16: 32: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    16: 32: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    16: 32: . . . . . . . . . . . . )\n[Go+ CI/Test]   |    16: 32: . . . . . . . . . . . )\n[Go+ CI/Test]   |    16: 32: . . . . . . . . . . . \")\"\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1878: ast.CallExpr{Fun: println, Ellipsis: false, isCmd: false}\n[Go+ CI/Test]   |    16: 33: . . . . . . . . . . )\n[Go+ CI/Test]   |    16: 33: . . . . . . . . . )\n[Go+ CI/Test]   |    16: 33: . . . . . . . . )\n[Go+ CI/Test]   |    16: 33: . . . . . . . )\n[Go+ CI/Test]   |    16: 33: . . . . . . )\n[Go+ CI/Test]   |    16: 33: . . . . . )\n[Go+ CI/Test]   |    16: 33: . . . . )\n[Go+ CI/Test]   |    16: 33: . . . . \";\"\n[Go+ CI/Test]   |    18:  1: . . . )\n[Go+ CI/Test]   |    18:  1: . . . Statement (\n[Go+ CI/Test]   |    18:  1: . . . . SimpleStmt (\n[Go+ CI/Test]   |    18:  1: . . . . . ExpressionList (\n[Go+ CI/Test]   |    18:  1: . . . . . . Expression (\n[Go+ CI/Test]   |    18:  1: . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    18:  1: . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    18:  1: . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    18:  1: . . . . . . . . . . Operand (\n[Go+ CI/Test]   |    18:  1: . . . . . . . . . . . IDENT sum\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: sum}\n[Go+ CI/Test]   |    18:  5: . . . . . . . . . . )\n[Go+ CI/Test]   |    18:  5: . . . . . . . . . )\n[Go+ CI/Test]   |    18:  5: . . . . . . . . )\n[Go+ CI/Test]   |    18:  5: . . . . . . . )\n[Go+ CI/Test]   |    18:  5: . . . . . . )\n[Go+ CI/Test]   |    18:  5: . . . . . )\n[Go+ CI/Test]   |    18:  5: . . . . . \"=\"\n[Go+ CI/Test]   |    18:  7: . . . . . ExpressionList (\n[Go+ CI/Test]   |    18:  7: . . . . . . Expression (\n[Go+ CI/Test]   |    18:  7: . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    18:  7: . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    18:  7: . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    18:  7: . . . . . . . . . . Operand (\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: INT, Value: 0}\n[Go+ CI/Test]   |    18:  7: . . . . . . . . . . . INT 0\n[Go+ CI/Test]   |    18:  8: . . . . . . . . . . )\n[Go+ CI/Test]   |    18:  8: . . . . . . . . . )\n[Go+ CI/Test]   |    18:  8: . . . . . . . . )\n[Go+ CI/Test]   |    18:  8: . . . . . . . )\n[Go+ CI/Test]   |    18:  8: . . . . . . )\n[Go+ CI/Test]   |    18:  8: . . . . . )\n[Go+ CI/Test]   |    18:  8: . . . . )\n[Go+ CI/Test]   |    18:  8: . . . . \";\"\n[Go+ CI/Test]   |    19:  1: . . . )\n[Go+ CI/Test]   |    19:  1: . . . Statement (\n[Go+ CI/Test]   |    19:  1: . . . . ForStmt (\n[Go+ CI/Test]   |    19:  1: . . . . . \"for\"\n[Go+ CI/Test]   |    19:  5: . . . . . SimpleStmt (\n[Go+ CI/Test]   |    19:  5: . . . . . . ExpressionList (\n[Go+ CI/Test]   |    19:  5: . . . . . . . Expression (\n[Go+ CI/Test]   |    19:  5: . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    19:  5: . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    19:  5: . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    19:  5: . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |    19:  5: . . . . . . . . . . . . IDENT i\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: i}\n[Go+ CI/Test]   |    19:  7: . . . . . . . . . . . )\n[Go+ CI/Test]   |    19:  7: . . . . . . . . . . )\n[Go+ CI/Test]   |    19:  7: . . . . . . . . . )\n[Go+ CI/Test]   |    19:  7: . . . . . . . . )\n[Go+ CI/Test]   |    19:  7: . . . . . . . )\n[Go+ CI/Test]   |    19:  7: . . . . . . )\n[Go+ CI/Test]   |    19:  7: . . . . . . \":=\"\n[Go+ CI/Test]   |    19: 10: . . . . . . ExpressionList (\n[Go+ CI/Test]   |    19: 10: . . . . . . . Expression (\n[Go+ CI/Test]   |    19: 10: . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    19: 10: . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    19: 10: . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    19: 10: . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: INT, Value: 1}\n[Go+ CI/Test]   |    19: 10: . . . . . . . . . . . . INT 1\n[Go+ CI/Test]   |    19: 11: . . . . . . . . . . . )\n[Go+ CI/Test]   |    19: 11: . . . . . . . . . . )\n[Go+ CI/Test]   |    19: 11: . . . . . . . . . )\n[Go+ CI/Test]   |    19: 11: . . . . . . . . )\n[Go+ CI/Test]   |    19: 11: . . . . . . . )\n[Go+ CI/Test]   |    19: 11: . . . . . . )\n[Go+ CI/Test]   |    19: 11: . . . . . )\n[Go+ CI/Test]   |    19: 11: . . . . . \";\"\n[Go+ CI/Test]   |    19: 13: . . . . . SimpleStmt (\n[Go+ CI/Test]   |    19: 13: . . . . . . ExpressionList (\n[Go+ CI/Test]   |    19: 13: . . . . . . . Expression (\n[Go+ CI/Test]   |    19: 13: . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    19: 13: . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    19: 13: . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    19: 13: . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |    19: 13: . . . . . . . . . . . . IDENT i\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: i}\n[Go+ CI/Test]   |    19: 15: . . . . . . . . . . . )\n[Go+ CI/Test]   |    19: 15: . . . . . . . . . . )\n[Go+ CI/Test]   |    19: 15: . . . . . . . . . )\n[Go+ CI/Test]   |    19: 15: . . . . . . . . . \"<\"\n[Go+ CI/Test]   |    19: 17: . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    19: 17: . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    19: 17: . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    19: 17: . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: INT, Value: 100}\n[Go+ CI/Test]   |    19: 17: . . . . . . . . . . . . . INT 100\n[Go+ CI/Test]   |    19: 20: . . . . . . . . . . . . )\n[Go+ CI/Test]   |    19: 20: . . . . . . . . . . . )\n[Go+ CI/Test]   |    19: 20: . . . . . . . . . . )\n[Go+ CI/Test]   |    19: 20: . . . . . . . . . )\n[Go+ CI/Test]   |    19: 20: . . . . . . . . )\n[Go+ CI/Test]   |    19: 20: . . . . . . . )\n[Go+ CI/Test]   |    19: 20: . . . . . . )\n[Go+ CI/Test]   |    19: 20: . . . . . )\n[Go+ CI/Test]   |    19: 20: . . . . . \";\"\n[Go+ CI/Test]   |    19: 22: . . . . . SimpleStmt (\n[Go+ CI/Test]   |    19: 22: . . . . . . ExpressionList (\n[Go+ CI/Test]   |    19: 22: . . . . . . . Expression (\n[Go+ CI/Test]   |    19: 22: . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    19: 22: . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    19: 22: . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    19: 22: . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |    19: 22: . . . . . . . . . . . . IDENT i\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: i}\n[Go+ CI/Test]   |    19: 23: . . . . . . . . . . . )\n[Go+ CI/Test]   |    19: 23: . . . . . . . . . . )\n[Go+ CI/Test]   |    19: 23: . . . . . . . . . )\n[Go+ CI/Test]   |    19: 23: . . . . . . . . )\n[Go+ CI/Test]   |    19: 23: . . . . . . . )\n[Go+ CI/Test]   |    19: 23: . . . . . . )\n[Go+ CI/Test]   |    19: 23: . . . . . . \"++\"\n[Go+ CI/Test]   |    19: 26: . . . . . )\n[Go+ CI/Test]   |    19: 26: . . . . . BlockStmt (\n[Go+ CI/Test]   |    19: 26: . . . . . . \"{\"\n[Go+ CI/Test]   |    20:  2: . . . . . . StatementList (\n[Go+ CI/Test]   |    20:  2: . . . . . . . Statement (\n[Go+ CI/Test]   |    20:  2: . . . . . . . . SimpleStmt (\n[Go+ CI/Test]   |    20:  2: . . . . . . . . . ExpressionList (\n[Go+ CI/Test]   |    20:  2: . . . . . . . . . . Expression (\n[Go+ CI/Test]   |    20:  2: . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    20:  2: . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    20:  2: . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    20:  2: . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |    20:  2: . . . . . . . . . . . . . . . IDENT sum\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: sum}\n[Go+ CI/Test]   |    20:  6: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    20:  6: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    20:  6: . . . . . . . . . . . . )\n[Go+ CI/Test]   |    20:  6: . . . . . . . . . . . )\n[Go+ CI/Test]   |    20:  6: . . . . . . . . . . )\n[Go+ CI/Test]   |    20:  6: . . . . . . . . . )\n[Go+ CI/Test]   |    20:  6: . . . . . . . . . \"+=\"\n[Go+ CI/Test]   |    20:  9: . . . . . . . . . ExpressionList (\n[Go+ CI/Test]   |    20:  9: . . . . . . . . . . Expression (\n[Go+ CI/Test]   |    20:  9: . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    20:  9: . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    20:  9: . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    20:  9: . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |    20:  9: . . . . . . . . . . . . . . . IDENT i\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: i}\n[Go+ CI/Test]   |    20: 10: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    20: 10: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    20: 10: . . . . . . . . . . . . )\n[Go+ CI/Test]   |    20: 10: . . . . . . . . . . . )\n[Go+ CI/Test]   |    20: 10: . . . . . . . . . . )\n[Go+ CI/Test]   |    20: 10: . . . . . . . . . )\n[Go+ CI/Test]   |    20: 10: . . . . . . . . )\n[Go+ CI/Test]   |    20: 10: . . . . . . . . \";\"\n[Go+ CI/Test]   |    21:  1: . . . . . . . )\n[Go+ CI/Test]   |    21:  1: . . . . . . )\n[Go+ CI/Test]   |    21:  1: . . . . . . \"}\"\n[Go+ CI/Test]   |    21:  2: . . . . . )\n[Go+ CI/Test]   |    21:  2: . . . . . \";\"\n[Go+ CI/Test]   |    22:  1: . . . . )\n[Go+ CI/Test]   |    22:  1: . . . )\n[Go+ CI/Test]   |    22:  1: . . . Statement (\n[Go+ CI/Test]   |    22:  1: . . . . SimpleStmt (\n[Go+ CI/Test]   |    22:  1: . . . . . ExpressionList (\n[Go+ CI/Test]   |    22:  1: . . . . . . Expression (\n[Go+ CI/Test]   |    22:  1: . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    22:  1: . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    22:  1: . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    22:  1: . . . . . . . . . . Operand (\n[Go+ CI/Test]   |    22:  1: . . . . . . . . . . . IDENT println\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: println}\n[Go+ CI/Test]   |    22:  8: . . . . . . . . . . )\n[Go+ CI/Test]   |    22:  8: . . . . . . . . . . CallOrConversion (\n[Go+ CI/Test]   |    22:  8: . . . . . . . . . . . \"(\"\n[Go+ CI/Test]   |    22:  9: . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |    22:  9: . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    22:  9: . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    22:  9: . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    22:  9: . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: STRING, Value: \"sum(1-100):\"}\n[Go+ CI/Test]   |    22:  9: . . . . . . . . . . . . . . . . STRING \"sum(1-100):\"\n[Go+ CI/Test]   |    22: 22: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    22: 22: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    22: 22: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    22: 22: . . . . . . . . . . . . )\n[Go+ CI/Test]   |    22: 22: . . . . . . . . . . . )\n[Go+ CI/Test]   |    22: 22: . . . . . . . . . . . \",\"\n[Go+ CI/Test]   |    22: 24: . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |    22: 24: . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    22: 24: . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    22: 24: . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    22: 24: . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |    22: 24: . . . . . . . . . . . . . . . . IDENT sum\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: sum}\n[Go+ CI/Test]   |    22: 27: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    22: 27: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    22: 27: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    22: 27: . . . . . . . . . . . . )\n[Go+ CI/Test]   |    22: 27: . . . . . . . . . . . )\n[Go+ CI/Test]   |    22: 27: . . . . . . . . . . . \")\"\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1878: ast.CallExpr{Fun: println, Ellipsis: false, isCmd: false}\n[Go+ CI/Test]   |    22: 28: . . . . . . . . . . )\n[Go+ CI/Test]   |    22: 28: . . . . . . . . . )\n[Go+ CI/Test]   |    22: 28: . . . . . . . . )\n[Go+ CI/Test]   |    22: 28: . . . . . . . )\n[Go+ CI/Test]   |    22: 28: . . . . . . )\n[Go+ CI/Test]   |    22: 28: . . . . . )\n[Go+ CI/Test]   |    22: 28: . . . . )\n[Go+ CI/Test]   |    22: 28: . . . . \";\"\n[Go+ CI/Test]   |    24:  1: . . . )\n[Go+ CI/Test]   |    24:  1: . . . Statement (\n[Go+ CI/Test]   |    24:  1: . . . . ForStmt (\n[Go+ CI/Test]   |    24:  1: . . . . . \"for\"\n[Go+ CI/Test]   |    24:  5: . . . . . SimpleStmt (\n[Go+ CI/Test]   |    24:  5: . . . . . . ExpressionList (\n[Go+ CI/Test]   |    24:  5: . . . . . . . Expression (\n[Go+ CI/Test]   |    24:  5: . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    24:  5: . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    24:  5: . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    24:  5: . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |    24:  5: . . . . . . . . . . . . IDENT x\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: x}\n[Go+ CI/Test]   |    24:  7: . . . . . . . . . . . )\n[Go+ CI/Test]   |    24:  7: . . . . . . . . . . )\n[Go+ CI/Test]   |    24:  7: . . . . . . . . . )\n[Go+ CI/Test]   |    24:  7: . . . . . . . . )\n[Go+ CI/Test]   |    24:  7: . . . . . . . )\n[Go+ CI/Test]   |    24:  7: . . . . . . )\n[Go+ CI/Test]   |    24:  7: . . . . . . \"<-\"\n[Go+ CI/Test]   |    24: 10: . . . . . . Expression (\n[Go+ CI/Test]   |    24: 10: . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    24: 10: . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    24: 10: . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    24: 10: . . . . . . . . . . Operand (\n[Go+ CI/Test]   |    24: 10: . . . . . . . . . . . ArrayType (\n[Go+ CI/Test]   |    24: 10: . . . . . . . . . . . . \"[\"\n[Go+ CI/Test]   |    24: 11: . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |    24: 11: . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    24: 11: . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    24: 11: . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    24: 11: . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: INT, Value: 1}\n[Go+ CI/Test]   |    24: 11: . . . . . . . . . . . . . . . . . INT 1\n[Go+ CI/Test]   |    24: 12: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    24: 12: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    24: 12: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    24: 12: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    24: 12: . . . . . . . . . . . . )\n[Go+ CI/Test]   |    24: 12: . . . . . . . . . . . . \"]\"\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:847: ast.SliceLit{Elts: [0xc000450cc0]}\n[Go+ CI/Test]   |    24: 14: . . . . . . . . . . . )\n[Go+ CI/Test]   |    24: 14: . . . . . . . . . . )\n[Go+ CI/Test]   |    24: 14: . . . . . . . . . )\n[Go+ CI/Test]   |    24: 14: . . . . . . . . )\n[Go+ CI/Test]   |    24: 14: . . . . . . . )\n[Go+ CI/Test]   |    24: 14: . . . . . . )\n[Go+ CI/Test]   |    24: 14: . . . . . )\n[Go+ CI/Test]   |    24: 14: . . . . . BlockStmt (\n[Go+ CI/Test]   |    24: 14: . . . . . . \"{\"\n[Go+ CI/Test]   |    25:  2: . . . . . . StatementList (\n[Go+ CI/Test]   |    25:  2: . . . . . . . Statement (\n[Go+ CI/Test]   |    25:  2: . . . . . . . . SimpleStmt (\n[Go+ CI/Test]   |    25:  2: . . . . . . . . . ExpressionList (\n[Go+ CI/Test]   |    25:  2: . . . . . . . . . . Expression (\n[Go+ CI/Test]   |    25:  2: . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    25:  2: . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    25:  2: . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    25:  2: . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |    25:  2: . . . . . . . . . . . . . . . IDENT println\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: println}\n[Go+ CI/Test]   |    25:  9: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    25:  9: . . . . . . . . . . . . . . CallOrConversion (\n[Go+ CI/Test]   |    25:  9: . . . . . . . . . . . . . . . \"(\"\n[Go+ CI/Test]   |    25: 10: . . . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |    25: 10: . . . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    25: 10: . . . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    25: 10: . . . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    25: 10: . . . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |    25: 10: . . . . . . . . . . . . . . . . . . . . IDENT x\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: x}\n[Go+ CI/Test]   |    25: 11: . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    25: 11: . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    25: 11: . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    25: 11: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    25: 11: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    25: 11: . . . . . . . . . . . . . . . \")\"\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1878: ast.CallExpr{Fun: println, Ellipsis: false, isCmd: false}\n[Go+ CI/Test]   |    25: 12: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    25: 12: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    25: 12: . . . . . . . . . . . . )\n[Go+ CI/Test]   |    25: 12: . . . . . . . . . . . )\n[Go+ CI/Test]   |    25: 12: . . . . . . . . . . )\n[Go+ CI/Test]   |    25: 12: . . . . . . . . . )\n[Go+ CI/Test]   |    25: 12: . . . . . . . . )\n[Go+ CI/Test]   |    25: 12: . . . . . . . . \";\"\n[Go+ CI/Test]   |    26:  1: . . . . . . . )\n[Go+ CI/Test]   |    26:  1: . . . . . . )\n[Go+ CI/Test]   |    26:  1: . . . . . . \"}\"\n[Go+ CI/Test]   |    26:  2: . . . . . )\n[Go+ CI/Test]   |    26:  2: . . . . . \";\"\n[Go+ CI/Test]   |    28:  1: . . . . )\n[Go+ CI/Test]   |    28:  1: . . . )\n[Go+ CI/Test]   |    28:  1: . . . Statement (\n[Go+ CI/Test]   |    28:  1: . . . . ForStmt (\n[Go+ CI/Test]   |    28:  1: . . . . . \"for\"\n[Go+ CI/Test]   |    28:  5: . . . . . SimpleStmt (\n[Go+ CI/Test]   |    28:  5: . . . . . . ExpressionList (\n[Go+ CI/Test]   |    28:  5: . . . . . . . Expression (\n[Go+ CI/Test]   |    28:  5: . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    28:  5: . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    28:  5: . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    28:  5: . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |    28:  5: . . . . . . . . . . . . IDENT i\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: i}\n[Go+ CI/Test]   |    28:  6: . . . . . . . . . . . )\n[Go+ CI/Test]   |    28:  6: . . . . . . . . . . )\n[Go+ CI/Test]   |    28:  6: . . . . . . . . . )\n[Go+ CI/Test]   |    28:  6: . . . . . . . . )\n[Go+ CI/Test]   |    28:  6: . . . . . . . )\n[Go+ CI/Test]   |    28:  6: . . . . . . . \",\"\n[Go+ CI/Test]   |    28:  8: . . . . . . . Expression (\n[Go+ CI/Test]   |    28:  8: . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    28:  8: . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    28:  8: . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    28:  8: . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |    28:  8: . . . . . . . . . . . . IDENT x\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: x}\n[Go+ CI/Test]   |    28: 10: . . . . . . . . . . . )\n[Go+ CI/Test]   |    28: 10: . . . . . . . . . . )\n[Go+ CI/Test]   |    28: 10: . . . . . . . . . )\n[Go+ CI/Test]   |    28: 10: . . . . . . . . )\n[Go+ CI/Test]   |    28: 10: . . . . . . . )\n[Go+ CI/Test]   |    28: 10: . . . . . . )\n[Go+ CI/Test]   |    28: 10: . . . . . . \"<-\"\n[Go+ CI/Test]   |    28: 13: . . . . . . Expression (\n[Go+ CI/Test]   |    28: 13: . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    28: 13: . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    28: 13: . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    28: 13: . . . . . . . . . . Operand (\n[Go+ CI/Test]   |    28: 13: . . . . . . . . . . . ArrayType (\n[Go+ CI/Test]   |    28: 13: . . . . . . . . . . . . \"[\"\n[Go+ CI/Test]   |    28: 14: . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |    28: 14: . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    28: 14: . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    28: 14: . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    28: 14: . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: INT, Value: 1}\n[Go+ CI/Test]   |    28: 14: . . . . . . . . . . . . . . . . . INT 1\n[Go+ CI/Test]   |    28: 15: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    28: 15: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    28: 15: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    28: 15: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    28: 15: . . . . . . . . . . . . )\n[Go+ CI/Test]   |    28: 15: . . . . . . . . . . . . \"]\"\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:847: ast.SliceLit{Elts: [0xc000450d80]}\n[Go+ CI/Test]   |    28: 17: . . . . . . . . . . . )\n[Go+ CI/Test]   |    28: 17: . . . . . . . . . . )\n[Go+ CI/Test]   |    28: 17: . . . . . . . . . )\n[Go+ CI/Test]   |    28: 17: . . . . . . . . )\n[Go+ CI/Test]   |    28: 17: . . . . . . . )\n[Go+ CI/Test]   |    28: 17: . . . . . . )\n[Go+ CI/Test]   |    28: 17: . . . . . . \"if\"\n[Go+ CI/Test]   |    28: 20: . . . . . . Expression (\n[Go+ CI/Test]   |    28: 20: . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    28: 20: . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    28: 20: . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    28: 20: . . . . . . . . . . Operand (\n[Go+ CI/Test]   |    28: 20: . . . . . . . . . . . IDENT i\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: i}\n[Go+ CI/Test]   |    28: 21: . . . . . . . . . . )\n[Go+ CI/Test]   |    28: 21: . . . . . . . . . )\n[Go+ CI/Test]   |    28: 21: . . . . . . . . )\n[Go+ CI/Test]   |    28: 21: . . . . . . . . \"%\"\n[Go+ CI/Test]   |    28: 22: . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    28: 22: . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    28: 22: . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    28: 22: . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: INT, Value: 2}\n[Go+ CI/Test]   |    28: 22: . . . . . . . . . . . . INT 2\n[Go+ CI/Test]   |    28: 24: . . . . . . . . . . . )\n[Go+ CI/Test]   |    28: 24: . . . . . . . . . . )\n[Go+ CI/Test]   |    28: 24: . . . . . . . . . )\n[Go+ CI/Test]   |    28: 24: . . . . . . . . )\n[Go+ CI/Test]   |    28: 24: . . . . . . . . \"==\"\n[Go+ CI/Test]   |    28: 27: . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    28: 27: . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    28: 27: . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    28: 27: . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: INT, Value: 0}\n[Go+ CI/Test]   |    28: 27: . . . . . . . . . . . . INT 0\n[Go+ CI/Test]   |    28: 29: . . . . . . . . . . . )\n[Go+ CI/Test]   |    28: 29: . . . . . . . . . . )\n[Go+ CI/Test]   |    28: 29: . . . . . . . . . )\n[Go+ CI/Test]   |    28: 29: . . . . . . . . )\n[Go+ CI/Test]   |    28: 29: . . . . . . . )\n[Go+ CI/Test]   |    28: 29: . . . . . . )\n[Go+ CI/Test]   |    28: 29: . . . . . )\n[Go+ CI/Test]   |    28: 29: . . . . . BlockStmt (\n[Go+ CI/Test]   |    28: 29: . . . . . . \"{\"\n[Go+ CI/Test]   |    29:  2: . . . . . . StatementList (\n[Go+ CI/Test]   |    29:  2: . . . . . . . Statement (\n[Go+ CI/Test]   |    29:  2: . . . . . . . . SimpleStmt (\n[Go+ CI/Test]   |    29:  2: . . . . . . . . . ExpressionList (\n[Go+ CI/Test]   |    29:  2: . . . . . . . . . . Expression (\n[Go+ CI/Test]   |    29:  2: . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    29:  2: . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    29:  2: . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    29:  2: . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |    29:  2: . . . . . . . . . . . . . . . IDENT println\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: println}\n[Go+ CI/Test]   |    29:  9: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    29:  9: . . . . . . . . . . . . . . CallOrConversion (\n[Go+ CI/Test]   |    29:  9: . . . . . . . . . . . . . . . \"(\"\n[Go+ CI/Test]   |    29: 10: . . . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |    29: 10: . . . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    29: 10: . . . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    29: 10: . . . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    29: 10: . . . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |    29: 10: . . . . . . . . . . . . . . . . . . . . IDENT i\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: i}\n[Go+ CI/Test]   |    29: 11: . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    29: 11: . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    29: 11: . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    29: 11: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    29: 11: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    29: 11: . . . . . . . . . . . . . . . \",\"\n[Go+ CI/Test]   |    29: 13: . . . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |    29: 13: . . . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    29: 13: . . . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    29: 13: . . . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    29: 13: . . . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |    29: 13: . . . . . . . . . . . . . . . . . . . . IDENT x\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: x}\n[Go+ CI/Test]   |    29: 14: . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    29: 14: . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    29: 14: . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    29: 14: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    29: 14: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    29: 14: . . . . . . . . . . . . . . . \")\"\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1878: ast.CallExpr{Fun: println, Ellipsis: false, isCmd: false}\n[Go+ CI/Test]   |    29: 15: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    29: 15: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    29: 15: . . . . . . . . . . . . )\n[Go+ CI/Test]   |    29: 15: . . . . . . . . . . . )\n[Go+ CI/Test]   |    29: 15: . . . . . . . . . . )\n[Go+ CI/Test]   |    29: 15: . . . . . . . . . )\n[Go+ CI/Test]   |    29: 15: . . . . . . . . )\n[Go+ CI/Test]   |    29: 15: . . . . . . . . \";\"\n[Go+ CI/Test]   |    30:  1: . . . . . . . )\n[Go+ CI/Test]   |    30:  1: . . . . . . )\n[Go+ CI/Test]   |    30:  1: . . . . . . \"}\"\n[Go+ CI/Test]   |    30:  2: . . . . . )\n[Go+ CI/Test]   |    30:  2: . . . . . \";\"\n[Go+ CI/Test]   |    30:  3: . . . . )\n[Go+ CI/Test]   |    30:  3: . . . )\n[Go+ CI/Test]   |    30:  3: . . )\n[Go+ CI/Test]   |    30:  3: . )\n[Go+ CI/Test]   |    30:  3: )\n[Go+ CI/Test]   | === RUN   TestFromTestdata/funcdecl1\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parserdir_test.go:90: Parsing /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/_testdata/funcdecl1\n[Go+ CI/Test]   |     1:  1: File (\n[Go+ CI/Test]   |     1:  1: . Declaration (\n[Go+ CI/Test]   |     1:  1: . . FunctionDecl (\n[Go+ CI/Test]   |     1:  1: . . . \"func\"\n[Go+ CI/Test]   |     1:  5: . . . Parameters (\n[Go+ CI/Test]   |     1:  5: . . . . \"(\"\n[Go+ CI/Test]   |     1:  6: . . . . \")\"\n[Go+ CI/Test]   |     1:  8: . . . )\n[Go+ CI/Test]   |     1:  8: . . . Parameters (\n[Go+ CI/Test]   |     1:  8: . . . . \"(\"\n[Go+ CI/Test]   |     1:  9: . . . . ParameterList (\n[Go+ CI/Test]   |     1:  9: . . . . . ParamDeclOrNil (\n[Go+ CI/Test]   |     1:  9: . . . . . . IDENT int\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: int}\n[Go+ CI/Test]   |     1: 12: . . . . . )\n[Go+ CI/Test]   |     1: 12: . . . . . \",\"\n[Go+ CI/Test]   |     1: 14: . . . . . ParamDeclOrNil (\n[Go+ CI/Test]   |     1: 14: . . . . . . IDENT int\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: int}\n[Go+ CI/Test]   |     1: 17: . . . . . )\n[Go+ CI/Test]   |     1: 17: . . . . )\n[Go+ CI/Test]   |     1: 17: . . . . \")\"\n[Go+ CI/Test]   |     1: 19: . . . )\n[Go+ CI/Test]   |     1: 19: . . . Body (\n[Go+ CI/Test]   |     1: 19: . . . . \"{\"\n[Go+ CI/Test]   |     2:  2: . . . . StatementList (\n[Go+ CI/Test]   |     2:  2: . . . . . Statement (\n[Go+ CI/Test]   |     2:  2: . . . . . . ReturnStmt (\n[Go+ CI/Test]   |     2:  2: . . . . . . . \"return\"\n[Go+ CI/Test]   |     2:  9: . . . . . . . ExpressionList (\n[Go+ CI/Test]   |     2:  9: . . . . . . . . Expression (\n[Go+ CI/Test]   |     2:  9: . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     2:  9: . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     2:  9: . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     2:  9: . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: INT, Value: 1}\n[Go+ CI/Test]   |     2:  9: . . . . . . . . . . . . . INT 1\n[Go+ CI/Test]   |     2: 10: . . . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 10: . . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 10: . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 10: . . . . . . . . . )\n[Go+ CI/Test]   |     2: 10: . . . . . . . . )\n[Go+ CI/Test]   |     2: 10: . . . . . . . . \",\"\n[Go+ CI/Test]   |     2: 12: . . . . . . . . Expression (\n[Go+ CI/Test]   |     2: 12: . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     2: 12: . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     2: 12: . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     2: 12: . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: INT, Value: 1}\n[Go+ CI/Test]   |     2: 12: . . . . . . . . . . . . . INT 1\n[Go+ CI/Test]   |     2: 13: . . . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 13: . . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 13: . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 13: . . . . . . . . . )\n[Go+ CI/Test]   |     2: 13: . . . . . . . . )\n[Go+ CI/Test]   |     2: 13: . . . . . . . )\n[Go+ CI/Test]   |     2: 13: . . . . . . . \";\"\n[Go+ CI/Test]   |     3:  1: . . . . . . )\n[Go+ CI/Test]   |     3:  1: . . . . . )\n[Go+ CI/Test]   |     3:  1: . . . . )\n[Go+ CI/Test]   |     3:  1: . . . . \"}\"\n[Go+ CI/Test]   |     3:  2: . . . )\n[Go+ CI/Test]   |     3:  2: . . . CallOrConversion (\n[Go+ CI/Test]   |     3:  2: . . . . \"(\"\n[Go+ CI/Test]   |     3:  3: . . . . \")\"\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1878: ast.CallExpr{Fun: &{0xc000451020 0xc00047e540}, Ellipsis: false, isCmd: false}\n[Go+ CI/Test]   |     3:  4: . . . )\n[Go+ CI/Test]   |     3:  4: . . . \";\"\n[Go+ CI/Test]   |     3:  5: . . )\n[Go+ CI/Test]   |     3:  5: . . StatementList (\n[Go+ CI/Test]   |     3:  5: . . )\n[Go+ CI/Test]   |     3:  5: . )\n[Go+ CI/Test]   |     3:  5: )\n[Go+ CI/Test]   | === RUN   TestFromTestdata/funcdecl2\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parserdir_test.go:90: Parsing /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/_testdata/funcdecl2\n[Go+ CI/Test]   |     1:  1: File (\n[Go+ CI/Test]   |     1:  1: . Declaration (\n[Go+ CI/Test]   |     1:  1: . . FunctionDecl (\n[Go+ CI/Test]   |     1:  1: . . . \"func\"\n[Go+ CI/Test]   |     1:  5: . . . Parameters (\n[Go+ CI/Test]   |     1:  5: . . . . \"(\"\n[Go+ CI/Test]   |     1:  6: . . . . \")\"\n[Go+ CI/Test]   |     1:  8: . . . )\n[Go+ CI/Test]   |     1:  8: . . . Body (\n[Go+ CI/Test]   |     1:  8: . . . . \"{\"\n[Go+ CI/Test]   |     2:  1: . . . . StatementList (\n[Go+ CI/Test]   |     2:  1: . . . . )\n[Go+ CI/Test]   |     2:  1: . . . . \"}\"\n[Go+ CI/Test]   |     2:  2: . . . )\n[Go+ CI/Test]   |     2:  2: . . . CallOrConversion (\n[Go+ CI/Test]   |     2:  2: . . . . \"(\"\n[Go+ CI/Test]   |     2:  3: . . . . \")\"\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1878: ast.CallExpr{Fun: &{0xc000451120 0xc00047e870}, Ellipsis: false, isCmd: false}\n[Go+ CI/Test]   |     2:  4: . . . )\n[Go+ CI/Test]   |     2:  4: . . . \";\"\n[Go+ CI/Test]   |     2:  5: . . )\n[Go+ CI/Test]   |     2:  5: . . StatementList (\n[Go+ CI/Test]   |     2:  5: . . )\n[Go+ CI/Test]   |     2:  5: . )\n[Go+ CI/Test]   |     2:  5: )\n[Go+ CI/Test]   | === RUN   TestFromTestdata/funcdecl3\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parserdir_test.go:90: Parsing /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/_testdata/funcdecl3\n[Go+ CI/Test]   |     1:  1: File (\n[Go+ CI/Test]   |     1:  1: . Declaration (\n[Go+ CI/Test]   |     1:  1: . . FunctionDecl (\n[Go+ CI/Test]   |     1:  1: . . . \"func\"\n[Go+ CI/Test]   |     1:  5: . . . Parameters (\n[Go+ CI/Test]   |     1:  5: . . . . \"(\"\n[Go+ CI/Test]   |     1:  6: . . . . \")\"\n[Go+ CI/Test]   |     1:  8: . . . )\n[Go+ CI/Test]   |     1:  8: . . . TypeName (\n[Go+ CI/Test]   |     1:  8: . . . . IDENT int\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: int}\n[Go+ CI/Test]   |     1: 12: . . . )\n[Go+ CI/Test]   |     1: 12: . . . Body (\n[Go+ CI/Test]   |     1: 12: . . . . \"{\"\n[Go+ CI/Test]   |     2:  2: . . . . StatementList (\n[Go+ CI/Test]   |     2:  2: . . . . . Statement (\n[Go+ CI/Test]   |     2:  2: . . . . . . ReturnStmt (\n[Go+ CI/Test]   |     2:  2: . . . . . . . \"return\"\n[Go+ CI/Test]   |     2:  9: . . . . . . . ExpressionList (\n[Go+ CI/Test]   |     2:  9: . . . . . . . . Expression (\n[Go+ CI/Test]   |     2:  9: . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     2:  9: . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     2:  9: . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     2:  9: . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: INT, Value: 1}\n[Go+ CI/Test]   |     2:  9: . . . . . . . . . . . . . INT 1\n[Go+ CI/Test]   |     2: 10: . . . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 10: . . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 10: . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 10: . . . . . . . . . )\n[Go+ CI/Test]   |     2: 10: . . . . . . . . )\n[Go+ CI/Test]   |     2: 10: . . . . . . . )\n[Go+ CI/Test]   |     2: 10: . . . . . . . \";\"\n[Go+ CI/Test]   |     3:  1: . . . . . . )\n[Go+ CI/Test]   |     3:  1: . . . . . )\n[Go+ CI/Test]   |     3:  1: . . . . )\n[Go+ CI/Test]   |     3:  1: . . . . \"}\"\n[Go+ CI/Test]   |     3:  2: . . . )\n[Go+ CI/Test]   |     3:  2: . . . CallOrConversion (\n[Go+ CI/Test]   |     3:  2: . . . . \"(\"\n[Go+ CI/Test]   |     3:  3: . . . . \")\"\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1878: ast.CallExpr{Fun: &{0xc000451280 0xc00047ebd0}, Ellipsis: false, isCmd: false}\n[Go+ CI/Test]   |     3:  4: . . . )\n[Go+ CI/Test]   |     3:  4: . . . \";\"\n[Go+ CI/Test]   |     3:  5: . . )\n[Go+ CI/Test]   |     3:  5: . . StatementList (\n[Go+ CI/Test]   |     3:  5: . . )\n[Go+ CI/Test]   |     3:  5: . )\n[Go+ CI/Test]   |     3:  5: )\n[Go+ CI/Test]   | === RUN   TestFromTestdata/funcdoc\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parserdir_test.go:90: Parsing /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/_testdata/funcdoc\n[Go+ CI/Test]   |     1:  1: File (\n[Go+ CI/Test]   |     1:  1: . \"package\"\n[Go+ CI/Test]   |     1:  9: . IDENT foo\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: foo}\n[Go+ CI/Test]   |     1: 12: . \";\"\n[Go+ CI/Test]   |     3:  1: . COMMENT\n[Go+ CI/Test]   |     4:  1: . COMMENT\n[Go+ CI/Test]   |     5:  1: . Declaration (\n[Go+ CI/Test]   |     5:  1: . . FunctionDecl (\n[Go+ CI/Test]   |     5:  1: . . . \"func\"\n[Go+ CI/Test]   |     5:  6: . . . IDENT test\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: test}\n[Go+ CI/Test]   |     5: 10: . . . Signature (\n[Go+ CI/Test]   |     5: 10: . . . . Parameters (\n[Go+ CI/Test]   |     5: 10: . . . . . \"(\"\n[Go+ CI/Test]   |     5: 11: . . . . . ParameterList (\n[Go+ CI/Test]   |     5: 11: . . . . . . ParamDeclOrNil (\n[Go+ CI/Test]   |     5: 11: . . . . . . . IDENT s\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: s}\n[Go+ CI/Test]   |     5: 13: . . . . . . . Type (\n[Go+ CI/Test]   |     5: 13: . . . . . . . . TypeName (\n[Go+ CI/Test]   |     5: 13: . . . . . . . . . IDENT string\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: string}\n[Go+ CI/Test]   |     5: 19: . . . . . . . . )\n[Go+ CI/Test]   |     5: 19: . . . . . . . )\n[Go+ CI/Test]   |     5: 19: . . . . . . )\n[Go+ CI/Test]   |     5: 19: . . . . . . \",\"\n[Go+ CI/Test]   |     5: 21: . . . . . . ParamDeclOrNil (\n[Go+ CI/Test]   |     5: 21: . . . . . . . IDENT p\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: p}\n[Go+ CI/Test]   |     5: 22: . . . . . . )\n[Go+ CI/Test]   |     5: 22: . . . . . . \",\"\n[Go+ CI/Test]   |     5: 24: . . . . . . ParamDeclOrNil (\n[Go+ CI/Test]   |     5: 24: . . . . . . . IDENT q\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: q}\n[Go+ CI/Test]   |     5: 26: . . . . . . . Type (\n[Go+ CI/Test]   |     5: 26: . . . . . . . . TypeName (\n[Go+ CI/Test]   |     5: 26: . . . . . . . . . IDENT uintptr\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: uintptr}\n[Go+ CI/Test]   |     5: 33: . . . . . . . . )\n[Go+ CI/Test]   |     5: 33: . . . . . . . )\n[Go+ CI/Test]   |     5: 33: . . . . . . )\n[Go+ CI/Test]   |     5: 33: . . . . . . \",\"\n[Go+ CI/Test]   |     5: 35: . . . . . . ParamDeclOrNil (\n[Go+ CI/Test]   |     5: 35: . . . . . . . IDENT rest\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: rest}\n[Go+ CI/Test]   |     5: 40: . . . . . . . DotsType (\n[Go+ CI/Test]   |     5: 40: . . . . . . . . \"...\"\n[Go+ CI/Test]   |     5: 43: . . . . . . . . Type (\n[Go+ CI/Test]   |     5: 43: . . . . . . . . . TypeName (\n[Go+ CI/Test]   |     5: 43: . . . . . . . . . . IDENT uintptr\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: uintptr}\n[Go+ CI/Test]   |     5: 50: . . . . . . . . . )\n[Go+ CI/Test]   |     5: 50: . . . . . . . . )\n[Go+ CI/Test]   |     5: 50: . . . . . . . )\n[Go+ CI/Test]   |     5: 50: . . . . . . )\n[Go+ CI/Test]   |     5: 50: . . . . . )\n[Go+ CI/Test]   |     5: 50: . . . . . \")\"\n[Go+ CI/Test]   |     5: 52: . . . . )\n[Go+ CI/Test]   |     5: 52: . . . . Result (\n[Go+ CI/Test]   |     5: 52: . . . . . TypeName (\n[Go+ CI/Test]   |     5: 52: . . . . . . IDENT int\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: int}\n[Go+ CI/Test]   |     5: 56: . . . . . )\n[Go+ CI/Test]   |     5: 56: . . . . )\n[Go+ CI/Test]   |     5: 56: . . . )\n[Go+ CI/Test]   |     5: 56: . . . Body (\n[Go+ CI/Test]   |     5: 56: . . . . \"{\"\n[Go+ CI/Test]   |     6:  1: . . . . StatementList (\n[Go+ CI/Test]   |     6:  1: . . . . )\n[Go+ CI/Test]   |     6:  1: . . . . \"}\"\n[Go+ CI/Test]   |     6:  2: . . . )\n[Go+ CI/Test]   |     6:  2: . . . \";\"\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:3564: ast.FuncDecl{Name: test, ...}\n[Go+ CI/Test]   |     6:  3: . . )\n[Go+ CI/Test]   |     6:  3: . )\n[Go+ CI/Test]   |     6:  3: )\n[Go+ CI/Test]   | === RUN   TestFromTestdata/funclit\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parserdir_test.go:90: Parsing /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/_testdata/funclit\n[Go+ CI/Test]   |     1:  1: File (\n[Go+ CI/Test]   |     1:  1: . Declaration (\n[Go+ CI/Test]   |     1:  1: . . FunctionDecl (\n[Go+ CI/Test]   |     1:  1: . . . \"func\"\n[Go+ CI/Test]   |     1:  5: . . . Parameters (\n[Go+ CI/Test]   |     1:  5: . . . . \"(\"\n[Go+ CI/Test]   |     1:  6: . . . . ParameterList (\n[Go+ CI/Test]   |     1:  6: . . . . . ParamDeclOrNil (\n[Go+ CI/Test]   |     1:  6: . . . . . . IDENT x\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: x}\n[Go+ CI/Test]   |     1:  7: . . . . . )\n[Go+ CI/Test]   |     1:  7: . . . . . \",\"\n[Go+ CI/Test]   |     1:  9: . . . . . ParamDeclOrNil (\n[Go+ CI/Test]   |     1:  9: . . . . . . IDENT y\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: y}\n[Go+ CI/Test]   |     1: 11: . . . . . . Type (\n[Go+ CI/Test]   |     1: 11: . . . . . . . TypeName (\n[Go+ CI/Test]   |     1: 11: . . . . . . . . IDENT int\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: int}\n[Go+ CI/Test]   |     1: 14: . . . . . . . )\n[Go+ CI/Test]   |     1: 14: . . . . . . )\n[Go+ CI/Test]   |     1: 14: . . . . . )\n[Go+ CI/Test]   |     1: 14: . . . . )\n[Go+ CI/Test]   |     1: 14: . . . . \")\"\n[Go+ CI/Test]   |     1: 16: . . . )\n[Go+ CI/Test]   |     1: 16: . . . \"*\"\n[Go+ CI/Test]   |     1: 16: . . . PointerType (\n[Go+ CI/Test]   |     1: 17: . . . . Type (\n[Go+ CI/Test]   |     1: 17: . . . . . TypeName (\n[Go+ CI/Test]   |     1: 17: . . . . . . IDENT int\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: int}\n[Go+ CI/Test]   |     1: 21: . . . . . )\n[Go+ CI/Test]   |     1: 21: . . . . )\n[Go+ CI/Test]   |     1: 21: . . . )\n[Go+ CI/Test]   |     1: 21: . . . Body (\n[Go+ CI/Test]   |     1: 21: . . . . \"{\"\n[Go+ CI/Test]   |     2:  2: . . . . StatementList (\n[Go+ CI/Test]   |     2:  2: . . . . . Statement (\n[Go+ CI/Test]   |     2:  2: . . . . . . ReturnStmt (\n[Go+ CI/Test]   |     2:  2: . . . . . . . \"return\"\n[Go+ CI/Test]   |     2:  9: . . . . . . . ExpressionList (\n[Go+ CI/Test]   |     2:  9: . . . . . . . . Expression (\n[Go+ CI/Test]   |     2:  9: . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     2:  9: . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     2:  9: . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     2:  9: . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |     2:  9: . . . . . . . . . . . . . IDENT nil\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: nil}\n[Go+ CI/Test]   |     2: 12: . . . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 12: . . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 12: . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 12: . . . . . . . . . )\n[Go+ CI/Test]   |     2: 12: . . . . . . . . )\n[Go+ CI/Test]   |     2: 12: . . . . . . . )\n[Go+ CI/Test]   |     2: 12: . . . . . . . \";\"\n[Go+ CI/Test]   |     3:  1: . . . . . . )\n[Go+ CI/Test]   |     3:  1: . . . . . )\n[Go+ CI/Test]   |     3:  1: . . . . )\n[Go+ CI/Test]   |     3:  1: . . . . \"}\"\n[Go+ CI/Test]   |     3:  2: . . . )\n[Go+ CI/Test]   |     3:  2: . . . CallOrConversion (\n[Go+ CI/Test]   |     3:  2: . . . . \"(\"\n[Go+ CI/Test]   |     3:  3: . . . . Expression (\n[Go+ CI/Test]   |     3:  3: . . . . . BinaryExpr (\n[Go+ CI/Test]   |     3:  3: . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     3:  3: . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     3:  3: . . . . . . . . Operand (\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: INT, Value: 100}\n[Go+ CI/Test]   |     3:  3: . . . . . . . . . INT 100\n[Go+ CI/Test]   |     3:  6: . . . . . . . . )\n[Go+ CI/Test]   |     3:  6: . . . . . . . )\n[Go+ CI/Test]   |     3:  6: . . . . . . )\n[Go+ CI/Test]   |     3:  6: . . . . . )\n[Go+ CI/Test]   |     3:  6: . . . . )\n[Go+ CI/Test]   |     3:  6: . . . . \",\"\n[Go+ CI/Test]   |     3:  8: . . . . Expression (\n[Go+ CI/Test]   |     3:  8: . . . . . BinaryExpr (\n[Go+ CI/Test]   |     3:  8: . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     3:  8: . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     3:  8: . . . . . . . . Operand (\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: INT, Value: 200}\n[Go+ CI/Test]   |     3:  8: . . . . . . . . . INT 200\n[Go+ CI/Test]   |     3: 11: . . . . . . . . )\n[Go+ CI/Test]   |     3: 11: . . . . . . . )\n[Go+ CI/Test]   |     3: 11: . . . . . . )\n[Go+ CI/Test]   |     3: 11: . . . . . )\n[Go+ CI/Test]   |     3: 11: . . . . )\n[Go+ CI/Test]   |     3: 11: . . . . \")\"\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1878: ast.CallExpr{Fun: &{0xc000451680 0xc00047f230}, Ellipsis: false, isCmd: false}\n[Go+ CI/Test]   |     3: 12: . . . )\n[Go+ CI/Test]   |     3: 12: . . . \";\"\n[Go+ CI/Test]   |     5:  1: . . )\n[Go+ CI/Test]   |     5:  1: . . StatementList (\n[Go+ CI/Test]   |     5:  1: . . . Statement (\n[Go+ CI/Test]   |     5:  1: . . . . SimpleStmt (\n[Go+ CI/Test]   |     5:  1: . . . . . ExpressionList (\n[Go+ CI/Test]   |     5:  1: . . . . . . Expression (\n[Go+ CI/Test]   |     5:  1: . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     5:  1: . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     5:  1: . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     5:  1: . . . . . . . . . . Operand (\n[Go+ CI/Test]   |     5:  1: . . . . . . . . . . . IDENT println\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: println}\n[Go+ CI/Test]   |     5:  9: . . . . . . . . . . )\n[Go+ CI/Test]   |     5:  9: . . . . . . . . . . CallOrConversion (\n[Go+ CI/Test]   |     5:  9: . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |     5:  9: . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     5:  9: . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     5:  9: . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     5:  9: . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: STRING, Value: \"hello\"}\n[Go+ CI/Test]   |     5:  9: . . . . . . . . . . . . . . . . STRING \"hello\"\n[Go+ CI/Test]   |     5: 16: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     5: 16: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     5: 16: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     5: 16: . . . . . . . . . . . . )\n[Go+ CI/Test]   |     5: 16: . . . . . . . . . . . )\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1878: ast.CallExpr{Fun: println, Ellipsis: false, isCmd: true}\n[Go+ CI/Test]   |     5: 16: . . . . . . . . . . )\n[Go+ CI/Test]   |     5: 16: . . . . . . . . . )\n[Go+ CI/Test]   |     5: 16: . . . . . . . . )\n[Go+ CI/Test]   |     5: 16: . . . . . . . )\n[Go+ CI/Test]   |     5: 16: . . . . . . )\n[Go+ CI/Test]   |     5: 16: . . . . . )\n[Go+ CI/Test]   |     5: 16: . . . . )\n[Go+ CI/Test]   |     5: 16: . . . . \";\"\n[Go+ CI/Test]   |     5: 17: . . . )\n[Go+ CI/Test]   |     5: 17: . . )\n[Go+ CI/Test]   |     5: 17: . )\n[Go+ CI/Test]   |     5: 17: )\n[Go+ CI/Test]   | === RUN   TestFromTestdata/functype\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parserdir_test.go:90: Parsing /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/_testdata/functype\n[Go+ CI/Test]   |     1:  1: COMMENT\n[Go+ CI/Test]   |    17:  1: File (\n[Go+ CI/Test]   |    17:  1: . Declaration (\n[Go+ CI/Test]   |    17:  1: . . GenDecl(type) (\n[Go+ CI/Test]   |    17:  1: . . . \"type\"\n[Go+ CI/Test]   |    17:  6: . . . TypeSpec (\n[Go+ CI/Test]   |    17:  6: . . . . IDENT T\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: T}\n[Go+ CI/Test]   |    17:  8: . . . . Type (\n[Go+ CI/Test]   |    17:  8: . . . . . StructType (\n[Go+ CI/Test]   |    17:  8: . . . . . . \"struct\"\n[Go+ CI/Test]   |    17: 15: . . . . . . \"{\"\n[Go+ CI/Test]   |    18:  2: . . . . . . FieldDecl (\n[Go+ CI/Test]   |    18:  2: . . . . . . . \"*\"\n[Go+ CI/Test]   |    18:  3: . . . . . . . QualifiedIdent (\n[Go+ CI/Test]   |    18:  3: . . . . . . . . TypeName (\n[Go+ CI/Test]   |    18:  3: . . . . . . . . . IDENT T\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: T}\n[Go+ CI/Test]   |    18:  4: . . . . . . . . )\n[Go+ CI/Test]   |    18:  4: . . . . . . . )\n[Go+ CI/Test]   |    18:  4: . . . . . . . \";\"\n[Go+ CI/Test]   |    19:  2: . . . . . . )\n[Go+ CI/Test]   |    19:  2: . . . . . . FieldDecl (\n[Go+ CI/Test]   |    19:  2: . . . . . . . IDENT A\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: A}\n[Go+ CI/Test]   |    19:  4: . . . . . . . Type (\n[Go+ CI/Test]   |    19:  4: . . . . . . . . TypeName (\n[Go+ CI/Test]   |    19:  4: . . . . . . . . . IDENT int\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: int}\n[Go+ CI/Test]   |    19:  8: . . . . . . . . )\n[Go+ CI/Test]   |    19:  8: . . . . . . . )\n[Go+ CI/Test]   |    19:  8: . . . . . . . STRING `json:\"a\"`\n[Go+ CI/Test]   |    19: 18: . . . . . . . \";\"\n[Go+ CI/Test]   |    20:  1: . . . . . . )\n[Go+ CI/Test]   |    20:  1: . . . . . . \"}\"\n[Go+ CI/Test]   |    20:  2: . . . . . )\n[Go+ CI/Test]   |    20:  2: . . . . )\n[Go+ CI/Test]   |    20:  2: . . . . \";\"\n[Go+ CI/Test]   |    22:  1: . . . )\n[Go+ CI/Test]   |    22:  1: . . )\n[Go+ CI/Test]   |    22:  1: . )\n[Go+ CI/Test]   |    22:  1: . Declaration (\n[Go+ CI/Test]   |    22:  1: . . FunctionDecl (\n[Go+ CI/Test]   |    22:  1: . . . \"func\"\n[Go+ CI/Test]   |    22:  6: . . . IDENT bar\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: bar}\n[Go+ CI/Test]   |    22:  9: . . . Signature (\n[Go+ CI/Test]   |    22:  9: . . . . Parameters (\n[Go+ CI/Test]   |    22:  9: . . . . . \"(\"\n[Go+ CI/Test]   |    22: 10: . . . . . ParameterList (\n[Go+ CI/Test]   |    22: 10: . . . . . . ParamDeclOrNil (\n[Go+ CI/Test]   |    22: 10: . . . . . . . IDENT v\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: v}\n[Go+ CI/Test]   |    22: 12: . . . . . . . Type (\n[Go+ CI/Test]   |    22: 12: . . . . . . . . ChanType (\n[Go+ CI/Test]   |    22: 12: . . . . . . . . . \"chan\"\n[Go+ CI/Test]   |    22: 17: . . . . . . . . . Type (\n[Go+ CI/Test]   |    22: 17: . . . . . . . . . . TypeName (\n[Go+ CI/Test]   |    22: 17: . . . . . . . . . . . IDENT bool\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: bool}\n[Go+ CI/Test]   |    22: 21: . . . . . . . . . . )\n[Go+ CI/Test]   |    22: 21: . . . . . . . . . )\n[Go+ CI/Test]   |    22: 21: . . . . . . . . )\n[Go+ CI/Test]   |    22: 21: . . . . . . . )\n[Go+ CI/Test]   |    22: 21: . . . . . . )\n[Go+ CI/Test]   |    22: 21: . . . . . )\n[Go+ CI/Test]   |    22: 21: . . . . . \")\"\n[Go+ CI/Test]   |    22: 23: . . . . )\n[Go+ CI/Test]   |    22: 23: . . . . Result (\n[Go+ CI/Test]   |    22: 23: . . . . . Parameters (\n[Go+ CI/Test]   |    22: 23: . . . . . . \"(\"\n[Go+ CI/Test]   |    22: 24: . . . . . . ParameterList (\n[Go+ CI/Test]   |    22: 24: . . . . . . . ParamDeclOrNil (\n[Go+ CI/Test]   |    22: 24: . . . . . . . . IDENT int\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: int}\n[Go+ CI/Test]   |    22: 27: . . . . . . . )\n[Go+ CI/Test]   |    22: 27: . . . . . . . \",\"\n[Go+ CI/Test]   |    22: 29: . . . . . . . ParamDeclOrNil (\n[Go+ CI/Test]   |    22: 29: . . . . . . . . Type (\n[Go+ CI/Test]   |    22: 29: . . . . . . . . . ChanType (\n[Go+ CI/Test]   |    22: 29: . . . . . . . . . . \"<-\"\n[Go+ CI/Test]   |    22: 31: . . . . . . . . . . \"chan\"\n[Go+ CI/Test]   |    22: 36: . . . . . . . . . . Type (\n[Go+ CI/Test]   |    22: 36: . . . . . . . . . . . TypeName (\n[Go+ CI/Test]   |    22: 36: . . . . . . . . . . . . IDENT error\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: error}\n[Go+ CI/Test]   |    22: 41: . . . . . . . . . . . )\n[Go+ CI/Test]   |    22: 41: . . . . . . . . . . )\n[Go+ CI/Test]   |    22: 41: . . . . . . . . . )\n[Go+ CI/Test]   |    22: 41: . . . . . . . . )\n[Go+ CI/Test]   |    22: 41: . . . . . . . )\n[Go+ CI/Test]   |    22: 41: . . . . . . )\n[Go+ CI/Test]   |    22: 41: . . . . . . \")\"\n[Go+ CI/Test]   |    22: 43: . . . . . )\n[Go+ CI/Test]   |    22: 43: . . . . )\n[Go+ CI/Test]   |    22: 43: . . . )\n[Go+ CI/Test]   |    22: 43: . . . Body (\n[Go+ CI/Test]   |    22: 43: . . . . \"{\"\n[Go+ CI/Test]   |    23:  2: . . . . StatementList (\n[Go+ CI/Test]   |    23:  2: . . . . . Statement (\n[Go+ CI/Test]   |    23:  2: . . . . . . SimpleStmt (\n[Go+ CI/Test]   |    23:  2: . . . . . . . ExpressionList (\n[Go+ CI/Test]   |    23:  2: . . . . . . . . Expression (\n[Go+ CI/Test]   |    23:  2: . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    23:  2: . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    23:  2: . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    23:  2: . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |    23:  2: . . . . . . . . . . . . . IDENT v\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: v}\n[Go+ CI/Test]   |    23:  4: . . . . . . . . . . . . )\n[Go+ CI/Test]   |    23:  4: . . . . . . . . . . . . \"<-\"\n[Go+ CI/Test]   |    23:  4: . . . . . . . . . . . )\n[Go+ CI/Test]   |    23:  4: . . . . . . . . . . )\n[Go+ CI/Test]   |    23:  4: . . . . . . . . . )\n[Go+ CI/Test]   |    23:  4: . . . . . . . . )\n[Go+ CI/Test]   |    23:  4: . . . . . . . )\n[Go+ CI/Test]   |    23:  7: . . . . . . . Expression (\n[Go+ CI/Test]   |    23:  7: . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    23:  7: . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    23:  7: . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    23:  7: . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |    23:  7: . . . . . . . . . . . . IDENT true\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: true}\n[Go+ CI/Test]   |    23: 11: . . . . . . . . . . . )\n[Go+ CI/Test]   |    23: 11: . . . . . . . . . . )\n[Go+ CI/Test]   |    23: 11: . . . . . . . . . )\n[Go+ CI/Test]   |    23: 11: . . . . . . . . )\n[Go+ CI/Test]   |    23: 11: . . . . . . . )\n[Go+ CI/Test]   |    23: 11: . . . . . . )\n[Go+ CI/Test]   |    23: 11: . . . . . . \";\"\n[Go+ CI/Test]   |    24:  2: . . . . . )\n[Go+ CI/Test]   |    24:  2: . . . . . Statement (\n[Go+ CI/Test]   |    24:  2: . . . . . . SimpleStmt (\n[Go+ CI/Test]   |    24:  2: . . . . . . . ExpressionList (\n[Go+ CI/Test]   |    24:  2: . . . . . . . . Expression (\n[Go+ CI/Test]   |    24:  2: . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    24:  2: . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    24:  2: . . . . . . . . . . . \"<-\"\n[Go+ CI/Test]   |    24:  4: . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    24:  4: . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    24:  4: . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |    24:  4: . . . . . . . . . . . . . . IDENT v\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: v}\n[Go+ CI/Test]   |    24:  5: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    24:  5: . . . . . . . . . . . . )\n[Go+ CI/Test]   |    24:  5: . . . . . . . . . . . )\n[Go+ CI/Test]   |    24:  5: . . . . . . . . . . )\n[Go+ CI/Test]   |    24:  5: . . . . . . . . . )\n[Go+ CI/Test]   |    24:  5: . . . . . . . . )\n[Go+ CI/Test]   |    24:  5: . . . . . . . )\n[Go+ CI/Test]   |    24:  5: . . . . . . )\n[Go+ CI/Test]   |    24:  5: . . . . . . \";\"\n[Go+ CI/Test]   |    25:  2: . . . . . )\n[Go+ CI/Test]   |    25:  2: . . . . . Statement (\n[Go+ CI/Test]   |    25:  2: . . . . . . ReturnStmt (\n[Go+ CI/Test]   |    25:  2: . . . . . . . \"return\"\n[Go+ CI/Test]   |    25:  9: . . . . . . . ExpressionList (\n[Go+ CI/Test]   |    25:  9: . . . . . . . . Expression (\n[Go+ CI/Test]   |    25:  9: . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    25:  9: . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    25:  9: . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    25:  9: . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: INT, Value: 0}\n[Go+ CI/Test]   |    25:  9: . . . . . . . . . . . . . INT 0\n[Go+ CI/Test]   |    25: 10: . . . . . . . . . . . . )\n[Go+ CI/Test]   |    25: 10: . . . . . . . . . . . )\n[Go+ CI/Test]   |    25: 10: . . . . . . . . . . )\n[Go+ CI/Test]   |    25: 10: . . . . . . . . . )\n[Go+ CI/Test]   |    25: 10: . . . . . . . . )\n[Go+ CI/Test]   |    25: 10: . . . . . . . . \",\"\n[Go+ CI/Test]   |    25: 12: . . . . . . . . Expression (\n[Go+ CI/Test]   |    25: 12: . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    25: 12: . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    25: 12: . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    25: 12: . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |    25: 12: . . . . . . . . . . . . . \"(\"\n[Go+ CI/Test]   |    25: 13: . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |    25: 13: . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    25: 13: . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    25: 13: . . . . . . . . . . . . . . . . \"<-\"\n[Go+ CI/Test]   |    25: 15: . . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    25: 15: . . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    25: 15: . . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |    25: 15: . . . . . . . . . . . . . . . . . . . ChanType (\n[Go+ CI/Test]   |    25: 15: . . . . . . . . . . . . . . . . . . . . \"chan\"\n[Go+ CI/Test]   |    25: 20: . . . . . . . . . . . . . . . . . . . . Type (\n[Go+ CI/Test]   |    25: 20: . . . . . . . . . . . . . . . . . . . . . TypeName (\n[Go+ CI/Test]   |    25: 20: . . . . . . . . . . . . . . . . . . . . . . IDENT error\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: error}\n[Go+ CI/Test]   |    25: 25: . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    25: 25: . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    25: 25: . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    25: 25: . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    25: 25: . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    25: 25: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    25: 25: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    25: 25: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    25: 25: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    25: 25: . . . . . . . . . . . . . \")\"\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1644: ast.ParenExpr{X: &{756 756 2 error}}\n[Go+ CI/Test]   |    25: 26: . . . . . . . . . . . . )\n[Go+ CI/Test]   |    25: 26: . . . . . . . . . . . . CallOrConversion (\n[Go+ CI/Test]   |    25: 26: . . . . . . . . . . . . . \"(\"\n[Go+ CI/Test]   |    25: 27: . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |    25: 27: . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    25: 27: . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    25: 27: . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    25: 27: . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |    25: 27: . . . . . . . . . . . . . . . . . . IDENT nil\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: nil}\n[Go+ CI/Test]   |    25: 30: . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    25: 30: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    25: 30: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    25: 30: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    25: 30: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    25: 30: . . . . . . . . . . . . . \")\"\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1878: ast.CallExpr{Fun: &{755 0xc00047f680 768}, Ellipsis: false, isCmd: false}\n[Go+ CI/Test]   |    25: 31: . . . . . . . . . . . . )\n[Go+ CI/Test]   |    25: 31: . . . . . . . . . . . )\n[Go+ CI/Test]   |    25: 31: . . . . . . . . . . )\n[Go+ CI/Test]   |    25: 31: . . . . . . . . . )\n[Go+ CI/Test]   |    25: 31: . . . . . . . . )\n[Go+ CI/Test]   |    25: 31: . . . . . . . )\n[Go+ CI/Test]   |    25: 31: . . . . . . . \";\"\n[Go+ CI/Test]   |    26:  1: . . . . . . )\n[Go+ CI/Test]   |    26:  1: . . . . . )\n[Go+ CI/Test]   |    26:  1: . . . . )\n[Go+ CI/Test]   |    26:  1: . . . . \"}\"\n[Go+ CI/Test]   |    26:  2: . . . )\n[Go+ CI/Test]   |    26:  2: . . . \";\"\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:3564: ast.FuncDecl{Name: bar, ...}\n[Go+ CI/Test]   |    28:  1: . . )\n[Go+ CI/Test]   |    28:  1: . )\n[Go+ CI/Test]   |    28:  1: . Declaration (\n[Go+ CI/Test]   |    28:  1: . . FunctionDecl (\n[Go+ CI/Test]   |    28:  1: . . . \"func\"\n[Go+ CI/Test]   |    28:  6: . . . IDENT foo\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: foo}\n[Go+ CI/Test]   |    28:  9: . . . Signature (\n[Go+ CI/Test]   |    28:  9: . . . . Parameters (\n[Go+ CI/Test]   |    28:  9: . . . . . \"(\"\n[Go+ CI/Test]   |    28: 10: . . . . . ParameterList (\n[Go+ CI/Test]   |    28: 10: . . . . . . ParamDeclOrNil (\n[Go+ CI/Test]   |    28: 10: . . . . . . . IDENT f\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: f}\n[Go+ CI/Test]   |    28: 12: . . . . . . . Type (\n[Go+ CI/Test]   |    28: 12: . . . . . . . . FuncType (\n[Go+ CI/Test]   |    28: 12: . . . . . . . . . \"func\"\n[Go+ CI/Test]   |    28: 16: . . . . . . . . . Signature (\n[Go+ CI/Test]   |    28: 16: . . . . . . . . . . Parameters (\n[Go+ CI/Test]   |    28: 16: . . . . . . . . . . . \"(\"\n[Go+ CI/Test]   |    28: 17: . . . . . . . . . . . ParameterList (\n[Go+ CI/Test]   |    28: 17: . . . . . . . . . . . . ParamDeclOrNil (\n[Go+ CI/Test]   |    28: 17: . . . . . . . . . . . . . Type (\n[Go+ CI/Test]   |    28: 17: . . . . . . . . . . . . . . ArrayType (\n[Go+ CI/Test]   |    28: 17: . . . . . . . . . . . . . . . \"[\"\n[Go+ CI/Test]   |    28: 18: . . . . . . . . . . . . . . . \"]\"\n[Go+ CI/Test]   |    28: 19: . . . . . . . . . . . . . . . Type (\n[Go+ CI/Test]   |    28: 19: . . . . . . . . . . . . . . . . TypeName (\n[Go+ CI/Test]   |    28: 19: . . . . . . . . . . . . . . . . . IDENT byte\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: byte}\n[Go+ CI/Test]   |    28: 23: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    28: 23: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:870: ast.ArrayType{Len: <nil>, Elt: byte}\n[Go+ CI/Test]   |    28: 23: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    28: 23: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    28: 23: . . . . . . . . . . . . )\n[Go+ CI/Test]   |    28: 23: . . . . . . . . . . . . \",\"\n[Go+ CI/Test]   |    28: 25: . . . . . . . . . . . . ParamDeclOrNil (\n[Go+ CI/Test]   |    28: 25: . . . . . . . . . . . . . Type (\n[Go+ CI/Test]   |    28: 25: . . . . . . . . . . . . . . PointerType (\n[Go+ CI/Test]   |    28: 25: . . . . . . . . . . . . . . . \"*\"\n[Go+ CI/Test]   |    28: 26: . . . . . . . . . . . . . . . Type (\n[Go+ CI/Test]   |    28: 26: . . . . . . . . . . . . . . . . TypeName (\n[Go+ CI/Test]   |    28: 26: . . . . . . . . . . . . . . . . . IDENT string\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: string}\n[Go+ CI/Test]   |    28: 32: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    28: 32: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    28: 32: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    28: 32: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    28: 32: . . . . . . . . . . . . )\n[Go+ CI/Test]   |    28: 32: . . . . . . . . . . . . \",\"\n[Go+ CI/Test]   |    28: 34: . . . . . . . . . . . . ParamDeclOrNil (\n[Go+ CI/Test]   |    28: 34: . . . . . . . . . . . . . DotsType (\n[Go+ CI/Test]   |    28: 34: . . . . . . . . . . . . . . \"...\"\n[Go+ CI/Test]   |    28: 37: . . . . . . . . . . . . . . Type (\n[Go+ CI/Test]   |    28: 37: . . . . . . . . . . . . . . . TypeName (\n[Go+ CI/Test]   |    28: 37: . . . . . . . . . . . . . . . . IDENT T\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: T}\n[Go+ CI/Test]   |    28: 38: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    28: 38: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    28: 38: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    28: 38: . . . . . . . . . . . . )\n[Go+ CI/Test]   |    28: 38: . . . . . . . . . . . )\n[Go+ CI/Test]   |    28: 38: . . . . . . . . . . . \")\"\n[Go+ CI/Test]   |    28: 40: . . . . . . . . . . )\n[Go+ CI/Test]   |    28: 40: . . . . . . . . . . Result (\n[Go+ CI/Test]   |    28: 40: . . . . . . . . . . . ChanType (\n[Go+ CI/Test]   |    28: 40: . . . . . . . . . . . . \"chan\"\n[Go+ CI/Test]   |    28: 44: . . . . . . . . . . . . \"<-\"\n[Go+ CI/Test]   |    28: 47: . . . . . . . . . . . . Type (\n[Go+ CI/Test]   |    28: 47: . . . . . . . . . . . . . TypeName (\n[Go+ CI/Test]   |    28: 47: . . . . . . . . . . . . . . IDENT int\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: int}\n[Go+ CI/Test]   |    28: 50: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    28: 50: . . . . . . . . . . . . )\n[Go+ CI/Test]   |    28: 50: . . . . . . . . . . . )\n[Go+ CI/Test]   |    28: 50: . . . . . . . . . . )\n[Go+ CI/Test]   |    28: 50: . . . . . . . . . )\n[Go+ CI/Test]   |    28: 50: . . . . . . . . )\n[Go+ CI/Test]   |    28: 50: . . . . . . . )\n[Go+ CI/Test]   |    28: 50: . . . . . . )\n[Go+ CI/Test]   |    28: 50: . . . . . )\n[Go+ CI/Test]   |    28: 50: . . . . . \")\"\n[Go+ CI/Test]   |    28: 52: . . . . )\n[Go+ CI/Test]   |    28: 52: . . . . Result (\n[Go+ CI/Test]   |    28: 52: . . . . . Parameters (\n[Go+ CI/Test]   |    28: 52: . . . . . . \"(\"\n[Go+ CI/Test]   |    28: 53: . . . . . . ParameterList (\n[Go+ CI/Test]   |    28: 53: . . . . . . . ParamDeclOrNil (\n[Go+ CI/Test]   |    28: 53: . . . . . . . . IDENT v\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: v}\n[Go+ CI/Test]   |    28: 55: . . . . . . . . Type (\n[Go+ CI/Test]   |    28: 55: . . . . . . . . . TypeName (\n[Go+ CI/Test]   |    28: 55: . . . . . . . . . . IDENT int\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: int}\n[Go+ CI/Test]   |    28: 58: . . . . . . . . . )\n[Go+ CI/Test]   |    28: 58: . . . . . . . . )\n[Go+ CI/Test]   |    28: 58: . . . . . . . )\n[Go+ CI/Test]   |    28: 58: . . . . . . . \",\"\n[Go+ CI/Test]   |    28: 60: . . . . . . . ParamDeclOrNil (\n[Go+ CI/Test]   |    28: 60: . . . . . . . . IDENT err\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: err}\n[Go+ CI/Test]   |    28: 64: . . . . . . . . Type (\n[Go+ CI/Test]   |    28: 64: . . . . . . . . . TypeName (\n[Go+ CI/Test]   |    28: 64: . . . . . . . . . . IDENT error\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: error}\n[Go+ CI/Test]   |    28: 69: . . . . . . . . . )\n[Go+ CI/Test]   |    28: 69: . . . . . . . . )\n[Go+ CI/Test]   |    28: 69: . . . . . . . )\n[Go+ CI/Test]   |    28: 69: . . . . . . )\n[Go+ CI/Test]   |    28: 69: . . . . . . \")\"\n[Go+ CI/Test]   |    28: 71: . . . . . )\n[Go+ CI/Test]   |    28: 71: . . . . )\n[Go+ CI/Test]   |    28: 71: . . . )\n[Go+ CI/Test]   |    28: 71: . . . Body (\n[Go+ CI/Test]   |    28: 71: . . . . \"{\"\n[Go+ CI/Test]   |    29:  2: . . . . StatementList (\n[Go+ CI/Test]   |    29:  2: . . . . . Statement (\n[Go+ CI/Test]   |    29:  2: . . . . . . ReturnStmt (\n[Go+ CI/Test]   |    29:  2: . . . . . . . \"return\"\n[Go+ CI/Test]   |    29:  8: . . . . . . . \";\"\n[Go+ CI/Test]   |    30:  1: . . . . . . )\n[Go+ CI/Test]   |    30:  1: . . . . . )\n[Go+ CI/Test]   |    30:  1: . . . . )\n[Go+ CI/Test]   |    30:  1: . . . . \"}\"\n[Go+ CI/Test]   |    30:  2: . . . )\n[Go+ CI/Test]   |    30:  2: . . . \";\"\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:3564: ast.FuncDecl{Name: foo, ...}\n[Go+ CI/Test]   |    30:  3: . . )\n[Go+ CI/Test]   |    30:  3: . )\n[Go+ CI/Test]   |    30:  3: )\n[Go+ CI/Test]   | === RUN   TestFromTestdata/gmxtest\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parserdir_test.go:90: Parsing /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/_testdata/gmxtest\n[Go+ CI/Test]   |     1:  1: File (\n[Go+ CI/Test]   |     1:  1: . Declaration (\n[Go+ CI/Test]   |     1:  1: . . StatementList (\n[Go+ CI/Test]   |     1:  1: . . . Statement (\n[Go+ CI/Test]   |     1:  1: . . . . SimpleStmt (\n[Go+ CI/Test]   |     1:  1: . . . . . ExpressionList (\n[Go+ CI/Test]   |     1:  1: . . . . . . Expression (\n[Go+ CI/Test]   |     1:  1: . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     1:  1: . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     1:  1: . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     1:  1: . . . . . . . . . . Operand (\n[Go+ CI/Test]   |     1:  1: . . . . . . . . . . . IDENT a\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: a}\n[Go+ CI/Test]   |     1:  3: . . . . . . . . . . )\n[Go+ CI/Test]   |     1:  3: . . . . . . . . . )\n[Go+ CI/Test]   |     1:  3: . . . . . . . . )\n[Go+ CI/Test]   |     1:  3: . . . . . . . )\n[Go+ CI/Test]   |     1:  3: . . . . . . )\n[Go+ CI/Test]   |     1:  3: . . . . . )\n[Go+ CI/Test]   |     1:  3: . . . . . \":=\"\n[Go+ CI/Test]   |     1:  6: . . . . . ExpressionList (\n[Go+ CI/Test]   |     1:  6: . . . . . . Expression (\n[Go+ CI/Test]   |     1:  6: . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     1:  6: . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     1:  6: . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     1:  6: . . . . . . . . . . Operand (\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: INT, Value: 1}\n[Go+ CI/Test]   |     1:  6: . . . . . . . . . . . INT 1\n[Go+ CI/Test]   |     1:  7: . . . . . . . . . . )\n[Go+ CI/Test]   |     1:  7: . . . . . . . . . )\n[Go+ CI/Test]   |     1:  7: . . . . . . . . )\n[Go+ CI/Test]   |     1:  7: . . . . . . . )\n[Go+ CI/Test]   |     1:  7: . . . . . . )\n[Go+ CI/Test]   |     1:  7: . . . . . )\n[Go+ CI/Test]   |     1:  7: . . . . )\n[Go+ CI/Test]   |     1:  7: . . . . \";\"\n[Go+ CI/Test]   |     1:  8: . . . )\n[Go+ CI/Test]   |     1:  8: . . )\n[Go+ CI/Test]   |     1:  8: . )\n[Go+ CI/Test]   |     1:  8: )\n[Go+ CI/Test]   | === RUN   TestFromTestdata/lambda1\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parserdir_test.go:90: Parsing /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/_testdata/lambda1\n[Go+ CI/Test]   |     1:  1: File (\n[Go+ CI/Test]   |     1:  1: . \"package\"\n[Go+ CI/Test]   |     1:  9: . IDENT main\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: main}\n[Go+ CI/Test]   |     1: 13: . \";\"\n[Go+ CI/Test]   |     3:  1: . Declaration (\n[Go+ CI/Test]   |     3:  1: . . FunctionDecl (\n[Go+ CI/Test]   |     3:  1: . . . \"func\"\n[Go+ CI/Test]   |     3:  6: . . . IDENT main\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: main}\n[Go+ CI/Test]   |     3: 10: . . . Signature (\n[Go+ CI/Test]   |     3: 10: . . . . Parameters (\n[Go+ CI/Test]   |     3: 10: . . . . . \"(\"\n[Go+ CI/Test]   |     3: 11: . . . . . \")\"\n[Go+ CI/Test]   |     3: 13: . . . . )\n[Go+ CI/Test]   |     3: 13: . . . . Result (\n[Go+ CI/Test]   |     3: 13: . . . . )\n[Go+ CI/Test]   |     3: 13: . . . )\n[Go+ CI/Test]   |     3: 13: . . . Body (\n[Go+ CI/Test]   |     3: 13: . . . . \"{\"\n[Go+ CI/Test]   |     4:  2: . . . . StatementList (\n[Go+ CI/Test]   |     4:  2: . . . . . Statement (\n[Go+ CI/Test]   |     4:  2: . . . . . . SimpleStmt (\n[Go+ CI/Test]   |     4:  2: . . . . . . . ExpressionList (\n[Go+ CI/Test]   |     4:  2: . . . . . . . . Expression (\n[Go+ CI/Test]   |     4:  2: . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     4:  2: . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     4:  2: . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     4:  2: . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |     4:  2: . . . . . . . . . . . . . IDENT foo\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: foo}\n[Go+ CI/Test]   |     4:  5: . . . . . . . . . . . . )\n[Go+ CI/Test]   |     4:  5: . . . . . . . . . . . . CallOrConversion (\n[Go+ CI/Test]   |     4:  5: . . . . . . . . . . . . . \"(\"\n[Go+ CI/Test]   |     4:  6: . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |     4:  6: . . . . . . . . . . . . . . \"=>\"\n[Go+ CI/Test]   |     4:  9: . . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |     4:  9: . . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     4:  9: . . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     4:  9: . . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     4:  9: . . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: STRING, Value: \"Hi\"}\n[Go+ CI/Test]   |     4:  9: . . . . . . . . . . . . . . . . . . . STRING \"Hi\"\n[Go+ CI/Test]   |     4: 13: . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     4: 13: . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     4: 13: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     4: 13: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     4: 13: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:2443: ast.LambdaExpr{Lhs: []}\n[Go+ CI/Test]   |     4: 13: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     4: 13: . . . . . . . . . . . . . \")\"\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1878: ast.CallExpr{Fun: foo, Ellipsis: false, isCmd: false}\n[Go+ CI/Test]   |     4: 14: . . . . . . . . . . . . )\n[Go+ CI/Test]   |     4: 14: . . . . . . . . . . . )\n[Go+ CI/Test]   |     4: 14: . . . . . . . . . . )\n[Go+ CI/Test]   |     4: 14: . . . . . . . . . )\n[Go+ CI/Test]   |     4: 14: . . . . . . . . )\n[Go+ CI/Test]   |     4: 14: . . . . . . . )\n[Go+ CI/Test]   |     4: 14: . . . . . . )\n[Go+ CI/Test]   |     4: 14: . . . . . . \";\"\n[Go+ CI/Test]   |     5:  2: . . . . . )\n[Go+ CI/Test]   |     5:  2: . . . . . Statement (\n[Go+ CI/Test]   |     5:  2: . . . . . . SimpleStmt (\n[Go+ CI/Test]   |     5:  2: . . . . . . . ExpressionList (\n[Go+ CI/Test]   |     5:  2: . . . . . . . . Expression (\n[Go+ CI/Test]   |     5:  2: . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     5:  2: . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     5:  2: . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     5:  2: . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |     5:  2: . . . . . . . . . . . . . IDENT foo\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: foo}\n[Go+ CI/Test]   |     5:  5: . . . . . . . . . . . . )\n[Go+ CI/Test]   |     5:  5: . . . . . . . . . . . . CallOrConversion (\n[Go+ CI/Test]   |     5:  5: . . . . . . . . . . . . . \"(\"\n[Go+ CI/Test]   |     5:  6: . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |     5:  6: . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     5:  6: . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     5:  6: . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     5:  6: . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |     5:  6: . . . . . . . . . . . . . . . . . . IDENT x\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: x}\n[Go+ CI/Test]   |     5:  8: . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     5:  8: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     5:  8: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     5:  8: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     5:  8: . . . . . . . . . . . . . . \"=>\"\n[Go+ CI/Test]   |     5: 11: . . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |     5: 11: . . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     5: 11: . . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     5: 11: . . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     5: 11: . . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |     5: 11: . . . . . . . . . . . . . . . . . . . IDENT x\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: x}\n[Go+ CI/Test]   |     5: 13: . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     5: 13: . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     5: 13: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     5: 13: . . . . . . . . . . . . . . . . \"*\"\n[Go+ CI/Test]   |     5: 15: . . . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     5: 15: . . . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     5: 15: . . . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     5: 15: . . . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |     5: 15: . . . . . . . . . . . . . . . . . . . . IDENT x\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: x}\n[Go+ CI/Test]   |     5: 16: . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     5: 16: . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     5: 16: . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     5: 16: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     5: 16: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     5: 16: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:2443: ast.LambdaExpr{Lhs: [x]}\n[Go+ CI/Test]   |     5: 16: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     5: 16: . . . . . . . . . . . . . \")\"\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1878: ast.CallExpr{Fun: foo, Ellipsis: false, isCmd: false}\n[Go+ CI/Test]   |     5: 17: . . . . . . . . . . . . )\n[Go+ CI/Test]   |     5: 17: . . . . . . . . . . . )\n[Go+ CI/Test]   |     5: 17: . . . . . . . . . . )\n[Go+ CI/Test]   |     5: 17: . . . . . . . . . )\n[Go+ CI/Test]   |     5: 17: . . . . . . . . )\n[Go+ CI/Test]   |     5: 17: . . . . . . . )\n[Go+ CI/Test]   |     5: 17: . . . . . . )\n[Go+ CI/Test]   |     5: 17: . . . . . . \";\"\n[Go+ CI/Test]   |     6:  2: . . . . . )\n[Go+ CI/Test]   |     6:  2: . . . . . Statement (\n[Go+ CI/Test]   |     6:  2: . . . . . . SimpleStmt (\n[Go+ CI/Test]   |     6:  2: . . . . . . . ExpressionList (\n[Go+ CI/Test]   |     6:  2: . . . . . . . . Expression (\n[Go+ CI/Test]   |     6:  2: . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     6:  2: . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     6:  2: . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     6:  2: . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |     6:  2: . . . . . . . . . . . . . IDENT foo\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: foo}\n[Go+ CI/Test]   |     6:  5: . . . . . . . . . . . . )\n[Go+ CI/Test]   |     6:  5: . . . . . . . . . . . . CallOrConversion (\n[Go+ CI/Test]   |     6:  5: . . . . . . . . . . . . . \"(\"\n[Go+ CI/Test]   |     6:  6: . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |     6:  6: . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     6:  6: . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     6:  6: . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     6:  6: . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |     6:  6: . . . . . . . . . . . . . . . . . . \"(\"\n[Go+ CI/Test]   |     6:  7: . . . . . . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |     6:  7: . . . . . . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     6:  7: . . . . . . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     6:  7: . . . . . . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     6:  7: . . . . . . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |     6:  7: . . . . . . . . . . . . . . . . . . . . . . . IDENT x\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: x}\n[Go+ CI/Test]   |     6:  8: . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     6:  8: . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     6:  8: . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     6:  8: . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     6:  8: . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     6:  8: . . . . . . . . . . . . . . . . . . \",\"\n[Go+ CI/Test]   |     6: 10: . . . . . . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |     6: 10: . . . . . . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     6: 10: . . . . . . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     6: 10: . . . . . . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     6: 10: . . . . . . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |     6: 10: . . . . . . . . . . . . . . . . . . . . . . . IDENT y\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: y}\n[Go+ CI/Test]   |     6: 11: . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     6: 11: . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     6: 11: . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     6: 11: . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     6: 11: . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     6: 11: . . . . . . . . . . . . . . . . . . \")\"\n[Go+ CI/Test]   |     6: 13: . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     6: 13: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     6: 13: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     6: 13: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     6: 13: . . . . . . . . . . . . . . \"=>\"\n[Go+ CI/Test]   |     6: 16: . . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |     6: 16: . . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     6: 16: . . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     6: 16: . . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     6: 16: . . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |     6: 16: . . . . . . . . . . . . . . . . . . . IDENT x\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: x}\n[Go+ CI/Test]   |     6: 18: . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     6: 18: . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     6: 18: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     6: 18: . . . . . . . . . . . . . . . . \"+\"\n[Go+ CI/Test]   |     6: 20: . . . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     6: 20: . . . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     6: 20: . . . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     6: 20: . . . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |     6: 20: . . . . . . . . . . . . . . . . . . . . IDENT y\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: y}\n[Go+ CI/Test]   |     6: 21: . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     6: 21: . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     6: 21: . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     6: 21: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     6: 21: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     6: 21: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:2443: ast.LambdaExpr{Lhs: [x y]}\n[Go+ CI/Test]   |     6: 21: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     6: 21: . . . . . . . . . . . . . \")\"\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1878: ast.CallExpr{Fun: foo, Ellipsis: false, isCmd: false}\n[Go+ CI/Test]   |     6: 22: . . . . . . . . . . . . )\n[Go+ CI/Test]   |     6: 22: . . . . . . . . . . . )\n[Go+ CI/Test]   |     6: 22: . . . . . . . . . . )\n[Go+ CI/Test]   |     6: 22: . . . . . . . . . )\n[Go+ CI/Test]   |     6: 22: . . . . . . . . )\n[Go+ CI/Test]   |     6: 22: . . . . . . . )\n[Go+ CI/Test]   |     6: 22: . . . . . . )\n[Go+ CI/Test]   |     6: 22: . . . . . . \";\"\n[Go+ CI/Test]   |     7:  2: . . . . . )\n[Go+ CI/Test]   |     7:  2: . . . . . Statement (\n[Go+ CI/Test]   |     7:  2: . . . . . . SimpleStmt (\n[Go+ CI/Test]   |     7:  2: . . . . . . . ExpressionList (\n[Go+ CI/Test]   |     7:  2: . . . . . . . . Expression (\n[Go+ CI/Test]   |     7:  2: . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     7:  2: . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     7:  2: . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     7:  2: . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |     7:  2: . . . . . . . . . . . . . IDENT foo\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: foo}\n[Go+ CI/Test]   |     7:  5: . . . . . . . . . . . . )\n[Go+ CI/Test]   |     7:  5: . . . . . . . . . . . . CallOrConversion (\n[Go+ CI/Test]   |     7:  5: . . . . . . . . . . . . . \"(\"\n[Go+ CI/Test]   |     7:  6: . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |     7:  6: . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     7:  6: . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     7:  6: . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     7:  6: . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |     7:  6: . . . . . . . . . . . . . . . . . . \"(\"\n[Go+ CI/Test]   |     7:  7: . . . . . . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |     7:  7: . . . . . . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     7:  7: . . . . . . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     7:  7: . . . . . . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     7:  7: . . . . . . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |     7:  7: . . . . . . . . . . . . . . . . . . . . . . . IDENT x\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: x}\n[Go+ CI/Test]   |     7:  8: . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     7:  8: . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     7:  8: . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     7:  8: . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     7:  8: . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     7:  8: . . . . . . . . . . . . . . . . . . \")\"\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1644: ast.ParenExpr{X: x}\n[Go+ CI/Test]   |     7: 10: . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     7: 10: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     7: 10: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     7: 10: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     7: 10: . . . . . . . . . . . . . . \"=>\"\n[Go+ CI/Test]   |     7: 13: . . . . . . . . . . . . . . \"(\"\n[Go+ CI/Test]   |     7: 14: . . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |     7: 14: . . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     7: 14: . . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     7: 14: . . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     7: 14: . . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |     7: 14: . . . . . . . . . . . . . . . . . . . IDENT x\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: x}\n[Go+ CI/Test]   |     7: 15: . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     7: 15: . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     7: 15: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     7: 15: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     7: 15: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     7: 15: . . . . . . . . . . . . . . \",\"\n[Go+ CI/Test]   |     7: 17: . . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |     7: 17: . . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     7: 17: . . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     7: 17: . . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     7: 17: . . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |     7: 17: . . . . . . . . . . . . . . . . . . . IDENT x\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: x}\n[Go+ CI/Test]   |     7: 19: . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     7: 19: . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     7: 19: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     7: 19: . . . . . . . . . . . . . . . . \"*\"\n[Go+ CI/Test]   |     7: 21: . . . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     7: 21: . . . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     7: 21: . . . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     7: 21: . . . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: INT, Value: 2}\n[Go+ CI/Test]   |     7: 21: . . . . . . . . . . . . . . . . . . . . INT 2\n[Go+ CI/Test]   |     7: 22: . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     7: 22: . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     7: 22: . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     7: 22: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     7: 22: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     7: 22: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     7: 22: . . . . . . . . . . . . . . \")\"\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:2443: ast.LambdaExpr{Lhs: [x]}\n[Go+ CI/Test]   |     7: 23: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     7: 23: . . . . . . . . . . . . . \")\"\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1878: ast.CallExpr{Fun: foo, Ellipsis: false, isCmd: false}\n[Go+ CI/Test]   |     7: 24: . . . . . . . . . . . . )\n[Go+ CI/Test]   |     7: 24: . . . . . . . . . . . )\n[Go+ CI/Test]   |     7: 24: . . . . . . . . . . )\n[Go+ CI/Test]   |     7: 24: . . . . . . . . . )\n[Go+ CI/Test]   |     7: 24: . . . . . . . . )\n[Go+ CI/Test]   |     7: 24: . . . . . . . )\n[Go+ CI/Test]   |     7: 24: . . . . . . )\n[Go+ CI/Test]   |     7: 24: . . . . . . \";\"\n[Go+ CI/Test]   |     8:  2: . . . . . )\n[Go+ CI/Test]   |     8:  2: . . . . . Statement (\n[Go+ CI/Test]   |     8:  2: . . . . . . SimpleStmt (\n[Go+ CI/Test]   |     8:  2: . . . . . . . ExpressionList (\n[Go+ CI/Test]   |     8:  2: . . . . . . . . Expression (\n[Go+ CI/Test]   |     8:  2: . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     8:  2: . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     8:  2: . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     8:  2: . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |     8:  2: . . . . . . . . . . . . . IDENT foo\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: foo}\n[Go+ CI/Test]   |     8:  5: . . . . . . . . . . . . )\n[Go+ CI/Test]   |     8:  5: . . . . . . . . . . . . CallOrConversion (\n[Go+ CI/Test]   |     8:  5: . . . . . . . . . . . . . \"(\"\n[Go+ CI/Test]   |     8:  6: . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |     8:  6: . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     8:  6: . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     8:  6: . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     8:  6: . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |     8:  6: . . . . . . . . . . . . . . . . . . \"(\"\n[Go+ CI/Test]   |     8:  7: . . . . . . . . . . . . . . . . . . \")\"\n[Go+ CI/Test]   |     8:  9: . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     8:  9: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     8:  9: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     8:  9: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     8:  9: . . . . . . . . . . . . . . \"=>\"\n[Go+ CI/Test]   |     8: 12: . . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |     8: 12: . . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     8: 12: . . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     8: 12: . . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     8: 12: . . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: STRING, Value: \"Hi\"}\n[Go+ CI/Test]   |     8: 12: . . . . . . . . . . . . . . . . . . . STRING \"Hi\"\n[Go+ CI/Test]   |     8: 16: . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     8: 16: . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     8: 16: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     8: 16: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     8: 16: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:2443: ast.LambdaExpr{Lhs: []}\n[Go+ CI/Test]   |     8: 16: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     8: 16: . . . . . . . . . . . . . \")\"\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1878: ast.CallExpr{Fun: foo, Ellipsis: false, isCmd: false}\n[Go+ CI/Test]   |     8: 17: . . . . . . . . . . . . )\n[Go+ CI/Test]   |     8: 17: . . . . . . . . . . . )\n[Go+ CI/Test]   |     8: 17: . . . . . . . . . . )\n[Go+ CI/Test]   |     8: 17: . . . . . . . . . )\n[Go+ CI/Test]   |     8: 17: . . . . . . . . )\n[Go+ CI/Test]   |     8: 17: . . . . . . . )\n[Go+ CI/Test]   |     8: 17: . . . . . . )\n[Go+ CI/Test]   |     8: 17: . . . . . . \";\"\n[Go+ CI/Test]   |     9:  1: . . . . . )\n[Go+ CI/Test]   |     9:  1: . . . . )\n[Go+ CI/Test]   |     9:  1: . . . . \"}\"\n[Go+ CI/Test]   |     9:  2: . . . )\n[Go+ CI/Test]   |     9:  2: . . . \";\"\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:3564: ast.FuncDecl{Name: main, ...}\n[Go+ CI/Test]   |     9:  3: . . )\n[Go+ CI/Test]   |     9:  3: . )\n[Go+ CI/Test]   |     9:  3: )\n[Go+ CI/Test]   | === RUN   TestFromTestdata/lambda2\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parserdir_test.go:90: Parsing /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/_testdata/lambda2\n[Go+ CI/Test]   |     1:  1: File (\n[Go+ CI/Test]   |     1:  1: . \"package\"\n[Go+ CI/Test]   |     1:  9: . IDENT main\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: main}\n[Go+ CI/Test]   |     1: 13: . \";\"\n[Go+ CI/Test]   |     3:  1: . Declaration (\n[Go+ CI/Test]   |     3:  1: . . FunctionDecl (\n[Go+ CI/Test]   |     3:  1: . . . \"func\"\n[Go+ CI/Test]   |     3:  6: . . . IDENT main\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: main}\n[Go+ CI/Test]   |     3: 10: . . . Signature (\n[Go+ CI/Test]   |     3: 10: . . . . Parameters (\n[Go+ CI/Test]   |     3: 10: . . . . . \"(\"\n[Go+ CI/Test]   |     3: 11: . . . . . \")\"\n[Go+ CI/Test]   |     3: 13: . . . . )\n[Go+ CI/Test]   |     3: 13: . . . . Result (\n[Go+ CI/Test]   |     3: 13: . . . . )\n[Go+ CI/Test]   |     3: 13: . . . )\n[Go+ CI/Test]   |     3: 13: . . . Body (\n[Go+ CI/Test]   |     3: 13: . . . . \"{\"\n[Go+ CI/Test]   |     4:  2: . . . . StatementList (\n[Go+ CI/Test]   |     4:  2: . . . . . Statement (\n[Go+ CI/Test]   |     4:  2: . . . . . . SimpleStmt (\n[Go+ CI/Test]   |     4:  2: . . . . . . . ExpressionList (\n[Go+ CI/Test]   |     4:  2: . . . . . . . . Expression (\n[Go+ CI/Test]   |     4:  2: . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     4:  2: . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     4:  2: . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     4:  2: . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |     4:  2: . . . . . . . . . . . . . IDENT foo\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: foo}\n[Go+ CI/Test]   |     4:  5: . . . . . . . . . . . . )\n[Go+ CI/Test]   |     4:  5: . . . . . . . . . . . . CallOrConversion (\n[Go+ CI/Test]   |     4:  5: . . . . . . . . . . . . . \"(\"\n[Go+ CI/Test]   |     4:  6: . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |     4:  6: . . . . . . . . . . . . . . \"=>\"\n[Go+ CI/Test]   |     4:  9: . . . . . . . . . . . . . . BlockStmt (\n[Go+ CI/Test]   |     4:  9: . . . . . . . . . . . . . . . \"{\"\n[Go+ CI/Test]   |     5:  3: . . . . . . . . . . . . . . . StatementList (\n[Go+ CI/Test]   |     5:  3: . . . . . . . . . . . . . . . . Statement (\n[Go+ CI/Test]   |     5:  3: . . . . . . . . . . . . . . . . . SimpleStmt (\n[Go+ CI/Test]   |     5:  3: . . . . . . . . . . . . . . . . . . ExpressionList (\n[Go+ CI/Test]   |     5:  3: . . . . . . . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |     5:  3: . . . . . . . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     5:  3: . . . . . . . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     5:  3: . . . . . . . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     5:  3: . . . . . . . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |     5:  3: . . . . . . . . . . . . . . . . . . . . . . . . IDENT println\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: println}\n[Go+ CI/Test]   |     5: 10: . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     5: 10: . . . . . . . . . . . . . . . . . . . . . . . CallOrConversion (\n[Go+ CI/Test]   |     5: 10: . . . . . . . . . . . . . . . . . . . . . . . . \"(\"\n[Go+ CI/Test]   |     5: 11: . . . . . . . . . . . . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |     5: 11: . . . . . . . . . . . . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     5: 11: . . . . . . . . . . . . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     5: 11: . . . . . . . . . . . . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     5: 11: . . . . . . . . . . . . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: STRING, Value: \"Hi\"}\n[Go+ CI/Test]   |     5: 11: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . STRING \"Hi\"\n[Go+ CI/Test]   |     5: 15: . . . . . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     5: 15: . . . . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     5: 15: . . . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     5: 15: . . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     5: 15: . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     5: 15: . . . . . . . . . . . . . . . . . . . . . . . . \")\"\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1878: ast.CallExpr{Fun: println, Ellipsis: false, isCmd: false}\n[Go+ CI/Test]   |     5: 16: . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     5: 16: . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     5: 16: . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     5: 16: . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     5: 16: . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     5: 16: . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     5: 16: . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     5: 16: . . . . . . . . . . . . . . . . . \";\"\n[Go+ CI/Test]   |     6:  2: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     6:  2: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     6:  2: . . . . . . . . . . . . . . . \"}\"\n[Go+ CI/Test]   |     6:  3: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:2443: ast.LambdaExpr{Lhs: []}\n[Go+ CI/Test]   |     6:  3: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     6:  3: . . . . . . . . . . . . . \")\"\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1878: ast.CallExpr{Fun: foo, Ellipsis: false, isCmd: false}\n[Go+ CI/Test]   |     6:  4: . . . . . . . . . . . . )\n[Go+ CI/Test]   |     6:  4: . . . . . . . . . . . )\n[Go+ CI/Test]   |     6:  4: . . . . . . . . . . )\n[Go+ CI/Test]   |     6:  4: . . . . . . . . . )\n[Go+ CI/Test]   |     6:  4: . . . . . . . . )\n[Go+ CI/Test]   |     6:  4: . . . . . . . )\n[Go+ CI/Test]   |     6:  4: . . . . . . )\n[Go+ CI/Test]   |     6:  4: . . . . . . \";\"\n[Go+ CI/Test]   |     7:  2: . . . . . )\n[Go+ CI/Test]   |     7:  2: . . . . . Statement (\n[Go+ CI/Test]   |     7:  2: . . . . . . SimpleStmt (\n[Go+ CI/Test]   |     7:  2: . . . . . . . ExpressionList (\n[Go+ CI/Test]   |     7:  2: . . . . . . . . Expression (\n[Go+ CI/Test]   |     7:  2: . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     7:  2: . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     7:  2: . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     7:  2: . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |     7:  2: . . . . . . . . . . . . . IDENT foo\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: foo}\n[Go+ CI/Test]   |     7:  5: . . . . . . . . . . . . )\n[Go+ CI/Test]   |     7:  5: . . . . . . . . . . . . CallOrConversion (\n[Go+ CI/Test]   |     7:  5: . . . . . . . . . . . . . \"(\"\n[Go+ CI/Test]   |     7:  6: . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |     7:  6: . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     7:  6: . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     7:  6: . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     7:  6: . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |     7:  6: . . . . . . . . . . . . . . . . . . IDENT x\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: x}\n[Go+ CI/Test]   |     7:  8: . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     7:  8: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     7:  8: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     7:  8: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     7:  8: . . . . . . . . . . . . . . \"=>\"\n[Go+ CI/Test]   |     7: 11: . . . . . . . . . . . . . . BlockStmt (\n[Go+ CI/Test]   |     7: 11: . . . . . . . . . . . . . . . \"{\"\n[Go+ CI/Test]   |     8:  3: . . . . . . . . . . . . . . . StatementList (\n[Go+ CI/Test]   |     8:  3: . . . . . . . . . . . . . . . . Statement (\n[Go+ CI/Test]   |     8:  3: . . . . . . . . . . . . . . . . . SimpleStmt (\n[Go+ CI/Test]   |     8:  3: . . . . . . . . . . . . . . . . . . ExpressionList (\n[Go+ CI/Test]   |     8:  3: . . . . . . . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |     8:  3: . . . . . . . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     8:  3: . . . . . . . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     8:  3: . . . . . . . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     8:  3: . . . . . . . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |     8:  3: . . . . . . . . . . . . . . . . . . . . . . . . IDENT println\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: println}\n[Go+ CI/Test]   |     8: 10: . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     8: 10: . . . . . . . . . . . . . . . . . . . . . . . CallOrConversion (\n[Go+ CI/Test]   |     8: 10: . . . . . . . . . . . . . . . . . . . . . . . . \"(\"\n[Go+ CI/Test]   |     8: 11: . . . . . . . . . . . . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |     8: 11: . . . . . . . . . . . . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     8: 11: . . . . . . . . . . . . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     8: 11: . . . . . . . . . . . . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     8: 11: . . . . . . . . . . . . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |     8: 11: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . IDENT x\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: x}\n[Go+ CI/Test]   |     8: 12: . . . . . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     8: 12: . . . . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     8: 12: . . . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     8: 12: . . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     8: 12: . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     8: 12: . . . . . . . . . . . . . . . . . . . . . . . . \")\"\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1878: ast.CallExpr{Fun: println, Ellipsis: false, isCmd: false}\n[Go+ CI/Test]   |     8: 13: . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     8: 13: . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     8: 13: . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     8: 13: . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     8: 13: . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     8: 13: . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     8: 13: . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     8: 13: . . . . . . . . . . . . . . . . . \";\"\n[Go+ CI/Test]   |     9:  2: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     9:  2: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     9:  2: . . . . . . . . . . . . . . . \"}\"\n[Go+ CI/Test]   |     9:  3: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:2443: ast.LambdaExpr{Lhs: [x]}\n[Go+ CI/Test]   |     9:  3: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     9:  3: . . . . . . . . . . . . . \")\"\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1878: ast.CallExpr{Fun: foo, Ellipsis: false, isCmd: false}\n[Go+ CI/Test]   |     9:  4: . . . . . . . . . . . . )\n[Go+ CI/Test]   |     9:  4: . . . . . . . . . . . )\n[Go+ CI/Test]   |     9:  4: . . . . . . . . . . )\n[Go+ CI/Test]   |     9:  4: . . . . . . . . . )\n[Go+ CI/Test]   |     9:  4: . . . . . . . . )\n[Go+ CI/Test]   |     9:  4: . . . . . . . )\n[Go+ CI/Test]   |     9:  4: . . . . . . )\n[Go+ CI/Test]   |     9:  4: . . . . . . \";\"\n[Go+ CI/Test]   |    10:  2: . . . . . )\n[Go+ CI/Test]   |    10:  2: . . . . . Statement (\n[Go+ CI/Test]   |    10:  2: . . . . . . SimpleStmt (\n[Go+ CI/Test]   |    10:  2: . . . . . . . ExpressionList (\n[Go+ CI/Test]   |    10:  2: . . . . . . . . Expression (\n[Go+ CI/Test]   |    10:  2: . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    10:  2: . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    10:  2: . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    10:  2: . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |    10:  2: . . . . . . . . . . . . . IDENT foo\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: foo}\n[Go+ CI/Test]   |    10:  5: . . . . . . . . . . . . )\n[Go+ CI/Test]   |    10:  5: . . . . . . . . . . . . CallOrConversion (\n[Go+ CI/Test]   |    10:  5: . . . . . . . . . . . . . \"(\"\n[Go+ CI/Test]   |    10:  6: . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |    10:  6: . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    10:  6: . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    10:  6: . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    10:  6: . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |    10:  6: . . . . . . . . . . . . . . . . . . \"(\"\n[Go+ CI/Test]   |    10:  7: . . . . . . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |    10:  7: . . . . . . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    10:  7: . . . . . . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    10:  7: . . . . . . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    10:  7: . . . . . . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |    10:  7: . . . . . . . . . . . . . . . . . . . . . . . IDENT x\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: x}\n[Go+ CI/Test]   |    10:  8: . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    10:  8: . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    10:  8: . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    10:  8: . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    10:  8: . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    10:  8: . . . . . . . . . . . . . . . . . . \",\"\n[Go+ CI/Test]   |    10: 10: . . . . . . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |    10: 10: . . . . . . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    10: 10: . . . . . . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    10: 10: . . . . . . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    10: 10: . . . . . . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |    10: 10: . . . . . . . . . . . . . . . . . . . . . . . IDENT y\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: y}\n[Go+ CI/Test]   |    10: 11: . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    10: 11: . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    10: 11: . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    10: 11: . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    10: 11: . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    10: 11: . . . . . . . . . . . . . . . . . . \")\"\n[Go+ CI/Test]   |    10: 13: . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    10: 13: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    10: 13: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    10: 13: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    10: 13: . . . . . . . . . . . . . . \"=>\"\n[Go+ CI/Test]   |    10: 16: . . . . . . . . . . . . . . BlockStmt (\n[Go+ CI/Test]   |    10: 16: . . . . . . . . . . . . . . . \"{\"\n[Go+ CI/Test]   |    11:  3: . . . . . . . . . . . . . . . StatementList (\n[Go+ CI/Test]   |    11:  3: . . . . . . . . . . . . . . . . Statement (\n[Go+ CI/Test]   |    11:  3: . . . . . . . . . . . . . . . . . SimpleStmt (\n[Go+ CI/Test]   |    11:  3: . . . . . . . . . . . . . . . . . . ExpressionList (\n[Go+ CI/Test]   |    11:  3: . . . . . . . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |    11:  3: . . . . . . . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    11:  3: . . . . . . . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    11:  3: . . . . . . . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    11:  3: . . . . . . . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |    11:  3: . . . . . . . . . . . . . . . . . . . . . . . . IDENT println\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: println}\n[Go+ CI/Test]   |    11: 10: . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    11: 10: . . . . . . . . . . . . . . . . . . . . . . . CallOrConversion (\n[Go+ CI/Test]   |    11: 10: . . . . . . . . . . . . . . . . . . . . . . . . \"(\"\n[Go+ CI/Test]   |    11: 11: . . . . . . . . . . . . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |    11: 11: . . . . . . . . . . . . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    11: 11: . . . . . . . . . . . . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    11: 11: . . . . . . . . . . . . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    11: 11: . . . . . . . . . . . . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |    11: 11: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . IDENT x\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: x}\n[Go+ CI/Test]   |    11: 12: . . . . . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    11: 12: . . . . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    11: 12: . . . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    11: 12: . . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    11: 12: . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    11: 12: . . . . . . . . . . . . . . . . . . . . . . . . \",\"\n[Go+ CI/Test]   |    11: 14: . . . . . . . . . . . . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |    11: 14: . . . . . . . . . . . . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    11: 14: . . . . . . . . . . . . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    11: 14: . . . . . . . . . . . . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    11: 14: . . . . . . . . . . . . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |    11: 14: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . IDENT y\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: y}\n[Go+ CI/Test]   |    11: 15: . . . . . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    11: 15: . . . . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    11: 15: . . . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    11: 15: . . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    11: 15: . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    11: 15: . . . . . . . . . . . . . . . . . . . . . . . . \")\"\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1878: ast.CallExpr{Fun: println, Ellipsis: false, isCmd: false}\n[Go+ CI/Test]   |    11: 16: . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    11: 16: . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    11: 16: . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    11: 16: . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    11: 16: . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    11: 16: . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    11: 16: . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    11: 16: . . . . . . . . . . . . . . . . . \";\"\n[Go+ CI/Test]   |    12:  2: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    12:  2: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    12:  2: . . . . . . . . . . . . . . . \"}\"\n[Go+ CI/Test]   |    12:  3: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:2443: ast.LambdaExpr{Lhs: [x y]}\n[Go+ CI/Test]   |    12:  3: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    12:  3: . . . . . . . . . . . . . \")\"\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1878: ast.CallExpr{Fun: foo, Ellipsis: false, isCmd: false}\n[Go+ CI/Test]   |    12:  4: . . . . . . . . . . . . )\n[Go+ CI/Test]   |    12:  4: . . . . . . . . . . . )\n[Go+ CI/Test]   |    12:  4: . . . . . . . . . . )\n[Go+ CI/Test]   |    12:  4: . . . . . . . . . )\n[Go+ CI/Test]   |    12:  4: . . . . . . . . )\n[Go+ CI/Test]   |    12:  4: . . . . . . . )\n[Go+ CI/Test]   |    12:  4: . . . . . . )\n[Go+ CI/Test]   |    12:  4: . . . . . . \";\"\n[Go+ CI/Test]   |    13:  1: . . . . . )\n[Go+ CI/Test]   |    13:  1: . . . . )\n[Go+ CI/Test]   |    13:  1: . . . . \"}\"\n[Go+ CI/Test]   |    13:  2: . . . )\n[Go+ CI/Test]   |    13:  2: . . . \";\"\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:3564: ast.FuncDecl{Name: main, ...}\n[Go+ CI/Test]   |    13:  3: . . )\n[Go+ CI/Test]   |    13:  3: . )\n[Go+ CI/Test]   |    13:  3: )\n[Go+ CI/Test]   | === RUN   TestFromTestdata/lambda3\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parserdir_test.go:90: Parsing /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/_testdata/lambda3\n[Go+ CI/Test]   |     1:  1: File (\n[Go+ CI/Test]   |     1:  1: . \"package\"\n[Go+ CI/Test]   |     1:  9: . IDENT main\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: main}\n[Go+ CI/Test]   |     1: 13: . \";\"\n[Go+ CI/Test]   |     3:  1: . Declaration (\n[Go+ CI/Test]   |     3:  1: . . FunctionDecl (\n[Go+ CI/Test]   |     3:  1: . . . \"func\"\n[Go+ CI/Test]   |     3:  6: . . . IDENT main\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: main}\n[Go+ CI/Test]   |     3: 10: . . . Signature (\n[Go+ CI/Test]   |     3: 10: . . . . Parameters (\n[Go+ CI/Test]   |     3: 10: . . . . . \"(\"\n[Go+ CI/Test]   |     3: 11: . . . . . \")\"\n[Go+ CI/Test]   |     3: 13: . . . . )\n[Go+ CI/Test]   |     3: 13: . . . . Result (\n[Go+ CI/Test]   |     3: 13: . . . . )\n[Go+ CI/Test]   |     3: 13: . . . )\n[Go+ CI/Test]   |     3: 13: . . . Body (\n[Go+ CI/Test]   |     3: 13: . . . . \"{\"\n[Go+ CI/Test]   |     4:  2: . . . . StatementList (\n[Go+ CI/Test]   |     4:  2: . . . . . Statement (\n[Go+ CI/Test]   |     4:  2: . . . . . . SimpleStmt (\n[Go+ CI/Test]   |     4:  2: . . . . . . . ExpressionList (\n[Go+ CI/Test]   |     4:  2: . . . . . . . . Expression (\n[Go+ CI/Test]   |     4:  2: . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     4:  2: . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     4:  2: . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     4:  2: . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |     4:  2: . . . . . . . . . . . . . IDENT foo\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: foo}\n[Go+ CI/Test]   |     4:  6: . . . . . . . . . . . . )\n[Go+ CI/Test]   |     4:  6: . . . . . . . . . . . . CallOrConversion (\n[Go+ CI/Test]   |     4:  6: . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |     4:  6: . . . . . . . . . . . . . . \"=>\"\n[Go+ CI/Test]   |     4:  9: . . . . . . . . . . . . . . BlockStmt (\n[Go+ CI/Test]   |     4:  9: . . . . . . . . . . . . . . . \"{\"\n[Go+ CI/Test]   |     5:  3: . . . . . . . . . . . . . . . StatementList (\n[Go+ CI/Test]   |     5:  3: . . . . . . . . . . . . . . . . Statement (\n[Go+ CI/Test]   |     5:  3: . . . . . . . . . . . . . . . . . SimpleStmt (\n[Go+ CI/Test]   |     5:  3: . . . . . . . . . . . . . . . . . . ExpressionList (\n[Go+ CI/Test]   |     5:  3: . . . . . . . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |     5:  3: . . . . . . . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     5:  3: . . . . . . . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     5:  3: . . . . . . . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     5:  3: . . . . . . . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |     5:  3: . . . . . . . . . . . . . . . . . . . . . . . . IDENT println\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: println}\n[Go+ CI/Test]   |     5: 11: . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     5: 11: . . . . . . . . . . . . . . . . . . . . . . . CallOrConversion (\n[Go+ CI/Test]   |     5: 11: . . . . . . . . . . . . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |     5: 11: . . . . . . . . . . . . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     5: 11: . . . . . . . . . . . . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     5: 11: . . . . . . . . . . . . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     5: 11: . . . . . . . . . . . . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: STRING, Value: \"Hi\"}\n[Go+ CI/Test]   |     5: 11: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . STRING \"Hi\"\n[Go+ CI/Test]   |     5: 15: . . . . . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     5: 15: . . . . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     5: 15: . . . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     5: 15: . . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     5: 15: . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1878: ast.CallExpr{Fun: println, Ellipsis: false, isCmd: true}\n[Go+ CI/Test]   |     5: 15: . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     5: 15: . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     5: 15: . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     5: 15: . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     5: 15: . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     5: 15: . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     5: 15: . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     5: 15: . . . . . . . . . . . . . . . . . \";\"\n[Go+ CI/Test]   |     6:  2: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     6:  2: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     6:  2: . . . . . . . . . . . . . . . \"}\"\n[Go+ CI/Test]   |     6:  3: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:2443: ast.LambdaExpr{Lhs: []}\n[Go+ CI/Test]   |     6:  3: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1878: ast.CallExpr{Fun: foo, Ellipsis: false, isCmd: true}\n[Go+ CI/Test]   |     6:  3: . . . . . . . . . . . . )\n[Go+ CI/Test]   |     6:  3: . . . . . . . . . . . )\n[Go+ CI/Test]   |     6:  3: . . . . . . . . . . )\n[Go+ CI/Test]   |     6:  3: . . . . . . . . . )\n[Go+ CI/Test]   |     6:  3: . . . . . . . . )\n[Go+ CI/Test]   |     6:  3: . . . . . . . )\n[Go+ CI/Test]   |     6:  3: . . . . . . )\n[Go+ CI/Test]   |     6:  3: . . . . . . \";\"\n[Go+ CI/Test]   |     7:  2: . . . . . )\n[Go+ CI/Test]   |     7:  2: . . . . . Statement (\n[Go+ CI/Test]   |     7:  2: . . . . . . SimpleStmt (\n[Go+ CI/Test]   |     7:  2: . . . . . . . ExpressionList (\n[Go+ CI/Test]   |     7:  2: . . . . . . . . Expression (\n[Go+ CI/Test]   |     7:  2: . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     7:  2: . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     7:  2: . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     7:  2: . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |     7:  2: . . . . . . . . . . . . . IDENT foo\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: foo}\n[Go+ CI/Test]   |     7:  6: . . . . . . . . . . . . )\n[Go+ CI/Test]   |     7:  6: . . . . . . . . . . . . CallOrConversion (\n[Go+ CI/Test]   |     7:  6: . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |     7:  6: . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     7:  6: . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     7:  6: . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     7:  6: . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |     7:  6: . . . . . . . . . . . . . . . . . . IDENT x\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: x}\n[Go+ CI/Test]   |     7:  8: . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     7:  8: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     7:  8: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     7:  8: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     7:  8: . . . . . . . . . . . . . . \"=>\"\n[Go+ CI/Test]   |     7: 11: . . . . . . . . . . . . . . BlockStmt (\n[Go+ CI/Test]   |     7: 11: . . . . . . . . . . . . . . . \"{\"\n[Go+ CI/Test]   |     8:  3: . . . . . . . . . . . . . . . StatementList (\n[Go+ CI/Test]   |     8:  3: . . . . . . . . . . . . . . . . Statement (\n[Go+ CI/Test]   |     8:  3: . . . . . . . . . . . . . . . . . SimpleStmt (\n[Go+ CI/Test]   |     8:  3: . . . . . . . . . . . . . . . . . . ExpressionList (\n[Go+ CI/Test]   |     8:  3: . . . . . . . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |     8:  3: . . . . . . . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     8:  3: . . . . . . . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     8:  3: . . . . . . . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     8:  3: . . . . . . . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |     8:  3: . . . . . . . . . . . . . . . . . . . . . . . . IDENT println\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: println}\n[Go+ CI/Test]   |     8: 11: . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     8: 11: . . . . . . . . . . . . . . . . . . . . . . . CallOrConversion (\n[Go+ CI/Test]   |     8: 11: . . . . . . . . . . . . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |     8: 11: . . . . . . . . . . . . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     8: 11: . . . . . . . . . . . . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     8: 11: . . . . . . . . . . . . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     8: 11: . . . . . . . . . . . . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |     8: 11: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . IDENT x\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: x}\n[Go+ CI/Test]   |     8: 12: . . . . . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     8: 12: . . . . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     8: 12: . . . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     8: 12: . . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     8: 12: . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1878: ast.CallExpr{Fun: println, Ellipsis: false, isCmd: true}\n[Go+ CI/Test]   |     8: 12: . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     8: 12: . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     8: 12: . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     8: 12: . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     8: 12: . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     8: 12: . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     8: 12: . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     8: 12: . . . . . . . . . . . . . . . . . \";\"\n[Go+ CI/Test]   |     9:  2: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     9:  2: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     9:  2: . . . . . . . . . . . . . . . \"}\"\n[Go+ CI/Test]   |     9:  3: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:2443: ast.LambdaExpr{Lhs: [x]}\n[Go+ CI/Test]   |     9:  3: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1878: ast.CallExpr{Fun: foo, Ellipsis: false, isCmd: true}\n[Go+ CI/Test]   |     9:  3: . . . . . . . . . . . . )\n[Go+ CI/Test]   |     9:  3: . . . . . . . . . . . )\n[Go+ CI/Test]   |     9:  3: . . . . . . . . . . )\n[Go+ CI/Test]   |     9:  3: . . . . . . . . . )\n[Go+ CI/Test]   |     9:  3: . . . . . . . . )\n[Go+ CI/Test]   |     9:  3: . . . . . . . )\n[Go+ CI/Test]   |     9:  3: . . . . . . )\n[Go+ CI/Test]   |     9:  3: . . . . . . \";\"\n[Go+ CI/Test]   |    10:  1: . . . . . )\n[Go+ CI/Test]   |    10:  1: . . . . )\n[Go+ CI/Test]   |    10:  1: . . . . \"}\"\n[Go+ CI/Test]   |    10:  2: . . . )\n[Go+ CI/Test]   |    10:  2: . . . \";\"\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:3564: ast.FuncDecl{Name: main, ...}\n[Go+ CI/Test]   |    10:  3: . . )\n[Go+ CI/Test]   |    10:  3: . )\n[Go+ CI/Test]   |    10:  3: )\n[Go+ CI/Test]   | === RUN   TestFromTestdata/lambda4\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parserdir_test.go:90: Parsing /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/_testdata/lambda4\n[Go+ CI/Test]   |     1:  1: File (\n[Go+ CI/Test]   |     1:  1: . Declaration (\n[Go+ CI/Test]   |     1:  1: . . GenDecl(type) (\n[Go+ CI/Test]   |     1:  1: . . . \"type\"\n[Go+ CI/Test]   |     1:  6: . . . TypeSpec (\n[Go+ CI/Test]   |     1:  6: . . . . IDENT Foo\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: Foo}\n[Go+ CI/Test]   |     1: 10: . . . . Type (\n[Go+ CI/Test]   |     1: 10: . . . . . StructType (\n[Go+ CI/Test]   |     1: 10: . . . . . . \"struct\"\n[Go+ CI/Test]   |     1: 17: . . . . . . \"{\"\n[Go+ CI/Test]   |     2:  2: . . . . . . FieldDecl (\n[Go+ CI/Test]   |     2:  2: . . . . . . . IDENT Plot\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: Plot}\n[Go+ CI/Test]   |     2:  7: . . . . . . . Type (\n[Go+ CI/Test]   |     2:  7: . . . . . . . . FuncType (\n[Go+ CI/Test]   |     2:  7: . . . . . . . . . \"func\"\n[Go+ CI/Test]   |     2: 11: . . . . . . . . . Signature (\n[Go+ CI/Test]   |     2: 11: . . . . . . . . . . Parameters (\n[Go+ CI/Test]   |     2: 11: . . . . . . . . . . . \"(\"\n[Go+ CI/Test]   |     2: 12: . . . . . . . . . . . ParameterList (\n[Go+ CI/Test]   |     2: 12: . . . . . . . . . . . . ParamDeclOrNil (\n[Go+ CI/Test]   |     2: 12: . . . . . . . . . . . . . IDENT x\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: x}\n[Go+ CI/Test]   |     2: 14: . . . . . . . . . . . . . Type (\n[Go+ CI/Test]   |     2: 14: . . . . . . . . . . . . . . TypeName (\n[Go+ CI/Test]   |     2: 14: . . . . . . . . . . . . . . . IDENT float64\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: float64}\n[Go+ CI/Test]   |     2: 21: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 21: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 21: . . . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 21: . . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 21: . . . . . . . . . . . \")\"\n[Go+ CI/Test]   |     2: 23: . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 23: . . . . . . . . . . Result (\n[Go+ CI/Test]   |     2: 23: . . . . . . . . . . . Parameters (\n[Go+ CI/Test]   |     2: 23: . . . . . . . . . . . . \"(\"\n[Go+ CI/Test]   |     2: 24: . . . . . . . . . . . . ParameterList (\n[Go+ CI/Test]   |     2: 24: . . . . . . . . . . . . . ParamDeclOrNil (\n[Go+ CI/Test]   |     2: 24: . . . . . . . . . . . . . . IDENT float64\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: float64}\n[Go+ CI/Test]   |     2: 31: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 31: . . . . . . . . . . . . . \",\"\n[Go+ CI/Test]   |     2: 33: . . . . . . . . . . . . . ParamDeclOrNil (\n[Go+ CI/Test]   |     2: 33: . . . . . . . . . . . . . . IDENT float64\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: float64}\n[Go+ CI/Test]   |     2: 40: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 40: . . . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 40: . . . . . . . . . . . . \")\"\n[Go+ CI/Test]   |     2: 41: . . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 41: . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 41: . . . . . . . . . )\n[Go+ CI/Test]   |     2: 41: . . . . . . . . )\n[Go+ CI/Test]   |     2: 41: . . . . . . . )\n[Go+ CI/Test]   |     2: 41: . . . . . . . \";\"\n[Go+ CI/Test]   |     3:  1: . . . . . . )\n[Go+ CI/Test]   |     3:  1: . . . . . . \"}\"\n[Go+ CI/Test]   |     3:  2: . . . . . )\n[Go+ CI/Test]   |     3:  2: . . . . )\n[Go+ CI/Test]   |     3:  2: . . . . \";\"\n[Go+ CI/Test]   |     5:  1: . . . )\n[Go+ CI/Test]   |     5:  1: . . )\n[Go+ CI/Test]   |     5:  1: . )\n[Go+ CI/Test]   |     5:  1: . Declaration (\n[Go+ CI/Test]   |     5:  1: . . StatementList (\n[Go+ CI/Test]   |     5:  1: . . . Statement (\n[Go+ CI/Test]   |     5:  1: . . . . SimpleStmt (\n[Go+ CI/Test]   |     5:  1: . . . . . ExpressionList (\n[Go+ CI/Test]   |     5:  1: . . . . . . Expression (\n[Go+ CI/Test]   |     5:  1: . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     5:  1: . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     5:  1: . . . . . . . . . \"&\"\n[Go+ CI/Test]   |     5:  2: . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     5:  2: . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     5:  2: . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |     5:  2: . . . . . . . . . . . . IDENT Foo\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: Foo}\n[Go+ CI/Test]   |     5:  5: . . . . . . . . . . . )\n[Go+ CI/Test]   |     5:  5: . . . . . . . . . . . LiteralValue (\n[Go+ CI/Test]   |     5:  5: . . . . . . . . . . . . \"{\"\n[Go+ CI/Test]   |     6:  2: . . . . . . . . . . . . ElementList (\n[Go+ CI/Test]   |     6:  2: . . . . . . . . . . . . . Element (\n[Go+ CI/Test]   |     6:  2: . . . . . . . . . . . . . . Element (\n[Go+ CI/Test]   |     6:  2: . . . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |     6:  2: . . . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     6:  2: . . . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     6:  2: . . . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     6:  2: . . . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |     6:  2: . . . . . . . . . . . . . . . . . . . . IDENT Plot\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: Plot}\n[Go+ CI/Test]   |     6:  6: . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     6:  6: . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     6:  6: . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     6:  6: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     6:  6: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     6:  6: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     6:  6: . . . . . . . . . . . . . . \":\"\n[Go+ CI/Test]   |     6:  8: . . . . . . . . . . . . . . Element (\n[Go+ CI/Test]   |     6:  8: . . . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |     6:  8: . . . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     6:  8: . . . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     6:  8: . . . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     6:  8: . . . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |     6:  8: . . . . . . . . . . . . . . . . . . . . IDENT x\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: x}\n[Go+ CI/Test]   |     6: 10: . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     6: 10: . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     6: 10: . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     6: 10: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     6: 10: . . . . . . . . . . . . . . . . \"=>\"\n[Go+ CI/Test]   |     6: 13: . . . . . . . . . . . . . . . . \"(\"\n[Go+ CI/Test]   |     6: 14: . . . . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |     6: 14: . . . . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     6: 14: . . . . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     6: 14: . . . . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     6: 14: . . . . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |     6: 14: . . . . . . . . . . . . . . . . . . . . . IDENT x\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: x}\n[Go+ CI/Test]   |     6: 16: . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     6: 16: . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     6: 16: . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     6: 16: . . . . . . . . . . . . . . . . . . \"*\"\n[Go+ CI/Test]   |     6: 18: . . . . . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     6: 18: . . . . . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     6: 18: . . . . . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     6: 18: . . . . . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: INT, Value: 2}\n[Go+ CI/Test]   |     6: 18: . . . . . . . . . . . . . . . . . . . . . . INT 2\n[Go+ CI/Test]   |     6: 19: . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     6: 19: . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     6: 19: . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     6: 19: . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     6: 19: . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     6: 19: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     6: 19: . . . . . . . . . . . . . . . . \",\"\n[Go+ CI/Test]   |     6: 21: . . . . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |     6: 21: . . . . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     6: 21: . . . . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     6: 21: . . . . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     6: 21: . . . . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |     6: 21: . . . . . . . . . . . . . . . . . . . . . IDENT x\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: x}\n[Go+ CI/Test]   |     6: 23: . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     6: 23: . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     6: 23: . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     6: 23: . . . . . . . . . . . . . . . . . . \"*\"\n[Go+ CI/Test]   |     6: 25: . . . . . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     6: 25: . . . . . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     6: 25: . . . . . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     6: 25: . . . . . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |     6: 25: . . . . . . . . . . . . . . . . . . . . . . IDENT x\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: x}\n[Go+ CI/Test]   |     6: 26: . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     6: 26: . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     6: 26: . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     6: 26: . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     6: 26: . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     6: 26: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     6: 26: . . . . . . . . . . . . . . . . \")\"\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:2443: ast.LambdaExpr{Lhs: [x]}\n[Go+ CI/Test]   |     6: 27: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     6: 27: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     6: 27: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     6: 27: . . . . . . . . . . . . . \",\"\n[Go+ CI/Test]   |     7:  1: . . . . . . . . . . . . )\n[Go+ CI/Test]   |     7:  1: . . . . . . . . . . . . \"}\"\n[Go+ CI/Test]   |     7:  2: . . . . . . . . . . . )\n[Go+ CI/Test]   |     7:  2: . . . . . . . . . . )\n[Go+ CI/Test]   |     7:  2: . . . . . . . . . )\n[Go+ CI/Test]   |     7:  2: . . . . . . . . )\n[Go+ CI/Test]   |     7:  2: . . . . . . . )\n[Go+ CI/Test]   |     7:  2: . . . . . . )\n[Go+ CI/Test]   |     7:  2: . . . . . )\n[Go+ CI/Test]   |     7:  2: . . . . )\n[Go+ CI/Test]   |     7:  2: . . . . \";\"\n[Go+ CI/Test]   |     9:  1: . . . )\n[Go+ CI/Test]   |     9:  1: . . . Statement (\n[Go+ CI/Test]   |     9:  1: . . . . SimpleStmt (\n[Go+ CI/Test]   |     9:  1: . . . . . ExpressionList (\n[Go+ CI/Test]   |     9:  1: . . . . . . Expression (\n[Go+ CI/Test]   |     9:  1: . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     9:  1: . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     9:  1: . . . . . . . . . \"&\"\n[Go+ CI/Test]   |     9:  2: . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     9:  2: . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     9:  2: . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |     9:  2: . . . . . . . . . . . . IDENT Foo\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: Foo}\n[Go+ CI/Test]   |     9:  5: . . . . . . . . . . . )\n[Go+ CI/Test]   |     9:  5: . . . . . . . . . . . LiteralValue (\n[Go+ CI/Test]   |     9:  5: . . . . . . . . . . . . \"{\"\n[Go+ CI/Test]   |    10:  2: . . . . . . . . . . . . ElementList (\n[Go+ CI/Test]   |    10:  2: . . . . . . . . . . . . . Element (\n[Go+ CI/Test]   |    10:  2: . . . . . . . . . . . . . . Element (\n[Go+ CI/Test]   |    10:  2: . . . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |    10:  2: . . . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    10:  2: . . . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    10:  2: . . . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    10:  2: . . . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |    10:  2: . . . . . . . . . . . . . . . . . . . . IDENT Plot\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: Plot}\n[Go+ CI/Test]   |    10:  6: . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    10:  6: . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    10:  6: . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    10:  6: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    10:  6: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    10:  6: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    10:  6: . . . . . . . . . . . . . . \":\"\n[Go+ CI/Test]   |    10:  8: . . . . . . . . . . . . . . Element (\n[Go+ CI/Test]   |    10:  8: . . . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |    10:  8: . . . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    10:  8: . . . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    10:  8: . . . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    10:  8: . . . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |    10:  8: . . . . . . . . . . . . . . . . . . . . IDENT x\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: x}\n[Go+ CI/Test]   |    10: 10: . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    10: 10: . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    10: 10: . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    10: 10: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    10: 10: . . . . . . . . . . . . . . . . \"=>\"\n[Go+ CI/Test]   |    10: 13: . . . . . . . . . . . . . . . . BlockStmt (\n[Go+ CI/Test]   |    10: 13: . . . . . . . . . . . . . . . . . \"{\"\n[Go+ CI/Test]   |    11:  3: . . . . . . . . . . . . . . . . . StatementList (\n[Go+ CI/Test]   |    11:  3: . . . . . . . . . . . . . . . . . . Statement (\n[Go+ CI/Test]   |    11:  3: . . . . . . . . . . . . . . . . . . . ReturnStmt (\n[Go+ CI/Test]   |    11:  3: . . . . . . . . . . . . . . . . . . . . \"return\"\n[Go+ CI/Test]   |    11: 10: . . . . . . . . . . . . . . . . . . . . ExpressionList (\n[Go+ CI/Test]   |    11: 10: . . . . . . . . . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |    11: 10: . . . . . . . . . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    11: 10: . . . . . . . . . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    11: 10: . . . . . . . . . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    11: 10: . . . . . . . . . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |    11: 10: . . . . . . . . . . . . . . . . . . . . . . . . . . IDENT x\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: x}\n[Go+ CI/Test]   |    11: 12: . . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    11: 12: . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    11: 12: . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    11: 12: . . . . . . . . . . . . . . . . . . . . . . . \"*\"\n[Go+ CI/Test]   |    11: 14: . . . . . . . . . . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    11: 14: . . . . . . . . . . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    11: 14: . . . . . . . . . . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    11: 14: . . . . . . . . . . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: INT, Value: 2}\n[Go+ CI/Test]   |    11: 14: . . . . . . . . . . . . . . . . . . . . . . . . . . . INT 2\n[Go+ CI/Test]   |    11: 15: . . . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    11: 15: . . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    11: 15: . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    11: 15: . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    11: 15: . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    11: 15: . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    11: 15: . . . . . . . . . . . . . . . . . . . . . \",\"\n[Go+ CI/Test]   |    11: 17: . . . . . . . . . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |    11: 17: . . . . . . . . . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    11: 17: . . . . . . . . . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    11: 17: . . . . . . . . . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    11: 17: . . . . . . . . . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |    11: 17: . . . . . . . . . . . . . . . . . . . . . . . . . . IDENT x\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: x}\n[Go+ CI/Test]   |    11: 19: . . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    11: 19: . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    11: 19: . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    11: 19: . . . . . . . . . . . . . . . . . . . . . . . \"*\"\n[Go+ CI/Test]   |    11: 21: . . . . . . . . . . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    11: 21: . . . . . . . . . . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    11: 21: . . . . . . . . . . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    11: 21: . . . . . . . . . . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |    11: 21: . . . . . . . . . . . . . . . . . . . . . . . . . . . IDENT x\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: x}\n[Go+ CI/Test]   |    11: 22: . . . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    11: 22: . . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    11: 22: . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    11: 22: . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    11: 22: . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    11: 22: . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    11: 22: . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    11: 22: . . . . . . . . . . . . . . . . . . . . \";\"\n[Go+ CI/Test]   |    12:  2: . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    12:  2: . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    12:  2: . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    12:  2: . . . . . . . . . . . . . . . . . \"}\"\n[Go+ CI/Test]   |    12:  3: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:2443: ast.LambdaExpr{Lhs: [x]}\n[Go+ CI/Test]   |    12:  3: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    12:  3: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    12:  3: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    12:  3: . . . . . . . . . . . . . \",\"\n[Go+ CI/Test]   |    13:  1: . . . . . . . . . . . . )\n[Go+ CI/Test]   |    13:  1: . . . . . . . . . . . . \"}\"\n[Go+ CI/Test]   |    13:  2: . . . . . . . . . . . )\n[Go+ CI/Test]   |    13:  2: . . . . . . . . . . )\n[Go+ CI/Test]   |    13:  2: . . . . . . . . . )\n[Go+ CI/Test]   |    13:  2: . . . . . . . . )\n[Go+ CI/Test]   |    13:  2: . . . . . . . )\n[Go+ CI/Test]   |    13:  2: . . . . . . )\n[Go+ CI/Test]   |    13:  2: . . . . . )\n[Go+ CI/Test]   |    13:  2: . . . . )\n[Go+ CI/Test]   |    13:  2: . . . . \";\"\n[Go+ CI/Test]   |    13:  3: . . . )\n[Go+ CI/Test]   |    13:  3: . . )\n[Go+ CI/Test]   |    13:  3: . )\n[Go+ CI/Test]   |    13:  3: )\n[Go+ CI/Test]   | === RUN   TestFromTestdata/listcompr\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parserdir_test.go:90: Parsing /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/_testdata/listcompr\n[Go+ CI/Test]   |     1:  1: File (\n[Go+ CI/Test]   |     1:  1: . Declaration (\n[Go+ CI/Test]   |     1:  1: . . StatementList (\n[Go+ CI/Test]   |     1:  1: . . . Statement (\n[Go+ CI/Test]   |     1:  1: . . . . SimpleStmt (\n[Go+ CI/Test]   |     1:  1: . . . . . ExpressionList (\n[Go+ CI/Test]   |     1:  1: . . . . . . Expression (\n[Go+ CI/Test]   |     1:  1: . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     1:  1: . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     1:  1: . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     1:  1: . . . . . . . . . . Operand (\n[Go+ CI/Test]   |     1:  1: . . . . . . . . . . . IDENT y\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: y}\n[Go+ CI/Test]   |     1:  3: . . . . . . . . . . )\n[Go+ CI/Test]   |     1:  3: . . . . . . . . . )\n[Go+ CI/Test]   |     1:  3: . . . . . . . . )\n[Go+ CI/Test]   |     1:  3: . . . . . . . )\n[Go+ CI/Test]   |     1:  3: . . . . . . )\n[Go+ CI/Test]   |     1:  3: . . . . . )\n[Go+ CI/Test]   |     1:  3: . . . . . \":=\"\n[Go+ CI/Test]   |     1:  6: . . . . . ExpressionList (\n[Go+ CI/Test]   |     1:  6: . . . . . . Expression (\n[Go+ CI/Test]   |     1:  6: . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     1:  6: . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     1:  6: . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     1:  6: . . . . . . . . . . Operand (\n[Go+ CI/Test]   |     1:  6: . . . . . . . . . . . ArrayType (\n[Go+ CI/Test]   |     1:  6: . . . . . . . . . . . . \"[\"\n[Go+ CI/Test]   |     1:  7: . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |     1:  7: . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     1:  7: . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     1:  7: . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     1:  7: . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |     1:  7: . . . . . . . . . . . . . . . . . IDENT x\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: x}\n[Go+ CI/Test]   |     1:  8: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     1:  8: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     1:  8: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     1:  8: . . . . . . . . . . . . . . \"*\"\n[Go+ CI/Test]   |     1:  9: . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     1:  9: . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     1:  9: . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     1:  9: . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |     1:  9: . . . . . . . . . . . . . . . . . . IDENT x\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: x}\n[Go+ CI/Test]   |     1: 11: . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     1: 11: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     1: 11: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     1: 11: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     1: 11: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     1: 11: . . . . . . . . . . . . )\n[Go+ CI/Test]   |     1: 11: . . . . . . . . . . . . ForPhrase (\n[Go+ CI/Test]   |     1: 11: . . . . . . . . . . . . . \"for\"\n[Go+ CI/Test]   |     1: 15: . . . . . . . . . . . . . IDENT x\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: x}\n[Go+ CI/Test]   |     1: 17: . . . . . . . . . . . . . \"<-\"\n[Go+ CI/Test]   |     1: 20: . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |     1: 20: . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     1: 20: . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     1: 20: . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     1: 20: . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |     1: 20: . . . . . . . . . . . . . . . . . . ArrayType (\n[Go+ CI/Test]   |     1: 20: . . . . . . . . . . . . . . . . . . . \"[\"\n[Go+ CI/Test]   |     1: 21: . . . . . . . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |     1: 21: . . . . . . . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     1: 21: . . . . . . . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     1: 21: . . . . . . . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     1: 21: . . . . . . . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: INT, Value: 1}\n[Go+ CI/Test]   |     1: 21: . . . . . . . . . . . . . . . . . . . . . . . . INT 1\n[Go+ CI/Test]   |     1: 22: . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     1: 22: . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     1: 22: . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     1: 22: . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     1: 22: . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     1: 22: . . . . . . . . . . . . . . . . . . . \"]\"\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:847: ast.SliceLit{Elts: [0xc0004dcca0]}\n[Go+ CI/Test]   |     1: 23: . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     1: 23: . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     1: 23: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     1: 23: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     1: 23: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     1: 23: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     1: 23: . . . . . . . . . . . . )\n[Go+ CI/Test]   |     1: 23: . . . . . . . . . . . . \"]\"\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:820: ast.ComprehensionExpr{Tok: [, Elt: &{x 8 * x}, Fors: [0xc0005120c0]}\n[Go+ CI/Test]   |     1: 24: . . . . . . . . . . . )\n[Go+ CI/Test]   |     1: 24: . . . . . . . . . . )\n[Go+ CI/Test]   |     1: 24: . . . . . . . . . )\n[Go+ CI/Test]   |     1: 24: . . . . . . . . )\n[Go+ CI/Test]   |     1: 24: . . . . . . . )\n[Go+ CI/Test]   |     1: 24: . . . . . . )\n[Go+ CI/Test]   |     1: 24: . . . . . )\n[Go+ CI/Test]   |     1: 24: . . . . )\n[Go+ CI/Test]   |     1: 24: . . . . \";\"\n[Go+ CI/Test]   |     2:  1: . . . )\n[Go+ CI/Test]   |     2:  1: . . . Statement (\n[Go+ CI/Test]   |     2:  1: . . . . SimpleStmt (\n[Go+ CI/Test]   |     2:  1: . . . . . ExpressionList (\n[Go+ CI/Test]   |     2:  1: . . . . . . Expression (\n[Go+ CI/Test]   |     2:  1: . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     2:  1: . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     2:  1: . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     2:  1: . . . . . . . . . . Operand (\n[Go+ CI/Test]   |     2:  1: . . . . . . . . . . . IDENT println\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: println}\n[Go+ CI/Test]   |     2:  8: . . . . . . . . . . )\n[Go+ CI/Test]   |     2:  8: . . . . . . . . . . CallOrConversion (\n[Go+ CI/Test]   |     2:  8: . . . . . . . . . . . \"(\"\n[Go+ CI/Test]   |     2:  9: . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |     2:  9: . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     2:  9: . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     2:  9: . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     2:  9: . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |     2:  9: . . . . . . . . . . . . . . . . IDENT y\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: y}\n[Go+ CI/Test]   |     2: 10: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 10: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 10: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 10: . . . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 10: . . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 10: . . . . . . . . . . . \")\"\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1878: ast.CallExpr{Fun: println, Ellipsis: false, isCmd: false}\n[Go+ CI/Test]   |     2: 11: . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 11: . . . . . . . . . )\n[Go+ CI/Test]   |     2: 11: . . . . . . . . )\n[Go+ CI/Test]   |     2: 11: . . . . . . . )\n[Go+ CI/Test]   |     2: 11: . . . . . . )\n[Go+ CI/Test]   |     2: 11: . . . . . )\n[Go+ CI/Test]   |     2: 11: . . . . )\n[Go+ CI/Test]   |     2: 11: . . . . \";\"\n[Go+ CI/Test]   |     4:  1: . . . )\n[Go+ CI/Test]   |     4:  1: . . . Statement (\n[Go+ CI/Test]   |     4:  1: . . . . SimpleStmt (\n[Go+ CI/Test]   |     4:  1: . . . . . ExpressionList (\n[Go+ CI/Test]   |     4:  1: . . . . . . Expression (\n[Go+ CI/Test]   |     4:  1: . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     4:  1: . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     4:  1: . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     4:  1: . . . . . . . . . . Operand (\n[Go+ CI/Test]   |     4:  1: . . . . . . . . . . . IDENT y\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: y}\n[Go+ CI/Test]   |     4:  3: . . . . . . . . . . )\n[Go+ CI/Test]   |     4:  3: . . . . . . . . . )\n[Go+ CI/Test]   |     4:  3: . . . . . . . . )\n[Go+ CI/Test]   |     4:  3: . . . . . . . )\n[Go+ CI/Test]   |     4:  3: . . . . . . )\n[Go+ CI/Test]   |     4:  3: . . . . . )\n[Go+ CI/Test]   |     4:  3: . . . . . \"=\"\n[Go+ CI/Test]   |     4:  5: . . . . . ExpressionList (\n[Go+ CI/Test]   |     4:  5: . . . . . . Expression (\n[Go+ CI/Test]   |     4:  5: . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     4:  5: . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     4:  5: . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     4:  5: . . . . . . . . . . Operand (\n[Go+ CI/Test]   |     4:  5: . . . . . . . . . . . ArrayType (\n[Go+ CI/Test]   |     4:  5: . . . . . . . . . . . . \"[\"\n[Go+ CI/Test]   |     4:  6: . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |     4:  6: . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     4:  6: . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     4:  6: . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     4:  6: . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |     4:  6: . . . . . . . . . . . . . . . . . IDENT x\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: x}\n[Go+ CI/Test]   |     4:  7: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     4:  7: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     4:  7: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     4:  7: . . . . . . . . . . . . . . \"*\"\n[Go+ CI/Test]   |     4:  8: . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     4:  8: . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     4:  8: . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     4:  8: . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |     4:  8: . . . . . . . . . . . . . . . . . . IDENT x\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: x}\n[Go+ CI/Test]   |     4: 10: . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     4: 10: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     4: 10: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     4: 10: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     4: 10: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     4: 10: . . . . . . . . . . . . )\n[Go+ CI/Test]   |     4: 10: . . . . . . . . . . . . ForPhrase (\n[Go+ CI/Test]   |     4: 10: . . . . . . . . . . . . . \"for\"\n[Go+ CI/Test]   |     4: 14: . . . . . . . . . . . . . IDENT x\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: x}\n[Go+ CI/Test]   |     4: 16: . . . . . . . . . . . . . \"<-\"\n[Go+ CI/Test]   |     4: 19: . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |     4: 19: . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     4: 19: . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     4: 19: . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     4: 19: . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |     4: 19: . . . . . . . . . . . . . . . . . . ArrayType (\n[Go+ CI/Test]   |     4: 19: . . . . . . . . . . . . . . . . . . . \"[\"\n[Go+ CI/Test]   |     4: 20: . . . . . . . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |     4: 20: . . . . . . . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     4: 20: . . . . . . . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     4: 20: . . . . . . . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     4: 20: . . . . . . . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: INT, Value: 1}\n[Go+ CI/Test]   |     4: 20: . . . . . . . . . . . . . . . . . . . . . . . . INT 1\n[Go+ CI/Test]   |     4: 21: . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     4: 21: . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     4: 21: . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     4: 21: . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     4: 21: . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     4: 21: . . . . . . . . . . . . . . . . . . . \",\"\n[Go+ CI/Test]   |     4: 23: . . . . . . . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |     4: 23: . . . . . . . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     4: 23: . . . . . . . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     4: 23: . . . . . . . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     4: 23: . . . . . . . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: INT, Value: 3}\n[Go+ CI/Test]   |     4: 23: . . . . . . . . . . . . . . . . . . . . . . . . INT 3\n[Go+ CI/Test]   |     4: 24: . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     4: 24: . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     4: 24: . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     4: 24: . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     4: 24: . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     4: 24: . . . . . . . . . . . . . . . . . . . \",\"\n[Go+ CI/Test]   |     4: 26: . . . . . . . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |     4: 26: . . . . . . . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     4: 26: . . . . . . . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     4: 26: . . . . . . . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     4: 26: . . . . . . . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: INT, Value: 5}\n[Go+ CI/Test]   |     4: 26: . . . . . . . . . . . . . . . . . . . . . . . . INT 5\n[Go+ CI/Test]   |     4: 27: . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     4: 27: . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     4: 27: . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     4: 27: . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     4: 27: . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     4: 27: . . . . . . . . . . . . . . . . . . . \",\"\n[Go+ CI/Test]   |     4: 29: . . . . . . . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |     4: 29: . . . . . . . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     4: 29: . . . . . . . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     4: 29: . . . . . . . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     4: 29: . . . . . . . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: INT, Value: 7}\n[Go+ CI/Test]   |     4: 29: . . . . . . . . . . . . . . . . . . . . . . . . INT 7\n[Go+ CI/Test]   |     4: 30: . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     4: 30: . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     4: 30: . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     4: 30: . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     4: 30: . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     4: 30: . . . . . . . . . . . . . . . . . . . \",\"\n[Go+ CI/Test]   |     4: 32: . . . . . . . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |     4: 32: . . . . . . . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     4: 32: . . . . . . . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     4: 32: . . . . . . . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     4: 32: . . . . . . . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: INT, Value: 11}\n[Go+ CI/Test]   |     4: 32: . . . . . . . . . . . . . . . . . . . . . . . . INT 11\n[Go+ CI/Test]   |     4: 34: . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     4: 34: . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     4: 34: . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     4: 34: . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     4: 34: . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     4: 34: . . . . . . . . . . . . . . . . . . . \"]\"\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:888: ast.SliceLit{Elts: [0xc0004dcdc0 0xc0004dcde0 0xc0004dce00 0xc0004dce20 0xc0004dce40]}\n[Go+ CI/Test]   |     4: 36: . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     4: 36: . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     4: 36: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     4: 36: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     4: 36: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     4: 36: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     4: 36: . . . . . . . . . . . . . \"if\"\n[Go+ CI/Test]   |     4: 39: . . . . . . . . . . . . . SimpleStmt (\n[Go+ CI/Test]   |     4: 39: . . . . . . . . . . . . . . ExpressionList (\n[Go+ CI/Test]   |     4: 39: . . . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |     4: 39: . . . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     4: 39: . . . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     4: 39: . . . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     4: 39: . . . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |     4: 39: . . . . . . . . . . . . . . . . . . . . IDENT x\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: x}\n[Go+ CI/Test]   |     4: 41: . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     4: 41: . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     4: 41: . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     4: 41: . . . . . . . . . . . . . . . . . \">\"\n[Go+ CI/Test]   |     4: 43: . . . . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     4: 43: . . . . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     4: 43: . . . . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     4: 43: . . . . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: INT, Value: 3}\n[Go+ CI/Test]   |     4: 43: . . . . . . . . . . . . . . . . . . . . . INT 3\n[Go+ CI/Test]   |     4: 44: . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     4: 44: . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     4: 44: . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     4: 44: . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     4: 44: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     4: 44: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     4: 44: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     4: 44: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     4: 44: . . . . . . . . . . . . )\n[Go+ CI/Test]   |     4: 44: . . . . . . . . . . . . \"]\"\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:820: ast.ComprehensionExpr{Tok: [, Elt: &{x 43 * x}, Fors: [0xc000512120]}\n[Go+ CI/Test]   |     4: 45: . . . . . . . . . . . )\n[Go+ CI/Test]   |     4: 45: . . . . . . . . . . )\n[Go+ CI/Test]   |     4: 45: . . . . . . . . . )\n[Go+ CI/Test]   |     4: 45: . . . . . . . . )\n[Go+ CI/Test]   |     4: 45: . . . . . . . )\n[Go+ CI/Test]   |     4: 45: . . . . . . )\n[Go+ CI/Test]   |     4: 45: . . . . . )\n[Go+ CI/Test]   |     4: 45: . . . . )\n[Go+ CI/Test]   |     4: 45: . . . . \";\"\n[Go+ CI/Test]   |     5:  1: . . . )\n[Go+ CI/Test]   |     5:  1: . . . Statement (\n[Go+ CI/Test]   |     5:  1: . . . . SimpleStmt (\n[Go+ CI/Test]   |     5:  1: . . . . . ExpressionList (\n[Go+ CI/Test]   |     5:  1: . . . . . . Expression (\n[Go+ CI/Test]   |     5:  1: . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     5:  1: . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     5:  1: . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     5:  1: . . . . . . . . . . Operand (\n[Go+ CI/Test]   |     5:  1: . . . . . . . . . . . IDENT println\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: println}\n[Go+ CI/Test]   |     5:  8: . . . . . . . . . . )\n[Go+ CI/Test]   |     5:  8: . . . . . . . . . . CallOrConversion (\n[Go+ CI/Test]   |     5:  8: . . . . . . . . . . . \"(\"\n[Go+ CI/Test]   |     5:  9: . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |     5:  9: . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     5:  9: . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     5:  9: . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     5:  9: . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |     5:  9: . . . . . . . . . . . . . . . . IDENT y\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: y}\n[Go+ CI/Test]   |     5: 10: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     5: 10: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     5: 10: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     5: 10: . . . . . . . . . . . . )\n[Go+ CI/Test]   |     5: 10: . . . . . . . . . . . )\n[Go+ CI/Test]   |     5: 10: . . . . . . . . . . . \")\"\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1878: ast.CallExpr{Fun: println, Ellipsis: false, isCmd: false}\n[Go+ CI/Test]   |     5: 11: . . . . . . . . . . )\n[Go+ CI/Test]   |     5: 11: . . . . . . . . . )\n[Go+ CI/Test]   |     5: 11: . . . . . . . . )\n[Go+ CI/Test]   |     5: 11: . . . . . . . )\n[Go+ CI/Test]   |     5: 11: . . . . . . )\n[Go+ CI/Test]   |     5: 11: . . . . . )\n[Go+ CI/Test]   |     5: 11: . . . . )\n[Go+ CI/Test]   |     5: 11: . . . . \";\"\n[Go+ CI/Test]   |     7:  1: . . . )\n[Go+ CI/Test]   |     7:  1: . . . Statement (\n[Go+ CI/Test]   |     7:  1: . . . . SimpleStmt (\n[Go+ CI/Test]   |     7:  1: . . . . . ExpressionList (\n[Go+ CI/Test]   |     7:  1: . . . . . . Expression (\n[Go+ CI/Test]   |     7:  1: . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     7:  1: . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     7:  1: . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     7:  1: . . . . . . . . . . Operand (\n[Go+ CI/Test]   |     7:  1: . . . . . . . . . . . IDENT z\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: z}\n[Go+ CI/Test]   |     7:  3: . . . . . . . . . . )\n[Go+ CI/Test]   |     7:  3: . . . . . . . . . )\n[Go+ CI/Test]   |     7:  3: . . . . . . . . )\n[Go+ CI/Test]   |     7:  3: . . . . . . . )\n[Go+ CI/Test]   |     7:  3: . . . . . . )\n[Go+ CI/Test]   |     7:  3: . . . . . )\n[Go+ CI/Test]   |     7:  3: . . . . . \":=\"\n[Go+ CI/Test]   |     7:  6: . . . . . ExpressionList (\n[Go+ CI/Test]   |     7:  6: . . . . . . Expression (\n[Go+ CI/Test]   |     7:  6: . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     7:  6: . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     7:  6: . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     7:  6: . . . . . . . . . . Operand (\n[Go+ CI/Test]   |     7:  6: . . . . . . . . . . . ArrayType (\n[Go+ CI/Test]   |     7:  6: . . . . . . . . . . . . \"[\"\n[Go+ CI/Test]   |     7:  7: . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |     7:  7: . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     7:  7: . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     7:  7: . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     7:  7: . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |     7:  7: . . . . . . . . . . . . . . . . . IDENT i\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: i}\n[Go+ CI/Test]   |     7:  8: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     7:  8: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     7:  8: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     7:  8: . . . . . . . . . . . . . . \"+\"\n[Go+ CI/Test]   |     7:  9: . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     7:  9: . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     7:  9: . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     7:  9: . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |     7:  9: . . . . . . . . . . . . . . . . . . IDENT v\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: v}\n[Go+ CI/Test]   |     7: 11: . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     7: 11: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     7: 11: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     7: 11: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     7: 11: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     7: 11: . . . . . . . . . . . . )\n[Go+ CI/Test]   |     7: 11: . . . . . . . . . . . . ForPhrase (\n[Go+ CI/Test]   |     7: 11: . . . . . . . . . . . . . \"for\"\n[Go+ CI/Test]   |     7: 15: . . . . . . . . . . . . . IDENT i\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: i}\n[Go+ CI/Test]   |     7: 16: . . . . . . . . . . . . . \",\"\n[Go+ CI/Test]   |     7: 18: . . . . . . . . . . . . . IDENT v\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: v}\n[Go+ CI/Test]   |     7: 20: . . . . . . . . . . . . . \"<-\"\n[Go+ CI/Test]   |     7: 23: . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |     7: 23: . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     7: 23: . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     7: 23: . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     7: 23: . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |     7: 23: . . . . . . . . . . . . . . . . . . ArrayType (\n[Go+ CI/Test]   |     7: 23: . . . . . . . . . . . . . . . . . . . \"[\"\n[Go+ CI/Test]   |     7: 24: . . . . . . . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |     7: 24: . . . . . . . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     7: 24: . . . . . . . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     7: 24: . . . . . . . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     7: 24: . . . . . . . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: INT, Value: 1}\n[Go+ CI/Test]   |     7: 24: . . . . . . . . . . . . . . . . . . . . . . . . INT 1\n[Go+ CI/Test]   |     7: 25: . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     7: 25: . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     7: 25: . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     7: 25: . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     7: 25: . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     7: 25: . . . . . . . . . . . . . . . . . . . \",\"\n[Go+ CI/Test]   |     7: 27: . . . . . . . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |     7: 27: . . . . . . . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     7: 27: . . . . . . . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     7: 27: . . . . . . . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     7: 27: . . . . . . . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: INT, Value: 3}\n[Go+ CI/Test]   |     7: 27: . . . . . . . . . . . . . . . . . . . . . . . . INT 3\n[Go+ CI/Test]   |     7: 28: . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     7: 28: . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     7: 28: . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     7: 28: . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     7: 28: . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     7: 28: . . . . . . . . . . . . . . . . . . . \",\"\n[Go+ CI/Test]   |     7: 30: . . . . . . . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |     7: 30: . . . . . . . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     7: 30: . . . . . . . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     7: 30: . . . . . . . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     7: 30: . . . . . . . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: INT, Value: 5}\n[Go+ CI/Test]   |     7: 30: . . . . . . . . . . . . . . . . . . . . . . . . INT 5\n[Go+ CI/Test]   |     7: 31: . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     7: 31: . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     7: 31: . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     7: 31: . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     7: 31: . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     7: 31: . . . . . . . . . . . . . . . . . . . \",\"\n[Go+ CI/Test]   |     7: 33: . . . . . . . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |     7: 33: . . . . . . . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     7: 33: . . . . . . . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     7: 33: . . . . . . . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     7: 33: . . . . . . . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: INT, Value: 7}\n[Go+ CI/Test]   |     7: 33: . . . . . . . . . . . . . . . . . . . . . . . . INT 7\n[Go+ CI/Test]   |     7: 34: . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     7: 34: . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     7: 34: . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     7: 34: . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     7: 34: . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     7: 34: . . . . . . . . . . . . . . . . . . . \",\"\n[Go+ CI/Test]   |     7: 36: . . . . . . . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |     7: 36: . . . . . . . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     7: 36: . . . . . . . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     7: 36: . . . . . . . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     7: 36: . . . . . . . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: INT, Value: 11}\n[Go+ CI/Test]   |     7: 36: . . . . . . . . . . . . . . . . . . . . . . . . INT 11\n[Go+ CI/Test]   |     7: 38: . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     7: 38: . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     7: 38: . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     7: 38: . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     7: 38: . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     7: 38: . . . . . . . . . . . . . . . . . . . \"]\"\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:888: ast.SliceLit{Elts: [0xc0004dcf80 0xc0004dcfa0 0xc0004dcfc0 0xc0004dcfe0 0xc0004dd000]}\n[Go+ CI/Test]   |     7: 40: . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     7: 40: . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     7: 40: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     7: 40: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     7: 40: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     7: 40: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     7: 40: . . . . . . . . . . . . . \"if\"\n[Go+ CI/Test]   |     7: 43: . . . . . . . . . . . . . SimpleStmt (\n[Go+ CI/Test]   |     7: 43: . . . . . . . . . . . . . . ExpressionList (\n[Go+ CI/Test]   |     7: 43: . . . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |     7: 43: . . . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     7: 43: . . . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     7: 43: . . . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     7: 43: . . . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |     7: 43: . . . . . . . . . . . . . . . . . . . . IDENT t\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: t}\n[Go+ CI/Test]   |     7: 45: . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     7: 45: . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     7: 45: . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     7: 45: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     7: 45: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     7: 45: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     7: 45: . . . . . . . . . . . . . . \":=\"\n[Go+ CI/Test]   |     7: 48: . . . . . . . . . . . . . . ExpressionList (\n[Go+ CI/Test]   |     7: 48: . . . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |     7: 48: . . . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     7: 48: . . . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     7: 48: . . . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     7: 48: . . . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |     7: 48: . . . . . . . . . . . . . . . . . . . . IDENT i\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: i}\n[Go+ CI/Test]   |     7: 50: . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     7: 50: . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     7: 50: . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     7: 50: . . . . . . . . . . . . . . . . . \"%\"\n[Go+ CI/Test]   |     7: 52: . . . . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     7: 52: . . . . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     7: 52: . . . . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     7: 52: . . . . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: INT, Value: 2}\n[Go+ CI/Test]   |     7: 52: . . . . . . . . . . . . . . . . . . . . . INT 2\n[Go+ CI/Test]   |     7: 53: . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     7: 53: . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     7: 53: . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     7: 53: . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     7: 53: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     7: 53: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     7: 53: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     7: 53: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     7: 53: . . . . . . . . . . . . . \";\"\n[Go+ CI/Test]   |     7: 55: . . . . . . . . . . . . . SimpleStmt (\n[Go+ CI/Test]   |     7: 55: . . . . . . . . . . . . . . ExpressionList (\n[Go+ CI/Test]   |     7: 55: . . . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |     7: 55: . . . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     7: 55: . . . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     7: 55: . . . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     7: 55: . . . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |     7: 55: . . . . . . . . . . . . . . . . . . . . IDENT t\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: t}\n[Go+ CI/Test]   |     7: 57: . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     7: 57: . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     7: 57: . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     7: 57: . . . . . . . . . . . . . . . . . \"==\"\n[Go+ CI/Test]   |     7: 60: . . . . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     7: 60: . . . . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     7: 60: . . . . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     7: 60: . . . . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: INT, Value: 1}\n[Go+ CI/Test]   |     7: 60: . . . . . . . . . . . . . . . . . . . . . INT 1\n[Go+ CI/Test]   |     7: 61: . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     7: 61: . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     7: 61: . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     7: 61: . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     7: 61: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     7: 61: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     7: 61: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     7: 61: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     7: 61: . . . . . . . . . . . . )\n[Go+ CI/Test]   |     7: 61: . . . . . . . . . . . . \"]\"\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:820: ast.ComprehensionExpr{Tok: [, Elt: &{i 101 + v}, Fors: [0xc000512180]}\n[Go+ CI/Test]   |     7: 62: . . . . . . . . . . . )\n[Go+ CI/Test]   |     7: 62: . . . . . . . . . . )\n[Go+ CI/Test]   |     7: 62: . . . . . . . . . )\n[Go+ CI/Test]   |     7: 62: . . . . . . . . )\n[Go+ CI/Test]   |     7: 62: . . . . . . . )\n[Go+ CI/Test]   |     7: 62: . . . . . . )\n[Go+ CI/Test]   |     7: 62: . . . . . )\n[Go+ CI/Test]   |     7: 62: . . . . )\n[Go+ CI/Test]   |     7: 62: . . . . \";\"\n[Go+ CI/Test]   |     8:  1: . . . )\n[Go+ CI/Test]   |     8:  1: . . . Statement (\n[Go+ CI/Test]   |     8:  1: . . . . SimpleStmt (\n[Go+ CI/Test]   |     8:  1: . . . . . ExpressionList (\n[Go+ CI/Test]   |     8:  1: . . . . . . Expression (\n[Go+ CI/Test]   |     8:  1: . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     8:  1: . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     8:  1: . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     8:  1: . . . . . . . . . . Operand (\n[Go+ CI/Test]   |     8:  1: . . . . . . . . . . . IDENT println\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: println}\n[Go+ CI/Test]   |     8:  8: . . . . . . . . . . )\n[Go+ CI/Test]   |     8:  8: . . . . . . . . . . CallOrConversion (\n[Go+ CI/Test]   |     8:  8: . . . . . . . . . . . \"(\"\n[Go+ CI/Test]   |     8:  9: . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |     8:  9: . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     8:  9: . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     8:  9: . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     8:  9: . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |     8:  9: . . . . . . . . . . . . . . . . IDENT z\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: z}\n[Go+ CI/Test]   |     8: 10: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     8: 10: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     8: 10: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     8: 10: . . . . . . . . . . . . )\n[Go+ CI/Test]   |     8: 10: . . . . . . . . . . . )\n[Go+ CI/Test]   |     8: 10: . . . . . . . . . . . \")\"\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1878: ast.CallExpr{Fun: println, Ellipsis: false, isCmd: false}\n[Go+ CI/Test]   |     8: 11: . . . . . . . . . . )\n[Go+ CI/Test]   |     8: 11: . . . . . . . . . )\n[Go+ CI/Test]   |     8: 11: . . . . . . . . )\n[Go+ CI/Test]   |     8: 11: . . . . . . . )\n[Go+ CI/Test]   |     8: 11: . . . . . . )\n[Go+ CI/Test]   |     8: 11: . . . . . )\n[Go+ CI/Test]   |     8: 11: . . . . )\n[Go+ CI/Test]   |     8: 11: . . . . \";\"\n[Go+ CI/Test]   |    10:  1: . . . )\n[Go+ CI/Test]   |    10:  1: . . . Statement (\n[Go+ CI/Test]   |    10:  1: . . . . SimpleStmt (\n[Go+ CI/Test]   |    10:  1: . . . . . ExpressionList (\n[Go+ CI/Test]   |    10:  1: . . . . . . Expression (\n[Go+ CI/Test]   |    10:  1: . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    10:  1: . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    10:  1: . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    10:  1: . . . . . . . . . . Operand (\n[Go+ CI/Test]   |    10:  1: . . . . . . . . . . . IDENT println\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: println}\n[Go+ CI/Test]   |    10:  8: . . . . . . . . . . )\n[Go+ CI/Test]   |    10:  8: . . . . . . . . . . CallOrConversion (\n[Go+ CI/Test]   |    10:  8: . . . . . . . . . . . \"(\"\n[Go+ CI/Test]   |    10:  9: . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |    10:  9: . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    10:  9: . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    10:  9: . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    10:  9: . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |    10:  9: . . . . . . . . . . . . . . . . ArrayType (\n[Go+ CI/Test]   |    10:  9: . . . . . . . . . . . . . . . . . \"[\"\n[Go+ CI/Test]   |    10: 10: . . . . . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |    10: 10: . . . . . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    10: 10: . . . . . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    10: 10: . . . . . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    10: 10: . . . . . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |    10: 10: . . . . . . . . . . . . . . . . . . . . . . IDENT k\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: k}\n[Go+ CI/Test]   |    10: 11: . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    10: 11: . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    10: 11: . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    10: 11: . . . . . . . . . . . . . . . . . . . \"+\"\n[Go+ CI/Test]   |    10: 12: . . . . . . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    10: 12: . . . . . . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    10: 12: . . . . . . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    10: 12: . . . . . . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: STRING, Value: \",\"}\n[Go+ CI/Test]   |    10: 12: . . . . . . . . . . . . . . . . . . . . . . . STRING \",\"\n[Go+ CI/Test]   |    10: 15: . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    10: 15: . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    10: 15: . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    10: 15: . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    10: 15: . . . . . . . . . . . . . . . . . . . \"+\"\n[Go+ CI/Test]   |    10: 16: . . . . . . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    10: 16: . . . . . . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    10: 16: . . . . . . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    10: 16: . . . . . . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |    10: 16: . . . . . . . . . . . . . . . . . . . . . . . IDENT s\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: s}\n[Go+ CI/Test]   |    10: 18: . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    10: 18: . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    10: 18: . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    10: 18: . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    10: 18: . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    10: 18: . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    10: 18: . . . . . . . . . . . . . . . . . ForPhrase (\n[Go+ CI/Test]   |    10: 18: . . . . . . . . . . . . . . . . . . \"for\"\n[Go+ CI/Test]   |    10: 22: . . . . . . . . . . . . . . . . . . IDENT k\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: k}\n[Go+ CI/Test]   |    10: 23: . . . . . . . . . . . . . . . . . . \",\"\n[Go+ CI/Test]   |    10: 25: . . . . . . . . . . . . . . . . . . IDENT s\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: s}\n[Go+ CI/Test]   |    10: 27: . . . . . . . . . . . . . . . . . . \"<-\"\n[Go+ CI/Test]   |    10: 30: . . . . . . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |    10: 30: . . . . . . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    10: 30: . . . . . . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    10: 30: . . . . . . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    10: 30: . . . . . . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |    10: 30: . . . . . . . . . . . . . . . . . . . . . . . LiteralValue (\n[Go+ CI/Test]   |    10: 30: . . . . . . . . . . . . . . . . . . . . . . . . \"{\"\n[Go+ CI/Test]   |    10: 31: . . . . . . . . . . . . . . . . . . . . . . . . ElementList (\n[Go+ CI/Test]   |    10: 31: . . . . . . . . . . . . . . . . . . . . . . . . . Element (\n[Go+ CI/Test]   |    10: 31: . . . . . . . . . . . . . . . . . . . . . . . . . . Element (\n[Go+ CI/Test]   |    10: 31: . . . . . . . . . . . . . . . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |    10: 31: . . . . . . . . . . . . . . . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    10: 31: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    10: 31: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    10: 31: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: STRING, Value: \"Hello\"}\n[Go+ CI/Test]   |    10: 31: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . STRING \"Hello\"\n[Go+ CI/Test]   |    10: 38: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    10: 38: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    10: 38: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    10: 38: . . . . . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    10: 38: . . . . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    10: 38: . . . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    10: 38: . . . . . . . . . . . . . . . . . . . . . . . . . . \":\"\n[Go+ CI/Test]   |    10: 40: . . . . . . . . . . . . . . . . . . . . . . . . . . Element (\n[Go+ CI/Test]   |    10: 40: . . . . . . . . . . . . . . . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |    10: 40: . . . . . . . . . . . . . . . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    10: 40: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    10: 40: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    10: 40: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: STRING, Value: \"xsw\"}\n[Go+ CI/Test]   |    10: 40: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . STRING \"xsw\"\n[Go+ CI/Test]   |    10: 45: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    10: 45: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    10: 45: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    10: 45: . . . . . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    10: 45: . . . . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    10: 45: . . . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    10: 45: . . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    10: 45: . . . . . . . . . . . . . . . . . . . . . . . . . \",\"\n[Go+ CI/Test]   |    10: 47: . . . . . . . . . . . . . . . . . . . . . . . . . Element (\n[Go+ CI/Test]   |    10: 47: . . . . . . . . . . . . . . . . . . . . . . . . . . Element (\n[Go+ CI/Test]   |    10: 47: . . . . . . . . . . . . . . . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |    10: 47: . . . . . . . . . . . . . . . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    10: 47: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    10: 47: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    10: 47: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: STRING, Value: \"Hi\"}\n[Go+ CI/Test]   |    10: 47: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . STRING \"Hi\"\n[Go+ CI/Test]   |    10: 51: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    10: 51: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    10: 51: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    10: 51: . . . . . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    10: 51: . . . . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    10: 51: . . . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    10: 51: . . . . . . . . . . . . . . . . . . . . . . . . . . \":\"\n[Go+ CI/Test]   |    10: 53: . . . . . . . . . . . . . . . . . . . . . . . . . . Element (\n[Go+ CI/Test]   |    10: 53: . . . . . . . . . . . . . . . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |    10: 53: . . . . . . . . . . . . . . . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    10: 53: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    10: 53: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    10: 53: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: STRING, Value: \"Go+\"}\n[Go+ CI/Test]   |    10: 53: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . STRING \"Go+\"\n[Go+ CI/Test]   |    10: 58: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    10: 58: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    10: 58: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    10: 58: . . . . . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    10: 58: . . . . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    10: 58: . . . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    10: 58: . . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    10: 58: . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    10: 58: . . . . . . . . . . . . . . . . . . . . . . . . \"}\"\n[Go+ CI/Test]   |    10: 59: . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    10: 59: . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    10: 59: . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    10: 59: . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    10: 59: . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    10: 59: . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    10: 59: . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    10: 59: . . . . . . . . . . . . . . . . . \"]\"\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:820: ast.ComprehensionExpr{Tok: [, Elt: &{0xc0004e4f90 182 + s}, Fors: [0xc0005121e0]}\n[Go+ CI/Test]   |    10: 60: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    10: 60: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    10: 60: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    10: 60: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    10: 60: . . . . . . . . . . . . )\n[Go+ CI/Test]   |    10: 60: . . . . . . . . . . . )\n[Go+ CI/Test]   |    10: 60: . . . . . . . . . . . \")\"\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1878: ast.CallExpr{Fun: println, Ellipsis: false, isCmd: false}\n[Go+ CI/Test]   |    10: 61: . . . . . . . . . . )\n[Go+ CI/Test]   |    10: 61: . . . . . . . . . )\n[Go+ CI/Test]   |    10: 61: . . . . . . . . )\n[Go+ CI/Test]   |    10: 61: . . . . . . . )\n[Go+ CI/Test]   |    10: 61: . . . . . . )\n[Go+ CI/Test]   |    10: 61: . . . . . )\n[Go+ CI/Test]   |    10: 61: . . . . )\n[Go+ CI/Test]   |    10: 61: . . . . \";\"\n[Go+ CI/Test]   |    12:  1: . . . )\n[Go+ CI/Test]   |    12:  1: . . . Statement (\n[Go+ CI/Test]   |    12:  1: . . . . SimpleStmt (\n[Go+ CI/Test]   |    12:  1: . . . . . ExpressionList (\n[Go+ CI/Test]   |    12:  1: . . . . . . Expression (\n[Go+ CI/Test]   |    12:  1: . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    12:  1: . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    12:  1: . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    12:  1: . . . . . . . . . . Operand (\n[Go+ CI/Test]   |    12:  1: . . . . . . . . . . . IDENT arr\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: arr}\n[Go+ CI/Test]   |    12:  5: . . . . . . . . . . )\n[Go+ CI/Test]   |    12:  5: . . . . . . . . . )\n[Go+ CI/Test]   |    12:  5: . . . . . . . . )\n[Go+ CI/Test]   |    12:  5: . . . . . . . )\n[Go+ CI/Test]   |    12:  5: . . . . . . )\n[Go+ CI/Test]   |    12:  5: . . . . . )\n[Go+ CI/Test]   |    12:  5: . . . . . \":=\"\n[Go+ CI/Test]   |    12:  8: . . . . . ExpressionList (\n[Go+ CI/Test]   |    12:  8: . . . . . . Expression (\n[Go+ CI/Test]   |    12:  8: . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    12:  8: . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    12:  8: . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    12:  8: . . . . . . . . . . Operand (\n[Go+ CI/Test]   |    12:  8: . . . . . . . . . . . ArrayType (\n[Go+ CI/Test]   |    12:  8: . . . . . . . . . . . . \"[\"\n[Go+ CI/Test]   |    12:  9: . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |    12:  9: . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    12:  9: . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    12:  9: . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    12:  9: . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: INT, Value: 1}\n[Go+ CI/Test]   |    12:  9: . . . . . . . . . . . . . . . . . INT 1\n[Go+ CI/Test]   |    12: 10: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    12: 10: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    12: 10: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    12: 10: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    12: 10: . . . . . . . . . . . . )\n[Go+ CI/Test]   |    12: 10: . . . . . . . . . . . . \",\"\n[Go+ CI/Test]   |    12: 12: . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |    12: 12: . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    12: 12: . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    12: 12: . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    12: 12: . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: INT, Value: 2}\n[Go+ CI/Test]   |    12: 12: . . . . . . . . . . . . . . . . . INT 2\n[Go+ CI/Test]   |    12: 13: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    12: 13: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    12: 13: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    12: 13: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    12: 13: . . . . . . . . . . . . )\n[Go+ CI/Test]   |    12: 13: . . . . . . . . . . . . \",\"\n[Go+ CI/Test]   |    12: 15: . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |    12: 15: . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    12: 15: . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    12: 15: . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    12: 15: . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: INT, Value: 3}\n[Go+ CI/Test]   |    12: 15: . . . . . . . . . . . . . . . . . INT 3\n[Go+ CI/Test]   |    12: 16: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    12: 16: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    12: 16: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    12: 16: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    12: 16: . . . . . . . . . . . . )\n[Go+ CI/Test]   |    12: 16: . . . . . . . . . . . . \",\"\n[Go+ CI/Test]   |    12: 18: . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |    12: 18: . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    12: 18: . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    12: 18: . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    12: 18: . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: INT, Value: 4}\n[Go+ CI/Test]   |    12: 18: . . . . . . . . . . . . . . . . . INT 4\n[Go+ CI/Test]   |    12: 19: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    12: 19: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    12: 19: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    12: 19: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    12: 19: . . . . . . . . . . . . )\n[Go+ CI/Test]   |    12: 19: . . . . . . . . . . . . \",\"\n[Go+ CI/Test]   |    12: 21: . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |    12: 21: . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    12: 21: . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    12: 21: . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    12: 21: . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: INT, Value: 5}\n[Go+ CI/Test]   |    12: 21: . . . . . . . . . . . . . . . . . INT 5\n[Go+ CI/Test]   |    12: 22: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    12: 22: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    12: 22: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    12: 22: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    12: 22: . . . . . . . . . . . . )\n[Go+ CI/Test]   |    12: 22: . . . . . . . . . . . . \",\"\n[Go+ CI/Test]   |    12: 24: . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |    12: 24: . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    12: 24: . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    12: 24: . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    12: 24: . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: INT, Value: 6}\n[Go+ CI/Test]   |    12: 24: . . . . . . . . . . . . . . . . . INT 6\n[Go+ CI/Test]   |    12: 25: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    12: 25: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    12: 25: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    12: 25: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    12: 25: . . . . . . . . . . . . )\n[Go+ CI/Test]   |    12: 25: . . . . . . . . . . . . \"]\"\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:888: ast.SliceLit{Elts: [0xc0004dd280 0xc0004dd2a0 0xc0004dd2c0 0xc0004dd2e0 0xc0004dd300 0xc0004dd320]}\n[Go+ CI/Test]   |    12: 26: . . . . . . . . . . . )\n[Go+ CI/Test]   |    12: 26: . . . . . . . . . . )\n[Go+ CI/Test]   |    12: 26: . . . . . . . . . )\n[Go+ CI/Test]   |    12: 26: . . . . . . . . )\n[Go+ CI/Test]   |    12: 26: . . . . . . . )\n[Go+ CI/Test]   |    12: 26: . . . . . . )\n[Go+ CI/Test]   |    12: 26: . . . . . )\n[Go+ CI/Test]   |    12: 26: . . . . )\n[Go+ CI/Test]   |    12: 26: . . . . \";\"\n[Go+ CI/Test]   |    13:  1: . . . )\n[Go+ CI/Test]   |    13:  1: . . . Statement (\n[Go+ CI/Test]   |    13:  1: . . . . SimpleStmt (\n[Go+ CI/Test]   |    13:  1: . . . . . ExpressionList (\n[Go+ CI/Test]   |    13:  1: . . . . . . Expression (\n[Go+ CI/Test]   |    13:  1: . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    13:  1: . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    13:  1: . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    13:  1: . . . . . . . . . . Operand (\n[Go+ CI/Test]   |    13:  1: . . . . . . . . . . . IDENT x\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: x}\n[Go+ CI/Test]   |    13:  3: . . . . . . . . . . )\n[Go+ CI/Test]   |    13:  3: . . . . . . . . . )\n[Go+ CI/Test]   |    13:  3: . . . . . . . . )\n[Go+ CI/Test]   |    13:  3: . . . . . . . )\n[Go+ CI/Test]   |    13:  3: . . . . . . )\n[Go+ CI/Test]   |    13:  3: . . . . . )\n[Go+ CI/Test]   |    13:  3: . . . . . \":=\"\n[Go+ CI/Test]   |    13:  6: . . . . . ExpressionList (\n[Go+ CI/Test]   |    13:  6: . . . . . . Expression (\n[Go+ CI/Test]   |    13:  6: . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    13:  6: . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    13:  6: . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    13:  6: . . . . . . . . . . Operand (\n[Go+ CI/Test]   |    13:  6: . . . . . . . . . . . ArrayType (\n[Go+ CI/Test]   |    13:  6: . . . . . . . . . . . . \"[\"\n[Go+ CI/Test]   |    13:  7: . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |    13:  7: . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    13:  7: . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    13:  7: . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    13:  7: . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |    13:  7: . . . . . . . . . . . . . . . . . ArrayType (\n[Go+ CI/Test]   |    13:  7: . . . . . . . . . . . . . . . . . . \"[\"\n[Go+ CI/Test]   |    13:  8: . . . . . . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |    13:  8: . . . . . . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    13:  8: . . . . . . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    13:  8: . . . . . . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    13:  8: . . . . . . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |    13:  8: . . . . . . . . . . . . . . . . . . . . . . . IDENT a\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: a}\n[Go+ CI/Test]   |    13:  9: . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    13:  9: . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    13:  9: . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    13:  9: . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    13:  9: . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    13:  9: . . . . . . . . . . . . . . . . . . \",\"\n[Go+ CI/Test]   |    13: 11: . . . . . . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |    13: 11: . . . . . . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    13: 11: . . . . . . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    13: 11: . . . . . . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    13: 11: . . . . . . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |    13: 11: . . . . . . . . . . . . . . . . . . . . . . . IDENT b\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: b}\n[Go+ CI/Test]   |    13: 12: . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    13: 12: . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    13: 12: . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    13: 12: . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    13: 12: . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    13: 12: . . . . . . . . . . . . . . . . . . \"]\"\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:888: ast.SliceLit{Elts: [a b]}\n[Go+ CI/Test]   |    13: 14: . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    13: 14: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    13: 14: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    13: 14: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    13: 14: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    13: 14: . . . . . . . . . . . . )\n[Go+ CI/Test]   |    13: 14: . . . . . . . . . . . . ForPhrase (\n[Go+ CI/Test]   |    13: 14: . . . . . . . . . . . . . \"for\"\n[Go+ CI/Test]   |    13: 18: . . . . . . . . . . . . . IDENT a\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: a}\n[Go+ CI/Test]   |    13: 20: . . . . . . . . . . . . . \"<-\"\n[Go+ CI/Test]   |    13: 23: . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |    13: 23: . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    13: 23: . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    13: 23: . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    13: 23: . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |    13: 23: . . . . . . . . . . . . . . . . . . IDENT arr\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: arr}\n[Go+ CI/Test]   |    13: 27: . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    13: 27: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    13: 27: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    13: 27: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    13: 27: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    13: 27: . . . . . . . . . . . . . \"if\"\n[Go+ CI/Test]   |    13: 30: . . . . . . . . . . . . . SimpleStmt (\n[Go+ CI/Test]   |    13: 30: . . . . . . . . . . . . . . ExpressionList (\n[Go+ CI/Test]   |    13: 30: . . . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |    13: 30: . . . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    13: 30: . . . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    13: 30: . . . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    13: 30: . . . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |    13: 30: . . . . . . . . . . . . . . . . . . . . IDENT a\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: a}\n[Go+ CI/Test]   |    13: 32: . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    13: 32: . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    13: 32: . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    13: 32: . . . . . . . . . . . . . . . . . \"<\"\n[Go+ CI/Test]   |    13: 34: . . . . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    13: 34: . . . . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    13: 34: . . . . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    13: 34: . . . . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |    13: 34: . . . . . . . . . . . . . . . . . . . . . IDENT b\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: b}\n[Go+ CI/Test]   |    13: 36: . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    13: 36: . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    13: 36: . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    13: 36: . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    13: 36: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    13: 36: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    13: 36: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    13: 36: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    13: 36: . . . . . . . . . . . . )\n[Go+ CI/Test]   |    13: 36: . . . . . . . . . . . . ForPhrase (\n[Go+ CI/Test]   |    13: 36: . . . . . . . . . . . . . \"for\"\n[Go+ CI/Test]   |    13: 40: . . . . . . . . . . . . . IDENT b\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: b}\n[Go+ CI/Test]   |    13: 42: . . . . . . . . . . . . . \"<-\"\n[Go+ CI/Test]   |    13: 45: . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |    13: 45: . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    13: 45: . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    13: 45: . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    13: 45: . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |    13: 45: . . . . . . . . . . . . . . . . . . IDENT arr\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: arr}\n[Go+ CI/Test]   |    13: 49: . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    13: 49: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    13: 49: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    13: 49: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    13: 49: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    13: 49: . . . . . . . . . . . . . \"if\"\n[Go+ CI/Test]   |    13: 52: . . . . . . . . . . . . . SimpleStmt (\n[Go+ CI/Test]   |    13: 52: . . . . . . . . . . . . . . ExpressionList (\n[Go+ CI/Test]   |    13: 52: . . . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |    13: 52: . . . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    13: 52: . . . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    13: 52: . . . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    13: 52: . . . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |    13: 52: . . . . . . . . . . . . . . . . . . . . IDENT b\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: b}\n[Go+ CI/Test]   |    13: 54: . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    13: 54: . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    13: 54: . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    13: 54: . . . . . . . . . . . . . . . . . \">\"\n[Go+ CI/Test]   |    13: 56: . . . . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    13: 56: . . . . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    13: 56: . . . . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    13: 56: . . . . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: INT, Value: 2}\n[Go+ CI/Test]   |    13: 56: . . . . . . . . . . . . . . . . . . . . . INT 2\n[Go+ CI/Test]   |    13: 57: . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    13: 57: . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    13: 57: . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    13: 57: . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    13: 57: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    13: 57: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    13: 57: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    13: 57: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    13: 57: . . . . . . . . . . . . )\n[Go+ CI/Test]   |    13: 57: . . . . . . . . . . . . \"]\"\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:820: ast.ComprehensionExpr{Tok: [, Elt: &{262 [a b] 267 false}, Fors: [0xc000512240 0xc0005122a0]}\n[Go+ CI/Test]   |    13: 58: . . . . . . . . . . . )\n[Go+ CI/Test]   |    13: 58: . . . . . . . . . . )\n[Go+ CI/Test]   |    13: 58: . . . . . . . . . )\n[Go+ CI/Test]   |    13: 58: . . . . . . . . )\n[Go+ CI/Test]   |    13: 58: . . . . . . . )\n[Go+ CI/Test]   |    13: 58: . . . . . . )\n[Go+ CI/Test]   |    13: 58: . . . . . )\n[Go+ CI/Test]   |    13: 58: . . . . )\n[Go+ CI/Test]   |    13: 58: . . . . \";\"\n[Go+ CI/Test]   |    14:  1: . . . )\n[Go+ CI/Test]   |    14:  1: . . . Statement (\n[Go+ CI/Test]   |    14:  1: . . . . SimpleStmt (\n[Go+ CI/Test]   |    14:  1: . . . . . ExpressionList (\n[Go+ CI/Test]   |    14:  1: . . . . . . Expression (\n[Go+ CI/Test]   |    14:  1: . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    14:  1: . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    14:  1: . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    14:  1: . . . . . . . . . . Operand (\n[Go+ CI/Test]   |    14:  1: . . . . . . . . . . . IDENT println\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: println}\n[Go+ CI/Test]   |    14:  8: . . . . . . . . . . )\n[Go+ CI/Test]   |    14:  8: . . . . . . . . . . CallOrConversion (\n[Go+ CI/Test]   |    14:  8: . . . . . . . . . . . \"(\"\n[Go+ CI/Test]   |    14:  9: . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |    14:  9: . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    14:  9: . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    14:  9: . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    14:  9: . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: STRING, Value: \"x:\"}\n[Go+ CI/Test]   |    14:  9: . . . . . . . . . . . . . . . . STRING \"x:\"\n[Go+ CI/Test]   |    14: 13: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    14: 13: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    14: 13: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    14: 13: . . . . . . . . . . . . )\n[Go+ CI/Test]   |    14: 13: . . . . . . . . . . . )\n[Go+ CI/Test]   |    14: 13: . . . . . . . . . . . \",\"\n[Go+ CI/Test]   |    14: 15: . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |    14: 15: . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    14: 15: . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    14: 15: . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    14: 15: . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |    14: 15: . . . . . . . . . . . . . . . . IDENT x\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: x}\n[Go+ CI/Test]   |    14: 16: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    14: 16: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    14: 16: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    14: 16: . . . . . . . . . . . . )\n[Go+ CI/Test]   |    14: 16: . . . . . . . . . . . )\n[Go+ CI/Test]   |    14: 16: . . . . . . . . . . . \")\"\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1878: ast.CallExpr{Fun: println, Ellipsis: false, isCmd: false}\n[Go+ CI/Test]   |    14: 17: . . . . . . . . . . )\n[Go+ CI/Test]   |    14: 17: . . . . . . . . . )\n[Go+ CI/Test]   |    14: 17: . . . . . . . . )\n[Go+ CI/Test]   |    14: 17: . . . . . . . )\n[Go+ CI/Test]   |    14: 17: . . . . . . )\n[Go+ CI/Test]   |    14: 17: . . . . . )\n[Go+ CI/Test]   |    14: 17: . . . . )\n[Go+ CI/Test]   |    14: 17: . . . . \";\"\n[Go+ CI/Test]   |    14: 18: . . . )\n[Go+ CI/Test]   |    14: 18: . . )\n[Go+ CI/Test]   |    14: 18: . )\n[Go+ CI/Test]   |    14: 18: )\n[Go+ CI/Test]   | === RUN   TestFromTestdata/mapfunc\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parserdir_test.go:90: Parsing /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/_testdata/mapfunc\n[Go+ CI/Test]   |     1:  1: File (\n[Go+ CI/Test]   |     1:  1: . Declaration (\n[Go+ CI/Test]   |     1:  1: . . StatementList (\n[Go+ CI/Test]   |     1:  1: . . . Statement (\n[Go+ CI/Test]   |     1:  1: . . . . SimpleStmt (\n[Go+ CI/Test]   |     1:  1: . . . . . ExpressionList (\n[Go+ CI/Test]   |     1:  1: . . . . . . Expression (\n[Go+ CI/Test]   |     1:  1: . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     1:  1: . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     1:  1: . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     1:  1: . . . . . . . . . . Operand (\n[Go+ CI/Test]   |     1:  1: . . . . . . . . . . . \"map\"\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: map}\n[Go+ CI/Test]   |     1:  5: . . . . . . . . . . )\n[Go+ CI/Test]   |     1:  5: . . . . . . . . . . CallOrConversion (\n[Go+ CI/Test]   |     1:  5: . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |     1:  5: . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     1:  5: . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     1:  5: . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     1:  5: . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |     1:  5: . . . . . . . . . . . . . . . . IDENT strs\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: strs}\n[Go+ CI/Test]   |     1:  9: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     1:  9: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     1:  9: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     1:  9: . . . . . . . . . . . . )\n[Go+ CI/Test]   |     1:  9: . . . . . . . . . . . )\n[Go+ CI/Test]   |     1:  9: . . . . . . . . . . . \",\"\n[Go+ CI/Test]   |     1: 11: . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |     1: 11: . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     1: 11: . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     1: 11: . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     1: 11: . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |     1: 11: . . . . . . . . . . . . . . . . IDENT toUpper\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: toUpper}\n[Go+ CI/Test]   |     1: 18: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     1: 18: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     1: 18: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     1: 18: . . . . . . . . . . . . )\n[Go+ CI/Test]   |     1: 18: . . . . . . . . . . . )\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1878: ast.CallExpr{Fun: map, Ellipsis: false, isCmd: true}\n[Go+ CI/Test]   |     1: 18: . . . . . . . . . . )\n[Go+ CI/Test]   |     1: 18: . . . . . . . . . )\n[Go+ CI/Test]   |     1: 18: . . . . . . . . )\n[Go+ CI/Test]   |     1: 18: . . . . . . . )\n[Go+ CI/Test]   |     1: 18: . . . . . . )\n[Go+ CI/Test]   |     1: 18: . . . . . )\n[Go+ CI/Test]   |     1: 18: . . . . )\n[Go+ CI/Test]   |     1: 18: . . . . \";\"\n[Go+ CI/Test]   |     2:  1: . . . )\n[Go+ CI/Test]   |     2:  1: . . . Statement (\n[Go+ CI/Test]   |     2:  1: . . . . SimpleStmt (\n[Go+ CI/Test]   |     2:  1: . . . . . ExpressionList (\n[Go+ CI/Test]   |     2:  1: . . . . . . Expression (\n[Go+ CI/Test]   |     2:  1: . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     2:  1: . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     2:  1: . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     2:  1: . . . . . . . . . . Operand (\n[Go+ CI/Test]   |     2:  1: . . . . . . . . . . . \"map\"\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: map}\n[Go+ CI/Test]   |     2:  5: . . . . . . . . . . )\n[Go+ CI/Test]   |     2:  5: . . . . . . . . . . CallOrConversion (\n[Go+ CI/Test]   |     2:  5: . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |     2:  5: . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     2:  5: . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     2:  5: . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     2:  5: . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |     2:  5: . . . . . . . . . . . . . . . . ArrayType (\n[Go+ CI/Test]   |     2:  5: . . . . . . . . . . . . . . . . . \"[\"\n[Go+ CI/Test]   |     2:  6: . . . . . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |     2:  6: . . . . . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     2:  6: . . . . . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     2:  6: . . . . . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     2:  6: . . . . . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: STRING, Value: \"hello\"}\n[Go+ CI/Test]   |     2:  6: . . . . . . . . . . . . . . . . . . . . . . STRING \"hello\"\n[Go+ CI/Test]   |     2: 13: . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 13: . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 13: . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 13: . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 13: . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 13: . . . . . . . . . . . . . . . . . \",\"\n[Go+ CI/Test]   |     2: 15: . . . . . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |     2: 15: . . . . . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     2: 15: . . . . . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     2: 15: . . . . . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     2: 15: . . . . . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: STRING, Value: \"world\"}\n[Go+ CI/Test]   |     2: 15: . . . . . . . . . . . . . . . . . . . . . . STRING \"world\"\n[Go+ CI/Test]   |     2: 22: . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 22: . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 22: . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 22: . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 22: . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 22: . . . . . . . . . . . . . . . . . \"]\"\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:888: ast.SliceLit{Elts: [0xc0001b8160 0xc0001b8180]}\n[Go+ CI/Test]   |     2: 23: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 23: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 23: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 23: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 23: . . . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 23: . . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 23: . . . . . . . . . . . \",\"\n[Go+ CI/Test]   |     2: 25: . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |     2: 25: . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     2: 25: . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     2: 25: . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     2: 25: . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |     2: 25: . . . . . . . . . . . . . . . . IDENT toUpper\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: toUpper}\n[Go+ CI/Test]   |     2: 32: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 32: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 32: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 32: . . . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 32: . . . . . . . . . . . )\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1878: ast.CallExpr{Fun: map, Ellipsis: false, isCmd: true}\n[Go+ CI/Test]   |     2: 32: . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 32: . . . . . . . . . )\n[Go+ CI/Test]   |     2: 32: . . . . . . . . )\n[Go+ CI/Test]   |     2: 32: . . . . . . . )\n[Go+ CI/Test]   |     2: 32: . . . . . . )\n[Go+ CI/Test]   |     2: 32: . . . . . )\n[Go+ CI/Test]   |     2: 32: . . . . )\n[Go+ CI/Test]   |     2: 32: . . . . \";\"\n[Go+ CI/Test]   |     3:  1: . . . )\n[Go+ CI/Test]   |     3:  1: . . . Statement (\n[Go+ CI/Test]   |     3:  1: . . . . SimpleStmt (\n[Go+ CI/Test]   |     3:  1: . . . . . ExpressionList (\n[Go+ CI/Test]   |     3:  1: . . . . . . Expression (\n[Go+ CI/Test]   |     3:  1: . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     3:  1: . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     3:  1: . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     3:  1: . . . . . . . . . . Operand (\n[Go+ CI/Test]   |     3:  1: . . . . . . . . . . . \"map\"\n[Go+ CI/Test]   |     3:  1: . . . . . . . . . . . MapType (\n[Go+ CI/Test]   |     3:  4: . . . . . . . . . . . . \"[\"\n[Go+ CI/Test]   |     3:  5: . . . . . . . . . . . . Type (\n[Go+ CI/Test]   |     3:  5: . . . . . . . . . . . . . TypeName (\n[Go+ CI/Test]   |     3:  5: . . . . . . . . . . . . . . IDENT string\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: string}\n[Go+ CI/Test]   |     3: 11: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     3: 11: . . . . . . . . . . . . )\n[Go+ CI/Test]   |     3: 11: . . . . . . . . . . . . \"]\"\n[Go+ CI/Test]   |     3: 12: . . . . . . . . . . . . Type (\n[Go+ CI/Test]   |     3: 12: . . . . . . . . . . . . . TypeName (\n[Go+ CI/Test]   |     3: 12: . . . . . . . . . . . . . . IDENT int\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: int}\n[Go+ CI/Test]   |     3: 15: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     3: 15: . . . . . . . . . . . . )\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1371: ast.MapType{Key: string, Value: int}\n[Go+ CI/Test]   |     3: 15: . . . . . . . . . . . )\n[Go+ CI/Test]   |     3: 15: . . . . . . . . . . )\n[Go+ CI/Test]   |     3: 15: . . . . . . . . . . LiteralValue (\n[Go+ CI/Test]   |     3: 15: . . . . . . . . . . . \"{\"\n[Go+ CI/Test]   |     3: 16: . . . . . . . . . . . ElementList (\n[Go+ CI/Test]   |     3: 16: . . . . . . . . . . . . Element (\n[Go+ CI/Test]   |     3: 16: . . . . . . . . . . . . . Element (\n[Go+ CI/Test]   |     3: 16: . . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |     3: 16: . . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     3: 16: . . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     3: 16: . . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     3: 16: . . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: STRING, Value: \"Hi\"}\n[Go+ CI/Test]   |     3: 16: . . . . . . . . . . . . . . . . . . . STRING \"Hi\"\n[Go+ CI/Test]   |     3: 20: . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     3: 20: . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     3: 20: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     3: 20: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     3: 20: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     3: 20: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     3: 20: . . . . . . . . . . . . . \":\"\n[Go+ CI/Test]   |     3: 22: . . . . . . . . . . . . . Element (\n[Go+ CI/Test]   |     3: 22: . . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |     3: 22: . . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     3: 22: . . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     3: 22: . . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     3: 22: . . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: INT, Value: 1}\n[Go+ CI/Test]   |     3: 22: . . . . . . . . . . . . . . . . . . . INT 1\n[Go+ CI/Test]   |     3: 23: . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     3: 23: . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     3: 23: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     3: 23: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     3: 23: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     3: 23: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     3: 23: . . . . . . . . . . . . )\n[Go+ CI/Test]   |     3: 23: . . . . . . . . . . . )\n[Go+ CI/Test]   |     3: 23: . . . . . . . . . . . \"}\"\n[Go+ CI/Test]   |     3: 24: . . . . . . . . . . )\n[Go+ CI/Test]   |     3: 24: . . . . . . . . . )\n[Go+ CI/Test]   |     3: 24: . . . . . . . . )\n[Go+ CI/Test]   |     3: 24: . . . . . . . )\n[Go+ CI/Test]   |     3: 24: . . . . . . )\n[Go+ CI/Test]   |     3: 24: . . . . . )\n[Go+ CI/Test]   |     3: 24: . . . . )\n[Go+ CI/Test]   |     3: 24: . . . . \";\"\n[Go+ CI/Test]   |     4:  1: . . . )\n[Go+ CI/Test]   |     4:  1: . . . Statement (\n[Go+ CI/Test]   |     4:  1: . . . . SimpleStmt (\n[Go+ CI/Test]   |     4:  1: . . . . . ExpressionList (\n[Go+ CI/Test]   |     4:  1: . . . . . . Expression (\n[Go+ CI/Test]   |     4:  1: . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     4:  1: . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     4:  1: . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     4:  1: . . . . . . . . . . Operand (\n[Go+ CI/Test]   |     4:  1: . . . . . . . . . . . IDENT println\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: println}\n[Go+ CI/Test]   |     4:  9: . . . . . . . . . . )\n[Go+ CI/Test]   |     4:  9: . . . . . . . . . . CallOrConversion (\n[Go+ CI/Test]   |     4:  9: . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |     4:  9: . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     4:  9: . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     4:  9: . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     4:  9: . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |     4:  9: . . . . . . . . . . . . . . . . \"map\"\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: map}\n[Go+ CI/Test]   |     4: 12: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     4: 12: . . . . . . . . . . . . . . . CallOrConversion (\n[Go+ CI/Test]   |     4: 12: . . . . . . . . . . . . . . . . \"(\"\n[Go+ CI/Test]   |     4: 13: . . . . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |     4: 13: . . . . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     4: 13: . . . . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     4: 13: . . . . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     4: 13: . . . . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |     4: 13: . . . . . . . . . . . . . . . . . . . . . IDENT strs\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: strs}\n[Go+ CI/Test]   |     4: 17: . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     4: 17: . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     4: 17: . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     4: 17: . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     4: 17: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     4: 17: . . . . . . . . . . . . . . . . \",\"\n[Go+ CI/Test]   |     4: 19: . . . . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |     4: 19: . . . . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     4: 19: . . . . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     4: 19: . . . . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     4: 19: . . . . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |     4: 19: . . . . . . . . . . . . . . . . . . . . . IDENT strings\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: strings}\n[Go+ CI/Test]   |     4: 26: . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     4: 26: . . . . . . . . . . . . . . . . . . . . \".\"\n[Go+ CI/Test]   |     4: 27: . . . . . . . . . . . . . . . . . . . . Selector (\n[Go+ CI/Test]   |     4: 27: . . . . . . . . . . . . . . . . . . . . . IDENT ToUpper\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: ToUpper}\n[Go+ CI/Test]   |     4: 34: . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     4: 34: . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     4: 34: . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     4: 34: . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     4: 34: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     4: 34: . . . . . . . . . . . . . . . . \")\"\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1878: ast.CallExpr{Fun: map, Ellipsis: false, isCmd: false}\n[Go+ CI/Test]   |     4: 35: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     4: 35: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     4: 35: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     4: 35: . . . . . . . . . . . . )\n[Go+ CI/Test]   |     4: 35: . . . . . . . . . . . )\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1878: ast.CallExpr{Fun: println, Ellipsis: false, isCmd: true}\n[Go+ CI/Test]   |     4: 35: . . . . . . . . . . )\n[Go+ CI/Test]   |     4: 35: . . . . . . . . . )\n[Go+ CI/Test]   |     4: 35: . . . . . . . . )\n[Go+ CI/Test]   |     4: 35: . . . . . . . )\n[Go+ CI/Test]   |     4: 35: . . . . . . )\n[Go+ CI/Test]   |     4: 35: . . . . . )\n[Go+ CI/Test]   |     4: 35: . . . . )\n[Go+ CI/Test]   |     4: 35: . . . . \";\"\n[Go+ CI/Test]   |     4: 36: . . . )\n[Go+ CI/Test]   |     4: 36: . . )\n[Go+ CI/Test]   |     4: 36: . )\n[Go+ CI/Test]   |     4: 36: )\n[Go+ CI/Test]   | === RUN   TestFromTestdata/mytest\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parserdir_test.go:90: Parsing /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/_testdata/mytest\n[Go+ CI/Test]   |     1:  1: File (\n[Go+ CI/Test]   |     1:  1: . \"package\"\n[Go+ CI/Test]   |     1:  9: . IDENT testdata\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: testdata}\n[Go+ CI/Test]   |     1: 17: . \";\"\n[Go+ CI/Test]   |     3:  1: . GenDecl(import) (\n[Go+ CI/Test]   |     3:  1: . . \"import\"\n[Go+ CI/Test]   |     3:  8: . . \"(\"\n[Go+ CI/Test]   |     4:  2: . . ImportSpec (\n[Go+ CI/Test]   |     4:  2: . . . STRING \"go/token\"\n[Go+ CI/Test]   |     4: 12: . . . \";\"\n[Go+ CI/Test]   |     5:  2: . . )\n[Go+ CI/Test]   |     5:  2: . . ImportSpec (\n[Go+ CI/Test]   |     5:  2: . . . STRING \"os\"\n[Go+ CI/Test]   |     5:  6: . . . \";\"\n[Go+ CI/Test]   |     6:  1: . . )\n[Go+ CI/Test]   |     6:  1: . . \")\"\n[Go+ CI/Test]   |     6:  2: . . \";\"\n[Go+ CI/Test]   |     8:  1: . )\n[Go+ CI/Test]   |     8:  1: . Declaration (\n[Go+ CI/Test]   |     8:  1: . . GenDecl(var) (\n[Go+ CI/Test]   |     8:  1: . . . \"var\"\n[Go+ CI/Test]   |     8:  5: . . . varSpec (\n[Go+ CI/Test]   |     8:  5: . . . . IdentList (\n[Go+ CI/Test]   |     8:  5: . . . . . IDENT stmtStart\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: stmtStart}\n[Go+ CI/Test]   |     8: 15: . . . . )\n[Go+ CI/Test]   |     8: 15: . . . . \"=\"\n[Go+ CI/Test]   |     8: 17: . . . . ExpressionList (\n[Go+ CI/Test]   |     8: 17: . . . . . Expression (\n[Go+ CI/Test]   |     8: 17: . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     8: 17: . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     8: 17: . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     8: 17: . . . . . . . . . Operand (\n[Go+ CI/Test]   |     8: 17: . . . . . . . . . . \"map\"\n[Go+ CI/Test]   |     8: 17: . . . . . . . . . . MapType (\n[Go+ CI/Test]   |     8: 20: . . . . . . . . . . . \"[\"\n[Go+ CI/Test]   |     8: 21: . . . . . . . . . . . Type (\n[Go+ CI/Test]   |     8: 21: . . . . . . . . . . . . TypeName (\n[Go+ CI/Test]   |     8: 21: . . . . . . . . . . . . . IDENT token\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: token}\n[Go+ CI/Test]   |     8: 26: . . . . . . . . . . . . . \".\"\n[Go+ CI/Test]   |     8: 27: . . . . . . . . . . . . . IDENT Token\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: Token}\n[Go+ CI/Test]   |     8: 32: . . . . . . . . . . . . )\n[Go+ CI/Test]   |     8: 32: . . . . . . . . . . . )\n[Go+ CI/Test]   |     8: 32: . . . . . . . . . . . \"]\"\n[Go+ CI/Test]   |     8: 33: . . . . . . . . . . . Type (\n[Go+ CI/Test]   |     8: 33: . . . . . . . . . . . . TypeName (\n[Go+ CI/Test]   |     8: 33: . . . . . . . . . . . . . IDENT bool\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: bool}\n[Go+ CI/Test]   |     8: 37: . . . . . . . . . . . . )\n[Go+ CI/Test]   |     8: 37: . . . . . . . . . . . )\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1371: ast.MapType{Key: &{token Token}, Value: bool}\n[Go+ CI/Test]   |     8: 37: . . . . . . . . . . )\n[Go+ CI/Test]   |     8: 37: . . . . . . . . . )\n[Go+ CI/Test]   |     8: 37: . . . . . . . . . LiteralValue (\n[Go+ CI/Test]   |     8: 37: . . . . . . . . . . \"{\"\n[Go+ CI/Test]   |     9:  2: . . . . . . . . . . ElementList (\n[Go+ CI/Test]   |     9:  2: . . . . . . . . . . . Element (\n[Go+ CI/Test]   |     9:  2: . . . . . . . . . . . . Element (\n[Go+ CI/Test]   |     9:  2: . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |     9:  2: . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     9:  2: . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     9:  2: . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     9:  2: . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |     9:  2: . . . . . . . . . . . . . . . . . . IDENT token\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: token}\n[Go+ CI/Test]   |     9:  7: . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     9:  7: . . . . . . . . . . . . . . . . . \".\"\n[Go+ CI/Test]   |     9:  8: . . . . . . . . . . . . . . . . . Selector (\n[Go+ CI/Test]   |     9:  8: . . . . . . . . . . . . . . . . . . IDENT BREAK\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: BREAK}\n[Go+ CI/Test]   |     9: 13: . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     9: 13: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     9: 13: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     9: 13: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     9: 13: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     9: 13: . . . . . . . . . . . . )\n[Go+ CI/Test]   |     9: 13: . . . . . . . . . . . . \":\"\n[Go+ CI/Test]   |     9: 21: . . . . . . . . . . . . Element (\n[Go+ CI/Test]   |     9: 21: . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |     9: 21: . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     9: 21: . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     9: 21: . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     9: 21: . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |     9: 21: . . . . . . . . . . . . . . . . . . IDENT true\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: true}\n[Go+ CI/Test]   |     9: 25: . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     9: 25: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     9: 25: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     9: 25: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     9: 25: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     9: 25: . . . . . . . . . . . . )\n[Go+ CI/Test]   |     9: 25: . . . . . . . . . . . )\n[Go+ CI/Test]   |     9: 25: . . . . . . . . . . . \",\"\n[Go+ CI/Test]   |    10:  2: . . . . . . . . . . . Element (\n[Go+ CI/Test]   |    10:  2: . . . . . . . . . . . . Element (\n[Go+ CI/Test]   |    10:  2: . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |    10:  2: . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    10:  2: . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    10:  2: . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    10:  2: . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |    10:  2: . . . . . . . . . . . . . . . . . . IDENT token\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: token}\n[Go+ CI/Test]   |    10:  7: . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    10:  7: . . . . . . . . . . . . . . . . . \".\"\n[Go+ CI/Test]   |    10:  8: . . . . . . . . . . . . . . . . . Selector (\n[Go+ CI/Test]   |    10:  8: . . . . . . . . . . . . . . . . . . IDENT CONST\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: CONST}\n[Go+ CI/Test]   |    10: 13: . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    10: 13: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    10: 13: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    10: 13: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    10: 13: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    10: 13: . . . . . . . . . . . . )\n[Go+ CI/Test]   |    10: 13: . . . . . . . . . . . . \":\"\n[Go+ CI/Test]   |    10: 21: . . . . . . . . . . . . Element (\n[Go+ CI/Test]   |    10: 21: . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |    10: 21: . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    10: 21: . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    10: 21: . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    10: 21: . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |    10: 21: . . . . . . . . . . . . . . . . . . IDENT true\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: true}\n[Go+ CI/Test]   |    10: 25: . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    10: 25: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    10: 25: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    10: 25: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    10: 25: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    10: 25: . . . . . . . . . . . . )\n[Go+ CI/Test]   |    10: 25: . . . . . . . . . . . )\n[Go+ CI/Test]   |    10: 25: . . . . . . . . . . . \",\"\n[Go+ CI/Test]   |    11:  2: . . . . . . . . . . . Element (\n[Go+ CI/Test]   |    11:  2: . . . . . . . . . . . . Element (\n[Go+ CI/Test]   |    11:  2: . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |    11:  2: . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    11:  2: . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    11:  2: . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    11:  2: . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |    11:  2: . . . . . . . . . . . . . . . . . . IDENT token\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: token}\n[Go+ CI/Test]   |    11:  7: . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    11:  7: . . . . . . . . . . . . . . . . . \".\"\n[Go+ CI/Test]   |    11:  8: . . . . . . . . . . . . . . . . . Selector (\n[Go+ CI/Test]   |    11:  8: . . . . . . . . . . . . . . . . . . IDENT CONTINUE\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: CONTINUE}\n[Go+ CI/Test]   |    11: 16: . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    11: 16: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    11: 16: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    11: 16: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    11: 16: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    11: 16: . . . . . . . . . . . . )\n[Go+ CI/Test]   |    11: 16: . . . . . . . . . . . . \":\"\n[Go+ CI/Test]   |    11: 21: . . . . . . . . . . . . Element (\n[Go+ CI/Test]   |    11: 21: . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |    11: 21: . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    11: 21: . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    11: 21: . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    11: 21: . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |    11: 21: . . . . . . . . . . . . . . . . . . IDENT true\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: true}\n[Go+ CI/Test]   |    11: 25: . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    11: 25: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    11: 25: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    11: 25: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    11: 25: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    11: 25: . . . . . . . . . . . . )\n[Go+ CI/Test]   |    11: 25: . . . . . . . . . . . )\n[Go+ CI/Test]   |    11: 25: . . . . . . . . . . . \",\"\n[Go+ CI/Test]   |    12:  2: . . . . . . . . . . . Element (\n[Go+ CI/Test]   |    12:  2: . . . . . . . . . . . . Element (\n[Go+ CI/Test]   |    12:  2: . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |    12:  2: . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    12:  2: . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    12:  2: . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    12:  2: . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |    12:  2: . . . . . . . . . . . . . . . . . . IDENT token\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: token}\n[Go+ CI/Test]   |    12:  7: . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    12:  7: . . . . . . . . . . . . . . . . . \".\"\n[Go+ CI/Test]   |    12:  8: . . . . . . . . . . . . . . . . . Selector (\n[Go+ CI/Test]   |    12:  8: . . . . . . . . . . . . . . . . . . IDENT DEFER\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: DEFER}\n[Go+ CI/Test]   |    12: 13: . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    12: 13: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    12: 13: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    12: 13: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    12: 13: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    12: 13: . . . . . . . . . . . . )\n[Go+ CI/Test]   |    12: 13: . . . . . . . . . . . . \":\"\n[Go+ CI/Test]   |    12: 21: . . . . . . . . . . . . Element (\n[Go+ CI/Test]   |    12: 21: . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |    12: 21: . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    12: 21: . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    12: 21: . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    12: 21: . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |    12: 21: . . . . . . . . . . . . . . . . . . IDENT true\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: true}\n[Go+ CI/Test]   |    12: 25: . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    12: 25: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    12: 25: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    12: 25: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    12: 25: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    12: 25: . . . . . . . . . . . . )\n[Go+ CI/Test]   |    12: 25: . . . . . . . . . . . )\n[Go+ CI/Test]   |    12: 25: . . . . . . . . . . . \",\"\n[Go+ CI/Test]   |    13:  2: . . . . . . . . . . . Element (\n[Go+ CI/Test]   |    13:  2: . . . . . . . . . . . . Element (\n[Go+ CI/Test]   |    13:  2: . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |    13:  2: . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    13:  2: . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    13:  2: . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    13:  2: . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |    13:  2: . . . . . . . . . . . . . . . . . . IDENT token\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: token}\n[Go+ CI/Test]   |    13:  7: . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    13:  7: . . . . . . . . . . . . . . . . . \".\"\n[Go+ CI/Test]   |    13:  8: . . . . . . . . . . . . . . . . . Selector (\n[Go+ CI/Test]   |    13:  8: . . . . . . . . . . . . . . . . . . IDENT FALLTHROUGH\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: FALLTHROUGH}\n[Go+ CI/Test]   |    13: 19: . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    13: 19: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    13: 19: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    13: 19: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    13: 19: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    13: 19: . . . . . . . . . . . . )\n[Go+ CI/Test]   |    13: 19: . . . . . . . . . . . . \":\"\n[Go+ CI/Test]   |    13: 21: . . . . . . . . . . . . Element (\n[Go+ CI/Test]   |    13: 21: . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |    13: 21: . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    13: 21: . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    13: 21: . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    13: 21: . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |    13: 21: . . . . . . . . . . . . . . . . . . IDENT true\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: true}\n[Go+ CI/Test]   |    13: 25: . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    13: 25: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    13: 25: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    13: 25: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    13: 25: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    13: 25: . . . . . . . . . . . . )\n[Go+ CI/Test]   |    13: 25: . . . . . . . . . . . )\n[Go+ CI/Test]   |    13: 25: . . . . . . . . . . . \",\"\n[Go+ CI/Test]   |    14:  2: . . . . . . . . . . . Element (\n[Go+ CI/Test]   |    14:  2: . . . . . . . . . . . . Element (\n[Go+ CI/Test]   |    14:  2: . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |    14:  2: . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    14:  2: . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    14:  2: . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    14:  2: . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |    14:  2: . . . . . . . . . . . . . . . . . . IDENT token\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: token}\n[Go+ CI/Test]   |    14:  7: . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    14:  7: . . . . . . . . . . . . . . . . . \".\"\n[Go+ CI/Test]   |    14:  8: . . . . . . . . . . . . . . . . . Selector (\n[Go+ CI/Test]   |    14:  8: . . . . . . . . . . . . . . . . . . IDENT FOR\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: FOR}\n[Go+ CI/Test]   |    14: 11: . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    14: 11: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    14: 11: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    14: 11: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    14: 11: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    14: 11: . . . . . . . . . . . . )\n[Go+ CI/Test]   |    14: 11: . . . . . . . . . . . . \":\"\n[Go+ CI/Test]   |    14: 21: . . . . . . . . . . . . Element (\n[Go+ CI/Test]   |    14: 21: . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |    14: 21: . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    14: 21: . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    14: 21: . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    14: 21: . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |    14: 21: . . . . . . . . . . . . . . . . . . IDENT true\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: true}\n[Go+ CI/Test]   |    14: 25: . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    14: 25: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    14: 25: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    14: 25: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    14: 25: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    14: 25: . . . . . . . . . . . . )\n[Go+ CI/Test]   |    14: 25: . . . . . . . . . . . )\n[Go+ CI/Test]   |    14: 25: . . . . . . . . . . . \",\"\n[Go+ CI/Test]   |    15:  2: . . . . . . . . . . . Element (\n[Go+ CI/Test]   |    15:  2: . . . . . . . . . . . . Element (\n[Go+ CI/Test]   |    15:  2: . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |    15:  2: . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    15:  2: . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    15:  2: . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    15:  2: . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |    15:  2: . . . . . . . . . . . . . . . . . . IDENT token\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: token}\n[Go+ CI/Test]   |    15:  7: . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    15:  7: . . . . . . . . . . . . . . . . . \".\"\n[Go+ CI/Test]   |    15:  8: . . . . . . . . . . . . . . . . . Selector (\n[Go+ CI/Test]   |    15:  8: . . . . . . . . . . . . . . . . . . IDENT GO\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: GO}\n[Go+ CI/Test]   |    15: 10: . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    15: 10: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    15: 10: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    15: 10: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    15: 10: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    15: 10: . . . . . . . . . . . . )\n[Go+ CI/Test]   |    15: 10: . . . . . . . . . . . . \":\"\n[Go+ CI/Test]   |    15: 21: . . . . . . . . . . . . Element (\n[Go+ CI/Test]   |    15: 21: . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |    15: 21: . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    15: 21: . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    15: 21: . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    15: 21: . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |    15: 21: . . . . . . . . . . . . . . . . . . IDENT true\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: true}\n[Go+ CI/Test]   |    15: 25: . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    15: 25: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    15: 25: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    15: 25: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    15: 25: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    15: 25: . . . . . . . . . . . . )\n[Go+ CI/Test]   |    15: 25: . . . . . . . . . . . )\n[Go+ CI/Test]   |    15: 25: . . . . . . . . . . . \",\"\n[Go+ CI/Test]   |    16:  2: . . . . . . . . . . . Element (\n[Go+ CI/Test]   |    16:  2: . . . . . . . . . . . . Element (\n[Go+ CI/Test]   |    16:  2: . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |    16:  2: . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    16:  2: . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    16:  2: . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    16:  2: . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |    16:  2: . . . . . . . . . . . . . . . . . . IDENT token\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: token}\n[Go+ CI/Test]   |    16:  7: . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    16:  7: . . . . . . . . . . . . . . . . . \".\"\n[Go+ CI/Test]   |    16:  8: . . . . . . . . . . . . . . . . . Selector (\n[Go+ CI/Test]   |    16:  8: . . . . . . . . . . . . . . . . . . IDENT GOTO\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: GOTO}\n[Go+ CI/Test]   |    16: 12: . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    16: 12: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    16: 12: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    16: 12: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    16: 12: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    16: 12: . . . . . . . . . . . . )\n[Go+ CI/Test]   |    16: 12: . . . . . . . . . . . . \":\"\n[Go+ CI/Test]   |    16: 21: . . . . . . . . . . . . Element (\n[Go+ CI/Test]   |    16: 21: . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |    16: 21: . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    16: 21: . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    16: 21: . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    16: 21: . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |    16: 21: . . . . . . . . . . . . . . . . . . IDENT true\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: true}\n[Go+ CI/Test]   |    16: 25: . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    16: 25: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    16: 25: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    16: 25: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    16: 25: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    16: 25: . . . . . . . . . . . . )\n[Go+ CI/Test]   |    16: 25: . . . . . . . . . . . )\n[Go+ CI/Test]   |    16: 25: . . . . . . . . . . . \",\"\n[Go+ CI/Test]   |    17:  2: . . . . . . . . . . . Element (\n[Go+ CI/Test]   |    17:  2: . . . . . . . . . . . . Element (\n[Go+ CI/Test]   |    17:  2: . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |    17:  2: . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    17:  2: . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    17:  2: . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    17:  2: . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |    17:  2: . . . . . . . . . . . . . . . . . . IDENT token\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: token}\n[Go+ CI/Test]   |    17:  7: . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    17:  7: . . . . . . . . . . . . . . . . . \".\"\n[Go+ CI/Test]   |    17:  8: . . . . . . . . . . . . . . . . . Selector (\n[Go+ CI/Test]   |    17:  8: . . . . . . . . . . . . . . . . . . IDENT IF\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: IF}\n[Go+ CI/Test]   |    17: 10: . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    17: 10: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    17: 10: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    17: 10: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    17: 10: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    17: 10: . . . . . . . . . . . . )\n[Go+ CI/Test]   |    17: 10: . . . . . . . . . . . . \":\"\n[Go+ CI/Test]   |    17: 21: . . . . . . . . . . . . Element (\n[Go+ CI/Test]   |    17: 21: . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |    17: 21: . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    17: 21: . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    17: 21: . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    17: 21: . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |    17: 21: . . . . . . . . . . . . . . . . . . IDENT true\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: true}\n[Go+ CI/Test]   |    17: 25: . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    17: 25: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    17: 25: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    17: 25: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    17: 25: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    17: 25: . . . . . . . . . . . . )\n[Go+ CI/Test]   |    17: 25: . . . . . . . . . . . )\n[Go+ CI/Test]   |    17: 25: . . . . . . . . . . . \",\"\n[Go+ CI/Test]   |    18:  2: . . . . . . . . . . . Element (\n[Go+ CI/Test]   |    18:  2: . . . . . . . . . . . . Element (\n[Go+ CI/Test]   |    18:  2: . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |    18:  2: . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    18:  2: . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    18:  2: . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    18:  2: . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |    18:  2: . . . . . . . . . . . . . . . . . . IDENT token\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: token}\n[Go+ CI/Test]   |    18:  7: . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    18:  7: . . . . . . . . . . . . . . . . . \".\"\n[Go+ CI/Test]   |    18:  8: . . . . . . . . . . . . . . . . . Selector (\n[Go+ CI/Test]   |    18:  8: . . . . . . . . . . . . . . . . . . IDENT RETURN\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: RETURN}\n[Go+ CI/Test]   |    18: 14: . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    18: 14: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    18: 14: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    18: 14: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    18: 14: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    18: 14: . . . . . . . . . . . . )\n[Go+ CI/Test]   |    18: 14: . . . . . . . . . . . . \":\"\n[Go+ CI/Test]   |    18: 21: . . . . . . . . . . . . Element (\n[Go+ CI/Test]   |    18: 21: . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |    18: 21: . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    18: 21: . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    18: 21: . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    18: 21: . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |    18: 21: . . . . . . . . . . . . . . . . . . IDENT true\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: true}\n[Go+ CI/Test]   |    18: 25: . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    18: 25: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    18: 25: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    18: 25: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    18: 25: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    18: 25: . . . . . . . . . . . . )\n[Go+ CI/Test]   |    18: 25: . . . . . . . . . . . )\n[Go+ CI/Test]   |    18: 25: . . . . . . . . . . . \",\"\n[Go+ CI/Test]   |    19:  2: . . . . . . . . . . . Element (\n[Go+ CI/Test]   |    19:  2: . . . . . . . . . . . . Element (\n[Go+ CI/Test]   |    19:  2: . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |    19:  2: . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    19:  2: . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    19:  2: . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    19:  2: . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |    19:  2: . . . . . . . . . . . . . . . . . . IDENT token\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: token}\n[Go+ CI/Test]   |    19:  7: . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    19:  7: . . . . . . . . . . . . . . . . . \".\"\n[Go+ CI/Test]   |    19:  8: . . . . . . . . . . . . . . . . . Selector (\n[Go+ CI/Test]   |    19:  8: . . . . . . . . . . . . . . . . . . IDENT SELECT\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: SELECT}\n[Go+ CI/Test]   |    19: 14: . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    19: 14: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    19: 14: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    19: 14: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    19: 14: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    19: 14: . . . . . . . . . . . . )\n[Go+ CI/Test]   |    19: 14: . . . . . . . . . . . . \":\"\n[Go+ CI/Test]   |    19: 21: . . . . . . . . . . . . Element (\n[Go+ CI/Test]   |    19: 21: . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |    19: 21: . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    19: 21: . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    19: 21: . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    19: 21: . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |    19: 21: . . . . . . . . . . . . . . . . . . IDENT true\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: true}\n[Go+ CI/Test]   |    19: 25: . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    19: 25: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    19: 25: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    19: 25: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    19: 25: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    19: 25: . . . . . . . . . . . . )\n[Go+ CI/Test]   |    19: 25: . . . . . . . . . . . )\n[Go+ CI/Test]   |    19: 25: . . . . . . . . . . . \",\"\n[Go+ CI/Test]   |    20:  2: . . . . . . . . . . . Element (\n[Go+ CI/Test]   |    20:  2: . . . . . . . . . . . . Element (\n[Go+ CI/Test]   |    20:  2: . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |    20:  2: . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    20:  2: . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    20:  2: . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    20:  2: . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |    20:  2: . . . . . . . . . . . . . . . . . . IDENT token\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: token}\n[Go+ CI/Test]   |    20:  7: . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    20:  7: . . . . . . . . . . . . . . . . . \".\"\n[Go+ CI/Test]   |    20:  8: . . . . . . . . . . . . . . . . . Selector (\n[Go+ CI/Test]   |    20:  8: . . . . . . . . . . . . . . . . . . IDENT SWITCH\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: SWITCH}\n[Go+ CI/Test]   |    20: 14: . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    20: 14: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    20: 14: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    20: 14: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    20: 14: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    20: 14: . . . . . . . . . . . . )\n[Go+ CI/Test]   |    20: 14: . . . . . . . . . . . . \":\"\n[Go+ CI/Test]   |    20: 21: . . . . . . . . . . . . Element (\n[Go+ CI/Test]   |    20: 21: . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |    20: 21: . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    20: 21: . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    20: 21: . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    20: 21: . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |    20: 21: . . . . . . . . . . . . . . . . . . IDENT true\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: true}\n[Go+ CI/Test]   |    20: 25: . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    20: 25: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    20: 25: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    20: 25: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    20: 25: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    20: 25: . . . . . . . . . . . . )\n[Go+ CI/Test]   |    20: 25: . . . . . . . . . . . )\n[Go+ CI/Test]   |    20: 25: . . . . . . . . . . . \",\"\n[Go+ CI/Test]   |    21:  2: . . . . . . . . . . . Element (\n[Go+ CI/Test]   |    21:  2: . . . . . . . . . . . . Element (\n[Go+ CI/Test]   |    21:  2: . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |    21:  2: . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    21:  2: . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    21:  2: . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    21:  2: . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |    21:  2: . . . . . . . . . . . . . . . . . . IDENT token\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: token}\n[Go+ CI/Test]   |    21:  7: . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    21:  7: . . . . . . . . . . . . . . . . . \".\"\n[Go+ CI/Test]   |    21:  8: . . . . . . . . . . . . . . . . . Selector (\n[Go+ CI/Test]   |    21:  8: . . . . . . . . . . . . . . . . . . IDENT TYPE\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: TYPE}\n[Go+ CI/Test]   |    21: 12: . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    21: 12: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    21: 12: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    21: 12: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    21: 12: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    21: 12: . . . . . . . . . . . . )\n[Go+ CI/Test]   |    21: 12: . . . . . . . . . . . . \":\"\n[Go+ CI/Test]   |    21: 21: . . . . . . . . . . . . Element (\n[Go+ CI/Test]   |    21: 21: . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |    21: 21: . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    21: 21: . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    21: 21: . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    21: 21: . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |    21: 21: . . . . . . . . . . . . . . . . . . IDENT true\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: true}\n[Go+ CI/Test]   |    21: 25: . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    21: 25: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    21: 25: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    21: 25: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    21: 25: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    21: 25: . . . . . . . . . . . . )\n[Go+ CI/Test]   |    21: 25: . . . . . . . . . . . )\n[Go+ CI/Test]   |    21: 25: . . . . . . . . . . . \",\"\n[Go+ CI/Test]   |    22:  2: . . . . . . . . . . . Element (\n[Go+ CI/Test]   |    22:  2: . . . . . . . . . . . . Element (\n[Go+ CI/Test]   |    22:  2: . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |    22:  2: . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    22:  2: . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    22:  2: . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    22:  2: . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |    22:  2: . . . . . . . . . . . . . . . . . . IDENT token\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: token}\n[Go+ CI/Test]   |    22:  7: . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    22:  7: . . . . . . . . . . . . . . . . . \".\"\n[Go+ CI/Test]   |    22:  8: . . . . . . . . . . . . . . . . . Selector (\n[Go+ CI/Test]   |    22:  8: . . . . . . . . . . . . . . . . . . IDENT VAR\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: VAR}\n[Go+ CI/Test]   |    22: 11: . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    22: 11: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    22: 11: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    22: 11: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    22: 11: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    22: 11: . . . . . . . . . . . . )\n[Go+ CI/Test]   |    22: 11: . . . . . . . . . . . . \":\"\n[Go+ CI/Test]   |    22: 21: . . . . . . . . . . . . Element (\n[Go+ CI/Test]   |    22: 21: . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |    22: 21: . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    22: 21: . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    22: 21: . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    22: 21: . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |    22: 21: . . . . . . . . . . . . . . . . . . IDENT true\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: true}\n[Go+ CI/Test]   |    22: 25: . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    22: 25: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    22: 25: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    22: 25: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    22: 25: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    22: 25: . . . . . . . . . . . . )\n[Go+ CI/Test]   |    22: 25: . . . . . . . . . . . )\n[Go+ CI/Test]   |    22: 25: . . . . . . . . . . . \",\"\n[Go+ CI/Test]   |    23:  1: . . . . . . . . . . )\n[Go+ CI/Test]   |    23:  1: . . . . . . . . . . \"}\"\n[Go+ CI/Test]   |    23:  2: . . . . . . . . . )\n[Go+ CI/Test]   |    23:  2: . . . . . . . . )\n[Go+ CI/Test]   |    23:  2: . . . . . . . )\n[Go+ CI/Test]   |    23:  2: . . . . . . )\n[Go+ CI/Test]   |    23:  2: . . . . . )\n[Go+ CI/Test]   |    23:  2: . . . . )\n[Go+ CI/Test]   |    23:  2: . . . . \";\"\n[Go+ CI/Test]   |    25:  1: . . . )\n[Go+ CI/Test]   |    25:  1: . . )\n[Go+ CI/Test]   |    25:  1: . )\n[Go+ CI/Test]   |    25:  1: . Declaration (\n[Go+ CI/Test]   |    25:  1: . . GenDecl(type) (\n[Go+ CI/Test]   |    25:  1: . . . \"type\"\n[Go+ CI/Test]   |    25:  6: . . . TypeSpec (\n[Go+ CI/Test]   |    25:  6: . . . . IDENT Mode\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: Mode}\n[Go+ CI/Test]   |    25: 11: . . . . Type (\n[Go+ CI/Test]   |    25: 11: . . . . . TypeName (\n[Go+ CI/Test]   |    25: 11: . . . . . . IDENT uint\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: uint}\n[Go+ CI/Test]   |    25: 15: . . . . . )\n[Go+ CI/Test]   |    25: 15: . . . . )\n[Go+ CI/Test]   |    25: 15: . . . . \";\"\n[Go+ CI/Test]   |    27:  1: . . . )\n[Go+ CI/Test]   |    27:  1: . . )\n[Go+ CI/Test]   |    27:  1: . )\n[Go+ CI/Test]   |    27:  1: . Declaration (\n[Go+ CI/Test]   |    27:  1: . . GenDecl(const) (\n[Go+ CI/Test]   |    27:  1: . . . \"const\"\n[Go+ CI/Test]   |    27:  7: . . . \"(\"\n[Go+ CI/Test]   |    28:  2: . . . COMMENT\n[Go+ CI/Test]   |    29:  2: . . . constSpec (\n[Go+ CI/Test]   |    29:  2: . . . . IdentList (\n[Go+ CI/Test]   |    29:  2: . . . . . IDENT PackageClauseOnly\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: PackageClauseOnly}\n[Go+ CI/Test]   |    29: 20: . . . . )\n[Go+ CI/Test]   |    29: 20: . . . . TypeName (\n[Go+ CI/Test]   |    29: 20: . . . . . IDENT Mode\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: Mode}\n[Go+ CI/Test]   |    29: 25: . . . . )\n[Go+ CI/Test]   |    29: 25: . . . . \"=\"\n[Go+ CI/Test]   |    29: 27: . . . . ExpressionList (\n[Go+ CI/Test]   |    29: 27: . . . . . Expression (\n[Go+ CI/Test]   |    29: 27: . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    29: 27: . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    29: 27: . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    29: 27: . . . . . . . . . Operand (\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: INT, Value: 1}\n[Go+ CI/Test]   |    29: 27: . . . . . . . . . . INT 1\n[Go+ CI/Test]   |    29: 29: . . . . . . . . . )\n[Go+ CI/Test]   |    29: 29: . . . . . . . . )\n[Go+ CI/Test]   |    29: 29: . . . . . . . )\n[Go+ CI/Test]   |    29: 29: . . . . . . . \"<<\"\n[Go+ CI/Test]   |    29: 32: . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    29: 32: . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    29: 32: . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    29: 32: . . . . . . . . . . Operand (\n[Go+ CI/Test]   |    29: 32: . . . . . . . . . . . IDENT iota\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: iota}\n[Go+ CI/Test]   |    29: 36: . . . . . . . . . . )\n[Go+ CI/Test]   |    29: 36: . . . . . . . . . )\n[Go+ CI/Test]   |    29: 36: . . . . . . . . )\n[Go+ CI/Test]   |    29: 36: . . . . . . . )\n[Go+ CI/Test]   |    29: 36: . . . . . . )\n[Go+ CI/Test]   |    29: 36: . . . . . )\n[Go+ CI/Test]   |    29: 36: . . . . )\n[Go+ CI/Test]   |    29: 36: . . . . \";\"\n[Go+ CI/Test]   |    30:  2: . . . . COMMENT\n[Go+ CI/Test]   |    31:  2: . . . )\n[Go+ CI/Test]   |    31:  2: . . . constSpec (\n[Go+ CI/Test]   |    31:  2: . . . . IdentList (\n[Go+ CI/Test]   |    31:  2: . . . . . IDENT ImportsOnly\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: ImportsOnly}\n[Go+ CI/Test]   |    31: 13: . . . . )\n[Go+ CI/Test]   |    31: 13: . . . . \";\"\n[Go+ CI/Test]   |    32:  2: . . . . COMMENT\n[Go+ CI/Test]   |    33:  2: . . . )\n[Go+ CI/Test]   |    33:  2: . . . constSpec (\n[Go+ CI/Test]   |    33:  2: . . . . IdentList (\n[Go+ CI/Test]   |    33:  2: . . . . . IDENT ParseComments\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: ParseComments}\n[Go+ CI/Test]   |    33: 15: . . . . )\n[Go+ CI/Test]   |    33: 15: . . . . \";\"\n[Go+ CI/Test]   |    34:  2: . . . . COMMENT\n[Go+ CI/Test]   |    35:  2: . . . )\n[Go+ CI/Test]   |    35:  2: . . . constSpec (\n[Go+ CI/Test]   |    35:  2: . . . . IdentList (\n[Go+ CI/Test]   |    35:  2: . . . . . IDENT Trace\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: Trace}\n[Go+ CI/Test]   |    35:  7: . . . . )\n[Go+ CI/Test]   |    35:  7: . . . . \";\"\n[Go+ CI/Test]   |    36:  2: . . . . COMMENT\n[Go+ CI/Test]   |    37:  2: . . . )\n[Go+ CI/Test]   |    37:  2: . . . constSpec (\n[Go+ CI/Test]   |    37:  2: . . . . IdentList (\n[Go+ CI/Test]   |    37:  2: . . . . . IDENT DeclarationErrors\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: DeclarationErrors}\n[Go+ CI/Test]   |    37: 19: . . . . )\n[Go+ CI/Test]   |    37: 19: . . . . \";\"\n[Go+ CI/Test]   |    38:  2: . . . . COMMENT\n[Go+ CI/Test]   |    39:  2: . . . )\n[Go+ CI/Test]   |    39:  2: . . . constSpec (\n[Go+ CI/Test]   |    39:  2: . . . . IdentList (\n[Go+ CI/Test]   |    39:  2: . . . . . IDENT AllErrors\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: AllErrors}\n[Go+ CI/Test]   |    39: 11: . . . . )\n[Go+ CI/Test]   |    39: 11: . . . . \";\"\n[Go+ CI/Test]   |    40:  1: . . . )\n[Go+ CI/Test]   |    40:  1: . . . \")\"\n[Go+ CI/Test]   |    40:  2: . . . \";\"\n[Go+ CI/Test]   |    42:  1: . . . COMMENT\n[Go+ CI/Test]   |    43:  1: . . )\n[Go+ CI/Test]   |    43:  1: . )\n[Go+ CI/Test]   |    43:  1: . Declaration (\n[Go+ CI/Test]   |    43:  1: . . GenDecl(type) (\n[Go+ CI/Test]   |    43:  1: . . . \"type\"\n[Go+ CI/Test]   |    43:  6: . . . TypeSpec (\n[Go+ CI/Test]   |    43:  6: . . . . IDENT FileSystem\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: FileSystem}\n[Go+ CI/Test]   |    43: 17: . . . . Type (\n[Go+ CI/Test]   |    43: 17: . . . . . InterfaceType (\n[Go+ CI/Test]   |    43: 17: . . . . . . \"interface\"\n[Go+ CI/Test]   |    43: 27: . . . . . . \"{\"\n[Go+ CI/Test]   |    44:  2: . . . . . . MethodSpec (\n[Go+ CI/Test]   |    44:  2: . . . . . . . TypeName (\n[Go+ CI/Test]   |    44:  2: . . . . . . . . IDENT ReadDir\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: ReadDir}\n[Go+ CI/Test]   |    44:  9: . . . . . . . )\n[Go+ CI/Test]   |    44:  9: . . . . . . . Signature (\n[Go+ CI/Test]   |    44:  9: . . . . . . . . Parameters (\n[Go+ CI/Test]   |    44:  9: . . . . . . . . . \"(\"\n[Go+ CI/Test]   |    44: 10: . . . . . . . . . ParameterList (\n[Go+ CI/Test]   |    44: 10: . . . . . . . . . . ParamDeclOrNil (\n[Go+ CI/Test]   |    44: 10: . . . . . . . . . . . IDENT dirname\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: dirname}\n[Go+ CI/Test]   |    44: 18: . . . . . . . . . . . Type (\n[Go+ CI/Test]   |    44: 18: . . . . . . . . . . . . TypeName (\n[Go+ CI/Test]   |    44: 18: . . . . . . . . . . . . . IDENT string\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: string}\n[Go+ CI/Test]   |    44: 24: . . . . . . . . . . . . )\n[Go+ CI/Test]   |    44: 24: . . . . . . . . . . . )\n[Go+ CI/Test]   |    44: 24: . . . . . . . . . . )\n[Go+ CI/Test]   |    44: 24: . . . . . . . . . )\n[Go+ CI/Test]   |    44: 24: . . . . . . . . . \")\"\n[Go+ CI/Test]   |    44: 26: . . . . . . . . )\n[Go+ CI/Test]   |    44: 26: . . . . . . . . Result (\n[Go+ CI/Test]   |    44: 26: . . . . . . . . . Parameters (\n[Go+ CI/Test]   |    44: 26: . . . . . . . . . . \"(\"\n[Go+ CI/Test]   |    44: 27: . . . . . . . . . . ParameterList (\n[Go+ CI/Test]   |    44: 27: . . . . . . . . . . . ParamDeclOrNil (\n[Go+ CI/Test]   |    44: 27: . . . . . . . . . . . . Type (\n[Go+ CI/Test]   |    44: 27: . . . . . . . . . . . . . ArrayType (\n[Go+ CI/Test]   |    44: 27: . . . . . . . . . . . . . . \"[\"\n[Go+ CI/Test]   |    44: 28: . . . . . . . . . . . . . . \"]\"\n[Go+ CI/Test]   |    44: 29: . . . . . . . . . . . . . . Type (\n[Go+ CI/Test]   |    44: 29: . . . . . . . . . . . . . . . TypeName (\n[Go+ CI/Test]   |    44: 29: . . . . . . . . . . . . . . . . IDENT os\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: os}\n[Go+ CI/Test]   |    44: 31: . . . . . . . . . . . . . . . . \".\"\n[Go+ CI/Test]   |    44: 32: . . . . . . . . . . . . . . . . IDENT FileInfo\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: FileInfo}\n[Go+ CI/Test]   |    44: 40: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    44: 40: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:870: ast.ArrayType{Len: <nil>, Elt: &{os FileInfo}}\n[Go+ CI/Test]   |    44: 40: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    44: 40: . . . . . . . . . . . . )\n[Go+ CI/Test]   |    44: 40: . . . . . . . . . . . )\n[Go+ CI/Test]   |    44: 40: . . . . . . . . . . . \",\"\n[Go+ CI/Test]   |    44: 42: . . . . . . . . . . . ParamDeclOrNil (\n[Go+ CI/Test]   |    44: 42: . . . . . . . . . . . . IDENT error\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: error}\n[Go+ CI/Test]   |    44: 47: . . . . . . . . . . . )\n[Go+ CI/Test]   |    44: 47: . . . . . . . . . . )\n[Go+ CI/Test]   |    44: 47: . . . . . . . . . . \")\"\n[Go+ CI/Test]   |    44: 48: . . . . . . . . . )\n[Go+ CI/Test]   |    44: 48: . . . . . . . . )\n[Go+ CI/Test]   |    44: 48: . . . . . . . )\n[Go+ CI/Test]   |    44: 48: . . . . . . . \";\"\n[Go+ CI/Test]   |    45:  2: . . . . . . )\n[Go+ CI/Test]   |    45:  2: . . . . . . MethodSpec (\n[Go+ CI/Test]   |    45:  2: . . . . . . . TypeName (\n[Go+ CI/Test]   |    45:  2: . . . . . . . . IDENT ReadFile\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: ReadFile}\n[Go+ CI/Test]   |    45: 10: . . . . . . . )\n[Go+ CI/Test]   |    45: 10: . . . . . . . Signature (\n[Go+ CI/Test]   |    45: 10: . . . . . . . . Parameters (\n[Go+ CI/Test]   |    45: 10: . . . . . . . . . \"(\"\n[Go+ CI/Test]   |    45: 11: . . . . . . . . . ParameterList (\n[Go+ CI/Test]   |    45: 11: . . . . . . . . . . ParamDeclOrNil (\n[Go+ CI/Test]   |    45: 11: . . . . . . . . . . . IDENT filename\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: filename}\n[Go+ CI/Test]   |    45: 20: . . . . . . . . . . . Type (\n[Go+ CI/Test]   |    45: 20: . . . . . . . . . . . . TypeName (\n[Go+ CI/Test]   |    45: 20: . . . . . . . . . . . . . IDENT string\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: string}\n[Go+ CI/Test]   |    45: 26: . . . . . . . . . . . . )\n[Go+ CI/Test]   |    45: 26: . . . . . . . . . . . )\n[Go+ CI/Test]   |    45: 26: . . . . . . . . . . )\n[Go+ CI/Test]   |    45: 26: . . . . . . . . . )\n[Go+ CI/Test]   |    45: 26: . . . . . . . . . \")\"\n[Go+ CI/Test]   |    45: 28: . . . . . . . . )\n[Go+ CI/Test]   |    45: 28: . . . . . . . . Result (\n[Go+ CI/Test]   |    45: 28: . . . . . . . . . Parameters (\n[Go+ CI/Test]   |    45: 28: . . . . . . . . . . \"(\"\n[Go+ CI/Test]   |    45: 29: . . . . . . . . . . ParameterList (\n[Go+ CI/Test]   |    45: 29: . . . . . . . . . . . ParamDeclOrNil (\n[Go+ CI/Test]   |    45: 29: . . . . . . . . . . . . Type (\n[Go+ CI/Test]   |    45: 29: . . . . . . . . . . . . . ArrayType (\n[Go+ CI/Test]   |    45: 29: . . . . . . . . . . . . . . \"[\"\n[Go+ CI/Test]   |    45: 30: . . . . . . . . . . . . . . \"]\"\n[Go+ CI/Test]   |    45: 31: . . . . . . . . . . . . . . Type (\n[Go+ CI/Test]   |    45: 31: . . . . . . . . . . . . . . . TypeName (\n[Go+ CI/Test]   |    45: 31: . . . . . . . . . . . . . . . . IDENT byte\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: byte}\n[Go+ CI/Test]   |    45: 35: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    45: 35: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:870: ast.ArrayType{Len: <nil>, Elt: byte}\n[Go+ CI/Test]   |    45: 35: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    45: 35: . . . . . . . . . . . . )\n[Go+ CI/Test]   |    45: 35: . . . . . . . . . . . )\n[Go+ CI/Test]   |    45: 35: . . . . . . . . . . . \",\"\n[Go+ CI/Test]   |    45: 37: . . . . . . . . . . . ParamDeclOrNil (\n[Go+ CI/Test]   |    45: 37: . . . . . . . . . . . . IDENT error\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: error}\n[Go+ CI/Test]   |    45: 42: . . . . . . . . . . . )\n[Go+ CI/Test]   |    45: 42: . . . . . . . . . . )\n[Go+ CI/Test]   |    45: 42: . . . . . . . . . . \")\"\n[Go+ CI/Test]   |    45: 43: . . . . . . . . . )\n[Go+ CI/Test]   |    45: 43: . . . . . . . . )\n[Go+ CI/Test]   |    45: 43: . . . . . . . )\n[Go+ CI/Test]   |    45: 43: . . . . . . . \";\"\n[Go+ CI/Test]   |    46:  2: . . . . . . )\n[Go+ CI/Test]   |    46:  2: . . . . . . MethodSpec (\n[Go+ CI/Test]   |    46:  2: . . . . . . . TypeName (\n[Go+ CI/Test]   |    46:  2: . . . . . . . . IDENT Join\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: Join}\n[Go+ CI/Test]   |    46:  6: . . . . . . . )\n[Go+ CI/Test]   |    46:  6: . . . . . . . Signature (\n[Go+ CI/Test]   |    46:  6: . . . . . . . . Parameters (\n[Go+ CI/Test]   |    46:  6: . . . . . . . . . \"(\"\n[Go+ CI/Test]   |    46:  7: . . . . . . . . . ParameterList (\n[Go+ CI/Test]   |    46:  7: . . . . . . . . . . ParamDeclOrNil (\n[Go+ CI/Test]   |    46:  7: . . . . . . . . . . . IDENT elem\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: elem}\n[Go+ CI/Test]   |    46: 12: . . . . . . . . . . . DotsType (\n[Go+ CI/Test]   |    46: 12: . . . . . . . . . . . . \"...\"\n[Go+ CI/Test]   |    46: 15: . . . . . . . . . . . . Type (\n[Go+ CI/Test]   |    46: 15: . . . . . . . . . . . . . TypeName (\n[Go+ CI/Test]   |    46: 15: . . . . . . . . . . . . . . IDENT string\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: string}\n[Go+ CI/Test]   |    46: 21: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    46: 21: . . . . . . . . . . . . )\n[Go+ CI/Test]   |    46: 21: . . . . . . . . . . . )\n[Go+ CI/Test]   |    46: 21: . . . . . . . . . . )\n[Go+ CI/Test]   |    46: 21: . . . . . . . . . )\n[Go+ CI/Test]   |    46: 21: . . . . . . . . . \")\"\n[Go+ CI/Test]   |    46: 23: . . . . . . . . )\n[Go+ CI/Test]   |    46: 23: . . . . . . . . Result (\n[Go+ CI/Test]   |    46: 23: . . . . . . . . . TypeName (\n[Go+ CI/Test]   |    46: 23: . . . . . . . . . . IDENT string\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: string}\n[Go+ CI/Test]   |    46: 29: . . . . . . . . . )\n[Go+ CI/Test]   |    46: 29: . . . . . . . . )\n[Go+ CI/Test]   |    46: 29: . . . . . . . )\n[Go+ CI/Test]   |    46: 29: . . . . . . . \";\"\n[Go+ CI/Test]   |    47:  1: . . . . . . )\n[Go+ CI/Test]   |    47:  1: . . . . . . \"}\"\n[Go+ CI/Test]   |    47:  2: . . . . . )\n[Go+ CI/Test]   |    47:  2: . . . . )\n[Go+ CI/Test]   |    47:  2: . . . . \";\"\n[Go+ CI/Test]   |    49:  1: . . . )\n[Go+ CI/Test]   |    49:  1: . . )\n[Go+ CI/Test]   |    49:  1: . )\n[Go+ CI/Test]   |    49:  1: . Declaration (\n[Go+ CI/Test]   |    49:  1: . . GenDecl(type) (\n[Go+ CI/Test]   |    49:  1: . . . \"type\"\n[Go+ CI/Test]   |    49:  6: . . . TypeSpec (\n[Go+ CI/Test]   |    49:  6: . . . . IDENT IF\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: IF}\n[Go+ CI/Test]   |    49:  9: . . . . \"=\"\n[Go+ CI/Test]   |    49: 11: . . . . Type (\n[Go+ CI/Test]   |    49: 11: . . . . . TypeName (\n[Go+ CI/Test]   |    49: 11: . . . . . . IDENT FileSystem\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: FileSystem}\n[Go+ CI/Test]   |    49: 21: . . . . . )\n[Go+ CI/Test]   |    49: 21: . . . . )\n[Go+ CI/Test]   |    49: 21: . . . . \";\"\n[Go+ CI/Test]   |    51:  1: . . . )\n[Go+ CI/Test]   |    51:  1: . . )\n[Go+ CI/Test]   |    51:  1: . )\n[Go+ CI/Test]   |    51:  1: . Declaration (\n[Go+ CI/Test]   |    51:  1: . . GenDecl(type) (\n[Go+ CI/Test]   |    51:  1: . . . \"type\"\n[Go+ CI/Test]   |    51:  6: . . . TypeSpec (\n[Go+ CI/Test]   |    51:  6: . . . . IDENT Foo\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: Foo}\n[Go+ CI/Test]   |    51: 10: . . . . Type (\n[Go+ CI/Test]   |    51: 10: . . . . . StructType (\n[Go+ CI/Test]   |    51: 10: . . . . . . \"struct\"\n[Go+ CI/Test]   |    51: 17: . . . . . . \"{\"\n[Go+ CI/Test]   |    52:  2: . . . . . . FieldDecl (\n[Go+ CI/Test]   |    52:  2: . . . . . . . IDENT a\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: a}\n[Go+ CI/Test]   |    52:  3: . . . . . . . \",\"\n[Go+ CI/Test]   |    52:  5: . . . . . . . IDENT b\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: b}\n[Go+ CI/Test]   |    52:  7: . . . . . . . Type (\n[Go+ CI/Test]   |    52:  7: . . . . . . . . MapType (\n[Go+ CI/Test]   |    52:  7: . . . . . . . . . \"map\"\n[Go+ CI/Test]   |    52: 10: . . . . . . . . . \"[\"\n[Go+ CI/Test]   |    52: 11: . . . . . . . . . Type (\n[Go+ CI/Test]   |    52: 11: . . . . . . . . . . TypeName (\n[Go+ CI/Test]   |    52: 11: . . . . . . . . . . . IDENT string\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: string}\n[Go+ CI/Test]   |    52: 17: . . . . . . . . . . )\n[Go+ CI/Test]   |    52: 17: . . . . . . . . . )\n[Go+ CI/Test]   |    52: 17: . . . . . . . . . \"]\"\n[Go+ CI/Test]   |    52: 18: . . . . . . . . . Type (\n[Go+ CI/Test]   |    52: 18: . . . . . . . . . . StructType (\n[Go+ CI/Test]   |    52: 18: . . . . . . . . . . . \"struct\"\n[Go+ CI/Test]   |    52: 24: . . . . . . . . . . . \"{\"\n[Go+ CI/Test]   |    52: 25: . . . . . . . . . . . \"}\"\n[Go+ CI/Test]   |    52: 26: . . . . . . . . . . )\n[Go+ CI/Test]   |    52: 26: . . . . . . . . . )\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1371: ast.MapType{Key: string, Value: &{1175 0xc0001b2990 false}}\n[Go+ CI/Test]   |    52: 26: . . . . . . . . )\n[Go+ CI/Test]   |    52: 26: . . . . . . . )\n[Go+ CI/Test]   |    52: 26: . . . . . . . \";\"\n[Go+ CI/Test]   |    53:  1: . . . . . . )\n[Go+ CI/Test]   |    53:  1: . . . . . . \"}\"\n[Go+ CI/Test]   |    53:  2: . . . . . )\n[Go+ CI/Test]   |    53:  2: . . . . )\n[Go+ CI/Test]   |    53:  2: . . . . \";\"\n[Go+ CI/Test]   |    55:  1: . . . )\n[Go+ CI/Test]   |    55:  1: . . )\n[Go+ CI/Test]   |    55:  1: . )\n[Go+ CI/Test]   |    55:  1: . Declaration (\n[Go+ CI/Test]   |    55:  1: . . FunctionDecl (\n[Go+ CI/Test]   |    55:  1: . . . \"func\"\n[Go+ CI/Test]   |    55:  6: . . . Parameters (\n[Go+ CI/Test]   |    55:  6: . . . . \"(\"\n[Go+ CI/Test]   |    55:  7: . . . . ParameterList (\n[Go+ CI/Test]   |    55:  7: . . . . . ParamDeclOrNil (\n[Go+ CI/Test]   |    55:  7: . . . . . . IDENT p\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: p}\n[Go+ CI/Test]   |    55:  9: . . . . . . Type (\n[Go+ CI/Test]   |    55:  9: . . . . . . . PointerType (\n[Go+ CI/Test]   |    55:  9: . . . . . . . . \"*\"\n[Go+ CI/Test]   |    55: 10: . . . . . . . . Type (\n[Go+ CI/Test]   |    55: 10: . . . . . . . . . TypeName (\n[Go+ CI/Test]   |    55: 10: . . . . . . . . . . IDENT Foo\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: Foo}\n[Go+ CI/Test]   |    55: 13: . . . . . . . . . )\n[Go+ CI/Test]   |    55: 13: . . . . . . . . )\n[Go+ CI/Test]   |    55: 13: . . . . . . . )\n[Go+ CI/Test]   |    55: 13: . . . . . . )\n[Go+ CI/Test]   |    55: 13: . . . . . )\n[Go+ CI/Test]   |    55: 13: . . . . )\n[Go+ CI/Test]   |    55: 13: . . . . \")\"\n[Go+ CI/Test]   |    55: 15: . . . )\n[Go+ CI/Test]   |    55: 15: . . . TypeName (\n[Go+ CI/Test]   |    55: 15: . . . . IDENT bar\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: bar}\n[Go+ CI/Test]   |    55: 18: . . . )\n[Go+ CI/Test]   |    55: 18: . . . Signature (\n[Go+ CI/Test]   |    55: 18: . . . . Parameters (\n[Go+ CI/Test]   |    55: 18: . . . . . \"(\"\n[Go+ CI/Test]   |    55: 19: . . . . . \")\"\n[Go+ CI/Test]   |    55: 21: . . . . )\n[Go+ CI/Test]   |    55: 21: . . . . Result (\n[Go+ CI/Test]   |    55: 21: . . . . )\n[Go+ CI/Test]   |    55: 21: . . . )\n[Go+ CI/Test]   |    55: 21: . . . Body (\n[Go+ CI/Test]   |    55: 21: . . . . \"{\"\n[Go+ CI/Test]   |    56:  1: . . . . StatementList (\n[Go+ CI/Test]   |    56:  1: . . . . )\n[Go+ CI/Test]   |    56:  1: . . . . \"}\"\n[Go+ CI/Test]   |    56:  2: . . . )\n[Go+ CI/Test]   |    56:  2: . . . \";\"\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:3564: ast.FuncDecl{Name: bar, ...}\n[Go+ CI/Test]   |    58:  1: . . )\n[Go+ CI/Test]   |    58:  1: . )\n[Go+ CI/Test]   |    58:  1: . Declaration (\n[Go+ CI/Test]   |    58:  1: . . FunctionDecl (\n[Go+ CI/Test]   |    58:  1: . . . \"func\"\n[Go+ CI/Test]   |    58:  6: . . . IDENT init\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: init}\n[Go+ CI/Test]   |    58: 10: . . . Signature (\n[Go+ CI/Test]   |    58: 10: . . . . Parameters (\n[Go+ CI/Test]   |    58: 10: . . . . . \"(\"\n[Go+ CI/Test]   |    58: 11: . . . . . \")\"\n[Go+ CI/Test]   |    58: 13: . . . . )\n[Go+ CI/Test]   |    58: 13: . . . . Result (\n[Go+ CI/Test]   |    58: 13: . . . . )\n[Go+ CI/Test]   |    58: 13: . . . )\n[Go+ CI/Test]   |    58: 13: . . . Body (\n[Go+ CI/Test]   |    58: 13: . . . . \"{\"\n[Go+ CI/Test]   |    59:  2: . . . . StatementList (\n[Go+ CI/Test]   |    59:  2: . . . . . Statement (\n[Go+ CI/Test]   |    59:  2: . . . . . . SimpleStmt (\n[Go+ CI/Test]   |    59:  2: . . . . . . . ExpressionList (\n[Go+ CI/Test]   |    59:  2: . . . . . . . . Expression (\n[Go+ CI/Test]   |    59:  2: . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    59:  2: . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    59:  2: . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    59:  2: . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |    59:  2: . . . . . . . . . . . . . IDENT f\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: f}\n[Go+ CI/Test]   |    59:  3: . . . . . . . . . . . . )\n[Go+ CI/Test]   |    59:  3: . . . . . . . . . . . )\n[Go+ CI/Test]   |    59:  3: . . . . . . . . . . )\n[Go+ CI/Test]   |    59:  3: . . . . . . . . . )\n[Go+ CI/Test]   |    59:  3: . . . . . . . . )\n[Go+ CI/Test]   |    59:  3: . . . . . . . . \",\"\n[Go+ CI/Test]   |    59:  5: . . . . . . . . Expression (\n[Go+ CI/Test]   |    59:  5: . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    59:  5: . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    59:  5: . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    59:  5: . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |    59:  5: . . . . . . . . . . . . . IDENT err\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: err}\n[Go+ CI/Test]   |    59:  9: . . . . . . . . . . . . )\n[Go+ CI/Test]   |    59:  9: . . . . . . . . . . . )\n[Go+ CI/Test]   |    59:  9: . . . . . . . . . . )\n[Go+ CI/Test]   |    59:  9: . . . . . . . . . )\n[Go+ CI/Test]   |    59:  9: . . . . . . . . )\n[Go+ CI/Test]   |    59:  9: . . . . . . . )\n[Go+ CI/Test]   |    59:  9: . . . . . . . \":=\"\n[Go+ CI/Test]   |    59: 12: . . . . . . . ExpressionList (\n[Go+ CI/Test]   |    59: 12: . . . . . . . . Expression (\n[Go+ CI/Test]   |    59: 12: . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    59: 12: . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    59: 12: . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    59: 12: . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |    59: 12: . . . . . . . . . . . . . IDENT os\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: os}\n[Go+ CI/Test]   |    59: 14: . . . . . . . . . . . . )\n[Go+ CI/Test]   |    59: 14: . . . . . . . . . . . . \".\"\n[Go+ CI/Test]   |    59: 15: . . . . . . . . . . . . Selector (\n[Go+ CI/Test]   |    59: 15: . . . . . . . . . . . . . IDENT Open\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: Open}\n[Go+ CI/Test]   |    59: 19: . . . . . . . . . . . . )\n[Go+ CI/Test]   |    59: 19: . . . . . . . . . . . . CallOrConversion (\n[Go+ CI/Test]   |    59: 19: . . . . . . . . . . . . . \"(\"\n[Go+ CI/Test]   |    59: 20: . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |    59: 20: . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    59: 20: . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    59: 20: . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    59: 20: . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: STRING, Value: \"a\"}\n[Go+ CI/Test]   |    59: 20: . . . . . . . . . . . . . . . . . . STRING \"a\"\n[Go+ CI/Test]   |    59: 23: . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    59: 23: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    59: 23: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    59: 23: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    59: 23: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    59: 23: . . . . . . . . . . . . . \")\"\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1878: ast.CallExpr{Fun: &{os Open}, Ellipsis: false, isCmd: false}\n[Go+ CI/Test]   |    59: 24: . . . . . . . . . . . . )\n[Go+ CI/Test]   |    59: 24: . . . . . . . . . . . )\n[Go+ CI/Test]   |    59: 24: . . . . . . . . . . )\n[Go+ CI/Test]   |    59: 24: . . . . . . . . . )\n[Go+ CI/Test]   |    59: 24: . . . . . . . . )\n[Go+ CI/Test]   |    59: 24: . . . . . . . )\n[Go+ CI/Test]   |    59: 24: . . . . . . )\n[Go+ CI/Test]   |    59: 24: . . . . . . \";\"\n[Go+ CI/Test]   |    60:  2: . . . . . )\n[Go+ CI/Test]   |    60:  2: . . . . . Statement (\n[Go+ CI/Test]   |    60:  2: . . . . . . IfStmt (\n[Go+ CI/Test]   |    60:  2: . . . . . . . \"if\"\n[Go+ CI/Test]   |    60:  5: . . . . . . . SimpleStmt (\n[Go+ CI/Test]   |    60:  5: . . . . . . . . ExpressionList (\n[Go+ CI/Test]   |    60:  5: . . . . . . . . . Expression (\n[Go+ CI/Test]   |    60:  5: . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    60:  5: . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    60:  5: . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    60:  5: . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |    60:  5: . . . . . . . . . . . . . . IDENT err\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: err}\n[Go+ CI/Test]   |    60:  9: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    60:  9: . . . . . . . . . . . . )\n[Go+ CI/Test]   |    60:  9: . . . . . . . . . . . )\n[Go+ CI/Test]   |    60:  9: . . . . . . . . . . . \"!=\"\n[Go+ CI/Test]   |    60: 12: . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    60: 12: . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    60: 12: . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    60: 12: . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |    60: 12: . . . . . . . . . . . . . . . IDENT nil\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: nil}\n[Go+ CI/Test]   |    60: 16: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    60: 16: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    60: 16: . . . . . . . . . . . . )\n[Go+ CI/Test]   |    60: 16: . . . . . . . . . . . )\n[Go+ CI/Test]   |    60: 16: . . . . . . . . . . )\n[Go+ CI/Test]   |    60: 16: . . . . . . . . . )\n[Go+ CI/Test]   |    60: 16: . . . . . . . . )\n[Go+ CI/Test]   |    60: 16: . . . . . . . )\n[Go+ CI/Test]   |    60: 16: . . . . . . . BlockStmt (\n[Go+ CI/Test]   |    60: 16: . . . . . . . . \"{\"\n[Go+ CI/Test]   |    61:  3: . . . . . . . . StatementList (\n[Go+ CI/Test]   |    61:  3: . . . . . . . . . Statement (\n[Go+ CI/Test]   |    61:  3: . . . . . . . . . . ReturnStmt (\n[Go+ CI/Test]   |    61:  3: . . . . . . . . . . . \"return\"\n[Go+ CI/Test]   |    61:  9: . . . . . . . . . . . \";\"\n[Go+ CI/Test]   |    62:  2: . . . . . . . . . . )\n[Go+ CI/Test]   |    62:  2: . . . . . . . . . )\n[Go+ CI/Test]   |    62:  2: . . . . . . . . )\n[Go+ CI/Test]   |    62:  2: . . . . . . . . \"}\"\n[Go+ CI/Test]   |    62:  3: . . . . . . . )\n[Go+ CI/Test]   |    62:  3: . . . . . . . \";\"\n[Go+ CI/Test]   |    63:  2: . . . . . . )\n[Go+ CI/Test]   |    63:  2: . . . . . )\n[Go+ CI/Test]   |    63:  2: . . . . . Statement (\n[Go+ CI/Test]   |    63:  2: . . . . . . DeferStmt (\n[Go+ CI/Test]   |    63:  2: . . . . . . . \"defer\"\n[Go+ CI/Test]   |    63:  8: . . . . . . . Expression (\n[Go+ CI/Test]   |    63:  8: . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    63:  8: . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    63:  8: . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    63:  8: . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |    63:  8: . . . . . . . . . . . . IDENT f\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: f}\n[Go+ CI/Test]   |    63:  9: . . . . . . . . . . . )\n[Go+ CI/Test]   |    63:  9: . . . . . . . . . . . \".\"\n[Go+ CI/Test]   |    63: 10: . . . . . . . . . . . Selector (\n[Go+ CI/Test]   |    63: 10: . . . . . . . . . . . . IDENT Close\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: Close}\n[Go+ CI/Test]   |    63: 15: . . . . . . . . . . . )\n[Go+ CI/Test]   |    63: 15: . . . . . . . . . . . CallOrConversion (\n[Go+ CI/Test]   |    63: 15: . . . . . . . . . . . . \"(\"\n[Go+ CI/Test]   |    63: 16: . . . . . . . . . . . . \")\"\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1878: ast.CallExpr{Fun: &{f Close}, Ellipsis: false, isCmd: false}\n[Go+ CI/Test]   |    63: 17: . . . . . . . . . . . )\n[Go+ CI/Test]   |    63: 17: . . . . . . . . . . )\n[Go+ CI/Test]   |    63: 17: . . . . . . . . . )\n[Go+ CI/Test]   |    63: 17: . . . . . . . . )\n[Go+ CI/Test]   |    63: 17: . . . . . . . )\n[Go+ CI/Test]   |    63: 17: . . . . . . . \";\"\n[Go+ CI/Test]   |    65:  2: . . . . . . )\n[Go+ CI/Test]   |    65:  2: . . . . . )\n[Go+ CI/Test]   |    65:  2: . . . . . Statement (\n[Go+ CI/Test]   |    65:  2: . . . . . . SimpleStmt (\n[Go+ CI/Test]   |    65:  2: . . . . . . . ExpressionList (\n[Go+ CI/Test]   |    65:  2: . . . . . . . . Expression (\n[Go+ CI/Test]   |    65:  2: . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    65:  2: . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    65:  2: . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    65:  2: . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |    65:  2: . . . . . . . . . . . . . IDENT ch\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: ch}\n[Go+ CI/Test]   |    65:  5: . . . . . . . . . . . . )\n[Go+ CI/Test]   |    65:  5: . . . . . . . . . . . )\n[Go+ CI/Test]   |    65:  5: . . . . . . . . . . )\n[Go+ CI/Test]   |    65:  5: . . . . . . . . . )\n[Go+ CI/Test]   |    65:  5: . . . . . . . . )\n[Go+ CI/Test]   |    65:  5: . . . . . . . )\n[Go+ CI/Test]   |    65:  5: . . . . . . . \":=\"\n[Go+ CI/Test]   |    65:  8: . . . . . . . ExpressionList (\n[Go+ CI/Test]   |    65:  8: . . . . . . . . Expression (\n[Go+ CI/Test]   |    65:  8: . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    65:  8: . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    65:  8: . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    65:  8: . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |    65:  8: . . . . . . . . . . . . . IDENT make\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: make}\n[Go+ CI/Test]   |    65: 12: . . . . . . . . . . . . )\n[Go+ CI/Test]   |    65: 12: . . . . . . . . . . . . CallOrConversion (\n[Go+ CI/Test]   |    65: 12: . . . . . . . . . . . . . \"(\"\n[Go+ CI/Test]   |    65: 13: . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |    65: 13: . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    65: 13: . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    65: 13: . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    65: 13: . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |    65: 13: . . . . . . . . . . . . . . . . . . ChanType (\n[Go+ CI/Test]   |    65: 13: . . . . . . . . . . . . . . . . . . . \"chan\"\n[Go+ CI/Test]   |    65: 18: . . . . . . . . . . . . . . . . . . . Type (\n[Go+ CI/Test]   |    65: 18: . . . . . . . . . . . . . . . . . . . . TypeName (\n[Go+ CI/Test]   |    65: 18: . . . . . . . . . . . . . . . . . . . . . IDENT bool\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: bool}\n[Go+ CI/Test]   |    65: 22: . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    65: 22: . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    65: 22: . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    65: 22: . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    65: 22: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    65: 22: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    65: 22: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    65: 22: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    65: 22: . . . . . . . . . . . . . \",\"\n[Go+ CI/Test]   |    65: 24: . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |    65: 24: . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    65: 24: . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    65: 24: . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    65: 24: . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: INT, Value: 100}\n[Go+ CI/Test]   |    65: 24: . . . . . . . . . . . . . . . . . . INT 100\n[Go+ CI/Test]   |    65: 27: . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    65: 27: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    65: 27: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    65: 27: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    65: 27: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    65: 27: . . . . . . . . . . . . . \")\"\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1878: ast.CallExpr{Fun: make, Ellipsis: false, isCmd: false}\n[Go+ CI/Test]   |    65: 28: . . . . . . . . . . . . )\n[Go+ CI/Test]   |    65: 28: . . . . . . . . . . . )\n[Go+ CI/Test]   |    65: 28: . . . . . . . . . . )\n[Go+ CI/Test]   |    65: 28: . . . . . . . . . )\n[Go+ CI/Test]   |    65: 28: . . . . . . . . )\n[Go+ CI/Test]   |    65: 28: . . . . . . . )\n[Go+ CI/Test]   |    65: 28: . . . . . . )\n[Go+ CI/Test]   |    65: 28: . . . . . . \";\"\n[Go+ CI/Test]   |    66:  2: . . . . . )\n[Go+ CI/Test]   |    66:  2: . . . . . Statement (\n[Go+ CI/Test]   |    66:  2: . . . . . . SelectStmt (\n[Go+ CI/Test]   |    66:  2: . . . . . . . \"select\"\n[Go+ CI/Test]   |    66:  9: . . . . . . . \"{\"\n[Go+ CI/Test]   |    67:  2: . . . . . . . CommClause (\n[Go+ CI/Test]   |    67:  2: . . . . . . . . \"case\"\n[Go+ CI/Test]   |    67:  7: . . . . . . . . ExpressionList (\n[Go+ CI/Test]   |    67:  7: . . . . . . . . . Expression (\n[Go+ CI/Test]   |    67:  7: . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    67:  7: . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    67:  7: . . . . . . . . . . . . \"<-\"\n[Go+ CI/Test]   |    67:  9: . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    67:  9: . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    67:  9: . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |    67:  9: . . . . . . . . . . . . . . . IDENT ch\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: ch}\n[Go+ CI/Test]   |    67: 11: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    67: 11: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    67: 11: . . . . . . . . . . . . )\n[Go+ CI/Test]   |    67: 11: . . . . . . . . . . . )\n[Go+ CI/Test]   |    67: 11: . . . . . . . . . . )\n[Go+ CI/Test]   |    67: 11: . . . . . . . . . )\n[Go+ CI/Test]   |    67: 11: . . . . . . . . )\n[Go+ CI/Test]   |    67: 11: . . . . . . . . \":\"\n[Go+ CI/Test]   |    68:  3: . . . . . . . . StatementList (\n[Go+ CI/Test]   |    68:  3: . . . . . . . . . Statement (\n[Go+ CI/Test]   |    68:  3: . . . . . . . . . . SimpleStmt (\n[Go+ CI/Test]   |    68:  3: . . . . . . . . . . . ExpressionList (\n[Go+ CI/Test]   |    68:  3: . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |    68:  3: . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    68:  3: . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    68:  3: . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    68:  3: . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |    68:  3: . . . . . . . . . . . . . . . . . IDENT println\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: println}\n[Go+ CI/Test]   |    68: 10: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    68: 10: . . . . . . . . . . . . . . . . CallOrConversion (\n[Go+ CI/Test]   |    68: 10: . . . . . . . . . . . . . . . . . \"(\"\n[Go+ CI/Test]   |    68: 11: . . . . . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |    68: 11: . . . . . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    68: 11: . . . . . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    68: 11: . . . . . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    68: 11: . . . . . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: STRING, Value: \"1\"}\n[Go+ CI/Test]   |    68: 11: . . . . . . . . . . . . . . . . . . . . . . STRING \"1\"\n[Go+ CI/Test]   |    68: 14: . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    68: 14: . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    68: 14: . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    68: 14: . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    68: 14: . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    68: 14: . . . . . . . . . . . . . . . . . \")\"\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1878: ast.CallExpr{Fun: println, Ellipsis: false, isCmd: false}\n[Go+ CI/Test]   |    68: 15: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    68: 15: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    68: 15: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    68: 15: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    68: 15: . . . . . . . . . . . . )\n[Go+ CI/Test]   |    68: 15: . . . . . . . . . . . )\n[Go+ CI/Test]   |    68: 15: . . . . . . . . . . )\n[Go+ CI/Test]   |    68: 15: . . . . . . . . . . \";\"\n[Go+ CI/Test]   |    69:  2: . . . . . . . . . )\n[Go+ CI/Test]   |    69:  2: . . . . . . . . )\n[Go+ CI/Test]   |    69:  2: . . . . . . . )\n[Go+ CI/Test]   |    69:  2: . . . . . . . CommClause (\n[Go+ CI/Test]   |    69:  2: . . . . . . . . \"case\"\n[Go+ CI/Test]   |    69:  7: . . . . . . . . ExpressionList (\n[Go+ CI/Test]   |    69:  7: . . . . . . . . . Expression (\n[Go+ CI/Test]   |    69:  7: . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    69:  7: . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    69:  7: . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    69:  7: . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |    69:  7: . . . . . . . . . . . . . . IDENT ch\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: ch}\n[Go+ CI/Test]   |    69: 10: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    69: 10: . . . . . . . . . . . . )\n[Go+ CI/Test]   |    69: 10: . . . . . . . . . . . )\n[Go+ CI/Test]   |    69: 10: . . . . . . . . . . )\n[Go+ CI/Test]   |    69: 10: . . . . . . . . . )\n[Go+ CI/Test]   |    69: 10: . . . . . . . . )\n[Go+ CI/Test]   |    69: 10: . . . . . . . . \"<-\"\n[Go+ CI/Test]   |    69: 13: . . . . . . . . Expression (\n[Go+ CI/Test]   |    69: 13: . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    69: 13: . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    69: 13: . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    69: 13: . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |    69: 13: . . . . . . . . . . . . . IDENT true\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: true}\n[Go+ CI/Test]   |    69: 17: . . . . . . . . . . . . )\n[Go+ CI/Test]   |    69: 17: . . . . . . . . . . . )\n[Go+ CI/Test]   |    69: 17: . . . . . . . . . . )\n[Go+ CI/Test]   |    69: 17: . . . . . . . . . )\n[Go+ CI/Test]   |    69: 17: . . . . . . . . )\n[Go+ CI/Test]   |    69: 17: . . . . . . . . \":\"\n[Go+ CI/Test]   |    70:  3: . . . . . . . . StatementList (\n[Go+ CI/Test]   |    70:  3: . . . . . . . . . Statement (\n[Go+ CI/Test]   |    70:  3: . . . . . . . . . . SimpleStmt (\n[Go+ CI/Test]   |    70:  3: . . . . . . . . . . . ExpressionList (\n[Go+ CI/Test]   |    70:  3: . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |    70:  3: . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    70:  3: . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    70:  3: . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    70:  3: . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |    70:  3: . . . . . . . . . . . . . . . . . IDENT println\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: println}\n[Go+ CI/Test]   |    70: 10: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    70: 10: . . . . . . . . . . . . . . . . CallOrConversion (\n[Go+ CI/Test]   |    70: 10: . . . . . . . . . . . . . . . . . \"(\"\n[Go+ CI/Test]   |    70: 11: . . . . . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |    70: 11: . . . . . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    70: 11: . . . . . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    70: 11: . . . . . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    70: 11: . . . . . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: STRING, Value: \"2\"}\n[Go+ CI/Test]   |    70: 11: . . . . . . . . . . . . . . . . . . . . . . STRING \"2\"\n[Go+ CI/Test]   |    70: 14: . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    70: 14: . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    70: 14: . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    70: 14: . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    70: 14: . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    70: 14: . . . . . . . . . . . . . . . . . \")\"\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1878: ast.CallExpr{Fun: println, Ellipsis: false, isCmd: false}\n[Go+ CI/Test]   |    70: 15: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    70: 15: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    70: 15: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    70: 15: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    70: 15: . . . . . . . . . . . . )\n[Go+ CI/Test]   |    70: 15: . . . . . . . . . . . )\n[Go+ CI/Test]   |    70: 15: . . . . . . . . . . )\n[Go+ CI/Test]   |    70: 15: . . . . . . . . . . \";\"\n[Go+ CI/Test]   |    71:  2: . . . . . . . . . )\n[Go+ CI/Test]   |    71:  2: . . . . . . . . )\n[Go+ CI/Test]   |    71:  2: . . . . . . . )\n[Go+ CI/Test]   |    71:  2: . . . . . . . \"}\"\n[Go+ CI/Test]   |    71:  3: . . . . . . . \";\"\n[Go+ CI/Test]   |    73:  2: . . . . . . )\n[Go+ CI/Test]   |    73:  2: . . . . . )\n[Go+ CI/Test]   |    73:  2: . . . . . Statement (\n[Go+ CI/Test]   |    73:  2: . . . . . . GoStmt (\n[Go+ CI/Test]   |    73:  2: . . . . . . . \"go\"\n[Go+ CI/Test]   |    73:  5: . . . . . . . Expression (\n[Go+ CI/Test]   |    73:  5: . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    73:  5: . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    73:  5: . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    73:  5: . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |    73:  5: . . . . . . . . . . . . FuncTypeOrLit (\n[Go+ CI/Test]   |    73:  5: . . . . . . . . . . . . . FuncType (\n[Go+ CI/Test]   |    73:  5: . . . . . . . . . . . . . . \"func\"\n[Go+ CI/Test]   |    73:  9: . . . . . . . . . . . . . . Signature (\n[Go+ CI/Test]   |    73:  9: . . . . . . . . . . . . . . . Parameters (\n[Go+ CI/Test]   |    73:  9: . . . . . . . . . . . . . . . . \"(\"\n[Go+ CI/Test]   |    73: 10: . . . . . . . . . . . . . . . . ParameterList (\n[Go+ CI/Test]   |    73: 10: . . . . . . . . . . . . . . . . . ParamDeclOrNil (\n[Go+ CI/Test]   |    73: 10: . . . . . . . . . . . . . . . . . . IDENT fs\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: fs}\n[Go+ CI/Test]   |    73: 13: . . . . . . . . . . . . . . . . . . Type (\n[Go+ CI/Test]   |    73: 13: . . . . . . . . . . . . . . . . . . . TypeName (\n[Go+ CI/Test]   |    73: 13: . . . . . . . . . . . . . . . . . . . . IDENT FileSystem\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: FileSystem}\n[Go+ CI/Test]   |    73: 23: . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    73: 23: . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    73: 23: . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    73: 23: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    73: 23: . . . . . . . . . . . . . . . . \")\"\n[Go+ CI/Test]   |    73: 25: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    73: 25: . . . . . . . . . . . . . . . Result (\n[Go+ CI/Test]   |    73: 25: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    73: 25: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    73: 25: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    73: 25: . . . . . . . . . . . . . Body (\n[Go+ CI/Test]   |    73: 25: . . . . . . . . . . . . . . \"{\"\n[Go+ CI/Test]   |    74:  3: . . . . . . . . . . . . . . StatementList (\n[Go+ CI/Test]   |    74:  3: . . . . . . . . . . . . . . . Statement (\n[Go+ CI/Test]   |    74:  3: . . . . . . . . . . . . . . . . IfStmt (\n[Go+ CI/Test]   |    74:  3: . . . . . . . . . . . . . . . . . \"if\"\n[Go+ CI/Test]   |    74:  6: . . . . . . . . . . . . . . . . . SimpleStmt (\n[Go+ CI/Test]   |    74:  6: . . . . . . . . . . . . . . . . . . ExpressionList (\n[Go+ CI/Test]   |    74:  6: . . . . . . . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |    74:  6: . . . . . . . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    74:  6: . . . . . . . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    74:  6: . . . . . . . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    74:  6: . . . . . . . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |    74:  6: . . . . . . . . . . . . . . . . . . . . . . . . IDENT foo\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: foo}\n[Go+ CI/Test]   |    74:  9: . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    74:  9: . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    74:  9: . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    74:  9: . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    74:  9: . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    74:  9: . . . . . . . . . . . . . . . . . . . \",\"\n[Go+ CI/Test]   |    74: 11: . . . . . . . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |    74: 11: . . . . . . . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    74: 11: . . . . . . . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    74: 11: . . . . . . . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    74: 11: . . . . . . . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |    74: 11: . . . . . . . . . . . . . . . . . . . . . . . . IDENT ok\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: ok}\n[Go+ CI/Test]   |    74: 14: . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    74: 14: . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    74: 14: . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    74: 14: . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    74: 14: . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    74: 14: . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    74: 14: . . . . . . . . . . . . . . . . . . \":=\"\n[Go+ CI/Test]   |    74: 17: . . . . . . . . . . . . . . . . . . ExpressionList (\n[Go+ CI/Test]   |    74: 17: . . . . . . . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |    74: 17: . . . . . . . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    74: 17: . . . . . . . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    74: 17: . . . . . . . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    74: 17: . . . . . . . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |    74: 17: . . . . . . . . . . . . . . . . . . . . . . . . IDENT fs\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: fs}\n[Go+ CI/Test]   |    74: 19: . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    74: 19: . . . . . . . . . . . . . . . . . . . . . . . \".\"\n[Go+ CI/Test]   |    74: 20: . . . . . . . . . . . . . . . . . . . . . . . TypeAssertion (\n[Go+ CI/Test]   |    74: 20: . . . . . . . . . . . . . . . . . . . . . . . . \"(\"\n[Go+ CI/Test]   |    74: 21: . . . . . . . . . . . . . . . . . . . . . . . . Type (\n[Go+ CI/Test]   |    74: 21: . . . . . . . . . . . . . . . . . . . . . . . . . PointerType (\n[Go+ CI/Test]   |    74: 21: . . . . . . . . . . . . . . . . . . . . . . . . . . \"*\"\n[Go+ CI/Test]   |    74: 22: . . . . . . . . . . . . . . . . . . . . . . . . . . Type (\n[Go+ CI/Test]   |    74: 22: . . . . . . . . . . . . . . . . . . . . . . . . . . . TypeName (\n[Go+ CI/Test]   |    74: 22: . . . . . . . . . . . . . . . . . . . . . . . . . . . . IDENT Foo\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: Foo}\n[Go+ CI/Test]   |    74: 25: . . . . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    74: 25: . . . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    74: 25: . . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    74: 25: . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    74: 25: . . . . . . . . . . . . . . . . . . . . . . . . \")\"\n[Go+ CI/Test]   |    74: 26: . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    74: 26: . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    74: 26: . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    74: 26: . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    74: 26: . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    74: 26: . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    74: 26: . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    74: 26: . . . . . . . . . . . . . . . . . \";\"\n[Go+ CI/Test]   |    74: 28: . . . . . . . . . . . . . . . . . SimpleStmt (\n[Go+ CI/Test]   |    74: 28: . . . . . . . . . . . . . . . . . . ExpressionList (\n[Go+ CI/Test]   |    74: 28: . . . . . . . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |    74: 28: . . . . . . . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    74: 28: . . . . . . . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    74: 28: . . . . . . . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    74: 28: . . . . . . . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |    74: 28: . . . . . . . . . . . . . . . . . . . . . . . . IDENT ok\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: ok}\n[Go+ CI/Test]   |    74: 31: . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    74: 31: . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    74: 31: . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    74: 31: . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    74: 31: . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    74: 31: . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    74: 31: . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    74: 31: . . . . . . . . . . . . . . . . . BlockStmt (\n[Go+ CI/Test]   |    74: 31: . . . . . . . . . . . . . . . . . . \"{\"\n[Go+ CI/Test]   |    75:  4: . . . . . . . . . . . . . . . . . . StatementList (\n[Go+ CI/Test]   |    75:  4: . . . . . . . . . . . . . . . . . . . Statement (\n[Go+ CI/Test]   |    75:  4: . . . . . . . . . . . . . . . . . . . . SimpleStmt (\n[Go+ CI/Test]   |    75:  4: . . . . . . . . . . . . . . . . . . . . . ExpressionList (\n[Go+ CI/Test]   |    75:  4: . . . . . . . . . . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |    75:  4: . . . . . . . . . . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    75:  4: . . . . . . . . . . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    75:  4: . . . . . . . . . . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    75:  4: . . . . . . . . . . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |    75:  4: . . . . . . . . . . . . . . . . . . . . . . . . . . . IDENT println\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: println}\n[Go+ CI/Test]   |    75: 11: . . . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    75: 11: . . . . . . . . . . . . . . . . . . . . . . . . . . CallOrConversion (\n[Go+ CI/Test]   |    75: 11: . . . . . . . . . . . . . . . . . . . . . . . . . . . \"(\"\n[Go+ CI/Test]   |    75: 12: . . . . . . . . . . . . . . . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |    75: 12: . . . . . . . . . . . . . . . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    75: 12: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    75: 12: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    75: 12: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |    75: 12: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . IDENT foo\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: foo}\n[Go+ CI/Test]   |    75: 15: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    75: 15: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    75: 15: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    75: 15: . . . . . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    75: 15: . . . . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    75: 15: . . . . . . . . . . . . . . . . . . . . . . . . . . . \")\"\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1878: ast.CallExpr{Fun: println, Ellipsis: false, isCmd: false}\n[Go+ CI/Test]   |    75: 16: . . . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    75: 16: . . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    75: 16: . . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    75: 16: . . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    75: 16: . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    75: 16: . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    75: 16: . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    75: 16: . . . . . . . . . . . . . . . . . . . . \";\"\n[Go+ CI/Test]   |    76:  3: . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    76:  3: . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    76:  3: . . . . . . . . . . . . . . . . . . \"}\"\n[Go+ CI/Test]   |    76:  4: . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    76:  4: . . . . . . . . . . . . . . . . . \";\"\n[Go+ CI/Test]   |    77:  2: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    77:  2: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    77:  2: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    77:  2: . . . . . . . . . . . . . . \"}\"\n[Go+ CI/Test]   |    77:  3: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    77:  3: . . . . . . . . . . . . )\n[Go+ CI/Test]   |    77:  3: . . . . . . . . . . . )\n[Go+ CI/Test]   |    77:  3: . . . . . . . . . . . CallOrConversion (\n[Go+ CI/Test]   |    77:  3: . . . . . . . . . . . . \"(\"\n[Go+ CI/Test]   |    77:  4: . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |    77:  4: . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    77:  4: . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    77:  4: . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    77:  4: . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |    77:  4: . . . . . . . . . . . . . . . . . IDENT nil\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: nil}\n[Go+ CI/Test]   |    77:  7: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    77:  7: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    77:  7: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    77:  7: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    77:  7: . . . . . . . . . . . . )\n[Go+ CI/Test]   |    77:  7: . . . . . . . . . . . . \")\"\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1878: ast.CallExpr{Fun: &{0xc0001b93a0 0xc0001b2f00}, Ellipsis: false, isCmd: false}\n[Go+ CI/Test]   |    77:  8: . . . . . . . . . . . )\n[Go+ CI/Test]   |    77:  8: . . . . . . . . . . )\n[Go+ CI/Test]   |    77:  8: . . . . . . . . . )\n[Go+ CI/Test]   |    77:  8: . . . . . . . . )\n[Go+ CI/Test]   |    77:  8: . . . . . . . )\n[Go+ CI/Test]   |    77:  8: . . . . . . . \";\"\n[Go+ CI/Test]   |    78:  1: . . . . . . )\n[Go+ CI/Test]   |    78:  1: . . . . . )\n[Go+ CI/Test]   |    78:  1: . . . . )\n[Go+ CI/Test]   |    78:  1: . . . . \"}\"\n[Go+ CI/Test]   |    78:  2: . . . )\n[Go+ CI/Test]   |    78:  2: . . . \";\"\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:3564: ast.FuncDecl{Name: init, ...}\n[Go+ CI/Test]   |    78:  3: . . )\n[Go+ CI/Test]   |    78:  3: . )\n[Go+ CI/Test]   |    78:  3: )\n[Go+ CI/Test]   | === RUN   TestFromTestdata/overloadop\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parserdir_test.go:90: Parsing /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/_testdata/overloadop\n[Go+ CI/Test]   |     1:  1: File (\n[Go+ CI/Test]   |     1:  1: . Declaration (\n[Go+ CI/Test]   |     1:  1: . . GenDecl(type) (\n[Go+ CI/Test]   |     1:  1: . . . \"type\"\n[Go+ CI/Test]   |     1:  6: . . . TypeSpec (\n[Go+ CI/Test]   |     1:  6: . . . . IDENT foo\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: foo}\n[Go+ CI/Test]   |     1: 10: . . . . Type (\n[Go+ CI/Test]   |     1: 10: . . . . . StructType (\n[Go+ CI/Test]   |     1: 10: . . . . . . \"struct\"\n[Go+ CI/Test]   |     1: 17: . . . . . . \"{\"\n[Go+ CI/Test]   |     2:  1: . . . . . . \"}\"\n[Go+ CI/Test]   |     2:  2: . . . . . )\n[Go+ CI/Test]   |     2:  2: . . . . )\n[Go+ CI/Test]   |     2:  2: . . . . \";\"\n[Go+ CI/Test]   |     4:  1: . . . )\n[Go+ CI/Test]   |     4:  1: . . )\n[Go+ CI/Test]   |     4:  1: . )\n[Go+ CI/Test]   |     4:  1: . Declaration (\n[Go+ CI/Test]   |     4:  1: . . FunctionDecl (\n[Go+ CI/Test]   |     4:  1: . . . \"func\"\n[Go+ CI/Test]   |     4:  6: . . . Parameters (\n[Go+ CI/Test]   |     4:  6: . . . . \"(\"\n[Go+ CI/Test]   |     4:  7: . . . . ParameterList (\n[Go+ CI/Test]   |     4:  7: . . . . . ParamDeclOrNil (\n[Go+ CI/Test]   |     4:  7: . . . . . . IDENT a\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: a}\n[Go+ CI/Test]   |     4:  9: . . . . . . Type (\n[Go+ CI/Test]   |     4:  9: . . . . . . . PointerType (\n[Go+ CI/Test]   |     4:  9: . . . . . . . . \"*\"\n[Go+ CI/Test]   |     4: 10: . . . . . . . . Type (\n[Go+ CI/Test]   |     4: 10: . . . . . . . . . TypeName (\n[Go+ CI/Test]   |     4: 10: . . . . . . . . . . IDENT foo\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: foo}\n[Go+ CI/Test]   |     4: 13: . . . . . . . . . )\n[Go+ CI/Test]   |     4: 13: . . . . . . . . )\n[Go+ CI/Test]   |     4: 13: . . . . . . . )\n[Go+ CI/Test]   |     4: 13: . . . . . . )\n[Go+ CI/Test]   |     4: 13: . . . . . )\n[Go+ CI/Test]   |     4: 13: . . . . )\n[Go+ CI/Test]   |     4: 13: . . . . \")\"\n[Go+ CI/Test]   |     4: 15: . . . )\n[Go+ CI/Test]   |     4: 15: . . . \"*\"\n[Go+ CI/Test]   |     4: 17: . . . Signature (\n[Go+ CI/Test]   |     4: 17: . . . . Parameters (\n[Go+ CI/Test]   |     4: 17: . . . . . \"(\"\n[Go+ CI/Test]   |     4: 18: . . . . . ParameterList (\n[Go+ CI/Test]   |     4: 18: . . . . . . ParamDeclOrNil (\n[Go+ CI/Test]   |     4: 18: . . . . . . . IDENT b\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: b}\n[Go+ CI/Test]   |     4: 20: . . . . . . . Type (\n[Go+ CI/Test]   |     4: 20: . . . . . . . . PointerType (\n[Go+ CI/Test]   |     4: 20: . . . . . . . . . \"*\"\n[Go+ CI/Test]   |     4: 21: . . . . . . . . . Type (\n[Go+ CI/Test]   |     4: 21: . . . . . . . . . . TypeName (\n[Go+ CI/Test]   |     4: 21: . . . . . . . . . . . IDENT foo\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: foo}\n[Go+ CI/Test]   |     4: 24: . . . . . . . . . . )\n[Go+ CI/Test]   |     4: 24: . . . . . . . . . )\n[Go+ CI/Test]   |     4: 24: . . . . . . . . )\n[Go+ CI/Test]   |     4: 24: . . . . . . . )\n[Go+ CI/Test]   |     4: 24: . . . . . . )\n[Go+ CI/Test]   |     4: 24: . . . . . )\n[Go+ CI/Test]   |     4: 24: . . . . . \")\"\n[Go+ CI/Test]   |     4: 26: . . . . )\n[Go+ CI/Test]   |     4: 26: . . . . Result (\n[Go+ CI/Test]   |     4: 26: . . . . . PointerType (\n[Go+ CI/Test]   |     4: 26: . . . . . . \"*\"\n[Go+ CI/Test]   |     4: 27: . . . . . . Type (\n[Go+ CI/Test]   |     4: 27: . . . . . . . TypeName (\n[Go+ CI/Test]   |     4: 27: . . . . . . . . IDENT foo\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: foo}\n[Go+ CI/Test]   |     4: 30: . . . . . . . )\n[Go+ CI/Test]   |     4: 30: . . . . . . )\n[Go+ CI/Test]   |     4: 30: . . . . . )\n[Go+ CI/Test]   |     4: 30: . . . . )\n[Go+ CI/Test]   |     4: 30: . . . )\n[Go+ CI/Test]   |     4: 30: . . . \";\"\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:3564: ast.FuncDecl{Name: *, ...}\n[Go+ CI/Test]   |     6:  1: . . )\n[Go+ CI/Test]   |     6:  1: . )\n[Go+ CI/Test]   |     6:  1: . Declaration (\n[Go+ CI/Test]   |     6:  1: . . FunctionDecl (\n[Go+ CI/Test]   |     6:  1: . . . \"func\"\n[Go+ CI/Test]   |     6:  6: . . . Parameters (\n[Go+ CI/Test]   |     6:  6: . . . . \"(\"\n[Go+ CI/Test]   |     6:  7: . . . . ParameterList (\n[Go+ CI/Test]   |     6:  7: . . . . . ParamDeclOrNil (\n[Go+ CI/Test]   |     6:  7: . . . . . . IDENT a\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: a}\n[Go+ CI/Test]   |     6:  9: . . . . . . Type (\n[Go+ CI/Test]   |     6:  9: . . . . . . . PointerType (\n[Go+ CI/Test]   |     6:  9: . . . . . . . . \"*\"\n[Go+ CI/Test]   |     6: 10: . . . . . . . . Type (\n[Go+ CI/Test]   |     6: 10: . . . . . . . . . TypeName (\n[Go+ CI/Test]   |     6: 10: . . . . . . . . . . IDENT foo\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: foo}\n[Go+ CI/Test]   |     6: 13: . . . . . . . . . )\n[Go+ CI/Test]   |     6: 13: . . . . . . . . )\n[Go+ CI/Test]   |     6: 13: . . . . . . . )\n[Go+ CI/Test]   |     6: 13: . . . . . . )\n[Go+ CI/Test]   |     6: 13: . . . . . )\n[Go+ CI/Test]   |     6: 13: . . . . )\n[Go+ CI/Test]   |     6: 13: . . . . \")\"\n[Go+ CI/Test]   |     6: 15: . . . )\n[Go+ CI/Test]   |     6: 15: . . . \"+\"\n[Go+ CI/Test]   |     6: 17: . . . Signature (\n[Go+ CI/Test]   |     6: 17: . . . . Parameters (\n[Go+ CI/Test]   |     6: 17: . . . . . \"(\"\n[Go+ CI/Test]   |     6: 18: . . . . . ParameterList (\n[Go+ CI/Test]   |     6: 18: . . . . . . ParamDeclOrNil (\n[Go+ CI/Test]   |     6: 18: . . . . . . . IDENT b\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: b}\n[Go+ CI/Test]   |     6: 20: . . . . . . . Type (\n[Go+ CI/Test]   |     6: 20: . . . . . . . . PointerType (\n[Go+ CI/Test]   |     6: 20: . . . . . . . . . \"*\"\n[Go+ CI/Test]   |     6: 21: . . . . . . . . . Type (\n[Go+ CI/Test]   |     6: 21: . . . . . . . . . . TypeName (\n[Go+ CI/Test]   |     6: 21: . . . . . . . . . . . IDENT foo\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: foo}\n[Go+ CI/Test]   |     6: 24: . . . . . . . . . . )\n[Go+ CI/Test]   |     6: 24: . . . . . . . . . )\n[Go+ CI/Test]   |     6: 24: . . . . . . . . )\n[Go+ CI/Test]   |     6: 24: . . . . . . . )\n[Go+ CI/Test]   |     6: 24: . . . . . . )\n[Go+ CI/Test]   |     6: 24: . . . . . )\n[Go+ CI/Test]   |     6: 24: . . . . . \")\"\n[Go+ CI/Test]   |     6: 26: . . . . )\n[Go+ CI/Test]   |     6: 26: . . . . Result (\n[Go+ CI/Test]   |     6: 26: . . . . . PointerType (\n[Go+ CI/Test]   |     6: 26: . . . . . . \"*\"\n[Go+ CI/Test]   |     6: 27: . . . . . . Type (\n[Go+ CI/Test]   |     6: 27: . . . . . . . TypeName (\n[Go+ CI/Test]   |     6: 27: . . . . . . . . IDENT foo\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: foo}\n[Go+ CI/Test]   |     6: 31: . . . . . . . )\n[Go+ CI/Test]   |     6: 31: . . . . . . )\n[Go+ CI/Test]   |     6: 31: . . . . . )\n[Go+ CI/Test]   |     6: 31: . . . . )\n[Go+ CI/Test]   |     6: 31: . . . )\n[Go+ CI/Test]   |     6: 31: . . . Body (\n[Go+ CI/Test]   |     6: 31: . . . . \"{\"\n[Go+ CI/Test]   |     7:  2: . . . . StatementList (\n[Go+ CI/Test]   |     7:  2: . . . . . Statement (\n[Go+ CI/Test]   |     7:  2: . . . . . . SimpleStmt (\n[Go+ CI/Test]   |     7:  2: . . . . . . . ExpressionList (\n[Go+ CI/Test]   |     7:  2: . . . . . . . . Expression (\n[Go+ CI/Test]   |     7:  2: . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     7:  2: . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     7:  2: . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     7:  2: . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |     7:  2: . . . . . . . . . . . . . IDENT println\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: println}\n[Go+ CI/Test]   |     7:  9: . . . . . . . . . . . . )\n[Go+ CI/Test]   |     7:  9: . . . . . . . . . . . . CallOrConversion (\n[Go+ CI/Test]   |     7:  9: . . . . . . . . . . . . . \"(\"\n[Go+ CI/Test]   |     7: 10: . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |     7: 10: . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     7: 10: . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     7: 10: . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     7: 10: . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: STRING, Value: \"a + b\"}\n[Go+ CI/Test]   |     7: 10: . . . . . . . . . . . . . . . . . . STRING \"a + b\"\n[Go+ CI/Test]   |     7: 17: . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     7: 17: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     7: 17: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     7: 17: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     7: 17: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     7: 17: . . . . . . . . . . . . . \")\"\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1878: ast.CallExpr{Fun: println, Ellipsis: false, isCmd: false}\n[Go+ CI/Test]   |     7: 18: . . . . . . . . . . . . )\n[Go+ CI/Test]   |     7: 18: . . . . . . . . . . . )\n[Go+ CI/Test]   |     7: 18: . . . . . . . . . . )\n[Go+ CI/Test]   |     7: 18: . . . . . . . . . )\n[Go+ CI/Test]   |     7: 18: . . . . . . . . )\n[Go+ CI/Test]   |     7: 18: . . . . . . . )\n[Go+ CI/Test]   |     7: 18: . . . . . . )\n[Go+ CI/Test]   |     7: 18: . . . . . . \";\"\n[Go+ CI/Test]   |     8:  2: . . . . . )\n[Go+ CI/Test]   |     8:  2: . . . . . Statement (\n[Go+ CI/Test]   |     8:  2: . . . . . . ReturnStmt (\n[Go+ CI/Test]   |     8:  2: . . . . . . . \"return\"\n[Go+ CI/Test]   |     8:  9: . . . . . . . ExpressionList (\n[Go+ CI/Test]   |     8:  9: . . . . . . . . Expression (\n[Go+ CI/Test]   |     8:  9: . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     8:  9: . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     8:  9: . . . . . . . . . . . \"&\"\n[Go+ CI/Test]   |     8: 10: . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     8: 10: . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     8: 10: . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |     8: 10: . . . . . . . . . . . . . . IDENT foo\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: foo}\n[Go+ CI/Test]   |     8: 13: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     8: 13: . . . . . . . . . . . . . LiteralValue (\n[Go+ CI/Test]   |     8: 13: . . . . . . . . . . . . . . \"{\"\n[Go+ CI/Test]   |     8: 14: . . . . . . . . . . . . . . \"}\"\n[Go+ CI/Test]   |     8: 15: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     8: 15: . . . . . . . . . . . . )\n[Go+ CI/Test]   |     8: 15: . . . . . . . . . . . )\n[Go+ CI/Test]   |     8: 15: . . . . . . . . . . )\n[Go+ CI/Test]   |     8: 15: . . . . . . . . . )\n[Go+ CI/Test]   |     8: 15: . . . . . . . . )\n[Go+ CI/Test]   |     8: 15: . . . . . . . )\n[Go+ CI/Test]   |     8: 15: . . . . . . . \";\"\n[Go+ CI/Test]   |     9:  1: . . . . . . )\n[Go+ CI/Test]   |     9:  1: . . . . . )\n[Go+ CI/Test]   |     9:  1: . . . . )\n[Go+ CI/Test]   |     9:  1: . . . . \"}\"\n[Go+ CI/Test]   |     9:  2: . . . )\n[Go+ CI/Test]   |     9:  2: . . . \";\"\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:3564: ast.FuncDecl{Name: +, ...}\n[Go+ CI/Test]   |    11:  1: . . )\n[Go+ CI/Test]   |    11:  1: . )\n[Go+ CI/Test]   |    11:  1: . Declaration (\n[Go+ CI/Test]   |    11:  1: . . FunctionDecl (\n[Go+ CI/Test]   |    11:  1: . . . \"func\"\n[Go+ CI/Test]   |    11:  6: . . . Parameters (\n[Go+ CI/Test]   |    11:  6: . . . . \"(\"\n[Go+ CI/Test]   |    11:  7: . . . . ParameterList (\n[Go+ CI/Test]   |    11:  7: . . . . . ParamDeclOrNil (\n[Go+ CI/Test]   |    11:  7: . . . . . . IDENT a\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: a}\n[Go+ CI/Test]   |    11:  9: . . . . . . Type (\n[Go+ CI/Test]   |    11:  9: . . . . . . . TypeName (\n[Go+ CI/Test]   |    11:  9: . . . . . . . . IDENT foo\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: foo}\n[Go+ CI/Test]   |    11: 12: . . . . . . . )\n[Go+ CI/Test]   |    11: 12: . . . . . . )\n[Go+ CI/Test]   |    11: 12: . . . . . )\n[Go+ CI/Test]   |    11: 12: . . . . )\n[Go+ CI/Test]   |    11: 12: . . . . \")\"\n[Go+ CI/Test]   |    11: 14: . . . )\n[Go+ CI/Test]   |    11: 14: . . . \"/\"\n[Go+ CI/Test]   |    11: 16: . . . Signature (\n[Go+ CI/Test]   |    11: 16: . . . . Parameters (\n[Go+ CI/Test]   |    11: 16: . . . . . \"(\"\n[Go+ CI/Test]   |    11: 17: . . . . . ParameterList (\n[Go+ CI/Test]   |    11: 17: . . . . . . ParamDeclOrNil (\n[Go+ CI/Test]   |    11: 17: . . . . . . . IDENT b\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: b}\n[Go+ CI/Test]   |    11: 19: . . . . . . . Type (\n[Go+ CI/Test]   |    11: 19: . . . . . . . . TypeName (\n[Go+ CI/Test]   |    11: 19: . . . . . . . . . IDENT foo\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: foo}\n[Go+ CI/Test]   |    11: 22: . . . . . . . . )\n[Go+ CI/Test]   |    11: 22: . . . . . . . )\n[Go+ CI/Test]   |    11: 22: . . . . . . )\n[Go+ CI/Test]   |    11: 22: . . . . . )\n[Go+ CI/Test]   |    11: 22: . . . . . \")\"\n[Go+ CI/Test]   |    11: 24: . . . . )\n[Go+ CI/Test]   |    11: 24: . . . . Result (\n[Go+ CI/Test]   |    11: 24: . . . . . TypeName (\n[Go+ CI/Test]   |    11: 24: . . . . . . IDENT foo\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: foo}\n[Go+ CI/Test]   |    11: 28: . . . . . )\n[Go+ CI/Test]   |    11: 28: . . . . )\n[Go+ CI/Test]   |    11: 28: . . . )\n[Go+ CI/Test]   |    11: 28: . . . Body (\n[Go+ CI/Test]   |    11: 28: . . . . \"{\"\n[Go+ CI/Test]   |    12:  2: . . . . StatementList (\n[Go+ CI/Test]   |    12:  2: . . . . . Statement (\n[Go+ CI/Test]   |    12:  2: . . . . . . SimpleStmt (\n[Go+ CI/Test]   |    12:  2: . . . . . . . ExpressionList (\n[Go+ CI/Test]   |    12:  2: . . . . . . . . Expression (\n[Go+ CI/Test]   |    12:  2: . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    12:  2: . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    12:  2: . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    12:  2: . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |    12:  2: . . . . . . . . . . . . . IDENT println\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: println}\n[Go+ CI/Test]   |    12:  9: . . . . . . . . . . . . )\n[Go+ CI/Test]   |    12:  9: . . . . . . . . . . . . CallOrConversion (\n[Go+ CI/Test]   |    12:  9: . . . . . . . . . . . . . \"(\"\n[Go+ CI/Test]   |    12: 10: . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |    12: 10: . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    12: 10: . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    12: 10: . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    12: 10: . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: STRING, Value: \"a / b\"}\n[Go+ CI/Test]   |    12: 10: . . . . . . . . . . . . . . . . . . STRING \"a / b\"\n[Go+ CI/Test]   |    12: 17: . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    12: 17: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    12: 17: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    12: 17: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    12: 17: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    12: 17: . . . . . . . . . . . . . \")\"\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1878: ast.CallExpr{Fun: println, Ellipsis: false, isCmd: false}\n[Go+ CI/Test]   |    12: 18: . . . . . . . . . . . . )\n[Go+ CI/Test]   |    12: 18: . . . . . . . . . . . )\n[Go+ CI/Test]   |    12: 18: . . . . . . . . . . )\n[Go+ CI/Test]   |    12: 18: . . . . . . . . . )\n[Go+ CI/Test]   |    12: 18: . . . . . . . . )\n[Go+ CI/Test]   |    12: 18: . . . . . . . )\n[Go+ CI/Test]   |    12: 18: . . . . . . )\n[Go+ CI/Test]   |    12: 18: . . . . . . \";\"\n[Go+ CI/Test]   |    13:  2: . . . . . )\n[Go+ CI/Test]   |    13:  2: . . . . . Statement (\n[Go+ CI/Test]   |    13:  2: . . . . . . ReturnStmt (\n[Go+ CI/Test]   |    13:  2: . . . . . . . \"return\"\n[Go+ CI/Test]   |    13:  9: . . . . . . . ExpressionList (\n[Go+ CI/Test]   |    13:  9: . . . . . . . . Expression (\n[Go+ CI/Test]   |    13:  9: . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    13:  9: . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    13:  9: . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    13:  9: . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |    13:  9: . . . . . . . . . . . . . IDENT foo\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: foo}\n[Go+ CI/Test]   |    13: 12: . . . . . . . . . . . . )\n[Go+ CI/Test]   |    13: 12: . . . . . . . . . . . . LiteralValue (\n[Go+ CI/Test]   |    13: 12: . . . . . . . . . . . . . \"{\"\n[Go+ CI/Test]   |    13: 13: . . . . . . . . . . . . . \"}\"\n[Go+ CI/Test]   |    13: 14: . . . . . . . . . . . . )\n[Go+ CI/Test]   |    13: 14: . . . . . . . . . . . )\n[Go+ CI/Test]   |    13: 14: . . . . . . . . . . )\n[Go+ CI/Test]   |    13: 14: . . . . . . . . . )\n[Go+ CI/Test]   |    13: 14: . . . . . . . . )\n[Go+ CI/Test]   |    13: 14: . . . . . . . )\n[Go+ CI/Test]   |    13: 14: . . . . . . . \";\"\n[Go+ CI/Test]   |    14:  1: . . . . . . )\n[Go+ CI/Test]   |    14:  1: . . . . . )\n[Go+ CI/Test]   |    14:  1: . . . . )\n[Go+ CI/Test]   |    14:  1: . . . . \"}\"\n[Go+ CI/Test]   |    14:  2: . . . )\n[Go+ CI/Test]   |    14:  2: . . . \";\"\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:3564: ast.FuncDecl{Name: /, ...}\n[Go+ CI/Test]   |    16:  1: . . )\n[Go+ CI/Test]   |    16:  1: . )\n[Go+ CI/Test]   |    16:  1: . Declaration (\n[Go+ CI/Test]   |    16:  1: . . FunctionDecl (\n[Go+ CI/Test]   |    16:  1: . . . \"func\"\n[Go+ CI/Test]   |    16:  6: . . . \"-\"\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:590: ast.Ident{Tok: -}\n[Go+ CI/Test]   |    16:  7: . . . Signature (\n[Go+ CI/Test]   |    16:  7: . . . . Parameters (\n[Go+ CI/Test]   |    16:  7: . . . . . \"(\"\n[Go+ CI/Test]   |    16:  8: . . . . . ParameterList (\n[Go+ CI/Test]   |    16:  8: . . . . . . ParamDeclOrNil (\n[Go+ CI/Test]   |    16:  8: . . . . . . . IDENT a\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: a}\n[Go+ CI/Test]   |    16: 10: . . . . . . . Type (\n[Go+ CI/Test]   |    16: 10: . . . . . . . . TypeName (\n[Go+ CI/Test]   |    16: 10: . . . . . . . . . IDENT foo\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: foo}\n[Go+ CI/Test]   |    16: 13: . . . . . . . . )\n[Go+ CI/Test]   |    16: 13: . . . . . . . )\n[Go+ CI/Test]   |    16: 13: . . . . . . )\n[Go+ CI/Test]   |    16: 13: . . . . . )\n[Go+ CI/Test]   |    16: 13: . . . . . \")\"\n[Go+ CI/Test]   |    16: 15: . . . . )\n[Go+ CI/Test]   |    16: 15: . . . . Result (\n[Go+ CI/Test]   |    16: 15: . . . . )\n[Go+ CI/Test]   |    16: 15: . . . )\n[Go+ CI/Test]   |    16: 15: . . . Body (\n[Go+ CI/Test]   |    16: 15: . . . . \"{\"\n[Go+ CI/Test]   |    17:  2: . . . . StatementList (\n[Go+ CI/Test]   |    17:  2: . . . . . Statement (\n[Go+ CI/Test]   |    17:  2: . . . . . . SimpleStmt (\n[Go+ CI/Test]   |    17:  2: . . . . . . . ExpressionList (\n[Go+ CI/Test]   |    17:  2: . . . . . . . . Expression (\n[Go+ CI/Test]   |    17:  2: . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    17:  2: . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    17:  2: . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    17:  2: . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |    17:  2: . . . . . . . . . . . . . IDENT println\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: println}\n[Go+ CI/Test]   |    17:  9: . . . . . . . . . . . . )\n[Go+ CI/Test]   |    17:  9: . . . . . . . . . . . . CallOrConversion (\n[Go+ CI/Test]   |    17:  9: . . . . . . . . . . . . . \"(\"\n[Go+ CI/Test]   |    17: 10: . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |    17: 10: . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    17: 10: . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    17: 10: . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    17: 10: . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: STRING, Value: \"-a\"}\n[Go+ CI/Test]   |    17: 10: . . . . . . . . . . . . . . . . . . STRING \"-a\"\n[Go+ CI/Test]   |    17: 14: . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    17: 14: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    17: 14: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    17: 14: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    17: 14: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    17: 14: . . . . . . . . . . . . . \")\"\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1878: ast.CallExpr{Fun: println, Ellipsis: false, isCmd: false}\n[Go+ CI/Test]   |    17: 15: . . . . . . . . . . . . )\n[Go+ CI/Test]   |    17: 15: . . . . . . . . . . . )\n[Go+ CI/Test]   |    17: 15: . . . . . . . . . . )\n[Go+ CI/Test]   |    17: 15: . . . . . . . . . )\n[Go+ CI/Test]   |    17: 15: . . . . . . . . )\n[Go+ CI/Test]   |    17: 15: . . . . . . . )\n[Go+ CI/Test]   |    17: 15: . . . . . . )\n[Go+ CI/Test]   |    17: 15: . . . . . . \";\"\n[Go+ CI/Test]   |    18:  1: . . . . . )\n[Go+ CI/Test]   |    18:  1: . . . . )\n[Go+ CI/Test]   |    18:  1: . . . . \"}\"\n[Go+ CI/Test]   |    18:  2: . . . )\n[Go+ CI/Test]   |    18:  2: . . . \";\"\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:3564: ast.FuncDecl{Name: -, ...}\n[Go+ CI/Test]   |    20:  1: . . )\n[Go+ CI/Test]   |    20:  1: . )\n[Go+ CI/Test]   |    20:  1: . Declaration (\n[Go+ CI/Test]   |    20:  1: . . FunctionDecl (\n[Go+ CI/Test]   |    20:  1: . . . \"func\"\n[Go+ CI/Test]   |    20:  6: . . . \"++\"\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:590: ast.Ident{Tok: ++}\n[Go+ CI/Test]   |    20:  8: . . . Signature (\n[Go+ CI/Test]   |    20:  8: . . . . Parameters (\n[Go+ CI/Test]   |    20:  8: . . . . . \"(\"\n[Go+ CI/Test]   |    20:  9: . . . . . ParameterList (\n[Go+ CI/Test]   |    20:  9: . . . . . . ParamDeclOrNil (\n[Go+ CI/Test]   |    20:  9: . . . . . . . IDENT a\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: a}\n[Go+ CI/Test]   |    20: 11: . . . . . . . Type (\n[Go+ CI/Test]   |    20: 11: . . . . . . . . TypeName (\n[Go+ CI/Test]   |    20: 11: . . . . . . . . . IDENT foo\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: foo}\n[Go+ CI/Test]   |    20: 14: . . . . . . . . )\n[Go+ CI/Test]   |    20: 14: . . . . . . . )\n[Go+ CI/Test]   |    20: 14: . . . . . . )\n[Go+ CI/Test]   |    20: 14: . . . . . )\n[Go+ CI/Test]   |    20: 14: . . . . . \")\"\n[Go+ CI/Test]   |    20: 16: . . . . )\n[Go+ CI/Test]   |    20: 16: . . . . Result (\n[Go+ CI/Test]   |    20: 16: . . . . )\n[Go+ CI/Test]   |    20: 16: . . . )\n[Go+ CI/Test]   |    20: 16: . . . Body (\n[Go+ CI/Test]   |    20: 16: . . . . \"{\"\n[Go+ CI/Test]   |    21:  2: . . . . StatementList (\n[Go+ CI/Test]   |    21:  2: . . . . . Statement (\n[Go+ CI/Test]   |    21:  2: . . . . . . SimpleStmt (\n[Go+ CI/Test]   |    21:  2: . . . . . . . ExpressionList (\n[Go+ CI/Test]   |    21:  2: . . . . . . . . Expression (\n[Go+ CI/Test]   |    21:  2: . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    21:  2: . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    21:  2: . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    21:  2: . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |    21:  2: . . . . . . . . . . . . . IDENT println\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: println}\n[Go+ CI/Test]   |    21:  9: . . . . . . . . . . . . )\n[Go+ CI/Test]   |    21:  9: . . . . . . . . . . . . CallOrConversion (\n[Go+ CI/Test]   |    21:  9: . . . . . . . . . . . . . \"(\"\n[Go+ CI/Test]   |    21: 10: . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |    21: 10: . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    21: 10: . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    21: 10: . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    21: 10: . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: STRING, Value: \"a++\"}\n[Go+ CI/Test]   |    21: 10: . . . . . . . . . . . . . . . . . . STRING \"a++\"\n[Go+ CI/Test]   |    21: 15: . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    21: 15: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    21: 15: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    21: 15: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    21: 15: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    21: 15: . . . . . . . . . . . . . \")\"\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1878: ast.CallExpr{Fun: println, Ellipsis: false, isCmd: false}\n[Go+ CI/Test]   |    21: 16: . . . . . . . . . . . . )\n[Go+ CI/Test]   |    21: 16: . . . . . . . . . . . )\n[Go+ CI/Test]   |    21: 16: . . . . . . . . . . )\n[Go+ CI/Test]   |    21: 16: . . . . . . . . . )\n[Go+ CI/Test]   |    21: 16: . . . . . . . . )\n[Go+ CI/Test]   |    21: 16: . . . . . . . )\n[Go+ CI/Test]   |    21: 16: . . . . . . )\n[Go+ CI/Test]   |    21: 16: . . . . . . \";\"\n[Go+ CI/Test]   |    22:  1: . . . . . )\n[Go+ CI/Test]   |    22:  1: . . . . )\n[Go+ CI/Test]   |    22:  1: . . . . \"}\"\n[Go+ CI/Test]   |    22:  2: . . . )\n[Go+ CI/Test]   |    22:  2: . . . \";\"\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:3564: ast.FuncDecl{Name: ++, ...}\n[Go+ CI/Test]   |    22:  3: . . )\n[Go+ CI/Test]   |    22:  3: . )\n[Go+ CI/Test]   |    22:  3: )\n[Go+ CI/Test]   | === RUN   TestFromTestdata/rangeexpr\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parserdir_test.go:90: Parsing /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/_testdata/rangeexpr\n[Go+ CI/Test]   |     1:  1: File (\n[Go+ CI/Test]   |     1:  1: . \"package\"\n[Go+ CI/Test]   |     1:  9: . IDENT main\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: main}\n[Go+ CI/Test]   |     1: 13: . \";\"\n[Go+ CI/Test]   |     3:  1: . Declaration (\n[Go+ CI/Test]   |     3:  1: . . FunctionDecl (\n[Go+ CI/Test]   |     3:  1: . . . \"func\"\n[Go+ CI/Test]   |     3:  6: . . . IDENT main\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: main}\n[Go+ CI/Test]   |     3: 10: . . . Signature (\n[Go+ CI/Test]   |     3: 10: . . . . Parameters (\n[Go+ CI/Test]   |     3: 10: . . . . . \"(\"\n[Go+ CI/Test]   |     3: 11: . . . . . \")\"\n[Go+ CI/Test]   |     3: 13: . . . . )\n[Go+ CI/Test]   |     3: 13: . . . . Result (\n[Go+ CI/Test]   |     3: 13: . . . . )\n[Go+ CI/Test]   |     3: 13: . . . )\n[Go+ CI/Test]   |     3: 13: . . . Body (\n[Go+ CI/Test]   |     3: 13: . . . . \"{\"\n[Go+ CI/Test]   |     4:  2: . . . . StatementList (\n[Go+ CI/Test]   |     4:  2: . . . . . Statement (\n[Go+ CI/Test]   |     4:  2: . . . . . . ForStmt (\n[Go+ CI/Test]   |     4:  2: . . . . . . . \"for\"\n[Go+ CI/Test]   |     4:  6: . . . . . . . SimpleStmt (\n[Go+ CI/Test]   |     4:  6: . . . . . . . . ExpressionList (\n[Go+ CI/Test]   |     4:  6: . . . . . . . . . Expression (\n[Go+ CI/Test]   |     4:  6: . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     4:  6: . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     4:  6: . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     4:  6: . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |     4:  6: . . . . . . . . . . . . . . IDENT i\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: i}\n[Go+ CI/Test]   |     4:  8: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     4:  8: . . . . . . . . . . . . )\n[Go+ CI/Test]   |     4:  8: . . . . . . . . . . . )\n[Go+ CI/Test]   |     4:  8: . . . . . . . . . . )\n[Go+ CI/Test]   |     4:  8: . . . . . . . . . )\n[Go+ CI/Test]   |     4:  8: . . . . . . . . )\n[Go+ CI/Test]   |     4:  8: . . . . . . . . \":=\"\n[Go+ CI/Test]   |     4: 11: . . . . . . . . \"range\"\n[Go+ CI/Test]   |     4: 17: . . . . . . . . Expression (\n[Go+ CI/Test]   |     4: 17: . . . . . . . . . \":\"\n[Go+ CI/Test]   |     4: 18: . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     4: 18: . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     4: 18: . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     4: 18: . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: INT, Value: 10}\n[Go+ CI/Test]   |     4: 18: . . . . . . . . . . . . . INT 10\n[Go+ CI/Test]   |     4: 21: . . . . . . . . . . . . )\n[Go+ CI/Test]   |     4: 21: . . . . . . . . . . . )\n[Go+ CI/Test]   |     4: 21: . . . . . . . . . . )\n[Go+ CI/Test]   |     4: 21: . . . . . . . . . )\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:2378: ast.RangeExpr{First: <nil>, Last: &{46 INT 10}, Expr3: <nil>}\n[Go+ CI/Test]   |     4: 21: . . . . . . . . )\n[Go+ CI/Test]   |     4: 21: . . . . . . . )\n[Go+ CI/Test]   |     4: 21: . . . . . . . BlockStmt (\n[Go+ CI/Test]   |     4: 21: . . . . . . . . \"{\"\n[Go+ CI/Test]   |     5:  3: . . . . . . . . StatementList (\n[Go+ CI/Test]   |     5:  3: . . . . . . . . . Statement (\n[Go+ CI/Test]   |     5:  3: . . . . . . . . . . SimpleStmt (\n[Go+ CI/Test]   |     5:  3: . . . . . . . . . . . ExpressionList (\n[Go+ CI/Test]   |     5:  3: . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |     5:  3: . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     5:  3: . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     5:  3: . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     5:  3: . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |     5:  3: . . . . . . . . . . . . . . . . . IDENT println\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: println}\n[Go+ CI/Test]   |     5: 10: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     5: 10: . . . . . . . . . . . . . . . . CallOrConversion (\n[Go+ CI/Test]   |     5: 10: . . . . . . . . . . . . . . . . . \"(\"\n[Go+ CI/Test]   |     5: 11: . . . . . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |     5: 11: . . . . . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     5: 11: . . . . . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     5: 11: . . . . . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     5: 11: . . . . . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |     5: 11: . . . . . . . . . . . . . . . . . . . . . . IDENT i\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: i}\n[Go+ CI/Test]   |     5: 12: . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     5: 12: . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     5: 12: . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     5: 12: . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     5: 12: . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     5: 12: . . . . . . . . . . . . . . . . . \")\"\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1878: ast.CallExpr{Fun: println, Ellipsis: false, isCmd: false}\n[Go+ CI/Test]   |     5: 13: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     5: 13: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     5: 13: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     5: 13: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     5: 13: . . . . . . . . . . . . )\n[Go+ CI/Test]   |     5: 13: . . . . . . . . . . . )\n[Go+ CI/Test]   |     5: 13: . . . . . . . . . . )\n[Go+ CI/Test]   |     5: 13: . . . . . . . . . . \";\"\n[Go+ CI/Test]   |     6:  2: . . . . . . . . . )\n[Go+ CI/Test]   |     6:  2: . . . . . . . . )\n[Go+ CI/Test]   |     6:  2: . . . . . . . . \"}\"\n[Go+ CI/Test]   |     6:  3: . . . . . . . )\n[Go+ CI/Test]   |     6:  3: . . . . . . . \";\"\n[Go+ CI/Test]   |     8:  2: . . . . . . )\n[Go+ CI/Test]   |     8:  2: . . . . . )\n[Go+ CI/Test]   |     8:  2: . . . . . Statement (\n[Go+ CI/Test]   |     8:  2: . . . . . . ForStmt (\n[Go+ CI/Test]   |     8:  2: . . . . . . . \"for\"\n[Go+ CI/Test]   |     8:  6: . . . . . . . SimpleStmt (\n[Go+ CI/Test]   |     8:  6: . . . . . . . . ExpressionList (\n[Go+ CI/Test]   |     8:  6: . . . . . . . . . Expression (\n[Go+ CI/Test]   |     8:  6: . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     8:  6: . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     8:  6: . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     8:  6: . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |     8:  6: . . . . . . . . . . . . . . IDENT i\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: i}\n[Go+ CI/Test]   |     8:  8: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     8:  8: . . . . . . . . . . . . )\n[Go+ CI/Test]   |     8:  8: . . . . . . . . . . . )\n[Go+ CI/Test]   |     8:  8: . . . . . . . . . . )\n[Go+ CI/Test]   |     8:  8: . . . . . . . . . )\n[Go+ CI/Test]   |     8:  8: . . . . . . . . )\n[Go+ CI/Test]   |     8:  8: . . . . . . . . \"<-\"\n[Go+ CI/Test]   |     8: 11: . . . . . . . . Expression (\n[Go+ CI/Test]   |     8: 11: . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     8: 11: . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     8: 11: . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     8: 11: . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: INT, Value: 1}\n[Go+ CI/Test]   |     8: 11: . . . . . . . . . . . . . INT 1\n[Go+ CI/Test]   |     8: 12: . . . . . . . . . . . . )\n[Go+ CI/Test]   |     8: 12: . . . . . . . . . . . )\n[Go+ CI/Test]   |     8: 12: . . . . . . . . . . )\n[Go+ CI/Test]   |     8: 12: . . . . . . . . . )\n[Go+ CI/Test]   |     8: 12: . . . . . . . . . \":\"\n[Go+ CI/Test]   |     8: 13: . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     8: 13: . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     8: 13: . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     8: 13: . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: INT, Value: 10}\n[Go+ CI/Test]   |     8: 13: . . . . . . . . . . . . . INT 10\n[Go+ CI/Test]   |     8: 16: . . . . . . . . . . . . )\n[Go+ CI/Test]   |     8: 16: . . . . . . . . . . . )\n[Go+ CI/Test]   |     8: 16: . . . . . . . . . . )\n[Go+ CI/Test]   |     8: 16: . . . . . . . . . )\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:2378: ast.RangeExpr{First: &{78 INT 1}, Last: &{80 INT 10}, Expr3: <nil>}\n[Go+ CI/Test]   |     8: 16: . . . . . . . . )\n[Go+ CI/Test]   |     8: 16: . . . . . . . )\n[Go+ CI/Test]   |     8: 16: . . . . . . . BlockStmt (\n[Go+ CI/Test]   |     8: 16: . . . . . . . . \"{\"\n[Go+ CI/Test]   |     9:  3: . . . . . . . . StatementList (\n[Go+ CI/Test]   |     9:  3: . . . . . . . . . Statement (\n[Go+ CI/Test]   |     9:  3: . . . . . . . . . . SimpleStmt (\n[Go+ CI/Test]   |     9:  3: . . . . . . . . . . . ExpressionList (\n[Go+ CI/Test]   |     9:  3: . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |     9:  3: . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     9:  3: . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     9:  3: . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     9:  3: . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |     9:  3: . . . . . . . . . . . . . . . . . IDENT println\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: println}\n[Go+ CI/Test]   |     9: 10: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     9: 10: . . . . . . . . . . . . . . . . CallOrConversion (\n[Go+ CI/Test]   |     9: 10: . . . . . . . . . . . . . . . . . \"(\"\n[Go+ CI/Test]   |     9: 11: . . . . . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |     9: 11: . . . . . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     9: 11: . . . . . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     9: 11: . . . . . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     9: 11: . . . . . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |     9: 11: . . . . . . . . . . . . . . . . . . . . . . IDENT i\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: i}\n[Go+ CI/Test]   |     9: 12: . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     9: 12: . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     9: 12: . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     9: 12: . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     9: 12: . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     9: 12: . . . . . . . . . . . . . . . . . \")\"\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1878: ast.CallExpr{Fun: println, Ellipsis: false, isCmd: false}\n[Go+ CI/Test]   |     9: 13: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     9: 13: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     9: 13: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     9: 13: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     9: 13: . . . . . . . . . . . . )\n[Go+ CI/Test]   |     9: 13: . . . . . . . . . . . )\n[Go+ CI/Test]   |     9: 13: . . . . . . . . . . )\n[Go+ CI/Test]   |     9: 13: . . . . . . . . . . \";\"\n[Go+ CI/Test]   |    10:  2: . . . . . . . . . )\n[Go+ CI/Test]   |    10:  2: . . . . . . . . )\n[Go+ CI/Test]   |    10:  2: . . . . . . . . \"}\"\n[Go+ CI/Test]   |    10:  3: . . . . . . . )\n[Go+ CI/Test]   |    10:  3: . . . . . . . \";\"\n[Go+ CI/Test]   |    12:  2: . . . . . . )\n[Go+ CI/Test]   |    12:  2: . . . . . )\n[Go+ CI/Test]   |    12:  2: . . . . . Statement (\n[Go+ CI/Test]   |    12:  2: . . . . . . ForStmt (\n[Go+ CI/Test]   |    12:  2: . . . . . . . \"for\"\n[Go+ CI/Test]   |    12:  6: . . . . . . . SimpleStmt (\n[Go+ CI/Test]   |    12:  6: . . . . . . . . ExpressionList (\n[Go+ CI/Test]   |    12:  6: . . . . . . . . . Expression (\n[Go+ CI/Test]   |    12:  6: . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    12:  6: . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    12:  6: . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    12:  6: . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |    12:  6: . . . . . . . . . . . . . . IDENT i\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: i}\n[Go+ CI/Test]   |    12:  8: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    12:  8: . . . . . . . . . . . . )\n[Go+ CI/Test]   |    12:  8: . . . . . . . . . . . )\n[Go+ CI/Test]   |    12:  8: . . . . . . . . . . )\n[Go+ CI/Test]   |    12:  8: . . . . . . . . . )\n[Go+ CI/Test]   |    12:  8: . . . . . . . . )\n[Go+ CI/Test]   |    12:  8: . . . . . . . . \":=\"\n[Go+ CI/Test]   |    12: 11: . . . . . . . . \"range\"\n[Go+ CI/Test]   |    12: 17: . . . . . . . . Expression (\n[Go+ CI/Test]   |    12: 17: . . . . . . . . . \":\"\n[Go+ CI/Test]   |    12: 18: . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    12: 18: . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    12: 18: . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    12: 18: . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: INT, Value: 10}\n[Go+ CI/Test]   |    12: 18: . . . . . . . . . . . . . INT 10\n[Go+ CI/Test]   |    12: 20: . . . . . . . . . . . . )\n[Go+ CI/Test]   |    12: 20: . . . . . . . . . . . )\n[Go+ CI/Test]   |    12: 20: . . . . . . . . . . )\n[Go+ CI/Test]   |    12: 20: . . . . . . . . . )\n[Go+ CI/Test]   |    12: 20: . . . . . . . . . \":\"\n[Go+ CI/Test]   |    12: 21: . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    12: 21: . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    12: 21: . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    12: 21: . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: INT, Value: 2}\n[Go+ CI/Test]   |    12: 21: . . . . . . . . . . . . . INT 2\n[Go+ CI/Test]   |    12: 23: . . . . . . . . . . . . )\n[Go+ CI/Test]   |    12: 23: . . . . . . . . . . . )\n[Go+ CI/Test]   |    12: 23: . . . . . . . . . . )\n[Go+ CI/Test]   |    12: 23: . . . . . . . . . )\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:2378: ast.RangeExpr{First: <nil>, Last: &{119 INT 10}, Expr3: &{122 INT 2}}\n[Go+ CI/Test]   |    12: 23: . . . . . . . . )\n[Go+ CI/Test]   |    12: 23: . . . . . . . )\n[Go+ CI/Test]   |    12: 23: . . . . . . . BlockStmt (\n[Go+ CI/Test]   |    12: 23: . . . . . . . . \"{\"\n[Go+ CI/Test]   |    13:  3: . . . . . . . . StatementList (\n[Go+ CI/Test]   |    13:  3: . . . . . . . . . Statement (\n[Go+ CI/Test]   |    13:  3: . . . . . . . . . . SimpleStmt (\n[Go+ CI/Test]   |    13:  3: . . . . . . . . . . . ExpressionList (\n[Go+ CI/Test]   |    13:  3: . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |    13:  3: . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    13:  3: . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    13:  3: . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    13:  3: . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |    13:  3: . . . . . . . . . . . . . . . . . IDENT println\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: println}\n[Go+ CI/Test]   |    13: 10: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    13: 10: . . . . . . . . . . . . . . . . CallOrConversion (\n[Go+ CI/Test]   |    13: 10: . . . . . . . . . . . . . . . . . \"(\"\n[Go+ CI/Test]   |    13: 11: . . . . . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |    13: 11: . . . . . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    13: 11: . . . . . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    13: 11: . . . . . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    13: 11: . . . . . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |    13: 11: . . . . . . . . . . . . . . . . . . . . . . IDENT i\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: i}\n[Go+ CI/Test]   |    13: 12: . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    13: 12: . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    13: 12: . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    13: 12: . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    13: 12: . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    13: 12: . . . . . . . . . . . . . . . . . \")\"\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1878: ast.CallExpr{Fun: println, Ellipsis: false, isCmd: false}\n[Go+ CI/Test]   |    13: 13: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    13: 13: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    13: 13: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    13: 13: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    13: 13: . . . . . . . . . . . . )\n[Go+ CI/Test]   |    13: 13: . . . . . . . . . . . )\n[Go+ CI/Test]   |    13: 13: . . . . . . . . . . )\n[Go+ CI/Test]   |    13: 13: . . . . . . . . . . \";\"\n[Go+ CI/Test]   |    14:  2: . . . . . . . . . )\n[Go+ CI/Test]   |    14:  2: . . . . . . . . )\n[Go+ CI/Test]   |    14:  2: . . . . . . . . \"}\"\n[Go+ CI/Test]   |    14:  3: . . . . . . . )\n[Go+ CI/Test]   |    14:  3: . . . . . . . \";\"\n[Go+ CI/Test]   |    16:  2: . . . . . . )\n[Go+ CI/Test]   |    16:  2: . . . . . )\n[Go+ CI/Test]   |    16:  2: . . . . . Statement (\n[Go+ CI/Test]   |    16:  2: . . . . . . ForStmt (\n[Go+ CI/Test]   |    16:  2: . . . . . . . \"for\"\n[Go+ CI/Test]   |    16:  6: . . . . . . . \"range\"\n[Go+ CI/Test]   |    16: 12: . . . . . . . Expression (\n[Go+ CI/Test]   |    16: 12: . . . . . . . . \":\"\n[Go+ CI/Test]   |    16: 13: . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    16: 13: . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    16: 13: . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    16: 13: . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: INT, Value: 10}\n[Go+ CI/Test]   |    16: 13: . . . . . . . . . . . . INT 10\n[Go+ CI/Test]   |    16: 16: . . . . . . . . . . . )\n[Go+ CI/Test]   |    16: 16: . . . . . . . . . . )\n[Go+ CI/Test]   |    16: 16: . . . . . . . . . )\n[Go+ CI/Test]   |    16: 16: . . . . . . . . )\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:2378: ast.RangeExpr{First: <nil>, Last: &{155 INT 10}, Expr3: <nil>}\n[Go+ CI/Test]   |    16: 16: . . . . . . . )\n[Go+ CI/Test]   |    16: 16: . . . . . . . BlockStmt (\n[Go+ CI/Test]   |    16: 16: . . . . . . . . \"{\"\n[Go+ CI/Test]   |    17:  3: . . . . . . . . StatementList (\n[Go+ CI/Test]   |    17:  3: . . . . . . . . . Statement (\n[Go+ CI/Test]   |    17:  3: . . . . . . . . . . SimpleStmt (\n[Go+ CI/Test]   |    17:  3: . . . . . . . . . . . ExpressionList (\n[Go+ CI/Test]   |    17:  3: . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |    17:  3: . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    17:  3: . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    17:  3: . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    17:  3: . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |    17:  3: . . . . . . . . . . . . . . . . . IDENT println\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: println}\n[Go+ CI/Test]   |    17: 10: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    17: 10: . . . . . . . . . . . . . . . . CallOrConversion (\n[Go+ CI/Test]   |    17: 10: . . . . . . . . . . . . . . . . . \"(\"\n[Go+ CI/Test]   |    17: 11: . . . . . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |    17: 11: . . . . . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    17: 11: . . . . . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    17: 11: . . . . . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    17: 11: . . . . . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: STRING, Value: \"Range expression\"}\n[Go+ CI/Test]   |    17: 11: . . . . . . . . . . . . . . . . . . . . . . STRING \"Range expression\"\n[Go+ CI/Test]   |    17: 29: . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    17: 29: . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    17: 29: . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    17: 29: . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    17: 29: . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    17: 29: . . . . . . . . . . . . . . . . . \")\"\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1878: ast.CallExpr{Fun: println, Ellipsis: false, isCmd: false}\n[Go+ CI/Test]   |    17: 30: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    17: 30: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    17: 30: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    17: 30: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    17: 30: . . . . . . . . . . . . )\n[Go+ CI/Test]   |    17: 30: . . . . . . . . . . . )\n[Go+ CI/Test]   |    17: 30: . . . . . . . . . . )\n[Go+ CI/Test]   |    17: 30: . . . . . . . . . . \";\"\n[Go+ CI/Test]   |    18:  2: . . . . . . . . . )\n[Go+ CI/Test]   |    18:  2: . . . . . . . . )\n[Go+ CI/Test]   |    18:  2: . . . . . . . . \"}\"\n[Go+ CI/Test]   |    18:  3: . . . . . . . )\n[Go+ CI/Test]   |    18:  3: . . . . . . . \";\"\n[Go+ CI/Test]   |    19:  1: . . . . . . )\n[Go+ CI/Test]   |    19:  1: . . . . . )\n[Go+ CI/Test]   |    19:  1: . . . . )\n[Go+ CI/Test]   |    19:  1: . . . . \"}\"\n[Go+ CI/Test]   |    19:  2: . . . )\n[Go+ CI/Test]   |    19:  2: . . . \";\"\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:3564: ast.FuncDecl{Name: main, ...}\n[Go+ CI/Test]   |    19:  3: . . )\n[Go+ CI/Test]   |    19:  3: . )\n[Go+ CI/Test]   |    19:  3: )\n[Go+ CI/Test]   | === RUN   TestFromTestdata/rational\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parserdir_test.go:90: Parsing /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/_testdata/rational\n[Go+ CI/Test]   |     1:  1: File (\n[Go+ CI/Test]   |     1:  1: . Declaration (\n[Go+ CI/Test]   |     1:  1: . . StatementList (\n[Go+ CI/Test]   |     1:  1: . . . Statement (\n[Go+ CI/Test]   |     1:  1: . . . . SimpleStmt (\n[Go+ CI/Test]   |     1:  1: . . . . . ExpressionList (\n[Go+ CI/Test]   |     1:  1: . . . . . . Expression (\n[Go+ CI/Test]   |     1:  1: . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     1:  1: . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     1:  1: . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     1:  1: . . . . . . . . . . Operand (\n[Go+ CI/Test]   |     1:  1: . . . . . . . . . . . IDENT a\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: a}\n[Go+ CI/Test]   |     1:  3: . . . . . . . . . . )\n[Go+ CI/Test]   |     1:  3: . . . . . . . . . )\n[Go+ CI/Test]   |     1:  3: . . . . . . . . )\n[Go+ CI/Test]   |     1:  3: . . . . . . . )\n[Go+ CI/Test]   |     1:  3: . . . . . . )\n[Go+ CI/Test]   |     1:  3: . . . . . )\n[Go+ CI/Test]   |     1:  3: . . . . . \":=\"\n[Go+ CI/Test]   |     1:  6: . . . . . ExpressionList (\n[Go+ CI/Test]   |     1:  6: . . . . . . Expression (\n[Go+ CI/Test]   |     1:  6: . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     1:  6: . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     1:  6: . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     1:  6: . . . . . . . . . . Operand (\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: RAT, Value: 1r}\n[Go+ CI/Test]   |     1:  6: . . . . . . . . . . . RAT 1r\n[Go+ CI/Test]   |     1:  9: . . . . . . . . . . )\n[Go+ CI/Test]   |     1:  9: . . . . . . . . . )\n[Go+ CI/Test]   |     1:  9: . . . . . . . . )\n[Go+ CI/Test]   |     1:  9: . . . . . . . . \"<<\"\n[Go+ CI/Test]   |     1: 12: . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     1: 12: . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     1: 12: . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     1: 12: . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: INT, Value: 65}\n[Go+ CI/Test]   |     1: 12: . . . . . . . . . . . . INT 65\n[Go+ CI/Test]   |     1: 15: . . . . . . . . . . . )\n[Go+ CI/Test]   |     1: 15: . . . . . . . . . . )\n[Go+ CI/Test]   |     1: 15: . . . . . . . . . )\n[Go+ CI/Test]   |     1: 15: . . . . . . . . )\n[Go+ CI/Test]   |     1: 15: . . . . . . . )\n[Go+ CI/Test]   |     1: 15: . . . . . . )\n[Go+ CI/Test]   |     1: 15: . . . . . )\n[Go+ CI/Test]   |     1: 15: . . . . )\n[Go+ CI/Test]   |     1: 15: . . . . \";\"\n[Go+ CI/Test]   |     1: 15: . . . . COMMENT\n[Go+ CI/Test]   |     2:  1: . . . )\n[Go+ CI/Test]   |     2:  1: . . . Statement (\n[Go+ CI/Test]   |     2:  1: . . . . SimpleStmt (\n[Go+ CI/Test]   |     2:  1: . . . . . ExpressionList (\n[Go+ CI/Test]   |     2:  1: . . . . . . Expression (\n[Go+ CI/Test]   |     2:  1: . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     2:  1: . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     2:  1: . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     2:  1: . . . . . . . . . . Operand (\n[Go+ CI/Test]   |     2:  1: . . . . . . . . . . . IDENT b\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: b}\n[Go+ CI/Test]   |     2:  3: . . . . . . . . . . )\n[Go+ CI/Test]   |     2:  3: . . . . . . . . . )\n[Go+ CI/Test]   |     2:  3: . . . . . . . . )\n[Go+ CI/Test]   |     2:  3: . . . . . . . )\n[Go+ CI/Test]   |     2:  3: . . . . . . )\n[Go+ CI/Test]   |     2:  3: . . . . . )\n[Go+ CI/Test]   |     2:  3: . . . . . \":=\"\n[Go+ CI/Test]   |     2:  6: . . . . . ExpressionList (\n[Go+ CI/Test]   |     2:  6: . . . . . . Expression (\n[Go+ CI/Test]   |     2:  6: . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     2:  6: . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     2:  6: . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     2:  6: . . . . . . . . . . Operand (\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: INT, Value: 4}\n[Go+ CI/Test]   |     2:  6: . . . . . . . . . . . INT 4\n[Go+ CI/Test]   |     2:  7: . . . . . . . . . . )\n[Go+ CI/Test]   |     2:  7: . . . . . . . . . )\n[Go+ CI/Test]   |     2:  7: . . . . . . . . )\n[Go+ CI/Test]   |     2:  7: . . . . . . . . \"/\"\n[Go+ CI/Test]   |     2:  8: . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     2:  8: . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     2:  8: . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     2:  8: . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: RAT, Value: 5r}\n[Go+ CI/Test]   |     2:  8: . . . . . . . . . . . . RAT 5r\n[Go+ CI/Test]   |     2: 15: . . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 15: . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 15: . . . . . . . . . )\n[Go+ CI/Test]   |     2: 15: . . . . . . . . )\n[Go+ CI/Test]   |     2: 15: . . . . . . . )\n[Go+ CI/Test]   |     2: 15: . . . . . . )\n[Go+ CI/Test]   |     2: 15: . . . . . )\n[Go+ CI/Test]   |     2: 15: . . . . )\n[Go+ CI/Test]   |     2: 15: . . . . \";\"\n[Go+ CI/Test]   |     2: 15: . . . . COMMENT\n[Go+ CI/Test]   |     3:  1: . . . )\n[Go+ CI/Test]   |     3:  1: . . . Statement (\n[Go+ CI/Test]   |     3:  1: . . . . SimpleStmt (\n[Go+ CI/Test]   |     3:  1: . . . . . ExpressionList (\n[Go+ CI/Test]   |     3:  1: . . . . . . Expression (\n[Go+ CI/Test]   |     3:  1: . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     3:  1: . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     3:  1: . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     3:  1: . . . . . . . . . . Operand (\n[Go+ CI/Test]   |     3:  1: . . . . . . . . . . . IDENT c\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: c}\n[Go+ CI/Test]   |     3:  3: . . . . . . . . . . )\n[Go+ CI/Test]   |     3:  3: . . . . . . . . . )\n[Go+ CI/Test]   |     3:  3: . . . . . . . . )\n[Go+ CI/Test]   |     3:  3: . . . . . . . )\n[Go+ CI/Test]   |     3:  3: . . . . . . )\n[Go+ CI/Test]   |     3:  3: . . . . . )\n[Go+ CI/Test]   |     3:  3: . . . . . \":=\"\n[Go+ CI/Test]   |     3:  6: . . . . . ExpressionList (\n[Go+ CI/Test]   |     3:  6: . . . . . . Expression (\n[Go+ CI/Test]   |     3:  6: . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     3:  6: . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     3:  6: . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     3:  6: . . . . . . . . . . Operand (\n[Go+ CI/Test]   |     3:  6: . . . . . . . . . . . IDENT b\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: b}\n[Go+ CI/Test]   |     3:  8: . . . . . . . . . . )\n[Go+ CI/Test]   |     3:  8: . . . . . . . . . )\n[Go+ CI/Test]   |     3:  8: . . . . . . . . )\n[Go+ CI/Test]   |     3:  8: . . . . . . . . \"-\"\n[Go+ CI/Test]   |     3: 10: . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     3: 10: . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     3: 10: . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     3: 10: . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: INT, Value: 1}\n[Go+ CI/Test]   |     3: 10: . . . . . . . . . . . . INT 1\n[Go+ CI/Test]   |     3: 11: . . . . . . . . . . . )\n[Go+ CI/Test]   |     3: 11: . . . . . . . . . . )\n[Go+ CI/Test]   |     3: 11: . . . . . . . . . )\n[Go+ CI/Test]   |     3: 11: . . . . . . . . . \"/\"\n[Go+ CI/Test]   |     3: 12: . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     3: 12: . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     3: 12: . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     3: 12: . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: RAT, Value: 3r}\n[Go+ CI/Test]   |     3: 12: . . . . . . . . . . . . . RAT 3r\n[Go+ CI/Test]   |     3: 15: . . . . . . . . . . . . )\n[Go+ CI/Test]   |     3: 15: . . . . . . . . . . . )\n[Go+ CI/Test]   |     3: 15: . . . . . . . . . . )\n[Go+ CI/Test]   |     3: 15: . . . . . . . . . )\n[Go+ CI/Test]   |     3: 15: . . . . . . . . )\n[Go+ CI/Test]   |     3: 15: . . . . . . . . \"+\"\n[Go+ CI/Test]   |     3: 17: . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     3: 17: . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     3: 17: . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     3: 17: . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: INT, Value: 3}\n[Go+ CI/Test]   |     3: 17: . . . . . . . . . . . . INT 3\n[Go+ CI/Test]   |     3: 18: . . . . . . . . . . . )\n[Go+ CI/Test]   |     3: 18: . . . . . . . . . . )\n[Go+ CI/Test]   |     3: 18: . . . . . . . . . )\n[Go+ CI/Test]   |     3: 18: . . . . . . . . . \"*\"\n[Go+ CI/Test]   |     3: 19: . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     3: 19: . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     3: 19: . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     3: 19: . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: INT, Value: 1}\n[Go+ CI/Test]   |     3: 19: . . . . . . . . . . . . . INT 1\n[Go+ CI/Test]   |     3: 20: . . . . . . . . . . . . )\n[Go+ CI/Test]   |     3: 20: . . . . . . . . . . . )\n[Go+ CI/Test]   |     3: 20: . . . . . . . . . . )\n[Go+ CI/Test]   |     3: 20: . . . . . . . . . )\n[Go+ CI/Test]   |     3: 20: . . . . . . . . . \"/\"\n[Go+ CI/Test]   |     3: 21: . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     3: 21: . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     3: 21: . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     3: 21: . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: RAT, Value: 2r}\n[Go+ CI/Test]   |     3: 21: . . . . . . . . . . . . . RAT 2r\n[Go+ CI/Test]   |     3: 23: . . . . . . . . . . . . )\n[Go+ CI/Test]   |     3: 23: . . . . . . . . . . . )\n[Go+ CI/Test]   |     3: 23: . . . . . . . . . . )\n[Go+ CI/Test]   |     3: 23: . . . . . . . . . )\n[Go+ CI/Test]   |     3: 23: . . . . . . . . )\n[Go+ CI/Test]   |     3: 23: . . . . . . . )\n[Go+ CI/Test]   |     3: 23: . . . . . . )\n[Go+ CI/Test]   |     3: 23: . . . . . )\n[Go+ CI/Test]   |     3: 23: . . . . )\n[Go+ CI/Test]   |     3: 23: . . . . \";\"\n[Go+ CI/Test]   |     4:  1: . . . )\n[Go+ CI/Test]   |     4:  1: . . . Statement (\n[Go+ CI/Test]   |     4:  1: . . . . SimpleStmt (\n[Go+ CI/Test]   |     4:  1: . . . . . ExpressionList (\n[Go+ CI/Test]   |     4:  1: . . . . . . Expression (\n[Go+ CI/Test]   |     4:  1: . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     4:  1: . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     4:  1: . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     4:  1: . . . . . . . . . . Operand (\n[Go+ CI/Test]   |     4:  1: . . . . . . . . . . . IDENT println\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: println}\n[Go+ CI/Test]   |     4:  8: . . . . . . . . . . )\n[Go+ CI/Test]   |     4:  8: . . . . . . . . . . CallOrConversion (\n[Go+ CI/Test]   |     4:  8: . . . . . . . . . . . \"(\"\n[Go+ CI/Test]   |     4:  9: . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |     4:  9: . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     4:  9: . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     4:  9: . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     4:  9: . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |     4:  9: . . . . . . . . . . . . . . . . IDENT a\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: a}\n[Go+ CI/Test]   |     4: 10: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     4: 10: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     4: 10: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     4: 10: . . . . . . . . . . . . )\n[Go+ CI/Test]   |     4: 10: . . . . . . . . . . . )\n[Go+ CI/Test]   |     4: 10: . . . . . . . . . . . \",\"\n[Go+ CI/Test]   |     4: 12: . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |     4: 12: . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     4: 12: . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     4: 12: . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     4: 12: . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |     4: 12: . . . . . . . . . . . . . . . . IDENT b\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: b}\n[Go+ CI/Test]   |     4: 13: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     4: 13: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     4: 13: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     4: 13: . . . . . . . . . . . . )\n[Go+ CI/Test]   |     4: 13: . . . . . . . . . . . )\n[Go+ CI/Test]   |     4: 13: . . . . . . . . . . . \",\"\n[Go+ CI/Test]   |     4: 15: . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |     4: 15: . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     4: 15: . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     4: 15: . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     4: 15: . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |     4: 15: . . . . . . . . . . . . . . . . IDENT c\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: c}\n[Go+ CI/Test]   |     4: 16: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     4: 16: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     4: 16: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     4: 16: . . . . . . . . . . . . )\n[Go+ CI/Test]   |     4: 16: . . . . . . . . . . . )\n[Go+ CI/Test]   |     4: 16: . . . . . . . . . . . \")\"\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1878: ast.CallExpr{Fun: println, Ellipsis: false, isCmd: false}\n[Go+ CI/Test]   |     4: 17: . . . . . . . . . . )\n[Go+ CI/Test]   |     4: 17: . . . . . . . . . )\n[Go+ CI/Test]   |     4: 17: . . . . . . . . )\n[Go+ CI/Test]   |     4: 17: . . . . . . . )\n[Go+ CI/Test]   |     4: 17: . . . . . . )\n[Go+ CI/Test]   |     4: 17: . . . . . )\n[Go+ CI/Test]   |     4: 17: . . . . )\n[Go+ CI/Test]   |     4: 17: . . . . \";\"\n[Go+ CI/Test]   |     4: 18: . . . )\n[Go+ CI/Test]   |     4: 18: . . )\n[Go+ CI/Test]   |     4: 18: . )\n[Go+ CI/Test]   |     4: 18: )\n[Go+ CI/Test]   | === RUN   TestFromTestdata/selectdata\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parserdir_test.go:90: Parsing /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/_testdata/selectdata\n[Go+ CI/Test]   |     1:  1: File (\n[Go+ CI/Test]   |     1:  1: . Declaration (\n[Go+ CI/Test]   |     1:  1: . . StatementList (\n[Go+ CI/Test]   |     1:  1: . . . Statement (\n[Go+ CI/Test]   |     1:  1: . . . . SimpleStmt (\n[Go+ CI/Test]   |     1:  1: . . . . . ExpressionList (\n[Go+ CI/Test]   |     1:  1: . . . . . . Expression (\n[Go+ CI/Test]   |     1:  1: . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     1:  1: . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     1:  1: . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     1:  1: . . . . . . . . . . Operand (\n[Go+ CI/Test]   |     1:  1: . . . . . . . . . . . IDENT a\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: a}\n[Go+ CI/Test]   |     1:  3: . . . . . . . . . . )\n[Go+ CI/Test]   |     1:  3: . . . . . . . . . )\n[Go+ CI/Test]   |     1:  3: . . . . . . . . )\n[Go+ CI/Test]   |     1:  3: . . . . . . . )\n[Go+ CI/Test]   |     1:  3: . . . . . . )\n[Go+ CI/Test]   |     1:  3: . . . . . )\n[Go+ CI/Test]   |     1:  3: . . . . . \":=\"\n[Go+ CI/Test]   |     1:  6: . . . . . ExpressionList (\n[Go+ CI/Test]   |     1:  6: . . . . . . Expression (\n[Go+ CI/Test]   |     1:  6: . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     1:  6: . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     1:  6: . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     1:  6: . . . . . . . . . . Operand (\n[Go+ CI/Test]   |     1:  6: . . . . . . . . . . . ArrayType (\n[Go+ CI/Test]   |     1:  6: . . . . . . . . . . . . \"[\"\n[Go+ CI/Test]   |     1:  7: . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |     1:  7: . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     1:  7: . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     1:  7: . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     1:  7: . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: INT, Value: 1}\n[Go+ CI/Test]   |     1:  7: . . . . . . . . . . . . . . . . . INT 1\n[Go+ CI/Test]   |     1:  8: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     1:  8: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     1:  8: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     1:  8: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     1:  8: . . . . . . . . . . . . )\n[Go+ CI/Test]   |     1:  8: . . . . . . . . . . . . \",\"\n[Go+ CI/Test]   |     1: 10: . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |     1: 10: . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     1: 10: . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     1: 10: . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     1: 10: . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: INT, Value: 3}\n[Go+ CI/Test]   |     1: 10: . . . . . . . . . . . . . . . . . INT 3\n[Go+ CI/Test]   |     1: 11: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     1: 11: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     1: 11: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     1: 11: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     1: 11: . . . . . . . . . . . . )\n[Go+ CI/Test]   |     1: 11: . . . . . . . . . . . . \",\"\n[Go+ CI/Test]   |     1: 13: . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |     1: 13: . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     1: 13: . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     1: 13: . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     1: 13: . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: INT, Value: 5}\n[Go+ CI/Test]   |     1: 13: . . . . . . . . . . . . . . . . . INT 5\n[Go+ CI/Test]   |     1: 14: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     1: 14: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     1: 14: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     1: 14: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     1: 14: . . . . . . . . . . . . )\n[Go+ CI/Test]   |     1: 14: . . . . . . . . . . . . \",\"\n[Go+ CI/Test]   |     1: 16: . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |     1: 16: . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     1: 16: . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     1: 16: . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     1: 16: . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: INT, Value: 7}\n[Go+ CI/Test]   |     1: 16: . . . . . . . . . . . . . . . . . INT 7\n[Go+ CI/Test]   |     1: 17: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     1: 17: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     1: 17: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     1: 17: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     1: 17: . . . . . . . . . . . . )\n[Go+ CI/Test]   |     1: 17: . . . . . . . . . . . . \",\"\n[Go+ CI/Test]   |     1: 19: . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |     1: 19: . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     1: 19: . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     1: 19: . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     1: 19: . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: INT, Value: 8}\n[Go+ CI/Test]   |     1: 19: . . . . . . . . . . . . . . . . . INT 8\n[Go+ CI/Test]   |     1: 20: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     1: 20: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     1: 20: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     1: 20: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     1: 20: . . . . . . . . . . . . )\n[Go+ CI/Test]   |     1: 20: . . . . . . . . . . . . \",\"\n[Go+ CI/Test]   |     1: 22: . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |     1: 22: . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     1: 22: . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     1: 22: . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     1: 22: . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: INT, Value: 19}\n[Go+ CI/Test]   |     1: 22: . . . . . . . . . . . . . . . . . INT 19\n[Go+ CI/Test]   |     1: 24: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     1: 24: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     1: 24: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     1: 24: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     1: 24: . . . . . . . . . . . . )\n[Go+ CI/Test]   |     1: 24: . . . . . . . . . . . . \"]\"\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:888: ast.SliceLit{Elts: [0xc0004dc3e0 0xc0004dc400 0xc0004dc420 0xc0004dc440 0xc0004dc460 0xc0004dc480]}\n[Go+ CI/Test]   |     1: 25: . . . . . . . . . . . )\n[Go+ CI/Test]   |     1: 25: . . . . . . . . . . )\n[Go+ CI/Test]   |     1: 25: . . . . . . . . . )\n[Go+ CI/Test]   |     1: 25: . . . . . . . . )\n[Go+ CI/Test]   |     1: 25: . . . . . . . )\n[Go+ CI/Test]   |     1: 25: . . . . . . )\n[Go+ CI/Test]   |     1: 25: . . . . . )\n[Go+ CI/Test]   |     1: 25: . . . . )\n[Go+ CI/Test]   |     1: 25: . . . . \";\"\n[Go+ CI/Test]   |     2:  1: . . . )\n[Go+ CI/Test]   |     2:  1: . . . Statement (\n[Go+ CI/Test]   |     2:  1: . . . . SimpleStmt (\n[Go+ CI/Test]   |     2:  1: . . . . . ExpressionList (\n[Go+ CI/Test]   |     2:  1: . . . . . . Expression (\n[Go+ CI/Test]   |     2:  1: . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     2:  1: . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     2:  1: . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     2:  1: . . . . . . . . . . Operand (\n[Go+ CI/Test]   |     2:  1: . . . . . . . . . . . IDENT y\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: y}\n[Go+ CI/Test]   |     2:  3: . . . . . . . . . . )\n[Go+ CI/Test]   |     2:  3: . . . . . . . . . )\n[Go+ CI/Test]   |     2:  3: . . . . . . . . )\n[Go+ CI/Test]   |     2:  3: . . . . . . . )\n[Go+ CI/Test]   |     2:  3: . . . . . . )\n[Go+ CI/Test]   |     2:  3: . . . . . )\n[Go+ CI/Test]   |     2:  3: . . . . . \":=\"\n[Go+ CI/Test]   |     2:  6: . . . . . ExpressionList (\n[Go+ CI/Test]   |     2:  6: . . . . . . Expression (\n[Go+ CI/Test]   |     2:  6: . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     2:  6: . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     2:  6: . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     2:  6: . . . . . . . . . . Operand (\n[Go+ CI/Test]   |     2:  6: . . . . . . . . . . . LiteralValue (\n[Go+ CI/Test]   |     2:  6: . . . . . . . . . . . . \"{\"\n[Go+ CI/Test]   |     2:  7: . . . . . . . . . . . . ElementList (\n[Go+ CI/Test]   |     2:  7: . . . . . . . . . . . . . Element (\n[Go+ CI/Test]   |     2:  7: . . . . . . . . . . . . . . Element (\n[Go+ CI/Test]   |     2:  7: . . . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |     2:  7: . . . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     2:  7: . . . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     2:  7: . . . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     2:  7: . . . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |     2:  7: . . . . . . . . . . . . . . . . . . . . IDENT x\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: x}\n[Go+ CI/Test]   |     2:  9: . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     2:  9: . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     2:  9: . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     2:  9: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     2:  9: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     2:  9: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     2:  9: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     2:  9: . . . . . . . . . . . . . ForPhrase (\n[Go+ CI/Test]   |     2:  9: . . . . . . . . . . . . . . \"for\"\n[Go+ CI/Test]   |     2: 13: . . . . . . . . . . . . . . IDENT x\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: x}\n[Go+ CI/Test]   |     2: 15: . . . . . . . . . . . . . . \"<-\"\n[Go+ CI/Test]   |     2: 18: . . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |     2: 18: . . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     2: 18: . . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     2: 18: . . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     2: 18: . . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |     2: 18: . . . . . . . . . . . . . . . . . . . IDENT a\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: a}\n[Go+ CI/Test]   |     2: 20: . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 20: . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 20: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 20: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 20: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 20: . . . . . . . . . . . . . . \"if\"\n[Go+ CI/Test]   |     2: 23: . . . . . . . . . . . . . . SimpleStmt (\n[Go+ CI/Test]   |     2: 23: . . . . . . . . . . . . . . . ExpressionList (\n[Go+ CI/Test]   |     2: 23: . . . . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |     2: 23: . . . . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     2: 23: . . . . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     2: 23: . . . . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     2: 23: . . . . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |     2: 23: . . . . . . . . . . . . . . . . . . . . . IDENT x\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: x}\n[Go+ CI/Test]   |     2: 24: . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 24: . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 24: . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 24: . . . . . . . . . . . . . . . . . . \"%\"\n[Go+ CI/Test]   |     2: 25: . . . . . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     2: 25: . . . . . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     2: 25: . . . . . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     2: 25: . . . . . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: INT, Value: 2}\n[Go+ CI/Test]   |     2: 25: . . . . . . . . . . . . . . . . . . . . . . INT 2\n[Go+ CI/Test]   |     2: 27: . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 27: . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 27: . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 27: . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 27: . . . . . . . . . . . . . . . . . . \"==\"\n[Go+ CI/Test]   |     2: 30: . . . . . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     2: 30: . . . . . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     2: 30: . . . . . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     2: 30: . . . . . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: INT, Value: 0}\n[Go+ CI/Test]   |     2: 30: . . . . . . . . . . . . . . . . . . . . . . INT 0\n[Go+ CI/Test]   |     2: 31: . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 31: . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 31: . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 31: . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 31: . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 31: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 31: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 31: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 31: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 31: . . . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 31: . . . . . . . . . . . . \"}\"\n[Go+ CI/Test]   |     2: 32: . . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 32: . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 32: . . . . . . . . . )\n[Go+ CI/Test]   |     2: 32: . . . . . . . . )\n[Go+ CI/Test]   |     2: 32: . . . . . . . )\n[Go+ CI/Test]   |     2: 32: . . . . . . )\n[Go+ CI/Test]   |     2: 32: . . . . . )\n[Go+ CI/Test]   |     2: 32: . . . . )\n[Go+ CI/Test]   |     2: 32: . . . . \";\"\n[Go+ CI/Test]   |     2: 33: . . . )\n[Go+ CI/Test]   |     2: 33: . . )\n[Go+ CI/Test]   |     2: 33: . )\n[Go+ CI/Test]   |     2: 33: )\n[Go+ CI/Test]   | === RUN   TestFromTestdata/slice1\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parserdir_test.go:90: Parsing /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/_testdata/slice1\n[Go+ CI/Test]   |     1:  1: File (\n[Go+ CI/Test]   |     1:  1: . Declaration (\n[Go+ CI/Test]   |     1:  1: . . StatementList (\n[Go+ CI/Test]   |     1:  1: . . . Statement (\n[Go+ CI/Test]   |     1:  1: . . . . SimpleStmt (\n[Go+ CI/Test]   |     1:  1: . . . . . ExpressionList (\n[Go+ CI/Test]   |     1:  1: . . . . . . Expression (\n[Go+ CI/Test]   |     1:  1: . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     1:  1: . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     1:  1: . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     1:  1: . . . . . . . . . . Operand (\n[Go+ CI/Test]   |     1:  1: . . . . . . . . . . . IDENT println\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: println}\n[Go+ CI/Test]   |     1:  8: . . . . . . . . . . )\n[Go+ CI/Test]   |     1:  8: . . . . . . . . . . CallOrConversion (\n[Go+ CI/Test]   |     1:  8: . . . . . . . . . . . \"(\"\n[Go+ CI/Test]   |     1:  9: . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |     1:  9: . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     1:  9: . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     1:  9: . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     1:  9: . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |     1:  9: . . . . . . . . . . . . . . . . ArrayType (\n[Go+ CI/Test]   |     1:  9: . . . . . . . . . . . . . . . . . \"[\"\n[Go+ CI/Test]   |     1: 10: . . . . . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |     1: 10: . . . . . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     1: 10: . . . . . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     1: 10: . . . . . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     1: 10: . . . . . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: INT, Value: 1}\n[Go+ CI/Test]   |     1: 10: . . . . . . . . . . . . . . . . . . . . . . INT 1\n[Go+ CI/Test]   |     1: 11: . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     1: 11: . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     1: 11: . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     1: 11: . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     1: 11: . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     1: 11: . . . . . . . . . . . . . . . . . \"]\"\n[Go+ CI/Test]   |     1: 12: . . . . . . . . . . . . . . . . . ArrayType (\n[Go+ CI/Test]   |     1: 12: . . . . . . . . . . . . . . . . . . \"[\"\n[Go+ CI/Test]   |     1: 13: . . . . . . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |     1: 13: . . . . . . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     1: 13: . . . . . . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     1: 13: . . . . . . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     1: 13: . . . . . . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: INT, Value: 0}\n[Go+ CI/Test]   |     1: 13: . . . . . . . . . . . . . . . . . . . . . . . INT 0\n[Go+ CI/Test]   |     1: 14: . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     1: 14: . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     1: 14: . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     1: 14: . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     1: 14: . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     1: 14: . . . . . . . . . . . . . . . . . . \"]\"\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:861: ast.IndexExpr{X: &{9 [0xc0004dc6a0] 11 false}, Index: &{13 INT 0}}\n[Go+ CI/Test]   |     1: 15: . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     1: 15: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     1: 15: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     1: 15: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     1: 15: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     1: 15: . . . . . . . . . . . . )\n[Go+ CI/Test]   |     1: 15: . . . . . . . . . . . )\n[Go+ CI/Test]   |     1: 15: . . . . . . . . . . . \")\"\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1878: ast.CallExpr{Fun: println, Ellipsis: false, isCmd: false}\n[Go+ CI/Test]   |     1: 16: . . . . . . . . . . )\n[Go+ CI/Test]   |     1: 16: . . . . . . . . . )\n[Go+ CI/Test]   |     1: 16: . . . . . . . . )\n[Go+ CI/Test]   |     1: 16: . . . . . . . )\n[Go+ CI/Test]   |     1: 16: . . . . . . )\n[Go+ CI/Test]   |     1: 16: . . . . . )\n[Go+ CI/Test]   |     1: 16: . . . . )\n[Go+ CI/Test]   |     1: 16: . . . . \";\"\n[Go+ CI/Test]   |     2:  1: . . . )\n[Go+ CI/Test]   |     2:  1: . . . Statement (\n[Go+ CI/Test]   |     2:  1: . . . . SimpleStmt (\n[Go+ CI/Test]   |     2:  1: . . . . . ExpressionList (\n[Go+ CI/Test]   |     2:  1: . . . . . . Expression (\n[Go+ CI/Test]   |     2:  1: . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     2:  1: . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     2:  1: . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     2:  1: . . . . . . . . . . Operand (\n[Go+ CI/Test]   |     2:  1: . . . . . . . . . . . IDENT println\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: println}\n[Go+ CI/Test]   |     2:  8: . . . . . . . . . . )\n[Go+ CI/Test]   |     2:  8: . . . . . . . . . . CallOrConversion (\n[Go+ CI/Test]   |     2:  8: . . . . . . . . . . . \"(\"\n[Go+ CI/Test]   |     2:  9: . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |     2:  9: . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     2:  9: . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     2:  9: . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     2:  9: . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |     2:  9: . . . . . . . . . . . . . . . . ArrayType (\n[Go+ CI/Test]   |     2:  9: . . . . . . . . . . . . . . . . . \"[\"\n[Go+ CI/Test]   |     2: 10: . . . . . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |     2: 10: . . . . . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     2: 10: . . . . . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     2: 10: . . . . . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     2: 10: . . . . . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: INT, Value: 1}\n[Go+ CI/Test]   |     2: 10: . . . . . . . . . . . . . . . . . . . . . . INT 1\n[Go+ CI/Test]   |     2: 11: . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 11: . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 11: . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 11: . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 11: . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 11: . . . . . . . . . . . . . . . . . \"]\"\n[Go+ CI/Test]   |     2: 12: . . . . . . . . . . . . . . . . . ArrayType (\n[Go+ CI/Test]   |     2: 12: . . . . . . . . . . . . . . . . . . \"[\"\n[Go+ CI/Test]   |     2: 13: . . . . . . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |     2: 13: . . . . . . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     2: 13: . . . . . . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     2: 13: . . . . . . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     2: 13: . . . . . . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: INT, Value: 0}\n[Go+ CI/Test]   |     2: 13: . . . . . . . . . . . . . . . . . . . . . . . INT 0\n[Go+ CI/Test]   |     2: 14: . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 14: . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 14: . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 14: . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 14: . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 14: . . . . . . . . . . . . . . . . . . \":\"\n[Go+ CI/Test]   |     2: 15: . . . . . . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |     2: 15: . . . . . . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     2: 15: . . . . . . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     2: 15: . . . . . . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     2: 15: . . . . . . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: INT, Value: 1}\n[Go+ CI/Test]   |     2: 15: . . . . . . . . . . . . . . . . . . . . . . . INT 1\n[Go+ CI/Test]   |     2: 16: . . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 16: . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 16: . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 16: . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 16: . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 16: . . . . . . . . . . . . . . . . . . \"]\"\n[Go+ CI/Test]   |     2: 17: . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 17: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 17: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 17: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 17: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 17: . . . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 17: . . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 17: . . . . . . . . . . . \")\"\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1878: ast.CallExpr{Fun: println, Ellipsis: false, isCmd: false}\n[Go+ CI/Test]   |     2: 18: . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 18: . . . . . . . . . )\n[Go+ CI/Test]   |     2: 18: . . . . . . . . )\n[Go+ CI/Test]   |     2: 18: . . . . . . . )\n[Go+ CI/Test]   |     2: 18: . . . . . . )\n[Go+ CI/Test]   |     2: 18: . . . . . )\n[Go+ CI/Test]   |     2: 18: . . . . )\n[Go+ CI/Test]   |     2: 18: . . . . \";\"\n[Go+ CI/Test]   |     3:  1: . . . )\n[Go+ CI/Test]   |     3:  1: . . . Statement (\n[Go+ CI/Test]   |     3:  1: . . . . SimpleStmt (\n[Go+ CI/Test]   |     3:  1: . . . . . ExpressionList (\n[Go+ CI/Test]   |     3:  1: . . . . . . Expression (\n[Go+ CI/Test]   |     3:  1: . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     3:  1: . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     3:  1: . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     3:  1: . . . . . . . . . . Operand (\n[Go+ CI/Test]   |     3:  1: . . . . . . . . . . . IDENT println\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: println}\n[Go+ CI/Test]   |     3:  8: . . . . . . . . . . )\n[Go+ CI/Test]   |     3:  8: . . . . . . . . . . CallOrConversion (\n[Go+ CI/Test]   |     3:  8: . . . . . . . . . . . \"(\"\n[Go+ CI/Test]   |     3:  9: . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |     3:  9: . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     3:  9: . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     3:  9: . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     3:  9: . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |     3:  9: . . . . . . . . . . . . . . . . ArrayType (\n[Go+ CI/Test]   |     3:  9: . . . . . . . . . . . . . . . . . \"[\"\n[Go+ CI/Test]   |     3: 10: . . . . . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |     3: 10: . . . . . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     3: 10: . . . . . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     3: 10: . . . . . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     3: 10: . . . . . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: INT, Value: 1}\n[Go+ CI/Test]   |     3: 10: . . . . . . . . . . . . . . . . . . . . . . INT 1\n[Go+ CI/Test]   |     3: 11: . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     3: 11: . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     3: 11: . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     3: 11: . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     3: 11: . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     3: 11: . . . . . . . . . . . . . . . . . \",\"\n[Go+ CI/Test]   |     3: 13: . . . . . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |     3: 13: . . . . . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     3: 13: . . . . . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     3: 13: . . . . . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     3: 13: . . . . . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: INT, Value: 2}\n[Go+ CI/Test]   |     3: 13: . . . . . . . . . . . . . . . . . . . . . . INT 2\n[Go+ CI/Test]   |     3: 14: . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     3: 14: . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     3: 14: . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     3: 14: . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     3: 14: . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     3: 14: . . . . . . . . . . . . . . . . . \"]\"\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:888: ast.SliceLit{Elts: [0xc0004dc7e0 0xc0004dc800]}\n[Go+ CI/Test]   |     3: 15: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     3: 15: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     3: 15: . . . . . . . . . . . . . . . IndexOrSlice (\n[Go+ CI/Test]   |     3: 15: . . . . . . . . . . . . . . . . \"[\"\n[Go+ CI/Test]   |     3: 16: . . . . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |     3: 16: . . . . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     3: 16: . . . . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     3: 16: . . . . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     3: 16: . . . . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: INT, Value: 0}\n[Go+ CI/Test]   |     3: 16: . . . . . . . . . . . . . . . . . . . . . INT 0\n[Go+ CI/Test]   |     3: 17: . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     3: 17: . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     3: 17: . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     3: 17: . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     3: 17: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     3: 17: . . . . . . . . . . . . . . . . \":\"\n[Go+ CI/Test]   |     3: 18: . . . . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |     3: 18: . . . . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     3: 18: . . . . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     3: 18: . . . . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     3: 18: . . . . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: INT, Value: 1}\n[Go+ CI/Test]   |     3: 18: . . . . . . . . . . . . . . . . . . . . . INT 1\n[Go+ CI/Test]   |     3: 19: . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     3: 19: . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     3: 19: . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     3: 19: . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     3: 19: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     3: 19: . . . . . . . . . . . . . . . . \":\"\n[Go+ CI/Test]   |     3: 20: . . . . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |     3: 20: . . . . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     3: 20: . . . . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     3: 20: . . . . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     3: 20: . . . . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: INT, Value: 5}\n[Go+ CI/Test]   |     3: 20: . . . . . . . . . . . . . . . . . . . . . INT 5\n[Go+ CI/Test]   |     3: 21: . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     3: 21: . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     3: 21: . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     3: 21: . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     3: 21: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     3: 21: . . . . . . . . . . . . . . . . \"]\"\n[Go+ CI/Test]   |     3: 22: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     3: 22: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     3: 22: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     3: 22: . . . . . . . . . . . . )\n[Go+ CI/Test]   |     3: 22: . . . . . . . . . . . )\n[Go+ CI/Test]   |     3: 22: . . . . . . . . . . . \")\"\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1878: ast.CallExpr{Fun: println, Ellipsis: false, isCmd: false}\n[Go+ CI/Test]   |     3: 23: . . . . . . . . . . )\n[Go+ CI/Test]   |     3: 23: . . . . . . . . . )\n[Go+ CI/Test]   |     3: 23: . . . . . . . . )\n[Go+ CI/Test]   |     3: 23: . . . . . . . )\n[Go+ CI/Test]   |     3: 23: . . . . . . )\n[Go+ CI/Test]   |     3: 23: . . . . . )\n[Go+ CI/Test]   |     3: 23: . . . . )\n[Go+ CI/Test]   |     3: 23: . . . . \";\"\n[Go+ CI/Test]   |     5:  1: . . . )\n[Go+ CI/Test]   |     5:  1: . . . Statement (\n[Go+ CI/Test]   |     5:  1: . . . . SimpleStmt (\n[Go+ CI/Test]   |     5:  1: . . . . . ExpressionList (\n[Go+ CI/Test]   |     5:  1: . . . . . . Expression (\n[Go+ CI/Test]   |     5:  1: . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     5:  1: . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     5:  1: . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     5:  1: . . . . . . . . . . Operand (\n[Go+ CI/Test]   |     5:  1: . . . . . . . . . . . IDENT a\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: a}\n[Go+ CI/Test]   |     5:  3: . . . . . . . . . . )\n[Go+ CI/Test]   |     5:  3: . . . . . . . . . )\n[Go+ CI/Test]   |     5:  3: . . . . . . . . )\n[Go+ CI/Test]   |     5:  3: . . . . . . . )\n[Go+ CI/Test]   |     5:  3: . . . . . . )\n[Go+ CI/Test]   |     5:  3: . . . . . )\n[Go+ CI/Test]   |     5:  3: . . . . . \":=\"\n[Go+ CI/Test]   |     5:  6: . . . . . ExpressionList (\n[Go+ CI/Test]   |     5:  6: . . . . . . Expression (\n[Go+ CI/Test]   |     5:  6: . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     5:  6: . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     5:  6: . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     5:  6: . . . . . . . . . . Operand (\n[Go+ CI/Test]   |     5:  6: . . . . . . . . . . . ArrayType (\n[Go+ CI/Test]   |     5:  6: . . . . . . . . . . . . \"[\"\n[Go+ CI/Test]   |     5:  7: . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |     5:  7: . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     5:  7: . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     5:  7: . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     5:  7: . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: INT, Value: 1}\n[Go+ CI/Test]   |     5:  7: . . . . . . . . . . . . . . . . . INT 1\n[Go+ CI/Test]   |     5:  8: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     5:  8: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     5:  8: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     5:  8: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     5:  8: . . . . . . . . . . . . )\n[Go+ CI/Test]   |     5:  8: . . . . . . . . . . . . \"]\"\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:847: ast.SliceLit{Elts: [0xc0004dc8a0]}\n[Go+ CI/Test]   |     5:  9: . . . . . . . . . . . )\n[Go+ CI/Test]   |     5:  9: . . . . . . . . . . )\n[Go+ CI/Test]   |     5:  9: . . . . . . . . . )\n[Go+ CI/Test]   |     5:  9: . . . . . . . . )\n[Go+ CI/Test]   |     5:  9: . . . . . . . )\n[Go+ CI/Test]   |     5:  9: . . . . . . )\n[Go+ CI/Test]   |     5:  9: . . . . . )\n[Go+ CI/Test]   |     5:  9: . . . . )\n[Go+ CI/Test]   |     5:  9: . . . . \";\"\n[Go+ CI/Test]   |     6:  1: . . . )\n[Go+ CI/Test]   |     6:  1: . . . Statement (\n[Go+ CI/Test]   |     6:  1: . . . . SimpleStmt (\n[Go+ CI/Test]   |     6:  1: . . . . . ExpressionList (\n[Go+ CI/Test]   |     6:  1: . . . . . . Expression (\n[Go+ CI/Test]   |     6:  1: . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     6:  1: . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     6:  1: . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     6:  1: . . . . . . . . . . Operand (\n[Go+ CI/Test]   |     6:  1: . . . . . . . . . . . IDENT println\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: println}\n[Go+ CI/Test]   |     6:  8: . . . . . . . . . . )\n[Go+ CI/Test]   |     6:  8: . . . . . . . . . . CallOrConversion (\n[Go+ CI/Test]   |     6:  8: . . . . . . . . . . . \"(\"\n[Go+ CI/Test]   |     6:  9: . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |     6:  9: . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     6:  9: . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     6:  9: . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     6:  9: . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |     6:  9: . . . . . . . . . . . . . . . . IDENT a\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: a}\n[Go+ CI/Test]   |     6: 10: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     6: 10: . . . . . . . . . . . . . . . IndexOrSlice (\n[Go+ CI/Test]   |     6: 10: . . . . . . . . . . . . . . . . \"[\"\n[Go+ CI/Test]   |     6: 11: . . . . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |     6: 11: . . . . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     6: 11: . . . . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     6: 11: . . . . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     6: 11: . . . . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: INT, Value: 0}\n[Go+ CI/Test]   |     6: 11: . . . . . . . . . . . . . . . . . . . . . INT 0\n[Go+ CI/Test]   |     6: 12: . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     6: 12: . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     6: 12: . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     6: 12: . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     6: 12: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     6: 12: . . . . . . . . . . . . . . . . \"]\"\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1791: ast.IndexExpr{X: a, Index: &{78 INT 0}}\n[Go+ CI/Test]   |     6: 13: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     6: 13: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     6: 13: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     6: 13: . . . . . . . . . . . . )\n[Go+ CI/Test]   |     6: 13: . . . . . . . . . . . )\n[Go+ CI/Test]   |     6: 13: . . . . . . . . . . . \")\"\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1878: ast.CallExpr{Fun: println, Ellipsis: false, isCmd: false}\n[Go+ CI/Test]   |     6: 14: . . . . . . . . . . )\n[Go+ CI/Test]   |     6: 14: . . . . . . . . . )\n[Go+ CI/Test]   |     6: 14: . . . . . . . . )\n[Go+ CI/Test]   |     6: 14: . . . . . . . )\n[Go+ CI/Test]   |     6: 14: . . . . . . )\n[Go+ CI/Test]   |     6: 14: . . . . . )\n[Go+ CI/Test]   |     6: 14: . . . . )\n[Go+ CI/Test]   |     6: 14: . . . . \";\"\n[Go+ CI/Test]   |     6: 15: . . . )\n[Go+ CI/Test]   |     6: 15: . . )\n[Go+ CI/Test]   |     6: 15: . )\n[Go+ CI/Test]   |     6: 15: )\n[Go+ CI/Test]   | === RUN   TestFromTestdata/slice2\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parserdir_test.go:90: Parsing /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/_testdata/slice2\n[Go+ CI/Test]   |     1:  1: File (\n[Go+ CI/Test]   |     1:  1: . \"package\"\n[Go+ CI/Test]   |     1:  9: . IDENT main\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: main}\n[Go+ CI/Test]   |     1: 13: . \";\"\n[Go+ CI/Test]   |     3:  1: . Declaration (\n[Go+ CI/Test]   |     3:  1: . . FunctionDecl (\n[Go+ CI/Test]   |     3:  1: . . . \"func\"\n[Go+ CI/Test]   |     3:  6: . . . IDENT main\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: main}\n[Go+ CI/Test]   |     3: 10: . . . Signature (\n[Go+ CI/Test]   |     3: 10: . . . . Parameters (\n[Go+ CI/Test]   |     3: 10: . . . . . \"(\"\n[Go+ CI/Test]   |     3: 11: . . . . . \")\"\n[Go+ CI/Test]   |     3: 13: . . . . )\n[Go+ CI/Test]   |     3: 13: . . . . Result (\n[Go+ CI/Test]   |     3: 13: . . . . )\n[Go+ CI/Test]   |     3: 13: . . . )\n[Go+ CI/Test]   |     3: 13: . . . Body (\n[Go+ CI/Test]   |     3: 13: . . . . \"{\"\n[Go+ CI/Test]   |     4:  2: . . . . StatementList (\n[Go+ CI/Test]   |     4:  2: . . . . . Statement (\n[Go+ CI/Test]   |     4:  2: . . . . . . SimpleStmt (\n[Go+ CI/Test]   |     4:  2: . . . . . . . ExpressionList (\n[Go+ CI/Test]   |     4:  2: . . . . . . . . Expression (\n[Go+ CI/Test]   |     4:  2: . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     4:  2: . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     4:  2: . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     4:  2: . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |     4:  2: . . . . . . . . . . . . . IDENT a\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: a}\n[Go+ CI/Test]   |     4:  4: . . . . . . . . . . . . )\n[Go+ CI/Test]   |     4:  4: . . . . . . . . . . . )\n[Go+ CI/Test]   |     4:  4: . . . . . . . . . . )\n[Go+ CI/Test]   |     4:  4: . . . . . . . . . )\n[Go+ CI/Test]   |     4:  4: . . . . . . . . )\n[Go+ CI/Test]   |     4:  4: . . . . . . . )\n[Go+ CI/Test]   |     4:  4: . . . . . . . \":=\"\n[Go+ CI/Test]   |     4:  7: . . . . . . . ExpressionList (\n[Go+ CI/Test]   |     4:  7: . . . . . . . . Expression (\n[Go+ CI/Test]   |     4:  7: . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     4:  7: . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     4:  7: . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     4:  7: . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |     4:  7: . . . . . . . . . . . . . ArrayType (\n[Go+ CI/Test]   |     4:  7: . . . . . . . . . . . . . . \"[\"\n[Go+ CI/Test]   |     5:  3: . . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |     5:  3: . . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     5:  3: . . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     5:  3: . . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     5:  3: . . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: INT, Value: 1}\n[Go+ CI/Test]   |     5:  3: . . . . . . . . . . . . . . . . . . . INT 1\n[Go+ CI/Test]   |     5:  4: . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     5:  4: . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     5:  4: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     5:  4: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     5:  4: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     5:  4: . . . . . . . . . . . . . . \",\"\n[Go+ CI/Test]   |     6:  3: . . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |     6:  3: . . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     6:  3: . . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     6:  3: . . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     6:  3: . . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: INT, Value: 2}\n[Go+ CI/Test]   |     6:  3: . . . . . . . . . . . . . . . . . . . INT 2\n[Go+ CI/Test]   |     6:  4: . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     6:  4: . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     6:  4: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     6:  4: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     6:  4: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     6:  4: . . . . . . . . . . . . . . \",\"\n[Go+ CI/Test]   |     7:  3: . . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |     7:  3: . . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     7:  3: . . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     7:  3: . . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     7:  3: . . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: INT, Value: 3}\n[Go+ CI/Test]   |     7:  3: . . . . . . . . . . . . . . . . . . . INT 3\n[Go+ CI/Test]   |     7:  4: . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     7:  4: . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     7:  4: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     7:  4: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     7:  4: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     7:  4: . . . . . . . . . . . . . . \",\"\n[Go+ CI/Test]   |     8:  2: . . . . . . . . . . . . . . \"]\"\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:888: ast.SliceLit{Elts: [0xc0004dca60 0xc0004dca80 0xc0004dcaa0]}\n[Go+ CI/Test]   |     8:  3: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     8:  3: . . . . . . . . . . . . )\n[Go+ CI/Test]   |     8:  3: . . . . . . . . . . . )\n[Go+ CI/Test]   |     8:  3: . . . . . . . . . . )\n[Go+ CI/Test]   |     8:  3: . . . . . . . . . )\n[Go+ CI/Test]   |     8:  3: . . . . . . . . )\n[Go+ CI/Test]   |     8:  3: . . . . . . . )\n[Go+ CI/Test]   |     8:  3: . . . . . . )\n[Go+ CI/Test]   |     8:  3: . . . . . . \";\"\n[Go+ CI/Test]   |     9:  2: . . . . . )\n[Go+ CI/Test]   |     9:  2: . . . . . Statement (\n[Go+ CI/Test]   |     9:  2: . . . . . . SimpleStmt (\n[Go+ CI/Test]   |     9:  2: . . . . . . . ExpressionList (\n[Go+ CI/Test]   |     9:  2: . . . . . . . . Expression (\n[Go+ CI/Test]   |     9:  2: . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     9:  2: . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     9:  2: . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     9:  2: . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |     9:  2: . . . . . . . . . . . . . IDENT println\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: println}\n[Go+ CI/Test]   |     9:  9: . . . . . . . . . . . . )\n[Go+ CI/Test]   |     9:  9: . . . . . . . . . . . . CallOrConversion (\n[Go+ CI/Test]   |     9:  9: . . . . . . . . . . . . . \"(\"\n[Go+ CI/Test]   |     9: 10: . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |     9: 10: . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     9: 10: . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     9: 10: . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     9: 10: . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |     9: 10: . . . . . . . . . . . . . . . . . . IDENT a\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: a}\n[Go+ CI/Test]   |     9: 11: . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     9: 11: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     9: 11: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     9: 11: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     9: 11: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     9: 11: . . . . . . . . . . . . . \")\"\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1878: ast.CallExpr{Fun: println, Ellipsis: false, isCmd: false}\n[Go+ CI/Test]   |     9: 12: . . . . . . . . . . . . )\n[Go+ CI/Test]   |     9: 12: . . . . . . . . . . . )\n[Go+ CI/Test]   |     9: 12: . . . . . . . . . . )\n[Go+ CI/Test]   |     9: 12: . . . . . . . . . )\n[Go+ CI/Test]   |     9: 12: . . . . . . . . )\n[Go+ CI/Test]   |     9: 12: . . . . . . . )\n[Go+ CI/Test]   |     9: 12: . . . . . . )\n[Go+ CI/Test]   |     9: 12: . . . . . . \";\"\n[Go+ CI/Test]   |    10:  1: . . . . . )\n[Go+ CI/Test]   |    10:  1: . . . . )\n[Go+ CI/Test]   |    10:  1: . . . . \"}\"\n[Go+ CI/Test]   |    10:  2: . . . )\n[Go+ CI/Test]   |    10:  2: . . . \";\"\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:3564: ast.FuncDecl{Name: main, ...}\n[Go+ CI/Test]   |    10:  3: . . )\n[Go+ CI/Test]   |    10:  3: . )\n[Go+ CI/Test]   |    10:  3: )\n[Go+ CI/Test]   | === RUN   TestFromTestdata/spxtest\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parserdir_test.go:90: Parsing /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/_testdata/spxtest\n[Go+ CI/Test]   |     1:  1: File (\n[Go+ CI/Test]   |     1:  1: . Declaration (\n[Go+ CI/Test]   |     1:  1: . . StatementList (\n[Go+ CI/Test]   |     1:  1: . . . Statement (\n[Go+ CI/Test]   |     1:  1: . . . . SimpleStmt (\n[Go+ CI/Test]   |     1:  1: . . . . . ExpressionList (\n[Go+ CI/Test]   |     1:  1: . . . . . . Expression (\n[Go+ CI/Test]   |     1:  1: . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     1:  1: . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     1:  1: . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     1:  1: . . . . . . . . . . Operand (\n[Go+ CI/Test]   |     1:  1: . . . . . . . . . . . IDENT a\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: a}\n[Go+ CI/Test]   |     1:  3: . . . . . . . . . . )\n[Go+ CI/Test]   |     1:  3: . . . . . . . . . )\n[Go+ CI/Test]   |     1:  3: . . . . . . . . )\n[Go+ CI/Test]   |     1:  3: . . . . . . . )\n[Go+ CI/Test]   |     1:  3: . . . . . . )\n[Go+ CI/Test]   |     1:  3: . . . . . )\n[Go+ CI/Test]   |     1:  3: . . . . . \":=\"\n[Go+ CI/Test]   |     1:  6: . . . . . ExpressionList (\n[Go+ CI/Test]   |     1:  6: . . . . . . Expression (\n[Go+ CI/Test]   |     1:  6: . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     1:  6: . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     1:  6: . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     1:  6: . . . . . . . . . . Operand (\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: INT, Value: 1}\n[Go+ CI/Test]   |     1:  6: . . . . . . . . . . . INT 1\n[Go+ CI/Test]   |     1:  7: . . . . . . . . . . )\n[Go+ CI/Test]   |     1:  7: . . . . . . . . . )\n[Go+ CI/Test]   |     1:  7: . . . . . . . . )\n[Go+ CI/Test]   |     1:  7: . . . . . . . )\n[Go+ CI/Test]   |     1:  7: . . . . . . )\n[Go+ CI/Test]   |     1:  7: . . . . . )\n[Go+ CI/Test]   |     1:  7: . . . . )\n[Go+ CI/Test]   |     1:  7: . . . . \";\"\n[Go+ CI/Test]   |     1:  8: . . . )\n[Go+ CI/Test]   |     1:  8: . . )\n[Go+ CI/Test]   |     1:  8: . )\n[Go+ CI/Test]   |     1:  8: )\n[Go+ CI/Test]   | === RUN   TestFromTestdata/stdtype\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parserdir_test.go:90: Parsing /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/_testdata/stdtype\n[Go+ CI/Test]   |     1:  1: File (\n[Go+ CI/Test]   |     1:  1: . \"package\"\n[Go+ CI/Test]   |     1:  9: . IDENT bar\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: bar}\n[Go+ CI/Test]   |     1: 12: . \";\"\n[Go+ CI/Test]   |     3:  1: . GenDecl(import) (\n[Go+ CI/Test]   |     3:  1: . . \"import\"\n[Go+ CI/Test]   |     3:  8: . . ImportSpec (\n[Go+ CI/Test]   |     3:  8: . . . STRING \"io\"\n[Go+ CI/Test]   |     3: 12: . . . \";\"\n[Go+ CI/Test]   |     5:  1: . . )\n[Go+ CI/Test]   |     5:  1: . )\n[Go+ CI/Test]   |     5:  1: . Declaration (\n[Go+ CI/Test]   |     5:  1: . . StatementList (\n[Go+ CI/Test]   |     5:  1: . . . Statement (\n[Go+ CI/Test]   |     5:  1: . . . . SimpleStmt (\n[Go+ CI/Test]   |     5:  1: . . . . . ExpressionList (\n[Go+ CI/Test]   |     5:  1: . . . . . . Expression (\n[Go+ CI/Test]   |     5:  1: . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     5:  1: . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     5:  1: . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     5:  1: . . . . . . . . . . Operand (\n[Go+ CI/Test]   |     5:  1: . . . . . . . . . . . IDENT x\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: x}\n[Go+ CI/Test]   |     5:  3: . . . . . . . . . . )\n[Go+ CI/Test]   |     5:  3: . . . . . . . . . )\n[Go+ CI/Test]   |     5:  3: . . . . . . . . )\n[Go+ CI/Test]   |     5:  3: . . . . . . . )\n[Go+ CI/Test]   |     5:  3: . . . . . . )\n[Go+ CI/Test]   |     5:  3: . . . . . )\n[Go+ CI/Test]   |     5:  3: . . . . . \":=\"\n[Go+ CI/Test]   |     5:  6: . . . . . ExpressionList (\n[Go+ CI/Test]   |     5:  6: . . . . . . Expression (\n[Go+ CI/Test]   |     5:  6: . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     5:  6: . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     5:  6: . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     5:  6: . . . . . . . . . . Operand (\n[Go+ CI/Test]   |     5:  6: . . . . . . . . . . . ArrayType (\n[Go+ CI/Test]   |     5:  6: . . . . . . . . . . . . \"[\"\n[Go+ CI/Test]   |     5:  7: . . . . . . . . . . . . \"]\"\n[Go+ CI/Test]   |     5:  8: . . . . . . . . . . . . TypeName (\n[Go+ CI/Test]   |     5:  8: . . . . . . . . . . . . . IDENT float64\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: float64}\n[Go+ CI/Test]   |     5: 15: . . . . . . . . . . . . )\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:870: ast.ArrayType{Len: <nil>, Elt: float64}\n[Go+ CI/Test]   |     5: 15: . . . . . . . . . . . )\n[Go+ CI/Test]   |     5: 15: . . . . . . . . . . )\n[Go+ CI/Test]   |     5: 15: . . . . . . . . . . LiteralValue (\n[Go+ CI/Test]   |     5: 15: . . . . . . . . . . . \"{\"\n[Go+ CI/Test]   |     5: 16: . . . . . . . . . . . ElementList (\n[Go+ CI/Test]   |     5: 16: . . . . . . . . . . . . Element (\n[Go+ CI/Test]   |     5: 16: . . . . . . . . . . . . . Element (\n[Go+ CI/Test]   |     5: 16: . . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |     5: 16: . . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     5: 16: . . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     5: 16: . . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     5: 16: . . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: INT, Value: 1}\n[Go+ CI/Test]   |     5: 16: . . . . . . . . . . . . . . . . . . . INT 1\n[Go+ CI/Test]   |     5: 17: . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     5: 17: . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     5: 17: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     5: 17: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     5: 17: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     5: 17: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     5: 17: . . . . . . . . . . . . )\n[Go+ CI/Test]   |     5: 17: . . . . . . . . . . . . \",\"\n[Go+ CI/Test]   |     5: 19: . . . . . . . . . . . . Element (\n[Go+ CI/Test]   |     5: 19: . . . . . . . . . . . . . Element (\n[Go+ CI/Test]   |     5: 19: . . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |     5: 19: . . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     5: 19: . . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     5: 19: . . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     5: 19: . . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: FLOAT, Value: 3.4}\n[Go+ CI/Test]   |     5: 19: . . . . . . . . . . . . . . . . . . . FLOAT 3.4\n[Go+ CI/Test]   |     5: 22: . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     5: 22: . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     5: 22: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     5: 22: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     5: 22: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     5: 22: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     5: 22: . . . . . . . . . . . . )\n[Go+ CI/Test]   |     5: 22: . . . . . . . . . . . . \",\"\n[Go+ CI/Test]   |     5: 24: . . . . . . . . . . . . Element (\n[Go+ CI/Test]   |     5: 24: . . . . . . . . . . . . . Element (\n[Go+ CI/Test]   |     5: 24: . . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |     5: 24: . . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     5: 24: . . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     5: 24: . . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     5: 24: . . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: INT, Value: 5}\n[Go+ CI/Test]   |     5: 24: . . . . . . . . . . . . . . . . . . . INT 5\n[Go+ CI/Test]   |     5: 25: . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     5: 25: . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     5: 25: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     5: 25: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     5: 25: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     5: 25: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     5: 25: . . . . . . . . . . . . )\n[Go+ CI/Test]   |     5: 25: . . . . . . . . . . . )\n[Go+ CI/Test]   |     5: 25: . . . . . . . . . . . \"}\"\n[Go+ CI/Test]   |     5: 26: . . . . . . . . . . )\n[Go+ CI/Test]   |     5: 26: . . . . . . . . . )\n[Go+ CI/Test]   |     5: 26: . . . . . . . . )\n[Go+ CI/Test]   |     5: 26: . . . . . . . )\n[Go+ CI/Test]   |     5: 26: . . . . . . )\n[Go+ CI/Test]   |     5: 26: . . . . . )\n[Go+ CI/Test]   |     5: 26: . . . . )\n[Go+ CI/Test]   |     5: 26: . . . . \";\"\n[Go+ CI/Test]   |     6:  1: . . . )\n[Go+ CI/Test]   |     6:  1: . . . Statement (\n[Go+ CI/Test]   |     6:  1: . . . . SimpleStmt (\n[Go+ CI/Test]   |     6:  1: . . . . . ExpressionList (\n[Go+ CI/Test]   |     6:  1: . . . . . . Expression (\n[Go+ CI/Test]   |     6:  1: . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     6:  1: . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     6:  1: . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     6:  1: . . . . . . . . . . Operand (\n[Go+ CI/Test]   |     6:  1: . . . . . . . . . . . IDENT y\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: y}\n[Go+ CI/Test]   |     6:  3: . . . . . . . . . . )\n[Go+ CI/Test]   |     6:  3: . . . . . . . . . )\n[Go+ CI/Test]   |     6:  3: . . . . . . . . )\n[Go+ CI/Test]   |     6:  3: . . . . . . . )\n[Go+ CI/Test]   |     6:  3: . . . . . . )\n[Go+ CI/Test]   |     6:  3: . . . . . )\n[Go+ CI/Test]   |     6:  3: . . . . . \":=\"\n[Go+ CI/Test]   |     6:  6: . . . . . ExpressionList (\n[Go+ CI/Test]   |     6:  6: . . . . . . Expression (\n[Go+ CI/Test]   |     6:  6: . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     6:  6: . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     6:  6: . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     6:  6: . . . . . . . . . . Operand (\n[Go+ CI/Test]   |     6:  6: . . . . . . . . . . . \"map\"\n[Go+ CI/Test]   |     6:  6: . . . . . . . . . . . MapType (\n[Go+ CI/Test]   |     6:  9: . . . . . . . . . . . . \"[\"\n[Go+ CI/Test]   |     6: 10: . . . . . . . . . . . . Type (\n[Go+ CI/Test]   |     6: 10: . . . . . . . . . . . . . TypeName (\n[Go+ CI/Test]   |     6: 10: . . . . . . . . . . . . . . IDENT string\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: string}\n[Go+ CI/Test]   |     6: 16: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     6: 16: . . . . . . . . . . . . )\n[Go+ CI/Test]   |     6: 16: . . . . . . . . . . . . \"]\"\n[Go+ CI/Test]   |     6: 17: . . . . . . . . . . . . Type (\n[Go+ CI/Test]   |     6: 17: . . . . . . . . . . . . . TypeName (\n[Go+ CI/Test]   |     6: 17: . . . . . . . . . . . . . . IDENT float64\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: float64}\n[Go+ CI/Test]   |     6: 24: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     6: 24: . . . . . . . . . . . . )\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1371: ast.MapType{Key: string, Value: float64}\n[Go+ CI/Test]   |     6: 24: . . . . . . . . . . . )\n[Go+ CI/Test]   |     6: 24: . . . . . . . . . . )\n[Go+ CI/Test]   |     6: 24: . . . . . . . . . . LiteralValue (\n[Go+ CI/Test]   |     6: 24: . . . . . . . . . . . \"{\"\n[Go+ CI/Test]   |     6: 25: . . . . . . . . . . . ElementList (\n[Go+ CI/Test]   |     6: 25: . . . . . . . . . . . . Element (\n[Go+ CI/Test]   |     6: 25: . . . . . . . . . . . . . Element (\n[Go+ CI/Test]   |     6: 25: . . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |     6: 25: . . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     6: 25: . . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     6: 25: . . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     6: 25: . . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: STRING, Value: \"Hello\"}\n[Go+ CI/Test]   |     6: 25: . . . . . . . . . . . . . . . . . . . STRING \"Hello\"\n[Go+ CI/Test]   |     6: 32: . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     6: 32: . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     6: 32: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     6: 32: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     6: 32: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     6: 32: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     6: 32: . . . . . . . . . . . . . \":\"\n[Go+ CI/Test]   |     6: 34: . . . . . . . . . . . . . Element (\n[Go+ CI/Test]   |     6: 34: . . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |     6: 34: . . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     6: 34: . . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     6: 34: . . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     6: 34: . . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: INT, Value: 1}\n[Go+ CI/Test]   |     6: 34: . . . . . . . . . . . . . . . . . . . INT 1\n[Go+ CI/Test]   |     6: 35: . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     6: 35: . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     6: 35: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     6: 35: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     6: 35: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     6: 35: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     6: 35: . . . . . . . . . . . . )\n[Go+ CI/Test]   |     6: 35: . . . . . . . . . . . . \",\"\n[Go+ CI/Test]   |     6: 37: . . . . . . . . . . . . Element (\n[Go+ CI/Test]   |     6: 37: . . . . . . . . . . . . . Element (\n[Go+ CI/Test]   |     6: 37: . . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |     6: 37: . . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     6: 37: . . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     6: 37: . . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     6: 37: . . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: STRING, Value: \"xsw\"}\n[Go+ CI/Test]   |     6: 37: . . . . . . . . . . . . . . . . . . . STRING \"xsw\"\n[Go+ CI/Test]   |     6: 42: . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     6: 42: . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     6: 42: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     6: 42: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     6: 42: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     6: 42: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     6: 42: . . . . . . . . . . . . . \":\"\n[Go+ CI/Test]   |     6: 44: . . . . . . . . . . . . . Element (\n[Go+ CI/Test]   |     6: 44: . . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |     6: 44: . . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     6: 44: . . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     6: 44: . . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     6: 44: . . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: FLOAT, Value: 3.4}\n[Go+ CI/Test]   |     6: 44: . . . . . . . . . . . . . . . . . . . FLOAT 3.4\n[Go+ CI/Test]   |     6: 47: . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     6: 47: . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     6: 47: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     6: 47: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     6: 47: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     6: 47: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     6: 47: . . . . . . . . . . . . )\n[Go+ CI/Test]   |     6: 47: . . . . . . . . . . . )\n[Go+ CI/Test]   |     6: 47: . . . . . . . . . . . \"}\"\n[Go+ CI/Test]   |     6: 48: . . . . . . . . . . )\n[Go+ CI/Test]   |     6: 48: . . . . . . . . . )\n[Go+ CI/Test]   |     6: 48: . . . . . . . . )\n[Go+ CI/Test]   |     6: 48: . . . . . . . )\n[Go+ CI/Test]   |     6: 48: . . . . . . )\n[Go+ CI/Test]   |     6: 48: . . . . . )\n[Go+ CI/Test]   |     6: 48: . . . . )\n[Go+ CI/Test]   |     6: 48: . . . . \";\"\n[Go+ CI/Test]   |     7:  1: . . . )\n[Go+ CI/Test]   |     7:  1: . . . Statement (\n[Go+ CI/Test]   |     7:  1: . . . . SimpleStmt (\n[Go+ CI/Test]   |     7:  1: . . . . . ExpressionList (\n[Go+ CI/Test]   |     7:  1: . . . . . . Expression (\n[Go+ CI/Test]   |     7:  1: . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     7:  1: . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     7:  1: . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     7:  1: . . . . . . . . . . Operand (\n[Go+ CI/Test]   |     7:  1: . . . . . . . . . . . IDENT println\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: println}\n[Go+ CI/Test]   |     7:  8: . . . . . . . . . . )\n[Go+ CI/Test]   |     7:  8: . . . . . . . . . . CallOrConversion (\n[Go+ CI/Test]   |     7:  8: . . . . . . . . . . . \"(\"\n[Go+ CI/Test]   |     7:  9: . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |     7:  9: . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     7:  9: . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     7:  9: . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     7:  9: . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: STRING, Value: \"x:\"}\n[Go+ CI/Test]   |     7:  9: . . . . . . . . . . . . . . . . STRING \"x:\"\n[Go+ CI/Test]   |     7: 13: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     7: 13: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     7: 13: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     7: 13: . . . . . . . . . . . . )\n[Go+ CI/Test]   |     7: 13: . . . . . . . . . . . )\n[Go+ CI/Test]   |     7: 13: . . . . . . . . . . . \",\"\n[Go+ CI/Test]   |     7: 15: . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |     7: 15: . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     7: 15: . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     7: 15: . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     7: 15: . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |     7: 15: . . . . . . . . . . . . . . . . IDENT x\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: x}\n[Go+ CI/Test]   |     7: 16: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     7: 16: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     7: 16: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     7: 16: . . . . . . . . . . . . )\n[Go+ CI/Test]   |     7: 16: . . . . . . . . . . . )\n[Go+ CI/Test]   |     7: 16: . . . . . . . . . . . \",\"\n[Go+ CI/Test]   |     7: 18: . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |     7: 18: . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     7: 18: . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     7: 18: . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     7: 18: . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: STRING, Value: \"y:\"}\n[Go+ CI/Test]   |     7: 18: . . . . . . . . . . . . . . . . STRING \"y:\"\n[Go+ CI/Test]   |     7: 22: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     7: 22: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     7: 22: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     7: 22: . . . . . . . . . . . . )\n[Go+ CI/Test]   |     7: 22: . . . . . . . . . . . )\n[Go+ CI/Test]   |     7: 22: . . . . . . . . . . . \",\"\n[Go+ CI/Test]   |     7: 24: . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |     7: 24: . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     7: 24: . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     7: 24: . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     7: 24: . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |     7: 24: . . . . . . . . . . . . . . . . IDENT y\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: y}\n[Go+ CI/Test]   |     7: 25: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     7: 25: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     7: 25: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     7: 25: . . . . . . . . . . . . )\n[Go+ CI/Test]   |     7: 25: . . . . . . . . . . . )\n[Go+ CI/Test]   |     7: 25: . . . . . . . . . . . \")\"\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1878: ast.CallExpr{Fun: println, Ellipsis: false, isCmd: false}\n[Go+ CI/Test]   |     7: 26: . . . . . . . . . . )\n[Go+ CI/Test]   |     7: 26: . . . . . . . . . )\n[Go+ CI/Test]   |     7: 26: . . . . . . . . )\n[Go+ CI/Test]   |     7: 26: . . . . . . . )\n[Go+ CI/Test]   |     7: 26: . . . . . . )\n[Go+ CI/Test]   |     7: 26: . . . . . )\n[Go+ CI/Test]   |     7: 26: . . . . )\n[Go+ CI/Test]   |     7: 26: . . . . \";\"\n[Go+ CI/Test]   |     9:  1: . . . )\n[Go+ CI/Test]   |     9:  1: . . . Statement (\n[Go+ CI/Test]   |     9:  1: . . . . SimpleStmt (\n[Go+ CI/Test]   |     9:  1: . . . . . ExpressionList (\n[Go+ CI/Test]   |     9:  1: . . . . . . Expression (\n[Go+ CI/Test]   |     9:  1: . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     9:  1: . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     9:  1: . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     9:  1: . . . . . . . . . . Operand (\n[Go+ CI/Test]   |     9:  1: . . . . . . . . . . . IDENT a\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: a}\n[Go+ CI/Test]   |     9:  3: . . . . . . . . . . )\n[Go+ CI/Test]   |     9:  3: . . . . . . . . . )\n[Go+ CI/Test]   |     9:  3: . . . . . . . . )\n[Go+ CI/Test]   |     9:  3: . . . . . . . )\n[Go+ CI/Test]   |     9:  3: . . . . . . )\n[Go+ CI/Test]   |     9:  3: . . . . . )\n[Go+ CI/Test]   |     9:  3: . . . . . \":=\"\n[Go+ CI/Test]   |     9:  6: . . . . . ExpressionList (\n[Go+ CI/Test]   |     9:  6: . . . . . . Expression (\n[Go+ CI/Test]   |     9:  6: . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     9:  6: . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     9:  6: . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     9:  6: . . . . . . . . . . Operand (\n[Go+ CI/Test]   |     9:  6: . . . . . . . . . . . ArrayType (\n[Go+ CI/Test]   |     9:  6: . . . . . . . . . . . . \"[\"\n[Go+ CI/Test]   |     9:  7: . . . . . . . . . . . . \"...\"\n[Go+ CI/Test]   |     9: 10: . . . . . . . . . . . . \"]\"\n[Go+ CI/Test]   |     9: 11: . . . . . . . . . . . . TypeName (\n[Go+ CI/Test]   |     9: 11: . . . . . . . . . . . . . IDENT float64\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: float64}\n[Go+ CI/Test]   |     9: 18: . . . . . . . . . . . . )\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:870: ast.ArrayType{Len: &{134 <nil>}, Elt: float64}\n[Go+ CI/Test]   |     9: 18: . . . . . . . . . . . )\n[Go+ CI/Test]   |     9: 18: . . . . . . . . . . )\n[Go+ CI/Test]   |     9: 18: . . . . . . . . . . LiteralValue (\n[Go+ CI/Test]   |     9: 18: . . . . . . . . . . . \"{\"\n[Go+ CI/Test]   |     9: 19: . . . . . . . . . . . ElementList (\n[Go+ CI/Test]   |     9: 19: . . . . . . . . . . . . Element (\n[Go+ CI/Test]   |     9: 19: . . . . . . . . . . . . . Element (\n[Go+ CI/Test]   |     9: 19: . . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |     9: 19: . . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     9: 19: . . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     9: 19: . . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     9: 19: . . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: INT, Value: 1}\n[Go+ CI/Test]   |     9: 19: . . . . . . . . . . . . . . . . . . . INT 1\n[Go+ CI/Test]   |     9: 20: . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     9: 20: . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     9: 20: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     9: 20: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     9: 20: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     9: 20: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     9: 20: . . . . . . . . . . . . )\n[Go+ CI/Test]   |     9: 20: . . . . . . . . . . . . \",\"\n[Go+ CI/Test]   |     9: 22: . . . . . . . . . . . . Element (\n[Go+ CI/Test]   |     9: 22: . . . . . . . . . . . . . Element (\n[Go+ CI/Test]   |     9: 22: . . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |     9: 22: . . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     9: 22: . . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     9: 22: . . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     9: 22: . . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: FLOAT, Value: 3.4}\n[Go+ CI/Test]   |     9: 22: . . . . . . . . . . . . . . . . . . . FLOAT 3.4\n[Go+ CI/Test]   |     9: 25: . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     9: 25: . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     9: 25: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     9: 25: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     9: 25: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     9: 25: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     9: 25: . . . . . . . . . . . . )\n[Go+ CI/Test]   |     9: 25: . . . . . . . . . . . . \",\"\n[Go+ CI/Test]   |     9: 27: . . . . . . . . . . . . Element (\n[Go+ CI/Test]   |     9: 27: . . . . . . . . . . . . . Element (\n[Go+ CI/Test]   |     9: 27: . . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |     9: 27: . . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     9: 27: . . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     9: 27: . . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     9: 27: . . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: INT, Value: 5}\n[Go+ CI/Test]   |     9: 27: . . . . . . . . . . . . . . . . . . . INT 5\n[Go+ CI/Test]   |     9: 28: . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     9: 28: . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     9: 28: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     9: 28: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     9: 28: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     9: 28: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     9: 28: . . . . . . . . . . . . )\n[Go+ CI/Test]   |     9: 28: . . . . . . . . . . . )\n[Go+ CI/Test]   |     9: 28: . . . . . . . . . . . \"}\"\n[Go+ CI/Test]   |     9: 29: . . . . . . . . . . )\n[Go+ CI/Test]   |     9: 29: . . . . . . . . . )\n[Go+ CI/Test]   |     9: 29: . . . . . . . . )\n[Go+ CI/Test]   |     9: 29: . . . . . . . )\n[Go+ CI/Test]   |     9: 29: . . . . . . )\n[Go+ CI/Test]   |     9: 29: . . . . . )\n[Go+ CI/Test]   |     9: 29: . . . . )\n[Go+ CI/Test]   |     9: 29: . . . . \";\"\n[Go+ CI/Test]   |    10:  1: . . . )\n[Go+ CI/Test]   |    10:  1: . . . Statement (\n[Go+ CI/Test]   |    10:  1: . . . . SimpleStmt (\n[Go+ CI/Test]   |    10:  1: . . . . . ExpressionList (\n[Go+ CI/Test]   |    10:  1: . . . . . . Expression (\n[Go+ CI/Test]   |    10:  1: . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    10:  1: . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    10:  1: . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    10:  1: . . . . . . . . . . Operand (\n[Go+ CI/Test]   |    10:  1: . . . . . . . . . . . IDENT b\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: b}\n[Go+ CI/Test]   |    10:  3: . . . . . . . . . . )\n[Go+ CI/Test]   |    10:  3: . . . . . . . . . )\n[Go+ CI/Test]   |    10:  3: . . . . . . . . )\n[Go+ CI/Test]   |    10:  3: . . . . . . . )\n[Go+ CI/Test]   |    10:  3: . . . . . . )\n[Go+ CI/Test]   |    10:  3: . . . . . )\n[Go+ CI/Test]   |    10:  3: . . . . . \":=\"\n[Go+ CI/Test]   |    10:  6: . . . . . ExpressionList (\n[Go+ CI/Test]   |    10:  6: . . . . . . Expression (\n[Go+ CI/Test]   |    10:  6: . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    10:  6: . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    10:  6: . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    10:  6: . . . . . . . . . . Operand (\n[Go+ CI/Test]   |    10:  6: . . . . . . . . . . . ArrayType (\n[Go+ CI/Test]   |    10:  6: . . . . . . . . . . . . \"[\"\n[Go+ CI/Test]   |    10:  7: . . . . . . . . . . . . \"...\"\n[Go+ CI/Test]   |    10: 10: . . . . . . . . . . . . \"]\"\n[Go+ CI/Test]   |    10: 11: . . . . . . . . . . . . TypeName (\n[Go+ CI/Test]   |    10: 11: . . . . . . . . . . . . . IDENT float64\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: float64}\n[Go+ CI/Test]   |    10: 18: . . . . . . . . . . . . )\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:870: ast.ArrayType{Len: &{163 <nil>}, Elt: float64}\n[Go+ CI/Test]   |    10: 18: . . . . . . . . . . . )\n[Go+ CI/Test]   |    10: 18: . . . . . . . . . . )\n[Go+ CI/Test]   |    10: 18: . . . . . . . . . . LiteralValue (\n[Go+ CI/Test]   |    10: 18: . . . . . . . . . . . \"{\"\n[Go+ CI/Test]   |    10: 19: . . . . . . . . . . . ElementList (\n[Go+ CI/Test]   |    10: 19: . . . . . . . . . . . . Element (\n[Go+ CI/Test]   |    10: 19: . . . . . . . . . . . . . Element (\n[Go+ CI/Test]   |    10: 19: . . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |    10: 19: . . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    10: 19: . . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    10: 19: . . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    10: 19: . . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: INT, Value: 1}\n[Go+ CI/Test]   |    10: 19: . . . . . . . . . . . . . . . . . . . INT 1\n[Go+ CI/Test]   |    10: 20: . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    10: 20: . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    10: 20: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    10: 20: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    10: 20: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    10: 20: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    10: 20: . . . . . . . . . . . . )\n[Go+ CI/Test]   |    10: 20: . . . . . . . . . . . . \",\"\n[Go+ CI/Test]   |    10: 22: . . . . . . . . . . . . Element (\n[Go+ CI/Test]   |    10: 22: . . . . . . . . . . . . . Element (\n[Go+ CI/Test]   |    10: 22: . . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |    10: 22: . . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    10: 22: . . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    10: 22: . . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    10: 22: . . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: INT, Value: 3}\n[Go+ CI/Test]   |    10: 22: . . . . . . . . . . . . . . . . . . . INT 3\n[Go+ CI/Test]   |    10: 23: . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    10: 23: . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    10: 23: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    10: 23: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    10: 23: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    10: 23: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    10: 23: . . . . . . . . . . . . . \":\"\n[Go+ CI/Test]   |    10: 25: . . . . . . . . . . . . . Element (\n[Go+ CI/Test]   |    10: 25: . . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |    10: 25: . . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    10: 25: . . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    10: 25: . . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    10: 25: . . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: FLOAT, Value: 3.4}\n[Go+ CI/Test]   |    10: 25: . . . . . . . . . . . . . . . . . . . FLOAT 3.4\n[Go+ CI/Test]   |    10: 28: . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    10: 28: . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    10: 28: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    10: 28: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    10: 28: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    10: 28: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    10: 28: . . . . . . . . . . . . )\n[Go+ CI/Test]   |    10: 28: . . . . . . . . . . . . \",\"\n[Go+ CI/Test]   |    10: 30: . . . . . . . . . . . . Element (\n[Go+ CI/Test]   |    10: 30: . . . . . . . . . . . . . Element (\n[Go+ CI/Test]   |    10: 30: . . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |    10: 30: . . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    10: 30: . . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    10: 30: . . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    10: 30: . . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: INT, Value: 5}\n[Go+ CI/Test]   |    10: 30: . . . . . . . . . . . . . . . . . . . INT 5\n[Go+ CI/Test]   |    10: 31: . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    10: 31: . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    10: 31: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    10: 31: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    10: 31: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    10: 31: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    10: 31: . . . . . . . . . . . . )\n[Go+ CI/Test]   |    10: 31: . . . . . . . . . . . )\n[Go+ CI/Test]   |    10: 31: . . . . . . . . . . . \"}\"\n[Go+ CI/Test]   |    10: 32: . . . . . . . . . . )\n[Go+ CI/Test]   |    10: 32: . . . . . . . . . )\n[Go+ CI/Test]   |    10: 32: . . . . . . . . )\n[Go+ CI/Test]   |    10: 32: . . . . . . . )\n[Go+ CI/Test]   |    10: 32: . . . . . . )\n[Go+ CI/Test]   |    10: 32: . . . . . )\n[Go+ CI/Test]   |    10: 32: . . . . )\n[Go+ CI/Test]   |    10: 32: . . . . \";\"\n[Go+ CI/Test]   |    11:  1: . . . )\n[Go+ CI/Test]   |    11:  1: . . . Statement (\n[Go+ CI/Test]   |    11:  1: . . . . SimpleStmt (\n[Go+ CI/Test]   |    11:  1: . . . . . ExpressionList (\n[Go+ CI/Test]   |    11:  1: . . . . . . Expression (\n[Go+ CI/Test]   |    11:  1: . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    11:  1: . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    11:  1: . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    11:  1: . . . . . . . . . . Operand (\n[Go+ CI/Test]   |    11:  1: . . . . . . . . . . . IDENT c\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: c}\n[Go+ CI/Test]   |    11:  3: . . . . . . . . . . )\n[Go+ CI/Test]   |    11:  3: . . . . . . . . . )\n[Go+ CI/Test]   |    11:  3: . . . . . . . . )\n[Go+ CI/Test]   |    11:  3: . . . . . . . )\n[Go+ CI/Test]   |    11:  3: . . . . . . )\n[Go+ CI/Test]   |    11:  3: . . . . . )\n[Go+ CI/Test]   |    11:  3: . . . . . \":=\"\n[Go+ CI/Test]   |    11:  6: . . . . . ExpressionList (\n[Go+ CI/Test]   |    11:  6: . . . . . . Expression (\n[Go+ CI/Test]   |    11:  6: . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    11:  6: . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    11:  6: . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    11:  6: . . . . . . . . . . Operand (\n[Go+ CI/Test]   |    11:  6: . . . . . . . . . . . ArrayType (\n[Go+ CI/Test]   |    11:  6: . . . . . . . . . . . . \"[\"\n[Go+ CI/Test]   |    11:  7: . . . . . . . . . . . . \"]\"\n[Go+ CI/Test]   |    11:  8: . . . . . . . . . . . . TypeName (\n[Go+ CI/Test]   |    11:  8: . . . . . . . . . . . . . IDENT float64\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: float64}\n[Go+ CI/Test]   |    11: 15: . . . . . . . . . . . . )\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:870: ast.ArrayType{Len: <nil>, Elt: float64}\n[Go+ CI/Test]   |    11: 15: . . . . . . . . . . . )\n[Go+ CI/Test]   |    11: 15: . . . . . . . . . . )\n[Go+ CI/Test]   |    11: 15: . . . . . . . . . . LiteralValue (\n[Go+ CI/Test]   |    11: 15: . . . . . . . . . . . \"{\"\n[Go+ CI/Test]   |    11: 16: . . . . . . . . . . . ElementList (\n[Go+ CI/Test]   |    11: 16: . . . . . . . . . . . . Element (\n[Go+ CI/Test]   |    11: 16: . . . . . . . . . . . . . Element (\n[Go+ CI/Test]   |    11: 16: . . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |    11: 16: . . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    11: 16: . . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    11: 16: . . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    11: 16: . . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: INT, Value: 2}\n[Go+ CI/Test]   |    11: 16: . . . . . . . . . . . . . . . . . . . INT 2\n[Go+ CI/Test]   |    11: 17: . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    11: 17: . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    11: 17: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    11: 17: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    11: 17: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    11: 17: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    11: 17: . . . . . . . . . . . . . \":\"\n[Go+ CI/Test]   |    11: 19: . . . . . . . . . . . . . Element (\n[Go+ CI/Test]   |    11: 19: . . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |    11: 19: . . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    11: 19: . . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    11: 19: . . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    11: 19: . . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: FLOAT, Value: 1.2}\n[Go+ CI/Test]   |    11: 19: . . . . . . . . . . . . . . . . . . . FLOAT 1.2\n[Go+ CI/Test]   |    11: 22: . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    11: 22: . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    11: 22: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    11: 22: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    11: 22: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    11: 22: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    11: 22: . . . . . . . . . . . . )\n[Go+ CI/Test]   |    11: 22: . . . . . . . . . . . . \",\"\n[Go+ CI/Test]   |    11: 24: . . . . . . . . . . . . Element (\n[Go+ CI/Test]   |    11: 24: . . . . . . . . . . . . . Element (\n[Go+ CI/Test]   |    11: 24: . . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |    11: 24: . . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    11: 24: . . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    11: 24: . . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    11: 24: . . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: INT, Value: 3}\n[Go+ CI/Test]   |    11: 24: . . . . . . . . . . . . . . . . . . . INT 3\n[Go+ CI/Test]   |    11: 25: . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    11: 25: . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    11: 25: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    11: 25: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    11: 25: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    11: 25: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    11: 25: . . . . . . . . . . . . )\n[Go+ CI/Test]   |    11: 25: . . . . . . . . . . . . \",\"\n[Go+ CI/Test]   |    11: 27: . . . . . . . . . . . . Element (\n[Go+ CI/Test]   |    11: 27: . . . . . . . . . . . . . Element (\n[Go+ CI/Test]   |    11: 27: . . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |    11: 27: . . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    11: 27: . . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    11: 27: . . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    11: 27: . . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: INT, Value: 6}\n[Go+ CI/Test]   |    11: 27: . . . . . . . . . . . . . . . . . . . INT 6\n[Go+ CI/Test]   |    11: 28: . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    11: 28: . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    11: 28: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    11: 28: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    11: 28: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    11: 28: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    11: 28: . . . . . . . . . . . . . \":\"\n[Go+ CI/Test]   |    11: 30: . . . . . . . . . . . . . Element (\n[Go+ CI/Test]   |    11: 30: . . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |    11: 30: . . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    11: 30: . . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    11: 30: . . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    11: 30: . . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: FLOAT, Value: 4.5}\n[Go+ CI/Test]   |    11: 30: . . . . . . . . . . . . . . . . . . . FLOAT 4.5\n[Go+ CI/Test]   |    11: 33: . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    11: 33: . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    11: 33: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    11: 33: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    11: 33: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    11: 33: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    11: 33: . . . . . . . . . . . . )\n[Go+ CI/Test]   |    11: 33: . . . . . . . . . . . )\n[Go+ CI/Test]   |    11: 33: . . . . . . . . . . . \"}\"\n[Go+ CI/Test]   |    11: 34: . . . . . . . . . . )\n[Go+ CI/Test]   |    11: 34: . . . . . . . . . )\n[Go+ CI/Test]   |    11: 34: . . . . . . . . )\n[Go+ CI/Test]   |    11: 34: . . . . . . . )\n[Go+ CI/Test]   |    11: 34: . . . . . . )\n[Go+ CI/Test]   |    11: 34: . . . . . )\n[Go+ CI/Test]   |    11: 34: . . . . )\n[Go+ CI/Test]   |    11: 34: . . . . \";\"\n[Go+ CI/Test]   |    12:  1: . . . )\n[Go+ CI/Test]   |    12:  1: . . . Statement (\n[Go+ CI/Test]   |    12:  1: . . . . SimpleStmt (\n[Go+ CI/Test]   |    12:  1: . . . . . ExpressionList (\n[Go+ CI/Test]   |    12:  1: . . . . . . Expression (\n[Go+ CI/Test]   |    12:  1: . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    12:  1: . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    12:  1: . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    12:  1: . . . . . . . . . . Operand (\n[Go+ CI/Test]   |    12:  1: . . . . . . . . . . . IDENT println\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: println}\n[Go+ CI/Test]   |    12:  8: . . . . . . . . . . )\n[Go+ CI/Test]   |    12:  8: . . . . . . . . . . CallOrConversion (\n[Go+ CI/Test]   |    12:  8: . . . . . . . . . . . \"(\"\n[Go+ CI/Test]   |    12:  9: . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |    12:  9: . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    12:  9: . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    12:  9: . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    12:  9: . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: STRING, Value: \"a:\"}\n[Go+ CI/Test]   |    12:  9: . . . . . . . . . . . . . . . . STRING \"a:\"\n[Go+ CI/Test]   |    12: 13: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    12: 13: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    12: 13: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    12: 13: . . . . . . . . . . . . )\n[Go+ CI/Test]   |    12: 13: . . . . . . . . . . . )\n[Go+ CI/Test]   |    12: 13: . . . . . . . . . . . \",\"\n[Go+ CI/Test]   |    12: 15: . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |    12: 15: . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    12: 15: . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    12: 15: . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    12: 15: . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |    12: 15: . . . . . . . . . . . . . . . . IDENT a\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: a}\n[Go+ CI/Test]   |    12: 16: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    12: 16: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    12: 16: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    12: 16: . . . . . . . . . . . . )\n[Go+ CI/Test]   |    12: 16: . . . . . . . . . . . )\n[Go+ CI/Test]   |    12: 16: . . . . . . . . . . . \",\"\n[Go+ CI/Test]   |    12: 18: . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |    12: 18: . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    12: 18: . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    12: 18: . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    12: 18: . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: STRING, Value: \"b:\"}\n[Go+ CI/Test]   |    12: 18: . . . . . . . . . . . . . . . . STRING \"b:\"\n[Go+ CI/Test]   |    12: 22: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    12: 22: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    12: 22: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    12: 22: . . . . . . . . . . . . )\n[Go+ CI/Test]   |    12: 22: . . . . . . . . . . . )\n[Go+ CI/Test]   |    12: 22: . . . . . . . . . . . \",\"\n[Go+ CI/Test]   |    12: 24: . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |    12: 24: . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    12: 24: . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    12: 24: . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    12: 24: . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |    12: 24: . . . . . . . . . . . . . . . . IDENT b\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: b}\n[Go+ CI/Test]   |    12: 25: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    12: 25: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    12: 25: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    12: 25: . . . . . . . . . . . . )\n[Go+ CI/Test]   |    12: 25: . . . . . . . . . . . )\n[Go+ CI/Test]   |    12: 25: . . . . . . . . . . . \",\"\n[Go+ CI/Test]   |    12: 27: . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |    12: 27: . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    12: 27: . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    12: 27: . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    12: 27: . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: STRING, Value: \"c:\"}\n[Go+ CI/Test]   |    12: 27: . . . . . . . . . . . . . . . . STRING \"c:\"\n[Go+ CI/Test]   |    12: 31: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    12: 31: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    12: 31: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    12: 31: . . . . . . . . . . . . )\n[Go+ CI/Test]   |    12: 31: . . . . . . . . . . . )\n[Go+ CI/Test]   |    12: 31: . . . . . . . . . . . \",\"\n[Go+ CI/Test]   |    12: 33: . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |    12: 33: . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |    12: 33: . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |    12: 33: . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |    12: 33: . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |    12: 33: . . . . . . . . . . . . . . . . IDENT c\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: c}\n[Go+ CI/Test]   |    12: 34: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    12: 34: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    12: 34: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |    12: 34: . . . . . . . . . . . . )\n[Go+ CI/Test]   |    12: 34: . . . . . . . . . . . )\n[Go+ CI/Test]   |    12: 34: . . . . . . . . . . . \")\"\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1878: ast.CallExpr{Fun: println, Ellipsis: false, isCmd: false}\n[Go+ CI/Test]   |    12: 35: . . . . . . . . . . )\n[Go+ CI/Test]   |    12: 35: . . . . . . . . . )\n[Go+ CI/Test]   |    12: 35: . . . . . . . . )\n[Go+ CI/Test]   |    12: 35: . . . . . . . )\n[Go+ CI/Test]   |    12: 35: . . . . . . )\n[Go+ CI/Test]   |    12: 35: . . . . . )\n[Go+ CI/Test]   |    12: 35: . . . . )\n[Go+ CI/Test]   |    12: 35: . . . . \";\"\n[Go+ CI/Test]   |    12: 36: . . . )\n[Go+ CI/Test]   |    12: 36: . . )\n[Go+ CI/Test]   |    12: 36: . )\n[Go+ CI/Test]   |    12: 36: )\n[Go+ CI/Test]   | === RUN   TestFromTestdata/typeswitch\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parserdir_test.go:90: Parsing /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/_testdata/typeswitch\n[Go+ CI/Test]   |     1:  1: File (\n[Go+ CI/Test]   |     1:  1: . Declaration (\n[Go+ CI/Test]   |     1:  1: . . FunctionDecl (\n[Go+ CI/Test]   |     1:  1: . . . \"func\"\n[Go+ CI/Test]   |     1:  6: . . . IDENT add\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: add}\n[Go+ CI/Test]   |     1:  9: . . . Signature (\n[Go+ CI/Test]   |     1:  9: . . . . Parameters (\n[Go+ CI/Test]   |     1:  9: . . . . . \"(\"\n[Go+ CI/Test]   |     1: 10: . . . . . ParameterList (\n[Go+ CI/Test]   |     1: 10: . . . . . . ParamDeclOrNil (\n[Go+ CI/Test]   |     1: 10: . . . . . . . IDENT v\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: v}\n[Go+ CI/Test]   |     1: 12: . . . . . . . Type (\n[Go+ CI/Test]   |     1: 12: . . . . . . . . InterfaceType (\n[Go+ CI/Test]   |     1: 12: . . . . . . . . . \"interface\"\n[Go+ CI/Test]   |     1: 21: . . . . . . . . . \"{\"\n[Go+ CI/Test]   |     1: 22: . . . . . . . . . \"}\"\n[Go+ CI/Test]   |     1: 23: . . . . . . . . )\n[Go+ CI/Test]   |     1: 23: . . . . . . . )\n[Go+ CI/Test]   |     1: 23: . . . . . . )\n[Go+ CI/Test]   |     1: 23: . . . . . )\n[Go+ CI/Test]   |     1: 23: . . . . . \")\"\n[Go+ CI/Test]   |     1: 25: . . . . )\n[Go+ CI/Test]   |     1: 25: . . . . Result (\n[Go+ CI/Test]   |     1: 25: . . . . )\n[Go+ CI/Test]   |     1: 25: . . . )\n[Go+ CI/Test]   |     1: 25: . . . Body (\n[Go+ CI/Test]   |     1: 25: . . . . \"{\"\n[Go+ CI/Test]   |     2:  2: . . . . StatementList (\n[Go+ CI/Test]   |     2:  2: . . . . . Statement (\n[Go+ CI/Test]   |     2:  2: . . . . . . SwitchStmt (\n[Go+ CI/Test]   |     2:  2: . . . . . . . \"switch\"\n[Go+ CI/Test]   |     2:  9: . . . . . . . SimpleStmt (\n[Go+ CI/Test]   |     2:  9: . . . . . . . . ExpressionList (\n[Go+ CI/Test]   |     2:  9: . . . . . . . . . Expression (\n[Go+ CI/Test]   |     2:  9: . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     2:  9: . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     2:  9: . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     2:  9: . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |     2:  9: . . . . . . . . . . . . . . IDENT a\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: a}\n[Go+ CI/Test]   |     2: 11: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 11: . . . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 11: . . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 11: . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 11: . . . . . . . . . )\n[Go+ CI/Test]   |     2: 11: . . . . . . . . )\n[Go+ CI/Test]   |     2: 11: . . . . . . . . \":=\"\n[Go+ CI/Test]   |     2: 14: . . . . . . . . ExpressionList (\n[Go+ CI/Test]   |     2: 14: . . . . . . . . . Expression (\n[Go+ CI/Test]   |     2: 14: . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     2: 14: . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     2: 14: . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     2: 14: . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |     2: 14: . . . . . . . . . . . . . . IDENT v\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: v}\n[Go+ CI/Test]   |     2: 15: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 15: . . . . . . . . . . . . . \".\"\n[Go+ CI/Test]   |     2: 16: . . . . . . . . . . . . . TypeAssertion (\n[Go+ CI/Test]   |     2: 16: . . . . . . . . . . . . . . \"(\"\n[Go+ CI/Test]   |     2: 17: . . . . . . . . . . . . . . \"type\"\n[Go+ CI/Test]   |     2: 21: . . . . . . . . . . . . . . \")\"\n[Go+ CI/Test]   |     2: 23: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 23: . . . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 23: . . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 23: . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 23: . . . . . . . . . )\n[Go+ CI/Test]   |     2: 23: . . . . . . . . )\n[Go+ CI/Test]   |     2: 23: . . . . . . . )\n[Go+ CI/Test]   |     2: 23: . . . . . . . \"{\"\n[Go+ CI/Test]   |     3:  2: . . . . . . . CaseClause (\n[Go+ CI/Test]   |     3:  2: . . . . . . . . \"case\"\n[Go+ CI/Test]   |     3:  7: . . . . . . . . TypeList (\n[Go+ CI/Test]   |     3:  7: . . . . . . . . . Type (\n[Go+ CI/Test]   |     3:  7: . . . . . . . . . . TypeName (\n[Go+ CI/Test]   |     3:  7: . . . . . . . . . . . IDENT int\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: int}\n[Go+ CI/Test]   |     3: 10: . . . . . . . . . . )\n[Go+ CI/Test]   |     3: 10: . . . . . . . . . )\n[Go+ CI/Test]   |     3: 10: . . . . . . . . . \",\"\n[Go+ CI/Test]   |     3: 12: . . . . . . . . . Type (\n[Go+ CI/Test]   |     3: 12: . . . . . . . . . . InterfaceType (\n[Go+ CI/Test]   |     3: 12: . . . . . . . . . . . \"interface\"\n[Go+ CI/Test]   |     3: 21: . . . . . . . . . . . \"{\"\n[Go+ CI/Test]   |     3: 23: . . . . . . . . . . . MethodSpec (\n[Go+ CI/Test]   |     3: 23: . . . . . . . . . . . . TypeName (\n[Go+ CI/Test]   |     3: 23: . . . . . . . . . . . . . IDENT Foo\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: Foo}\n[Go+ CI/Test]   |     3: 26: . . . . . . . . . . . . )\n[Go+ CI/Test]   |     3: 26: . . . . . . . . . . . . Signature (\n[Go+ CI/Test]   |     3: 26: . . . . . . . . . . . . . Parameters (\n[Go+ CI/Test]   |     3: 26: . . . . . . . . . . . . . . \"(\"\n[Go+ CI/Test]   |     3: 27: . . . . . . . . . . . . . . \")\"\n[Go+ CI/Test]   |     3: 29: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     3: 29: . . . . . . . . . . . . . Result (\n[Go+ CI/Test]   |     3: 29: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     3: 29: . . . . . . . . . . . . )\n[Go+ CI/Test]   |     3: 29: . . . . . . . . . . . )\n[Go+ CI/Test]   |     3: 29: . . . . . . . . . . . \"}\"\n[Go+ CI/Test]   |     3: 30: . . . . . . . . . . )\n[Go+ CI/Test]   |     3: 30: . . . . . . . . . )\n[Go+ CI/Test]   |     3: 30: . . . . . . . . )\n[Go+ CI/Test]   |     3: 30: . . . . . . . . \":\"\n[Go+ CI/Test]   |     4:  2: . . . . . . . . StatementList (\n[Go+ CI/Test]   |     4:  2: . . . . . . . . )\n[Go+ CI/Test]   |     4:  2: . . . . . . . )\n[Go+ CI/Test]   |     4:  2: . . . . . . . CaseClause (\n[Go+ CI/Test]   |     4:  2: . . . . . . . . \"case\"\n[Go+ CI/Test]   |     4:  7: . . . . . . . . TypeList (\n[Go+ CI/Test]   |     4:  7: . . . . . . . . . Type (\n[Go+ CI/Test]   |     4:  7: . . . . . . . . . . PointerType (\n[Go+ CI/Test]   |     4:  7: . . . . . . . . . . . \"*\"\n[Go+ CI/Test]   |     4:  8: . . . . . . . . . . . Type (\n[Go+ CI/Test]   |     4:  8: . . . . . . . . . . . . TypeName (\n[Go+ CI/Test]   |     4:  8: . . . . . . . . . . . . . IDENT string\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: string}\n[Go+ CI/Test]   |     4: 14: . . . . . . . . . . . . )\n[Go+ CI/Test]   |     4: 14: . . . . . . . . . . . )\n[Go+ CI/Test]   |     4: 14: . . . . . . . . . . )\n[Go+ CI/Test]   |     4: 14: . . . . . . . . . )\n[Go+ CI/Test]   |     4: 14: . . . . . . . . )\n[Go+ CI/Test]   |     4: 14: . . . . . . . . \":\"\n[Go+ CI/Test]   |     5:  2: . . . . . . . . StatementList (\n[Go+ CI/Test]   |     5:  2: . . . . . . . . )\n[Go+ CI/Test]   |     5:  2: . . . . . . . )\n[Go+ CI/Test]   |     5:  2: . . . . . . . CaseClause (\n[Go+ CI/Test]   |     5:  2: . . . . . . . . \"default\"\n[Go+ CI/Test]   |     5:  9: . . . . . . . . \":\"\n[Go+ CI/Test]   |     6:  2: . . . . . . . . StatementList (\n[Go+ CI/Test]   |     6:  2: . . . . . . . . )\n[Go+ CI/Test]   |     6:  2: . . . . . . . )\n[Go+ CI/Test]   |     6:  2: . . . . . . . \"}\"\n[Go+ CI/Test]   |     6:  3: . . . . . . . \";\"\n[Go+ CI/Test]   |     7:  1: . . . . . . )\n[Go+ CI/Test]   |     7:  1: . . . . . )\n[Go+ CI/Test]   |     7:  1: . . . . )\n[Go+ CI/Test]   |     7:  1: . . . . \"}\"\n[Go+ CI/Test]   |     7:  2: . . . )\n[Go+ CI/Test]   |     7:  2: . . . \";\"\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:3564: ast.FuncDecl{Name: add, ...}\n[Go+ CI/Test]   |     7:  3: . . )\n[Go+ CI/Test]   |     7:  3: . )\n[Go+ CI/Test]   |     7:  3: )\n[Go+ CI/Test]   | --- PASS: TestFromTestdata (0.23s)\n[Go+ CI/Test]   |     --- PASS: TestFromTestdata/autoprop (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestFromTestdata/build (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestFromTestdata/c2gohello (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestFromTestdata/cmdlinestyle1 (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestFromTestdata/cmdlinestyle2 (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestFromTestdata/cmdlinestyle3 (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestFromTestdata/cmdlinestyle4 (0.01s)\n[Go+ CI/Test]   |     --- PASS: TestFromTestdata/collection (0.07s)\n[Go+ CI/Test]   |     --- PASS: TestFromTestdata/complit (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestFromTestdata/errwrap1 (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestFromTestdata/errwrap2 (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestFromTestdata/errwrap3 (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestFromTestdata/exists (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestFromTestdata/fnbody (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestFromTestdata/fncall (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestFromTestdata/forloop (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestFromTestdata/funcdecl1 (0.01s)\n[Go+ CI/Test]   |     --- PASS: TestFromTestdata/funcdecl2 (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestFromTestdata/funcdecl3 (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestFromTestdata/funcdoc (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestFromTestdata/funclit (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestFromTestdata/functype (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestFromTestdata/gmxtest (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestFromTestdata/lambda1 (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestFromTestdata/lambda2 (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestFromTestdata/lambda3 (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestFromTestdata/lambda4 (0.01s)\n[Go+ CI/Test]   |     --- PASS: TestFromTestdata/listcompr (0.08s)\n[Go+ CI/Test]   |     --- PASS: TestFromTestdata/mapfunc (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestFromTestdata/mytest (0.01s)\n[Go+ CI/Test]   |     --- PASS: TestFromTestdata/overloadop (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestFromTestdata/rangeexpr (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestFromTestdata/rational (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestFromTestdata/selectdata (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestFromTestdata/slice1 (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestFromTestdata/slice2 (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestFromTestdata/spxtest (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestFromTestdata/stdtype (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestFromTestdata/typeswitch (0.00s)\n[Go+ CI/Test]   | === RUN   TestFromNofmt\n[Go+ CI/Test]   | === RUN   TestFromNofmt/cmdlinestyle1\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parserdir_test.go:90: Parsing /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/_nofmt/cmdlinestyle1\n[Go+ CI/Test]   |     1:  1: File (\n[Go+ CI/Test]   |     1:  1: . \"package\"\n[Go+ CI/Test]   |     1:  9: . IDENT main\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: main}\n[Go+ CI/Test]   |     1: 13: . \";\"\n[Go+ CI/Test]   |     3:  1: . Declaration (\n[Go+ CI/Test]   |     3:  1: . . FunctionDecl (\n[Go+ CI/Test]   |     3:  1: . . . \"func\"\n[Go+ CI/Test]   |     3:  6: . . . IDENT main\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: main}\n[Go+ CI/Test]   |     3: 10: . . . Signature (\n[Go+ CI/Test]   |     3: 10: . . . . Parameters (\n[Go+ CI/Test]   |     3: 10: . . . . . \"(\"\n[Go+ CI/Test]   |     3: 11: . . . . . \")\"\n[Go+ CI/Test]   |     3: 13: . . . . )\n[Go+ CI/Test]   |     3: 13: . . . . Result (\n[Go+ CI/Test]   |     3: 13: . . . . )\n[Go+ CI/Test]   |     3: 13: . . . )\n[Go+ CI/Test]   |     3: 13: . . . Body (\n[Go+ CI/Test]   |     3: 13: . . . . \"{\"\n[Go+ CI/Test]   |     4:  2: . . . . StatementList (\n[Go+ CI/Test]   |     4:  2: . . . . . Statement (\n[Go+ CI/Test]   |     4:  2: . . . . . . SimpleStmt (\n[Go+ CI/Test]   |     4:  2: . . . . . . . ExpressionList (\n[Go+ CI/Test]   |     4:  2: . . . . . . . . Expression (\n[Go+ CI/Test]   |     4:  2: . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     4:  2: . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     4:  2: . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     4:  2: . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |     4:  2: . . . . . . . . . . . . . IDENT changeYpos\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: changeYpos}\n[Go+ CI/Test]   |     4: 13: . . . . . . . . . . . . )\n[Go+ CI/Test]   |     4: 13: . . . . . . . . . . . . \"-\"\n[Go+ CI/Test]   |     4: 13: . . . . . . . . . . . . CallOrConversion (\n[Go+ CI/Test]   |     4: 13: . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |     4: 13: . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     4: 13: . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     4: 14: . . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     4: 14: . . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     4: 14: . . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: FLOAT, Value: 0.7}\n[Go+ CI/Test]   |     4: 14: . . . . . . . . . . . . . . . . . . . FLOAT 0.7\n[Go+ CI/Test]   |     4: 17: . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     4: 17: . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     4: 17: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     4: 17: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     4: 17: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     4: 17: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     4: 17: . . . . . . . . . . . . . \",\"\n[Go+ CI/Test]   |     4: 19: . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |     4: 19: . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     4: 19: . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     4: 19: . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     4: 19: . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: INT, Value: 8}\n[Go+ CI/Test]   |     4: 19: . . . . . . . . . . . . . . . . . . INT 8\n[Go+ CI/Test]   |     4: 20: . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     4: 20: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     4: 20: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     4: 20: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     4: 20: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1878: ast.CallExpr{Fun: changeYpos, Ellipsis: false, isCmd: true}\n[Go+ CI/Test]   |     4: 20: . . . . . . . . . . . . )\n[Go+ CI/Test]   |     4: 20: . . . . . . . . . . . )\n[Go+ CI/Test]   |     4: 20: . . . . . . . . . . )\n[Go+ CI/Test]   |     4: 20: . . . . . . . . . )\n[Go+ CI/Test]   |     4: 20: . . . . . . . . )\n[Go+ CI/Test]   |     4: 20: . . . . . . . )\n[Go+ CI/Test]   |     4: 20: . . . . . . )\n[Go+ CI/Test]   |     4: 20: . . . . . . \";\"\n[Go+ CI/Test]   |     5:  2: . . . . . )\n[Go+ CI/Test]   |     5:  2: . . . . . Statement (\n[Go+ CI/Test]   |     5:  2: . . . . . . SimpleStmt (\n[Go+ CI/Test]   |     5:  2: . . . . . . . ExpressionList (\n[Go+ CI/Test]   |     5:  2: . . . . . . . . Expression (\n[Go+ CI/Test]   |     5:  2: . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     5:  2: . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     5:  2: . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     5:  2: . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |     5:  2: . . . . . . . . . . . . . IDENT changeYpos\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: changeYpos}\n[Go+ CI/Test]   |     5: 13: . . . . . . . . . . . . )\n[Go+ CI/Test]   |     5: 13: . . . . . . . . . . . . \"-\"\n[Go+ CI/Test]   |     5: 13: . . . . . . . . . . . . CallOrConversion (\n[Go+ CI/Test]   |     5: 13: . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |     5: 13: . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     5: 13: . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     5: 14: . . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     5: 14: . . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     5: 14: . . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: FLOAT, Value: 0.7}\n[Go+ CI/Test]   |     5: 14: . . . . . . . . . . . . . . . . . . . FLOAT 0.7\n[Go+ CI/Test]   |     5: 17: . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     5: 17: . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     5: 17: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     5: 17: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     5: 17: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     5: 17: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1878: ast.CallExpr{Fun: changeYpos, Ellipsis: false, isCmd: true}\n[Go+ CI/Test]   |     5: 17: . . . . . . . . . . . . )\n[Go+ CI/Test]   |     5: 17: . . . . . . . . . . . )\n[Go+ CI/Test]   |     5: 17: . . . . . . . . . . )\n[Go+ CI/Test]   |     5: 17: . . . . . . . . . )\n[Go+ CI/Test]   |     5: 17: . . . . . . . . )\n[Go+ CI/Test]   |     5: 17: . . . . . . . )\n[Go+ CI/Test]   |     5: 17: . . . . . . )\n[Go+ CI/Test]   |     5: 17: . . . . . . \";\"\n[Go+ CI/Test]   |     6:  2: . . . . . )\n[Go+ CI/Test]   |     6:  2: . . . . . Statement (\n[Go+ CI/Test]   |     6:  2: . . . . . . SimpleStmt (\n[Go+ CI/Test]   |     6:  2: . . . . . . . ExpressionList (\n[Go+ CI/Test]   |     6:  2: . . . . . . . . Expression (\n[Go+ CI/Test]   |     6:  2: . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     6:  2: . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     6:  2: . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     6:  2: . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |     6:  2: . . . . . . . . . . . . . IDENT changeYpos\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: changeYpos}\n[Go+ CI/Test]   |     6: 13: . . . . . . . . . . . . )\n[Go+ CI/Test]   |     6: 13: . . . . . . . . . . . . \"-\"\n[Go+ CI/Test]   |     6: 13: . . . . . . . . . . . )\n[Go+ CI/Test]   |     6: 13: . . . . . . . . . . )\n[Go+ CI/Test]   |     6: 15: . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     6: 15: . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     6: 15: . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     6: 15: . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: FLOAT, Value: 0.7}\n[Go+ CI/Test]   |     6: 15: . . . . . . . . . . . . . . FLOAT 0.7\n[Go+ CI/Test]   |     6: 18: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     6: 18: . . . . . . . . . . . . )\n[Go+ CI/Test]   |     6: 18: . . . . . . . . . . . )\n[Go+ CI/Test]   |     6: 18: . . . . . . . . . . )\n[Go+ CI/Test]   |     6: 18: . . . . . . . . . )\n[Go+ CI/Test]   |     6: 18: . . . . . . . . )\n[Go+ CI/Test]   |     6: 18: . . . . . . . )\n[Go+ CI/Test]   |     6: 18: . . . . . . )\n[Go+ CI/Test]   |     6: 18: . . . . . . \";\"\n[Go+ CI/Test]   |     7:  2: . . . . . )\n[Go+ CI/Test]   |     7:  2: . . . . . Statement (\n[Go+ CI/Test]   |     7:  2: . . . . . . SimpleStmt (\n[Go+ CI/Test]   |     7:  2: . . . . . . . ExpressionList (\n[Go+ CI/Test]   |     7:  2: . . . . . . . . Expression (\n[Go+ CI/Test]   |     7:  2: . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     7:  2: . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     7:  2: . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     7:  2: . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |     7:  2: . . . . . . . . . . . . . IDENT changeYpos\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: changeYpos}\n[Go+ CI/Test]   |     7: 12: . . . . . . . . . . . . )\n[Go+ CI/Test]   |     7: 12: . . . . . . . . . . . )\n[Go+ CI/Test]   |     7: 12: . . . . . . . . . . )\n[Go+ CI/Test]   |     7: 12: . . . . . . . . . . \"-\"\n[Go+ CI/Test]   |     7: 13: . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     7: 13: . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     7: 13: . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     7: 13: . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: FLOAT, Value: 0.7}\n[Go+ CI/Test]   |     7: 13: . . . . . . . . . . . . . . FLOAT 0.7\n[Go+ CI/Test]   |     7: 16: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     7: 16: . . . . . . . . . . . . )\n[Go+ CI/Test]   |     7: 16: . . . . . . . . . . . )\n[Go+ CI/Test]   |     7: 16: . . . . . . . . . . )\n[Go+ CI/Test]   |     7: 16: . . . . . . . . . )\n[Go+ CI/Test]   |     7: 16: . . . . . . . . )\n[Go+ CI/Test]   |     7: 16: . . . . . . . )\n[Go+ CI/Test]   |     7: 16: . . . . . . )\n[Go+ CI/Test]   |     7: 16: . . . . . . \";\"\n[Go+ CI/Test]   |     8:  2: . . . . . )\n[Go+ CI/Test]   |     8:  2: . . . . . Statement (\n[Go+ CI/Test]   |     8:  2: . . . . . . SimpleStmt (\n[Go+ CI/Test]   |     8:  2: . . . . . . . ExpressionList (\n[Go+ CI/Test]   |     8:  2: . . . . . . . . Expression (\n[Go+ CI/Test]   |     8:  2: . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     8:  2: . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     8:  2: . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     8:  2: . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |     8:  2: . . . . . . . . . . . . . IDENT x\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: x}\n[Go+ CI/Test]   |     8:  3: . . . . . . . . . . . . )\n[Go+ CI/Test]   |     8:  3: . . . . . . . . . . . . IndexOrSlice (\n[Go+ CI/Test]   |     8:  3: . . . . . . . . . . . . . \"[\"\n[Go+ CI/Test]   |     8:  4: . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |     8:  4: . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     8:  4: . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     8:  4: . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     8:  4: . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: INT, Value: 1}\n[Go+ CI/Test]   |     8:  4: . . . . . . . . . . . . . . . . . . INT 1\n[Go+ CI/Test]   |     8:  5: . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     8:  5: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     8:  5: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     8:  5: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     8:  5: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     8:  5: . . . . . . . . . . . . . \"]\"\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1791: ast.IndexExpr{X: x, Index: &{103 INT 1}}\n[Go+ CI/Test]   |     8:  6: . . . . . . . . . . . . )\n[Go+ CI/Test]   |     8:  6: . . . . . . . . . . . )\n[Go+ CI/Test]   |     8:  6: . . . . . . . . . . )\n[Go+ CI/Test]   |     8:  6: . . . . . . . . . )\n[Go+ CI/Test]   |     8:  6: . . . . . . . . )\n[Go+ CI/Test]   |     8:  6: . . . . . . . )\n[Go+ CI/Test]   |     8:  6: . . . . . . )\n[Go+ CI/Test]   |     8:  6: . . . . . . \";\"\n[Go+ CI/Test]   |     9:  2: . . . . . )\n[Go+ CI/Test]   |     9:  2: . . . . . Statement (\n[Go+ CI/Test]   |     9:  2: . . . . . . SimpleStmt (\n[Go+ CI/Test]   |     9:  2: . . . . . . . ExpressionList (\n[Go+ CI/Test]   |     9:  2: . . . . . . . . Expression (\n[Go+ CI/Test]   |     9:  2: . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     9:  2: . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     9:  2: . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     9:  2: . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |     9:  2: . . . . . . . . . . . . . IDENT x\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: x}\n[Go+ CI/Test]   |     9:  4: . . . . . . . . . . . . )\n[Go+ CI/Test]   |     9:  4: . . . . . . . . . . . . CallOrConversion (\n[Go+ CI/Test]   |     9:  4: . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |     9:  4: . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     9:  4: . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     9:  4: . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     9:  4: . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |     9:  4: . . . . . . . . . . . . . . . . . . ArrayType (\n[Go+ CI/Test]   |     9:  4: . . . . . . . . . . . . . . . . . . . \"[\"\n[Go+ CI/Test]   |     9:  5: . . . . . . . . . . . . . . . . . . . \"]\"\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:847: ast.SliceLit{Elts: []}\n[Go+ CI/Test]   |     9:  6: . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     9:  6: . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     9:  6: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     9:  6: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     9:  6: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     9:  6: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     9:  6: . . . . . . . . . . . . . \"...\"\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1878: ast.CallExpr{Fun: x, Ellipsis: true, isCmd: true}\n[Go+ CI/Test]   |    10:  1: . . . . . . . . . . . . )\n[Go+ CI/Test]   |    10:  1: . . . . . . . . . . . )\n[Go+ CI/Test]   |    10:  1: . . . . . . . . . . )\n[Go+ CI/Test]   |    10:  1: . . . . . . . . . )\n[Go+ CI/Test]   |    10:  1: . . . . . . . . )\n[Go+ CI/Test]   |    10:  1: . . . . . . . )\n[Go+ CI/Test]   |    10:  1: . . . . . . )\n[Go+ CI/Test]   |    10:  1: . . . . . )\n[Go+ CI/Test]   |    10:  1: . . . . )\n[Go+ CI/Test]   |    10:  1: . . . . \"}\"\n[Go+ CI/Test]   |    10:  2: . . . )\n[Go+ CI/Test]   |    10:  2: . . . \";\"\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:3564: ast.FuncDecl{Name: main, ...}\n[Go+ CI/Test]   |    10:  3: . . )\n[Go+ CI/Test]   |    10:  3: . )\n[Go+ CI/Test]   |    10:  3: )\n[Go+ CI/Test]   | === RUN   TestFromNofmt/cmdlinestyle2\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parserdir_test.go:90: Parsing /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/_nofmt/cmdlinestyle2\n[Go+ CI/Test]   |     1:  1: File (\n[Go+ CI/Test]   |     1:  1: . Declaration (\n[Go+ CI/Test]   |     1:  1: . . StatementList (\n[Go+ CI/Test]   |     1:  1: . . . Statement (\n[Go+ CI/Test]   |     1:  1: . . . . SimpleStmt (\n[Go+ CI/Test]   |     1:  1: . . . . . ExpressionList (\n[Go+ CI/Test]   |     1:  1: . . . . . . Expression (\n[Go+ CI/Test]   |     1:  1: . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     1:  1: . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     1:  1: . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     1:  1: . . . . . . . . . . Operand (\n[Go+ CI/Test]   |     1:  1: . . . . . . . . . . . IDENT add\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: add}\n[Go+ CI/Test]   |     1:  4: . . . . . . . . . . )\n[Go+ CI/Test]   |     1:  4: . . . . . . . . . . CallOrConversion (\n[Go+ CI/Test]   |     1:  4: . . . . . . . . . . . \"(\"\n[Go+ CI/Test]   |     1:  5: . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |     1:  5: . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     1:  5: . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     1:  5: . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     1:  5: . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: INT, Value: 100}\n[Go+ CI/Test]   |     1:  5: . . . . . . . . . . . . . . . . INT 100\n[Go+ CI/Test]   |     1:  8: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     1:  8: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     1:  8: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     1:  8: . . . . . . . . . . . . )\n[Go+ CI/Test]   |     1:  8: . . . . . . . . . . . )\n[Go+ CI/Test]   |     1:  8: . . . . . . . . . . . \",\"\n[Go+ CI/Test]   |     1: 10: . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |     1: 10: . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     1: 10: . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     1: 10: . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     1: 10: . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: INT, Value: 200}\n[Go+ CI/Test]   |     1: 10: . . . . . . . . . . . . . . . . INT 200\n[Go+ CI/Test]   |     1: 13: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     1: 13: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     1: 13: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     1: 13: . . . . . . . . . . . . )\n[Go+ CI/Test]   |     1: 13: . . . . . . . . . . . )\n[Go+ CI/Test]   |     1: 13: . . . . . . . . . . . \")\"\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1878: ast.CallExpr{Fun: add, Ellipsis: false, isCmd: false}\n[Go+ CI/Test]   |     1: 15: . . . . . . . . . . )\n[Go+ CI/Test]   |     1: 15: . . . . . . . . . . CallOrConversion (\n[Go+ CI/Test]   |     1: 15: . . . . . . . . . . . \"(\"\n[Go+ CI/Test]   |     1: 16: . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |     1: 16: . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     1: 16: . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     1: 16: . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     1: 16: . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: INT, Value: 0}\n[Go+ CI/Test]   |     1: 16: . . . . . . . . . . . . . . . . INT 0\n[Go+ CI/Test]   |     1: 17: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     1: 17: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     1: 17: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     1: 17: . . . . . . . . . . . . )\n[Go+ CI/Test]   |     1: 17: . . . . . . . . . . . )\n[Go+ CI/Test]   |     1: 17: . . . . . . . . . . . \")\"\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1878: ast.CallExpr{Fun: &{add 4 [0xc000376300 0xc000376320] 0 13 0}, Ellipsis: false, isCmd: false}\n[Go+ CI/Test]   |     1: 18: . . . . . . . . . . )\n[Go+ CI/Test]   |     1: 18: . . . . . . . . . . \".\"\n[Go+ CI/Test]   |     1: 19: . . . . . . . . . . Selector (\n[Go+ CI/Test]   |     1: 19: . . . . . . . . . . . IDENT Test\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: Test}\n[Go+ CI/Test]   |     1: 23: . . . . . . . . . . )\n[Go+ CI/Test]   |     1: 23: . . . . . . . . . . CallOrConversion (\n[Go+ CI/Test]   |     1: 23: . . . . . . . . . . . \"(\"\n[Go+ CI/Test]   |     1: 24: . . . . . . . . . . . \")\"\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1878: ast.CallExpr{Fun: &{0xc000010050 Test}, Ellipsis: false, isCmd: false}\n[Go+ CI/Test]   |     1: 25: . . . . . . . . . . )\n[Go+ CI/Test]   |     1: 25: . . . . . . . . . )\n[Go+ CI/Test]   |     1: 25: . . . . . . . . )\n[Go+ CI/Test]   |     1: 25: . . . . . . . )\n[Go+ CI/Test]   |     1: 25: . . . . . . )\n[Go+ CI/Test]   |     1: 25: . . . . . )\n[Go+ CI/Test]   |     1: 25: . . . . )\n[Go+ CI/Test]   |     1: 25: . . . . \";\"\n[Go+ CI/Test]   |     1: 26: . . . )\n[Go+ CI/Test]   |     1: 26: . . )\n[Go+ CI/Test]   |     1: 26: . )\n[Go+ CI/Test]   |     1: 26: )\n[Go+ CI/Test]   | === RUN   TestFromNofmt/cmdlinestyle3\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parserdir_test.go:90: Parsing /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/_nofmt/cmdlinestyle3\n[Go+ CI/Test]   |     1:  1: File (\n[Go+ CI/Test]   |     1:  1: . Declaration (\n[Go+ CI/Test]   |     1:  1: . . StatementList (\n[Go+ CI/Test]   |     1:  1: . . . Statement (\n[Go+ CI/Test]   |     1:  1: . . . . SimpleStmt (\n[Go+ CI/Test]   |     1:  1: . . . . . ExpressionList (\n[Go+ CI/Test]   |     1:  1: . . . . . . Expression (\n[Go+ CI/Test]   |     1:  1: . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     1:  1: . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     1:  1: . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     1:  1: . . . . . . . . . . Operand (\n[Go+ CI/Test]   |     1:  1: . . . . . . . . . . . IDENT println\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: println}\n[Go+ CI/Test]   |     1:  9: . . . . . . . . . . )\n[Go+ CI/Test]   |     1:  9: . . . . . . . . . . CallOrConversion (\n[Go+ CI/Test]   |     1:  9: . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |     1:  9: . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     1:  9: . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     1:  9: . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     1:  9: . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |     1:  9: . . . . . . . . . . . . . . . . \"(\"\n[Go+ CI/Test]   |     1: 10: . . . . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |     1: 10: . . . . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     1: 10: . . . . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     1: 10: . . . . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     1: 10: . . . . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: INT, Value: 1}\n[Go+ CI/Test]   |     1: 10: . . . . . . . . . . . . . . . . . . . . . INT 1\n[Go+ CI/Test]   |     1: 11: . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     1: 11: . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     1: 11: . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     1: 11: . . . . . . . . . . . . . . . . . . \"+\"\n[Go+ CI/Test]   |     1: 12: . . . . . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     1: 12: . . . . . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     1: 12: . . . . . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     1: 12: . . . . . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: IMAG, Value: 2i}\n[Go+ CI/Test]   |     1: 12: . . . . . . . . . . . . . . . . . . . . . . IMAG 2i\n[Go+ CI/Test]   |     1: 14: . . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     1: 14: . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     1: 14: . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     1: 14: . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     1: 14: . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     1: 14: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     1: 14: . . . . . . . . . . . . . . . . \",\"\n[Go+ CI/Test]   |     1: 16: . . . . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |     1: 16: . . . . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     1: 16: . . . . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     1: 16: . . . . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     1: 16: . . . . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: INT, Value: 2}\n[Go+ CI/Test]   |     1: 16: . . . . . . . . . . . . . . . . . . . . . INT 2\n[Go+ CI/Test]   |     1: 17: . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     1: 17: . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     1: 17: . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     1: 17: . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     1: 17: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     1: 17: . . . . . . . . . . . . . . . . \")\"\n[Go+ CI/Test]   |     1: 18: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     1: 18: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     1: 18: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     1: 18: . . . . . . . . . . . . )\n[Go+ CI/Test]   |     1: 18: . . . . . . . . . . . )\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1878: ast.CallExpr{Fun: println, Ellipsis: false, isCmd: true}\n[Go+ CI/Test]   |     1: 18: . . . . . . . . . . )\n[Go+ CI/Test]   |     1: 18: . . . . . . . . . )\n[Go+ CI/Test]   |     1: 18: . . . . . . . . )\n[Go+ CI/Test]   |     1: 18: . . . . . . . )\n[Go+ CI/Test]   |     1: 18: . . . . . . )\n[Go+ CI/Test]   |     1: 18: . . . . . )\n[Go+ CI/Test]   |     1: 18: . . . . )\n[Go+ CI/Test]   |     1: 18: . . . . \";\"\n[Go+ CI/Test]   |     2:  1: . . . )\n[Go+ CI/Test]   |     2:  1: . . . Statement (\n[Go+ CI/Test]   |     2:  1: . . . . SimpleStmt (\n[Go+ CI/Test]   |     2:  1: . . . . . ExpressionList (\n[Go+ CI/Test]   |     2:  1: . . . . . . Expression (\n[Go+ CI/Test]   |     2:  1: . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     2:  1: . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     2:  1: . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     2:  1: . . . . . . . . . . Operand (\n[Go+ CI/Test]   |     2:  1: . . . . . . . . . . . IDENT println\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: println}\n[Go+ CI/Test]   |     2:  9: . . . . . . . . . . )\n[Go+ CI/Test]   |     2:  9: . . . . . . . . . . CallOrConversion (\n[Go+ CI/Test]   |     2:  9: . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |     2:  9: . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     2:  9: . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     2:  9: . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     2:  9: . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |     2:  9: . . . . . . . . . . . . . . . . \"(\"\n[Go+ CI/Test]   |     2: 10: . . . . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |     2: 10: . . . . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     2: 10: . . . . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     2: 10: . . . . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     2: 10: . . . . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1610: ast.BasicLit{Kind: INT, Value: 1}\n[Go+ CI/Test]   |     2: 10: . . . . . . . . . . . . . . . . . . . . . INT 1\n[Go+ CI/Test]   |     2: 11: . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 11: . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 11: . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 11: . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 11: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 11: . . . . . . . . . . . . . . . . \",\"\n[Go+ CI/Test]   |     2: 13: . . . . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |     2: 13: . . . . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     2: 13: . . . . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     2: 13: . . . . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     2: 13: . . . . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |     2: 13: . . . . . . . . . . . . . . . . . . . . . IDENT a\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: a}\n[Go+ CI/Test]   |     2: 14: . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 14: . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 14: . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 14: . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 14: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 14: . . . . . . . . . . . . . . . . \"...\"\n[Go+ CI/Test]   |     2: 17: . . . . . . . . . . . . . . . . \")\"\n[Go+ CI/Test]   |     2: 18: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 18: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 18: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 18: . . . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 18: . . . . . . . . . . . )\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1878: ast.CallExpr{Fun: println, Ellipsis: true, isCmd: true}\n[Go+ CI/Test]   |     2: 18: . . . . . . . . . . )\n[Go+ CI/Test]   |     2: 18: . . . . . . . . . )\n[Go+ CI/Test]   |     2: 18: . . . . . . . . )\n[Go+ CI/Test]   |     2: 18: . . . . . . . )\n[Go+ CI/Test]   |     2: 18: . . . . . . )\n[Go+ CI/Test]   |     2: 18: . . . . . )\n[Go+ CI/Test]   |     2: 18: . . . . )\n[Go+ CI/Test]   |     2: 18: . . . . \";\"\n[Go+ CI/Test]   |     3:  1: . . . )\n[Go+ CI/Test]   |     3:  1: . . . Statement (\n[Go+ CI/Test]   |     3:  1: . . . . SimpleStmt (\n[Go+ CI/Test]   |     3:  1: . . . . . ExpressionList (\n[Go+ CI/Test]   |     3:  1: . . . . . . Expression (\n[Go+ CI/Test]   |     3:  1: . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     3:  1: . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     3:  1: . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     3:  1: . . . . . . . . . . Operand (\n[Go+ CI/Test]   |     3:  1: . . . . . . . . . . . IDENT println\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: println}\n[Go+ CI/Test]   |     3:  9: . . . . . . . . . . )\n[Go+ CI/Test]   |     3:  9: . . . . . . . . . . CallOrConversion (\n[Go+ CI/Test]   |     3:  9: . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |     3:  9: . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     3:  9: . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     3:  9: . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     3:  9: . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |     3:  9: . . . . . . . . . . . . . . . . \"(\"\n[Go+ CI/Test]   |     3: 10: . . . . . . . . . . . . . . . . Expression (\n[Go+ CI/Test]   |     3: 10: . . . . . . . . . . . . . . . . . BinaryExpr (\n[Go+ CI/Test]   |     3: 10: . . . . . . . . . . . . . . . . . . UnaryExpr (\n[Go+ CI/Test]   |     3: 10: . . . . . . . . . . . . . . . . . . . PrimaryExpr (\n[Go+ CI/Test]   |     3: 10: . . . . . . . . . . . . . . . . . . . . Operand (\n[Go+ CI/Test]   |     3: 10: . . . . . . . . . . . . . . . . . . . . . IDENT a\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:661: ast.Ident{Name: a}\n[Go+ CI/Test]   |     3: 11: . . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     3: 11: . . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     3: 11: . . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     3: 11: . . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     3: 11: . . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     3: 11: . . . . . . . . . . . . . . . . \"...\"\n[Go+ CI/Test]   |     3: 14: . . . . . . . . . . . . . . . . \")\"\n[Go+ CI/Test]   |     3: 15: . . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     3: 15: . . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     3: 15: . . . . . . . . . . . . . )\n[Go+ CI/Test]   |     3: 15: . . . . . . . . . . . . )\n[Go+ CI/Test]   |     3: 15: . . . . . . . . . . . )\n[Go+ CI/Test]   |  /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/parser.go:1878: ast.CallExpr{Fun: println, Ellipsis: true, isCmd: true}\n[Go+ CI/Test]   |     3: 15: . . . . . . . . . . )\n[Go+ CI/Test]   |     3: 15: . . . . . . . . . )\n[Go+ CI/Test]   |     3: 15: . . . . . . . . )\n[Go+ CI/Test]   |     3: 15: . . . . . . . )\n[Go+ CI/Test]   |     3: 15: . . . . . . )\n[Go+ CI/Test]   |     3: 15: . . . . . )\n[Go+ CI/Test]   |     3: 15: . . . . )\n[Go+ CI/Test]   |     3: 15: . . . . \";\"\n[Go+ CI/Test]   |     3: 16: . . . )\n[Go+ CI/Test]   |     3: 16: . . )\n[Go+ CI/Test]   |     3: 16: . )\n[Go+ CI/Test]   |     3: 16: )\n[Go+ CI/Test]   | --- PASS: TestFromNofmt (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestFromNofmt/cmdlinestyle1 (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestFromNofmt/cmdlinestyle2 (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestFromNofmt/cmdlinestyle3 (0.00s)\n[Go+ CI/Test]   | PASS\n[Go+ CI/Test]   | coverage: 87.9% of statements\n[Go+ CI/Test]   | ok  \tgithub.com/goplus/gop/parser\t0.470s\tcoverage: 87.9% of statements\n[Go+ CI/Test]   | ?   \tgithub.com/goplus/gop/parser/parsertest\t[no test files]\n[Go+ CI/Test]   | === RUN   TestLineComments\n[Go+ CI/Test]   | --- PASS: TestLineComments (0.00s)\n[Go+ CI/Test]   | === RUN   TestBadComments\n[Go+ CI/Test]   | === PAUSE TestBadComments\n[Go+ CI/Test]   | === RUN   TestSourcePos\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func foo\n[Go+ CI/Test]   | --- PASS: TestSourcePos (0.00s)\n[Go+ CI/Test]   | === RUN   TestIssue5945\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func f\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func g\n[Go+ CI/Test]   | --- PASS: TestIssue5945 (0.00s)\n[Go+ CI/Test]   | === RUN   TestDeclLists\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func sum\n[Go+ CI/Test]   | --- PASS: TestDeclLists (0.00s)\n[Go+ CI/Test]   | === RUN   TestStmtLists\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | --- PASS: TestStmtLists (0.00s)\n[Go+ CI/Test]   | === RUN   TestBaseIndent\n[Go+ CI/Test]   | === PAUSE TestBaseIndent\n[Go+ CI/Test]   | === RUN   TestFuncType\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func f\n[Go+ CI/Test]   | --- PASS: TestFuncType (0.00s)\n[Go+ CI/Test]   | === RUN   TestWriteErrors\n[Go+ CI/Test]   | === PAUSE TestWriteErrors\n[Go+ CI/Test]   | === RUN   TestX\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func _\n[Go+ CI/Test]   | --- PASS: TestX (0.00s)\n[Go+ CI/Test]   | === RUN   TestCommentedNode\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func foo\n[Go+ CI/Test]   | --- PASS: TestCommentedNode (0.00s)\n[Go+ CI/Test]   | === RUN   TestIssue11151\n[Go+ CI/Test]   | --- PASS: TestIssue11151 (0.00s)\n[Go+ CI/Test]   | === RUN   TestParenthesizedDecl\n[Go+ CI/Test]   | --- PASS: TestParenthesizedDecl (0.00s)\n[Go+ CI/Test]   | === RUN   TestIssue32854\n[Go+ CI/Test]   | --- PASS: TestIssue32854 (0.00s)\n[Go+ CI/Test]   | === RUN   TestStripParens\n[Go+ CI/Test]   | --- PASS: TestStripParens (0.00s)\n[Go+ CI/Test]   | === RUN   TestNoPkgDecl\n[Go+ CI/Test]   | --- PASS: TestNoPkgDecl (0.00s)\n[Go+ CI/Test]   | === RUN   TestFuncs\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func foo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func bar\n[Go+ CI/Test]   | --- PASS: TestFuncs (0.00s)\n[Go+ CI/Test]   | === RUN   TestFromGopPrinter\n[Go+ CI/Test]   | === RUN   TestFromGopPrinter/format.Source_nodes.go\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func SetDebug\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [debugFormat]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func linebreak\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [nbreaks]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [nbreaks]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func setComment\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000396b28]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p flush}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000396c78]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p internalError}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0003cd0b0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000396d08]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p nextComment}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func identList\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [xlist]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0003cd410]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [mode]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p exprList}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func exprList\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [prev]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [next]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [prev]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [next]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [line]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [endLine]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr0}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [ws]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [ws]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [prevBreak]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [ws]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [prevBreak]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [size]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [lnsum]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [count]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [prevLine]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [line]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [useFF]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [prevSize]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [size]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [pair isPair]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [size]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [size]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [useFF]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [geomean]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [ratio]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [useFF]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [needsLinebreak]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [needsBlank]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [nbreaks]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [ws]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [prevBreak]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [needsBlank]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [lnsum]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [count]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr0}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [lnsum]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [prevLine]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func parameters\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [prevLine]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [ws]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [parLineBeg]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [parLineBeg]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [needsLinebreak]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [ws]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p identList}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [prevLine]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [closing]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p linebreak}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func signature\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p parameters}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p parameters}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func identListSize\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [size]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [size]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func isOneLineFieldList\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [f]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [namesSize]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [namesSize]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [typeSize]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func setLineComment\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p setComment}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fieldList\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [lbrace]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [list]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [rbrace]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [hasComments]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [srcIsOneLine]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [f]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [ftyp isFtyp]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p signature}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [sep]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [sep]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p linebreak}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [extraTabs]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p setComment}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p recordLine}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p identList}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [extraTabs]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [extraTabs]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [extraTabs]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p setComment}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p flush}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p setLineComment}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p linebreak}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p setComment}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p recordLine}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [ftyp isFtyp]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p signature}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p setComment}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p flush}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p setLineComment}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func walkBinary\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [has4]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [has5]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [l]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [h4 h5 mp]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [has4]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [has5]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [maxProblem]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [r]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [h4 h5 mp]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [has4]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [has5]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [maxProblem]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [maxProblem]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [maxProblem]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [maxProblem]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func cutoff\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [has4 has5 maxProblem]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func diffPrec\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [x ok]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func reduceDepth\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [depth]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func binaryExpr\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [prec]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr0}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [printBlank]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [ws]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr1}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [xline]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [yline]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [ws]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [printBlank]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr1}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func isBinary\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ ok]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func expr1\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [x]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p internalError}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [depth]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [v ok]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p binaryExpr}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr1}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [startCol]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p signature}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p funcBody}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ hasParens]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr0}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr0}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p selectorExpr}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr1}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr1}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr0}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr1}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p exprList}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr1}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [indices]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [indices]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [hasBinaries]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [needsBlanks]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr0}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ ok]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [wasIndented]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [wasIndented]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p exprList}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p exprList}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr1}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p exprList}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [mode]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [mode]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p fieldList}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p signature}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p fieldList}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p exprList}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [mode]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [mode]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr0}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p listForPhrase}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [elt ok]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr0}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr0}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr0}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p listForPhrase}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p identList}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p exprList}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p identList}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p block}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{log Fatalf}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func listForPhrase\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p stmt}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func possibleSelectorExpr\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [x ok]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr1}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func selectorExpr\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr1}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [line]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func expr0\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr1}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func expr\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr1}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func stmtList\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ isEmpty]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p linebreak}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p recordLine}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p stmt}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [t]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [lt _]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [t]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func block\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p stmtList}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p linebreak}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func isTypeName\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [t]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func stripParens\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [px strip]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{ast Inspect}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [x]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [strip]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [x]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [strip]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func stripParensAlways\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [x ok]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func controlClause\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [needsBlank]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [needsBlank]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p stmt}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [needsBlank]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [needsBlank]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p stmt}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [needsBlank]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func indentList\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [line]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [xb]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [xe]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [line]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func stmt\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [s]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p decl}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [e isEmpty]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p linebreak}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p stmt}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [e ok]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{log Println}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr0}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr0}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr0}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr0}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{log Println}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p exprList}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p exprList}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p exprList}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p exprList}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p block}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p controlClause}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p block}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p stmt}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p stmt}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p exprList}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p stmtList}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p controlClause}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p block}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p stmt}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p stmt}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p block}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p stmt}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p stmtList}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [body]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p block}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p controlClause}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p block}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p block}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p block}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{log Printf}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func keepTypeColumn\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [m]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [populate]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00046b740]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00046b740]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [t]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [keepType]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt populate\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [keepType]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt populate\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func valueSpec\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p setComment}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p identList}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [extraTabs]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p exprList}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p setComment}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func sanitizeImportPath\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [s err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [s]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func spec\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [s]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p setComment}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p setComment}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p internalError}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p setComment}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p identList}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p exprList}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p setComment}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p setComment}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p setComment}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt panic\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func genDecl\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p setComment}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [keepType]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p linebreak}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p recordLine}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p valueSpec}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p linebreak}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p recordLine}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p spec}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p spec}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func nodeSize\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [size found]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [size]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00047db90]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [cfg]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [size]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00047de90]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func numLines\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [from]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [to]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func bodySize\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [pos1]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [pos2]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [bodySize]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [bodySize]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [bodySize]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func funcBody\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000479f68]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000479f98]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p stmt}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p block}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func funcBodyUnnamed\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0004a42e8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0004a4318]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ isEmpty]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p linebreak}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p recordLine}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p stmt}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [t]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [lt _]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [t]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func distanceFrom\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func funcDecl\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{log Println}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p setComment}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p funcBodyUnnamed}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [pos]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [startCol]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p parameters}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p signature}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p funcBody}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func decl\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [d]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p genDecl}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p funcDecl}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt panic\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func declToken\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [tok]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [d]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [tok]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [tok]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func declList\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [tok]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [prev]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [tok]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [min]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [min]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p linebreak}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p decl}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func file\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0004a52d8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p setComment}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p declList}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0004a53f8]\n[Go+ CI/Test]   | === RUN   TestFromGopPrinter/format.Node_nodes.go\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func SetDebug\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [debugFormat]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func linebreak\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [nbreaks]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [nbreaks]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func setComment\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00050d440]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p flush}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00050d590]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p internalError}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005351a0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00050d620]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p nextComment}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func identList\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [xlist]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000535500]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [mode]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p exprList}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func exprList\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [prev]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [next]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [prev]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [next]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [line]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [endLine]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr0}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [ws]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [ws]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [prevBreak]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [ws]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [prevBreak]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [size]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [lnsum]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [count]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [prevLine]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [line]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [useFF]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [prevSize]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [size]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [pair isPair]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [size]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [size]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [useFF]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [geomean]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [ratio]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [useFF]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [needsLinebreak]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [needsBlank]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [nbreaks]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [ws]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [prevBreak]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [needsBlank]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [lnsum]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [count]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr0}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [lnsum]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [prevLine]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func parameters\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [prevLine]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [ws]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [parLineBeg]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [parLineBeg]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [needsLinebreak]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [ws]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p identList}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [prevLine]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [closing]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p linebreak}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func signature\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p parameters}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p parameters}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func identListSize\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [size]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [size]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func isOneLineFieldList\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [f]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [namesSize]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [namesSize]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [typeSize]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func setLineComment\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p setComment}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fieldList\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [lbrace]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [list]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [rbrace]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [hasComments]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [srcIsOneLine]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [f]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [ftyp isFtyp]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p signature}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [sep]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [sep]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p linebreak}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [extraTabs]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p setComment}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p recordLine}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p identList}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [extraTabs]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [extraTabs]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [extraTabs]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p setComment}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p flush}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p setLineComment}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p linebreak}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p setComment}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p recordLine}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [ftyp isFtyp]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p signature}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p setComment}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p flush}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p setLineComment}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func walkBinary\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [has4]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [has5]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [l]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [h4 h5 mp]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [has4]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [has5]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [maxProblem]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [r]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [h4 h5 mp]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [has4]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [has5]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [maxProblem]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [maxProblem]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [maxProblem]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [maxProblem]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func cutoff\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [has4 has5 maxProblem]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func diffPrec\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [x ok]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func reduceDepth\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [depth]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func binaryExpr\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [prec]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr0}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [printBlank]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [ws]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr1}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [xline]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [yline]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [ws]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [printBlank]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr1}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func isBinary\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ ok]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func expr1\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [x]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p internalError}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [depth]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [v ok]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p binaryExpr}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr1}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [startCol]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p signature}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p funcBody}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ hasParens]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr0}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr0}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p selectorExpr}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr1}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr1}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr0}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr1}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p exprList}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr1}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [indices]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [indices]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [hasBinaries]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [needsBlanks]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr0}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ ok]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [wasIndented]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [wasIndented]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p exprList}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p exprList}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr1}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p exprList}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [mode]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [mode]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p fieldList}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p signature}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p fieldList}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p exprList}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [mode]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [mode]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr0}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p listForPhrase}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [elt ok]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr0}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr0}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr0}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p listForPhrase}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p identList}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p exprList}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p identList}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p block}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{log Fatalf}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func listForPhrase\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p stmt}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func possibleSelectorExpr\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [x ok]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr1}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func selectorExpr\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr1}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [line]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func expr0\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr1}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func expr\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr1}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func stmtList\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ isEmpty]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p linebreak}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p recordLine}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p stmt}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [t]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [lt _]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [t]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func block\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p stmtList}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p linebreak}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func isTypeName\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [t]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func stripParens\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [px strip]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{ast Inspect}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [x]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [strip]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [x]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [strip]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func stripParensAlways\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [x ok]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func controlClause\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [needsBlank]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [needsBlank]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p stmt}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [needsBlank]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [needsBlank]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p stmt}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [needsBlank]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func indentList\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [line]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [xb]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [xe]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [line]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func stmt\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [s]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p decl}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [e isEmpty]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p linebreak}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p stmt}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [e ok]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{log Println}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr0}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr0}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr0}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr0}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{log Println}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p exprList}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p exprList}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p exprList}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p exprList}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p block}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p controlClause}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p block}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p stmt}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p stmt}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p exprList}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p stmtList}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p controlClause}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p block}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p stmt}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p stmt}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p block}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p stmt}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p stmtList}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [body]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p block}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p controlClause}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p block}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p block}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p block}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{log Printf}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func keepTypeColumn\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [m]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [populate]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00060fb90]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00060fb90]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [t]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [keepType]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt populate\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [keepType]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt populate\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func valueSpec\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p setComment}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p identList}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [extraTabs]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p exprList}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p setComment}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func sanitizeImportPath\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [s err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [s]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func spec\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [s]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p setComment}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p setComment}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p internalError}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p setComment}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p identList}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p exprList}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p setComment}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p setComment}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p setComment}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt panic\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func genDecl\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p setComment}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [keepType]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p linebreak}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p recordLine}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p valueSpec}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p linebreak}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p recordLine}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p spec}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p spec}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func nodeSize\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [size found]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [size]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000644000]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [cfg]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [size]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000644300]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func numLines\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [from]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [to]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func bodySize\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [pos1]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [pos2]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [bodySize]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [bodySize]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [bodySize]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func funcBody\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000629200]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000629230]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p stmt}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p block}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func funcBodyUnnamed\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000629578]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006295a8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ isEmpty]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p linebreak}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p recordLine}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p stmt}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [t]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [lt _]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [t]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func distanceFrom\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func funcDecl\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{log Println}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p setComment}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p funcBodyUnnamed}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [pos]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [startCol]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p parameters}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p signature}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p funcBody}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func decl\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [d]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p genDecl}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p funcDecl}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt panic\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func declToken\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [tok]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [d]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [tok]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [tok]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func declList\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [tok]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [prev]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [tok]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [min]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [min]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p linebreak}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p decl}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func file\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000650570]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p setComment}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p declList}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000650690]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func SetDebug\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [debugFormat]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func linebreak\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [nbreaks]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [nbreaks]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func setComment\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000693dd0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p flush}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000693f20]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p internalError}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006a9bc0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000693fb0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p nextComment}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func identList\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [xlist]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006a9f20]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [mode]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p exprList}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func exprList\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [prev]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [next]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [prev]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [next]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [line]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [endLine]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr0}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [ws]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [ws]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [prevBreak]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [ws]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [prevBreak]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [size]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [lnsum]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [count]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [prevLine]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [line]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [useFF]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [prevSize]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [size]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [pair isPair]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [size]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [size]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [useFF]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [geomean]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [ratio]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [useFF]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [needsLinebreak]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [needsBlank]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [nbreaks]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [ws]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [prevBreak]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [needsBlank]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [lnsum]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [count]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr0}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [lnsum]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [prevLine]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func parameters\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [prevLine]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [ws]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [parLineBeg]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [parLineBeg]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [needsLinebreak]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [ws]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p identList}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [prevLine]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [closing]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p linebreak}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func signature\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p parameters}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p parameters}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func identListSize\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [size]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [size]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func isOneLineFieldList\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [f]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [namesSize]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [namesSize]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [typeSize]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func setLineComment\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p setComment}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fieldList\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [lbrace]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [list]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [rbrace]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [hasComments]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [srcIsOneLine]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [f]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [ftyp isFtyp]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p signature}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [sep]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [sep]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p linebreak}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [extraTabs]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p setComment}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p recordLine}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p identList}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [extraTabs]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [extraTabs]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [extraTabs]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p setComment}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p flush}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p setLineComment}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p linebreak}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p setComment}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p recordLine}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [ftyp isFtyp]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p signature}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p setComment}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p flush}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p setLineComment}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func walkBinary\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [has4]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [has5]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [l]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [h4 h5 mp]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [has4]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [has5]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [maxProblem]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [r]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [h4 h5 mp]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [has4]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [has5]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [maxProblem]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [maxProblem]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [maxProblem]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [maxProblem]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func cutoff\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [has4 has5 maxProblem]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func diffPrec\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [x ok]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func reduceDepth\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [depth]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func binaryExpr\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [prec]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr0}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [printBlank]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [ws]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr1}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [xline]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [yline]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [ws]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [printBlank]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr1}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func isBinary\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ ok]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func expr1\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [x]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p internalError}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [depth]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [v ok]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p binaryExpr}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr1}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [startCol]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p signature}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p funcBody}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ hasParens]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr0}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr0}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p selectorExpr}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr1}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr1}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr0}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr1}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p exprList}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr1}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [indices]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [indices]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [hasBinaries]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [needsBlanks]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr0}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ ok]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [wasIndented]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [wasIndented]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p exprList}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p exprList}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr1}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p exprList}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [mode]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [mode]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p fieldList}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p signature}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p fieldList}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p exprList}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [mode]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [mode]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr0}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p listForPhrase}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [elt ok]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr0}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr0}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr0}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p listForPhrase}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p identList}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p exprList}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p identList}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p block}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{log Fatalf}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func listForPhrase\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p stmt}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func possibleSelectorExpr\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [x ok]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr1}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func selectorExpr\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr1}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [line]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func expr0\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr1}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func expr\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr1}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func stmtList\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ isEmpty]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p linebreak}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p recordLine}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p stmt}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [t]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [lt _]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [t]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func block\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p stmtList}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p linebreak}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func isTypeName\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [t]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func stripParens\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [px strip]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{ast Inspect}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [x]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [strip]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [x]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [strip]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func stripParensAlways\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [x ok]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func controlClause\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [needsBlank]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [needsBlank]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p stmt}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [needsBlank]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [needsBlank]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p stmt}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [needsBlank]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func indentList\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [line]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [xb]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [xe]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [line]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func stmt\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [s]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p decl}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [e isEmpty]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p linebreak}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p stmt}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [e ok]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{log Println}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr0}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr0}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr0}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr0}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{log Println}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p exprList}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p exprList}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p exprList}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p exprList}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p block}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p controlClause}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p block}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p stmt}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p stmt}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p exprList}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p stmtList}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p controlClause}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p block}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p stmt}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p stmt}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p block}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p stmt}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p stmtList}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [body]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p block}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p controlClause}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p block}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p block}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p block}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{log Printf}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func keepTypeColumn\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [m]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [populate]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0003dee40]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0003dee40]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [t]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [keepType]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt populate\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [keepType]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt populate\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func valueSpec\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p setComment}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p identList}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [extraTabs]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p exprList}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p setComment}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func sanitizeImportPath\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [s err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [s]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func spec\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [s]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p setComment}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p setComment}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p internalError}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p setComment}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p identList}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p exprList}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p setComment}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p setComment}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p setComment}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt panic\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func genDecl\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p setComment}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [keepType]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p linebreak}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p recordLine}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p valueSpec}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p linebreak}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p recordLine}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p spec}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p spec}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func nodeSize\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [size found]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [size]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0003f3290]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [cfg]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [size]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0003f3590]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func numLines\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [from]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [to]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func bodySize\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [pos1]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [pos2]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [bodySize]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [bodySize]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [bodySize]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func funcBody\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0003e7fe0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000400018]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p stmt}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p block}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func funcBodyUnnamed\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000400360]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000400390]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ isEmpty]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p linebreak}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p recordLine}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p stmt}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [t]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [lt _]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [t]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func distanceFrom\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func funcDecl\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{log Println}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p setComment}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p funcBodyUnnamed}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [pos]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [startCol]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p parameters}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p signature}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p funcBody}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func decl\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [d]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p genDecl}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p funcDecl}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt panic\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func declToken\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [tok]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [d]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [tok]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [tok]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func declList\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [tok]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [prev]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [tok]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [min]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [min]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p linebreak}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p decl}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func file\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000401350]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p setComment}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p declList}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000401470]\n[Go+ CI/Test]   | === RUN   TestFromGopPrinter/format.Source_printer.go\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func init\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000471890]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0004718c0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0004718d8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000471908]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000471938]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000471980]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000471998]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func internalError\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{fmt Print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{fmt Println}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt panic\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func commentsHaveNewline\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [line]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [t]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func nextComment\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [c]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [list]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000471d10]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000471d28]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000471d88]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000471e30]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func commentBefore\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func commentSizeBefore\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00049e090]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [size]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [size]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p nextComment}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func recordLine\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00049e228]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func linesFrom\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func posFor\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func lineFor\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00049e4c8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00049e4e0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func writeLineDirective\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00049e6c0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00049e738]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00049e7b0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00049e840]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00049e888]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func writeIndent\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00049e9d8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00049ea50]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00049ea80]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00049eab0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func writeByte\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [ch]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [ch]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00049ebe8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeIndent}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00049ec78]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00049ecf0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00049ed20]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00049ed50]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00049ed80]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00049edb0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00049ede0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00049ee10]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func writeString\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeLineDirective}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeIndent}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00049f0c8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00049f158]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00049f1d0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00049f200]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00049f278]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [nlines]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [ch]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [li]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00049f3c8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00049f3f8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00049f428]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00049f458]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [c]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00049f488]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00049f4b8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00049f4e8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00049f518]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00049f530]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00049f578]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func writeCommentPrefix\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeByte}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [hasSep]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [j]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0004a30b0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [hasSep]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [j]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeWhitespace}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [sep]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [sep]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeByte}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [droppedLinebreak]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [j]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0004a3470]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0004a3800]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [droppedLinebreak]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [j]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeWhitespace}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeByte}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func isBlank\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func commonPrefix\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func trimRight\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func stripCommonPrefix\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [prefix]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [prefixSet]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0004d8a20]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [prefix]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [prefixSet]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [prefix]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [line]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [prefix]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [lineOfStars]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [prefix]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [lineOfStars]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [first]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [prefix]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [suffix]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0004d9560]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [suffix]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0004d9770 0xc0004d97a0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [suffix]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [prefix]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [last]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [closing]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [closing]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0004d99e0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [prefix]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0004d9c20]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func writeComment\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [text]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [pos]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0004d2b58]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0004d2b58]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0004d2b88]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeString}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [lines]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0004e6270]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt stripCommonPrefix\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeByte}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [pos]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeString}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func writeCommentSuffix\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0004e6780]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [needsLinebreak]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [wroteNewline]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [droppedFF]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0004e6990]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeWhitespace}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeByte}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [wroteNewline]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func containsLinebreak\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func intersperseComments\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeCommentPrefix}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeComment}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [last]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p nextComment}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [needsLinebreak]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [needsLinebreak]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeByte}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [needsLinebreak]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p internalError}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func writeWhitespace\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [ch]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p internalError}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0004d3800]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0004e7ec0 0xc0004e7f20]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeByte}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [l]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0004d3a70]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func nlimit\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func mayCombine\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [b]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [b]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [b]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [b]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [b]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [b]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func print\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0004d3fe0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0004f0048]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [x]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0004f00a8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeWhitespace}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0004f01f8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0004eec60]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0004f02b8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0004f02d0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [data]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [impliedSemi]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0004f0360]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [data]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [isLit]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [impliedSemi]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0004f03d8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [s]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p internalError}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0004f0528]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0004eef90]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [data]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [impliedSemi]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0004f0678]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0004f06c0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [data]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [isLit]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [impliedSemi]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0004f0768]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{fmt Fprintf}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt panic\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [next]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [wroteNewline droppedFF]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [ch]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [ch]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeByte}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [impliedSemi]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0004f0a08]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0004f0a50]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeString}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0004f0a80]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func flush\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [wroteNewline droppedFF]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeWhitespace}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func getDoc\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func getLastComment\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func printNode\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [cnode ok]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [node]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [comments]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n ok]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [beg]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [end]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [doc]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [beg]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [com]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [e]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [end]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [j]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0004f1428]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n ok]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0004f14a0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0004f1500]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p nextComment}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ ok]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0004f1668]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p stmt}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p decl}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p spec}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ ok]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0004f1788]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p stmtList}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p declList}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p file}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func resetSpace\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0004f1a88]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0004f1aa0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func Write\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [m]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [b]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0004f1c98]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p resetSpace}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0004f1da0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [m]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0004f1e30]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [m]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p resetSpace}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p resetSpace}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0004f1ef0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p resetSpace}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0004f1fe0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [m]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt panic\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p resetSpace}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fprint\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p init}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000512438]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p flush}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [output]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [minwidth]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [padchar]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [padchar]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [twmode]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [minwidth]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [twmode]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [output]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [tw _]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func Fprint\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func Fprint\n[Go+ CI/Test]   | === RUN   TestFromGopPrinter/format.Node_printer.go\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func init\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00055af48]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00055af78]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00055af90]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00055afc0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00055aff0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00055b038]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00055b050]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func internalError\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{fmt Print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{fmt Println}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt panic\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func commentsHaveNewline\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [line]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [t]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func nextComment\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [c]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [list]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00055b3c8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00055b3e0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00055b440]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00055b4e8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func commentBefore\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func commentSizeBefore\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00055b740]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [size]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [size]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p nextComment}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func recordLine\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00055b8d8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func linesFrom\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func posFor\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func lineFor\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00055bb78]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00055bb90]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func writeLineDirective\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00055bd70]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00055bde8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00055be60]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00055bef0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00055bf38]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func writeIndent\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072a090]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072a108]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072a138]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072a168]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func writeByte\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [ch]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [ch]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072a2a0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeIndent}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072a330]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072a3a8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072a3d8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072a408]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072a438]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072a468]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072a498]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072a4c8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func writeString\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeLineDirective}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeIndent}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072a780]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072a810]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072a888]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072a8b8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072a930]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [nlines]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [ch]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [li]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072aa80]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072aab0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072aae0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072ab10]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [c]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072ab40]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072ab70]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072aba0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072abd0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072abe8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072ac30]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func writeCommentPrefix\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeByte}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [hasSep]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [j]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000730e70]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [hasSep]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [j]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeWhitespace}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [sep]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [sep]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeByte}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [droppedLinebreak]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [j]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000731230]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0007315c0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [droppedLinebreak]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [j]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeWhitespace}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeByte}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func isBlank\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func commonPrefix\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func trimRight\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func stripCommonPrefix\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [prefix]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [prefixSet]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0007387e0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [prefix]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [prefixSet]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [prefix]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [line]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [prefix]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [lineOfStars]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [prefix]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [lineOfStars]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [first]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [prefix]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [suffix]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000739320]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [suffix]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000739530 0xc000739560]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [suffix]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [prefix]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [last]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [closing]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [closing]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0007397a0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [prefix]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0007399e0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func writeComment\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [text]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [pos]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000742210]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000742210]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000742240]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeString}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [lines]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00074a030]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt stripCommonPrefix\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeByte}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [pos]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeString}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func writeCommentSuffix\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00074a540]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [needsLinebreak]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [wroteNewline]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [droppedFF]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00074a750]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeWhitespace}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeByte}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [wroteNewline]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func containsLinebreak\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func intersperseComments\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeCommentPrefix}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeComment}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [last]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p nextComment}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [needsLinebreak]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [needsLinebreak]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeByte}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [needsLinebreak]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p internalError}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func writeWhitespace\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [ch]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p internalError}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000742eb8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00074bc80 0xc00074bce0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeByte}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [l]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000743128]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func nlimit\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func mayCombine\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [b]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [b]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [b]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [b]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [b]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [b]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func print\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000743698]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0007436f8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [x]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000743758]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeWhitespace}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0007438a8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000754a20]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000743968]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000743980]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [data]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [impliedSemi]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000743a10]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [data]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [isLit]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [impliedSemi]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000743a88]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [s]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p internalError}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000743bd8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000754d50]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [data]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [impliedSemi]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000743d28]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000743d70]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [data]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [isLit]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [impliedSemi]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000743e18]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{fmt Fprintf}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt panic\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [next]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [wroteNewline droppedFF]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [ch]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [ch]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeByte}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [impliedSemi]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00075a0c0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00075a108]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeString}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00075a138]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func flush\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [wroteNewline droppedFF]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeWhitespace}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func getDoc\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func getLastComment\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func printNode\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [cnode ok]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [node]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [comments]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n ok]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [beg]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [end]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [doc]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [beg]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [com]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [e]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [end]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [j]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00075aae0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n ok]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00075ab58]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00075abb8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p nextComment}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ ok]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00075ad20]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p stmt}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p decl}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p spec}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ ok]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00075ae40]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p stmtList}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p declList}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p file}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func resetSpace\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00075b140]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00075b158]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func Write\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [m]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [b]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00075b350]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p resetSpace}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00075b458]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [m]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00075b4e8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [m]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p resetSpace}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p resetSpace}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00075b5a8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p resetSpace}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00075b698]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [m]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt panic\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p resetSpace}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fprint\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p init}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00075bae8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p flush}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [output]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [minwidth]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [padchar]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [padchar]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [twmode]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [minwidth]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [twmode]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [output]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [tw _]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func Fprint\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func Fprint\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func init\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00000c5e8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00000c618]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00000c630]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00000c660]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00000c690]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00000c6d8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00000c6f0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func internalError\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{fmt Print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{fmt Println}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt panic\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func commentsHaveNewline\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [line]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [t]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func nextComment\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [c]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [list]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00000ca68]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00000ca80]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00000cae0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00000cb88]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func commentBefore\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func commentSizeBefore\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00000cde0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [size]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [size]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p nextComment}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func recordLine\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00000cf78]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func linesFrom\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func posFor\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func lineFor\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00000d218]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00000d230]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func writeLineDirective\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00000d410]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00000d488]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00000d500]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00000d590]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00000d5d8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func writeIndent\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00000d728]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00000d7a0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00000d7d0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00000d800]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func writeByte\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [ch]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [ch]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00000d938]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeIndent}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00000d9c8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00000da40]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00000da70]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00000daa0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00000dad0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00000db00]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00000db30]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00000db60]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func writeString\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeLineDirective}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeIndent}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00000de18]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00000dea8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00000df20]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00000df50]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00000dfc8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [nlines]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [ch]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [li]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000242150]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000242180]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0002421b0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0002421e0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [c]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000242210]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000242240]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000242270]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0002422a0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0002422b8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000242300]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func writeCommentPrefix\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeByte}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [hasSep]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [j]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0004a3260]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [hasSep]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [j]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeWhitespace}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [sep]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [sep]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeByte}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [droppedLinebreak]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [j]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0004a3b90]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0004d87b0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [droppedLinebreak]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [j]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeWhitespace}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeByte}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func isBlank\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func commonPrefix\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func trimRight\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func stripCommonPrefix\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [prefix]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [prefixSet]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0004e78f0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [prefix]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [prefixSet]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [prefix]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [line]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [prefix]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [lineOfStars]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [prefix]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [lineOfStars]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [first]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [prefix]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [suffix]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0004ef1a0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [suffix]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0004ef710 0xc0004ef770]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [suffix]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [prefix]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [last]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [closing]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [closing]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0007f0210]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [prefix]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0007f0450]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func writeComment\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [text]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [pos]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0002438d8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0002438d8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000243908]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeString}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [lines]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0007f0a80]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt stripCommonPrefix\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeByte}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [pos]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeString}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func writeCommentSuffix\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0007f0f90]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [needsLinebreak]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [wroteNewline]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [droppedFF]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0007f11a0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeWhitespace}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeByte}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [wroteNewline]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func containsLinebreak\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func intersperseComments\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeCommentPrefix}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeComment}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [last]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p nextComment}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [needsLinebreak]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [needsLinebreak]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeByte}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [needsLinebreak]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p internalError}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func writeWhitespace\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [ch]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p internalError}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000470588]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0007f86f0 0xc0007f8750]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeByte}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [l]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0004707f8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func nlimit\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func mayCombine\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [b]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [b]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [b]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [b]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [b]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [b]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func print\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000470d68]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000470dc8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [x]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000470e28]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeWhitespace}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000471878]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0007f9470]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00049e000]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00049e030]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [data]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [impliedSemi]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00049e360]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [data]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [isLit]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [impliedSemi]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00049e600]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [s]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p internalError}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0004d2b40]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0007f97a0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [data]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [impliedSemi]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0004d3ea8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0004f0ba0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [data]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [isLit]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [impliedSemi]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0007fe090]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{fmt Fprintf}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt panic\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [next]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [wroteNewline droppedFF]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [ch]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [ch]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeByte}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [impliedSemi]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0007fe330]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0007fe378]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeString}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0007fe3a8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func flush\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [wroteNewline droppedFF]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeWhitespace}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func getDoc\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func getLastComment\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func printNode\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [cnode ok]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [node]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [comments]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n ok]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [beg]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [end]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [doc]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [beg]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [com]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [e]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [end]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [j]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0007fed50]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n ok]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0007fedc8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0007fee28]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p nextComment}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ ok]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0007fef90]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p stmt}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p decl}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p spec}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ ok]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0007ff0b0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p stmtList}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p declList}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p file}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func resetSpace\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0007ff3b0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0007ff3c8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func Write\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [m]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [b]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0007ff5c0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p resetSpace}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0007ff6c8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [m]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0007ff758]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [m]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p resetSpace}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p resetSpace}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0007ff818]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p resetSpace}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0007ff908]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [m]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt panic\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p resetSpace}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fprint\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p init}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0007ffd58]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p flush}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [output]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [minwidth]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [padchar]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [padchar]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [twmode]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [minwidth]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [twmode]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [output]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [tw _]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func Fprint\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func Fprint\n[Go+ CI/Test]   | === RUN   TestFromGopPrinter/format.Source_printer_test.go\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func format\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [f err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{ast FileExports}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00027c108]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [cfg]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00027c180]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [res]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func TestLineComments\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [fset]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [f err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt panic\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [fset]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt Fprint\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [nlines]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{t Errorf}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{t Errorf}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func init\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt panic\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [s]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt panic\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func testComment\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000273260]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [offs]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{buf Reset}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{t Error}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{t Fatalf}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func TestBadComments\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{t Parallel}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [f err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{t Error}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [comment]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [pos]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{t Error}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt testComment\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt testComment\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt testComment\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt testComment\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func Visit\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [ident ok]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func idents\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [v]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{ast Walk}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt close\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func identCount\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func TestSourcePos\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [f1 err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{t Fatal}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{t Fatal}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [f2 err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{t Fatalf}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n1]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n2]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{t Fatal}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{t Errorf}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i2range]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i2]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{t Errorf}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [l1]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [l2]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{t Errorf}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{t Logf}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func TestIssue5945\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [f1 err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{t Fatal}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{t Fatal}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [got]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{t Errorf}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func TestDeclLists\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [file err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt panic\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt panic\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [out]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{t Errorf}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func TestStmtLists\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [file err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt panic\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt panic\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [out]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{t Errorf}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func TestBaseIndent\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{t Parallel}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [src err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt panic\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [file err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt panic\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [indent]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [indent]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{t Run}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{t Parallel}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{0xc0003bc360 Fprint}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [lines]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{t Errorf}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{t Parallel}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{0xc0003bc360 Fprint}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [lines]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{t Errorf}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func TestFuncType\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [src]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{t Fatal}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [got]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{t Fatalf}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func Write\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00027dbd8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func TestWriteErrors\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{t Parallel}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [src err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt panic\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [file err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt panic\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [lw]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{t Fatal}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{t Fatal}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func TestX\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{t Error}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func TestCommentedNode\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [fset]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [f err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{t Fatal}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{t Fatal}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{t Errorf}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{buf Reset}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{t Fatal}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{t Errorf}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func TestIssue11151\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [fset]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [f err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{t Fatal}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt Fprint\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [got]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{t Errorf}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{t Errorf}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func TestParenthesizedDecl\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [fset]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [f err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{t Fatal}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{t Fatal}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [original]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0003e83f0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{buf Reset}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{t Fatal}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [noparen]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{t Errorf}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func TestIssue32854\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [src]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [fset]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [file err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt panic\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [fd]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [ret]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0003dbb30]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{t Fatal}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [want]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [got]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{t Fatalf}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func TestStripParens\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [x]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ ok]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{t Fatal}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [x]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ ok]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{t Fatal}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [x]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [y ok]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{t Fatal}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ ok]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{t Fatal}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [x]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ ok]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{t Fatal}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [x]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ ok]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{t Fatal}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [x]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ ok]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{t Fatal}\n[Go+ CI/Test]   | === RUN   TestFromGopPrinter/format.Node_printer_test.go\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func format\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [f err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{ast FileExports}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0003e9cc8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [cfg]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0003e9d40]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [res]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func TestLineComments\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [fset]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [f err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt panic\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [fset]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt Fprint\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [nlines]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{t Errorf}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{t Errorf}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func init\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt panic\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [s]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt panic\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func testComment\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000467470]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [offs]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{buf Reset}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{t Error}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{t Fatalf}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func TestBadComments\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{t Parallel}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [f err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{t Error}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [comment]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [pos]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{t Error}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt testComment\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt testComment\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt testComment\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt testComment\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func Visit\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [ident ok]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func idents\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [v]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{ast Walk}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt close\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func identCount\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func TestSourcePos\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [f1 err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{t Fatal}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{t Fatal}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [f2 err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{t Fatalf}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n1]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n2]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{t Fatal}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{t Errorf}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i2range]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i2]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{t Errorf}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [l1]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [l2]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{t Errorf}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{t Logf}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func TestIssue5945\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [f1 err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{t Fatal}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{t Fatal}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [got]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{t Errorf}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func TestDeclLists\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [file err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt panic\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt panic\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [out]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{t Errorf}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func TestStmtLists\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [file err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt panic\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt panic\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [out]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{t Errorf}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func TestBaseIndent\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{t Parallel}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [src err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt panic\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [file err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt panic\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [indent]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [indent]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{t Run}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{t Parallel}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{0xc00048ade0 Fprint}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [lines]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{t Errorf}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{t Parallel}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{0xc00048ade0 Fprint}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [lines]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{t Errorf}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func TestFuncType\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [src]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{t Fatal}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [got]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{t Fatalf}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func Write\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0004757a0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func TestWriteErrors\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{t Parallel}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [src err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt panic\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [file err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt panic\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [lw]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{t Fatal}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{t Fatal}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func TestX\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{t Error}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func TestCommentedNode\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [fset]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [f err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{t Fatal}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{t Fatal}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{t Errorf}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{buf Reset}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{t Fatal}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{t Errorf}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func TestIssue11151\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [fset]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [f err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{t Fatal}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt Fprint\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [got]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{t Errorf}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{t Errorf}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func TestParenthesizedDecl\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [fset]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [f err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{t Fatal}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{t Fatal}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [original]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000475fb0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{buf Reset}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{t Fatal}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [noparen]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{t Errorf}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func TestIssue32854\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [src]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [fset]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [file err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt panic\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [fd]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [ret]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000493d40]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{t Fatal}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [want]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [got]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{t Fatalf}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func TestStripParens\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [x]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ ok]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{t Fatal}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [x]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ ok]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{t Fatal}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [x]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [y ok]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{t Fatal}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ ok]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{t Fatal}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [x]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ ok]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{t Fatal}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [x]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ ok]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{t Fatal}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [x]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ ok]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{t Fatal}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func format\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [f err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{ast FileExports}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0004bb860]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [cfg]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0004bb8d8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [res]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func TestLineComments\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [fset]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [f err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt panic\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [fset]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt Fprint\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [nlines]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{t Errorf}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{t Errorf}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func init\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt panic\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [s]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt panic\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func testComment\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000575620]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [offs]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{buf Reset}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{t Error}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{t Fatalf}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func TestBadComments\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{t Parallel}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [f err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{t Error}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [comment]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [pos]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{t Error}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt testComment\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt testComment\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt testComment\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt testComment\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func Visit\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [ident ok]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func idents\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [v]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{ast Walk}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt close\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func identCount\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func TestSourcePos\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [f1 err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{t Fatal}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{t Fatal}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [f2 err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{t Fatalf}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n1]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n2]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{t Fatal}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{t Errorf}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i2range]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i2]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{t Errorf}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [l1]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [l2]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{t Errorf}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{t Logf}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func TestIssue5945\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [f1 err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{t Fatal}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{t Fatal}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [got]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{t Errorf}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func TestDeclLists\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [file err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt panic\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt panic\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [out]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{t Errorf}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func TestStmtLists\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [file err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt panic\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt panic\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [out]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{t Errorf}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func TestBaseIndent\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{t Parallel}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [src err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt panic\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [file err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt panic\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [indent]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [indent]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{t Run}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{t Parallel}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{0xc0005a5840 Fprint}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [lines]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{t Errorf}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{t Parallel}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{0xc0005a5840 Fprint}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [lines]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{t Errorf}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func TestFuncType\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [src]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{t Fatal}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [got]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{t Fatalf}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func Write\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000593338]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func TestWriteErrors\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{t Parallel}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [src err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt panic\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [file err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt panic\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [lw]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{t Fatal}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{t Fatal}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func TestX\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{t Error}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func TestCommentedNode\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [fset]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [f err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{t Fatal}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{t Fatal}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{t Errorf}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{buf Reset}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{t Fatal}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{t Errorf}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func TestIssue11151\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [fset]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [f err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{t Fatal}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt Fprint\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [got]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{t Errorf}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{t Errorf}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func TestParenthesizedDecl\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [fset]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [f err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{t Fatal}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{t Fatal}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [original]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000593b48]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{buf Reset}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{t Fatal}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [noparen]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{t Errorf}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func TestIssue32854\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [src]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [fset]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [file err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt panic\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [fd]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [ret]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005a9ef0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{t Fatal}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [want]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [got]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{t Fatalf}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func TestStripParens\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [x]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ ok]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{t Fatal}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [x]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ ok]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{t Fatal}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [x]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [y ok]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{t Fatal}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ ok]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{t Fatal}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [x]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ ok]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{t Fatal}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [x]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ ok]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{t Fatal}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [x]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ ok]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{t Fatal}\n[Go+ CI/Test]   | --- PASS: TestFromGopPrinter (0.20s)\n[Go+ CI/Test]   |     --- PASS: TestFromGopPrinter/format.Source_nodes.go (0.02s)\n[Go+ CI/Test]   |     --- PASS: TestFromGopPrinter/format.Node_nodes.go (0.09s)\n[Go+ CI/Test]   |     --- PASS: TestFromGopPrinter/format.Source_printer.go (0.03s)\n[Go+ CI/Test]   |     --- PASS: TestFromGopPrinter/format.Node_printer.go (0.05s)\n[Go+ CI/Test]   |     --- PASS: TestFromGopPrinter/format.Source_printer_test.go (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestFromGopPrinter/format.Node_printer_test.go (0.01s)\n[Go+ CI/Test]   | === RUN   TestFromTestdata\n[Go+ CI/Test]   | === RUN   TestFromTestdata/format.Source_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/printer/_testdata/02-Var-and-operator/var_and_op.gop\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func main\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [x]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [y z]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | === RUN   TestFromTestdata/format.Node_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/printer/_testdata/02-Var-and-operator/var_and_op.gop\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func main\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [x]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [y z]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | === RUN   TestFromTestdata/format.Source_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/printer/_testdata/03-Import-go-package/import.gop\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func main\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [x]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{fmt Println}\n[Go+ CI/Test]   | === RUN   TestFromTestdata/format.Node_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/printer/_testdata/03-Import-go-package/import.gop\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func main\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [x]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{fmt Println}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func main\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [x]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{fmt Println}\n[Go+ CI/Test]   | === RUN   TestFromTestdata/format.Source_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/printer/_testdata/04-Func/func.gop\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func foo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func printf\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func bar\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt foo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func main\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt bar\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{fmt Println}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{fmt Println}\n[Go+ CI/Test]   | === RUN   TestFromTestdata/format.Node_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/printer/_testdata/04-Func/func.gop\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func foo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func printf\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func bar\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt foo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func main\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt bar\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{fmt Println}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{fmt Println}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func foo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func printf\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func bar\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt foo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func main\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt bar\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{fmt Println}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{fmt Println}\n[Go+ CI/Test]   | === RUN   TestFromTestdata/format.Source_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/printer/_testdata/05-Closure/closure.gop\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func main\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [foo]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{fmt Println}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [printf]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [bar]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt foo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt foo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt bar\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{fmt Println}\n[Go+ CI/Test]   | === RUN   TestFromTestdata/format.Node_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/printer/_testdata/05-Closure/closure.gop\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func main\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [foo]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{fmt Println}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [printf]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [bar]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt foo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt foo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt bar\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{fmt Println}\n[Go+ CI/Test]   | === RUN   TestFromTestdata/format.Source_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/printer/_testdata/06-String-Map-Array-Slice/datastruct.gop\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func main\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [x]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [y]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [a]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [b]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [c]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000684f30 0xc000684f60]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000685020 0xc000685050]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [arr]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [title]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | === RUN   TestFromTestdata/format.Node_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/printer/_testdata/06-String-Map-Array-Slice/datastruct.gop\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func main\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [x]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [y]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [a]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [b]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [c]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006855f0 0xc000685620]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006856e0 0xc000685710]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [arr]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [title]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | === RUN   TestFromTestdata/format.Source_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/printer/_testdata/07-MapLit/maplit.gop\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func main\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [x]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [y]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | === RUN   TestFromTestdata/format.Node_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/printer/_testdata/07-MapLit/maplit.gop\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func main\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [x]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [y]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | === RUN   TestFromTestdata/format.Source_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/printer/_testdata/08-SliceLit/slicelit.gop\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func main\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [x]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [y]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [z]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | === RUN   TestFromTestdata/format.Node_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/printer/_testdata/08-SliceLit/slicelit.gop\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func main\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [x]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [y]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [z]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | === RUN   TestFromTestdata/format.Source_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/printer/_testdata/09-IfElse-SwitchCase/flow.gop\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func main\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [x]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [t]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [x]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [x]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [x]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [s]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [x]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [x]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [x]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [v]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [x]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [x]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [x]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [v]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [x]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [x]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [x]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [z]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | === RUN   TestFromTestdata/format.Node_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/printer/_testdata/09-IfElse-SwitchCase/flow.gop\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func main\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [x]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [t]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [x]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [x]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [x]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [s]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [x]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [x]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [x]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [v]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [x]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [x]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [x]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [v]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [x]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [x]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [x]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [z]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | === RUN   TestFromTestdata/format.Source_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/printer/_testdata/10-List-comprehension/list_comprehens.gop\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func main\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [y]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [y]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [z]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [arr]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [x]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | === RUN   TestFromTestdata/format.Node_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/printer/_testdata/10-List-comprehension/list_comprehens.gop\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func main\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [y]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [y]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [z]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [arr]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [x]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | === RUN   TestFromTestdata/format.Source_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/printer/_testdata/11-Map-comprehension/map_comprehens.gop\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func main\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [y]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [y]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [z]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | === RUN   TestFromTestdata/format.Node_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/printer/_testdata/11-Map-comprehension/map_comprehens.gop\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func main\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [y]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [y]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [z]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | === RUN   TestFromTestdata/format.Source_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/printer/_testdata/12-Select-comprehension/select.gop\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func main\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [a]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [where]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [at ok]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | === RUN   TestFromTestdata/format.Node_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/printer/_testdata/12-Select-comprehension/select.gop\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func main\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [a]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [where]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [at ok]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | === RUN   TestFromTestdata/format.Source_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/printer/_testdata/12-Select-comprehension2/findscore.gop\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func findScore\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func main\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [a]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | === RUN   TestFromTestdata/format.Node_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/printer/_testdata/12-Select-comprehension2/findscore.gop\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func findScore\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func main\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [a]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | === RUN   TestFromTestdata/format.Source_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/printer/_testdata/13-Exists-comprehension/exists.gop\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func main\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [a]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [hasFullMark]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [hasFailed]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | === RUN   TestFromTestdata/format.Node_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/printer/_testdata/13-Exists-comprehension/exists.gop\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func main\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [a]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [hasFullMark]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [hasFailed]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | === RUN   TestFromTestdata/format.Source_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/printer/_testdata/14-Using-goplus-in-Go/foo/foo.gop\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func ReverseMap\n[Go+ CI/Test]   | === RUN   TestFromTestdata/format.Node_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/printer/_testdata/14-Using-goplus-in-Go/foo/foo.gop\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func ReverseMap\n[Go+ CI/Test]   | === RUN   TestFromTestdata/format.Source_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/printer/_testdata/14-Using-goplus-in-Go/foo/foo_test.gop\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func TestReverseMap\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [out]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{t Fatal}\n[Go+ CI/Test]   | === RUN   TestFromTestdata/format.Node_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/printer/_testdata/14-Using-goplus-in-Go/foo/foo_test.gop\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func TestReverseMap\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [out]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{t Fatal}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func TestReverseMap\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [out]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{t Fatal}\n[Go+ CI/Test]   | === RUN   TestFromTestdata/format.Source_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/printer/_testdata/14-Using-goplus-in-Go/foo/footest_test.gop\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func TestReverseMap\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [out]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{t Fatal}\n[Go+ CI/Test]   | === RUN   TestFromTestdata/format.Node_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/printer/_testdata/14-Using-goplus-in-Go/foo/footest_test.gop\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func TestReverseMap\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [out]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{t Fatal}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func TestReverseMap\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [out]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{t Fatal}\n[Go+ CI/Test]   | === RUN   TestFromTestdata/format.Source_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/printer/_testdata/15-ErrWrap/err_wrap.gop\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func add\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func addSafe\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func main\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [sum err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | === RUN   TestFromTestdata/format.Node_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/printer/_testdata/15-ErrWrap/err_wrap.gop\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func add\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func addSafe\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func main\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [sum err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func add\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func addSafe\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func main\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [sum err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | === RUN   TestFromTestdata/format.Source_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/printer/_testdata/16-Fib/fib.gop\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fib\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func main\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | === RUN   TestFromTestdata/format.Node_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/printer/_testdata/16-Fib/fib.gop\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fib\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func main\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | === RUN   TestFromTestdata/format.Source_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/printer/_testdata/17-Fibtc/fibtc.gop\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibtc\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func main\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | === RUN   TestFromTestdata/format.Node_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/printer/_testdata/17-Fibtc/fibtc.gop\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibtc\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func main\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | === RUN   TestFromTestdata/format.Source_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/printer/_testdata/18-Rational/rational.gop\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func main\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [c]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [a]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | === RUN   TestFromTestdata/format.Node_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/printer/_testdata/18-Rational/rational.gop\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func main\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [c]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [a]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | === RUN   TestFromTestdata/format.Source_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/printer/_testdata/21-Break-continue-goto/flow.gop\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func main\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [sum]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [arr]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [sum]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [sum]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [sum]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [z]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [v]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | === RUN   TestFromTestdata/format.Node_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/printer/_testdata/21-Break-continue-goto/flow.gop\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func main\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [sum]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [arr]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [sum]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [sum]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [sum]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [z]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [v]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | === RUN   TestFromTestdata/format.Source_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/printer/_testdata/22-For-loop/for.gop\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func main\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [sum]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [sum]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [fns]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [v]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000889aa0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [sum]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [sum]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [sum]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [v]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000889ec0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [sum]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [x]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [sum]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [sum]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [arr]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [sum]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | === RUN   TestFromTestdata/format.Node_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/printer/_testdata/22-For-loop/for.gop\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func main\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [sum]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [sum]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [fns]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [v]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000892a80]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [sum]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [sum]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [sum]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [v]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000892ea0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [sum]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [x]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [sum]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [sum]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [arr]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [sum]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | === RUN   TestFromTestdata/format.Source_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/printer/_testdata/23-Defer/defer.gop\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func f\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [x]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func g\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [x]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [x]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func h\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [v]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [x]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func main\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | === RUN   TestFromTestdata/format.Node_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/printer/_testdata/23-Defer/defer.gop\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func f\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [x]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func g\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [x]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [x]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func h\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [v]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [x]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func main\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | === RUN   TestFromTestdata/format.Source_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/printer/_testdata/24-Goroutine/goroutine.gop\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func main\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{time Sleep}\n[Go+ CI/Test]   | === RUN   TestFromTestdata/format.Node_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/printer/_testdata/24-Goroutine/goroutine.gop\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func main\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{time Sleep}\n[Go+ CI/Test]   | === RUN   TestFromTestdata/format.Source_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/printer/_testdata/25-Struct/struct.gop\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func main\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [a]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [b]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [c]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00084db00 0xc00084db18]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00084db30 0xc00084db48]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00084db60 0xc00084db78]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | === RUN   TestFromTestdata/format.Node_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/printer/_testdata/25-Struct/struct.gop\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func main\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [a]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [b]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [c]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00084dd58 0xc00084dd70]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00084dd88 0xc00084dda0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00084ddb8 0xc00084ddd0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | === RUN   TestFromTestdata/format.Source_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/printer/_testdata/26-Method/method.gop\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func SetName\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00084df50]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func SetAge\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [age]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00084dfc8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func AddFriends\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00000c078]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func Foo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func main\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [p]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00000c0c0 0xc00000c0d8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p SetName}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p SetAge}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p AddFriends}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [a]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [m]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{m Foo}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | === RUN   TestFromTestdata/format.Node_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/printer/_testdata/26-Method/method.gop\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func SetName\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00000c378]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func SetAge\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [age]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00000c3f0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func AddFriends\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00000c480]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func Foo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func main\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [p]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00000c4c8 0xc00000c4e0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p SetName}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p SetAge}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p AddFriends}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [a]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [m]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{m Foo}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | === RUN   TestFromTestdata/format.Source_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/printer/_testdata/27-Func-Set/func.gop\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func A\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00000c7e0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00000c810]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00000c840]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00000c870]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func Index\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func main\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [a1]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [a2]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [a3]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [c]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt A\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00000c930]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00000c960]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00000c990]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | === RUN   TestFromTestdata/format.Node_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/printer/_testdata/27-Func-Set/func.gop\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func A\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00000cc48]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00000cc78]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00000cca8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00000ccd8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func Index\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func main\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [a1]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [a2]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [a3]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [c]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt A\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00000cd98]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00000cdc8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00000cdf8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | === RUN   TestFromTestdata/format.Source_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/printer/_testdata/28-Chan/chan.gop\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func main\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [c]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt close\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [d]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [e ok]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | === RUN   TestFromTestdata/format.Node_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/printer/_testdata/28-Chan/chan.gop\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func main\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [c]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt close\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [d]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [e ok]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | === RUN   TestFromTestdata/format.Source_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/printer/_testdata/29-CompareToNil/ref.gop\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func foo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func foo1\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func foo2\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func foo3\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func main\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | === RUN   TestFromTestdata/format.Node_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/printer/_testdata/29-CompareToNil/ref.gop\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func foo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func foo1\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func foo2\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func foo3\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func main\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | === RUN   TestFromTestdata/format.Source_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/printer/_testdata/30-Recover/recover.gop\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func main\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt panic\n[Go+ CI/Test]   | === RUN   TestFromTestdata/format.Node_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/printer/_testdata/30-Recover/recover.gop\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func main\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt panic\n[Go+ CI/Test]   | === RUN   TestFromTestdata/format.Source_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/printer/_testdata/31-Builtin-Typecast/builtin_and_typecast.gop\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func main\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [a]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [a]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [b]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [c]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [b]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | === RUN   TestFromTestdata/format.Node_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/printer/_testdata/31-Builtin-Typecast/builtin_and_typecast.gop\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func main\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [a]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [a]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [b]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [c]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [b]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | === RUN   TestFromTestdata/format.Source_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/printer/_testdata/32-Import-gop-package/import_gop_pkg.gop\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func main\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [rmap]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | === RUN   TestFromTestdata/format.Node_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/printer/_testdata/32-Import-gop-package/import_gop_pkg.gop\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func main\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [rmap]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | === RUN   TestFromTestdata/format.Source_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/printer/_testdata/33-Interface/shape.gop\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func Area\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func Area\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func Area\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [s]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [s]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func main\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [rect]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [circle]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | === RUN   TestFromTestdata/format.Node_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/printer/_testdata/33-Interface/shape.gop\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func Area\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func Area\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func Area\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [s]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [s]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func main\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [rect]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [circle]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | === RUN   TestFromTestdata/format.Source_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/printer/_testdata/34-Type-assert/type_assert.gop\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func foo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ ok]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func add\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [a]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func main\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | === RUN   TestFromTestdata/format.Node_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/printer/_testdata/34-Type-assert/type_assert.gop\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func foo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ ok]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func add\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [a]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func main\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | === RUN   TestFromTestdata/format.Source_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/printer/_testdata/35-Chan-select/select.gop\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func consume\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [c]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func product\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func main\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [from]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [xchg]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt close\n[Go+ CI/Test]   | === RUN   TestFromTestdata/format.Node_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/printer/_testdata/35-Chan-select/select.gop\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func consume\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [c]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func product\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func main\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [from]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [xchg]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt close\n[Go+ CI/Test]   | === RUN   TestFromTestdata/format.Source_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/printer/_testdata/36-Auto-Property/autoprop.gop\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func main\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [script]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [doc]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | === RUN   TestFromTestdata/format.Node_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/printer/_testdata/36-Auto-Property/autoprop.gop\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func main\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [script]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [doc]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func main\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [script]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [doc]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | === RUN   TestFromTestdata/format.Source_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/printer/_testdata/37-Cmdline/cmdline.gop\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func main\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | === RUN   TestFromTestdata/format.Node_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/printer/_testdata/37-Cmdline/cmdline.gop\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func main\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | === RUN   TestFromTestdata/format.Source_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/printer/_testdata/38-Overload-operator/overload_op.gop\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func Int\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func +\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func +=\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{0xc0002425d0 Add}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func -\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func main\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [a]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [a]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | === RUN   TestFromTestdata/format.Node_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/printer/_testdata/38-Overload-operator/overload_op.gop\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func Int\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func +\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func +=\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{0xc000242888 Add}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func -\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func main\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [a]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [a]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | === RUN   TestFromTestdata/format.Source_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/printer/_testdata/39-Lambda-expression/lambda.gop\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func Map\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func main\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | === RUN   TestFromTestdata/format.Node_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/printer/_testdata/39-Lambda-expression/lambda.gop\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func Map\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func main\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | === RUN   TestFromTestdata/format.Source_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/printer/_testdata/40-Deduce-struct-type/deduce.gop\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func foo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func main\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [ret]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | === RUN   TestFromTestdata/format.Node_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/printer/_testdata/40-Deduce-struct-type/deduce.gop\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func foo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func main\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [ret]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | === RUN   TestFromTestdata/format.Source_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/printer/_testdata/41-UDT-RangeForEach/udt_range.gop\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func Gop_Enum\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt proc\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt proc\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func main\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | === RUN   TestFromTestdata/format.Node_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/printer/_testdata/41-UDT-RangeForEach/udt_range.gop\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func Gop_Enum\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt proc\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt proc\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func main\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | === RUN   TestFromTestdata/format.Source_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/printer/_testdata/42-UDT-RangeIterator/udt_range_iter.gop\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func Next\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [key val ok]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func newFoo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func Gop_Enum\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func main\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [obj]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | === RUN   TestFromTestdata/format.Node_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/printer/_testdata/42-UDT-RangeIterator/udt_range_iter.gop\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func Next\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [key val ok]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func newFoo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func Gop_Enum\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func main\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [obj]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | === RUN   TestFromTestdata/format.Source_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/printer/_testdata/43-RangeExpr/rangeexpr.gop\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func main\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | === RUN   TestFromTestdata/format.Node_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/printer/_testdata/43-RangeExpr/rangeexpr.gop\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func main\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | --- PASS: TestFromTestdata (0.05s)\n[Go+ CI/Test]   |     --- PASS: TestFromTestdata/format.Source_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/printer/_testdata/02-Var-and-operator/var_and_op.gop (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestFromTestdata/format.Node_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/printer/_testdata/02-Var-and-operator/var_and_op.gop (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestFromTestdata/format.Source_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/printer/_testdata/03-Import-go-package/import.gop (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestFromTestdata/format.Node_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/printer/_testdata/03-Import-go-package/import.gop (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestFromTestdata/format.Source_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/printer/_testdata/04-Func/func.gop (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestFromTestdata/format.Node_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/printer/_testdata/04-Func/func.gop (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestFromTestdata/format.Source_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/printer/_testdata/05-Closure/closure.gop (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestFromTestdata/format.Node_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/printer/_testdata/05-Closure/closure.gop (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestFromTestdata/format.Source_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/printer/_testdata/06-String-Map-Array-Slice/datastruct.gop (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestFromTestdata/format.Node_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/printer/_testdata/06-String-Map-Array-Slice/datastruct.gop (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestFromTestdata/format.Source_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/printer/_testdata/07-MapLit/maplit.gop (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestFromTestdata/format.Node_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/printer/_testdata/07-MapLit/maplit.gop (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestFromTestdata/format.Source_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/printer/_testdata/08-SliceLit/slicelit.gop (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestFromTestdata/format.Node_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/printer/_testdata/08-SliceLit/slicelit.gop (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestFromTestdata/format.Source_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/printer/_testdata/09-IfElse-SwitchCase/flow.gop (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestFromTestdata/format.Node_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/printer/_testdata/09-IfElse-SwitchCase/flow.gop (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestFromTestdata/format.Source_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/printer/_testdata/10-List-comprehension/list_comprehens.gop (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestFromTestdata/format.Node_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/printer/_testdata/10-List-comprehension/list_comprehens.gop (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestFromTestdata/format.Source_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/printer/_testdata/11-Map-comprehension/map_comprehens.gop (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestFromTestdata/format.Node_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/printer/_testdata/11-Map-comprehension/map_comprehens.gop (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestFromTestdata/format.Source_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/printer/_testdata/12-Select-comprehension/select.gop (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestFromTestdata/format.Node_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/printer/_testdata/12-Select-comprehension/select.gop (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestFromTestdata/format.Source_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/printer/_testdata/12-Select-comprehension2/findscore.gop (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestFromTestdata/format.Node_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/printer/_testdata/12-Select-comprehension2/findscore.gop (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestFromTestdata/format.Source_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/printer/_testdata/13-Exists-comprehension/exists.gop (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestFromTestdata/format.Node_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/printer/_testdata/13-Exists-comprehension/exists.gop (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestFromTestdata/format.Source_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/printer/_testdata/14-Using-goplus-in-Go/foo/foo.gop (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestFromTestdata/format.Node_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/printer/_testdata/14-Using-goplus-in-Go/foo/foo.gop (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestFromTestdata/format.Source_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/printer/_testdata/14-Using-goplus-in-Go/foo/foo_test.gop (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestFromTestdata/format.Node_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/printer/_testdata/14-Using-goplus-in-Go/foo/foo_test.gop (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestFromTestdata/format.Source_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/printer/_testdata/14-Using-goplus-in-Go/foo/footest_test.gop (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestFromTestdata/format.Node_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/printer/_testdata/14-Using-goplus-in-Go/foo/footest_test.gop (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestFromTestdata/format.Source_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/printer/_testdata/15-ErrWrap/err_wrap.gop (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestFromTestdata/format.Node_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/printer/_testdata/15-ErrWrap/err_wrap.gop (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestFromTestdata/format.Source_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/printer/_testdata/16-Fib/fib.gop (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestFromTestdata/format.Node_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/printer/_testdata/16-Fib/fib.gop (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestFromTestdata/format.Source_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/printer/_testdata/17-Fibtc/fibtc.gop (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestFromTestdata/format.Node_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/printer/_testdata/17-Fibtc/fibtc.gop (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestFromTestdata/format.Source_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/printer/_testdata/18-Rational/rational.gop (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestFromTestdata/format.Node_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/printer/_testdata/18-Rational/rational.gop (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestFromTestdata/format.Source_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/printer/_testdata/21-Break-continue-goto/flow.gop (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestFromTestdata/format.Node_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/printer/_testdata/21-Break-continue-goto/flow.gop (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestFromTestdata/format.Source_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/printer/_testdata/22-For-loop/for.gop (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestFromTestdata/format.Node_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/printer/_testdata/22-For-loop/for.gop (0.03s)\n[Go+ CI/Test]   |     --- PASS: TestFromTestdata/format.Source_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/printer/_testdata/23-Defer/defer.gop (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestFromTestdata/format.Node_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/printer/_testdata/23-Defer/defer.gop (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestFromTestdata/format.Source_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/printer/_testdata/24-Goroutine/goroutine.gop (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestFromTestdata/format.Node_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/printer/_testdata/24-Goroutine/goroutine.gop (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestFromTestdata/format.Source_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/printer/_testdata/25-Struct/struct.gop (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestFromTestdata/format.Node_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/printer/_testdata/25-Struct/struct.gop (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestFromTestdata/format.Source_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/printer/_testdata/26-Method/method.gop (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestFromTestdata/format.Node_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/printer/_testdata/26-Method/method.gop (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestFromTestdata/format.Source_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/printer/_testdata/27-Func-Set/func.gop (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestFromTestdata/format.Node_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/printer/_testdata/27-Func-Set/func.gop (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestFromTestdata/format.Source_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/printer/_testdata/28-Chan/chan.gop (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestFromTestdata/format.Node_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/printer/_testdata/28-Chan/chan.gop (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestFromTestdata/format.Source_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/printer/_testdata/29-CompareToNil/ref.gop (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestFromTestdata/format.Node_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/printer/_testdata/29-CompareToNil/ref.gop (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestFromTestdata/format.Source_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/printer/_testdata/30-Recover/recover.gop (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestFromTestdata/format.Node_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/printer/_testdata/30-Recover/recover.gop (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestFromTestdata/format.Source_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/printer/_testdata/31-Builtin-Typecast/builtin_and_typecast.gop (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestFromTestdata/format.Node_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/printer/_testdata/31-Builtin-Typecast/builtin_and_typecast.gop (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestFromTestdata/format.Source_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/printer/_testdata/32-Import-gop-package/import_gop_pkg.gop (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestFromTestdata/format.Node_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/printer/_testdata/32-Import-gop-package/import_gop_pkg.gop (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestFromTestdata/format.Source_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/printer/_testdata/33-Interface/shape.gop (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestFromTestdata/format.Node_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/printer/_testdata/33-Interface/shape.gop (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestFromTestdata/format.Source_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/printer/_testdata/34-Type-assert/type_assert.gop (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestFromTestdata/format.Node_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/printer/_testdata/34-Type-assert/type_assert.gop (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestFromTestdata/format.Source_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/printer/_testdata/35-Chan-select/select.gop (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestFromTestdata/format.Node_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/printer/_testdata/35-Chan-select/select.gop (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestFromTestdata/format.Source_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/printer/_testdata/36-Auto-Property/autoprop.gop (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestFromTestdata/format.Node_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/printer/_testdata/36-Auto-Property/autoprop.gop (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestFromTestdata/format.Source_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/printer/_testdata/37-Cmdline/cmdline.gop (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestFromTestdata/format.Node_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/printer/_testdata/37-Cmdline/cmdline.gop (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestFromTestdata/format.Source_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/printer/_testdata/38-Overload-operator/overload_op.gop (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestFromTestdata/format.Node_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/printer/_testdata/38-Overload-operator/overload_op.gop (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestFromTestdata/format.Source_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/printer/_testdata/39-Lambda-expression/lambda.gop (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestFromTestdata/format.Node_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/printer/_testdata/39-Lambda-expression/lambda.gop (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestFromTestdata/format.Source_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/printer/_testdata/40-Deduce-struct-type/deduce.gop (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestFromTestdata/format.Node_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/printer/_testdata/40-Deduce-struct-type/deduce.gop (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestFromTestdata/format.Source_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/printer/_testdata/41-UDT-RangeForEach/udt_range.gop (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestFromTestdata/format.Node_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/printer/_testdata/41-UDT-RangeForEach/udt_range.gop (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestFromTestdata/format.Source_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/printer/_testdata/42-UDT-RangeIterator/udt_range_iter.gop (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestFromTestdata/format.Node_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/printer/_testdata/42-UDT-RangeIterator/udt_range_iter.gop (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestFromTestdata/format.Source_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/printer/_testdata/43-RangeExpr/rangeexpr.gop (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestFromTestdata/format.Node_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/printer/_testdata/43-RangeExpr/rangeexpr.gop (0.00s)\n[Go+ CI/Test]   | === RUN   TestFromParse\n[Go+ CI/Test]   | === RUN   TestFromParse/format.Source_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/_testdata/autoprop/goto.gop\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func main\n[Go+ CI/Test]   | === RUN   TestFromParse/format.Node_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/_testdata/autoprop/goto.gop\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func main\n[Go+ CI/Test]   | === RUN   TestFromParse/format.Source_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/_testdata/build/build.gop\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func main\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [title]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [s]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | === RUN   TestFromParse/format.Node_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/_testdata/build/build.gop\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func main\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [title]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [s]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | === RUN   TestFromParse/format.Source_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/_testdata/c2gohello/hello.gop\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func main\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{C printf}\n[Go+ CI/Test]   | === RUN   TestFromParse/format.Node_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/_testdata/c2gohello/hello.gop\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func main\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{C printf}\n[Go+ CI/Test]   | === RUN   TestFromParse/format.Source_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/_testdata/cmdlinestyle1/cmd.gop\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func main\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | === RUN   TestFromParse/format.Node_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/_testdata/cmdlinestyle1/cmd.gop\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func main\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | === RUN   TestFromParse/format.Source_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/_testdata/cmdlinestyle2/cmd2.gop\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func main\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt x\n[Go+ CI/Test]   | === RUN   TestFromParse/format.Node_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/_testdata/cmdlinestyle2/cmd2.gop\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func main\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt x\n[Go+ CI/Test]   | === RUN   TestFromParse/format.Source_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/_testdata/cmdlinestyle3/cmd3.gop\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func main\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | === RUN   TestFromParse/format.Node_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/_testdata/cmdlinestyle3/cmd3.gop\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func main\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | === RUN   TestFromParse/format.Source_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/_testdata/cmdlinestyle4/cmd4.gop\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func call\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt fn\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt fn\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func main\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt call\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt call\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt call\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | === RUN   TestFromParse/format.Node_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/_testdata/cmdlinestyle4/cmd4.gop\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func call\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt fn\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt fn\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func main\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt call\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt call\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt call\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | === RUN   TestFromParse/format.Source_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/_testdata/collection/collection.gop\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func Index\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func Include\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func Any\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func All\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func Filter\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [vsf]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [vsf]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func Map\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [vsm]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0002f1410]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func main\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{fmt Println}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{fmt Println}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{fmt Println}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{fmt Println}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{fmt Println}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{fmt Println}\n[Go+ CI/Test]   | === RUN   TestFromParse/format.Node_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/_testdata/collection/collection.gop\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func Index\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func Include\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func Any\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func All\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func Filter\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [vsf]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [vsf]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func Map\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [vsm]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0002fda70]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func main\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{fmt Println}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{fmt Println}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{fmt Println}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{fmt Println}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{fmt Println}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{fmt Println}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func Index\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func Include\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func Any\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func All\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func Filter\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [vsf]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [vsf]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func Map\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [vsm]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0003bc0c0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func main\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{fmt Println}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{fmt Println}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{fmt Println}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{fmt Println}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{fmt Println}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{fmt Println}\n[Go+ CI/Test]   | === RUN   TestFromParse/format.Source_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/_testdata/complit/complit.gop\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func main\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [a]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | === RUN   TestFromParse/format.Node_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/_testdata/complit/complit.gop\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func main\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [a]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | === RUN   TestFromParse/format.Source_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/_testdata/errwrap1/errwrap.gop\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func add\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func addSafe\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func main\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [sum err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | === RUN   TestFromParse/format.Node_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/_testdata/errwrap1/errwrap.gop\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func add\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func addSafe\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func main\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [sum err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func add\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func addSafe\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func main\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [sum err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | === RUN   TestFromParse/format.Source_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/_testdata/errwrap2/errwrap2.gop\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func neg\n[Go+ CI/Test]   | === RUN   TestFromParse/format.Node_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/_testdata/errwrap2/errwrap2.gop\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func neg\n[Go+ CI/Test]   | === RUN   TestFromParse/format.Source_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/_testdata/errwrap3/errwrap3.gop\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func main\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{mkdir ! 6 <nil>}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | === RUN   TestFromParse/format.Node_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/_testdata/errwrap3/errwrap3.gop\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func main\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{mkdir ! 6 <nil>}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | === RUN   TestFromParse/format.Source_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/_testdata/exists/exists.gop\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func main\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [a]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [hasEven]\n[Go+ CI/Test]   | === RUN   TestFromParse/format.Node_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/_testdata/exists/exists.gop\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func main\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [a]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [hasEven]\n[Go+ CI/Test]   | === RUN   TestFromParse/format.Source_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/_testdata/fnbody/fnbody.gop\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func main\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [a]\n[Go+ CI/Test]   | === RUN   TestFromParse/format.Node_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/_testdata/fnbody/fnbody.gop\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func main\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [a]\n[Go+ CI/Test]   | === RUN   TestFromParse/format.Source_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/_testdata/fncall/fncall.gop\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func main\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{fn 3 [0xc0003fb0a0] 0 5 0}\n[Go+ CI/Test]   | === RUN   TestFromParse/format.Node_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/_testdata/fncall/fncall.gop\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func main\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{fn 3 [0xc0003fb160] 0 5 0}\n[Go+ CI/Test]   | === RUN   TestFromParse/format.Source_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/_testdata/forloop/forloop.gop\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func main\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [sum]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [sum]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [sum]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [sum]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | === RUN   TestFromParse/format.Node_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/_testdata/forloop/forloop.gop\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func main\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [sum]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [sum]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [sum]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [sum]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | === RUN   TestFromParse/format.Source_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/_testdata/funcdecl1/fndecl.gop\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func main\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{0xc000424480 0xc000420780}\n[Go+ CI/Test]   | === RUN   TestFromParse/format.Node_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/_testdata/funcdecl1/fndecl.gop\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func main\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{0xc0004245c0 0xc000420b70}\n[Go+ CI/Test]   | === RUN   TestFromParse/format.Source_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/_testdata/funcdecl2/fndecl.gop\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func main\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{0xc000424660 0xc000420f30}\n[Go+ CI/Test]   | === RUN   TestFromParse/format.Node_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/_testdata/funcdecl2/fndecl.gop\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func main\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{0xc0004246e0 0xc000421200}\n[Go+ CI/Test]   | === RUN   TestFromParse/format.Source_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/_testdata/funcdecl3/fndecl.gop\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func main\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{0xc0004247e0 0xc000421530}\n[Go+ CI/Test]   | === RUN   TestFromParse/format.Node_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/_testdata/funcdecl3/fndecl.gop\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func main\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{0xc0004248c0 0xc000421890}\n[Go+ CI/Test]   | === RUN   TestFromParse/format.Source_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/_testdata/funcdoc/funcdoc.gop\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func test\n[Go+ CI/Test]   | === RUN   TestFromParse/format.Node_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/_testdata/funcdoc/funcdoc.gop\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func test\n[Go+ CI/Test]   | === RUN   TestFromParse/format.Source_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/_testdata/funclit/funclit.gop\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func main\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{0xc000424de0 0xc000448480}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | === RUN   TestFromParse/format.Node_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/_testdata/funclit/funclit.gop\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func main\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{0xc000425020 0xc000448930}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | === RUN   TestFromParse/format.Source_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/_testdata/lambda1/lambda.gop\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func main\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt foo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt foo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt foo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt foo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt foo\n[Go+ CI/Test]   | === RUN   TestFromParse/format.Node_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/_testdata/lambda1/lambda.gop\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func main\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt foo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt foo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt foo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt foo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt foo\n[Go+ CI/Test]   | === RUN   TestFromParse/format.Source_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/_testdata/lambda2/lambda2.gop\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func main\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt foo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt foo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt foo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | === RUN   TestFromParse/format.Node_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/_testdata/lambda2/lambda2.gop\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func main\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt foo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt foo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt foo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | === RUN   TestFromParse/format.Source_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/_testdata/lambda3/lambda3.gop\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func main\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt foo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt foo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | === RUN   TestFromParse/format.Node_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/_testdata/lambda3/lambda3.gop\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func main\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt foo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt foo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | === RUN   TestFromParse/format.Source_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/_testdata/lambda4/lambda4.gop\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func main\n[Go+ CI/Test]   | === RUN   TestFromParse/format.Node_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/_testdata/lambda4/lambda4.gop\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func main\n[Go+ CI/Test]   | === RUN   TestFromParse/format.Source_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/_testdata/listcompr/listcompr.gop\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func main\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [y]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [y]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [z]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [t]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [arr]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [x]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | === RUN   TestFromParse/format.Node_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/_testdata/listcompr/listcompr.gop\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func main\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [y]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [y]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [z]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [t]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [arr]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [x]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | === RUN   TestFromParse/format.Source_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/_testdata/mapfunc/map.gop\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func main\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt map\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt map\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | === RUN   TestFromParse/format.Node_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/_testdata/mapfunc/map.gop\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func main\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt map\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt map\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | === RUN   TestFromParse/format.Source_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/_testdata/mytest/mytest.gop\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func bar\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func init\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [f err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [ch]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [foo ok]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | === RUN   TestFromParse/format.Node_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/_testdata/mytest/mytest.gop\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func bar\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func init\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [f err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [ch]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [foo ok]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func bar\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func init\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [f err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [ch]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [foo ok]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | === RUN   TestFromParse/format.Source_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/_testdata/overloadop/op_overload.gop\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func *\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func +\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func /\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func -\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func ++\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | === RUN   TestFromParse/format.Node_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/_testdata/overloadop/op_overload.gop\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func *\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func +\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func /\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func -\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func ++\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | === RUN   TestFromParse/format.Source_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/_testdata/rangeexpr/rangeexpr.gop\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func main\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | === RUN   TestFromParse/format.Node_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/_testdata/rangeexpr/rangeexpr.gop\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func main\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | === RUN   TestFromParse/format.Source_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/_testdata/rational/rational.gop\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func main\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [a]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [b]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [c]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | === RUN   TestFromParse/format.Node_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/_testdata/rational/rational.gop\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func main\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [a]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [b]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [c]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | === RUN   TestFromParse/format.Source_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/_testdata/selectdata/select.gop\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func main\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [a]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [y]\n[Go+ CI/Test]   | === RUN   TestFromParse/format.Node_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/_testdata/selectdata/select.gop\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func main\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [a]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [y]\n[Go+ CI/Test]   | === RUN   TestFromParse/format.Source_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/_testdata/slice1/slice.gop\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func main\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [a]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | === RUN   TestFromParse/format.Node_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/_testdata/slice1/slice.gop\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func main\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [a]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | === RUN   TestFromParse/format.Source_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/_testdata/slice2/slice2.gop\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func main\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [a]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | === RUN   TestFromParse/format.Node_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/_testdata/slice2/slice2.gop\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func main\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [a]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | === RUN   TestFromParse/format.Source_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/_testdata/stdtype/stdtype.gop\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func main\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [x]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [y]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [a]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [b]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [c]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | === RUN   TestFromParse/format.Node_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/_testdata/stdtype/stdtype.gop\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func main\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [x]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [y]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [a]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [b]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [c]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt println\n[Go+ CI/Test]   | === RUN   TestFromParse/format.Source_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/_testdata/typeswitch/typeswitch.gop\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func add\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [a]\n[Go+ CI/Test]   | === RUN   TestFromParse/format.Node_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/_testdata/typeswitch/typeswitch.gop\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func add\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [a]\n[Go+ CI/Test]   | --- PASS: TestFromParse (0.03s)\n[Go+ CI/Test]   |     --- PASS: TestFromParse/format.Source_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/_testdata/autoprop/goto.gop (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestFromParse/format.Node_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/_testdata/autoprop/goto.gop (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestFromParse/format.Source_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/_testdata/build/build.gop (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestFromParse/format.Node_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/_testdata/build/build.gop (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestFromParse/format.Source_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/_testdata/c2gohello/hello.gop (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestFromParse/format.Node_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/_testdata/c2gohello/hello.gop (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestFromParse/format.Source_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/_testdata/cmdlinestyle1/cmd.gop (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestFromParse/format.Node_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/_testdata/cmdlinestyle1/cmd.gop (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestFromParse/format.Source_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/_testdata/cmdlinestyle2/cmd2.gop (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestFromParse/format.Node_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/_testdata/cmdlinestyle2/cmd2.gop (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestFromParse/format.Source_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/_testdata/cmdlinestyle3/cmd3.gop (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestFromParse/format.Node_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/_testdata/cmdlinestyle3/cmd3.gop (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestFromParse/format.Source_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/_testdata/cmdlinestyle4/cmd4.gop (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestFromParse/format.Node_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/_testdata/cmdlinestyle4/cmd4.gop (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestFromParse/format.Source_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/_testdata/collection/collection.gop (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestFromParse/format.Node_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/_testdata/collection/collection.gop (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestFromParse/format.Source_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/_testdata/complit/complit.gop (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestFromParse/format.Node_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/_testdata/complit/complit.gop (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestFromParse/format.Source_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/_testdata/errwrap1/errwrap.gop (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestFromParse/format.Node_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/_testdata/errwrap1/errwrap.gop (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestFromParse/format.Source_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/_testdata/errwrap2/errwrap2.gop (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestFromParse/format.Node_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/_testdata/errwrap2/errwrap2.gop (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestFromParse/format.Source_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/_testdata/errwrap3/errwrap3.gop (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestFromParse/format.Node_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/_testdata/errwrap3/errwrap3.gop (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestFromParse/format.Source_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/_testdata/exists/exists.gop (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestFromParse/format.Node_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/_testdata/exists/exists.gop (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestFromParse/format.Source_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/_testdata/fnbody/fnbody.gop (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestFromParse/format.Node_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/_testdata/fnbody/fnbody.gop (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestFromParse/format.Source_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/_testdata/fncall/fncall.gop (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestFromParse/format.Node_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/_testdata/fncall/fncall.gop (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestFromParse/format.Source_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/_testdata/forloop/forloop.gop (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestFromParse/format.Node_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/_testdata/forloop/forloop.gop (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestFromParse/format.Source_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/_testdata/funcdecl1/fndecl.gop (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestFromParse/format.Node_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/_testdata/funcdecl1/fndecl.gop (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestFromParse/format.Source_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/_testdata/funcdecl2/fndecl.gop (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestFromParse/format.Node_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/_testdata/funcdecl2/fndecl.gop (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestFromParse/format.Source_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/_testdata/funcdecl3/fndecl.gop (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestFromParse/format.Node_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/_testdata/funcdecl3/fndecl.gop (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestFromParse/format.Source_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/_testdata/funcdoc/funcdoc.gop (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestFromParse/format.Node_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/_testdata/funcdoc/funcdoc.gop (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestFromParse/format.Source_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/_testdata/funclit/funclit.gop (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestFromParse/format.Node_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/_testdata/funclit/funclit.gop (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestFromParse/format.Source_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/_testdata/lambda1/lambda.gop (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestFromParse/format.Node_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/_testdata/lambda1/lambda.gop (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestFromParse/format.Source_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/_testdata/lambda2/lambda2.gop (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestFromParse/format.Node_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/_testdata/lambda2/lambda2.gop (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestFromParse/format.Source_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/_testdata/lambda3/lambda3.gop (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestFromParse/format.Node_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/_testdata/lambda3/lambda3.gop (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestFromParse/format.Source_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/_testdata/lambda4/lambda4.gop (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestFromParse/format.Node_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/_testdata/lambda4/lambda4.gop (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestFromParse/format.Source_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/_testdata/listcompr/listcompr.gop (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestFromParse/format.Node_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/_testdata/listcompr/listcompr.gop (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestFromParse/format.Source_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/_testdata/mapfunc/map.gop (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestFromParse/format.Node_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/_testdata/mapfunc/map.gop (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestFromParse/format.Source_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/_testdata/mytest/mytest.gop (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestFromParse/format.Node_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/_testdata/mytest/mytest.gop (0.02s)\n[Go+ CI/Test]   |     --- PASS: TestFromParse/format.Source_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/_testdata/overloadop/op_overload.gop (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestFromParse/format.Node_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/_testdata/overloadop/op_overload.gop (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestFromParse/format.Source_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/_testdata/rangeexpr/rangeexpr.gop (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestFromParse/format.Node_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/_testdata/rangeexpr/rangeexpr.gop (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestFromParse/format.Source_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/_testdata/rational/rational.gop (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestFromParse/format.Node_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/_testdata/rational/rational.gop (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestFromParse/format.Source_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/_testdata/selectdata/select.gop (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestFromParse/format.Node_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/_testdata/selectdata/select.gop (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestFromParse/format.Source_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/_testdata/slice1/slice.gop (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestFromParse/format.Node_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/_testdata/slice1/slice.gop (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestFromParse/format.Source_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/_testdata/slice2/slice2.gop (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestFromParse/format.Node_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/_testdata/slice2/slice2.gop (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestFromParse/format.Source_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/_testdata/stdtype/stdtype.gop (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestFromParse/format.Node_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/_testdata/stdtype/stdtype.gop (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestFromParse/format.Source_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/_testdata/typeswitch/typeswitch.gop (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestFromParse/format.Node_/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/parser/_testdata/typeswitch/typeswitch.gop (0.00s)\n[Go+ CI/Test]   | === CONT  TestBadComments\n[Go+ CI/Test]   | === CONT  TestWriteErrors\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | === CONT  TestBaseIndent\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | === RUN   TestBaseIndent/0\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | === PAUSE TestBaseIndent/0\n[Go+ CI/Test]   | === RUN   TestBaseIndent/1\n[Go+ CI/Test]   | === PAUSE TestBaseIndent/1\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | === RUN   TestBaseIndent/2\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func init\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bc270]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bc2a0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bc2b8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bc2e8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bc318]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bc330]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bc348]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func internalError\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{fmt Print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{fmt Println}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt panic\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func commentsHaveNewline\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [line]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [t]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func nextComment\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [c]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [list]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e07c8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e07e0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e0840]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e0870]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func commentBefore\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func commentSizeBefore\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e09c0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [size]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [size]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p nextComment}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func recordLine\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bc948]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func linesFrom\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func posFor\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func lineFor\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bcaf8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bcb10]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func writeLineDirective\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bcc90]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bccd8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bcd50]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bcdb0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bcdf8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func writeIndent\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bcea0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bcee8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bcf18]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bcf48]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func writeByte\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [ch]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [ch]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bcfc0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeIndent}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bd020]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e1518]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e1548]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e1578]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e15a8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e15d8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e1608]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e1638]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func writeString\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeLineDirective}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeIndent}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e1758]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e1770]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e17e8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e1818]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e1860]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [nlines]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [ch]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [li]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e1890]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e18c0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e18f0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e1920]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [c]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e1950]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e1980]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e19b0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bd308]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bd320]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bd368]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func writeCommentPrefix\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeByte}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [hasSep]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [j]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00070bbf0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [hasSep]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [j]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeWhitespace}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [sep]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [sep]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeByte}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [droppedLinebreak]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [j]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00078e690]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00078ea20]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [droppedLinebreak]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [j]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeWhitespace}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeByte}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func isBlank\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | === PAUSE TestBaseIndent/2\n[Go+ CI/Test]   | === RUN   TestBaseIndent/3\n[Go+ CI/Test]   | === PAUSE TestBaseIndent/3\n[Go+ CI/Test]   | === CONT  TestBaseIndent/1\n[Go+ CI/Test]   | === CONT  TestBaseIndent/3\n[Go+ CI/Test]   | === CONT  TestBaseIndent/2\n[Go+ CI/Test]   | === CONT  TestBaseIndent/0\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func init\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e0360]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e0390]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e03a8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e03d8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func commonPrefix\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e0408]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e0420]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e0438]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func internalError\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{fmt Print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{fmt Println}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt panic\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func commentsHaveNewline\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [line]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [t]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func nextComment\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [c]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [list]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bc5a0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bc5b8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bc618]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bc648]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func commentBefore\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func init\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func commentSizeBefore\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bc798]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e0360]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [size]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e0390]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [size]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p nextComment}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func recordLine\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e0a68]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func linesFrom\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func posFor\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func lineFor\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func init\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e0c18]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e0c30]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func writeLineDirective\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e0360]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e0390]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e03a8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e0db0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e0df8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e03d8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e0e70]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e0408]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e0ed0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e0f18]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e0420]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func writeIndent\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e0438]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func internalError\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e0fc0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e1008]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e10b0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{fmt Print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e10e0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func writeByte\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [ch]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [ch]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e1158]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeIndent}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{fmt Println}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt panic\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e03a8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func commentsHaveNewline\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e03d8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e0408]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [line]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e0420]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e11b8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e0438]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func internalError\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e1200]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e1230]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{fmt Print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e1260]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e1290]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e12c0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e12f0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e1320]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func writeString\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeLineDirective}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeIndent}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{fmt Println}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e1440]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e1458]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func init\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e14d0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e0360]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e0390]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e03a8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bd098]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e03d8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bd0e0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e0408]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [nlines]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e0420]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e0438]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func internalError\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt panic\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func commentsHaveNewline\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [ch]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [line]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [li]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bd110]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bd140]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bd170]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bd1a0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [c]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [t]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bd1d0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bd200]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bd230]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bd260]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bd278]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bd2c0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func writeCommentPrefix\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{fmt Print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func trimRight\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func stripCommonPrefix\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [prefix]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [prefixSet]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000715890]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [prefix]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [prefixSet]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [prefix]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [line]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [prefix]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [lineOfStars]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [prefix]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [lineOfStars]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [first]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [prefix]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [suffix]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000799350]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [suffix]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000799560 0xc000799590]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [suffix]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [prefix]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [last]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [closing]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [closing]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000720bd0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [prefix]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000720e10]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func writeComment\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [text]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [pos]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bd9c8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bd9c8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bd9f8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeString}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [lines]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000721440]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt stripCommonPrefix\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeByte}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [pos]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeString}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func writeCommentSuffix\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000721950]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [needsLinebreak]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [wroteNewline]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [droppedFF]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000721b60]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeWhitespace}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeByte}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [wroteNewline]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func containsLinebreak\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func intersperseComments\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeCommentPrefix}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeComment}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [last]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p nextComment}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [needsLinebreak]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [needsLinebreak]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeByte}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [needsLinebreak]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p internalError}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func writeWhitespace\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [ch]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p internalError}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072e078]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072d0b0 0xc00072d110]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeByte}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [l]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072e150]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func nlimit\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func mayCombine\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [b]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [b]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [b]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [b]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [b]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [b]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func print\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072e348]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072e378]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [x]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072e3a8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeWhitespace}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072e438]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072de30]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072e480]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072e498]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [data]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [impliedSemi]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072e528]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [data]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [isLit]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [impliedSemi]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072e5a0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [s]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p internalError}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072e648]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000738180]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [data]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [impliedSemi]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072e768]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072e7b0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [data]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [isLit]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [impliedSemi]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072e7f8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{fmt Fprintf}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt panic\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [next]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [wroteNewline droppedFF]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [ch]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [ch]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeByte}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [impliedSemi]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072e948]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072e990]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeString}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072e9c0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func flush\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [wroteNewline droppedFF]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeWhitespace}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func getDoc\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func getLastComment\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func printNode\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [cnode ok]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [node]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [comments]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n ok]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [beg]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [end]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [doc]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [beg]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [com]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [e]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [end]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [j]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072f128]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n ok]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072f170]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072f1a0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p nextComment}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ ok]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072f260]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p stmt}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p decl}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p spec}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ ok]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072f338]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p stmtList}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p declList}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p file}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func resetSpace\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072f470]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072f488]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func Write\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [m]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [b]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072f530]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p resetSpace}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072f608]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [m]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072f668]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [m]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p resetSpace}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p resetSpace}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072f728]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p resetSpace}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072f818]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [m]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt panic\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p resetSpace}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fprint\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p init}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072f9b0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p flush}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [output]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [minwidth]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [padchar]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [padchar]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [twmode]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [minwidth]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [twmode]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [output]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [tw _]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func Fprint\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func Fprint\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func init\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bc270]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bc2a0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bc2b8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bc2e8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bc318]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bc330]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bc348]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func internalError\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{fmt Print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{fmt Println}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt panic\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func commentsHaveNewline\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [line]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [t]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func nextComment\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [c]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [list]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e07c8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e07e0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e0840]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e0870]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func commentBefore\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func commentSizeBefore\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e09c0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [size]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [size]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p nextComment}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func recordLine\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bc948]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func linesFrom\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func posFor\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func lineFor\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bcaf8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{fmt Println}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeByte}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt panic\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func commentsHaveNewline\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [hasSep]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [j]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000781ec0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [t]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [hasSep]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bcb10]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [j]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeWhitespace}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [sep]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [sep]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeByte}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [droppedLinebreak]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [j]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func nextComment\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func nextComment\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [c]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [list]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [c]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bc5a0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bc5b8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [list]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bc618]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bc648]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bc5a0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func commentBefore\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bc5b8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bc618]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func commentSizeBefore\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bc648]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func commentBefore\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bc798]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [size]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [size]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p nextComment}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func recordLine\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func commentSizeBefore\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00078e2a0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bc798]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0007146f0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [size]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [droppedLinebreak]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [j]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeWhitespace}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [line]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [size]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e0a68]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func linesFrom\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p nextComment}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func recordLine\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func posFor\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e0a68]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func linesFrom\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [t]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeByte}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func posFor\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func isBlank\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func commonPrefix\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func lineFor\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func trimRight\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func nextComment\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func stripCommonPrefix\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [c]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [prefix]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [prefixSet]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [list]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bc5a0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000798540]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bc5b8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [prefix]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [prefixSet]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [prefix]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bc618]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [line]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [prefix]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bc648]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func writeLineDirective\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func commentBefore\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e0c18]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [lineOfStars]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bcc90]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bccd8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func commentSizeBefore\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [prefix]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [lineOfStars]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [first]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bc798]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [size]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [prefix]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [size]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [suffix]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p nextComment}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e0c30]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func recordLine\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e0a68]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func writeLineDirective\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func linesFrom\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func posFor\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e0db0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func lineFor\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e0df8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e0c18]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e0c30]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e0e70]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func writeLineDirective\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e0ed0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e0f18]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e0db0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e0df8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func writeIndent\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e0e70]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e0ed0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e0f18]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func writeIndent\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e0fc0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000720840]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e1008]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e10b0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [suffix]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e10e0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000720a50 0xc000720a80]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [suffix]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func writeByte\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e0fc0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [ch]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e1008]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [ch]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e1158]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e10b0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeIndent}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e10e0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func writeByte\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e11b8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e1200]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e1230]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [ch]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e1260]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e1290]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [ch]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e12c0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e1158]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e12f0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e1320]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeIndent}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func writeString\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e11b8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e1200]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeLineDirective}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeIndent}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e1230]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e1440]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e1260]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e1458]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e1290]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e12c0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e14d0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e12f0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bd098]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e1320]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bd0e0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func writeString\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [nlines]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [ch]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [li]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeLineDirective}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bd110]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeIndent}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bcd50]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e1440]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bcdb0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bd140]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bcdf8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func writeIndent\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [prefix]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [last]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [closing]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bcea0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bcee8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bcf18]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e1458]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func lineFor\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e14d0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e0c18]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bd098]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bcf48]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e0c30]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bd170]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func writeLineDirective\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bd1a0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [c]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bd1d0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e0db0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bd200]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e0df8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bd230]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e0e70]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bd260]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e0ed0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e0f18]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bd278]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func writeIndent\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bd2c0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func writeCommentPrefix\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e0fc0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e1008]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e10b0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e10e0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func writeByte\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [ch]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [ch]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e1158]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bd0e0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeIndent}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e11b8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e1200]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [nlines]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e1230]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e1260]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e1290]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e12c0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [ch]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e12f0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e1320]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func writeString\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [li]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bd110]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bd140]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeLineDirective}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeIndent}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bd170]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e1440]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bd1a0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e1458]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [c]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeByte}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bd1d0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bd200]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [hasSep]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bd230]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [j]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bd260]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000781ec0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bd278]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [hasSep]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [j]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bd2c0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeWhitespace}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func writeCommentPrefix\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [sep]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [sep]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeByte}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [droppedLinebreak]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [j]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00078e2a0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeByte}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0007146f0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [hasSep]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [droppedLinebreak]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [j]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [j]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [closing]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func writeByte\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0007a4120]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [ch]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000781ec0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [hasSep]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [j]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeWhitespace}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [sep]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [sep]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeByte}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [prefix]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [droppedLinebreak]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0007a4360]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [j]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func writeComment\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [text]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [pos]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000792330]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000792330]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000792360]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeString}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [lines]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00078e2a0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e14d0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeWhitespace}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bd098]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [ch]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0007a4990]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt stripCommonPrefix\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeByte}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [pos]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0007146f0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeString}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [droppedLinebreak]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func writeCommentSuffix\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [j]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeWhitespace}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bcfc0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0007a57a0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [needsLinebreak]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [wroteNewline]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [droppedFF]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0007a59b0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeWhitespace}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeByte}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [wroteNewline]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func containsLinebreak\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeByte}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func intersperseComments\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func isBlank\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeCommentPrefix}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeComment}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [last]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p nextComment}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func commonPrefix\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [needsLinebreak]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [needsLinebreak]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeByte}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func trimRight\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [needsLinebreak]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p internalError}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func writeWhitespace\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func stripCommonPrefix\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bd0e0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [nlines]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [prefix]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [prefixSet]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000798540]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [prefix]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [prefixSet]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [prefix]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [ch]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [ch]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [li]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bd110]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bd140]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p internalError}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bd170]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bd1a0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000792ae0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [c]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bd1d0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bd200]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bd230]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0007ad7a0 0xc0007ad800]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bd260]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bd278]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bd2c0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func writeCommentPrefix\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeByte}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeByte}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [l]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [hasSep]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [j]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000792bb8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000781ec0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func nlimit\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [hasSep]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [j]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeWhitespace}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [sep]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func mayCombine\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [sep]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeByte}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [droppedLinebreak]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [j]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [b]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00078e2a0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [b]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [b]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [b]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0007146f0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [droppedLinebreak]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [b]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [j]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeWhitespace}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [b]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func print\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeByte}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func isBlank\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000792db0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000792de0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func commonPrefix\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [x]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000792e10]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func trimRight\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeWhitespace}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func stripCommonPrefix\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000792ea0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [prefix]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [prefixSet]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0007b4540]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000792ee8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000798540]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000792f00]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [prefix]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [prefixSet]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [prefix]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [data]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [impliedSemi]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [line]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000792f90]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [prefix]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [lineOfStars]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [data]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [isLit]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [impliedSemi]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [prefix]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [line]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [lineOfStars]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [first]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [prefix]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000793008]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [lineOfStars]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [s]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p internalError}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0007930b0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0007b4870]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [prefix]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [data]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [lineOfStars]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [first]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [impliedSemi]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [prefix]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [suffix]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeByte}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func isBlank\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0007931d0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000720840]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000793218]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [suffix]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [data]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [isLit]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [impliedSemi]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000793260]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [prefix]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeIndent}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{fmt Fprintf}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [suffix]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func commonPrefix\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000720840]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [suffix]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000720a50 0xc000720a80]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [suffix]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func trimRight\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [prefix]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func stripCommonPrefix\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [last]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [prefix]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [closing]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [prefixSet]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000798540]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [prefix]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [prefixSet]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [prefix]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [line]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt panic\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [prefix]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [next]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000720a50 0xc000720a80]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [wroteNewline droppedFF]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [suffix]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [prefix]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [last]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [closing]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [closing]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [ch]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0007a4120]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [ch]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [prefix]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeByte}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0007a4360]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [impliedSemi]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func writeComment\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [closing]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [lineOfStars]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bd020]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e1518]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e1548]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0007933b0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [text]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0007933f8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeString}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000793428]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [pos]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func flush\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [wroteNewline droppedFF]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeWhitespace}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func getDoc\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000792330]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000792330]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000792360]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeString}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [lines]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0007a4990]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt stripCommonPrefix\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeByte}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [pos]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func getLastComment\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeString}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func writeCommentSuffix\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0007a57a0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e1578]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [needsLinebreak]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0007a4120]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [prefix]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [wroteNewline]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e15a8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [droppedFF]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0007a59b0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeWhitespace}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeByte}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [wroteNewline]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e15d8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [prefix]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [lineOfStars]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func containsLinebreak\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [first]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func intersperseComments\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func printNode\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [cnode ok]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeCommentPrefix}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [node]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [comments]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeComment}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n ok]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [last]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [beg]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p nextComment}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [end]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [doc]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [needsLinebreak]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [beg]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [com]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [e]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [end]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [j]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000793b90]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n ok]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [needsLinebreak]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000793bd8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeByte}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000793c08]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p nextComment}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ ok]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [needsLinebreak]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000793cc8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p stmt}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p decl}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p internalError}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p spec}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func writeWhitespace\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ ok]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000793da0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p stmtList}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [ch]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p declList}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p file}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p internalError}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000792ae0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func resetSpace\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0007ad7a0 0xc0007ad800]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000793ed8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000793ef0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeByte}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func Write\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [l]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [m]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000792bb8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [b]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func nlimit\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000793f98]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p resetSpace}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func mayCombine\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0007d0078]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [m]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [b]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0007d00d8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [m]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [b]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [b]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p resetSpace}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [b]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [b]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p resetSpace}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0007d0198]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [b]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p resetSpace}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func print\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0007d0288]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [m]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt panic\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000792db0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000792de0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p resetSpace}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [x]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000792e10]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fprint\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeWhitespace}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p init}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000792ea0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0007b4540]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0007d0420]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p flush}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [output]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000792ee8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000792f00]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [minwidth]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [padchar]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [data]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [padchar]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [impliedSemi]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [twmode]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000792f90]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [minwidth]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [twmode]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [data]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [output]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [isLit]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [impliedSemi]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0007a4360]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000793008]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func writeComment\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [s]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [text]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [pos]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [tw _]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p internalError}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0007930b0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0007b4870]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000792330]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000792330]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [data]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func Fprint\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000792360]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeString}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [lines]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [impliedSemi]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0007931d0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func Fprint\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0007a4990]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000793218]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt stripCommonPrefix\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [data]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [isLit]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [impliedSemi]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000793260]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeByte}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{fmt Fprintf}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [pos]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt panic\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [next]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeString}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [wroteNewline droppedFF]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func writeCommentSuffix\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [ch]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [ch]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeByte}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [impliedSemi]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0007a57a0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0007933b0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0007933f8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeString}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [needsLinebreak]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000793428]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [wroteNewline]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func flush\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [droppedFF]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0007a59b0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeWhitespace}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [wroteNewline droppedFF]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeWhitespace}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeByte}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [wroteNewline]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [prefix]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [suffix]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000720840]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [suffix]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000720a50 0xc000720a80]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [suffix]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [prefix]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func containsLinebreak\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func getDoc\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func intersperseComments\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func getLastComment\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e1608]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e1638]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func writeString\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeLineDirective}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeIndent}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e1758]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e1770]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e17e8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e1818]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e1860]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [nlines]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [ch]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [li]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e1890]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e18c0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e18f0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e1920]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [c]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e1950]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e1980]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e19b0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bd308]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bd320]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bd368]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func writeCommentPrefix\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func printNode\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [cnode ok]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [node]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [comments]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n ok]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [beg]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [end]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [doc]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [beg]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [com]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [e]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [end]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [j]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000793b90]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n ok]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000793bd8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000793c08]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p nextComment}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ ok]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeCommentPrefix}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeComment}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [last]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p nextComment}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [needsLinebreak]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [needsLinebreak]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeByte}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [last]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [closing]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [closing]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0007a4120]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [prefix]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0007a4360]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func writeComment\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [text]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [pos]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeByte}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [hasSep]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [j]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00070bbf0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [hasSep]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [j]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeWhitespace}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [sep]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [sep]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeByte}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000793cc8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p stmt}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p decl}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p spec}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ ok]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000793da0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p stmtList}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p declList}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p file}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func resetSpace\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [needsLinebreak]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p internalError}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func writeWhitespace\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [ch]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p internalError}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000792ae0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0007ad7a0 0xc0007ad800]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeByte}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [l]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000792bb8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000792330]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000792330]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000792360]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeString}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [lines]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0007a4990]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt stripCommonPrefix\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeByte}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [pos]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeString}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func writeCommentSuffix\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [droppedLinebreak]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [j]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00078e690]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00078ea20]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [droppedLinebreak]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [j]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeWhitespace}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000793ed8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000793ef0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func Write\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [m]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [b]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000793f98]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p resetSpace}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0007d0078]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [m]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func nlimit\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func mayCombine\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [b]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [b]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [b]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [b]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [b]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [b]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func print\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0007a57a0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [needsLinebreak]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [wroteNewline]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [droppedFF]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0007a59b0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeWhitespace}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeByte}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [wroteNewline]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func containsLinebreak\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func intersperseComments\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeByte}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func isBlank\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func commonPrefix\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func trimRight\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func stripCommonPrefix\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [prefix]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [prefixSet]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000715890]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [prefix]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [prefixSet]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [prefix]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [line]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [prefix]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [lineOfStars]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [prefix]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [lineOfStars]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [first]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0007d00d8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [m]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p resetSpace}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p resetSpace}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0007d0198]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p resetSpace}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0007d0288]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [m]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt panic\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000792db0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000792de0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [x]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000792e10]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeWhitespace}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000792ea0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0007b4540]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000792ee8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000792f00]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [data]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [impliedSemi]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000792f90]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeCommentPrefix}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeComment}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [last]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p nextComment}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [needsLinebreak]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [needsLinebreak]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeByte}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [needsLinebreak]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [prefix]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [suffix]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000799350]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [suffix]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000799560 0xc000799590]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [suffix]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [prefix]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [last]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [closing]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [closing]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000720bd0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p resetSpace}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fprint\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p init}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0007d0420]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p flush}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [data]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [isLit]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [impliedSemi]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000793008]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [s]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p internalError}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0007930b0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0007b4870]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [data]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [impliedSemi]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0007931d0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000793218]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [prefix]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000720e10]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func writeComment\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [text]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [pos]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bd9c8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bd9c8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bd9f8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeString}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [lines]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [data]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [isLit]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [impliedSemi]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000793260]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{fmt Fprintf}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt panic\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [next]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [wroteNewline droppedFF]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [ch]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [ch]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeByte}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [impliedSemi]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0007933b0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0007933f8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeString}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000793428]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func flush\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [wroteNewline droppedFF]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeWhitespace}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func getDoc\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p internalError}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func writeWhitespace\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [ch]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p internalError}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000792ae0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0007ad7a0 0xc0007ad800]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeByte}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [l]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000792bb8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func nlimit\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func mayCombine\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [b]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [b]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [b]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [b]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [b]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [b]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func print\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000792db0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000792de0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [x]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000792e10]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeWhitespace}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000792ea0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0007b4540]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000792ee8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000792f00]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [data]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [impliedSemi]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000792f90]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [data]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [isLit]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [impliedSemi]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000793008]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [s]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [output]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [minwidth]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [padchar]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [padchar]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [twmode]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [minwidth]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [twmode]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [output]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [tw _]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func Fprint\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000721440]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt stripCommonPrefix\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeByte}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [pos]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeString}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func writeCommentSuffix\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000721950]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [needsLinebreak]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [wroteNewline]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [droppedFF]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000721b60]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeWhitespace}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func getLastComment\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func printNode\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [cnode ok]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [node]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [comments]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n ok]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p internalError}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0007930b0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0007b4870]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [data]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [impliedSemi]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0007931d0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000793218]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [data]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [isLit]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [impliedSemi]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000793260]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{fmt Fprintf}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt panic\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [next]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [wroteNewline droppedFF]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [ch]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [ch]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeByte}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeByte}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [wroteNewline]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [beg]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [end]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [doc]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [beg]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [com]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [e]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [end]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func containsLinebreak\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func Fprint\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func intersperseComments\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [j]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000793b90]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n ok]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000793bd8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000793c08]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p nextComment}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ ok]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeCommentPrefix}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeComment}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [last]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p nextComment}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [needsLinebreak]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [needsLinebreak]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeByte}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000793cc8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p stmt}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [needsLinebreak]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p decl}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p internalError}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p spec}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func writeWhitespace\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ ok]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000793da0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [ch]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p stmtList}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p declList}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p internalError}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072e078]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p file}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func resetSpace\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000793ed8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000793ef0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func Write\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [m]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [b]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000793f98]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p resetSpace}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0007d0078]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [m]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0007d00d8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [m]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p resetSpace}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p resetSpace}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0007d0198]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p resetSpace}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0007d0288]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [m]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt panic\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p resetSpace}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fprint\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p init}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0007d0420]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p flush}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [output]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [minwidth]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [padchar]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [padchar]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072d0b0 0xc00072d110]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeByte}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [l]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072e150]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func nlimit\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func mayCombine\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [b]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [b]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [b]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [b]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [b]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [b]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func print\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072e348]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072e378]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [x]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [twmode]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [minwidth]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [twmode]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [output]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [tw _]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func Fprint\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072e3a8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func Fprint\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeWhitespace}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [impliedSemi]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0007933b0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0007933f8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeString}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000793428]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func flush\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [wroteNewline droppedFF]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeWhitespace}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func getDoc\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func getLastComment\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072e438]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072de30]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072e480]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072e498]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [data]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [impliedSemi]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func printNode\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072e528]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [data]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [isLit]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [impliedSemi]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [cnode ok]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072e5a0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [node]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [s]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p internalError}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [comments]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n ok]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [beg]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [end]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [doc]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [beg]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [com]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072e648]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [e]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [end]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [j]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000738180]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [data]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000793b90]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n ok]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000793bd8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000793c08]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p nextComment}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [impliedSemi]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ ok]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072e768]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000793cc8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072e7b0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p stmt}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p decl}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [data]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [isLit]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [impliedSemi]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072e7f8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{fmt Fprintf}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt panic\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [next]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [wroteNewline droppedFF]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p spec}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ ok]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000793da0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p stmtList}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p declList}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p file}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [ch]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [ch]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeByte}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [impliedSemi]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072e948]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072e990]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeString}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072e9c0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func flush\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [wroteNewline droppedFF]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeWhitespace}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func resetSpace\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000793ed8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000793ef0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func Write\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func getDoc\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [m]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [b]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000793f98]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p resetSpace}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0007d0078]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [m]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0007d00d8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [m]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p resetSpace}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func getLastComment\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p resetSpace}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0007d0198]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p resetSpace}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0007d0288]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [m]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt panic\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func printNode\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [cnode ok]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [node]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [comments]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n ok]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p resetSpace}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [beg]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [end]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [doc]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fprint\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [beg]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [com]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [e]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [end]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [j]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072f128]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p init}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n ok]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072f170]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072f1a0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0007d0420]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p flush}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p nextComment}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ ok]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [output]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072f260]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p stmt}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [minwidth]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p decl}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [padchar]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [padchar]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [twmode]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [minwidth]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [twmode]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [output]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p spec}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ ok]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072f338]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p stmtList}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p declList}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p file}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [tw _]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func Fprint\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func Fprint\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | --- PASS: TestBaseIndent (0.04s)\n[Go+ CI/Test]   |     --- PASS: TestBaseIndent/1 (0.03s)\n[Go+ CI/Test]   |     --- PASS: TestBaseIndent/3 (0.04s)\n[Go+ CI/Test]   |     --- PASS: TestBaseIndent/2 (0.04s)\n[Go+ CI/Test]   |     --- PASS: TestBaseIndent/0 (0.05s)\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func resetSpace\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072f470]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072f488]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func Write\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [m]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [b]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072f530]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p resetSpace}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072f608]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [m]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072f668]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [m]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p resetSpace}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p resetSpace}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072f728]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p resetSpace}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072f818]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [m]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt panic\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p resetSpace}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fprint\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p init}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072f9b0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p flush}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [output]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [minwidth]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [padchar]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [padchar]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [twmode]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [minwidth]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [twmode]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [output]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [tw _]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func Fprint\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func Fprint\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func init\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bc270]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bc2a0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bc2b8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bc2e8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bc318]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bc330]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bc348]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func internalError\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{fmt Print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{fmt Println}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt panic\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func commentsHaveNewline\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [line]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [t]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func nextComment\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [c]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [list]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e07c8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e07e0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e0840]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e0870]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func commentBefore\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func commentSizeBefore\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e09c0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [size]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [size]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p nextComment}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func recordLine\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bc948]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func linesFrom\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func posFor\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func lineFor\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bcaf8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bcb10]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func writeLineDirective\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bcc90]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bccd8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bcd50]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bcdb0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bcdf8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func writeIndent\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bcea0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bcee8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bcf18]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bcf48]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func writeByte\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [ch]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [ch]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bcfc0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeIndent}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bd020]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e1518]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e1548]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e1578]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e15a8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e15d8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e1608]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e1638]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func writeString\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeLineDirective}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeIndent}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e1758]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e1770]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e17e8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e1818]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e1860]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [nlines]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [ch]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [li]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e1890]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e18c0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e18f0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e1920]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [c]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e1950]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e1980]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e19b0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bd308]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bd320]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bd368]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func writeCommentPrefix\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeByte}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [hasSep]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [j]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00070bbf0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [hasSep]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [j]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeWhitespace}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [sep]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [sep]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeByte}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [droppedLinebreak]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [j]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00078e690]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00078ea20]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [droppedLinebreak]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [j]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeWhitespace}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeByte}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func isBlank\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func commonPrefix\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func trimRight\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func stripCommonPrefix\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [prefix]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [prefixSet]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000715890]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [prefix]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [prefixSet]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [prefix]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [line]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [prefix]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [lineOfStars]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [prefix]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [lineOfStars]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [first]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [prefix]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [suffix]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000799350]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [suffix]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000799560 0xc000799590]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [suffix]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [prefix]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [last]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [closing]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [closing]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000720bd0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [prefix]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000720e10]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func writeComment\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [text]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [pos]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bd9c8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bd9c8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bd9f8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeString}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [lines]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000721440]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt stripCommonPrefix\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeByte}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [pos]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeString}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func writeCommentSuffix\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000721950]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [needsLinebreak]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [wroteNewline]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [droppedFF]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000721b60]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeWhitespace}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeByte}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [wroteNewline]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func containsLinebreak\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func intersperseComments\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeCommentPrefix}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeComment}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [last]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p nextComment}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [needsLinebreak]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [needsLinebreak]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeByte}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [needsLinebreak]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p internalError}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func writeWhitespace\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [ch]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p internalError}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072e078]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072d0b0 0xc00072d110]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeByte}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [l]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072e150]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func nlimit\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func mayCombine\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [b]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [b]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [b]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [b]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [b]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [b]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func print\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072e348]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072e378]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [x]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072e3a8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeWhitespace}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072e438]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072de30]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072e480]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072e498]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [data]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [impliedSemi]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072e528]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [data]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [isLit]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [impliedSemi]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072e5a0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [s]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p internalError}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072e648]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000738180]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [data]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [impliedSemi]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072e768]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072e7b0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [data]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [isLit]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [impliedSemi]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072e7f8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{fmt Fprintf}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt panic\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [next]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [wroteNewline droppedFF]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [ch]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [ch]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeByte}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [impliedSemi]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072e948]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072e990]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeString}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072e9c0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func flush\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [wroteNewline droppedFF]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeWhitespace}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func getDoc\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func getLastComment\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func printNode\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [cnode ok]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [node]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [comments]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n ok]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [beg]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [end]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [doc]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [beg]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [com]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [e]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [end]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [j]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072f128]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n ok]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072f170]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072f1a0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p nextComment}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ ok]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072f260]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p stmt}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p decl}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p spec}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ ok]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072f338]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p stmtList}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p declList}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p file}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func resetSpace\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072f470]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072f488]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func Write\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [m]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [b]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072f530]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p resetSpace}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072f608]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [m]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072f668]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [m]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p resetSpace}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p resetSpace}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072f728]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p resetSpace}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072f818]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [m]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt panic\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p resetSpace}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fprint\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p init}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072f9b0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p flush}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [output]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [minwidth]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [padchar]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [padchar]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [twmode]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [minwidth]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [twmode]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [output]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [tw _]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func Fprint\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func Fprint\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func init\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bc270]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bc2a0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bc2b8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bc2e8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bc318]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bc330]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bc348]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func internalError\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{fmt Print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{fmt Println}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt panic\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func commentsHaveNewline\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [line]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [t]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func nextComment\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [c]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [list]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e07c8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e07e0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e0840]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e0870]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func commentBefore\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func commentSizeBefore\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e09c0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [size]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [size]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p nextComment}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func recordLine\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bc948]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func linesFrom\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func posFor\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func lineFor\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bcaf8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bcb10]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func writeLineDirective\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bcc90]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bccd8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bcd50]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bcdb0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bcdf8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func writeIndent\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bcea0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bcee8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bcf18]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bcf48]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func writeByte\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [ch]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [ch]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bcfc0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeIndent}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bd020]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e1518]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e1548]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e1578]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e15a8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e15d8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e1608]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e1638]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func writeString\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeLineDirective}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeIndent}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e1758]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e1770]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e17e8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e1818]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e1860]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [nlines]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [ch]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [li]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e1890]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e18c0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e18f0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e1920]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [c]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e1950]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e1980]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e19b0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bd308]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bd320]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bd368]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func writeCommentPrefix\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeByte}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [hasSep]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [j]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00070bbf0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [hasSep]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [j]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeWhitespace}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [sep]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [sep]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeByte}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [droppedLinebreak]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [j]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00078e690]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00078ea20]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [droppedLinebreak]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [j]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeWhitespace}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeByte}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func isBlank\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func commonPrefix\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func trimRight\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func stripCommonPrefix\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [prefix]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [prefixSet]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000715890]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [prefix]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [prefixSet]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [prefix]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [line]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [prefix]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [lineOfStars]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [prefix]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [lineOfStars]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [first]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [prefix]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [suffix]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000799350]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [suffix]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000799560 0xc000799590]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [suffix]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [prefix]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [last]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [closing]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [closing]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000720bd0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [prefix]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000720e10]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func writeComment\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [text]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [pos]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bd9c8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bd9c8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bd9f8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeString}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [lines]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000721440]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt stripCommonPrefix\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeByte}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [pos]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeString}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func writeCommentSuffix\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000721950]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [needsLinebreak]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [wroteNewline]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [droppedFF]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000721b60]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeWhitespace}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeByte}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [wroteNewline]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func containsLinebreak\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func intersperseComments\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeCommentPrefix}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeComment}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [last]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p nextComment}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [needsLinebreak]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [needsLinebreak]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeByte}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [needsLinebreak]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p internalError}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func writeWhitespace\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [ch]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p internalError}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072e078]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072d0b0 0xc00072d110]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeByte}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [l]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072e150]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func nlimit\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func mayCombine\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [b]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [b]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [b]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [b]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [b]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [b]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func print\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072e348]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072e378]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [x]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072e3a8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeWhitespace}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072e438]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072de30]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072e480]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072e498]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [data]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [impliedSemi]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072e528]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [data]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [isLit]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [impliedSemi]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072e5a0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [s]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p internalError}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072e648]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000738180]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [data]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [impliedSemi]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072e768]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072e7b0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [data]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [isLit]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [impliedSemi]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072e7f8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{fmt Fprintf}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt panic\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [next]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [wroteNewline droppedFF]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [ch]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [ch]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeByte}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [impliedSemi]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072e948]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072e990]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeString}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072e9c0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func flush\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [wroteNewline droppedFF]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeWhitespace}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func getDoc\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func getLastComment\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func printNode\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [cnode ok]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [node]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [comments]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n ok]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [beg]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [end]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [doc]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [beg]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [com]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [e]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [end]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [j]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072f128]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n ok]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072f170]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072f1a0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p nextComment}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ ok]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072f260]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p stmt}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p decl}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p spec}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ ok]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072f338]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p stmtList}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p declList}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p file}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func resetSpace\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072f470]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072f488]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func Write\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [m]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [b]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072f530]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p resetSpace}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072f608]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [m]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072f668]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [m]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p resetSpace}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p resetSpace}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072f728]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p resetSpace}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072f818]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [m]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt panic\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p resetSpace}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fprint\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p init}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072f9b0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p flush}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [output]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [minwidth]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [padchar]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [padchar]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [twmode]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [minwidth]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [twmode]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [output]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [tw _]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func Fprint\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func Fprint\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func init\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bc270]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bc2a0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bc2b8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bc2e8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bc318]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bc330]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bc348]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func internalError\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{fmt Print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{fmt Println}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt panic\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func commentsHaveNewline\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [line]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [t]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func nextComment\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [c]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [list]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e07c8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e07e0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e0840]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e0870]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func commentBefore\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func commentSizeBefore\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e09c0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [size]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [size]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p nextComment}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func recordLine\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bc948]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func linesFrom\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func posFor\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func lineFor\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bcaf8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bcb10]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func writeLineDirective\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bcc90]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bccd8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bcd50]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bcdb0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bcdf8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func writeIndent\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bcea0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bcee8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bcf18]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bcf48]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func writeByte\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [ch]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [ch]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bcfc0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeIndent}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bd020]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e1518]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e1548]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e1578]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e15a8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e15d8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e1608]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e1638]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func writeString\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeLineDirective}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeIndent}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e1758]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e1770]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e17e8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e1818]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e1860]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [nlines]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [ch]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [li]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e1890]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e18c0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e18f0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e1920]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [c]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e1950]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e1980]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e19b0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bd308]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bd320]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bd368]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func writeCommentPrefix\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeByte}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [hasSep]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [j]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00070bbf0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [hasSep]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [j]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeWhitespace}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [sep]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [sep]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeByte}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [droppedLinebreak]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [j]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00078e690]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00078ea20]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [droppedLinebreak]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [j]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeWhitespace}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeByte}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func isBlank\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func commonPrefix\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func trimRight\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func stripCommonPrefix\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [prefix]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [prefixSet]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000715890]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [prefix]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [prefixSet]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [prefix]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [line]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [prefix]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [lineOfStars]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [prefix]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [lineOfStars]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [first]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [prefix]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [suffix]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000799350]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [suffix]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000799560 0xc000799590]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [suffix]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [prefix]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [last]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [closing]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [closing]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000720bd0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [prefix]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000720e10]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func writeComment\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [text]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [pos]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bd9c8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bd9c8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bd9f8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeString}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [lines]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000721440]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt stripCommonPrefix\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeByte}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [pos]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeString}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func writeCommentSuffix\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000721950]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [needsLinebreak]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [wroteNewline]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [droppedFF]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000721b60]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeWhitespace}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeByte}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [wroteNewline]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func containsLinebreak\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func intersperseComments\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeCommentPrefix}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeComment}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [last]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p nextComment}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [needsLinebreak]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [needsLinebreak]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeByte}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [needsLinebreak]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p internalError}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func writeWhitespace\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [ch]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p internalError}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072e078]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072d0b0 0xc00072d110]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeByte}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [l]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072e150]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func nlimit\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func mayCombine\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [b]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [b]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [b]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [b]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [b]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [b]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func print\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072e348]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072e378]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [x]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072e3a8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeWhitespace}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072e438]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072de30]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072e480]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072e498]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [data]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [impliedSemi]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072e528]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [data]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [isLit]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [impliedSemi]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072e5a0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [s]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p internalError}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072e648]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000738180]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [data]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [impliedSemi]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072e768]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072e7b0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [data]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [isLit]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [impliedSemi]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072e7f8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{fmt Fprintf}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt panic\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [next]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [wroteNewline droppedFF]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [ch]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [ch]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeByte}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [impliedSemi]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072e948]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072e990]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeString}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072e9c0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func flush\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [wroteNewline droppedFF]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeWhitespace}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func getDoc\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func getLastComment\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func printNode\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [cnode ok]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [node]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [comments]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n ok]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [beg]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [end]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [doc]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [beg]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [com]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [e]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [end]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [j]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072f128]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n ok]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072f170]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072f1a0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p nextComment}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ ok]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072f260]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p stmt}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p decl}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p spec}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ ok]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072f338]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p stmtList}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p declList}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p file}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func resetSpace\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072f470]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072f488]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func Write\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [m]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [b]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072f530]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p resetSpace}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072f608]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [m]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072f668]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [m]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p resetSpace}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p resetSpace}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072f728]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p resetSpace}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072f818]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [m]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt panic\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p resetSpace}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fprint\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p init}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072f9b0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p flush}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [output]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [minwidth]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [padchar]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [padchar]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [twmode]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [minwidth]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [twmode]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [output]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [tw _]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func Fprint\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func Fprint\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func init\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bc270]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bc2a0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bc2b8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bc2e8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bc318]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bc330]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bc348]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func internalError\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{fmt Print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{fmt Println}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt panic\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func commentsHaveNewline\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [line]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [t]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func nextComment\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [c]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [list]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e07c8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e07e0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e0840]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e0870]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func commentBefore\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func commentSizeBefore\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e09c0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [size]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [size]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p nextComment}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func recordLine\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bc948]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func linesFrom\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func posFor\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func lineFor\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bcaf8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bcb10]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func writeLineDirective\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bcc90]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bccd8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bcd50]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bcdb0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bcdf8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func writeIndent\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bcea0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bcee8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bcf18]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bcf48]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func writeByte\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [ch]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [ch]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bcfc0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeIndent}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bd020]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e1518]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e1548]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e1578]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e15a8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e15d8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e1608]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e1638]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func writeString\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeLineDirective}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeIndent}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e1758]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e1770]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e17e8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e1818]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e1860]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [nlines]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [ch]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [li]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e1890]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e18c0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e18f0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e1920]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [c]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e1950]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e1980]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e19b0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bd308]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bd320]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bd368]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func writeCommentPrefix\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeByte}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [hasSep]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [j]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00070bbf0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [hasSep]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [j]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeWhitespace}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [sep]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [sep]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeByte}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [droppedLinebreak]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [j]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00078e690]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00078ea20]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [droppedLinebreak]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [j]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeWhitespace}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeByte}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func isBlank\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func commonPrefix\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func trimRight\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func stripCommonPrefix\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [prefix]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [prefixSet]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000715890]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [prefix]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [prefixSet]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [prefix]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [line]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [prefix]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [lineOfStars]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [prefix]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [lineOfStars]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [first]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [prefix]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [suffix]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000799350]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [suffix]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000799560 0xc000799590]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [suffix]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [prefix]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [last]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [closing]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [closing]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000720bd0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [prefix]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000720e10]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func writeComment\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [text]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [pos]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bd9c8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bd9c8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bd9f8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeString}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [lines]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000721440]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt stripCommonPrefix\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeByte}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [pos]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeString}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func writeCommentSuffix\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000721950]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [needsLinebreak]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [wroteNewline]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [droppedFF]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000721b60]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeWhitespace}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeByte}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [wroteNewline]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func containsLinebreak\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func intersperseComments\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeCommentPrefix}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeComment}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [last]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p nextComment}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [needsLinebreak]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [needsLinebreak]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeByte}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [needsLinebreak]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p internalError}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func writeWhitespace\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [ch]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p internalError}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072e078]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072d0b0 0xc00072d110]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeByte}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [l]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072e150]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func nlimit\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func mayCombine\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [b]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [b]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [b]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [b]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [b]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [b]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func print\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072e348]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072e378]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [x]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072e3a8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeWhitespace}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072e438]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072de30]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072e480]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072e498]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [data]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [impliedSemi]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072e528]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [data]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [isLit]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [impliedSemi]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072e5a0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [s]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p internalError}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072e648]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000738180]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [data]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [impliedSemi]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072e768]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072e7b0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [data]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [isLit]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [impliedSemi]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072e7f8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{fmt Fprintf}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt panic\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [next]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [wroteNewline droppedFF]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [ch]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [ch]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeByte}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [impliedSemi]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072e948]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072e990]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeString}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072e9c0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func flush\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [wroteNewline droppedFF]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeWhitespace}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func getDoc\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func getLastComment\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func printNode\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [cnode ok]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [node]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [comments]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n ok]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [beg]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [end]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [doc]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [beg]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [com]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [e]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [end]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [j]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072f128]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n ok]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072f170]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072f1a0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p nextComment}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ ok]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072f260]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p stmt}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p decl}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p spec}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ ok]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072f338]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p stmtList}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p declList}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p file}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func resetSpace\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072f470]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072f488]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func Write\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [m]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [b]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072f530]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p resetSpace}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072f608]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [m]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072f668]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [m]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p resetSpace}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p resetSpace}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072f728]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p resetSpace}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072f818]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [m]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt panic\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p resetSpace}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fprint\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p init}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072f9b0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p flush}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [output]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [minwidth]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [padchar]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [padchar]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [twmode]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [minwidth]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [twmode]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [output]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [tw _]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func Fprint\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func Fprint\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func init\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bc270]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bc2a0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bc2b8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bc2e8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bc318]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bc330]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bc348]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func internalError\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{fmt Print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{fmt Println}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt panic\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func commentsHaveNewline\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [line]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [t]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func nextComment\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [c]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [list]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e07c8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e07e0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e0840]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e0870]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func commentBefore\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func commentSizeBefore\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e09c0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [size]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [size]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p nextComment}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func recordLine\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bc948]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func linesFrom\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func posFor\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func lineFor\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bcaf8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bcb10]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func writeLineDirective\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bcc90]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bccd8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bcd50]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bcdb0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bcdf8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func writeIndent\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bcea0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bcee8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bcf18]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bcf48]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func writeByte\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [ch]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [ch]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bcfc0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeIndent}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bd020]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e1518]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e1548]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e1578]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e15a8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e15d8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e1608]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e1638]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func writeString\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeLineDirective}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeIndent}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e1758]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e1770]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e17e8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e1818]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e1860]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [nlines]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [ch]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [li]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e1890]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e18c0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e18f0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e1920]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [c]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e1950]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e1980]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e19b0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bd308]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bd320]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bd368]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func writeCommentPrefix\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeByte}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [hasSep]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [j]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00070bbf0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [hasSep]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [j]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeWhitespace}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [sep]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [sep]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeByte}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [droppedLinebreak]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [j]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00078e690]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00078ea20]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [droppedLinebreak]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [j]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeWhitespace}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeByte}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func isBlank\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func commonPrefix\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func trimRight\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func stripCommonPrefix\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [prefix]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [prefixSet]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000715890]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [prefix]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [prefixSet]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [prefix]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [line]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [prefix]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [lineOfStars]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [prefix]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [lineOfStars]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [first]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [prefix]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [suffix]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000799350]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [suffix]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000799560 0xc000799590]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [suffix]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [prefix]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [last]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [closing]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [closing]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000720bd0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [prefix]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000720e10]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func writeComment\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [text]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [pos]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bd9c8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bd9c8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bd9f8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeString}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [lines]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000721440]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt stripCommonPrefix\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeByte}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [pos]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeString}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func writeCommentSuffix\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000721950]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [needsLinebreak]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [wroteNewline]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [droppedFF]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000721b60]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeWhitespace}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeByte}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [wroteNewline]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func containsLinebreak\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func intersperseComments\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeCommentPrefix}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeComment}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [last]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p nextComment}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [needsLinebreak]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [needsLinebreak]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeByte}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [needsLinebreak]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p internalError}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func writeWhitespace\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [ch]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p internalError}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072e078]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072d0b0 0xc00072d110]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeByte}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [l]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072e150]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func nlimit\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func mayCombine\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [b]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [b]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [b]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [b]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [b]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [b]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func print\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072e348]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072e378]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [x]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072e3a8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeWhitespace}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072e438]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072de30]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072e480]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072e498]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [data]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [impliedSemi]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072e528]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [data]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [isLit]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [impliedSemi]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072e5a0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [s]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p internalError}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072e648]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000738180]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [data]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [impliedSemi]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072e768]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072e7b0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [data]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [isLit]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [impliedSemi]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072e7f8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{fmt Fprintf}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt panic\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [next]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [wroteNewline droppedFF]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [ch]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [ch]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeByte}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [impliedSemi]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072e948]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072e990]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeString}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072e9c0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func flush\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [wroteNewline droppedFF]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeWhitespace}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func getDoc\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func getLastComment\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func printNode\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [cnode ok]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [node]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [comments]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n ok]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [beg]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [end]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [doc]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [beg]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [com]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [e]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [end]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [j]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072f128]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n ok]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072f170]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072f1a0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p nextComment}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ ok]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072f260]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p stmt}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p decl}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p spec}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ ok]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072f338]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p stmtList}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p declList}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p file}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func resetSpace\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072f470]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072f488]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func Write\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [m]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [b]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072f530]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p resetSpace}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072f608]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [m]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072f668]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [m]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p resetSpace}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p resetSpace}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072f728]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p resetSpace}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072f818]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [m]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt panic\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p resetSpace}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fprint\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p init}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072f9b0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p flush}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [output]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [minwidth]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [padchar]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [padchar]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [twmode]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [minwidth]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [twmode]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [output]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [tw _]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func Fprint\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func Fprint\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func init\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bc270]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bc2a0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bc2b8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bc2e8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bc318]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bc330]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bc348]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func internalError\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{fmt Print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{fmt Println}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt panic\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func commentsHaveNewline\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [line]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [t]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func nextComment\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [c]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [list]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e07c8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e07e0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e0840]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e0870]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func commentBefore\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func commentSizeBefore\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e09c0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [size]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [size]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p nextComment}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func recordLine\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bc948]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func linesFrom\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func posFor\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func lineFor\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bcaf8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bcb10]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func writeLineDirective\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bcc90]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bccd8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bcd50]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bcdb0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bcdf8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func writeIndent\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bcea0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bcee8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bcf18]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bcf48]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func writeByte\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [ch]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [ch]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bcfc0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeIndent}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bd020]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e1518]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e1548]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e1578]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e15a8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e15d8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e1608]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e1638]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func writeString\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeLineDirective}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeIndent}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e1758]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e1770]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e17e8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e1818]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e1860]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [nlines]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [ch]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [li]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e1890]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e18c0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e18f0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e1920]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [c]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e1950]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e1980]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e19b0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bd308]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bd320]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bd368]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func writeCommentPrefix\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeByte}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [hasSep]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [j]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00070bbf0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [hasSep]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [j]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeWhitespace}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [sep]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [sep]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeByte}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [droppedLinebreak]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [j]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00078e690]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00078ea20]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [droppedLinebreak]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [j]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeWhitespace}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeByte}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func isBlank\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func commonPrefix\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func trimRight\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func stripCommonPrefix\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [prefix]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [prefixSet]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000715890]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [prefix]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [prefixSet]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [prefix]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [line]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [prefix]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [lineOfStars]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [prefix]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [lineOfStars]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [first]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [prefix]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [suffix]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000799350]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [suffix]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000799560 0xc000799590]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [suffix]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [prefix]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [last]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [closing]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [closing]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000720bd0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [prefix]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000720e10]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func writeComment\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [text]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [pos]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bd9c8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bd9c8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bd9f8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeString}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [lines]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000721440]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt stripCommonPrefix\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeByte}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [pos]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeString}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func writeCommentSuffix\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000721950]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [needsLinebreak]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [wroteNewline]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [droppedFF]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000721b60]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeWhitespace}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeByte}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [wroteNewline]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func containsLinebreak\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func intersperseComments\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeCommentPrefix}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeComment}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [last]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p nextComment}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [needsLinebreak]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [needsLinebreak]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeByte}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [needsLinebreak]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p internalError}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func writeWhitespace\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [ch]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p internalError}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072e078]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072d0b0 0xc00072d110]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeByte}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [l]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072e150]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func nlimit\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func mayCombine\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [b]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [b]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [b]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [b]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [b]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [b]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func print\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072e348]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072e378]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [x]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072e3a8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeWhitespace}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072e438]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072de30]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072e480]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072e498]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [data]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [impliedSemi]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072e528]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [data]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [isLit]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [impliedSemi]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072e5a0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [s]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p internalError}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072e648]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000738180]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [data]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [impliedSemi]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072e768]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072e7b0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [data]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [isLit]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [impliedSemi]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072e7f8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{fmt Fprintf}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt panic\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [next]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [wroteNewline droppedFF]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [ch]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [ch]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeByte}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [impliedSemi]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072e948]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072e990]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeString}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072e9c0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func flush\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [wroteNewline droppedFF]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeWhitespace}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func getDoc\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func getLastComment\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func printNode\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [cnode ok]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [node]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [comments]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n ok]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [beg]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [end]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [doc]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [beg]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [com]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [e]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [end]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [j]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072f128]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n ok]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072f170]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072f1a0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p nextComment}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ ok]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072f260]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p stmt}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p decl}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p spec}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ ok]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072f338]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p stmtList}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p declList}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p file}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func resetSpace\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072f470]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072f488]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func Write\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [m]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [b]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072f530]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p resetSpace}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072f608]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [m]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072f668]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [m]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p resetSpace}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p resetSpace}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072f728]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p resetSpace}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072f818]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [m]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt panic\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p resetSpace}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fprint\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p init}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072f9b0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p flush}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [output]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [minwidth]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [padchar]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [padchar]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [twmode]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [minwidth]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [twmode]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [output]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [tw _]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func Fprint\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func Fprint\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func init\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bc270]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bc2a0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bc2b8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bc2e8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bc318]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bc330]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bc348]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func internalError\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{fmt Print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{fmt Println}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt panic\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func commentsHaveNewline\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [line]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [t]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func nextComment\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [c]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [list]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e07c8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e07e0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e0840]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e0870]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func commentBefore\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func commentSizeBefore\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e09c0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [size]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [size]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p nextComment}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func recordLine\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bc948]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func linesFrom\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func posFor\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func lineFor\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bcaf8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bcb10]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func writeLineDirective\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bcc90]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bccd8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bcd50]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bcdb0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bcdf8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func writeIndent\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bcea0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bcee8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bcf18]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bcf48]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func writeByte\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [ch]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [ch]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bcfc0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeIndent}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bd020]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e1518]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e1548]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e1578]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e15a8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e15d8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e1608]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e1638]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func writeString\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeLineDirective}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeIndent}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e1758]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e1770]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e17e8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e1818]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e1860]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [nlines]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [ch]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [li]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e1890]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e18c0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e18f0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e1920]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [c]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e1950]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e1980]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e19b0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bd308]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bd320]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bd368]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func writeCommentPrefix\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeByte}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [hasSep]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [j]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00070bbf0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [hasSep]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [j]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeWhitespace}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [sep]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [sep]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeByte}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [droppedLinebreak]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [j]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00078e690]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00078ea20]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [droppedLinebreak]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [j]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeWhitespace}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeByte}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func isBlank\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func commonPrefix\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func trimRight\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func stripCommonPrefix\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [prefix]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [prefixSet]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000715890]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [prefix]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [prefixSet]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [prefix]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [line]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [prefix]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [lineOfStars]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [prefix]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [lineOfStars]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [first]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [prefix]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [suffix]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000799350]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [suffix]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000799560 0xc000799590]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [suffix]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [prefix]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [last]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [closing]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [closing]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000720bd0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [prefix]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000720e10]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func writeComment\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [text]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [pos]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bd9c8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bd9c8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bd9f8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeString}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [lines]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000721440]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt stripCommonPrefix\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeByte}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [pos]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeString}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func writeCommentSuffix\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000721950]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [needsLinebreak]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [wroteNewline]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [droppedFF]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000721b60]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeWhitespace}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeByte}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [wroteNewline]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func containsLinebreak\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func intersperseComments\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeCommentPrefix}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeComment}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [last]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p nextComment}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [needsLinebreak]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [needsLinebreak]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeByte}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [needsLinebreak]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p internalError}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func writeWhitespace\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [ch]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p internalError}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072e078]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072d0b0 0xc00072d110]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeByte}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [l]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072e150]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func nlimit\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func mayCombine\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [b]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [b]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [b]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [b]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [b]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [b]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func print\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072e348]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072e378]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [x]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072e3a8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeWhitespace}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072e438]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072de30]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072e480]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072e498]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [data]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [impliedSemi]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072e528]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [data]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [isLit]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [impliedSemi]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072e5a0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [s]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p internalError}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072e648]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000738180]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [data]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [impliedSemi]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072e768]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072e7b0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [data]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [isLit]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [impliedSemi]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072e7f8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{fmt Fprintf}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt panic\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [next]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [wroteNewline droppedFF]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [ch]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [ch]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeByte}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [impliedSemi]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072e948]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072e990]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeString}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072e9c0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func flush\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [wroteNewline droppedFF]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeWhitespace}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func getDoc\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func getLastComment\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func printNode\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [cnode ok]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [node]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [comments]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n ok]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [beg]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [end]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [doc]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [beg]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [com]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [e]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [end]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [j]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072f128]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n ok]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072f170]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072f1a0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p nextComment}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ ok]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072f260]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p stmt}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p decl}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p spec}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ ok]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072f338]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p stmtList}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p declList}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p file}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func resetSpace\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072f470]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072f488]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func Write\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [m]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [b]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072f530]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p resetSpace}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072f608]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [m]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072f668]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [m]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p resetSpace}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p resetSpace}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072f728]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p resetSpace}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072f818]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [m]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt panic\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p resetSpace}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fprint\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p init}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072f9b0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p flush}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [output]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [minwidth]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [padchar]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [padchar]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [twmode]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [minwidth]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [twmode]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [output]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [tw _]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func Fprint\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func Fprint\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func init\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bc270]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bc2a0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bc2b8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bc2e8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bc318]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bc330]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bc348]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func internalError\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{fmt Print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{fmt Println}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt panic\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func commentsHaveNewline\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [line]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [t]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func nextComment\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [c]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [list]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e07c8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e07e0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e0840]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e0870]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func commentBefore\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func commentSizeBefore\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e09c0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [size]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [size]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p nextComment}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func recordLine\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bc948]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func linesFrom\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func posFor\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func lineFor\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bcaf8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bcb10]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func writeLineDirective\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bcc90]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bccd8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bcd50]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bcdb0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bcdf8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func writeIndent\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bcea0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bcee8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bcf18]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bcf48]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func writeByte\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [ch]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [ch]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bcfc0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeIndent}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bd020]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e1518]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e1548]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e1578]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e15a8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e15d8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e1608]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e1638]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func writeString\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeLineDirective}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeIndent}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e1758]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e1770]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e17e8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e1818]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e1860]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [nlines]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [ch]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [li]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e1890]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e18c0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e18f0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e1920]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [c]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e1950]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e1980]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e19b0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bd308]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bd320]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bd368]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func writeCommentPrefix\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeByte}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [hasSep]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [j]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00070bbf0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [hasSep]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [j]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeWhitespace}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [sep]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [sep]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeByte}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [droppedLinebreak]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [j]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00078e690]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00078ea20]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [droppedLinebreak]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [j]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeWhitespace}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeByte}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func isBlank\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func commonPrefix\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func trimRight\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func stripCommonPrefix\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [prefix]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [prefixSet]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000715890]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [prefix]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [prefixSet]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [prefix]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [line]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [prefix]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [lineOfStars]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [prefix]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [lineOfStars]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [first]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [prefix]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [suffix]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000799350]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [suffix]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000799560 0xc000799590]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [suffix]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [prefix]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [last]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [closing]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [closing]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000720bd0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [prefix]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000720e10]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func writeComment\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [text]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [pos]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bd9c8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bd9c8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bd9f8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeString}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [lines]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000721440]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt stripCommonPrefix\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeByte}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [pos]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeString}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func writeCommentSuffix\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000721950]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [needsLinebreak]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [wroteNewline]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [droppedFF]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000721b60]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeWhitespace}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeByte}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [wroteNewline]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func containsLinebreak\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func intersperseComments\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeCommentPrefix}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeComment}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [last]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p nextComment}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [needsLinebreak]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [needsLinebreak]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeByte}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [needsLinebreak]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p internalError}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func writeWhitespace\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [ch]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p internalError}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072e078]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072d0b0 0xc00072d110]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeByte}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [l]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072e150]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func nlimit\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func mayCombine\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [b]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [b]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [b]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [b]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [b]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [b]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func print\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072e348]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072e378]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [x]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072e3a8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeWhitespace}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072e438]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072de30]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072e480]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072e498]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [data]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [impliedSemi]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072e528]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [data]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [isLit]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [impliedSemi]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072e5a0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [s]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p internalError}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072e648]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000738180]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [data]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [impliedSemi]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072e768]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072e7b0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [data]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [isLit]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [impliedSemi]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072e7f8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{fmt Fprintf}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt panic\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [next]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [wroteNewline droppedFF]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [ch]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [ch]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeByte}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [impliedSemi]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072e948]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072e990]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeString}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072e9c0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func flush\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [wroteNewline droppedFF]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeWhitespace}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func getDoc\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func getLastComment\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func printNode\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [cnode ok]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [node]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [comments]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n ok]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [beg]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [end]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [doc]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [beg]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [com]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [e]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [end]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [j]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072f128]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n ok]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072f170]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072f1a0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p nextComment}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ ok]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072f260]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p stmt}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p decl}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p spec}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ ok]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072f338]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p stmtList}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p declList}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p file}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func resetSpace\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072f470]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072f488]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func Write\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [m]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [b]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072f530]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p resetSpace}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072f608]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [m]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072f668]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [m]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p resetSpace}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p resetSpace}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072f728]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p resetSpace}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072f818]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [m]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt panic\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p resetSpace}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fprint\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p init}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072f9b0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p flush}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [output]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [minwidth]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [padchar]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [padchar]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [twmode]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [minwidth]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [twmode]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [output]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [tw _]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func Fprint\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func Fprint\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func init\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bc270]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bc2a0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bc2b8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bc2e8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bc318]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bc330]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bc348]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func internalError\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{fmt Print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{fmt Println}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt panic\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func commentsHaveNewline\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [line]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [t]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func nextComment\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [c]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [list]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e07c8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e07e0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e0840]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e0870]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func commentBefore\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func commentSizeBefore\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e09c0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [size]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [size]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p nextComment}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func recordLine\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bc948]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func linesFrom\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func posFor\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func lineFor\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bcaf8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bcb10]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func writeLineDirective\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bcc90]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bccd8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bcd50]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bcdb0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bcdf8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func writeIndent\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bcea0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bcee8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bcf18]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bcf48]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func writeByte\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [ch]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [ch]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bcfc0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeIndent}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bd020]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e1518]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e1548]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e1578]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e15a8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e15d8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e1608]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e1638]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func writeString\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeLineDirective}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeIndent}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e1758]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e1770]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e17e8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e1818]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e1860]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [nlines]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [ch]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [li]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e1890]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e18c0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e18f0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e1920]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [c]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e1950]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e1980]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e19b0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bd308]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bd320]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bd368]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func writeCommentPrefix\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeByte}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [hasSep]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [j]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00070bbf0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [hasSep]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [j]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeWhitespace}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [sep]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [sep]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeByte}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [droppedLinebreak]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [j]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00078e690]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00078ea20]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [droppedLinebreak]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [j]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeWhitespace}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeByte}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func isBlank\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func commonPrefix\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func trimRight\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func stripCommonPrefix\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [prefix]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [prefixSet]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000715890]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [prefix]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [prefixSet]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [prefix]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [line]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [prefix]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [lineOfStars]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [prefix]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [lineOfStars]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [first]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [prefix]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [suffix]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000799350]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [suffix]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000799560 0xc000799590]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [suffix]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [prefix]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [last]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [closing]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [closing]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000720bd0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [prefix]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000720e10]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func writeComment\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [text]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [pos]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bd9c8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bd9c8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bd9f8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeString}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [lines]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000721440]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt stripCommonPrefix\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeByte}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [pos]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeString}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func writeCommentSuffix\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000721950]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [needsLinebreak]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [wroteNewline]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [droppedFF]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000721b60]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeWhitespace}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeByte}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [wroteNewline]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func containsLinebreak\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func intersperseComments\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeCommentPrefix}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeComment}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [last]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p nextComment}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [needsLinebreak]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [needsLinebreak]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeByte}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [needsLinebreak]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p internalError}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func writeWhitespace\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [ch]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p internalError}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072e078]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072d0b0 0xc00072d110]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeByte}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [l]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072e150]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func nlimit\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func mayCombine\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [b]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [b]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [b]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [b]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [b]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [b]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func print\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072e348]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072e378]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [x]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072e3a8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeWhitespace}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072e438]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072de30]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072e480]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072e498]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [data]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [impliedSemi]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072e528]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [data]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [isLit]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [impliedSemi]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072e5a0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [s]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p internalError}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072e648]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000738180]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [data]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [impliedSemi]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072e768]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072e7b0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [data]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [isLit]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [impliedSemi]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072e7f8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{fmt Fprintf}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt panic\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [next]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [wroteNewline droppedFF]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [ch]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [ch]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeByte}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [impliedSemi]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072e948]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072e990]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeString}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072e9c0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func flush\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [wroteNewline droppedFF]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeWhitespace}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func getDoc\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func getLastComment\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func printNode\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [cnode ok]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [node]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [comments]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n ok]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [beg]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [end]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [doc]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [beg]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [com]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [e]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [end]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [j]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072f128]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n ok]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072f170]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072f1a0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p nextComment}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ ok]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072f260]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p stmt}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p decl}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p spec}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ ok]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072f338]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p stmtList}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p declList}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p file}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func resetSpace\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072f470]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072f488]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func Write\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [m]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [b]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072f530]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p resetSpace}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072f608]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [m]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072f668]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [m]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p resetSpace}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p resetSpace}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072f728]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p resetSpace}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072f818]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [m]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt panic\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p resetSpace}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fprint\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p init}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072f9b0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p flush}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [output]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [minwidth]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [padchar]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [padchar]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [twmode]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [minwidth]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [twmode]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [output]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [tw _]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func Fprint\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func Fprint\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func init\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bc270]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bc2a0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bc2b8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bc2e8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bc318]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bc330]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bc348]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func internalError\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{fmt Print}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{fmt Println}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt panic\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func commentsHaveNewline\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [line]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [t]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func nextComment\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [c]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [list]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e07c8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e07e0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e0840]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e0870]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func commentBefore\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func commentSizeBefore\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e09c0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [size]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [size]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p nextComment}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func recordLine\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bc948]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func linesFrom\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func posFor\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func lineFor\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bcaf8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bcb10]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func writeLineDirective\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bcc90]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bccd8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bcd50]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bcdb0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bcdf8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func writeIndent\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bcea0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bcee8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bcf18]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bcf48]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func writeByte\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [ch]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [ch]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bcfc0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeIndent}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bd020]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e1518]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e1548]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e1578]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e15a8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e15d8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e1608]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e1638]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func writeString\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeLineDirective}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeIndent}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e1758]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e1770]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e17e8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e1818]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e1860]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [nlines]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [ch]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [li]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e1890]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e18c0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e18f0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e1920]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [c]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e1950]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e1980]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0005e19b0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bd308]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bd320]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bd368]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func writeCommentPrefix\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeByte}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [hasSep]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [j]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00070bbf0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [hasSep]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [j]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeWhitespace}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [sep]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [sep]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeByte}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [droppedLinebreak]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [j]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00078e690]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00078ea20]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [droppedLinebreak]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [j]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeWhitespace}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeByte}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func isBlank\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func commonPrefix\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func trimRight\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func stripCommonPrefix\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [prefix]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [prefixSet]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000715890]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [prefix]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [prefixSet]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [prefix]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [line]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [prefix]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [lineOfStars]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [prefix]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [lineOfStars]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [first]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [prefix]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [suffix]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000799350]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [suffix]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000799560 0xc000799590]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [suffix]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [prefix]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [last]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [closing]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [closing]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000720bd0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [prefix]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000720e10]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func writeComment\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [text]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [pos]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bd9c8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bd9c8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc0006bd9f8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeString}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [lines]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000721440]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt stripCommonPrefix\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeByte}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [pos]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeString}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func writeCommentSuffix\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000721950]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [needsLinebreak]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [wroteNewline]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [droppedFF]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000721b60]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeWhitespace}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeByte}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [wroteNewline]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func containsLinebreak\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func intersperseComments\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeCommentPrefix}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeComment}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [last]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p nextComment}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [needsLinebreak]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [needsLinebreak]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeByte}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [needsLinebreak]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p internalError}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func writeWhitespace\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [ch]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p internalError}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072e078]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072d0b0 0xc00072d110]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeByte}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [l]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072e150]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func nlimit\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func mayCombine\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [b]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [b]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [b]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [b]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [b]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [b]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func print\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072e348]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072e378]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [x]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072e3a8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeWhitespace}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072e438]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072de30]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072e480]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072e498]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [data]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [impliedSemi]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072e528]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [data]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [isLit]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [impliedSemi]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072e5a0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [s]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p internalError}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072e648]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc000738180]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [data]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [impliedSemi]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072e768]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072e7b0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [data]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [isLit]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [impliedSemi]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072e7f8]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{fmt Fprintf}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt panic\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [next]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [wroteNewline droppedFF]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [ch]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [ch]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeByte}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [impliedSemi]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072e948]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072e990]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeString}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072e9c0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func flush\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [wroteNewline droppedFF]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p writeWhitespace}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func getDoc\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func getLastComment\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func printNode\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [cnode ok]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [node]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [comments]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n ok]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [beg]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [end]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [doc]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [beg]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [com]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [e]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [end]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [j]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072f128]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n ok]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072f170]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072f1a0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p nextComment}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p expr}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ ok]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072f260]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p stmt}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p decl}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p spec}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ ok]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072f338]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p stmtList}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p declList}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p file}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func resetSpace\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072f470]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072f488]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func Write\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [m]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [b]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072f530]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p resetSpace}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072f608]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [m]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072f668]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [m]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p resetSpace}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p resetSpace}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072f728]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p resetSpace}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072f818]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [m]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt panic\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p resetSpace}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fprint\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p init}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [0xc00072f9b0]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> ExprStmt &{p flush}\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [output]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [minwidth]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [padchar]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [padchar]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [twmode]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [minwidth]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [twmode]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [output]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [tw _]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> AssignStmt [err]\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func Fprint\n[Go+ CI/Test]   | 2023/05/30 11:33:30 ==> Format Func Fprint\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func init\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0006bc270]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0006bc2a0]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0006bc2b8]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0006bc2e8]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0006bc318]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0006bc330]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0006bc348]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func internalError\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{fmt Print}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{fmt Println}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt panic\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func commentsHaveNewline\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [line]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [t]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [_]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func nextComment\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [c]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [list]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0005e07c8]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0005e07e0]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0005e0840]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0005e0870]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func commentBefore\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func commentSizeBefore\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0005e09c0]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [size]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [size]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p nextComment}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func recordLine\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0006bc948]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func linesFrom\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func posFor\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func lineFor\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0006bcaf8]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0006bcb10]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func writeLineDirective\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0006bcc90]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0006bccd8]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0006bcd50]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0006bcdb0]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0006bcdf8]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func writeIndent\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0006bcea0]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0006bcee8]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0006bcf18]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0006bcf48]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func writeByte\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [ch]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [ch]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0006bcfc0]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p writeIndent}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0006bd020]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0005e1518]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0005e1548]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0005e1578]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0005e15a8]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0005e15d8]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0005e1608]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0005e1638]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func writeString\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p writeLineDirective}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p writeIndent}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0005e1758]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0005e1770]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0005e17e8]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0005e1818]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0005e1860]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [nlines]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [ch]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [li]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0005e1890]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0005e18c0]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0005e18f0]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0005e1920]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [c]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0005e1950]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0005e1980]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0005e19b0]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0006bd308]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0006bd320]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0006bd368]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func writeCommentPrefix\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p writeByte}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [hasSep]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [j]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00070bbf0]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [hasSep]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [j]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p writeWhitespace}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [sep]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [sep]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p writeByte}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [droppedLinebreak]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [j]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00078e690]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00078ea20]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [droppedLinebreak]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [j]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p writeWhitespace}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p writeByte}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func isBlank\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func commonPrefix\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func trimRight\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func stripCommonPrefix\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [prefix]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [prefixSet]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc000715890]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [prefix]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [prefixSet]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [prefix]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [line]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [prefix]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [lineOfStars]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [prefix]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [lineOfStars]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [first]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [prefix]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [suffix]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc000799350]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [suffix]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc000799560 0xc000799590]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [suffix]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [prefix]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [last]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [closing]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [closing]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc000720bd0]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [prefix]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc000720e10]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func writeComment\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [text]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [pos]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0006bd9c8]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0006bd9c8]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0006bd9f8]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p writeString}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [lines]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc000721440]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt stripCommonPrefix\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p writeByte}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [pos]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p writeString}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func writeCommentSuffix\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc000721950]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [needsLinebreak]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [wroteNewline]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [droppedFF]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc000721b60]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p writeWhitespace}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p writeByte}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [wroteNewline]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func containsLinebreak\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func intersperseComments\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p writeCommentPrefix}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p writeComment}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [last]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p nextComment}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [needsLinebreak]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [needsLinebreak]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p writeByte}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [needsLinebreak]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p internalError}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func writeWhitespace\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [ch]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p internalError}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072e078]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072d0b0 0xc00072d110]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p writeByte}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [l]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072e150]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func nlimit\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func mayCombine\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [b]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [b]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [b]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [b]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [b]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [b]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func print\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072e348]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072e378]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [x]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072e3a8]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p writeWhitespace}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072e438]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072de30]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072e480]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072e498]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [data]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [impliedSemi]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072e528]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [data]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [isLit]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [impliedSemi]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072e5a0]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [s]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p internalError}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072e648]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc000738180]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [data]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [impliedSemi]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072e768]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072e7b0]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [data]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [isLit]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [impliedSemi]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072e7f8]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{fmt Fprintf}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt panic\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [next]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [wroteNewline droppedFF]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [ch]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [ch]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p writeByte}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [impliedSemi]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072e948]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072e990]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p writeString}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072e9c0]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func flush\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [wroteNewline droppedFF]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p writeWhitespace}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func getDoc\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func getLastComment\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func printNode\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [cnode ok]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [node]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [comments]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [n ok]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [beg]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [end]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [doc]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [beg]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [com]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [e]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [end]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [j]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072f128]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [n ok]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072f170]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072f1a0]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p nextComment}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p expr}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [_ ok]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072f260]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p stmt}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p decl}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p spec}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [_ ok]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072f338]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p stmtList}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p declList}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p file}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func resetSpace\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072f470]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072f488]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func Write\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [m]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [b]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072f530]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p resetSpace}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072f608]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [m]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072f668]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [m]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p resetSpace}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p resetSpace}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072f728]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p resetSpace}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072f818]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [m]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt panic\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p resetSpace}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fprint\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p init}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [err]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072f9b0]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p flush}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [output]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [minwidth]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [padchar]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [padchar]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [twmode]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [minwidth]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [twmode]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [output]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [tw _]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [err]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func Fprint\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func Fprint\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func init\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0006bc270]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0006bc2a0]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0006bc2b8]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0006bc2e8]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0006bc318]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0006bc330]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0006bc348]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func internalError\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{fmt Print}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{fmt Println}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt panic\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func commentsHaveNewline\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [line]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [t]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [_]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func nextComment\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [c]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [list]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0005e07c8]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0005e07e0]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0005e0840]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0005e0870]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func commentBefore\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func commentSizeBefore\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0005e09c0]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [size]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [size]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p nextComment}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func recordLine\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0006bc948]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func linesFrom\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func posFor\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func lineFor\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0006bcaf8]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0006bcb10]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func writeLineDirective\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0006bcc90]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0006bccd8]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0006bcd50]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0006bcdb0]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0006bcdf8]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func writeIndent\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0006bcea0]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0006bcee8]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0006bcf18]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0006bcf48]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func writeByte\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [ch]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [ch]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0006bcfc0]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p writeIndent}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0006bd020]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0005e1518]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0005e1548]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0005e1578]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0005e15a8]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0005e15d8]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0005e1608]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0005e1638]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func writeString\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p writeLineDirective}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p writeIndent}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0005e1758]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0005e1770]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0005e17e8]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0005e1818]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0005e1860]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [nlines]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [ch]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [li]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0005e1890]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0005e18c0]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0005e18f0]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0005e1920]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [c]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0005e1950]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0005e1980]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0005e19b0]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0006bd308]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0006bd320]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0006bd368]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func writeCommentPrefix\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p writeByte}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [hasSep]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [j]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00070bbf0]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [hasSep]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [j]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p writeWhitespace}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [sep]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [sep]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p writeByte}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [droppedLinebreak]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [j]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00078e690]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00078ea20]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [droppedLinebreak]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [j]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p writeWhitespace}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p writeByte}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func isBlank\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func commonPrefix\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func trimRight\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func stripCommonPrefix\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [prefix]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [prefixSet]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc000715890]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [prefix]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [prefixSet]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [prefix]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [line]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [prefix]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [lineOfStars]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [prefix]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [lineOfStars]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [first]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [prefix]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [suffix]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc000799350]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [suffix]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc000799560 0xc000799590]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [suffix]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [prefix]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [last]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [closing]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [closing]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc000720bd0]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [prefix]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc000720e10]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func writeComment\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [text]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [pos]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0006bd9c8]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0006bd9c8]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0006bd9f8]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p writeString}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [lines]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc000721440]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt stripCommonPrefix\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p writeByte}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [pos]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p writeString}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func writeCommentSuffix\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc000721950]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [needsLinebreak]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [wroteNewline]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [droppedFF]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc000721b60]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p writeWhitespace}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p writeByte}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [wroteNewline]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func containsLinebreak\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func intersperseComments\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p writeCommentPrefix}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p writeComment}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [last]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p nextComment}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [needsLinebreak]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [needsLinebreak]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p writeByte}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [needsLinebreak]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p internalError}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func writeWhitespace\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [ch]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p internalError}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072e078]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072d0b0 0xc00072d110]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p writeByte}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [l]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072e150]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func nlimit\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func mayCombine\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [b]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [b]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [b]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [b]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [b]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [b]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func print\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072e348]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072e378]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [x]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072e3a8]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p writeWhitespace}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072e438]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072de30]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072e480]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072e498]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [data]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [impliedSemi]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072e528]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [data]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [isLit]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [impliedSemi]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072e5a0]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [s]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p internalError}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072e648]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc000738180]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [data]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [impliedSemi]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072e768]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072e7b0]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [data]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [isLit]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [impliedSemi]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072e7f8]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{fmt Fprintf}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt panic\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [next]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [wroteNewline droppedFF]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [ch]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [ch]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p writeByte}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [impliedSemi]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072e948]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072e990]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p writeString}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072e9c0]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func flush\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [wroteNewline droppedFF]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p writeWhitespace}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func getDoc\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func getLastComment\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func printNode\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [cnode ok]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [node]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [comments]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [n ok]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [beg]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [end]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [doc]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [beg]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [com]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [e]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [end]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [j]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072f128]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [n ok]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072f170]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072f1a0]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p nextComment}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p expr}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [_ ok]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072f260]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p stmt}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p decl}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p spec}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [_ ok]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072f338]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p stmtList}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p declList}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p file}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func resetSpace\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072f470]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072f488]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func Write\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [m]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [b]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072f530]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p resetSpace}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072f608]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [m]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072f668]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [m]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p resetSpace}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p resetSpace}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072f728]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p resetSpace}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072f818]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [m]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt panic\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p resetSpace}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fprint\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p init}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [err]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072f9b0]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p flush}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [output]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [minwidth]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [padchar]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [padchar]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [twmode]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [minwidth]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [twmode]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [output]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [tw _]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [err]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func Fprint\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func Fprint\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func init\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0006bc270]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0006bc2a0]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0006bc2b8]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0006bc2e8]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0006bc318]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0006bc330]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0006bc348]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func internalError\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{fmt Print}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{fmt Println}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt panic\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func commentsHaveNewline\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [line]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [t]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [_]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func nextComment\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [c]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [list]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0005e07c8]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0005e07e0]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0005e0840]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0005e0870]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func commentBefore\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func commentSizeBefore\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0005e09c0]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [size]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [size]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p nextComment}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func recordLine\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0006bc948]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func linesFrom\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func posFor\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func lineFor\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0006bcaf8]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0006bcb10]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func writeLineDirective\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0006bcc90]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0006bccd8]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0006bcd50]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0006bcdb0]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0006bcdf8]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func writeIndent\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0006bcea0]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0006bcee8]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0006bcf18]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0006bcf48]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func writeByte\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [ch]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [ch]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0006bcfc0]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p writeIndent}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0006bd020]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0005e1518]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0005e1548]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0005e1578]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0005e15a8]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0005e15d8]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0005e1608]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0005e1638]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func writeString\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p writeLineDirective}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p writeIndent}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0005e1758]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0005e1770]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0005e17e8]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0005e1818]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0005e1860]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [nlines]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [ch]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [li]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0005e1890]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0005e18c0]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0005e18f0]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0005e1920]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [c]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0005e1950]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0005e1980]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0005e19b0]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0006bd308]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0006bd320]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0006bd368]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func writeCommentPrefix\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p writeByte}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [hasSep]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [j]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00070bbf0]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [hasSep]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [j]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p writeWhitespace}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [sep]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [sep]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p writeByte}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [droppedLinebreak]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [j]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00078e690]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00078ea20]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [droppedLinebreak]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [j]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p writeWhitespace}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p writeByte}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func isBlank\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func commonPrefix\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func trimRight\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func stripCommonPrefix\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [prefix]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [prefixSet]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc000715890]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [prefix]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [prefixSet]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [prefix]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [line]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [prefix]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [lineOfStars]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [prefix]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [lineOfStars]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [first]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [prefix]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [suffix]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc000799350]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [suffix]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc000799560 0xc000799590]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [suffix]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [prefix]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [last]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [closing]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [closing]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc000720bd0]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [prefix]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc000720e10]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func writeComment\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [text]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [pos]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0006bd9c8]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0006bd9c8]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0006bd9f8]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p writeString}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [lines]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc000721440]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt stripCommonPrefix\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p writeByte}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [pos]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p writeString}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func writeCommentSuffix\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc000721950]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [needsLinebreak]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [wroteNewline]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [droppedFF]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc000721b60]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p writeWhitespace}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p writeByte}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [wroteNewline]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func containsLinebreak\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func intersperseComments\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p writeCommentPrefix}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p writeComment}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [last]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p nextComment}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [needsLinebreak]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [needsLinebreak]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p writeByte}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [needsLinebreak]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p internalError}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func writeWhitespace\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [ch]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p internalError}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072e078]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072d0b0 0xc00072d110]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p writeByte}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [l]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072e150]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func nlimit\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func mayCombine\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [b]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [b]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [b]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [b]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [b]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [b]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func print\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072e348]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072e378]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [x]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072e3a8]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p writeWhitespace}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072e438]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072de30]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072e480]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072e498]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [data]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [impliedSemi]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072e528]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [data]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [isLit]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [impliedSemi]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072e5a0]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [s]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p internalError}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072e648]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc000738180]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [data]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [impliedSemi]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072e768]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072e7b0]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [data]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [isLit]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [impliedSemi]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072e7f8]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{fmt Fprintf}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt panic\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [next]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [wroteNewline droppedFF]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [ch]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [ch]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p writeByte}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [impliedSemi]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072e948]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072e990]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p writeString}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072e9c0]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func flush\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [wroteNewline droppedFF]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p writeWhitespace}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func getDoc\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func getLastComment\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func printNode\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [cnode ok]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [node]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [comments]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [n ok]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [beg]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [end]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [doc]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [beg]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [com]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [e]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [end]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [j]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072f128]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [n ok]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072f170]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072f1a0]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p nextComment}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p expr}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [_ ok]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072f260]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p stmt}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p decl}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p spec}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [_ ok]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072f338]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p stmtList}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p declList}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p file}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func resetSpace\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072f470]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072f488]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func Write\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [m]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [b]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072f530]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p resetSpace}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072f608]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [m]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072f668]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [m]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p resetSpace}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p resetSpace}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072f728]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p resetSpace}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072f818]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [m]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt panic\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p resetSpace}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fprint\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p init}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [err]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072f9b0]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p flush}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [output]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [minwidth]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [padchar]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [padchar]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [twmode]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [minwidth]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [twmode]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [output]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [tw _]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [err]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func Fprint\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func Fprint\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func init\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0006bc270]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0006bc2a0]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0006bc2b8]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0006bc2e8]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0006bc318]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0006bc330]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0006bc348]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func internalError\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{fmt Print}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{fmt Println}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt panic\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func commentsHaveNewline\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [line]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [t]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [_]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func nextComment\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [c]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [list]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0005e07c8]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0005e07e0]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0005e0840]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0005e0870]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func commentBefore\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func commentSizeBefore\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0005e09c0]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [size]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [size]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p nextComment}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func recordLine\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0006bc948]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func linesFrom\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func posFor\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func lineFor\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0006bcaf8]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0006bcb10]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func writeLineDirective\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0006bcc90]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0006bccd8]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0006bcd50]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0006bcdb0]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0006bcdf8]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func writeIndent\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0006bcea0]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0006bcee8]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0006bcf18]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0006bcf48]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func writeByte\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [ch]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [ch]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0006bcfc0]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p writeIndent}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0006bd020]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0005e1518]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0005e1548]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0005e1578]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0005e15a8]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0005e15d8]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0005e1608]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0005e1638]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func writeString\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p writeLineDirective}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p writeIndent}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0005e1758]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0005e1770]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0005e17e8]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0005e1818]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0005e1860]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [nlines]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [ch]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [li]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0005e1890]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0005e18c0]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0005e18f0]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0005e1920]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [c]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0005e1950]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0005e1980]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0005e19b0]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0006bd308]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0006bd320]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0006bd368]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func writeCommentPrefix\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p writeByte}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [hasSep]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [j]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00070bbf0]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [hasSep]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [j]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p writeWhitespace}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [sep]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [sep]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p writeByte}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [droppedLinebreak]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [j]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00078e690]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00078ea20]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [droppedLinebreak]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [j]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p writeWhitespace}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p writeByte}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func isBlank\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func commonPrefix\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func trimRight\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func stripCommonPrefix\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [prefix]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [prefixSet]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc000715890]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [prefix]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [prefixSet]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [prefix]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [line]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [prefix]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [lineOfStars]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [prefix]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [lineOfStars]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [first]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [prefix]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [suffix]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc000799350]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [suffix]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc000799560 0xc000799590]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [suffix]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [prefix]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [last]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [closing]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [closing]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc000720bd0]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [prefix]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc000720e10]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func writeComment\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [text]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [pos]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0006bd9c8]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0006bd9c8]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0006bd9f8]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p writeString}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [lines]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc000721440]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt stripCommonPrefix\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p writeByte}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [pos]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p writeString}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func writeCommentSuffix\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc000721950]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [needsLinebreak]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [wroteNewline]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [droppedFF]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc000721b60]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p writeWhitespace}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p writeByte}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [wroteNewline]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func containsLinebreak\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func intersperseComments\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p writeCommentPrefix}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p writeComment}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [last]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p nextComment}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [needsLinebreak]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [needsLinebreak]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p writeByte}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [needsLinebreak]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p internalError}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func writeWhitespace\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [ch]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p internalError}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072e078]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072d0b0 0xc00072d110]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p writeByte}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [l]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072e150]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func nlimit\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func mayCombine\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [b]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [b]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [b]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [b]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [b]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [b]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func print\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072e348]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072e378]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [x]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072e3a8]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p writeWhitespace}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072e438]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072de30]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072e480]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072e498]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [data]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [impliedSemi]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072e528]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [data]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [isLit]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [impliedSemi]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072e5a0]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [s]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p internalError}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072e648]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc000738180]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [data]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [impliedSemi]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072e768]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072e7b0]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [data]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [isLit]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [impliedSemi]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072e7f8]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{fmt Fprintf}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt panic\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [next]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [wroteNewline droppedFF]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [ch]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [ch]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p writeByte}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [impliedSemi]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072e948]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072e990]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p writeString}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072e9c0]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func flush\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [wroteNewline droppedFF]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p writeWhitespace}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func getDoc\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func getLastComment\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func printNode\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [cnode ok]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [node]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [comments]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [n ok]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [beg]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [end]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [doc]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [beg]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [com]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [e]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [end]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [j]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072f128]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [n ok]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072f170]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072f1a0]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p nextComment}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p expr}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [_ ok]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072f260]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p stmt}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p decl}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p spec}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [_ ok]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072f338]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p stmtList}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p declList}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p file}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func resetSpace\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072f470]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072f488]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func Write\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [m]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [b]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072f530]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p resetSpace}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072f608]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [m]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072f668]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [m]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p resetSpace}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p resetSpace}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072f728]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p resetSpace}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072f818]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [m]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt panic\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p resetSpace}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fprint\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p init}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [err]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072f9b0]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p flush}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [output]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [minwidth]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [padchar]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [padchar]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [twmode]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [minwidth]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [twmode]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [output]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [tw _]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [err]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func Fprint\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func Fprint\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func init\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0006bc270]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0006bc2a0]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0006bc2b8]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0006bc2e8]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0006bc318]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0006bc330]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0006bc348]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func internalError\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{fmt Print}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{fmt Println}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt panic\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func commentsHaveNewline\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [line]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [t]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [_]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func nextComment\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [c]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [list]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0005e07c8]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0005e07e0]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0005e0840]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0005e0870]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func commentBefore\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func commentSizeBefore\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0005e09c0]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [size]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [size]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p nextComment}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func recordLine\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0006bc948]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func linesFrom\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func posFor\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func lineFor\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0006bcaf8]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0006bcb10]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func writeLineDirective\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0006bcc90]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0006bccd8]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0006bcd50]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0006bcdb0]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0006bcdf8]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func writeIndent\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0006bcea0]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0006bcee8]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0006bcf18]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0006bcf48]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func writeByte\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [ch]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [ch]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0006bcfc0]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p writeIndent}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0006bd020]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0005e1518]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0005e1548]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0005e1578]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0005e15a8]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0005e15d8]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0005e1608]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0005e1638]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func writeString\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p writeLineDirective}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p writeIndent}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0005e1758]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0005e1770]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0005e17e8]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0005e1818]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0005e1860]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [nlines]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [ch]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [li]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0005e1890]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0005e18c0]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0005e18f0]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0005e1920]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [c]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0005e1950]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0005e1980]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0005e19b0]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0006bd308]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0006bd320]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0006bd368]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func writeCommentPrefix\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p writeByte}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [hasSep]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [j]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00070bbf0]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [hasSep]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [j]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p writeWhitespace}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [sep]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [sep]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p writeByte}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [droppedLinebreak]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [j]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00078e690]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00078ea20]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [droppedLinebreak]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [j]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p writeWhitespace}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p writeByte}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func isBlank\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func commonPrefix\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func trimRight\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func stripCommonPrefix\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [prefix]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [prefixSet]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc000715890]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [prefix]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [prefixSet]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [prefix]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [line]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [prefix]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [lineOfStars]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [prefix]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [lineOfStars]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [first]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [prefix]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [suffix]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc000799350]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [suffix]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc000799560 0xc000799590]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [suffix]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [prefix]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [last]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [closing]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [closing]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc000720bd0]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [prefix]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc000720e10]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func writeComment\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [text]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [pos]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0006bd9c8]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0006bd9c8]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0006bd9f8]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p writeString}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [lines]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc000721440]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt stripCommonPrefix\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p writeByte}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [pos]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p writeString}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func writeCommentSuffix\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc000721950]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [needsLinebreak]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [wroteNewline]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [droppedFF]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc000721b60]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p writeWhitespace}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p writeByte}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [wroteNewline]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func containsLinebreak\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func intersperseComments\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p writeCommentPrefix}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p writeComment}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [last]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p nextComment}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [needsLinebreak]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [needsLinebreak]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p writeByte}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [needsLinebreak]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p internalError}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func writeWhitespace\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [ch]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p internalError}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072e078]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072d0b0 0xc00072d110]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p writeByte}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [l]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072e150]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func nlimit\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func mayCombine\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [b]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [b]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [b]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [b]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [b]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [b]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func print\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072e348]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072e378]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [x]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072e3a8]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p writeWhitespace}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072e438]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072de30]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072e480]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072e498]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [data]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [impliedSemi]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072e528]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [data]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [isLit]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [impliedSemi]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072e5a0]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [s]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p internalError}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072e648]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc000738180]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [data]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [impliedSemi]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072e768]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072e7b0]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [data]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [isLit]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [impliedSemi]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072e7f8]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{fmt Fprintf}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt panic\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [next]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [wroteNewline droppedFF]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [ch]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [ch]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p writeByte}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [impliedSemi]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072e948]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072e990]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p writeString}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072e9c0]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func flush\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [wroteNewline droppedFF]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p writeWhitespace}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func getDoc\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func getLastComment\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func printNode\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [cnode ok]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [node]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [comments]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [n ok]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [beg]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [end]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [doc]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [beg]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [com]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [e]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [end]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [j]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072f128]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [n ok]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072f170]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072f1a0]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p nextComment}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p expr}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [_ ok]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072f260]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p stmt}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p decl}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p spec}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [_ ok]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072f338]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p stmtList}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p declList}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p file}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func resetSpace\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072f470]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072f488]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func Write\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [m]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [b]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072f530]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p resetSpace}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072f608]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [m]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072f668]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [m]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p resetSpace}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p resetSpace}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072f728]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p resetSpace}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072f818]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [m]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt panic\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p resetSpace}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fprint\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p init}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [err]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072f9b0]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p flush}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [output]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [minwidth]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [padchar]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [padchar]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [twmode]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [minwidth]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [twmode]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [output]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [tw _]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [err]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func Fprint\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func Fprint\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func init\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0006bc270]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0006bc2a0]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0006bc2b8]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0006bc2e8]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0006bc318]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0006bc330]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0006bc348]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func internalError\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{fmt Print}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{fmt Println}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt panic\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func commentsHaveNewline\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [line]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [t]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [_]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func nextComment\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [c]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [list]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0005e07c8]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0005e07e0]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0005e0840]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0005e0870]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func commentBefore\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func commentSizeBefore\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0005e09c0]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [size]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [size]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p nextComment}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func recordLine\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0006bc948]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func linesFrom\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func posFor\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func lineFor\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0006bcaf8]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0006bcb10]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func writeLineDirective\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0006bcc90]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0006bccd8]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0006bcd50]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0006bcdb0]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0006bcdf8]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func writeIndent\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0006bcea0]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0006bcee8]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0006bcf18]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0006bcf48]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func writeByte\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [ch]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [ch]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0006bcfc0]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p writeIndent}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0006bd020]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0005e1518]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0005e1548]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0005e1578]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0005e15a8]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0005e15d8]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0005e1608]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0005e1638]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func writeString\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p writeLineDirective}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p writeIndent}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0005e1758]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0005e1770]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0005e17e8]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0005e1818]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0005e1860]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [nlines]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [ch]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [li]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0005e1890]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0005e18c0]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0005e18f0]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0005e1920]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [c]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0005e1950]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0005e1980]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0005e19b0]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0006bd308]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0006bd320]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0006bd368]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func writeCommentPrefix\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p writeByte}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [hasSep]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [j]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00070bbf0]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [hasSep]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [j]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p writeWhitespace}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [sep]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [sep]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p writeByte}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [droppedLinebreak]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [j]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00078e690]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00078ea20]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [droppedLinebreak]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [j]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p writeWhitespace}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p writeByte}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func isBlank\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func commonPrefix\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func trimRight\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func stripCommonPrefix\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [prefix]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [prefixSet]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc000715890]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [prefix]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [prefixSet]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [prefix]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [line]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [prefix]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [lineOfStars]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [prefix]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [lineOfStars]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [first]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [prefix]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [suffix]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc000799350]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [suffix]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc000799560 0xc000799590]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [suffix]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [prefix]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [last]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [closing]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [closing]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc000720bd0]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [prefix]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc000720e10]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func writeComment\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [text]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [pos]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0006bd9c8]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0006bd9c8]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0006bd9f8]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p writeString}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [lines]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc000721440]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt stripCommonPrefix\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p writeByte}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [pos]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p writeString}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func writeCommentSuffix\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc000721950]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [needsLinebreak]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [wroteNewline]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [droppedFF]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc000721b60]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p writeWhitespace}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p writeByte}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [wroteNewline]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func containsLinebreak\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func intersperseComments\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p writeCommentPrefix}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p writeComment}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [last]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p nextComment}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [needsLinebreak]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [needsLinebreak]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p writeByte}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [needsLinebreak]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p internalError}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func writeWhitespace\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [ch]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p internalError}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072e078]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072d0b0 0xc00072d110]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p writeByte}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [l]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072e150]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func nlimit\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func mayCombine\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [b]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [b]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [b]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [b]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [b]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [b]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func print\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072e348]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072e378]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [x]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072e3a8]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p writeWhitespace}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072e438]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072de30]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072e480]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072e498]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [data]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [impliedSemi]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072e528]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [data]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [isLit]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [impliedSemi]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072e5a0]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [s]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p internalError}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072e648]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc000738180]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [data]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [impliedSemi]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072e768]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072e7b0]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [data]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [isLit]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [impliedSemi]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072e7f8]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{fmt Fprintf}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt panic\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [next]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [wroteNewline droppedFF]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [ch]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [ch]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p writeByte}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [impliedSemi]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072e948]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072e990]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p writeString}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072e9c0]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func flush\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [wroteNewline droppedFF]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p writeWhitespace}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func getDoc\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func getLastComment\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func printNode\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [cnode ok]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [node]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [comments]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [n ok]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [beg]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [end]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [doc]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [beg]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [com]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [e]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [end]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [j]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072f128]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [n ok]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072f170]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072f1a0]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p nextComment}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p expr}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [_ ok]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072f260]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p stmt}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p decl}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p spec}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [_ ok]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072f338]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p stmtList}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p declList}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p file}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func resetSpace\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072f470]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072f488]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func Write\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [m]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [b]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072f530]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p resetSpace}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072f608]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [m]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072f668]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [m]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p resetSpace}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p resetSpace}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072f728]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p resetSpace}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072f818]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [m]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt panic\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p resetSpace}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fprint\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p init}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [err]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072f9b0]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p flush}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [output]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [minwidth]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [padchar]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [padchar]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [twmode]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [minwidth]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [twmode]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [output]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [tw _]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [err]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func Fprint\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func Fprint\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func init\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0006bc270]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0006bc2a0]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0006bc2b8]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0006bc2e8]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0006bc318]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0006bc330]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0006bc348]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func internalError\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{fmt Print}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{fmt Println}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt panic\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func commentsHaveNewline\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [line]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [t]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [_]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func nextComment\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [c]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [list]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0005e07c8]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0005e07e0]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0005e0840]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0005e0870]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func commentBefore\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func commentSizeBefore\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0005e09c0]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [size]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [size]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p nextComment}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func recordLine\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0006bc948]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func linesFrom\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func posFor\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func lineFor\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0006bcaf8]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0006bcb10]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func writeLineDirective\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0006bcc90]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0006bccd8]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0006bcd50]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0006bcdb0]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0006bcdf8]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func writeIndent\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0006bcea0]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0006bcee8]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0006bcf18]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0006bcf48]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func writeByte\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [ch]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [ch]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0006bcfc0]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p writeIndent}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0006bd020]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0005e1518]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0005e1548]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0005e1578]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0005e15a8]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0005e15d8]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0005e1608]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0005e1638]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func writeString\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p writeLineDirective}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p writeIndent}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0005e1758]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0005e1770]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0005e17e8]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0005e1818]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0005e1860]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [nlines]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [ch]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [li]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0005e1890]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0005e18c0]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0005e18f0]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0005e1920]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [c]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0005e1950]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0005e1980]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0005e19b0]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0006bd308]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0006bd320]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0006bd368]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func writeCommentPrefix\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p writeByte}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [hasSep]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [j]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00070bbf0]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [hasSep]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [j]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p writeWhitespace}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [sep]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [sep]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p writeByte}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [droppedLinebreak]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [j]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00078e690]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00078ea20]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [droppedLinebreak]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [j]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p writeWhitespace}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p writeByte}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func isBlank\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func commonPrefix\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func trimRight\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func stripCommonPrefix\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [prefix]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [prefixSet]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc000715890]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [prefix]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [prefixSet]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [prefix]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [line]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [prefix]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [lineOfStars]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [prefix]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [lineOfStars]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [first]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [prefix]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [suffix]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc000799350]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [suffix]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc000799560 0xc000799590]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [suffix]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [prefix]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [last]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [closing]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [closing]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc000720bd0]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [prefix]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc000720e10]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func writeComment\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [text]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [pos]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0006bd9c8]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0006bd9c8]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0006bd9f8]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p writeString}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [lines]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc000721440]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt stripCommonPrefix\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p writeByte}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [pos]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p writeString}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func writeCommentSuffix\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc000721950]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [needsLinebreak]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [wroteNewline]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [droppedFF]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc000721b60]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p writeWhitespace}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p writeByte}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [wroteNewline]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func containsLinebreak\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func intersperseComments\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p writeCommentPrefix}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p writeComment}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [last]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p nextComment}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [needsLinebreak]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [needsLinebreak]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p writeByte}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [needsLinebreak]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p internalError}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func writeWhitespace\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [ch]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p internalError}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072e078]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072d0b0 0xc00072d110]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p writeByte}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [l]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072e150]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func nlimit\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func mayCombine\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [b]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [b]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [b]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [b]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [b]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [b]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func print\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072e348]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072e378]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [x]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072e3a8]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p writeWhitespace}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072e438]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072de30]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072e480]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072e498]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [data]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [impliedSemi]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072e528]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [data]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [isLit]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [impliedSemi]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072e5a0]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [s]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p internalError}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072e648]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc000738180]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [data]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [impliedSemi]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072e768]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072e7b0]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [data]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [isLit]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [impliedSemi]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072e7f8]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{fmt Fprintf}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt panic\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [next]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [wroteNewline droppedFF]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [ch]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [ch]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p writeByte}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [impliedSemi]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072e948]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072e990]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p writeString}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072e9c0]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func flush\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [wroteNewline droppedFF]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p writeWhitespace}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func getDoc\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func getLastComment\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func printNode\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [cnode ok]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [node]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [comments]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [n ok]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [beg]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [end]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [doc]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [beg]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [com]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [e]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [end]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [j]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072f128]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [n ok]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072f170]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072f1a0]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p nextComment}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p expr}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [_ ok]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072f260]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p stmt}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p decl}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p spec}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [_ ok]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072f338]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p stmtList}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p declList}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p file}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func resetSpace\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072f470]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072f488]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func Write\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [m]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [b]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072f530]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p resetSpace}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072f608]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [m]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072f668]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [m]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p resetSpace}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p resetSpace}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072f728]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p resetSpace}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072f818]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [m]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt panic\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p resetSpace}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fprint\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p init}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [err]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072f9b0]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p flush}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [output]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [minwidth]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [padchar]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [padchar]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [twmode]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [minwidth]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [twmode]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [output]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [tw _]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [err]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func Fprint\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func Fprint\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func init\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0006bc270]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0006bc2a0]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0006bc2b8]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0006bc2e8]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0006bc318]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0006bc330]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0006bc348]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func internalError\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{fmt Print}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{fmt Println}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt panic\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func commentsHaveNewline\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [line]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [t]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [_]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func nextComment\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [c]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [list]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0005e07c8]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0005e07e0]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0005e0840]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0005e0870]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func commentBefore\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func commentSizeBefore\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0005e09c0]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [size]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [size]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p nextComment}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func recordLine\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0006bc948]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func linesFrom\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func posFor\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func lineFor\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0006bcaf8]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0006bcb10]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func writeLineDirective\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0006bcc90]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0006bccd8]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0006bcd50]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0006bcdb0]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0006bcdf8]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func writeIndent\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0006bcea0]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0006bcee8]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0006bcf18]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0006bcf48]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func writeByte\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [ch]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [ch]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0006bcfc0]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p writeIndent}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0006bd020]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0005e1518]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0005e1548]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0005e1578]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0005e15a8]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0005e15d8]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0005e1608]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0005e1638]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func writeString\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p writeLineDirective}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p writeIndent}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0005e1758]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0005e1770]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0005e17e8]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0005e1818]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0005e1860]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [nlines]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [ch]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [li]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0005e1890]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0005e18c0]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0005e18f0]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0005e1920]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [c]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0005e1950]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0005e1980]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0005e19b0]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0006bd308]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0006bd320]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0006bd368]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func writeCommentPrefix\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p writeByte}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [hasSep]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [j]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00070bbf0]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [hasSep]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [j]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p writeWhitespace}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [sep]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [sep]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p writeByte}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [droppedLinebreak]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [j]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00078e690]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00078ea20]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [droppedLinebreak]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [j]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p writeWhitespace}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p writeByte}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func isBlank\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func commonPrefix\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func trimRight\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func stripCommonPrefix\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [prefix]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [prefixSet]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc000715890]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [prefix]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [prefixSet]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [prefix]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [line]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [prefix]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [lineOfStars]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [prefix]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [lineOfStars]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [first]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [prefix]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [suffix]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc000799350]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [suffix]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc000799560 0xc000799590]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [suffix]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [prefix]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [last]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [closing]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [closing]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc000720bd0]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [prefix]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc000720e10]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func writeComment\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [text]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [pos]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0006bd9c8]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0006bd9c8]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc0006bd9f8]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p writeString}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [lines]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc000721440]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt stripCommonPrefix\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p writeByte}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [pos]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p writeString}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func writeCommentSuffix\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc000721950]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [needsLinebreak]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [wroteNewline]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [droppedFF]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc000721b60]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p writeWhitespace}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p writeByte}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [wroteNewline]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func containsLinebreak\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func intersperseComments\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p writeCommentPrefix}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p writeComment}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [last]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p nextComment}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [needsLinebreak]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [needsLinebreak]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p writeByte}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [needsLinebreak]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p internalError}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func writeWhitespace\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [ch]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p internalError}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072e078]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072d0b0 0xc00072d110]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p writeByte}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [l]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072e150]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func nlimit\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func mayCombine\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [b]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [b]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [b]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [b]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [b]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [b]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func print\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072e348]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072e378]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [x]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072e3a8]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p writeWhitespace}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072e438]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072de30]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072e480]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072e498]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [data]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [impliedSemi]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072e528]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [data]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [isLit]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [impliedSemi]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072e5a0]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [s]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p internalError}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072e648]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc000738180]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [data]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [impliedSemi]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072e768]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072e7b0]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [data]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [isLit]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [impliedSemi]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072e7f8]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{fmt Fprintf}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt panic\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [next]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [wroteNewline droppedFF]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [ch]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [ch]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p writeByte}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [impliedSemi]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072e948]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072e990]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p writeString}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072e9c0]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func flush\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [wroteNewline droppedFF]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p writeWhitespace}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func getDoc\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func getLastComment\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func printNode\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [cnode ok]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [node]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [comments]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [n ok]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [beg]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [end]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [doc]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [beg]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [com]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [e]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [end]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [i]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [j]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072f128]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [n ok]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072f170]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072f1a0]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p nextComment}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p expr}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [_ ok]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072f260]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p stmt}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p decl}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p spec}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [_ ok]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072f338]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p stmtList}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p declList}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p file}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func resetSpace\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072f470]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072f488]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func Write\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [m]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [b]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072f530]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p resetSpace}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072f608]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [m]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072f668]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [m]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p resetSpace}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p resetSpace}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072f728]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p resetSpace}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072f818]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [m]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt panic\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [n]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p resetSpace}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fprint\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p init}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [err]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [0xc00072f9b0]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> ExprStmt &{p flush}\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [output]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [minwidth]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [padchar]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [padchar]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [twmode]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [minwidth]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [twmode]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [output]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [_ err]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [tw _]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> AssignStmt [err]\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func Fprint\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func Fprint\n[Go+ CI/Test]   | --- PASS: TestWriteErrors (0.38s)\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | 2023/05/30 11:33:31 ==> Format Func fibo\n[Go+ CI/Test]   | --- PASS: TestBadComments (0.52s)\n[Go+ CI/Test]   | PASS\n[Go+ CI/Test]   | coverage: 87.4% of statements\n[Go+ CI/Test]   | ok  \tgithub.com/goplus/gop/printer\t0.899s\tcoverage: 87.4% of statements\n[Go+ CI/Test]   | ?   \tgithub.com/goplus/gop/scanner\t[no test files]\n[Go+ CI/Test]   | ?   \tgithub.com/goplus/gop/token\t[no test files]\n[Go+ CI/Test]   | === RUN   TestMain\n[Go+ CI/Test]   | === RUN   TestMain/hello_world_1\n[Go+ CI/Test]   | === RUN   TestMain/hello_world_2\n[Go+ CI/Test]   | === RUN   TestMain/hello_world_3\n[Go+ CI/Test]   | --- PASS: TestMain (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestMain/hello_world_1 (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestMain/hello_world_2 (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestMain/hello_world_3 (0.00s)\n[Go+ CI/Test]   | === RUN   TestPrint\n[Go+ CI/Test]   | === RUN   TestPrint/print\n[Go+ CI/Test]   | --- PASS: TestPrint (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestPrint/print (0.00s)\n[Go+ CI/Test]   | === RUN   TestPrintf\n[Go+ CI/Test]   | === RUN   TestPrintf/print\n[Go+ CI/Test]   | --- PASS: TestPrintf (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestPrintf/print (0.00s)\n[Go+ CI/Test]   | === RUN   TestPrintln\n[Go+ CI/Test]   | === RUN   TestPrintln/print\n[Go+ CI/Test]   | --- PASS: TestPrintln (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestPrintln/print (0.00s)\n[Go+ CI/Test]   | === RUN   TestPrintlnGroup\n[Go+ CI/Test]   | === RUN   TestPrintlnGroup/print\n[Go+ CI/Test]   | --- PASS: TestPrintlnGroup (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestPrintlnGroup/print (0.00s)\n[Go+ CI/Test]   | === RUN   TestPrintlnWithOtherFmtCalls\n[Go+ CI/Test]   | === RUN   TestPrintlnWithOtherFmtCalls/print\n[Go+ CI/Test]   | --- PASS: TestPrintlnWithOtherFmtCalls (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestPrintlnWithOtherFmtCalls/print (0.00s)\n[Go+ CI/Test]   | === RUN   TestPrintlnWithOtherFmtCallsGroup\n[Go+ CI/Test]   | === RUN   TestPrintlnWithOtherFmtCallsGroup/print\n[Go+ CI/Test]   | --- PASS: TestPrintlnWithOtherFmtCallsGroup (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestPrintlnWithOtherFmtCallsGroup/print (0.00s)\n[Go+ CI/Test]   | === RUN   TestPrintlnWithOtherFmtCallsWithAssign\n[Go+ CI/Test]   | === RUN   TestPrintlnWithOtherFmtCallsWithAssign/print\n[Go+ CI/Test]   | --- PASS: TestPrintlnWithOtherFmtCallsWithAssign (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestPrintlnWithOtherFmtCallsWithAssign/print (0.00s)\n[Go+ CI/Test]   | === RUN   TestPrintlnWithOtherFmtCallsWithGroupWithAssign\n[Go+ CI/Test]   | === RUN   TestPrintlnWithOtherFmtCallsWithGroupWithAssign/print\n[Go+ CI/Test]   | --- PASS: TestPrintlnWithOtherFmtCallsWithGroupWithAssign (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestPrintlnWithOtherFmtCallsWithGroupWithAssign/print (0.00s)\n[Go+ CI/Test]   | === RUN   TestPrintlnWithOtherFmtDecls\n[Go+ CI/Test]   | === RUN   TestPrintlnWithOtherFmtDecls/print\n[Go+ CI/Test]   | --- PASS: TestPrintlnWithOtherFmtDecls (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestPrintlnWithOtherFmtDecls/print (0.00s)\n[Go+ CI/Test]   | === RUN   TestPrintlnWithOtherFmtVars\n[Go+ CI/Test]   | === RUN   TestPrintlnWithOtherFmtVars/print\n[Go+ CI/Test]   | --- PASS: TestPrintlnWithOtherFmtVars (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestPrintlnWithOtherFmtVars/print (0.00s)\n[Go+ CI/Test]   | === RUN   TestPrintlnWithOtherFmtType\n[Go+ CI/Test]   | === RUN   TestPrintlnWithOtherFmtType/print\n[Go+ CI/Test]   | --- PASS: TestPrintlnWithOtherFmtType (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestPrintlnWithOtherFmtType/print (0.00s)\n[Go+ CI/Test]   | === RUN   TestPrintlnImportAlias\n[Go+ CI/Test]   | === RUN   TestPrintlnImportAlias/print\n[Go+ CI/Test]   | --- PASS: TestPrintlnImportAlias (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestPrintlnImportAlias/print (0.00s)\n[Go+ CI/Test]   | === RUN   TestPrintlnImportMultiAliases\n[Go+ CI/Test]   | === RUN   TestPrintlnImportMultiAliases/print\n[Go+ CI/Test]   | --- PASS: TestPrintlnImportMultiAliases (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestPrintlnImportMultiAliases/print (0.00s)\n[Go+ CI/Test]   | === RUN   TestPrintlnImportMultiAliasesDifferentGroups\n[Go+ CI/Test]   | === RUN   TestPrintlnImportMultiAliasesDifferentGroups/print\n[Go+ CI/Test]   | --- PASS: TestPrintlnImportMultiAliasesDifferentGroups (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestPrintlnImportMultiAliasesDifferentGroups/print (0.00s)\n[Go+ CI/Test]   | === RUN   TestErrorfWithPackageLevelVar\n[Go+ CI/Test]   | === RUN   TestErrorfWithPackageLevelVar/print\n[Go+ CI/Test]   | --- PASS: TestErrorfWithPackageLevelVar (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestErrorfWithPackageLevelVar/print (0.00s)\n[Go+ CI/Test]   | === RUN   TestPrintlnWithFmtVarNoImport\n[Go+ CI/Test]   | === RUN   TestPrintlnWithFmtVarNoImport/print\n[Go+ CI/Test]   | --- PASS: TestPrintlnWithFmtVarNoImport (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestPrintlnWithFmtVarNoImport/print (0.00s)\n[Go+ CI/Test]   | === RUN   TestPrintlnWithFmtVar\n[Go+ CI/Test]   | === RUN   TestPrintlnWithFmtVar/print\n[Go+ CI/Test]   | --- PASS: TestPrintlnWithFmtVar (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestPrintlnWithFmtVar/print (0.00s)\n[Go+ CI/Test]   | === RUN   TestPrintlnWithFmtVarAfter\n[Go+ CI/Test]   | === RUN   TestPrintlnWithFmtVarAfter/print\n[Go+ CI/Test]   | --- PASS: TestPrintlnWithFmtVarAfter (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestPrintlnWithFmtVarAfter/print (0.00s)\n[Go+ CI/Test]   | === RUN   TestPrintlnWithPackageLevelFmtVar\n[Go+ CI/Test]   | === RUN   TestPrintlnWithPackageLevelFmtVar/print\n[Go+ CI/Test]   | --- PASS: TestPrintlnWithPackageLevelFmtVar (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestPrintlnWithPackageLevelFmtVar/print (0.00s)\n[Go+ CI/Test]   | === RUN   TestPrintlnWithPackageLevelFmtVarAfter\n[Go+ CI/Test]   | === RUN   TestPrintlnWithPackageLevelFmtVarAfter/print\n[Go+ CI/Test]   | --- PASS: TestPrintlnWithPackageLevelFmtVarAfter (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestPrintlnWithPackageLevelFmtVarAfter/print (0.00s)\n[Go+ CI/Test]   | === RUN   TestPrintlnWithVarFromCall\n[Go+ CI/Test]   | === RUN   TestPrintlnWithVarFromCall/print\n[Go+ CI/Test]   | --- PASS: TestPrintlnWithVarFromCall (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestPrintlnWithVarFromCall/print (0.00s)\n[Go+ CI/Test]   | === RUN   TestFromTestdata\n[Go+ CI/Test]   | === RUN   TestFromTestdata/collection\n[Go+ CI/Test]   | 2023/05/30 11:33:30 Formatting /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/x/format/_testdata/collection\n[Go+ CI/Test]   | === RUN   TestFromTestdata/gopsyntax\n[Go+ CI/Test]   | 2023/05/30 11:33:30 Formatting /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/x/format/_testdata/gopsyntax\n[Go+ CI/Test]   | === RUN   TestFromTestdata/syntax\n[Go+ CI/Test]   | 2023/05/30 11:33:30 Formatting /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/goplus-gop/x/format/_testdata/syntax\n[Go+ CI/Test]   | --- PASS: TestFromTestdata (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestFromTestdata/collection (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestFromTestdata/gopsyntax (0.00s)\n[Go+ CI/Test]   |     --- PASS: TestFromTestdata/syntax (0.00s)\n[Go+ CI/Test]   | PASS\n[Go+ CI/Test]   | coverage: 96.7% of statements\n[Go+ CI/Test]   | ok  \tgithub.com/goplus/gop/x/format\t0.032s\tcoverage: 96.7% of statements\n[Go+ CI/Test]   | ?   \tgithub.com/goplus/gop/x/gocmd\t[no test files]\n[Go+ CI/Test]   | ?   \tgithub.com/goplus/gop/x/gopenv\t[no test files]\n[Go+ CI/Test]   | === RUN   TestIsLocal\n[Go+ CI/Test]   | --- PASS: TestIsLocal (0.00s)\n[Go+ CI/Test]   | === RUN   TestParseOne\n[Go+ CI/Test]   | --- PASS: TestParseOne (0.00s)\n[Go+ CI/Test]   | === RUN   TestParseAll_wildcard1\n[Go+ CI/Test]   | --- PASS: TestParseAll_wildcard1 (0.00s)\n[Go+ CI/Test]   | === RUN   TestParseAll_wildcard2\n[Go+ CI/Test]   | --- PASS: TestParseAll_wildcard2 (0.00s)\n[Go+ CI/Test]   | === RUN   TestParseAll_multiFiles\n[Go+ CI/Test]   | --- PASS: TestParseAll_multiFiles (0.00s)\n[Go+ CI/Test]   | === RUN   TestParseAll_multiProjs\n[Go+ CI/Test]   | --- PASS: TestParseAll_multiProjs (0.00s)\n[Go+ CI/Test]   | === RUN   TestParseAllErr\n[Go+ CI/Test]   | --- PASS: TestParseAllErr (0.00s)\n[Go+ CI/Test]   | PASS\n[Go+ CI/Test]   | coverage: 100.0% of statements\n[Go+ CI/Test]   | ok  \tgithub.com/goplus/gop/x/gopprojs\t0.042s\tcoverage: 100.0% of statements\n[Go+ CI/Test]   | ?   \tgithub.com/goplus/gop/x/types\t[no test files]\n[Go+ CI/Test]   \u2705  Success - Main Run testcases\n[Go+ CI/Test] \u2b50 Run Main Codecov\n[Go+ CI/Test]   \ud83d\udc33  docker cp src=/home/andre-silva/.cache/act/codecov-codecov-action@v2/ dst=/var/run/act/actions/codecov-codecov-action@v2/\n[Go+ CI/Test]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /var/run/act/actions/codecov-codecov-action@v2/] user=0 workdir=\n[Go+ CI/Test] Get \"http://%2Fvar%2Frun%2Fdocker.sock/v1.41/images/crawlergpt:latest/json\": context canceled\n",
    "actions_stderr": "panic: runtime error: invalid memory address or nil pointer dereference\n[signal SIGSEGV: segmentation violation code=0x1 addr=0x48 pc=0xa13542]\n\ngoroutine 306 [running]:\ngithub.com/nektos/act/pkg/container.(*containerReference).extractFromImageEnv.func1({0xd3dd88, 0xc0007080f0})\n\t/home/runner/work/act/act/pkg/container/docker_run.go:468 +0x1e2\ngithub.com/nektos/act/pkg/common.Executor.IfNot.func1({0xd3dd88, 0xc0007080f0})\n\t/home/runner/work/act/act/pkg/common/executor.go:159 +0x56\ngithub.com/nektos/act/pkg/runner.(*RunContext).ApplyExtraPath(0xc00050ed00, {0xd3dd88, 0xc0007080f0}, 0xc0001ae2b8)\n\t/home/runner/work/act/act/pkg/runner/run_context.go:305 +0x12b\ngithub.com/nektos/act/pkg/runner.runActionImpl.func1({0xd3dd88, 0xc0007080f0})\n\t/home/runner/work/act/act/pkg/runner/action.go:159 +0x71d\ngithub.com/nektos/act/pkg/runner.(*stepActionRemote).main.func1({0xd3dd88, 0xc0007080f0})\n\t/home/runner/work/act/act/pkg/runner/step_action_remote.go:127 +0x3cf\ngithub.com/nektos/act/pkg/runner.runStepExecutor.func1({0xd3dd88, 0xc0007080f0})\n\t/home/runner/work/act/act/pkg/runner/step.go:137 +0xd39\ngithub.com/nektos/act/pkg/common.Executor.Then.func1({0xd3dd88, 0xc0007080f0})\n\t/home/runner/work/act/act/pkg/common/executor.go:141 +0x15b\ngithub.com/nektos/act/pkg/runner.newJobExecutor.func4({0xd3dd88, 0xc0007080f0})\n\t/home/runner/work/act/act/pkg/runner/job_executor.go:77 +0x5a\ngithub.com/nektos/act/pkg/runner.useStepLogger.func1({0xd3dd88, 0xc000397c80})\n\t/home/runner/work/act/act/pkg/runner/job_executor.go:191 +0x39e\ngithub.com/nektos/act/pkg/common.Executor.Then.func1({0xd3dd88, 0xc000397c80})\n\t/home/runner/work/act/act/pkg/common/executor.go:141 +0x15b\ngithub.com/nektos/act/pkg/common.Executor.Finally.func1({0xd3dd88, 0xc000397c80})\n\t/home/runner/work/act/act/pkg/common/executor.go:175 +0x34\ngithub.com/nektos/act/pkg/common.Executor.Finally.func1({0xd3dd88, 0xc000397c80})\n\t/home/runner/work/act/act/pkg/common/executor.go:175 +0x34\ngithub.com/nektos/act/pkg/common.Executor.Finally.func1({0xd3dd88, 0xc000397c80})\n\t/home/runner/work/act/act/pkg/common/executor.go:175 +0x34\ngithub.com/nektos/act/pkg/common.Executor.Then.func1({0xd3dd88, 0xc000397c80})\n\t/home/runner/work/act/act/pkg/common/executor.go:141 +0x15b\ngithub.com/nektos/act/pkg/runner.(*RunContext).Executor.func1({0xd3dd88, 0xc000397c80})\n\t/home/runner/work/act/act/pkg/runner/run_context.go:442 +0x58\ngithub.com/nektos/act/pkg/runner.(*runnerImpl).NewPlanExecutor.func1.1({0xd3dd88, 0xc0005bc030})\n\t/home/runner/work/act/act/pkg/runner/runner.go:145 +0x193\ngithub.com/nektos/act/pkg/common.NewParallelExecutor.func1.1(0x0?, 0x0?)\n\t/home/runner/work/act/act/pkg/common/executor.go:100 +0x5c\ncreated by github.com/nektos/act/pkg/common.NewParallelExecutor.func1\n\t/home/runner/work/act/act/pkg/common/executor.go:98 +0x89\n"
}