{
    "repository": "mattn/go-shellwords",
    "clone_url": "https://github.com/mattn/go-shellwords.git",
    "timestamp": "2023-05-30T10:43:57.364792Z",
    "clone_success": true,
    "number of actions": 1,
    "number_of_test_actions": 1,
    "actions_successful": false,
    "actions_stdout": "[ci/test] \ud83d\ude80  Start image=crawlergpt:latest\n[ci/test]   \ud83d\udc33  docker pull image=crawlergpt:latest platform= username= forcePull=false\n[ci/test]   \ud83d\udc33  docker create image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[ci/test]   \ud83d\udc33  docker run image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[ci/test]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/mattn-go-shellwords] user=0 workdir=\n[ci/test]   \u2601  git clone 'https://github.com/actions/setup-go' # ref=v2\n[ci/test]   \u2601  git clone 'https://github.com/codecov/codecov-action' # ref=v1\n[ci/test] \ud83e\uddea  Matrix: map[go:1.14 os:ubuntu-latest]\n[ci/test] \u2b50 Run Main actions/checkout@v2\n[ci/test]   \u2705  Success - Main actions/checkout@v2\n[ci/test] \u2b50 Run Main actions/setup-go@v2\n[ci/test]   \ud83d\udc33  docker cp src=/home/andre-silva/.cache/act/actions-setup-go@v2/ dst=/var/run/act/actions/actions-setup-go@v2/\n[ci/test]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /var/run/act/actions/actions-setup-go@v2/] user=0 workdir=\n[ci/test]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/actions-setup-go@v2/dist/index.js] user= workdir=\n[ci/test]   | Setup go stable version spec 1.14\n[ci/test]   \ud83d\udcac  ::debug::isExplicit: \n[ci/test]   \ud83d\udcac  ::debug::explicit? false\n[ci/test]   \ud83d\udcac  ::debug::isExplicit: 1.14.15\n[ci/test]   \ud83d\udcac  ::debug::explicit? true\n[ci/test]   \ud83d\udcac  ::debug::isExplicit: 1.15.15\n[ci/test]   \ud83d\udcac  ::debug::explicit? true\n[ci/test]   \ud83d\udcac  ::debug::isExplicit: 1.16.7\n[ci/test]   \ud83d\udcac  ::debug::explicit? true\n[ci/test]   \ud83d\udcac  ::debug::evaluating 3 versions\n[ci/test]   \ud83d\udcac  ::debug::matched: 1.14.15\n[ci/test]   \ud83d\udcac  ::debug::checking cache: /opt/hostedtoolcache/go/1.14.15/x64\n[ci/test]   \ud83d\udcac  ::debug::Found tool in cache go 1.14.15 x64\n[ci/test]   | Found in cache @ /opt/hostedtoolcache/go/1.14.15/x64\n[ci/test]   | Added go to the path\n[ci/test]   \ud83d\udcac  ::debug::which go :/opt/hostedtoolcache/go/1.14.15/x64/bin/go:\n[ci/test]   \ud83d\udcac  ::debug::go env GOPATH :/home/runneradmin/go:\n[ci/test]   \ud83d\udcac  ::debug::creating /home/runneradmin/go\n[ci/test]   \ud83d\udcac  ::debug::creating /home/runneradmin/go/bin\n[ci/test]   \ud83d\udcac  ::debug::add bin true\n[ci/test]   | Successfully setup go version 1.14\n[ci/test]   \u2753 add-matcher /run/act/actions/actions-setup-go@v2/matchers.json\n[ci/test]   | go version go1.14.15 linux/amd64\n[ci/test]   | \n[ci/test]   \u2753  ::group::go env\n[ci/test]   | GO111MODULE=\"\"\n[ci/test]   | GOARCH=\"amd64\"\n[ci/test]   | GOBIN=\"\"\n[ci/test]   | GOCACHE=\"/home/runneradmin/.cache/go-build\"\n[ci/test]   | GOENV=\"/home/runneradmin/.config/go/env\"\n[ci/test]   | GOEXE=\"\"\n[ci/test]   | GOFLAGS=\"\"\n[ci/test]   | GOHOSTARCH=\"amd64\"\n[ci/test]   | GOHOSTOS=\"linux\"\n[ci/test]   | GOINSECURE=\"\"\n[ci/test]   | GONOPROXY=\"\"\n[ci/test]   | GONOSUMDB=\"\"\n[ci/test]   | GOOS=\"linux\"\n[ci/test]   | GOPATH=\"/home/runneradmin/go\"\n[ci/test]   | GOPRIVATE=\"\"\n[ci/test]   | GOPROXY=\"https://proxy.golang.org,direct\"\n[ci/test]   | GOROOT=\"/opt/hostedtoolcache/go/1.14.15/x64\"\n[ci/test]   | GOSUMDB=\"sum.golang.org\"\n[ci/test]   | GOTMPDIR=\"\"\n[ci/test]   | GOTOOLDIR=\"/opt/hostedtoolcache/go/1.14.15/x64/pkg/tool/linux_amd64\"\n[ci/test]   | GCCGO=\"gccgo\"\n[ci/test]   | AR=\"ar\"\n[ci/test]   | CC=\"gcc\"\n[ci/test]   | CXX=\"g++\"\n[ci/test]   | CGO_ENABLED=\"1\"\n[ci/test]   | GOMOD=\"/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/mattn-go-shellwords/go.mod\"\n[ci/test]   | CGO_CFLAGS=\"-g -O2\"\n[ci/test]   | CGO_CPPFLAGS=\"\"\n[ci/test]   | CGO_CXXFLAGS=\"-g -O2\"\n[ci/test]   | CGO_FFLAGS=\"-g -O2\"\n[ci/test]   | CGO_LDFLAGS=\"-g -O2\"\n[ci/test]   | PKG_CONFIG=\"pkg-config\"\n[ci/test]   | GOGCCFLAGS=\"-fPIC -m64 -pthread -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build094741907=/tmp/go-build -gno-record-gcc-switches\"\n[ci/test]   | \n[ci/test]   \u2753  ::endgroup::\n[ci/test]   \u2705  Success - Main actions/setup-go@v2\n[ci/test]   \u2699  ::set-env:: GOROOT=/opt/hostedtoolcache/go/1.14.15/x64\n[ci/test]   \u2699  ::add-path:: /opt/hostedtoolcache/go/1.14.15/x64/bin\n[ci/test]   \u2699  ::add-path:: /home/runneradmin/go/bin\n[ci/test] \u2b50 Run Main go test -cover -coverprofile coverage.txt -race -v ./...\n[ci/test]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/2] user= workdir=\n[ci/test]   | === RUN   TestSimple\n[ci/test]   | --- PASS: TestSimple (0.00s)\n[ci/test]   | === RUN   TestError\n[ci/test]   | --- PASS: TestError (0.00s)\n[ci/test]   | === RUN   TestShellRun\n[ci/test]   | --- PASS: TestShellRun (0.04s)\n[ci/test]   | === RUN   TestShellRunNoEnv\n[ci/test]   | --- PASS: TestShellRunNoEnv (0.03s)\n[ci/test]   | === RUN   TestBacktick\n[ci/test]   | --- PASS: TestBacktick (0.12s)\n[ci/test]   | === RUN   TestBacktickMulti\n[ci/test]   | --- PASS: TestBacktickMulti (0.14s)\n[ci/test]   | === RUN   TestBacktickError\n[ci/test]   | --- PASS: TestBacktickError (0.07s)\n[ci/test]   | === RUN   TestEnv\n[ci/test]   | --- PASS: TestEnv (0.00s)\n[ci/test]   | === RUN   TestCustomEnv\n[ci/test]   | --- PASS: TestCustomEnv (0.00s)\n[ci/test]   | === RUN   TestNoEnv\n[ci/test]   | --- PASS: TestNoEnv (0.00s)\n[ci/test]   | === RUN   TestEnvArguments\n[ci/test]   | --- PASS: TestEnvArguments (0.00s)\n[ci/test]   | === RUN   TestEnvArgumentsFail\n[ci/test]   | --- PASS: TestEnvArgumentsFail (0.00s)\n[ci/test]   | === RUN   TestDupEnv\n[ci/test]   | --- PASS: TestDupEnv (0.00s)\n[ci/test]   | === RUN   TestHaveMore\n[ci/test]   | --- PASS: TestHaveMore (0.00s)\n[ci/test]   | === RUN   TestHaveRedirect\n[ci/test]   | --- PASS: TestHaveRedirect (0.00s)\n[ci/test]   | === RUN   TestBackquoteInFlag\n[ci/test]   | --- PASS: TestBackquoteInFlag (0.01s)\n[ci/test]   | === RUN   TestEnvInQuoted\n[ci/test]   | --- PASS: TestEnvInQuoted (0.00s)\n[ci/test]   | === RUN   TestParseWithEnvs\n[ci/test]   | === RUN   TestParseWithEnvs/FOO=foo_cmd_--args=A=B\n[ci/test]   | === RUN   TestParseWithEnvs/FOO=foo_BAR=bar_cmd_--args=A=B_-A=B\n[ci/test]   | === RUN   TestParseWithEnvs/sh_-c_\"FOO=foo_BAR=bar_cmd_--args=A=B_-A=B\"\n[ci/test]   | === RUN   TestParseWithEnvs/cmd_--args=A=B_-A=B\n[ci/test]   | --- PASS: TestParseWithEnvs (0.00s)\n[ci/test]   |     --- PASS: TestParseWithEnvs/FOO=foo_cmd_--args=A=B (0.00s)\n[ci/test]   |     --- PASS: TestParseWithEnvs/FOO=foo_BAR=bar_cmd_--args=A=B_-A=B (0.00s)\n[ci/test]   |     --- PASS: TestParseWithEnvs/sh_-c_\"FOO=foo_BAR=bar_cmd_--args=A=B_-A=B\" (0.00s)\n[ci/test]   |     --- PASS: TestParseWithEnvs/cmd_--args=A=B_-A=B (0.00s)\n[ci/test]   | === RUN   TestSubShellEnv\n[ci/test]   | === RUN   TestSubShellEnv/baseline\n[ci/test]   | === RUN   TestSubShellEnv/single-quoted\n[ci/test]   | === RUN   TestSubShellEnv/double-quoted\n[ci/test]   | --- PASS: TestSubShellEnv (0.00s)\n[ci/test]   |     --- PASS: TestSubShellEnv/baseline (0.00s)\n[ci/test]   |     --- PASS: TestSubShellEnv/single-quoted (0.00s)\n[ci/test]   |     --- PASS: TestSubShellEnv/double-quoted (0.00s)\n[ci/test]   | PASS\n[ci/test]   | coverage: 93.0% of statements\n[ci/test]   | ok  \tgithub.com/mattn/go-shellwords\t0.525s\tcoverage: 93.0% of statements\n[ci/test]   \u2705  Success - Main go test -cover -coverprofile coverage.txt -race -v ./...\n[ci/test] Get \"http://%2Fvar%2Frun%2Fdocker.sock/v1.41/containers/a75f5ac0d0fc45281e6d725db4615be82c234d98dbd985ed3df23d77d2ac708a/archive?path=%2Fvar%2Frun%2Fact%2Fworkflow%2Fpathcmd.txt\": context canceled\n[ci/test] \ud83c\udfc1  Job succeeded\n",
    "actions_stderr": "Error: context canceled\n"
}