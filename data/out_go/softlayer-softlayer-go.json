{
    "repository": "softlayer/softlayer-go",
    "clone_url": "https://github.com/softlayer/softlayer-go.git",
    "timestamp": "2023-05-30T11:57:13.005134Z",
    "clone_success": true,
    "number of actions": 2,
    "number_of_test_actions": 1,
    "actions_successful": false,
    "actions_stdout": "[Tests/coverage] \ud83d\ude80  Start image=crawlergpt:latest\n[Tests/Build   ] \ud83d\ude80  Start image=crawlergpt:latest\n[Tests/test    ] \ud83d\ude80  Start image=crawlergpt:latest\n[Tests/test    ]   \ud83d\udc33  docker pull image=crawlergpt:latest platform= username= forcePull=false\n[Tests/Build   ]   \ud83d\udc33  docker pull image=crawlergpt:latest platform= username= forcePull=false\n[Tests/coverage]   \ud83d\udc33  docker pull image=crawlergpt:latest platform= username= forcePull=false\n[Tests/coverage]   \ud83d\udc33  docker create image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[Tests/Build   ]   \ud83d\udc33  docker create image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[Tests/coverage]   \ud83d\udc33  docker run image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[Tests/Build   ]   \ud83d\udc33  docker run image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[Tests/test    ]   \ud83d\udc33  docker create image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[Tests/test    ]   \ud83d\udc33  docker run image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[Tests/coverage]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/softlayer-softlayer-go] user=0 workdir=\n[Tests/test    ]   \u2601  git clone 'https://github.com/actions/setup-go' # ref=v1\n[Tests/Build   ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/softlayer-softlayer-go] user=0 workdir=\n[Tests/test    ] \ud83e\uddea  Matrix: map[go-version:1.19.x platform:ubuntu-latest]\n[Tests/test    ] \u2b50 Run Main Install Go\n[Tests/test    ]   \ud83d\udc33  docker cp src=/home/andre-silva/.cache/act/actions-setup-go@v1/ dst=/var/run/act/actions/actions-setup-go@v1/\n[Tests/test    ]   \u274c  Failure - Main Install Go\n[Tests/test    ] Error response from daemon: No such container: 82826431ae591d4c1d8d9c639dfc5049aee8315dc6e84e78fda17661fa60e32f\n[Tests/coverage]   \u2601  git clone 'https://github.com/actions/setup-go' # ref=v1\n[Tests/test    ] failed to remove container: Error response from daemon: No such container: 82826431ae591d4c1d8d9c639dfc5049aee8315dc6e84e78fda17661fa60e32f\n[Tests/test    ] \ud83c\udfc1  Job failed\n[Tests/coverage]   \u2601  git clone 'https://github.com/jandelgado/gcov2lcov-action' # ref=v1.0.8\n[Tests/Build   ]   \u2601  git clone 'https://github.com/actions/setup-go' # ref=v1\n[Tests/coverage] \u2b50 Run Pre Convert coverage to lcov\n[Tests/Build   ] \u2b50 Run Main Set up Go 1.19\n[Tests/Build   ]   \ud83d\udc33  docker cp src=/home/andre-silva/.cache/act/actions-setup-go@v1/ dst=/var/run/act/actions/actions-setup-go@v1/\n[Tests/coverage]   \u2705  Success - Pre Convert coverage to lcov\n[Tests/Build   ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /var/run/act/actions/actions-setup-go@v1/] user=0 workdir=\n[Tests/coverage]   \u2601  git clone 'https://github.com/coverallsapp/github-action' # ref=master\n[Tests/coverage] \u2b50 Run Main Install Go\n[Tests/coverage]   \ud83d\udc33  docker cp src=/home/andre-silva/.cache/act/actions-setup-go@v1/ dst=/var/run/act/actions/actions-setup-go@v1/\n[Tests/coverage]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /var/run/act/actions/actions-setup-go@v1/] user=0 workdir=\n[Tests/Build   ]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/actions-setup-go@v1/lib/setup-go.js] user= workdir=\n[Tests/coverage]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/actions-setup-go@v1/lib/setup-go.js] user= workdir=\n[Tests/coverage]   \ud83d\udcac  ::debug::evaluating 13 versions\n[Tests/coverage]   \ud83d\udcac  ::debug::matched: 1.19.9\n[Tests/coverage]   \ud83d\udcac  ::debug::isExplicit: 1.19.9\n[Tests/coverage]   \ud83d\udcac  ::debug::explicit? true\n[Tests/coverage]   \ud83d\udcac  ::debug::checking cache: /opt/hostedtoolcache/go/1.19.9/x64\n[Tests/coverage]   \ud83d\udcac  ::debug::not found\n[Tests/coverage]   \ud83d\udcac  ::debug::Downloading Go from: https://storage.googleapis.com/golang/go1.19.9.linux-amd64.tar.gz\n[Tests/coverage]   \ud83d\udcac  ::debug::Downloading https://storage.googleapis.com/golang/go1.19.9.linux-amd64.tar.gz\n[Tests/coverage]   \ud83d\udcac  ::debug::Downloading /tmp/c5e7bd33-75b8-41d6-9f60-487827bdcde6\n[Tests/Build   ]   \ud83d\udcac  ::debug::evaluating 13 versions\n[Tests/Build   ]   \ud83d\udcac  ::debug::matched: 1.19.9\n[Tests/Build   ]   \ud83d\udcac  ::debug::isExplicit: 1.19.9\n[Tests/Build   ]   \ud83d\udcac  ::debug::explicit? true\n[Tests/Build   ]   \ud83d\udcac  ::debug::checking cache: /opt/hostedtoolcache/go/1.19.9/x64\n[Tests/Build   ]   \ud83d\udcac  ::debug::not found\n[Tests/Build   ]   \ud83d\udcac  ::debug::Downloading Go from: https://storage.googleapis.com/golang/go1.19.9.linux-amd64.tar.gz\n[Tests/Build   ]   \ud83d\udcac  ::debug::Downloading https://storage.googleapis.com/golang/go1.19.9.linux-amd64.tar.gz\n[Tests/Build   ]   \ud83d\udcac  ::debug::Downloading /tmp/21ef8e43-a1c4-470a-b5aa-f45cee12ff90\n[Tests/coverage]   \ud83d\udcac  ::debug::download complete\n[Tests/coverage]   | [command]/usr/bin/tar xzC /tmp/8aa1649c-8d1c-4921-a762-978555053349 -f /tmp/c5e7bd33-75b8-41d6-9f60-487827bdcde6\n[Tests/Build   ]   \ud83d\udcac  ::debug::download complete\n[Tests/Build   ]   | [command]/usr/bin/tar xzC /tmp/0ec1fa78-dbe0-41e7-9614-0bf3dfc03492 -f /tmp/21ef8e43-a1c4-470a-b5aa-f45cee12ff90\n[Tests/coverage]   \ud83d\udcac  ::debug::Caching tool go 1.19.9 x64\n[Tests/coverage]   \ud83d\udcac  ::debug::source dir: /tmp/8aa1649c-8d1c-4921-a762-978555053349/go\n[Tests/coverage]   \ud83d\udcac  ::debug::destination /opt/hostedtoolcache/go/1.19.9/x64\n[Tests/Build   ]   \ud83d\udcac  ::debug::Caching tool go 1.19.9 x64\n[Tests/Build   ]   \ud83d\udcac  ::debug::source dir: /tmp/0ec1fa78-dbe0-41e7-9614-0bf3dfc03492/go\n[Tests/Build   ]   \ud83d\udcac  ::debug::destination /opt/hostedtoolcache/go/1.19.9/x64\n[Tests/coverage]   \ud83d\udcac  ::debug::finished caching tool\n[Tests/coverage]   \ud83d\udcac  ::debug::Go tool is cached under /opt/hostedtoolcache/go/1.19.9/x64\n[Tests/coverage]   \u2753 add-matcher /run/act/actions/actions-setup-go@v1/.github/go.json\n[Tests/Build   ]   \ud83d\udcac  ::debug::finished caching tool\n[Tests/Build   ]   \ud83d\udcac  ::debug::Go tool is cached under /opt/hostedtoolcache/go/1.19.9/x64\n[Tests/Build   ]   \u2753 add-matcher /run/act/actions/actions-setup-go@v1/.github/go.json\n[Tests/coverage]   \u2705  Success - Main Install Go\n[Tests/Build   ]   \u2705  Success - Main Set up Go 1.19\n[Tests/coverage]   \u2699  ::set-env:: GOROOT=/opt/hostedtoolcache/go/1.19.9/x64\n[Tests/Build   ]   \u2699  ::set-env:: GOROOT=/opt/hostedtoolcache/go/1.19.9/x64\n[Tests/Build   ]   \u2699  ::add-path:: /opt/hostedtoolcache/go/1.19.9/x64/bin\n[Tests/coverage]   \u2699  ::add-path:: /opt/hostedtoolcache/go/1.19.9/x64/bin\n[Tests/Build   ] \u2b50 Run Main Check out code into the Go module directory\n[Tests/coverage] \u2b50 Run Main Checkout code\n[Tests/Build   ]   \u2705  Success - Main Check out code into the Go module directory\n[Tests/coverage]   \u2705  Success - Main Checkout code\n[Tests/Build   ] \u2b50 Run Main Get dependencies\n[Tests/coverage] \u2b50 Run Main Calc coverage\n[Tests/Build   ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/2] user= workdir=\n[Tests/coverage]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/2] user= workdir=\n[Tests/Build   ]   | go: downloading github.com/softlayer/xmlrpc v0.0.0-20200409220501-5f089df7cb7e\n[Tests/Build   ]   | go: downloading github.com/jarcoal/httpmock v1.0.5\n[Tests/Build   ]   | go: downloading golang.org/x/tools v0.1.12\n[Tests/Build   ]   | go: downloading golang.org/x/text v0.3.8\n[Tests/coverage]   | go: downloading golang.org/x/tools v0.1.12\n[Tests/coverage]   | go: downloading github.com/jarcoal/httpmock v1.0.5\n[Tests/coverage]   | go: downloading github.com/softlayer/xmlrpc v0.0.0-20200409220501-5f089df7cb7e\n[Tests/coverage]   | go: downloading golang.org/x/text v0.3.8\n[Tests/Build   ]   | go: downloading golang.org/x/mod v0.6.0-dev.0.20220419223038-86c51ed26bb4\n[Tests/Build   ]   | go: downloading golang.org/x/sys v0.0.0-20220722155257-8c9f86f7a55f\n[Tests/coverage]   | go: downloading golang.org/x/mod v0.6.0-dev.0.20220419223038-86c51ed26bb4\n[Tests/coverage]   | go: downloading golang.org/x/sys v0.0.0-20220722155257-8c9f86f7a55f\n[Tests/Build   ]   \u2705  Success - Main Get dependencies\n[Tests/Build   ] \u2b50 Run Main Build\n[Tests/Build   ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/3] user= workdir=\n[Tests/coverage]   | ?   \tgithub.com/softlayer/softlayer-go/config\t[no test files]\n[Tests/coverage]   | === RUN   TestSearchUnmarshal\n[Tests/coverage]   | TESTING\n[Tests/coverage]   | &{Entity:{} Account:<nil> AccountId:0xc00083b930 AccountOwnedPoolFlag:<nil> ActiveNetworkMonitorIncident:[] ActiveNetworkMonitorIncidentCount:<nil> ActiveTicketCount:<nil> ActiveTickets:[] ActiveTransaction:<nil> ActiveTransactionCount:<nil> ActiveTransactions:[] AllowedHost:<nil> AllowedNetworkStorage:[] AllowedNetworkStorageCount:<nil> AllowedNetworkStorageReplicaCount:<nil> AllowedNetworkStorageReplicas:[] AntivirusSpywareSoftwareComponent:<nil> ApplicationDeliveryController:<nil> AttributeCount:<nil> Attributes:[] AvailableMonitoring:[] AvailableMonitoringCount:<nil> AverageDailyPrivateBandwidthUsage:<nil> AverageDailyPublicBandwidthUsage:<nil> BackendNetworkComponentCount:<nil> BackendNetworkComponents:[] BackendRouterCount:<nil> BackendRouters:[] BandwidthAllocation:<nil> BandwidthAllotmentDetail:<nil> BillingCycleBandwidthUsage:[] BillingCycleBandwidthUsageCount:<nil> BillingCyclePrivateBandwidthUsage:<nil> BillingCyclePublicBandwidthUsage:<nil> BillingItem:<nil> BlockCancelBecauseDisconnectedFlag:<nil> BlockDeviceCount:<nil> BlockDeviceTemplateGroup:<nil> BlockDevices:[] BrowserConsoleAccessLogCount:<nil> BrowserConsoleAccessLogs:[] ConsoleData:<nil> ConsoleIpAddressFlag:<nil> ConsoleIpAddressRecord:<nil> ContinuousDataProtectionSoftwareComponent:<nil> ControlPanel:<nil> CreateDate:<nil> CurrentBandwidthSummary:<nil> Datacenter:<nil> DedicatedAccountHostOnlyFlag:<nil> DedicatedHost:<nil> DeviceStatus:<nil> DeviceStatusId:<nil> Domain:0xc0008326d0 EvaultNetworkStorage:[] EvaultNetworkStorageCount:<nil> FirewallServiceComponent:<nil> FrontendNetworkComponentCount:<nil> FrontendNetworkComponents:[] FrontendRouters:<nil> FullyQualifiedDomainName:<nil> GlobalIdentifier:<nil> GpuCount:<nil> GpuType:<nil> GuestBootParameter:<nil> HardwareFunctionDescription:<nil> Host:<nil> HostIpsSoftwareComponent:<nil> Hostname:0xc0008326c0 HourlyBillingFlag:<nil> Id:0xc00083b920 InboundPrivateBandwidthUsage:<nil> InboundPublicBandwidthUsage:<nil> InternalTagReferenceCount:<nil> InternalTagReferences:[] LastKnownPowerState:<nil> LastOperatingSystemReload:<nil> LastPowerStateId:<nil> LastTransaction:<nil> LastVerifiedDate:<nil> LatestNetworkMonitorIncident:<nil> LocalDiskFlag:<nil> Location:<nil> ManagedResourceFlag:<nil> MaxCpu:<nil> MaxCpuUnits:<nil> MaxMemory:<nil> MetricPollDate:<nil> MetricTrackingObject:<nil> MetricTrackingObjectId:<nil> ModifyDate:<nil> MonitoringRobot:<nil> MonitoringServiceComponent:<nil> MonitoringServiceEligibilityFlag:<nil> MonitoringUserNotification:[] MonitoringUserNotificationCount:<nil> NetworkComponentCount:<nil> NetworkComponents:[] NetworkMonitorCount:<nil> NetworkMonitorIncidentCount:<nil> NetworkMonitorIncidents:[] NetworkMonitors:[] NetworkStorage:[] NetworkStorageCount:<nil> NetworkVlanCount:<nil> NetworkVlans:[] Notes:<nil> OpenCancellationTicket:<nil> OperatingSystem:<nil> OperatingSystemReferenceCode:<nil> OrderedPackageId:<nil> OutboundPrivateBandwidthUsage:<nil> OutboundPublicBandwidthUsage:<nil> OverBandwidthAllocationFlag:<nil> PendingMigrationFlag:<nil> PlacementGroup:<nil> PlacementGroupId:<nil> PostInstallScriptUri:<nil> PowerState:<nil> PrimaryBackendIpAddress:<nil> PrimaryBackendNetworkComponent:<nil> PrimaryIpAddress:<nil> PrimaryNetworkComponent:<nil> PrivateNetworkOnlyFlag:<nil> ProjectedOverBandwidthAllocationFlag:<nil> ProjectedPublicBandwidthUsage:<nil> ProvisionDate:<nil> RecentEventCount:<nil> RecentEvents:[] RegionalGroup:<nil> RegionalInternetRegistry:<nil> ReservedCapacityGroup:<nil> ReservedCapacityGroupFlag:<nil> ReservedCapacityGroupInstance:<nil> ScaleAssetCount:<nil> ScaleAssets:[] ScaleMember:<nil> ScaledFlag:<nil> SecurityScanRequestCount:<nil> SecurityScanRequests:[] ServerRoom:<nil> SoftwareComponentCount:<nil> SoftwareComponents:[] SshKeyCount:<nil> SshKeys:[] StartCpus:<nil> Status:<nil> StatusId:<nil> SupplementalCreateObjectOptions:<nil> TagReferenceCount:<nil> TagReferences:[] TransientGuestFlag:<nil> TransientWebhookURI:<nil> Type:<nil> TypeId:<nil> UpgradeRequest:<nil> UserCount:<nil> UserData:[] UserDataCount:<nil> Users:[] Uuid:<nil> VirtualRack:<nil> VirtualRackId:<nil> VirtualRackName:<nil>}\n[Tests/coverage]   | --- PASS: TestSearchUnmarshal (0.03s)\n[Tests/coverage]   | PASS\n[Tests/coverage]   | coverage: 44.7% of statements\n[Tests/coverage]   | ok  \tgithub.com/softlayer/softlayer-go/datatypes\t0.140s\tcoverage: 44.7% of statements\n[Tests/coverage]   | === RUN   TestFilter\n[Tests/coverage]   | --- PASS: TestFilter (0.00s)\n[Tests/coverage]   | === RUN   TestFilterOpts\n[Tests/coverage]   | --- PASS: TestFilterOpts (0.00s)\n[Tests/coverage]   | === RUN   TestFilterOrderBy\n[Tests/coverage]   | --- PASS: TestFilterOrderBy (0.00s)\n[Tests/coverage]   | PASS\n[Tests/coverage]   | coverage: 50.0% of statements\n[Tests/coverage]   | ok  \tgithub.com/softlayer/softlayer-go/filter\t0.091s\tcoverage: 50.0% of statements\n[Tests/coverage]   | ?   \tgithub.com/softlayer/softlayer-go/helpers/hardware\t[no test files]\n[Tests/coverage]   | ?   \tgithub.com/softlayer/softlayer-go/helpers/location\t[no test files]\n[Tests/coverage]   | ?   \tgithub.com/softlayer/softlayer-go/helpers/network\t[no test files]\n[Tests/coverage]   | ?   \tgithub.com/softlayer/softlayer-go/helpers/order\t[no test files]\n[Tests/coverage]   | ?   \tgithub.com/softlayer/softlayer-go/helpers/product\t[no test files]\n[Tests/coverage]   | ?   \tgithub.com/softlayer/softlayer-go/helpers/virtual\t[no test files]\n[Tests/coverage]   | ?   \tgithub.com/softlayer/softlayer-go/services\t[no test files]\n[Tests/coverage]   | === RUN   TestRest\n[Tests/coverage]   | Test [empty array return]: OK\n[Tests/coverage]   | Test [empty struct return]: OK\n[Tests/coverage]   | Test [struct return]: OK\n[Tests/coverage]   | Test [list of structs return, missing []]: OK\n[Tests/coverage]   | Test [array of struct return]: OK\n[Tests/coverage]   | Test [boolean return]: OK\n[Tests/coverage]   | Test [string return]: OK\n[Tests/coverage]   | Test [string return with quotes]: OK\n[Tests/coverage]   | Test [JSON encoded string with escapes]: OK\n[Tests/coverage]   | Test [uint return]: OK\n[Tests/coverage]   | Test [int return]: OK\n[Tests/coverage]   | Test [negative int return]: OK\n[Tests/coverage]   | Test [[]byte return]: OK\n[Tests/coverage]   | Test [void return]: OK\n[Tests/coverage]   | Test [method arguments]: OK\n[Tests/coverage]   | Test [Error when boolean expected but null received]: OK\n[Tests/coverage]   | Test [Error when uint expected but null received]: OK\n[Tests/coverage]   | Test [HTTP !2xx]: OK\n[Tests/coverage]   | Test [HTTP 200, But Error]: OK\n[Tests/coverage]   | Test [Empty Response]: OK\n[Tests/coverage]   | --- PASS: TestRest (0.00s)\n[Tests/coverage]   | === RUN   TestSession_WithDefaultUserAgent\n[Tests/coverage]   | --- PASS: TestSession_WithDefaultUserAgent (0.00s)\n[Tests/coverage]   | === RUN   TestSession_WithOSENV\n[Tests/coverage]   | --- PASS: TestSession_WithOSENV (0.00s)\n[Tests/coverage]   | === RUN   TestAddToUserAgent\n[Tests/coverage]   | --- PASS: TestAddToUserAgent (0.00s)\n[Tests/coverage]   | === RUN   TestResetUserAgent\n[Tests/coverage]   | --- PASS: TestResetUserAgent (0.00s)\n[Tests/coverage]   | === RUN   TestSetTimeout\n[Tests/coverage]   | --- PASS: TestSetTimeout (0.00s)\n[Tests/coverage]   | === RUN   TestSetRetryWait\n[Tests/coverage]   | --- PASS: TestSetRetryWait (0.00s)\n[Tests/coverage]   | === RUN   TestSetRetries\n[Tests/coverage]   | --- PASS: TestSetRetries (0.00s)\n[Tests/coverage]   | === RUN   TestXmlRpc\n[Tests/coverage]   | Test [empty array return]: OK\n[Tests/coverage]   | Test [Values in array]: OK\n[Tests/coverage]   | Test [Single Value]: OK\n[Tests/coverage]   | Test [Test Object Mask mask[]]: OK\n[Tests/coverage]   | Test [Test Object Mask no mask[]]: OK\n[Tests/coverage]   | --- PASS: TestXmlRpc (0.00s)\n[Tests/coverage]   | PASS\n[Tests/coverage]   | coverage: 56.6% of statements\n[Tests/coverage]   | ok  \tgithub.com/softlayer/softlayer-go/session\t0.073s\tcoverage: 56.6% of statements\n[Tests/coverage]   | ?   \tgithub.com/softlayer/softlayer-go/session/sessionfakes\t[no test files]\n[Tests/coverage]   | === RUN   TestGet\n[Tests/coverage]   | --- PASS: TestGet (0.00s)\n[Tests/coverage]   | === RUN   TestGetStruct\n[Tests/coverage]   | --- PASS: TestGetStruct (0.00s)\n[Tests/coverage]   | === RUN   TestGetDefaults\n[Tests/coverage]   | --- PASS: TestGetDefaults (0.00s)\n[Tests/coverage]   | PASS\n[Tests/coverage]   | coverage: 23.3% of statements\n[Tests/coverage]   | ok  \tgithub.com/softlayer/softlayer-go/sl\t0.120s\tcoverage: 23.3% of statements\n[Tests/coverage]   | === RUN   TestVirtualDiskImageType\n[Tests/coverage]   | --- PASS: TestVirtualDiskImageType (0.00s)\n[Tests/coverage]   | === RUN   TestDomainResourceRecordPropertiesCopiedToBaseType\n[Tests/coverage]   | --- PASS: TestDomainResourceRecordPropertiesCopiedToBaseType (0.00s)\n[Tests/coverage]   | === RUN   TestVoidPatchedReturnTypes\n[Tests/coverage]   | --- PASS: TestVoidPatchedReturnTypes (0.00s)\n[Tests/coverage]   | === RUN   TestPlaceOrder\n[Tests/coverage]   | --- PASS: TestPlaceOrder (0.00s)\n[Tests/coverage]   | PASS\n[Tests/coverage]   | coverage: 0.0% of statements\n[Tests/coverage]   | ok  \tgithub.com/softlayer/softlayer-go/tests\t0.036s\tcoverage: 0.0% of statements\n[Tests/coverage]   | === RUN   TestRemovePrefix\n[Tests/coverage]   | --- PASS: TestRemovePrefix (0.00s)\n[Tests/coverage]   | === RUN   TestConvertType\n[Tests/coverage]   | --- PASS: TestConvertType (0.00s)\n[Tests/coverage]   | === RUN   TestRemoveReservedWords\n[Tests/coverage]   | --- PASS: TestRemoveReservedWords (0.00s)\n[Tests/coverage]   | === RUN   TestDesnak\n[Tests/coverage]   | --- PASS: TestDesnak (0.00s)\n[Tests/coverage]   | PASS\n[Tests/coverage]   | coverage: 13.6% of statements\n[Tests/coverage]   | ok  \tgithub.com/softlayer/softlayer-go/tools\t0.018s\tcoverage: 13.6% of statements\n[Tests/coverage]   \u2705  Success - Main Calc coverage\n[Tests/coverage] \u2b50 Run Main Convert coverage to lcov\n[Tests/coverage]   \ud83d\udc33  docker cp src=/home/andre-silva/.cache/act/jandelgado-gcov2lcov-action@v1.0.8/ dst=/var/run/act/actions/jandelgado-gcov2lcov-action@v1.0.8/\n[Tests/coverage]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /var/run/act/actions/jandelgado-gcov2lcov-action@v1.0.8/] user=0 workdir=\n[Tests/coverage] \u2b50 Run Main set -x && curl -sLf \"$([ latest == latest ] && echo $LATEST_RELEASE || echo $RELEASE)/${NAME}.tar.gz\" | tar zxf - --strip 1\n[Tests/coverage]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/3-composite-0.sh] user= workdir=/tmp\n[Tests/Build   ]   | go get -d -v ./...\n[Tests/Build   ]   | go build ./...\n[Tests/Build   ]   \u2705  Success - Main Build\n[Tests/coverage]   | + tar zxf - --strip 1\n[Tests/coverage]   | ++ '[' latest == latest ']'\n[Tests/coverage]   | ++ echo https://github.com/jandelgado/gcov2lcov/releases/latest/download\n[Tests/coverage]   | + curl -sLf https://github.com/jandelgado/gcov2lcov/releases/latest/download/gcov2lcov-linux-amd64.tar.gz\n[Tests/Build   ] \ud83c\udfc1  Job succeeded\n[Tests/coverage]   \u2705  Success - Main set -x && curl -sLf \"$([ latest == latest ] && echo $LATEST_RELEASE || echo $RELEASE)/${NAME}.tar.gz\" | tar zxf - --strip 1\n[Tests/coverage] \u2b50 Run Main set -x && /tmp/gcov2lcov-linux-amd64 -infile \"coverage.out\" -outfile \"coverage.lcov\"\n[Tests/coverage]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/3-composite-1.sh] user= workdir=\n[Tests/coverage]   | + /tmp/gcov2lcov-linux-amd64 -infile coverage.out -outfile coverage.lcov\n[Tests/coverage]   \u2705  Success - Main set -x && /tmp/gcov2lcov-linux-amd64 -infile \"coverage.out\" -outfile \"coverage.lcov\"\n[Tests/coverage]   \u2705  Success - Main Convert coverage to lcov\n[Tests/coverage] \u2b50 Run Main Coveralls\n[Tests/coverage]   \ud83d\udc33  docker cp src=/home/andre-silva/.cache/act/coverallsapp-github-action@master/ dst=/var/run/act/actions/coverallsapp-github-action@master/\n[Tests/coverage]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /var/run/act/actions/coverallsapp-github-action@master/] user=0 workdir=\n[Tests/coverage]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/coverallsapp-github-action@master/dist/index.js] user= workdir=\n[Tests/coverage]   \u2757  ::error::'github-token' input missing, please include it in your workflow settings 'with' section as 'github-token: ${{ secrets.github_token }}'\n[Tests/coverage]   \u274c  Failure - Main Coveralls\n[Tests/coverage] exitcode '1': failure\n[Tests/coverage] \u2b50 Run Post Convert coverage to lcov\n[Tests/coverage]   \ud83d\udc33  docker cp src=/home/andre-silva/.cache/act/jandelgado-gcov2lcov-action@v1.0.8/ dst=/var/run/act/actions/jandelgado-gcov2lcov-action@v1.0.8/\n[Tests/coverage]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /var/run/act/actions/jandelgado-gcov2lcov-action@v1.0.8/] user=0 workdir=\n[Tests/coverage]   \u2705  Success - Post Convert coverage to lcov\n[Tests/coverage] \ud83c\udfc1  Job failed\n",
    "actions_stderr": "Error: Error occurred running finally: Error occurred running finally: Error response from daemon: remove act-Tests-test-efaca9afe36619b200b3cfa9e5d34050817b306c4f3904a728db9dc8b724d71d-env: volume is in use - [1da8f2334012fbc84a238898d2cf24a4c93f7943a9ce7c7a287e080a13d0c5ec] (original error: <nil>) (original error: <nil>)\n"
}