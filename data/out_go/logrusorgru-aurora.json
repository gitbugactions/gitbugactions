{
    "repository": "logrusorgru/aurora",
    "clone_url": "https://github.com/logrusorgru/aurora.git",
    "timestamp": "2023-05-30T12:02:09.928795Z",
    "clone_success": true,
    "number of actions": 1,
    "number_of_test_actions": 1,
    "actions_successful": false,
    "actions_stdout": "[build/coverage] \ud83d\ude80  Start image=crawlergpt:latest\n[build/test    ] \ud83d\ude80  Start image=crawlergpt:latest\n[build/test    ]   \ud83d\udc33  docker pull image=crawlergpt:latest platform= username= forcePull=false\n[build/coverage]   \ud83d\udc33  docker pull image=crawlergpt:latest platform= username= forcePull=false\n[build/coverage]   \ud83d\udc33  docker create image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[build/test    ]   \ud83d\udc33  docker create image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[build/coverage]   \ud83d\udc33  docker run image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[build/test    ]   \ud83d\udc33  docker run image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[build/coverage]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/logrusorgru-aurora] user=0 workdir=\n[build/coverage]   \u2601  git clone 'https://github.com/actions/setup-go' # ref=v3\n[build/coverage]   \u2601  git clone 'https://github.com/jandelgado/gcov2lcov-action' # ref=v1\n[build/coverage] \u2b50 Run Pre Convert coverage.out to coverage.lcov\n[build/coverage]   \u2705  Success - Pre Convert coverage.out to coverage.lcov\n[build/coverage]   \u2601  git clone 'https://github.com/coverallsapp/github-action' # ref=v1.1.2\n[build/coverage] \u2b50 Run Main Install Go\n[build/coverage]   \ud83d\udc33  docker cp src=/home/andre-silva/.cache/act/actions-setup-go@v3/ dst=/var/run/act/actions/actions-setup-go@v3/\n[build/coverage]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /var/run/act/actions/actions-setup-go@v3/] user=0 workdir=\n[build/coverage]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/actions-setup-go@v3/dist/setup/index.js] user= workdir=\n[build/coverage]   | Setup go version spec 1.19\n[build/coverage]   \ud83d\udcac  ::debug::isExplicit: \n[build/coverage]   \ud83d\udcac  ::debug::explicit? false\n[build/coverage]   \ud83d\udcac  ::debug::isExplicit: 1.14.15\n[build/coverage]   \ud83d\udcac  ::debug::explicit? true\n[build/coverage]   \ud83d\udcac  ::debug::isExplicit: 1.15.15\n[build/coverage]   \ud83d\udcac  ::debug::explicit? true\n[build/coverage]   \ud83d\udcac  ::debug::isExplicit: 1.16.7\n[build/coverage]   \ud83d\udcac  ::debug::explicit? true\n[build/coverage]   \ud83d\udcac  ::debug::evaluating 3 versions\n[build/coverage]   \ud83d\udcac  ::debug::match not found\n[build/coverage]   | Attempting to download 1.19...\n[build/coverage]   \ud83d\udcac  ::debug::No manifest cached\n[build/coverage]   | API rate limit exceeded for 130.242.72.40. (But here's the good news: Authenticated requests get a higher rate limit. Check out the documentation for more details.)\n[build/coverage]   \ud83d\udcac  ::debug::HttpClientError: API rate limit exceeded for 130.242.72.40. (But here's the good news: Authenticated requests get a higher rate limit. Check out the documentation for more details.)%0A    at /run/act/actions/actions-setup-go@v3/dist/setup/index.js:8612:27%0A    at processTicksAndRejections (internal/process/task_queues.js:95:5)\n[build/coverage]   | Falling back to download directly from Go\n[build/coverage]   \ud83d\udcac  ::debug::check 1.20.4 satisfies 1.19\n[build/coverage]   \ud83d\udcac  ::debug::check 1.20.3 satisfies 1.19\n[build/coverage]   \ud83d\udcac  ::debug::check 1.20.2 satisfies 1.19\n[build/coverage]   \ud83d\udcac  ::debug::check 1.20.1 satisfies 1.19\n[build/coverage]   \ud83d\udcac  ::debug::check 1.20.0 satisfies 1.19\n[build/coverage]   \ud83d\udcac  ::debug::check 1.20.0-rc.3 satisfies 1.19\n[build/coverage]   \ud83d\udcac  ::debug::check 1.20.0-rc.2 satisfies 1.19\n[build/coverage]   \ud83d\udcac  ::debug::check 1.20.0-rc.1 satisfies 1.19\n[build/coverage]   \ud83d\udcac  ::debug::check 1.19.9 satisfies 1.19\n[build/coverage]   \ud83d\udcac  ::debug::===amd64 && ===linux\n[build/coverage]   \ud83d\udcac  ::debug::amd64===amd64 && darwin===linux\n[build/coverage]   \ud83d\udcac  ::debug::amd64===amd64 && darwin===linux\n[build/coverage]   \ud83d\udcac  ::debug::arm64===amd64 && darwin===linux\n[build/coverage]   \ud83d\udcac  ::debug::arm64===amd64 && darwin===linux\n[build/coverage]   \ud83d\udcac  ::debug::386===amd64 && freebsd===linux\n[build/coverage]   \ud83d\udcac  ::debug::amd64===amd64 && freebsd===linux\n[build/coverage]   \ud83d\udcac  ::debug::386===amd64 && linux===linux\n[build/coverage]   \ud83d\udcac  ::debug::amd64===amd64 && linux===linux\n[build/coverage]   \ud83d\udcac  ::debug::matched go1.19.9\n[build/coverage]   | Install from dist\n[build/coverage]   | Acquiring go1.19.9 from https://storage.googleapis.com/golang/go1.19.9.linux-amd64.tar.gz\n[build/coverage]   \ud83d\udcac  ::debug::Downloading https://storage.googleapis.com/golang/go1.19.9.linux-amd64.tar.gz\n[build/coverage]   \ud83d\udcac  ::debug::Destination /tmp/d952af27-284d-4781-9931-35046590c8de\n[build/coverage]   \ud83d\udcac  ::debug::download complete\n[build/coverage]   | Extracting Go...\n[build/coverage]   \ud83d\udcac  ::debug::Checking tar --version\n[build/coverage]   \ud83d\udcac  ::debug::tar (GNU tar) 1.30%0ACopyright (C) 2017 Free Software Foundation, Inc.%0ALicense GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.%0AThis is free software: you are free to change and redistribute it.%0AThere is NO WARRANTY, to the extent permitted by law.%0A%0AWritten by John Gilmore and Jay Fenlason.\n[build/coverage]   | [command]/usr/bin/tar xz --warning=no-unknown-keyword --overwrite -C /tmp/4180f591-01c7-4ebd-81cd-957268586be5 -f /tmp/d952af27-284d-4781-9931-35046590c8de\n[build/coverage]   | Successfully extracted go to /tmp/4180f591-01c7-4ebd-81cd-957268586be5\n[build/coverage]   | Adding to the cache ...\n[build/coverage]   \ud83d\udcac  ::debug::Caching tool go 1.19.9 x64\n[build/coverage]   \ud83d\udcac  ::debug::source dir: /tmp/4180f591-01c7-4ebd-81cd-957268586be5/go\n[build/coverage]   \ud83d\udcac  ::debug::destination /opt/hostedtoolcache/go/1.19.9/x64\n[build/coverage]   \ud83d\udcac  ::debug::finished caching tool\n[build/coverage]   | Successfully cached go to /opt/hostedtoolcache/go/1.19.9/x64\n[build/coverage]   | Added go to the path\n[build/coverage]   \ud83d\udcac  ::debug::which go :/opt/hostedtoolcache/go/1.19.9/x64/bin/go:\n[build/coverage]   \ud83d\udcac  ::debug::go env GOPATH :/home/runneradmin/go:\n[build/coverage]   \ud83d\udcac  ::debug::creating /home/runneradmin/go\n[build/coverage]   \ud83d\udcac  ::debug::creating /home/runneradmin/go/bin\n[build/coverage]   \ud83d\udcac  ::debug::add bin true\n[build/coverage]   | Successfully set up Go version 1.19\n[build/coverage]   \u2753 add-matcher /run/act/actions/actions-setup-go@v3/matchers.json\n[build/coverage]   | go version go1.19.9 linux/amd64\n[build/coverage]   | \n[build/coverage]   \u2753  ::group::go env\n[build/coverage]   | GO111MODULE=\"\"\n[build/coverage]   | GOARCH=\"amd64\"\n[build/coverage]   | GOBIN=\"\"\n[build/coverage]   | GOCACHE=\"/home/runneradmin/.cache/go-build\"\n[build/coverage]   | GOENV=\"/home/runneradmin/.config/go/env\"\n[build/coverage]   | GOEXE=\"\"\n[build/coverage]   | GOEXPERIMENT=\"\"\n[build/coverage]   | GOFLAGS=\"\"\n[build/coverage]   | GOHOSTARCH=\"amd64\"\n[build/coverage]   | GOHOSTOS=\"linux\"\n[build/coverage]   | GOINSECURE=\"\"\n[build/coverage]   | GOMODCACHE=\"/home/runneradmin/go/pkg/mod\"\n[build/coverage]   | GONOPROXY=\"\"\n[build/coverage]   | GONOSUMDB=\"\"\n[build/coverage]   | GOOS=\"linux\"\n[build/coverage]   | GOPATH=\"/home/runneradmin/go\"\n[build/coverage]   | GOPRIVATE=\"\"\n[build/coverage]   | GOPROXY=\"https://proxy.golang.org,direct\"\n[build/coverage]   | GOROOT=\"/opt/hostedtoolcache/go/1.19.9/x64\"\n[build/coverage]   | GOSUMDB=\"sum.golang.org\"\n[build/coverage]   | GOTMPDIR=\"\"\n[build/coverage]   | GOTOOLDIR=\"/opt/hostedtoolcache/go/1.19.9/x64/pkg/tool/linux_amd64\"\n[build/coverage]   | GOVCS=\"\"\n[build/coverage]   | GOVERSION=\"go1.19.9\"\n[build/coverage]   | GCCGO=\"gccgo\"\n[build/coverage]   | GOAMD64=\"v1\"\n[build/coverage]   | AR=\"ar\"\n[build/coverage]   | CC=\"gcc\"\n[build/coverage]   | CXX=\"g++\"\n[build/coverage]   | CGO_ENABLED=\"1\"\n[build/coverage]   | GOMOD=\"/tmp/c66e4e10-fed3-11ed-a890-af2cc187fc11/logrusorgru-aurora/go.mod\"\n[build/coverage]   | GOWORK=\"\"\n[build/coverage]   | CGO_CFLAGS=\"-g -O2\"\n[build/coverage]   | CGO_CPPFLAGS=\"\"\n[build/coverage]   | CGO_CXXFLAGS=\"-g -O2\"\n[build/coverage]   | CGO_FFLAGS=\"-g -O2\"\n[build/coverage]   | CGO_LDFLAGS=\"-g -O2\"\n[build/coverage]   | PKG_CONFIG=\"pkg-config\"\n[build/coverage]   | GOGCCFLAGS=\"-fPIC -m64 -pthread -Wl,--no-gc-sections -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build993923708=/tmp/go-build -gno-record-gcc-switches\"\n[build/coverage]   | \n[build/coverage]   \u2753  ::endgroup::\n[build/coverage]   \u2705  Success - Main Install Go\n[build/coverage]   \u2699  ::set-output:: go-version=1.19.9\n[build/coverage]   \u2699  ::add-path:: /opt/hostedtoolcache/go/1.19.9/x64/bin\n[build/coverage]   \u2699  ::add-path:: /home/runneradmin/go/bin\n[build/coverage] \u2b50 Run Main Checkout code\n[build/coverage]   \u2705  Success - Main Checkout code\n[build/coverage] \u2b50 Run Main Calc coverage\n[build/coverage]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/2] user= workdir=\n[build/coverage]   | go: downloading github.com/stretchr/testify v1.8.0\n[build/coverage]   | go: downloading github.com/pmezard/go-difflib v1.0.0\n[build/coverage]   | go: downloading gopkg.in/yaml.v3 v3.0.1\n[build/coverage]   | go: downloading github.com/davecgh/go-spew v1.1.1\n[build/coverage]   | === RUN   Test_New\n[build/coverage]   | --- PASS: Test_New (0.00s)\n[build/coverage]   | === RUN   TestAurora_Config\n[build/coverage]   | --- PASS: TestAurora_Config (0.00s)\n[build/coverage]   | === RUN   TestAurora_no_colors\n[build/coverage]   |     aurora_test.go:80: Reset\n[build/coverage]   |     aurora_test.go:81: Clear\n[build/coverage]   |     aurora_test.go:83: Bold\n[build/coverage]   |     aurora_test.go:84: Faint\n[build/coverage]   |     aurora_test.go:85: DoublyUnderline\n[build/coverage]   |     aurora_test.go:86: Fraktur\n[build/coverage]   |     aurora_test.go:87: Italic\n[build/coverage]   |     aurora_test.go:88: Underline\n[build/coverage]   |     aurora_test.go:89: SlowBlink\n[build/coverage]   |     aurora_test.go:90: RapidBlink\n[build/coverage]   |     aurora_test.go:91: Blink\n[build/coverage]   |     aurora_test.go:92: Reverse\n[build/coverage]   |     aurora_test.go:93: Inverse\n[build/coverage]   |     aurora_test.go:94: Conceal\n[build/coverage]   |     aurora_test.go:95: Hidden\n[build/coverage]   |     aurora_test.go:96: CrossedOut\n[build/coverage]   |     aurora_test.go:97: StrikeThrough\n[build/coverage]   |     aurora_test.go:98: Framed\n[build/coverage]   |     aurora_test.go:99: Encircled\n[build/coverage]   |     aurora_test.go:100: Overlined\n[build/coverage]   |     aurora_test.go:102: Black\n[build/coverage]   |     aurora_test.go:103: Red\n[build/coverage]   |     aurora_test.go:104: Green\n[build/coverage]   |     aurora_test.go:105: Yellow\n[build/coverage]   |     aurora_test.go:106: Blue\n[build/coverage]   |     aurora_test.go:107: Magenta\n[build/coverage]   |     aurora_test.go:108: Cyan\n[build/coverage]   |     aurora_test.go:109: White\n[build/coverage]   |     aurora_test.go:110: BrightBlack\n[build/coverage]   |     aurora_test.go:111: BrightRed\n[build/coverage]   |     aurora_test.go:112: BrightGreen\n[build/coverage]   |     aurora_test.go:113: BrightYellow\n[build/coverage]   |     aurora_test.go:114: BrightBlue\n[build/coverage]   |     aurora_test.go:115: BrightMagenta\n[build/coverage]   |     aurora_test.go:116: BrightCyan\n[build/coverage]   |     aurora_test.go:117: BrightWhite\n[build/coverage]   |     aurora_test.go:118: Index\n[build/coverage]   |     aurora_test.go:119: Gray\n[build/coverage]   |     aurora_test.go:121: BgBlack\n[build/coverage]   |     aurora_test.go:122: BgRed\n[build/coverage]   |     aurora_test.go:123: BgGreen\n[build/coverage]   |     aurora_test.go:124: BgYellow\n[build/coverage]   |     aurora_test.go:125: BgBlue\n[build/coverage]   |     aurora_test.go:126: BgMagenta\n[build/coverage]   |     aurora_test.go:127: BgCyan\n[build/coverage]   |     aurora_test.go:128: BgWhite\n[build/coverage]   |     aurora_test.go:129: BgBrightBlack\n[build/coverage]   |     aurora_test.go:130: BgBrightRed\n[build/coverage]   |     aurora_test.go:131: BgBrightGreen\n[build/coverage]   |     aurora_test.go:132: BgBrightYellow\n[build/coverage]   |     aurora_test.go:133: BgBrightBlue\n[build/coverage]   |     aurora_test.go:134: BgBrightMagenta\n[build/coverage]   |     aurora_test.go:135: BgBrightCyan\n[build/coverage]   |     aurora_test.go:136: BgBrightWhite\n[build/coverage]   |     aurora_test.go:137: BgIndex\n[build/coverage]   |     aurora_test.go:138: BgGray\n[build/coverage]   |     aurora_test.go:140: Colorize\n[build/coverage]   | --- PASS: TestAurora_no_colors (0.00s)\n[build/coverage]   | === RUN   Test_noColors_sprintf\n[build/coverage]   | --- PASS: Test_noColors_sprintf (0.00s)\n[build/coverage]   | === RUN   TestAurora_colored\n[build/coverage]   |     aurora_test.go:160: Reset\n[build/coverage]   |     aurora_test.go:162: Bold\n[build/coverage]   |     aurora_test.go:163: Faint\n[build/coverage]   |     aurora_test.go:164: DoublyUnderline\n[build/coverage]   |     aurora_test.go:165: Fraktur\n[build/coverage]   |     aurora_test.go:166: Italic\n[build/coverage]   |     aurora_test.go:167: Underline\n[build/coverage]   |     aurora_test.go:168: SlowBlink\n[build/coverage]   |     aurora_test.go:169: RapidBlink\n[build/coverage]   |     aurora_test.go:170: Blink\n[build/coverage]   |     aurora_test.go:171: Reverse\n[build/coverage]   |     aurora_test.go:172: Inverse\n[build/coverage]   |     aurora_test.go:173: Conceal\n[build/coverage]   |     aurora_test.go:174: Hidden\n[build/coverage]   |     aurora_test.go:175: CrossedOut\n[build/coverage]   |     aurora_test.go:176: StrikeThrough\n[build/coverage]   |     aurora_test.go:177: Framed\n[build/coverage]   |     aurora_test.go:178: Encircled\n[build/coverage]   |     aurora_test.go:179: Overlined\n[build/coverage]   |     aurora_test.go:181: Black\n[build/coverage]   |     aurora_test.go:182: Red\n[build/coverage]   |     aurora_test.go:183: Green\n[build/coverage]   |     aurora_test.go:184: Yellow\n[build/coverage]   |     aurora_test.go:185: Blue\n[build/coverage]   |     aurora_test.go:186: Magenta\n[build/coverage]   |     aurora_test.go:187: Cyan\n[build/coverage]   |     aurora_test.go:188: White\n[build/coverage]   |     aurora_test.go:189: BrightBlack\n[build/coverage]   |     aurora_test.go:190: BrightRed\n[build/coverage]   |     aurora_test.go:191: BrightGreen\n[build/coverage]   |     aurora_test.go:192: BrightYellow\n[build/coverage]   |     aurora_test.go:193: BrightBlue\n[build/coverage]   |     aurora_test.go:194: BrightMagenta\n[build/coverage]   |     aurora_test.go:195: BrightCyan\n[build/coverage]   |     aurora_test.go:196: BrightWhite\n[build/coverage]   |     aurora_test.go:197: Index\n[build/coverage]   |     aurora_test.go:198: Gray\n[build/coverage]   |     aurora_test.go:200: BgBlack\n[build/coverage]   |     aurora_test.go:201: BgRed\n[build/coverage]   |     aurora_test.go:202: BgGreen\n[build/coverage]   |     aurora_test.go:203: BgYellow\n[build/coverage]   |     aurora_test.go:204: BgBlue\n[build/coverage]   |     aurora_test.go:205: BgMagenta\n[build/coverage]   |     aurora_test.go:206: BgCyan\n[build/coverage]   |     aurora_test.go:207: BgWhite\n[build/coverage]   |     aurora_test.go:208: BgBrightBlack\n[build/coverage]   |     aurora_test.go:209: BgBrightRed\n[build/coverage]   |     aurora_test.go:210: BgBrightGreen\n[build/coverage]   |     aurora_test.go:211: BgBrightYellow\n[build/coverage]   |     aurora_test.go:212: BgBrightBlue\n[build/coverage]   |     aurora_test.go:213: BgBrightMagenta\n[build/coverage]   |     aurora_test.go:214: BgBrightCyan\n[build/coverage]   |     aurora_test.go:215: BgBrightWhite\n[build/coverage]   |     aurora_test.go:216: BgIndex\n[build/coverage]   |     aurora_test.go:217: BgGray\n[build/coverage]   |     aurora_test.go:219: Colorize\n[build/coverage]   | --- PASS: TestAurora_colored (0.00s)\n[build/coverage]   | === RUN   TestAurora_Sprintf\n[build/coverage]   | --- PASS: TestAurora_Sprintf (0.00s)\n[build/coverage]   | === RUN   TestColor_Nos\n[build/coverage]   | --- PASS: TestColor_Nos (0.00s)\n[build/coverage]   | === RUN   Test_itoa\n[build/coverage]   | --- PASS: Test_itoa (0.00s)\n[build/coverage]   | === RUN   TestColor_Reset\n[build/coverage]   | --- PASS: TestColor_Reset (0.00s)\n[build/coverage]   | === RUN   TestColor_Bold\n[build/coverage]   | --- PASS: TestColor_Bold (0.00s)\n[build/coverage]   | === RUN   TestColor_Faint\n[build/coverage]   | --- PASS: TestColor_Faint (0.00s)\n[build/coverage]   | === RUN   TestColor_DoublyUnderline\n[build/coverage]   | --- PASS: TestColor_DoublyUnderline (0.00s)\n[build/coverage]   | === RUN   TestColor_Fraktur\n[build/coverage]   | --- PASS: TestColor_Fraktur (0.00s)\n[build/coverage]   | === RUN   TestColor_Italic\n[build/coverage]   | --- PASS: TestColor_Italic (0.00s)\n[build/coverage]   | === RUN   TestColor_Underline\n[build/coverage]   | --- PASS: TestColor_Underline (0.00s)\n[build/coverage]   | === RUN   TestColor_SlowBlink\n[build/coverage]   | --- PASS: TestColor_SlowBlink (0.00s)\n[build/coverage]   | === RUN   TestColor_RapidBlink\n[build/coverage]   | --- PASS: TestColor_RapidBlink (0.00s)\n[build/coverage]   | === RUN   TestColor_Blink\n[build/coverage]   | --- PASS: TestColor_Blink (0.00s)\n[build/coverage]   | === RUN   TestColor_Reverse\n[build/coverage]   | --- PASS: TestColor_Reverse (0.00s)\n[build/coverage]   | === RUN   TestColor_Inverse\n[build/coverage]   | --- PASS: TestColor_Inverse (0.00s)\n[build/coverage]   | === RUN   TestColor_Conceal\n[build/coverage]   | --- PASS: TestColor_Conceal (0.00s)\n[build/coverage]   | === RUN   TestColor_Hidden\n[build/coverage]   | --- PASS: TestColor_Hidden (0.00s)\n[build/coverage]   | === RUN   TestColor_CrossedOut\n[build/coverage]   | --- PASS: TestColor_CrossedOut (0.00s)\n[build/coverage]   | === RUN   TestColor_StrikeThrough\n[build/coverage]   | --- PASS: TestColor_StrikeThrough (0.00s)\n[build/coverage]   | === RUN   TestColor_Framed\n[build/coverage]   | --- PASS: TestColor_Framed (0.00s)\n[build/coverage]   | === RUN   TestColor_Encircled\n[build/coverage]   | --- PASS: TestColor_Encircled (0.00s)\n[build/coverage]   | === RUN   TestColor_Overlined\n[build/coverage]   | --- PASS: TestColor_Overlined (0.00s)\n[build/coverage]   | === RUN   TestColor_Black\n[build/coverage]   | --- PASS: TestColor_Black (0.00s)\n[build/coverage]   | === RUN   TestColor_Red\n[build/coverage]   | --- PASS: TestColor_Red (0.00s)\n[build/coverage]   | === RUN   TestColor_Green\n[build/coverage]   | --- PASS: TestColor_Green (0.00s)\n[build/coverage]   | === RUN   TestColor_Yellow\n[build/coverage]   | --- PASS: TestColor_Yellow (0.00s)\n[build/coverage]   | === RUN   TestColor_Blue\n[build/coverage]   | --- PASS: TestColor_Blue (0.00s)\n[build/coverage]   | === RUN   TestColor_Magenta\n[build/coverage]   | --- PASS: TestColor_Magenta (0.00s)\n[build/coverage]   | === RUN   TestColor_Cyan\n[build/coverage]   | --- PASS: TestColor_Cyan (0.00s)\n[build/coverage]   | === RUN   TestColor_White\n[build/coverage]   | --- PASS: TestColor_White (0.00s)\n[build/coverage]   | === RUN   TestColor_BrightBlack\n[build/coverage]   | --- PASS: TestColor_BrightBlack (0.00s)\n[build/coverage]   | === RUN   TestColor_BrightRed\n[build/coverage]   | --- PASS: TestColor_BrightRed (0.00s)\n[build/coverage]   | === RUN   TestColor_BrightGreen\n[build/coverage]   | --- PASS: TestColor_BrightGreen (0.00s)\n[build/coverage]   | === RUN   TestColor_BrightYellow\n[build/coverage]   | --- PASS: TestColor_BrightYellow (0.00s)\n[build/coverage]   | === RUN   TestColor_BrightBlue\n[build/coverage]   | --- PASS: TestColor_BrightBlue (0.00s)\n[build/coverage]   | === RUN   TestColor_BrightMagenta\n[build/coverage]   | --- PASS: TestColor_BrightMagenta (0.00s)\n[build/coverage]   | === RUN   TestColor_BrightCyan\n[build/coverage]   | --- PASS: TestColor_BrightCyan (0.00s)\n[build/coverage]   | === RUN   TestColor_BrightWhite\n[build/coverage]   | --- PASS: TestColor_BrightWhite (0.00s)\n[build/coverage]   | === RUN   TestColor_Index\n[build/coverage]   | --- PASS: TestColor_Index (0.00s)\n[build/coverage]   | === RUN   TestColor_Gray\n[build/coverage]   | --- PASS: TestColor_Gray (0.00s)\n[build/coverage]   | === RUN   TestColor_BgBlack\n[build/coverage]   | --- PASS: TestColor_BgBlack (0.00s)\n[build/coverage]   | === RUN   TestColor_BgRed\n[build/coverage]   | --- PASS: TestColor_BgRed (0.00s)\n[build/coverage]   | === RUN   TestColor_BgGreen\n[build/coverage]   | --- PASS: TestColor_BgGreen (0.00s)\n[build/coverage]   | === RUN   TestColor_BgYellow\n[build/coverage]   | --- PASS: TestColor_BgYellow (0.00s)\n[build/coverage]   | === RUN   TestColor_BgBlue\n[build/coverage]   | --- PASS: TestColor_BgBlue (0.00s)\n[build/coverage]   | === RUN   TestColor_BgMagenta\n[build/coverage]   | --- PASS: TestColor_BgMagenta (0.00s)\n[build/coverage]   | === RUN   TestColor_BgCyan\n[build/coverage]   | --- PASS: TestColor_BgCyan (0.00s)\n[build/coverage]   | === RUN   TestColor_BgWhite\n[build/coverage]   | --- PASS: TestColor_BgWhite (0.00s)\n[build/coverage]   | === RUN   TestColor_BgBrightBlack\n[build/coverage]   | --- PASS: TestColor_BgBrightBlack (0.00s)\n[build/coverage]   | === RUN   TestColor_BgBrightRed\n[build/coverage]   | --- PASS: TestColor_BgBrightRed (0.00s)\n[build/coverage]   | === RUN   TestColor_BgBrightGreen\n[build/coverage]   | --- PASS: TestColor_BgBrightGreen (0.00s)\n[build/coverage]   | === RUN   TestColor_BgBrightYellow\n[build/coverage]   | --- PASS: TestColor_BgBrightYellow (0.00s)\n[build/coverage]   | === RUN   TestColor_BgBrightBlue\n[build/coverage]   | --- PASS: TestColor_BgBrightBlue (0.00s)\n[build/coverage]   | === RUN   TestColor_BgBrightMagenta\n[build/coverage]   | --- PASS: TestColor_BgBrightMagenta (0.00s)\n[build/coverage]   | === RUN   TestColor_BgBrightCyan\n[build/coverage]   | --- PASS: TestColor_BgBrightCyan (0.00s)\n[build/coverage]   | === RUN   TestColor_BgBrightWhite\n[build/coverage]   | --- PASS: TestColor_BgBrightWhite (0.00s)\n[build/coverage]   | === RUN   TestColor_BgIndex\n[build/coverage]   | --- PASS: TestColor_BgIndex (0.00s)\n[build/coverage]   | === RUN   TestColor_BgGray\n[build/coverage]   | --- PASS: TestColor_BgGray (0.00s)\n[build/coverage]   | === RUN   TestNewConfig\n[build/coverage]   | --- PASS: TestNewConfig (0.00s)\n[build/coverage]   | === RUN   TestConfig_AddFlags\n[build/coverage]   | --- PASS: TestConfig_AddFlags (0.00s)\n[build/coverage]   | === RUN   TestConfig_Apply\n[build/coverage]   | --- PASS: TestConfig_Apply (0.00s)\n[build/coverage]   | === RUN   TestConfig_Options\n[build/coverage]   | --- PASS: TestConfig_Options (0.00s)\n[build/coverage]   | === RUN   TestConfig_colorConfig\n[build/coverage]   | --- PASS: TestConfig_colorConfig (0.00s)\n[build/coverage]   | === RUN   TestWithColors\n[build/coverage]   | --- PASS: TestWithColors (0.00s)\n[build/coverage]   | === RUN   TestWithHyperlinks\n[build/coverage]   | --- PASS: TestWithHyperlinks (0.00s)\n[build/coverage]   | === RUN   TestHyperlinkParam_stringLen\n[build/coverage]   | --- PASS: TestHyperlinkParam_stringLen (0.00s)\n[build/coverage]   | === RUN   TestHyperlinkParam_String\n[build/coverage]   | --- PASS: TestHyperlinkParam_String (0.00s)\n[build/coverage]   | === RUN   TestIsValidHyperlinkTarget\n[build/coverage]   | --- PASS: TestIsValidHyperlinkTarget (0.00s)\n[build/coverage]   | === RUN   TestIsValidHyperlinkParam\n[build/coverage]   | --- PASS: TestIsValidHyperlinkParam (0.00s)\n[build/coverage]   | === RUN   TestHyperlinkID\n[build/coverage]   | --- PASS: TestHyperlinkID (0.00s)\n[build/coverage]   | === RUN   Test_unhex\n[build/coverage]   | --- PASS: Test_unhex (0.00s)\n[build/coverage]   | === RUN   TestHyperlinkEscape\n[build/coverage]   | --- PASS: TestHyperlinkEscape (0.00s)\n[build/coverage]   | === RUN   TestHyperlinkUnescape\n[build/coverage]   | --- PASS: TestHyperlinkUnescape (0.00s)\n[build/coverage]   | === RUN   Test_Sprintf\n[build/coverage]   | --- PASS: Test_Sprintf (0.00s)\n[build/coverage]   | === RUN   TestValue_String\n[build/coverage]   | --- PASS: TestValue_String (0.00s)\n[build/coverage]   | === RUN   TestValue_Color\n[build/coverage]   | --- PASS: TestValue_Color (0.00s)\n[build/coverage]   | === RUN   TestValue_Value\n[build/coverage]   | --- PASS: TestValue_Value (0.00s)\n[build/coverage]   | === RUN   TestValue_Reset\n[build/coverage]   | --- PASS: TestValue_Reset (0.00s)\n[build/coverage]   | === RUN   TestValue_Clear\n[build/coverage]   | --- PASS: TestValue_Clear (0.00s)\n[build/coverage]   | === RUN   TestValue_Format\n[build/coverage]   | --- PASS: TestValue_Format (0.00s)\n[build/coverage]   | === RUN   TestValue_colors\n[build/coverage]   | --- PASS: TestValue_colors (0.00s)\n[build/coverage]   | === RUN   TestValue_hyperlinks\n[build/coverage]   | --- PASS: TestValue_hyperlinks (0.00s)\n[build/coverage]   | === RUN   Test_Reset\n[build/coverage]   | --- PASS: Test_Reset (0.00s)\n[build/coverage]   | === RUN   Test_Clear\n[build/coverage]   | --- PASS: Test_Clear (0.00s)\n[build/coverage]   | === RUN   Test_Bold\n[build/coverage]   | --- PASS: Test_Bold (0.00s)\n[build/coverage]   | === RUN   Test_Faint\n[build/coverage]   | --- PASS: Test_Faint (0.00s)\n[build/coverage]   | === RUN   Test_DoublyUnderline\n[build/coverage]   | --- PASS: Test_DoublyUnderline (0.00s)\n[build/coverage]   | === RUN   Test_Fraktur\n[build/coverage]   | --- PASS: Test_Fraktur (0.00s)\n[build/coverage]   | === RUN   Test_Italic\n[build/coverage]   | --- PASS: Test_Italic (0.00s)\n[build/coverage]   | === RUN   Test_Underline\n[build/coverage]   | --- PASS: Test_Underline (0.00s)\n[build/coverage]   | === RUN   Test_SlowBlink\n[build/coverage]   | --- PASS: Test_SlowBlink (0.00s)\n[build/coverage]   | === RUN   Test_RapidBlink\n[build/coverage]   | --- PASS: Test_RapidBlink (0.00s)\n[build/coverage]   | === RUN   Test_Blink\n[build/coverage]   | --- PASS: Test_Blink (0.00s)\n[build/coverage]   | === RUN   Test_Reverse\n[build/coverage]   | --- PASS: Test_Reverse (0.00s)\n[build/coverage]   | === RUN   Test_Inverse\n[build/coverage]   | --- PASS: Test_Inverse (0.00s)\n[build/coverage]   | === RUN   Test_Conceal\n[build/coverage]   | --- PASS: Test_Conceal (0.00s)\n[build/coverage]   | === RUN   Test_Hidden\n[build/coverage]   | --- PASS: Test_Hidden (0.00s)\n[build/coverage]   | === RUN   Test_CrossedOut\n[build/coverage]   | --- PASS: Test_CrossedOut (0.00s)\n[build/coverage]   | === RUN   Test_StrikeThrough\n[build/coverage]   | --- PASS: Test_StrikeThrough (0.00s)\n[build/coverage]   | === RUN   Test_Framed\n[build/coverage]   | --- PASS: Test_Framed (0.00s)\n[build/coverage]   | === RUN   Test_Encircled\n[build/coverage]   | --- PASS: Test_Encircled (0.00s)\n[build/coverage]   | === RUN   Test_Overlined\n[build/coverage]   | --- PASS: Test_Overlined (0.00s)\n[build/coverage]   | === RUN   Test_Black\n[build/coverage]   | --- PASS: Test_Black (0.00s)\n[build/coverage]   | === RUN   Test_Red\n[build/coverage]   | --- PASS: Test_Red (0.00s)\n[build/coverage]   | === RUN   Test_Green\n[build/coverage]   | --- PASS: Test_Green (0.00s)\n[build/coverage]   | === RUN   Test_Yellow\n[build/coverage]   | --- PASS: Test_Yellow (0.00s)\n[build/coverage]   | === RUN   Test_Blue\n[build/coverage]   | --- PASS: Test_Blue (0.00s)\n[build/coverage]   | === RUN   Test_Magenta\n[build/coverage]   | --- PASS: Test_Magenta (0.00s)\n[build/coverage]   | === RUN   Test_Cyan\n[build/coverage]   | --- PASS: Test_Cyan (0.00s)\n[build/coverage]   | === RUN   Test_White\n[build/coverage]   | --- PASS: Test_White (0.00s)\n[build/coverage]   | === RUN   Test_BrightBlack\n[build/coverage]   | --- PASS: Test_BrightBlack (0.00s)\n[build/coverage]   | === RUN   Test_BrightRed\n[build/coverage]   | --- PASS: Test_BrightRed (0.00s)\n[build/coverage]   | === RUN   Test_BrightGreen\n[build/coverage]   | --- PASS: Test_BrightGreen (0.00s)\n[build/coverage]   | === RUN   Test_BrightYellow\n[build/coverage]   | --- PASS: Test_BrightYellow (0.00s)\n[build/coverage]   | === RUN   Test_BrightBlue\n[build/coverage]   | --- PASS: Test_BrightBlue (0.00s)\n[build/coverage]   | === RUN   Test_BrightMagenta\n[build/coverage]   | --- PASS: Test_BrightMagenta (0.00s)\n[build/coverage]   | === RUN   Test_BrightCyan\n[build/coverage]   | --- PASS: Test_BrightCyan (0.00s)\n[build/coverage]   | === RUN   Test_BrightWhite\n[build/coverage]   | --- PASS: Test_BrightWhite (0.00s)\n[build/coverage]   | === RUN   Test_Index\n[build/coverage]   | --- PASS: Test_Index (0.00s)\n[build/coverage]   | === RUN   Test_Gray\n[build/coverage]   | --- PASS: Test_Gray (0.00s)\n[build/coverage]   | === RUN   Test_BgBlack\n[build/coverage]   | --- PASS: Test_BgBlack (0.00s)\n[build/coverage]   | === RUN   Test_BgRed\n[build/coverage]   | --- PASS: Test_BgRed (0.00s)\n[build/coverage]   | === RUN   Test_BgGreen\n[build/coverage]   | --- PASS: Test_BgGreen (0.00s)\n[build/coverage]   | === RUN   Test_BgYellow\n[build/coverage]   | --- PASS: Test_BgYellow (0.00s)\n[build/coverage]   | === RUN   Test_BgBlue\n[build/coverage]   | --- PASS: Test_BgBlue (0.00s)\n[build/coverage]   | === RUN   Test_BgMagenta\n[build/coverage]   | --- PASS: Test_BgMagenta (0.00s)\n[build/coverage]   | === RUN   Test_BgCyan\n[build/coverage]   | --- PASS: Test_BgCyan (0.00s)\n[build/coverage]   | === RUN   Test_BgWhite\n[build/coverage]   | --- PASS: Test_BgWhite (0.00s)\n[build/coverage]   | === RUN   Test_BgBrightBlack\n[build/coverage]   | --- PASS: Test_BgBrightBlack (0.00s)\n[build/coverage]   | === RUN   Test_BgBrightRed\n[build/coverage]   | --- PASS: Test_BgBrightRed (0.00s)\n[build/coverage]   | === RUN   Test_BgBrightGreen\n[build/coverage]   | --- PASS: Test_BgBrightGreen (0.00s)\n[build/coverage]   | === RUN   Test_BgBrightYellow\n[build/coverage]   | --- PASS: Test_BgBrightYellow (0.00s)\n[build/coverage]   | === RUN   Test_BgBrightBlue\n[build/coverage]   | --- PASS: Test_BgBrightBlue (0.00s)\n[build/coverage]   | === RUN   Test_BgBrightMagenta\n[build/coverage]   | --- PASS: Test_BgBrightMagenta (0.00s)\n[build/coverage]   | === RUN   Test_BgBrightCyan\n[build/coverage]   | --- PASS: Test_BgBrightCyan (0.00s)\n[build/coverage]   | === RUN   Test_BgBrightWhite\n[build/coverage]   | --- PASS: Test_BgBrightWhite (0.00s)\n[build/coverage]   | === RUN   Test_BgIndex\n[build/coverage]   | --- PASS: Test_BgIndex (0.00s)\n[build/coverage]   | === RUN   Test_BgGray\n[build/coverage]   | --- PASS: Test_BgGray (0.00s)\n[build/coverage]   | === RUN   Test_Colorize\n[build/coverage]   | --- PASS: Test_Colorize (0.00s)\n[build/coverage]   | === RUN   Test_bigGray\n[build/coverage]   | --- PASS: Test_bigGray (0.00s)\n[build/coverage]   | === RUN   Test_Hyperlink\n[build/coverage]   | --- PASS: Test_Hyperlink (0.00s)\n[build/coverage]   | === RUN   Test_HyperlinkTarget\n[build/coverage]   | --- PASS: Test_HyperlinkTarget (0.00s)\n[build/coverage]   | === RUN   Test_HyperlinkParams\n[build/coverage]   | --- PASS: Test_HyperlinkParams (0.00s)\n[build/coverage]   | === RUN   ExampleRed\n[build/coverage]   | --- PASS: ExampleRed (0.00s)\n[build/coverage]   | === RUN   ExampleBold\n[build/coverage]   | --- PASS: ExampleBold (0.00s)\n[build/coverage]   | === RUN   ExampleNew_no_colors\n[build/coverage]   | --- PASS: ExampleNew_no_colors (0.00s)\n[build/coverage]   | === RUN   ExampleNew_colors\n[build/coverage]   | --- PASS: ExampleNew_colors (0.00s)\n[build/coverage]   | === RUN   Example_printf\n[build/coverage]   | --- PASS: Example_printf (0.00s)\n[build/coverage]   | === RUN   ExampleSprintf\n[build/coverage]   | --- PASS: ExampleSprintf (0.00s)\n[build/coverage]   | === RUN   ExampleHyperlink\n[build/coverage]   | --- PASS: ExampleHyperlink (0.00s)\n[build/coverage]   | PASS\n[build/coverage]   | coverage: 100.0% of statements\n[build/coverage]   | ok  \tgithub.com/logrusorgru/aurora/v4\t0.283s\n[build/coverage]   \u2705  Success - Main Calc coverage\n[build/coverage] \u2b50 Run Main Convert coverage.out to coverage.lcov\n[build/coverage]   \ud83d\udc33  docker cp src=/home/andre-silva/.cache/act/jandelgado-gcov2lcov-action@v1/ dst=/var/run/act/actions/jandelgado-gcov2lcov-action@v1/\n[build/coverage]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /var/run/act/actions/jandelgado-gcov2lcov-action@v1/] user=0 workdir=\n[build/coverage] \u2b50 Run Main set -x && curl -sLf \"$([ latest == latest ] && echo $LATEST_RELEASE || echo $RELEASE)/${NAME}.tar.gz\" | tar zxf - --strip 1\n[build/coverage]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/3-composite-0.sh] user= workdir=/tmp\n[build/coverage]   | ++ '[' latest == latest ']'\n[build/coverage]   | ++ echo https://github.com/jandelgado/gcov2lcov/releases/latest/download\n[build/coverage]   | + tar zxf - --strip 1\n[build/coverage]   | + curl -sLf https://github.com/jandelgado/gcov2lcov/releases/latest/download/gcov2lcov-linux-amd64.tar.gz\n[build/coverage]   \u2705  Success - Main set -x && curl -sLf \"$([ latest == latest ] && echo $LATEST_RELEASE || echo $RELEASE)/${NAME}.tar.gz\" | tar zxf - --strip 1\n[build/coverage] \u2b50 Run Main set -x && GOROOT=$(go env GOROOT) /tmp/gcov2lcov-linux-amd64 -infile \"coverage.out\" -outfile \"coverage.lcov\"\n[build/coverage]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/3-composite-1.sh] user= workdir=\n[build/coverage]   | ++ go env GOROOT\n[build/coverage]   | + GOROOT=/opt/hostedtoolcache/go/1.19.9/x64\n[build/coverage]   | + /tmp/gcov2lcov-linux-amd64 -infile coverage.out -outfile coverage.lcov\n[build/coverage]   \u2705  Success - Main set -x && GOROOT=$(go env GOROOT) /tmp/gcov2lcov-linux-amd64 -infile \"coverage.out\" -outfile \"coverage.lcov\"\n[build/coverage]   \u2705  Success - Main Convert coverage.out to coverage.lcov\n[build/coverage] \u2b50 Run Main Coveralls\n[build/coverage]   \ud83d\udc33  docker cp src=/home/andre-silva/.cache/act/coverallsapp-github-action@v1.1.2/ dst=/var/run/act/actions/coverallsapp-github-action@v1.1.2/\n[build/coverage]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /var/run/act/actions/coverallsapp-github-action@v1.1.2/] user=0 workdir=\n[build/coverage]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/coverallsapp-github-action@v1.1.2/lib/main.js] user= workdir=\n[build/coverage]   \u2757  ::error::'github-token' input missing, please include it in your workflow settings 'with' section as 'github-token: ${{ secrets.github_token }}'\n[build/coverage]   \u274c  Failure - Main Coveralls\n[build/coverage] exitcode '1': failure\n[build/coverage] \u2b50 Run Post Convert coverage.out to coverage.lcov\n[build/coverage]   \ud83d\udc33  docker cp src=/home/andre-silva/.cache/act/jandelgado-gcov2lcov-action@v1/ dst=/var/run/act/actions/jandelgado-gcov2lcov-action@v1/\n[build/coverage]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /var/run/act/actions/jandelgado-gcov2lcov-action@v1/] user=0 workdir=\n[build/coverage] context canceled\n[build/coverage] context canceled\n[build/coverage]   \u2705  Success - Post Convert coverage.out to coverage.lcov\n[build/coverage] \ud83c\udfc1  Job failed\n",
    "actions_stderr": "Error: context canceled\n"
}