{
    "repository": "sciunto-org/python-bibtexparser",
    "stars": 367,
    "language": "python",
    "size": 785,
    "clone_url": "https://github.com/sciunto-org/python-bibtexparser.git",
    "timestamp": "2023-06-16T10:38:17.206517Z",
    "clone_success": true,
    "number of actions": 0,
    "number_of_test_actions": 1,
    "actions_successful": true,
    "number_of_actions": 2,
    "actions_build_tools": [
        "unknown",
        "pytest"
    ],
    "actions_test_build_tools": [
        "pytest"
    ],
    "actions_tests": [
        {
            "classname": "tests.test_model",
            "name": "test_entry_equality",
            "time": 0.027,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.test_model",
            "name": "test_entry_copy",
            "time": 0.011,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.test_model",
            "name": "test_entry_deepcopy",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.test_model",
            "name": "test_string_equality",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.test_model",
            "name": "test_string_copy",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.test_model",
            "name": "test_string_deepcopy",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.test_model",
            "name": "test_preamble_equality",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.test_model",
            "name": "test_preamble_copy",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.test_model",
            "name": "test_preable_deepcopy",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.test_model",
            "name": "test_implicit_comment_equality",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.test_model",
            "name": "test_implicit_comment_copy",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.test_model",
            "name": "test_implicit_comment_deepcopy",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.test_model",
            "name": "test_explicit_comment_equality",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.test_model",
            "name": "test_explicit_comment_copy",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.test_model",
            "name": "test_explicit_comment_deepcopy",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.test_model",
            "name": "test_implicit_and_explicit_comment_equality",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.test_model",
            "name": "test_string_str",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.test_model",
            "name": "test_preable_str",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.test_model",
            "name": "test_implicit_comment_str",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.test_model",
            "name": "test_explicit_comment_str",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.test_model",
            "name": "test_field_str",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.test_model",
            "name": "test_entry_str",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.test_writer",
            "name": "test_single_simple_blocks[block0-@string{myKey = \"myValue\"}\\n]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.test_writer",
            "name": "test_single_simple_blocks[block1-@preamble{\"myValue\"}\\n]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.test_writer",
            "name": "test_single_simple_blocks[block2-@comment{myValue}\\n]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.test_writer",
            "name": "test_single_simple_blocks[block3-#myValue\\n]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.test_writer",
            "name": "test_write_entry_with_indent[None]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.test_writer",
            "name": "test_write_entry_with_indent[]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.test_writer",
            "name": "test_write_entry_with_indent[ ]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.test_writer",
            "name": "test_write_entry_with_indent[\\t]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.test_writer",
            "name": "test_write_entry_with_trailing_comma[None]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.test_writer",
            "name": "test_write_entry_with_trailing_comma[True]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.test_writer",
            "name": "test_write_entry_with_trailing_comma[False]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.test_writer",
            "name": "test_entry_value_column[None]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.test_writer",
            "name": "test_entry_value_column[10]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.test_writer",
            "name": "test_entry_value_column[auto]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.test_writer",
            "name": "test_block_separator[None]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.test_writer",
            "name": "test_block_separator[\\n\\n]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.test_writer",
            "name": "test_block_separator[\\n-----\\n]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.test_writer",
            "name": "test_write_failed_block",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_removal_of_enclosing_on_string[inplace-John Doe-double_quotes]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_removal_of_enclosing_on_string[inplace-John Doe-curly_braces]",
            "time": 0.007,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_removal_of_enclosing_on_string[inplace-John Doe-no_enclosing]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_removal_of_enclosing_on_string[inplace-\\xe0 {\\\\`a} \\\\`{a}-double_quotes]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_removal_of_enclosing_on_string[inplace-\\xe0 {\\\\`a} \\\\`{a}-curly_braces]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_removal_of_enclosing_on_string[inplace-\\xe0 {\\\\`a} \\\\`{a}-no_enclosing]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_removal_of_enclosing_on_string[inplace-{\\\\`a} {\\\\`a} {\\\\`a}-double_quotes]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_removal_of_enclosing_on_string[inplace-{\\\\`a} {\\\\`a} {\\\\`a}-curly_braces]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_removal_of_enclosing_on_string[inplace-{\\\\`a} {\\\\`a} {\\\\`a}-no_enclosing]",
            "time": 0.001,
            "results": [
                {
                    "result": "Skipped",
                    "message": "No enclosing to remove",
                    "type": "pytest.skip"
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_removal_of_enclosing_on_string[inplace-Two Gedenk\\\\\"uberlieferung der Angelsachsen-double_quotes]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_removal_of_enclosing_on_string[inplace-Two Gedenk\\\\\"uberlieferung der Angelsachsen-curly_braces]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_removal_of_enclosing_on_string[inplace-Two Gedenk\\\\\"uberlieferung der Angelsachsen-no_enclosing]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_removal_of_enclosing_on_string[inplace-\\\\texttimes{}{\\\\texttimes}\\\\texttimes-double_quotes]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_removal_of_enclosing_on_string[inplace-\\\\texttimes{}{\\\\texttimes}\\\\texttimes-curly_braces]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_removal_of_enclosing_on_string[inplace-\\\\texttimes{}{\\\\texttimes}\\\\texttimes-no_enclosing]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_removal_of_enclosing_on_string[inplace-p\\\\^{a}t\\\\'{e}Title with \\\\{ a curly brace-double_quotes]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_removal_of_enclosing_on_string[inplace-p\\\\^{a}t\\\\'{e}Title with \\\\{ a curly brace-curly_braces]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_removal_of_enclosing_on_string[inplace-p\\\\^{a}t\\\\'{e}Title with \\\\{ a curly brace-no_enclosing]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_removal_of_enclosing_on_string[inplace-Title with \\\\} a curly brace-double_quotes]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_removal_of_enclosing_on_string[inplace-Title with \\\\} a curly brace-curly_braces]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_removal_of_enclosing_on_string[inplace-Title with \\\\} a curly brace-no_enclosing]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_removal_of_enclosing_on_string[inplace-Title with \\\\{ a curly brace and \\\\} a curly brace-double_quotes]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_removal_of_enclosing_on_string[inplace-Title with \\\\{ a curly brace and \\\\} a curly brace-curly_braces]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_removal_of_enclosing_on_string[inplace-Title with \\\\{ a curly brace and \\\\} a curly brace-no_enclosing]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_removal_of_enclosing_on_string[inplace-Title with \\\\{ a curly brace and \\\\} a curly brace and \\\\{ another curly brace-double_quotes]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_removal_of_enclosing_on_string[inplace-Title with \\\\{ a curly brace and \\\\} a curly brace and \\\\{ another curly brace-curly_braces]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_removal_of_enclosing_on_string[inplace-Title with \\\\{ a curly brace and \\\\} a curly brace and \\\\{ another curly brace-no_enclosing]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_removal_of_enclosing_on_string[inplace-Title with { UnEscaped Curly } Braces-double_quotes]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_removal_of_enclosing_on_string[inplace-Title with { UnEscaped Curly } Braces-curly_braces]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_removal_of_enclosing_on_string[inplace-Title with { UnEscaped Curly } Braces-no_enclosing]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_removal_of_enclosing_on_string[not_inplace-John Doe-double_quotes]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_removal_of_enclosing_on_string[not_inplace-John Doe-curly_braces]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_removal_of_enclosing_on_string[not_inplace-John Doe-no_enclosing]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_removal_of_enclosing_on_string[not_inplace-\\xe0 {\\\\`a} \\\\`{a}-double_quotes]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_removal_of_enclosing_on_string[not_inplace-\\xe0 {\\\\`a} \\\\`{a}-curly_braces]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_removal_of_enclosing_on_string[not_inplace-\\xe0 {\\\\`a} \\\\`{a}-no_enclosing]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_removal_of_enclosing_on_string[not_inplace-{\\\\`a} {\\\\`a} {\\\\`a}-double_quotes]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_removal_of_enclosing_on_string[not_inplace-{\\\\`a} {\\\\`a} {\\\\`a}-curly_braces]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_removal_of_enclosing_on_string[not_inplace-{\\\\`a} {\\\\`a} {\\\\`a}-no_enclosing]",
            "time": 0.001,
            "results": [
                {
                    "result": "Skipped",
                    "message": "No enclosing to remove",
                    "type": "pytest.skip"
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_removal_of_enclosing_on_string[not_inplace-Two Gedenk\\\\\"uberlieferung der Angelsachsen-double_quotes]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_removal_of_enclosing_on_string[not_inplace-Two Gedenk\\\\\"uberlieferung der Angelsachsen-curly_braces]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_removal_of_enclosing_on_string[not_inplace-Two Gedenk\\\\\"uberlieferung der Angelsachsen-no_enclosing]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_removal_of_enclosing_on_string[not_inplace-\\\\texttimes{}{\\\\texttimes}\\\\texttimes-double_quotes]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_removal_of_enclosing_on_string[not_inplace-\\\\texttimes{}{\\\\texttimes}\\\\texttimes-curly_braces]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_removal_of_enclosing_on_string[not_inplace-\\\\texttimes{}{\\\\texttimes}\\\\texttimes-no_enclosing]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_removal_of_enclosing_on_string[not_inplace-p\\\\^{a}t\\\\'{e}Title with \\\\{ a curly brace-double_quotes]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_removal_of_enclosing_on_string[not_inplace-p\\\\^{a}t\\\\'{e}Title with \\\\{ a curly brace-curly_braces]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_removal_of_enclosing_on_string[not_inplace-p\\\\^{a}t\\\\'{e}Title with \\\\{ a curly brace-no_enclosing]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_removal_of_enclosing_on_string[not_inplace-Title with \\\\} a curly brace-double_quotes]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_removal_of_enclosing_on_string[not_inplace-Title with \\\\} a curly brace-curly_braces]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_removal_of_enclosing_on_string[not_inplace-Title with \\\\} a curly brace-no_enclosing]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_removal_of_enclosing_on_string[not_inplace-Title with \\\\{ a curly brace and \\\\} a curly brace-double_quotes]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_removal_of_enclosing_on_string[not_inplace-Title with \\\\{ a curly brace and \\\\} a curly brace-curly_braces]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_removal_of_enclosing_on_string[not_inplace-Title with \\\\{ a curly brace and \\\\} a curly brace-no_enclosing]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_removal_of_enclosing_on_string[not_inplace-Title with \\\\{ a curly brace and \\\\} a curly brace and \\\\{ another curly brace-double_quotes]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_removal_of_enclosing_on_string[not_inplace-Title with \\\\{ a curly brace and \\\\} a curly brace and \\\\{ another curly brace-curly_braces]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_removal_of_enclosing_on_string[not_inplace-Title with \\\\{ a curly brace and \\\\} a curly brace and \\\\{ another curly brace-no_enclosing]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_removal_of_enclosing_on_string[not_inplace-Title with { UnEscaped Curly } Braces-double_quotes]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_removal_of_enclosing_on_string[not_inplace-Title with { UnEscaped Curly } Braces-curly_braces]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_removal_of_enclosing_on_string[not_inplace-Title with { UnEscaped Curly } Braces-no_enclosing]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_removal_of_enclosing_on_entry[inplace-double_quotes]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_removal_of_enclosing_on_entry[inplace-curly_braces]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_removal_of_enclosing_on_entry[not_inplace-double_quotes]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_removal_of_enclosing_on_entry[not_inplace-curly_braces]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_no_removal_blocktypes[inplace-preamble]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_no_removal_blocktypes[inplace-implicit_comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_no_removal_blocktypes[inplace-explicit_comment]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_no_removal_blocktypes[not_inplace-preamble]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_no_removal_blocktypes[not_inplace-implicit_comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_no_removal_blocktypes[not_inplace-explicit_comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-John Doe-reuse-enclose_ints-{-{]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-John Doe-reuse-enclose_ints-{-\"]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-John Doe-reuse-enclose_ints-{-no-enclosing]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-John Doe-reuse-enclose_ints-{-None]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-John Doe-reuse-enclose_ints-\"-{]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-John Doe-reuse-enclose_ints-\"-\"]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-John Doe-reuse-enclose_ints-\"-no-enclosing]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-John Doe-reuse-enclose_ints-\"-None]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-John Doe-reuse-no_enclose_ints-{-{]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-John Doe-reuse-no_enclose_ints-{-\"]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-John Doe-reuse-no_enclose_ints-{-no-enclosing]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-John Doe-reuse-no_enclose_ints-{-None]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-John Doe-reuse-no_enclose_ints-\"-{]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-John Doe-reuse-no_enclose_ints-\"-\"]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-John Doe-reuse-no_enclose_ints-\"-no-enclosing]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-John Doe-reuse-no_enclose_ints-\"-None]",
            "time": 0.034,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-John Doe-no_reuse-enclose_ints-{-{]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-John Doe-no_reuse-enclose_ints-{-\"]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-John Doe-no_reuse-enclose_ints-{-no-enclosing]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-John Doe-no_reuse-enclose_ints-{-None]",
            "time": 0.004,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-John Doe-no_reuse-enclose_ints-\"-{]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-John Doe-no_reuse-enclose_ints-\"-\"]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-John Doe-no_reuse-enclose_ints-\"-no-enclosing]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-John Doe-no_reuse-enclose_ints-\"-None]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-John Doe-no_reuse-no_enclose_ints-{-{]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-John Doe-no_reuse-no_enclose_ints-{-\"]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-John Doe-no_reuse-no_enclose_ints-{-no-enclosing]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-John Doe-no_reuse-no_enclose_ints-{-None]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-John Doe-no_reuse-no_enclose_ints-\"-{]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-John Doe-no_reuse-no_enclose_ints-\"-\"]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-John Doe-no_reuse-no_enclose_ints-\"-no-enclosing]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-John Doe-no_reuse-no_enclose_ints-\"-None]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-\\xe0 {\\\\`a} \\\\`{a}-reuse-enclose_ints-{-{]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-\\xe0 {\\\\`a} \\\\`{a}-reuse-enclose_ints-{-\"]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-\\xe0 {\\\\`a} \\\\`{a}-reuse-enclose_ints-{-no-enclosing]",
            "time": 0.004,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-\\xe0 {\\\\`a} \\\\`{a}-reuse-enclose_ints-{-None]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-\\xe0 {\\\\`a} \\\\`{a}-reuse-enclose_ints-\"-{]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-\\xe0 {\\\\`a} \\\\`{a}-reuse-enclose_ints-\"-\"]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-\\xe0 {\\\\`a} \\\\`{a}-reuse-enclose_ints-\"-no-enclosing]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-\\xe0 {\\\\`a} \\\\`{a}-reuse-enclose_ints-\"-None]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-\\xe0 {\\\\`a} \\\\`{a}-reuse-no_enclose_ints-{-{]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-\\xe0 {\\\\`a} \\\\`{a}-reuse-no_enclose_ints-{-\"]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-\\xe0 {\\\\`a} \\\\`{a}-reuse-no_enclose_ints-{-no-enclosing]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-\\xe0 {\\\\`a} \\\\`{a}-reuse-no_enclose_ints-{-None]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-\\xe0 {\\\\`a} \\\\`{a}-reuse-no_enclose_ints-\"-{]",
            "time": 0.041,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-\\xe0 {\\\\`a} \\\\`{a}-reuse-no_enclose_ints-\"-\"]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-\\xe0 {\\\\`a} \\\\`{a}-reuse-no_enclose_ints-\"-no-enclosing]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-\\xe0 {\\\\`a} \\\\`{a}-reuse-no_enclose_ints-\"-None]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-\\xe0 {\\\\`a} \\\\`{a}-no_reuse-enclose_ints-{-{]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-\\xe0 {\\\\`a} \\\\`{a}-no_reuse-enclose_ints-{-\"]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-\\xe0 {\\\\`a} \\\\`{a}-no_reuse-enclose_ints-{-no-enclosing]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-\\xe0 {\\\\`a} \\\\`{a}-no_reuse-enclose_ints-{-None]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-\\xe0 {\\\\`a} \\\\`{a}-no_reuse-enclose_ints-\"-{]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-\\xe0 {\\\\`a} \\\\`{a}-no_reuse-enclose_ints-\"-\"]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-\\xe0 {\\\\`a} \\\\`{a}-no_reuse-enclose_ints-\"-no-enclosing]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-\\xe0 {\\\\`a} \\\\`{a}-no_reuse-enclose_ints-\"-None]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-\\xe0 {\\\\`a} \\\\`{a}-no_reuse-no_enclose_ints-{-{]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-\\xe0 {\\\\`a} \\\\`{a}-no_reuse-no_enclose_ints-{-\"]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-\\xe0 {\\\\`a} \\\\`{a}-no_reuse-no_enclose_ints-{-no-enclosing]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-\\xe0 {\\\\`a} \\\\`{a}-no_reuse-no_enclose_ints-{-None]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-\\xe0 {\\\\`a} \\\\`{a}-no_reuse-no_enclose_ints-\"-{]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-\\xe0 {\\\\`a} \\\\`{a}-no_reuse-no_enclose_ints-\"-\"]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-\\xe0 {\\\\`a} \\\\`{a}-no_reuse-no_enclose_ints-\"-no-enclosing]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-\\xe0 {\\\\`a} \\\\`{a}-no_reuse-no_enclose_ints-\"-None]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-{\\\\`a} {\\\\`a} {\\\\`a}-reuse-enclose_ints-{-{]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-{\\\\`a} {\\\\`a} {\\\\`a}-reuse-enclose_ints-{-\"]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-{\\\\`a} {\\\\`a} {\\\\`a}-reuse-enclose_ints-{-no-enclosing]",
            "time": 0.002,
            "results": [
                {
                    "result": "Skipped",
                    "message": "No enclosing to remove",
                    "type": "pytest.skip"
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-{\\\\`a} {\\\\`a} {\\\\`a}-reuse-enclose_ints-{-None]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-{\\\\`a} {\\\\`a} {\\\\`a}-reuse-enclose_ints-\"-{]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-{\\\\`a} {\\\\`a} {\\\\`a}-reuse-enclose_ints-\"-\"]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-{\\\\`a} {\\\\`a} {\\\\`a}-reuse-enclose_ints-\"-no-enclosing]",
            "time": 0.002,
            "results": [
                {
                    "result": "Skipped",
                    "message": "No enclosing to remove",
                    "type": "pytest.skip"
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-{\\\\`a} {\\\\`a} {\\\\`a}-reuse-enclose_ints-\"-None]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-{\\\\`a} {\\\\`a} {\\\\`a}-reuse-no_enclose_ints-{-{]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-{\\\\`a} {\\\\`a} {\\\\`a}-reuse-no_enclose_ints-{-\"]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-{\\\\`a} {\\\\`a} {\\\\`a}-reuse-no_enclose_ints-{-no-enclosing]",
            "time": 0.005,
            "results": [
                {
                    "result": "Skipped",
                    "message": "No enclosing to remove",
                    "type": "pytest.skip"
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-{\\\\`a} {\\\\`a} {\\\\`a}-reuse-no_enclose_ints-{-None]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-{\\\\`a} {\\\\`a} {\\\\`a}-reuse-no_enclose_ints-\"-{]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-{\\\\`a} {\\\\`a} {\\\\`a}-reuse-no_enclose_ints-\"-\"]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-{\\\\`a} {\\\\`a} {\\\\`a}-reuse-no_enclose_ints-\"-no-enclosing]",
            "time": 0.002,
            "results": [
                {
                    "result": "Skipped",
                    "message": "No enclosing to remove",
                    "type": "pytest.skip"
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-{\\\\`a} {\\\\`a} {\\\\`a}-reuse-no_enclose_ints-\"-None]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-{\\\\`a} {\\\\`a} {\\\\`a}-no_reuse-enclose_ints-{-{]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-{\\\\`a} {\\\\`a} {\\\\`a}-no_reuse-enclose_ints-{-\"]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-{\\\\`a} {\\\\`a} {\\\\`a}-no_reuse-enclose_ints-{-no-enclosing]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-{\\\\`a} {\\\\`a} {\\\\`a}-no_reuse-enclose_ints-{-None]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-{\\\\`a} {\\\\`a} {\\\\`a}-no_reuse-enclose_ints-\"-{]",
            "time": 0.005,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-{\\\\`a} {\\\\`a} {\\\\`a}-no_reuse-enclose_ints-\"-\"]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-{\\\\`a} {\\\\`a} {\\\\`a}-no_reuse-enclose_ints-\"-no-enclosing]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-{\\\\`a} {\\\\`a} {\\\\`a}-no_reuse-enclose_ints-\"-None]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-{\\\\`a} {\\\\`a} {\\\\`a}-no_reuse-no_enclose_ints-{-{]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-{\\\\`a} {\\\\`a} {\\\\`a}-no_reuse-no_enclose_ints-{-\"]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-{\\\\`a} {\\\\`a} {\\\\`a}-no_reuse-no_enclose_ints-{-no-enclosing]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-{\\\\`a} {\\\\`a} {\\\\`a}-no_reuse-no_enclose_ints-{-None]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-{\\\\`a} {\\\\`a} {\\\\`a}-no_reuse-no_enclose_ints-\"-{]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-{\\\\`a} {\\\\`a} {\\\\`a}-no_reuse-no_enclose_ints-\"-\"]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-{\\\\`a} {\\\\`a} {\\\\`a}-no_reuse-no_enclose_ints-\"-no-enclosing]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-{\\\\`a} {\\\\`a} {\\\\`a}-no_reuse-no_enclose_ints-\"-None]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-Two Gedenk\\\\\"uberlieferung der Angelsachsen-reuse-enclose_ints-{-{]",
            "time": 0.004,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-Two Gedenk\\\\\"uberlieferung der Angelsachsen-reuse-enclose_ints-{-\"]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-Two Gedenk\\\\\"uberlieferung der Angelsachsen-reuse-enclose_ints-{-no-enclosing]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-Two Gedenk\\\\\"uberlieferung der Angelsachsen-reuse-enclose_ints-{-None]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-Two Gedenk\\\\\"uberlieferung der Angelsachsen-reuse-enclose_ints-\"-{]",
            "time": 0.003,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-Two Gedenk\\\\\"uberlieferung der Angelsachsen-reuse-enclose_ints-\"-\"]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-Two Gedenk\\\\\"uberlieferung der Angelsachsen-reuse-enclose_ints-\"-no-enclosing]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-Two Gedenk\\\\\"uberlieferung der Angelsachsen-reuse-enclose_ints-\"-None]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-Two Gedenk\\\\\"uberlieferung der Angelsachsen-reuse-no_enclose_ints-{-{]",
            "time": 0.004,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-Two Gedenk\\\\\"uberlieferung der Angelsachsen-reuse-no_enclose_ints-{-\"]",
            "time": 0.003,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-Two Gedenk\\\\\"uberlieferung der Angelsachsen-reuse-no_enclose_ints-{-no-enclosing]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-Two Gedenk\\\\\"uberlieferung der Angelsachsen-reuse-no_enclose_ints-{-None]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-Two Gedenk\\\\\"uberlieferung der Angelsachsen-reuse-no_enclose_ints-\"-{]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-Two Gedenk\\\\\"uberlieferung der Angelsachsen-reuse-no_enclose_ints-\"-\"]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-Two Gedenk\\\\\"uberlieferung der Angelsachsen-reuse-no_enclose_ints-\"-no-enclosing]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-Two Gedenk\\\\\"uberlieferung der Angelsachsen-reuse-no_enclose_ints-\"-None]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-Two Gedenk\\\\\"uberlieferung der Angelsachsen-no_reuse-enclose_ints-{-{]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-Two Gedenk\\\\\"uberlieferung der Angelsachsen-no_reuse-enclose_ints-{-\"]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-Two Gedenk\\\\\"uberlieferung der Angelsachsen-no_reuse-enclose_ints-{-no-enclosing]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-Two Gedenk\\\\\"uberlieferung der Angelsachsen-no_reuse-enclose_ints-{-None]",
            "time": 0.005,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-Two Gedenk\\\\\"uberlieferung der Angelsachsen-no_reuse-enclose_ints-\"-{]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-Two Gedenk\\\\\"uberlieferung der Angelsachsen-no_reuse-enclose_ints-\"-\"]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-Two Gedenk\\\\\"uberlieferung der Angelsachsen-no_reuse-enclose_ints-\"-no-enclosing]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-Two Gedenk\\\\\"uberlieferung der Angelsachsen-no_reuse-enclose_ints-\"-None]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-Two Gedenk\\\\\"uberlieferung der Angelsachsen-no_reuse-no_enclose_ints-{-{]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-Two Gedenk\\\\\"uberlieferung der Angelsachsen-no_reuse-no_enclose_ints-{-\"]",
            "time": 0.006,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-Two Gedenk\\\\\"uberlieferung der Angelsachsen-no_reuse-no_enclose_ints-{-no-enclosing]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-Two Gedenk\\\\\"uberlieferung der Angelsachsen-no_reuse-no_enclose_ints-{-None]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-Two Gedenk\\\\\"uberlieferung der Angelsachsen-no_reuse-no_enclose_ints-\"-{]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-Two Gedenk\\\\\"uberlieferung der Angelsachsen-no_reuse-no_enclose_ints-\"-\"]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-Two Gedenk\\\\\"uberlieferung der Angelsachsen-no_reuse-no_enclose_ints-\"-no-enclosing]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-Two Gedenk\\\\\"uberlieferung der Angelsachsen-no_reuse-no_enclose_ints-\"-None]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-\\\\texttimes{}{\\\\texttimes}\\\\texttimes-reuse-enclose_ints-{-{]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-\\\\texttimes{}{\\\\texttimes}\\\\texttimes-reuse-enclose_ints-{-\"]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-\\\\texttimes{}{\\\\texttimes}\\\\texttimes-reuse-enclose_ints-{-no-enclosing]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-\\\\texttimes{}{\\\\texttimes}\\\\texttimes-reuse-enclose_ints-{-None]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-\\\\texttimes{}{\\\\texttimes}\\\\texttimes-reuse-enclose_ints-\"-{]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-\\\\texttimes{}{\\\\texttimes}\\\\texttimes-reuse-enclose_ints-\"-\"]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-\\\\texttimes{}{\\\\texttimes}\\\\texttimes-reuse-enclose_ints-\"-no-enclosing]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-\\\\texttimes{}{\\\\texttimes}\\\\texttimes-reuse-enclose_ints-\"-None]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-\\\\texttimes{}{\\\\texttimes}\\\\texttimes-reuse-no_enclose_ints-{-{]",
            "time": 0.005,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-\\\\texttimes{}{\\\\texttimes}\\\\texttimes-reuse-no_enclose_ints-{-\"]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-\\\\texttimes{}{\\\\texttimes}\\\\texttimes-reuse-no_enclose_ints-{-no-enclosing]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-\\\\texttimes{}{\\\\texttimes}\\\\texttimes-reuse-no_enclose_ints-{-None]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-\\\\texttimes{}{\\\\texttimes}\\\\texttimes-reuse-no_enclose_ints-\"-{]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-\\\\texttimes{}{\\\\texttimes}\\\\texttimes-reuse-no_enclose_ints-\"-\"]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-\\\\texttimes{}{\\\\texttimes}\\\\texttimes-reuse-no_enclose_ints-\"-no-enclosing]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-\\\\texttimes{}{\\\\texttimes}\\\\texttimes-reuse-no_enclose_ints-\"-None]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-\\\\texttimes{}{\\\\texttimes}\\\\texttimes-no_reuse-enclose_ints-{-{]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-\\\\texttimes{}{\\\\texttimes}\\\\texttimes-no_reuse-enclose_ints-{-\"]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-\\\\texttimes{}{\\\\texttimes}\\\\texttimes-no_reuse-enclose_ints-{-no-enclosing]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-\\\\texttimes{}{\\\\texttimes}\\\\texttimes-no_reuse-enclose_ints-{-None]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-\\\\texttimes{}{\\\\texttimes}\\\\texttimes-no_reuse-enclose_ints-\"-{]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-\\\\texttimes{}{\\\\texttimes}\\\\texttimes-no_reuse-enclose_ints-\"-\"]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-\\\\texttimes{}{\\\\texttimes}\\\\texttimes-no_reuse-enclose_ints-\"-no-enclosing]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-\\\\texttimes{}{\\\\texttimes}\\\\texttimes-no_reuse-enclose_ints-\"-None]",
            "time": 0.003,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-\\\\texttimes{}{\\\\texttimes}\\\\texttimes-no_reuse-no_enclose_ints-{-{]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-\\\\texttimes{}{\\\\texttimes}\\\\texttimes-no_reuse-no_enclose_ints-{-\"]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-\\\\texttimes{}{\\\\texttimes}\\\\texttimes-no_reuse-no_enclose_ints-{-no-enclosing]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-\\\\texttimes{}{\\\\texttimes}\\\\texttimes-no_reuse-no_enclose_ints-{-None]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-\\\\texttimes{}{\\\\texttimes}\\\\texttimes-no_reuse-no_enclose_ints-\"-{]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-\\\\texttimes{}{\\\\texttimes}\\\\texttimes-no_reuse-no_enclose_ints-\"-\"]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-\\\\texttimes{}{\\\\texttimes}\\\\texttimes-no_reuse-no_enclose_ints-\"-no-enclosing]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-\\\\texttimes{}{\\\\texttimes}\\\\texttimes-no_reuse-no_enclose_ints-\"-None]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-p\\\\^{a}t\\\\'{e}Title with \\\\{ a curly brace-reuse-enclose_ints-{-{]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-p\\\\^{a}t\\\\'{e}Title with \\\\{ a curly brace-reuse-enclose_ints-{-\"]",
            "time": 0.005,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-p\\\\^{a}t\\\\'{e}Title with \\\\{ a curly brace-reuse-enclose_ints-{-no-enclosing]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-p\\\\^{a}t\\\\'{e}Title with \\\\{ a curly brace-reuse-enclose_ints-{-None]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-p\\\\^{a}t\\\\'{e}Title with \\\\{ a curly brace-reuse-enclose_ints-\"-{]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-p\\\\^{a}t\\\\'{e}Title with \\\\{ a curly brace-reuse-enclose_ints-\"-\"]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-p\\\\^{a}t\\\\'{e}Title with \\\\{ a curly brace-reuse-enclose_ints-\"-no-enclosing]",
            "time": 0.004,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-p\\\\^{a}t\\\\'{e}Title with \\\\{ a curly brace-reuse-enclose_ints-\"-None]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-p\\\\^{a}t\\\\'{e}Title with \\\\{ a curly brace-reuse-no_enclose_ints-{-{]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-p\\\\^{a}t\\\\'{e}Title with \\\\{ a curly brace-reuse-no_enclose_ints-{-\"]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-p\\\\^{a}t\\\\'{e}Title with \\\\{ a curly brace-reuse-no_enclose_ints-{-no-enclosing]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-p\\\\^{a}t\\\\'{e}Title with \\\\{ a curly brace-reuse-no_enclose_ints-{-None]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-p\\\\^{a}t\\\\'{e}Title with \\\\{ a curly brace-reuse-no_enclose_ints-\"-{]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-p\\\\^{a}t\\\\'{e}Title with \\\\{ a curly brace-reuse-no_enclose_ints-\"-\"]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-p\\\\^{a}t\\\\'{e}Title with \\\\{ a curly brace-reuse-no_enclose_ints-\"-no-enclosing]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-p\\\\^{a}t\\\\'{e}Title with \\\\{ a curly brace-reuse-no_enclose_ints-\"-None]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-p\\\\^{a}t\\\\'{e}Title with \\\\{ a curly brace-no_reuse-enclose_ints-{-{]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-p\\\\^{a}t\\\\'{e}Title with \\\\{ a curly brace-no_reuse-enclose_ints-{-\"]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-p\\\\^{a}t\\\\'{e}Title with \\\\{ a curly brace-no_reuse-enclose_ints-{-no-enclosing]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-p\\\\^{a}t\\\\'{e}Title with \\\\{ a curly brace-no_reuse-enclose_ints-{-None]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-p\\\\^{a}t\\\\'{e}Title with \\\\{ a curly brace-no_reuse-enclose_ints-\"-{]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-p\\\\^{a}t\\\\'{e}Title with \\\\{ a curly brace-no_reuse-enclose_ints-\"-\"]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-p\\\\^{a}t\\\\'{e}Title with \\\\{ a curly brace-no_reuse-enclose_ints-\"-no-enclosing]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-p\\\\^{a}t\\\\'{e}Title with \\\\{ a curly brace-no_reuse-enclose_ints-\"-None]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-p\\\\^{a}t\\\\'{e}Title with \\\\{ a curly brace-no_reuse-no_enclose_ints-{-{]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-p\\\\^{a}t\\\\'{e}Title with \\\\{ a curly brace-no_reuse-no_enclose_ints-{-\"]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-p\\\\^{a}t\\\\'{e}Title with \\\\{ a curly brace-no_reuse-no_enclose_ints-{-no-enclosing]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-p\\\\^{a}t\\\\'{e}Title with \\\\{ a curly brace-no_reuse-no_enclose_ints-{-None]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-p\\\\^{a}t\\\\'{e}Title with \\\\{ a curly brace-no_reuse-no_enclose_ints-\"-{]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-p\\\\^{a}t\\\\'{e}Title with \\\\{ a curly brace-no_reuse-no_enclose_ints-\"-\"]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-p\\\\^{a}t\\\\'{e}Title with \\\\{ a curly brace-no_reuse-no_enclose_ints-\"-no-enclosing]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-p\\\\^{a}t\\\\'{e}Title with \\\\{ a curly brace-no_reuse-no_enclose_ints-\"-None]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-Title with \\\\} a curly brace-reuse-enclose_ints-{-{]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-Title with \\\\} a curly brace-reuse-enclose_ints-{-\"]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-Title with \\\\} a curly brace-reuse-enclose_ints-{-no-enclosing]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-Title with \\\\} a curly brace-reuse-enclose_ints-{-None]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-Title with \\\\} a curly brace-reuse-enclose_ints-\"-{]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-Title with \\\\} a curly brace-reuse-enclose_ints-\"-\"]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-Title with \\\\} a curly brace-reuse-enclose_ints-\"-no-enclosing]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-Title with \\\\} a curly brace-reuse-enclose_ints-\"-None]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-Title with \\\\} a curly brace-reuse-no_enclose_ints-{-{]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-Title with \\\\} a curly brace-reuse-no_enclose_ints-{-\"]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-Title with \\\\} a curly brace-reuse-no_enclose_ints-{-no-enclosing]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-Title with \\\\} a curly brace-reuse-no_enclose_ints-{-None]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-Title with \\\\} a curly brace-reuse-no_enclose_ints-\"-{]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-Title with \\\\} a curly brace-reuse-no_enclose_ints-\"-\"]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-Title with \\\\} a curly brace-reuse-no_enclose_ints-\"-no-enclosing]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-Title with \\\\} a curly brace-reuse-no_enclose_ints-\"-None]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-Title with \\\\} a curly brace-no_reuse-enclose_ints-{-{]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-Title with \\\\} a curly brace-no_reuse-enclose_ints-{-\"]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-Title with \\\\} a curly brace-no_reuse-enclose_ints-{-no-enclosing]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-Title with \\\\} a curly brace-no_reuse-enclose_ints-{-None]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-Title with \\\\} a curly brace-no_reuse-enclose_ints-\"-{]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-Title with \\\\} a curly brace-no_reuse-enclose_ints-\"-\"]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-Title with \\\\} a curly brace-no_reuse-enclose_ints-\"-no-enclosing]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-Title with \\\\} a curly brace-no_reuse-enclose_ints-\"-None]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-Title with \\\\} a curly brace-no_reuse-no_enclose_ints-{-{]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-Title with \\\\} a curly brace-no_reuse-no_enclose_ints-{-\"]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-Title with \\\\} a curly brace-no_reuse-no_enclose_ints-{-no-enclosing]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-Title with \\\\} a curly brace-no_reuse-no_enclose_ints-{-None]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-Title with \\\\} a curly brace-no_reuse-no_enclose_ints-\"-{]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-Title with \\\\} a curly brace-no_reuse-no_enclose_ints-\"-\"]",
            "time": 0.003,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-Title with \\\\} a curly brace-no_reuse-no_enclose_ints-\"-no-enclosing]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-Title with \\\\} a curly brace-no_reuse-no_enclose_ints-\"-None]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-Title with \\\\{ a curly brace and \\\\} a curly brace-reuse-enclose_ints-{-{]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-Title with \\\\{ a curly brace and \\\\} a curly brace-reuse-enclose_ints-{-\"]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-Title with \\\\{ a curly brace and \\\\} a curly brace-reuse-enclose_ints-{-no-enclosing]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-Title with \\\\{ a curly brace and \\\\} a curly brace-reuse-enclose_ints-{-None]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-Title with \\\\{ a curly brace and \\\\} a curly brace-reuse-enclose_ints-\"-{]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-Title with \\\\{ a curly brace and \\\\} a curly brace-reuse-enclose_ints-\"-\"]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-Title with \\\\{ a curly brace and \\\\} a curly brace-reuse-enclose_ints-\"-no-enclosing]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-Title with \\\\{ a curly brace and \\\\} a curly brace-reuse-enclose_ints-\"-None]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-Title with \\\\{ a curly brace and \\\\} a curly brace-reuse-no_enclose_ints-{-{]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-Title with \\\\{ a curly brace and \\\\} a curly brace-reuse-no_enclose_ints-{-\"]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-Title with \\\\{ a curly brace and \\\\} a curly brace-reuse-no_enclose_ints-{-no-enclosing]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-Title with \\\\{ a curly brace and \\\\} a curly brace-reuse-no_enclose_ints-{-None]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-Title with \\\\{ a curly brace and \\\\} a curly brace-reuse-no_enclose_ints-\"-{]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-Title with \\\\{ a curly brace and \\\\} a curly brace-reuse-no_enclose_ints-\"-\"]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-Title with \\\\{ a curly brace and \\\\} a curly brace-reuse-no_enclose_ints-\"-no-enclosing]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-Title with \\\\{ a curly brace and \\\\} a curly brace-reuse-no_enclose_ints-\"-None]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-Title with \\\\{ a curly brace and \\\\} a curly brace-no_reuse-enclose_ints-{-{]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-Title with \\\\{ a curly brace and \\\\} a curly brace-no_reuse-enclose_ints-{-\"]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-Title with \\\\{ a curly brace and \\\\} a curly brace-no_reuse-enclose_ints-{-no-enclosing]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-Title with \\\\{ a curly brace and \\\\} a curly brace-no_reuse-enclose_ints-{-None]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-Title with \\\\{ a curly brace and \\\\} a curly brace-no_reuse-enclose_ints-\"-{]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-Title with \\\\{ a curly brace and \\\\} a curly brace-no_reuse-enclose_ints-\"-\"]",
            "time": 0.003,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-Title with \\\\{ a curly brace and \\\\} a curly brace-no_reuse-enclose_ints-\"-no-enclosing]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-Title with \\\\{ a curly brace and \\\\} a curly brace-no_reuse-enclose_ints-\"-None]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-Title with \\\\{ a curly brace and \\\\} a curly brace-no_reuse-no_enclose_ints-{-{]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-Title with \\\\{ a curly brace and \\\\} a curly brace-no_reuse-no_enclose_ints-{-\"]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-Title with \\\\{ a curly brace and \\\\} a curly brace-no_reuse-no_enclose_ints-{-no-enclosing]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-Title with \\\\{ a curly brace and \\\\} a curly brace-no_reuse-no_enclose_ints-{-None]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-Title with \\\\{ a curly brace and \\\\} a curly brace-no_reuse-no_enclose_ints-\"-{]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-Title with \\\\{ a curly brace and \\\\} a curly brace-no_reuse-no_enclose_ints-\"-\"]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-Title with \\\\{ a curly brace and \\\\} a curly brace-no_reuse-no_enclose_ints-\"-no-enclosing]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-Title with \\\\{ a curly brace and \\\\} a curly brace-no_reuse-no_enclose_ints-\"-None]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-Title with \\\\{ a curly brace and \\\\} a curly brace and \\\\{ another curly brace-reuse-enclose_ints-{-{]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-Title with \\\\{ a curly brace and \\\\} a curly brace and \\\\{ another curly brace-reuse-enclose_ints-{-\"]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-Title with \\\\{ a curly brace and \\\\} a curly brace and \\\\{ another curly brace-reuse-enclose_ints-{-no-enclosing]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-Title with \\\\{ a curly brace and \\\\} a curly brace and \\\\{ another curly brace-reuse-enclose_ints-{-None]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-Title with \\\\{ a curly brace and \\\\} a curly brace and \\\\{ another curly brace-reuse-enclose_ints-\"-{]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-Title with \\\\{ a curly brace and \\\\} a curly brace and \\\\{ another curly brace-reuse-enclose_ints-\"-\"]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-Title with \\\\{ a curly brace and \\\\} a curly brace and \\\\{ another curly brace-reuse-enclose_ints-\"-no-enclosing]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-Title with \\\\{ a curly brace and \\\\} a curly brace and \\\\{ another curly brace-reuse-enclose_ints-\"-None]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-Title with \\\\{ a curly brace and \\\\} a curly brace and \\\\{ another curly brace-reuse-no_enclose_ints-{-{]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-Title with \\\\{ a curly brace and \\\\} a curly brace and \\\\{ another curly brace-reuse-no_enclose_ints-{-\"]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-Title with \\\\{ a curly brace and \\\\} a curly brace and \\\\{ another curly brace-reuse-no_enclose_ints-{-no-enclosing]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-Title with \\\\{ a curly brace and \\\\} a curly brace and \\\\{ another curly brace-reuse-no_enclose_ints-{-None]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-Title with \\\\{ a curly brace and \\\\} a curly brace and \\\\{ another curly brace-reuse-no_enclose_ints-\"-{]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-Title with \\\\{ a curly brace and \\\\} a curly brace and \\\\{ another curly brace-reuse-no_enclose_ints-\"-\"]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-Title with \\\\{ a curly brace and \\\\} a curly brace and \\\\{ another curly brace-reuse-no_enclose_ints-\"-no-enclosing]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-Title with \\\\{ a curly brace and \\\\} a curly brace and \\\\{ another curly brace-reuse-no_enclose_ints-\"-None]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-Title with \\\\{ a curly brace and \\\\} a curly brace and \\\\{ another curly brace-no_reuse-enclose_ints-{-{]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-Title with \\\\{ a curly brace and \\\\} a curly brace and \\\\{ another curly brace-no_reuse-enclose_ints-{-\"]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-Title with \\\\{ a curly brace and \\\\} a curly brace and \\\\{ another curly brace-no_reuse-enclose_ints-{-no-enclosing]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-Title with \\\\{ a curly brace and \\\\} a curly brace and \\\\{ another curly brace-no_reuse-enclose_ints-{-None]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-Title with \\\\{ a curly brace and \\\\} a curly brace and \\\\{ another curly brace-no_reuse-enclose_ints-\"-{]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-Title with \\\\{ a curly brace and \\\\} a curly brace and \\\\{ another curly brace-no_reuse-enclose_ints-\"-\"]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-Title with \\\\{ a curly brace and \\\\} a curly brace and \\\\{ another curly brace-no_reuse-enclose_ints-\"-no-enclosing]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-Title with \\\\{ a curly brace and \\\\} a curly brace and \\\\{ another curly brace-no_reuse-enclose_ints-\"-None]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-Title with \\\\{ a curly brace and \\\\} a curly brace and \\\\{ another curly brace-no_reuse-no_enclose_ints-{-{]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-Title with \\\\{ a curly brace and \\\\} a curly brace and \\\\{ another curly brace-no_reuse-no_enclose_ints-{-\"]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-Title with \\\\{ a curly brace and \\\\} a curly brace and \\\\{ another curly brace-no_reuse-no_enclose_ints-{-no-enclosing]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-Title with \\\\{ a curly brace and \\\\} a curly brace and \\\\{ another curly brace-no_reuse-no_enclose_ints-{-None]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-Title with \\\\{ a curly brace and \\\\} a curly brace and \\\\{ another curly brace-no_reuse-no_enclose_ints-\"-{]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-Title with \\\\{ a curly brace and \\\\} a curly brace and \\\\{ another curly brace-no_reuse-no_enclose_ints-\"-\"]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-Title with \\\\{ a curly brace and \\\\} a curly brace and \\\\{ another curly brace-no_reuse-no_enclose_ints-\"-no-enclosing]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-Title with \\\\{ a curly brace and \\\\} a curly brace and \\\\{ another curly brace-no_reuse-no_enclose_ints-\"-None]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-Title with { UnEscaped Curly } Braces-reuse-enclose_ints-{-{]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-Title with { UnEscaped Curly } Braces-reuse-enclose_ints-{-\"]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-Title with { UnEscaped Curly } Braces-reuse-enclose_ints-{-no-enclosing]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-Title with { UnEscaped Curly } Braces-reuse-enclose_ints-{-None]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-Title with { UnEscaped Curly } Braces-reuse-enclose_ints-\"-{]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-Title with { UnEscaped Curly } Braces-reuse-enclose_ints-\"-\"]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-Title with { UnEscaped Curly } Braces-reuse-enclose_ints-\"-no-enclosing]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-Title with { UnEscaped Curly } Braces-reuse-enclose_ints-\"-None]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-Title with { UnEscaped Curly } Braces-reuse-no_enclose_ints-{-{]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-Title with { UnEscaped Curly } Braces-reuse-no_enclose_ints-{-\"]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-Title with { UnEscaped Curly } Braces-reuse-no_enclose_ints-{-no-enclosing]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-Title with { UnEscaped Curly } Braces-reuse-no_enclose_ints-{-None]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-Title with { UnEscaped Curly } Braces-reuse-no_enclose_ints-\"-{]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-Title with { UnEscaped Curly } Braces-reuse-no_enclose_ints-\"-\"]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-Title with { UnEscaped Curly } Braces-reuse-no_enclose_ints-\"-no-enclosing]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-Title with { UnEscaped Curly } Braces-reuse-no_enclose_ints-\"-None]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-Title with { UnEscaped Curly } Braces-no_reuse-enclose_ints-{-{]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-Title with { UnEscaped Curly } Braces-no_reuse-enclose_ints-{-\"]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-Title with { UnEscaped Curly } Braces-no_reuse-enclose_ints-{-no-enclosing]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-Title with { UnEscaped Curly } Braces-no_reuse-enclose_ints-{-None]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-Title with { UnEscaped Curly } Braces-no_reuse-enclose_ints-\"-{]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-Title with { UnEscaped Curly } Braces-no_reuse-enclose_ints-\"-\"]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-Title with { UnEscaped Curly } Braces-no_reuse-enclose_ints-\"-no-enclosing]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-Title with { UnEscaped Curly } Braces-no_reuse-enclose_ints-\"-None]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-Title with { UnEscaped Curly } Braces-no_reuse-no_enclose_ints-{-{]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-Title with { UnEscaped Curly } Braces-no_reuse-no_enclose_ints-{-\"]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-Title with { UnEscaped Curly } Braces-no_reuse-no_enclose_ints-{-no-enclosing]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-Title with { UnEscaped Curly } Braces-no_reuse-no_enclose_ints-{-None]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-Title with { UnEscaped Curly } Braces-no_reuse-no_enclose_ints-\"-{]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-Title with { UnEscaped Curly } Braces-no_reuse-no_enclose_ints-\"-\"]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-Title with { UnEscaped Curly } Braces-no_reuse-no_enclose_ints-\"-no-enclosing]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-Title with { UnEscaped Curly } Braces-no_reuse-no_enclose_ints-\"-None]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-1990-reuse-enclose_ints-{-{]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-1990-reuse-enclose_ints-{-\"]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-1990-reuse-enclose_ints-{-no-enclosing]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-1990-reuse-enclose_ints-{-None]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-1990-reuse-enclose_ints-\"-{]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-1990-reuse-enclose_ints-\"-\"]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-1990-reuse-enclose_ints-\"-no-enclosing]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-1990-reuse-enclose_ints-\"-None]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-1990-reuse-no_enclose_ints-{-{]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-1990-reuse-no_enclose_ints-{-\"]",
            "time": 0.003,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-1990-reuse-no_enclose_ints-{-no-enclosing]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-1990-reuse-no_enclose_ints-{-None]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-1990-reuse-no_enclose_ints-\"-{]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-1990-reuse-no_enclose_ints-\"-\"]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-1990-reuse-no_enclose_ints-\"-no-enclosing]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-1990-reuse-no_enclose_ints-\"-None]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-1990-no_reuse-enclose_ints-{-{]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-1990-no_reuse-enclose_ints-{-\"]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-1990-no_reuse-enclose_ints-{-no-enclosing]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-1990-no_reuse-enclose_ints-{-None]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-1990-no_reuse-enclose_ints-\"-{]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-1990-no_reuse-enclose_ints-\"-\"]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-1990-no_reuse-enclose_ints-\"-no-enclosing]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-1990-no_reuse-enclose_ints-\"-None]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-1990-no_reuse-no_enclose_ints-{-{]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-1990-no_reuse-no_enclose_ints-{-\"]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-1990-no_reuse-no_enclose_ints-{-no-enclosing]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-1990-no_reuse-no_enclose_ints-{-None]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-1990-no_reuse-no_enclose_ints-\"-{]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-1990-no_reuse-no_enclose_ints-\"-\"]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-1990-no_reuse-no_enclose_ints-\"-no-enclosing]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[inplace-1990-no_reuse-no_enclose_ints-\"-None]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-John Doe-reuse-enclose_ints-{-{]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-John Doe-reuse-enclose_ints-{-\"]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-John Doe-reuse-enclose_ints-{-no-enclosing]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-John Doe-reuse-enclose_ints-{-None]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-John Doe-reuse-enclose_ints-\"-{]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-John Doe-reuse-enclose_ints-\"-\"]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-John Doe-reuse-enclose_ints-\"-no-enclosing]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-John Doe-reuse-enclose_ints-\"-None]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-John Doe-reuse-no_enclose_ints-{-{]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-John Doe-reuse-no_enclose_ints-{-\"]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-John Doe-reuse-no_enclose_ints-{-no-enclosing]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-John Doe-reuse-no_enclose_ints-{-None]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-John Doe-reuse-no_enclose_ints-\"-{]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-John Doe-reuse-no_enclose_ints-\"-\"]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-John Doe-reuse-no_enclose_ints-\"-no-enclosing]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-John Doe-reuse-no_enclose_ints-\"-None]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-John Doe-no_reuse-enclose_ints-{-{]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-John Doe-no_reuse-enclose_ints-{-\"]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-John Doe-no_reuse-enclose_ints-{-no-enclosing]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-John Doe-no_reuse-enclose_ints-{-None]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-John Doe-no_reuse-enclose_ints-\"-{]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-John Doe-no_reuse-enclose_ints-\"-\"]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-John Doe-no_reuse-enclose_ints-\"-no-enclosing]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-John Doe-no_reuse-enclose_ints-\"-None]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-John Doe-no_reuse-no_enclose_ints-{-{]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-John Doe-no_reuse-no_enclose_ints-{-\"]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-John Doe-no_reuse-no_enclose_ints-{-no-enclosing]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-John Doe-no_reuse-no_enclose_ints-{-None]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-John Doe-no_reuse-no_enclose_ints-\"-{]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-John Doe-no_reuse-no_enclose_ints-\"-\"]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-John Doe-no_reuse-no_enclose_ints-\"-no-enclosing]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-John Doe-no_reuse-no_enclose_ints-\"-None]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-\\xe0 {\\\\`a} \\\\`{a}-reuse-enclose_ints-{-{]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-\\xe0 {\\\\`a} \\\\`{a}-reuse-enclose_ints-{-\"]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-\\xe0 {\\\\`a} \\\\`{a}-reuse-enclose_ints-{-no-enclosing]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-\\xe0 {\\\\`a} \\\\`{a}-reuse-enclose_ints-{-None]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-\\xe0 {\\\\`a} \\\\`{a}-reuse-enclose_ints-\"-{]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-\\xe0 {\\\\`a} \\\\`{a}-reuse-enclose_ints-\"-\"]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-\\xe0 {\\\\`a} \\\\`{a}-reuse-enclose_ints-\"-no-enclosing]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-\\xe0 {\\\\`a} \\\\`{a}-reuse-enclose_ints-\"-None]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-\\xe0 {\\\\`a} \\\\`{a}-reuse-no_enclose_ints-{-{]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-\\xe0 {\\\\`a} \\\\`{a}-reuse-no_enclose_ints-{-\"]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-\\xe0 {\\\\`a} \\\\`{a}-reuse-no_enclose_ints-{-no-enclosing]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-\\xe0 {\\\\`a} \\\\`{a}-reuse-no_enclose_ints-{-None]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-\\xe0 {\\\\`a} \\\\`{a}-reuse-no_enclose_ints-\"-{]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-\\xe0 {\\\\`a} \\\\`{a}-reuse-no_enclose_ints-\"-\"]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-\\xe0 {\\\\`a} \\\\`{a}-reuse-no_enclose_ints-\"-no-enclosing]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-\\xe0 {\\\\`a} \\\\`{a}-reuse-no_enclose_ints-\"-None]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-\\xe0 {\\\\`a} \\\\`{a}-no_reuse-enclose_ints-{-{]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-\\xe0 {\\\\`a} \\\\`{a}-no_reuse-enclose_ints-{-\"]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-\\xe0 {\\\\`a} \\\\`{a}-no_reuse-enclose_ints-{-no-enclosing]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-\\xe0 {\\\\`a} \\\\`{a}-no_reuse-enclose_ints-{-None]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-\\xe0 {\\\\`a} \\\\`{a}-no_reuse-enclose_ints-\"-{]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-\\xe0 {\\\\`a} \\\\`{a}-no_reuse-enclose_ints-\"-\"]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-\\xe0 {\\\\`a} \\\\`{a}-no_reuse-enclose_ints-\"-no-enclosing]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-\\xe0 {\\\\`a} \\\\`{a}-no_reuse-enclose_ints-\"-None]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-\\xe0 {\\\\`a} \\\\`{a}-no_reuse-no_enclose_ints-{-{]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-\\xe0 {\\\\`a} \\\\`{a}-no_reuse-no_enclose_ints-{-\"]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-\\xe0 {\\\\`a} \\\\`{a}-no_reuse-no_enclose_ints-{-no-enclosing]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-\\xe0 {\\\\`a} \\\\`{a}-no_reuse-no_enclose_ints-{-None]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-\\xe0 {\\\\`a} \\\\`{a}-no_reuse-no_enclose_ints-\"-{]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-\\xe0 {\\\\`a} \\\\`{a}-no_reuse-no_enclose_ints-\"-\"]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-\\xe0 {\\\\`a} \\\\`{a}-no_reuse-no_enclose_ints-\"-no-enclosing]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-\\xe0 {\\\\`a} \\\\`{a}-no_reuse-no_enclose_ints-\"-None]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-{\\\\`a} {\\\\`a} {\\\\`a}-reuse-enclose_ints-{-{]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-{\\\\`a} {\\\\`a} {\\\\`a}-reuse-enclose_ints-{-\"]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-{\\\\`a} {\\\\`a} {\\\\`a}-reuse-enclose_ints-{-no-enclosing]",
            "time": 0.002,
            "results": [
                {
                    "result": "Skipped",
                    "message": "No enclosing to remove",
                    "type": "pytest.skip"
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-{\\\\`a} {\\\\`a} {\\\\`a}-reuse-enclose_ints-{-None]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-{\\\\`a} {\\\\`a} {\\\\`a}-reuse-enclose_ints-\"-{]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-{\\\\`a} {\\\\`a} {\\\\`a}-reuse-enclose_ints-\"-\"]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-{\\\\`a} {\\\\`a} {\\\\`a}-reuse-enclose_ints-\"-no-enclosing]",
            "time": 0.002,
            "results": [
                {
                    "result": "Skipped",
                    "message": "No enclosing to remove",
                    "type": "pytest.skip"
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-{\\\\`a} {\\\\`a} {\\\\`a}-reuse-enclose_ints-\"-None]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-{\\\\`a} {\\\\`a} {\\\\`a}-reuse-no_enclose_ints-{-{]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-{\\\\`a} {\\\\`a} {\\\\`a}-reuse-no_enclose_ints-{-\"]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-{\\\\`a} {\\\\`a} {\\\\`a}-reuse-no_enclose_ints-{-no-enclosing]",
            "time": 0.002,
            "results": [
                {
                    "result": "Skipped",
                    "message": "No enclosing to remove",
                    "type": "pytest.skip"
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-{\\\\`a} {\\\\`a} {\\\\`a}-reuse-no_enclose_ints-{-None]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-{\\\\`a} {\\\\`a} {\\\\`a}-reuse-no_enclose_ints-\"-{]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-{\\\\`a} {\\\\`a} {\\\\`a}-reuse-no_enclose_ints-\"-\"]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-{\\\\`a} {\\\\`a} {\\\\`a}-reuse-no_enclose_ints-\"-no-enclosing]",
            "time": 0.002,
            "results": [
                {
                    "result": "Skipped",
                    "message": "No enclosing to remove",
                    "type": "pytest.skip"
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-{\\\\`a} {\\\\`a} {\\\\`a}-reuse-no_enclose_ints-\"-None]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-{\\\\`a} {\\\\`a} {\\\\`a}-no_reuse-enclose_ints-{-{]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-{\\\\`a} {\\\\`a} {\\\\`a}-no_reuse-enclose_ints-{-\"]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-{\\\\`a} {\\\\`a} {\\\\`a}-no_reuse-enclose_ints-{-no-enclosing]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-{\\\\`a} {\\\\`a} {\\\\`a}-no_reuse-enclose_ints-{-None]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-{\\\\`a} {\\\\`a} {\\\\`a}-no_reuse-enclose_ints-\"-{]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-{\\\\`a} {\\\\`a} {\\\\`a}-no_reuse-enclose_ints-\"-\"]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-{\\\\`a} {\\\\`a} {\\\\`a}-no_reuse-enclose_ints-\"-no-enclosing]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-{\\\\`a} {\\\\`a} {\\\\`a}-no_reuse-enclose_ints-\"-None]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-{\\\\`a} {\\\\`a} {\\\\`a}-no_reuse-no_enclose_ints-{-{]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-{\\\\`a} {\\\\`a} {\\\\`a}-no_reuse-no_enclose_ints-{-\"]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-{\\\\`a} {\\\\`a} {\\\\`a}-no_reuse-no_enclose_ints-{-no-enclosing]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-{\\\\`a} {\\\\`a} {\\\\`a}-no_reuse-no_enclose_ints-{-None]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-{\\\\`a} {\\\\`a} {\\\\`a}-no_reuse-no_enclose_ints-\"-{]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-{\\\\`a} {\\\\`a} {\\\\`a}-no_reuse-no_enclose_ints-\"-\"]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-{\\\\`a} {\\\\`a} {\\\\`a}-no_reuse-no_enclose_ints-\"-no-enclosing]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-{\\\\`a} {\\\\`a} {\\\\`a}-no_reuse-no_enclose_ints-\"-None]",
            "time": 0.009,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-Two Gedenk\\\\\"uberlieferung der Angelsachsen-reuse-enclose_ints-{-{]",
            "time": 0.006,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-Two Gedenk\\\\\"uberlieferung der Angelsachsen-reuse-enclose_ints-{-\"]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-Two Gedenk\\\\\"uberlieferung der Angelsachsen-reuse-enclose_ints-{-no-enclosing]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-Two Gedenk\\\\\"uberlieferung der Angelsachsen-reuse-enclose_ints-{-None]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-Two Gedenk\\\\\"uberlieferung der Angelsachsen-reuse-enclose_ints-\"-{]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-Two Gedenk\\\\\"uberlieferung der Angelsachsen-reuse-enclose_ints-\"-\"]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-Two Gedenk\\\\\"uberlieferung der Angelsachsen-reuse-enclose_ints-\"-no-enclosing]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-Two Gedenk\\\\\"uberlieferung der Angelsachsen-reuse-enclose_ints-\"-None]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-Two Gedenk\\\\\"uberlieferung der Angelsachsen-reuse-no_enclose_ints-{-{]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-Two Gedenk\\\\\"uberlieferung der Angelsachsen-reuse-no_enclose_ints-{-\"]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-Two Gedenk\\\\\"uberlieferung der Angelsachsen-reuse-no_enclose_ints-{-no-enclosing]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-Two Gedenk\\\\\"uberlieferung der Angelsachsen-reuse-no_enclose_ints-{-None]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-Two Gedenk\\\\\"uberlieferung der Angelsachsen-reuse-no_enclose_ints-\"-{]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-Two Gedenk\\\\\"uberlieferung der Angelsachsen-reuse-no_enclose_ints-\"-\"]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-Two Gedenk\\\\\"uberlieferung der Angelsachsen-reuse-no_enclose_ints-\"-no-enclosing]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-Two Gedenk\\\\\"uberlieferung der Angelsachsen-reuse-no_enclose_ints-\"-None]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-Two Gedenk\\\\\"uberlieferung der Angelsachsen-no_reuse-enclose_ints-{-{]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-Two Gedenk\\\\\"uberlieferung der Angelsachsen-no_reuse-enclose_ints-{-\"]",
            "time": 0.004,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-Two Gedenk\\\\\"uberlieferung der Angelsachsen-no_reuse-enclose_ints-{-no-enclosing]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-Two Gedenk\\\\\"uberlieferung der Angelsachsen-no_reuse-enclose_ints-{-None]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-Two Gedenk\\\\\"uberlieferung der Angelsachsen-no_reuse-enclose_ints-\"-{]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-Two Gedenk\\\\\"uberlieferung der Angelsachsen-no_reuse-enclose_ints-\"-\"]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-Two Gedenk\\\\\"uberlieferung der Angelsachsen-no_reuse-enclose_ints-\"-no-enclosing]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-Two Gedenk\\\\\"uberlieferung der Angelsachsen-no_reuse-enclose_ints-\"-None]",
            "time": 0.003,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-Two Gedenk\\\\\"uberlieferung der Angelsachsen-no_reuse-no_enclose_ints-{-{]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-Two Gedenk\\\\\"uberlieferung der Angelsachsen-no_reuse-no_enclose_ints-{-\"]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-Two Gedenk\\\\\"uberlieferung der Angelsachsen-no_reuse-no_enclose_ints-{-no-enclosing]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-Two Gedenk\\\\\"uberlieferung der Angelsachsen-no_reuse-no_enclose_ints-{-None]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-Two Gedenk\\\\\"uberlieferung der Angelsachsen-no_reuse-no_enclose_ints-\"-{]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-Two Gedenk\\\\\"uberlieferung der Angelsachsen-no_reuse-no_enclose_ints-\"-\"]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-Two Gedenk\\\\\"uberlieferung der Angelsachsen-no_reuse-no_enclose_ints-\"-no-enclosing]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-Two Gedenk\\\\\"uberlieferung der Angelsachsen-no_reuse-no_enclose_ints-\"-None]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-\\\\texttimes{}{\\\\texttimes}\\\\texttimes-reuse-enclose_ints-{-{]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-\\\\texttimes{}{\\\\texttimes}\\\\texttimes-reuse-enclose_ints-{-\"]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-\\\\texttimes{}{\\\\texttimes}\\\\texttimes-reuse-enclose_ints-{-no-enclosing]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-\\\\texttimes{}{\\\\texttimes}\\\\texttimes-reuse-enclose_ints-{-None]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-\\\\texttimes{}{\\\\texttimes}\\\\texttimes-reuse-enclose_ints-\"-{]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-\\\\texttimes{}{\\\\texttimes}\\\\texttimes-reuse-enclose_ints-\"-\"]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-\\\\texttimes{}{\\\\texttimes}\\\\texttimes-reuse-enclose_ints-\"-no-enclosing]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-\\\\texttimes{}{\\\\texttimes}\\\\texttimes-reuse-enclose_ints-\"-None]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-\\\\texttimes{}{\\\\texttimes}\\\\texttimes-reuse-no_enclose_ints-{-{]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-\\\\texttimes{}{\\\\texttimes}\\\\texttimes-reuse-no_enclose_ints-{-\"]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-\\\\texttimes{}{\\\\texttimes}\\\\texttimes-reuse-no_enclose_ints-{-no-enclosing]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-\\\\texttimes{}{\\\\texttimes}\\\\texttimes-reuse-no_enclose_ints-{-None]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-\\\\texttimes{}{\\\\texttimes}\\\\texttimes-reuse-no_enclose_ints-\"-{]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-\\\\texttimes{}{\\\\texttimes}\\\\texttimes-reuse-no_enclose_ints-\"-\"]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-\\\\texttimes{}{\\\\texttimes}\\\\texttimes-reuse-no_enclose_ints-\"-no-enclosing]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-\\\\texttimes{}{\\\\texttimes}\\\\texttimes-reuse-no_enclose_ints-\"-None]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-\\\\texttimes{}{\\\\texttimes}\\\\texttimes-no_reuse-enclose_ints-{-{]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-\\\\texttimes{}{\\\\texttimes}\\\\texttimes-no_reuse-enclose_ints-{-\"]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-\\\\texttimes{}{\\\\texttimes}\\\\texttimes-no_reuse-enclose_ints-{-no-enclosing]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-\\\\texttimes{}{\\\\texttimes}\\\\texttimes-no_reuse-enclose_ints-{-None]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-\\\\texttimes{}{\\\\texttimes}\\\\texttimes-no_reuse-enclose_ints-\"-{]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-\\\\texttimes{}{\\\\texttimes}\\\\texttimes-no_reuse-enclose_ints-\"-\"]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-\\\\texttimes{}{\\\\texttimes}\\\\texttimes-no_reuse-enclose_ints-\"-no-enclosing]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-\\\\texttimes{}{\\\\texttimes}\\\\texttimes-no_reuse-enclose_ints-\"-None]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-\\\\texttimes{}{\\\\texttimes}\\\\texttimes-no_reuse-no_enclose_ints-{-{]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-\\\\texttimes{}{\\\\texttimes}\\\\texttimes-no_reuse-no_enclose_ints-{-\"]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-\\\\texttimes{}{\\\\texttimes}\\\\texttimes-no_reuse-no_enclose_ints-{-no-enclosing]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-\\\\texttimes{}{\\\\texttimes}\\\\texttimes-no_reuse-no_enclose_ints-{-None]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-\\\\texttimes{}{\\\\texttimes}\\\\texttimes-no_reuse-no_enclose_ints-\"-{]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-\\\\texttimes{}{\\\\texttimes}\\\\texttimes-no_reuse-no_enclose_ints-\"-\"]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-\\\\texttimes{}{\\\\texttimes}\\\\texttimes-no_reuse-no_enclose_ints-\"-no-enclosing]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-\\\\texttimes{}{\\\\texttimes}\\\\texttimes-no_reuse-no_enclose_ints-\"-None]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-p\\\\^{a}t\\\\'{e}Title with \\\\{ a curly brace-reuse-enclose_ints-{-{]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-p\\\\^{a}t\\\\'{e}Title with \\\\{ a curly brace-reuse-enclose_ints-{-\"]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-p\\\\^{a}t\\\\'{e}Title with \\\\{ a curly brace-reuse-enclose_ints-{-no-enclosing]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-p\\\\^{a}t\\\\'{e}Title with \\\\{ a curly brace-reuse-enclose_ints-{-None]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-p\\\\^{a}t\\\\'{e}Title with \\\\{ a curly brace-reuse-enclose_ints-\"-{]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-p\\\\^{a}t\\\\'{e}Title with \\\\{ a curly brace-reuse-enclose_ints-\"-\"]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-p\\\\^{a}t\\\\'{e}Title with \\\\{ a curly brace-reuse-enclose_ints-\"-no-enclosing]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-p\\\\^{a}t\\\\'{e}Title with \\\\{ a curly brace-reuse-enclose_ints-\"-None]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-p\\\\^{a}t\\\\'{e}Title with \\\\{ a curly brace-reuse-no_enclose_ints-{-{]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-p\\\\^{a}t\\\\'{e}Title with \\\\{ a curly brace-reuse-no_enclose_ints-{-\"]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-p\\\\^{a}t\\\\'{e}Title with \\\\{ a curly brace-reuse-no_enclose_ints-{-no-enclosing]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-p\\\\^{a}t\\\\'{e}Title with \\\\{ a curly brace-reuse-no_enclose_ints-{-None]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-p\\\\^{a}t\\\\'{e}Title with \\\\{ a curly brace-reuse-no_enclose_ints-\"-{]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-p\\\\^{a}t\\\\'{e}Title with \\\\{ a curly brace-reuse-no_enclose_ints-\"-\"]",
            "time": 0.003,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-p\\\\^{a}t\\\\'{e}Title with \\\\{ a curly brace-reuse-no_enclose_ints-\"-no-enclosing]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-p\\\\^{a}t\\\\'{e}Title with \\\\{ a curly brace-reuse-no_enclose_ints-\"-None]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-p\\\\^{a}t\\\\'{e}Title with \\\\{ a curly brace-no_reuse-enclose_ints-{-{]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-p\\\\^{a}t\\\\'{e}Title with \\\\{ a curly brace-no_reuse-enclose_ints-{-\"]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-p\\\\^{a}t\\\\'{e}Title with \\\\{ a curly brace-no_reuse-enclose_ints-{-no-enclosing]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-p\\\\^{a}t\\\\'{e}Title with \\\\{ a curly brace-no_reuse-enclose_ints-{-None]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-p\\\\^{a}t\\\\'{e}Title with \\\\{ a curly brace-no_reuse-enclose_ints-\"-{]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-p\\\\^{a}t\\\\'{e}Title with \\\\{ a curly brace-no_reuse-enclose_ints-\"-\"]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-p\\\\^{a}t\\\\'{e}Title with \\\\{ a curly brace-no_reuse-enclose_ints-\"-no-enclosing]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-p\\\\^{a}t\\\\'{e}Title with \\\\{ a curly brace-no_reuse-enclose_ints-\"-None]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-p\\\\^{a}t\\\\'{e}Title with \\\\{ a curly brace-no_reuse-no_enclose_ints-{-{]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-p\\\\^{a}t\\\\'{e}Title with \\\\{ a curly brace-no_reuse-no_enclose_ints-{-\"]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-p\\\\^{a}t\\\\'{e}Title with \\\\{ a curly brace-no_reuse-no_enclose_ints-{-no-enclosing]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-p\\\\^{a}t\\\\'{e}Title with \\\\{ a curly brace-no_reuse-no_enclose_ints-{-None]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-p\\\\^{a}t\\\\'{e}Title with \\\\{ a curly brace-no_reuse-no_enclose_ints-\"-{]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-p\\\\^{a}t\\\\'{e}Title with \\\\{ a curly brace-no_reuse-no_enclose_ints-\"-\"]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-p\\\\^{a}t\\\\'{e}Title with \\\\{ a curly brace-no_reuse-no_enclose_ints-\"-no-enclosing]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-p\\\\^{a}t\\\\'{e}Title with \\\\{ a curly brace-no_reuse-no_enclose_ints-\"-None]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-Title with \\\\} a curly brace-reuse-enclose_ints-{-{]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-Title with \\\\} a curly brace-reuse-enclose_ints-{-\"]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-Title with \\\\} a curly brace-reuse-enclose_ints-{-no-enclosing]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-Title with \\\\} a curly brace-reuse-enclose_ints-{-None]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-Title with \\\\} a curly brace-reuse-enclose_ints-\"-{]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-Title with \\\\} a curly brace-reuse-enclose_ints-\"-\"]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-Title with \\\\} a curly brace-reuse-enclose_ints-\"-no-enclosing]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-Title with \\\\} a curly brace-reuse-enclose_ints-\"-None]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-Title with \\\\} a curly brace-reuse-no_enclose_ints-{-{]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-Title with \\\\} a curly brace-reuse-no_enclose_ints-{-\"]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-Title with \\\\} a curly brace-reuse-no_enclose_ints-{-no-enclosing]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-Title with \\\\} a curly brace-reuse-no_enclose_ints-{-None]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-Title with \\\\} a curly brace-reuse-no_enclose_ints-\"-{]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-Title with \\\\} a curly brace-reuse-no_enclose_ints-\"-\"]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-Title with \\\\} a curly brace-reuse-no_enclose_ints-\"-no-enclosing]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-Title with \\\\} a curly brace-reuse-no_enclose_ints-\"-None]",
            "time": 0.05,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-Title with \\\\} a curly brace-no_reuse-enclose_ints-{-{]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-Title with \\\\} a curly brace-no_reuse-enclose_ints-{-\"]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-Title with \\\\} a curly brace-no_reuse-enclose_ints-{-no-enclosing]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-Title with \\\\} a curly brace-no_reuse-enclose_ints-{-None]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-Title with \\\\} a curly brace-no_reuse-enclose_ints-\"-{]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-Title with \\\\} a curly brace-no_reuse-enclose_ints-\"-\"]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-Title with \\\\} a curly brace-no_reuse-enclose_ints-\"-no-enclosing]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-Title with \\\\} a curly brace-no_reuse-enclose_ints-\"-None]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-Title with \\\\} a curly brace-no_reuse-no_enclose_ints-{-{]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-Title with \\\\} a curly brace-no_reuse-no_enclose_ints-{-\"]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-Title with \\\\} a curly brace-no_reuse-no_enclose_ints-{-no-enclosing]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-Title with \\\\} a curly brace-no_reuse-no_enclose_ints-{-None]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-Title with \\\\} a curly brace-no_reuse-no_enclose_ints-\"-{]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-Title with \\\\} a curly brace-no_reuse-no_enclose_ints-\"-\"]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-Title with \\\\} a curly brace-no_reuse-no_enclose_ints-\"-no-enclosing]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-Title with \\\\} a curly brace-no_reuse-no_enclose_ints-\"-None]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-Title with \\\\{ a curly brace and \\\\} a curly brace-reuse-enclose_ints-{-{]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-Title with \\\\{ a curly brace and \\\\} a curly brace-reuse-enclose_ints-{-\"]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-Title with \\\\{ a curly brace and \\\\} a curly brace-reuse-enclose_ints-{-no-enclosing]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-Title with \\\\{ a curly brace and \\\\} a curly brace-reuse-enclose_ints-{-None]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-Title with \\\\{ a curly brace and \\\\} a curly brace-reuse-enclose_ints-\"-{]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-Title with \\\\{ a curly brace and \\\\} a curly brace-reuse-enclose_ints-\"-\"]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-Title with \\\\{ a curly brace and \\\\} a curly brace-reuse-enclose_ints-\"-no-enclosing]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-Title with \\\\{ a curly brace and \\\\} a curly brace-reuse-enclose_ints-\"-None]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-Title with \\\\{ a curly brace and \\\\} a curly brace-reuse-no_enclose_ints-{-{]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-Title with \\\\{ a curly brace and \\\\} a curly brace-reuse-no_enclose_ints-{-\"]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-Title with \\\\{ a curly brace and \\\\} a curly brace-reuse-no_enclose_ints-{-no-enclosing]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-Title with \\\\{ a curly brace and \\\\} a curly brace-reuse-no_enclose_ints-{-None]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-Title with \\\\{ a curly brace and \\\\} a curly brace-reuse-no_enclose_ints-\"-{]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-Title with \\\\{ a curly brace and \\\\} a curly brace-reuse-no_enclose_ints-\"-\"]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-Title with \\\\{ a curly brace and \\\\} a curly brace-reuse-no_enclose_ints-\"-no-enclosing]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-Title with \\\\{ a curly brace and \\\\} a curly brace-reuse-no_enclose_ints-\"-None]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-Title with \\\\{ a curly brace and \\\\} a curly brace-no_reuse-enclose_ints-{-{]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-Title with \\\\{ a curly brace and \\\\} a curly brace-no_reuse-enclose_ints-{-\"]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-Title with \\\\{ a curly brace and \\\\} a curly brace-no_reuse-enclose_ints-{-no-enclosing]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-Title with \\\\{ a curly brace and \\\\} a curly brace-no_reuse-enclose_ints-{-None]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-Title with \\\\{ a curly brace and \\\\} a curly brace-no_reuse-enclose_ints-\"-{]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-Title with \\\\{ a curly brace and \\\\} a curly brace-no_reuse-enclose_ints-\"-\"]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-Title with \\\\{ a curly brace and \\\\} a curly brace-no_reuse-enclose_ints-\"-no-enclosing]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-Title with \\\\{ a curly brace and \\\\} a curly brace-no_reuse-enclose_ints-\"-None]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-Title with \\\\{ a curly brace and \\\\} a curly brace-no_reuse-no_enclose_ints-{-{]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-Title with \\\\{ a curly brace and \\\\} a curly brace-no_reuse-no_enclose_ints-{-\"]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-Title with \\\\{ a curly brace and \\\\} a curly brace-no_reuse-no_enclose_ints-{-no-enclosing]",
            "time": 0.003,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-Title with \\\\{ a curly brace and \\\\} a curly brace-no_reuse-no_enclose_ints-{-None]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-Title with \\\\{ a curly brace and \\\\} a curly brace-no_reuse-no_enclose_ints-\"-{]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-Title with \\\\{ a curly brace and \\\\} a curly brace-no_reuse-no_enclose_ints-\"-\"]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-Title with \\\\{ a curly brace and \\\\} a curly brace-no_reuse-no_enclose_ints-\"-no-enclosing]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-Title with \\\\{ a curly brace and \\\\} a curly brace-no_reuse-no_enclose_ints-\"-None]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-Title with \\\\{ a curly brace and \\\\} a curly brace and \\\\{ another curly brace-reuse-enclose_ints-{-{]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-Title with \\\\{ a curly brace and \\\\} a curly brace and \\\\{ another curly brace-reuse-enclose_ints-{-\"]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-Title with \\\\{ a curly brace and \\\\} a curly brace and \\\\{ another curly brace-reuse-enclose_ints-{-no-enclosing]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-Title with \\\\{ a curly brace and \\\\} a curly brace and \\\\{ another curly brace-reuse-enclose_ints-{-None]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-Title with \\\\{ a curly brace and \\\\} a curly brace and \\\\{ another curly brace-reuse-enclose_ints-\"-{]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-Title with \\\\{ a curly brace and \\\\} a curly brace and \\\\{ another curly brace-reuse-enclose_ints-\"-\"]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-Title with \\\\{ a curly brace and \\\\} a curly brace and \\\\{ another curly brace-reuse-enclose_ints-\"-no-enclosing]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-Title with \\\\{ a curly brace and \\\\} a curly brace and \\\\{ another curly brace-reuse-enclose_ints-\"-None]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-Title with \\\\{ a curly brace and \\\\} a curly brace and \\\\{ another curly brace-reuse-no_enclose_ints-{-{]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-Title with \\\\{ a curly brace and \\\\} a curly brace and \\\\{ another curly brace-reuse-no_enclose_ints-{-\"]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-Title with \\\\{ a curly brace and \\\\} a curly brace and \\\\{ another curly brace-reuse-no_enclose_ints-{-no-enclosing]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-Title with \\\\{ a curly brace and \\\\} a curly brace and \\\\{ another curly brace-reuse-no_enclose_ints-{-None]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-Title with \\\\{ a curly brace and \\\\} a curly brace and \\\\{ another curly brace-reuse-no_enclose_ints-\"-{]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-Title with \\\\{ a curly brace and \\\\} a curly brace and \\\\{ another curly brace-reuse-no_enclose_ints-\"-\"]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-Title with \\\\{ a curly brace and \\\\} a curly brace and \\\\{ another curly brace-reuse-no_enclose_ints-\"-no-enclosing]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-Title with \\\\{ a curly brace and \\\\} a curly brace and \\\\{ another curly brace-reuse-no_enclose_ints-\"-None]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-Title with \\\\{ a curly brace and \\\\} a curly brace and \\\\{ another curly brace-no_reuse-enclose_ints-{-{]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-Title with \\\\{ a curly brace and \\\\} a curly brace and \\\\{ another curly brace-no_reuse-enclose_ints-{-\"]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-Title with \\\\{ a curly brace and \\\\} a curly brace and \\\\{ another curly brace-no_reuse-enclose_ints-{-no-enclosing]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-Title with \\\\{ a curly brace and \\\\} a curly brace and \\\\{ another curly brace-no_reuse-enclose_ints-{-None]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-Title with \\\\{ a curly brace and \\\\} a curly brace and \\\\{ another curly brace-no_reuse-enclose_ints-\"-{]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-Title with \\\\{ a curly brace and \\\\} a curly brace and \\\\{ another curly brace-no_reuse-enclose_ints-\"-\"]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-Title with \\\\{ a curly brace and \\\\} a curly brace and \\\\{ another curly brace-no_reuse-enclose_ints-\"-no-enclosing]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-Title with \\\\{ a curly brace and \\\\} a curly brace and \\\\{ another curly brace-no_reuse-enclose_ints-\"-None]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-Title with \\\\{ a curly brace and \\\\} a curly brace and \\\\{ another curly brace-no_reuse-no_enclose_ints-{-{]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-Title with \\\\{ a curly brace and \\\\} a curly brace and \\\\{ another curly brace-no_reuse-no_enclose_ints-{-\"]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-Title with \\\\{ a curly brace and \\\\} a curly brace and \\\\{ another curly brace-no_reuse-no_enclose_ints-{-no-enclosing]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-Title with \\\\{ a curly brace and \\\\} a curly brace and \\\\{ another curly brace-no_reuse-no_enclose_ints-{-None]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-Title with \\\\{ a curly brace and \\\\} a curly brace and \\\\{ another curly brace-no_reuse-no_enclose_ints-\"-{]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-Title with \\\\{ a curly brace and \\\\} a curly brace and \\\\{ another curly brace-no_reuse-no_enclose_ints-\"-\"]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-Title with \\\\{ a curly brace and \\\\} a curly brace and \\\\{ another curly brace-no_reuse-no_enclose_ints-\"-no-enclosing]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-Title with \\\\{ a curly brace and \\\\} a curly brace and \\\\{ another curly brace-no_reuse-no_enclose_ints-\"-None]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-Title with { UnEscaped Curly } Braces-reuse-enclose_ints-{-{]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-Title with { UnEscaped Curly } Braces-reuse-enclose_ints-{-\"]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-Title with { UnEscaped Curly } Braces-reuse-enclose_ints-{-no-enclosing]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-Title with { UnEscaped Curly } Braces-reuse-enclose_ints-{-None]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-Title with { UnEscaped Curly } Braces-reuse-enclose_ints-\"-{]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-Title with { UnEscaped Curly } Braces-reuse-enclose_ints-\"-\"]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-Title with { UnEscaped Curly } Braces-reuse-enclose_ints-\"-no-enclosing]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-Title with { UnEscaped Curly } Braces-reuse-enclose_ints-\"-None]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-Title with { UnEscaped Curly } Braces-reuse-no_enclose_ints-{-{]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-Title with { UnEscaped Curly } Braces-reuse-no_enclose_ints-{-\"]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-Title with { UnEscaped Curly } Braces-reuse-no_enclose_ints-{-no-enclosing]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-Title with { UnEscaped Curly } Braces-reuse-no_enclose_ints-{-None]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-Title with { UnEscaped Curly } Braces-reuse-no_enclose_ints-\"-{]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-Title with { UnEscaped Curly } Braces-reuse-no_enclose_ints-\"-\"]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-Title with { UnEscaped Curly } Braces-reuse-no_enclose_ints-\"-no-enclosing]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-Title with { UnEscaped Curly } Braces-reuse-no_enclose_ints-\"-None]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-Title with { UnEscaped Curly } Braces-no_reuse-enclose_ints-{-{]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-Title with { UnEscaped Curly } Braces-no_reuse-enclose_ints-{-\"]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-Title with { UnEscaped Curly } Braces-no_reuse-enclose_ints-{-no-enclosing]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-Title with { UnEscaped Curly } Braces-no_reuse-enclose_ints-{-None]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-Title with { UnEscaped Curly } Braces-no_reuse-enclose_ints-\"-{]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-Title with { UnEscaped Curly } Braces-no_reuse-enclose_ints-\"-\"]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-Title with { UnEscaped Curly } Braces-no_reuse-enclose_ints-\"-no-enclosing]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-Title with { UnEscaped Curly } Braces-no_reuse-enclose_ints-\"-None]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-Title with { UnEscaped Curly } Braces-no_reuse-no_enclose_ints-{-{]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-Title with { UnEscaped Curly } Braces-no_reuse-no_enclose_ints-{-\"]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-Title with { UnEscaped Curly } Braces-no_reuse-no_enclose_ints-{-no-enclosing]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-Title with { UnEscaped Curly } Braces-no_reuse-no_enclose_ints-{-None]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-Title with { UnEscaped Curly } Braces-no_reuse-no_enclose_ints-\"-{]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-Title with { UnEscaped Curly } Braces-no_reuse-no_enclose_ints-\"-\"]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-Title with { UnEscaped Curly } Braces-no_reuse-no_enclose_ints-\"-no-enclosing]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-Title with { UnEscaped Curly } Braces-no_reuse-no_enclose_ints-\"-None]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-1990-reuse-enclose_ints-{-{]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-1990-reuse-enclose_ints-{-\"]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-1990-reuse-enclose_ints-{-no-enclosing]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-1990-reuse-enclose_ints-{-None]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-1990-reuse-enclose_ints-\"-{]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-1990-reuse-enclose_ints-\"-\"]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-1990-reuse-enclose_ints-\"-no-enclosing]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-1990-reuse-enclose_ints-\"-None]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-1990-reuse-no_enclose_ints-{-{]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-1990-reuse-no_enclose_ints-{-\"]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-1990-reuse-no_enclose_ints-{-no-enclosing]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-1990-reuse-no_enclose_ints-{-None]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-1990-reuse-no_enclose_ints-\"-{]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-1990-reuse-no_enclose_ints-\"-\"]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-1990-reuse-no_enclose_ints-\"-no-enclosing]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-1990-reuse-no_enclose_ints-\"-None]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-1990-no_reuse-enclose_ints-{-{]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-1990-no_reuse-enclose_ints-{-\"]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-1990-no_reuse-enclose_ints-{-no-enclosing]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-1990-no_reuse-enclose_ints-{-None]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-1990-no_reuse-enclose_ints-\"-{]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-1990-no_reuse-enclose_ints-\"-\"]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-1990-no_reuse-enclose_ints-\"-no-enclosing]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-1990-no_reuse-enclose_ints-\"-None]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-1990-no_reuse-no_enclose_ints-{-{]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-1990-no_reuse-no_enclose_ints-{-\"]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-1990-no_reuse-no_enclose_ints-{-no-enclosing]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-1990-no_reuse-no_enclose_ints-{-None]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-1990-no_reuse-no_enclose_ints-\"-{]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-1990-no_reuse-no_enclose_ints-\"-\"]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-1990-no_reuse-no_enclose_ints-\"-no-enclosing]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_entry[not_inplace-1990-no_reuse-no_enclose_ints-\"-None]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_string[inplace-reuse-enclose_ints-{-{]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_string[inplace-reuse-enclose_ints-{-\"]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_string[inplace-reuse-enclose_ints-{-None]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_string[inplace-reuse-enclose_ints-\"-{]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_string[inplace-reuse-enclose_ints-\"-\"]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_string[inplace-reuse-enclose_ints-\"-None]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_string[inplace-reuse-no_enclose_ints-{-{]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_string[inplace-reuse-no_enclose_ints-{-\"]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_string[inplace-reuse-no_enclose_ints-{-None]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_string[inplace-reuse-no_enclose_ints-\"-{]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_string[inplace-reuse-no_enclose_ints-\"-\"]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_string[inplace-reuse-no_enclose_ints-\"-None]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_string[inplace-no_reuse-enclose_ints-{-{]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_string[inplace-no_reuse-enclose_ints-{-\"]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_string[inplace-no_reuse-enclose_ints-{-None]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_string[inplace-no_reuse-enclose_ints-\"-{]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_string[inplace-no_reuse-enclose_ints-\"-\"]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_string[inplace-no_reuse-enclose_ints-\"-None]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_string[inplace-no_reuse-no_enclose_ints-{-{]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_string[inplace-no_reuse-no_enclose_ints-{-\"]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_string[inplace-no_reuse-no_enclose_ints-{-None]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_string[inplace-no_reuse-no_enclose_ints-\"-{]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_string[inplace-no_reuse-no_enclose_ints-\"-\"]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_string[inplace-no_reuse-no_enclose_ints-\"-None]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_string[not_inplace-reuse-enclose_ints-{-{]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_string[not_inplace-reuse-enclose_ints-{-\"]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_string[not_inplace-reuse-enclose_ints-{-None]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_string[not_inplace-reuse-enclose_ints-\"-{]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_string[not_inplace-reuse-enclose_ints-\"-\"]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_string[not_inplace-reuse-enclose_ints-\"-None]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_string[not_inplace-reuse-no_enclose_ints-{-{]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_string[not_inplace-reuse-no_enclose_ints-{-\"]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_string[not_inplace-reuse-no_enclose_ints-{-None]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_string[not_inplace-reuse-no_enclose_ints-\"-{]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_string[not_inplace-reuse-no_enclose_ints-\"-\"]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_string[not_inplace-reuse-no_enclose_ints-\"-None]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_string[not_inplace-no_reuse-enclose_ints-{-{]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_string[not_inplace-no_reuse-enclose_ints-{-\"]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_string[not_inplace-no_reuse-enclose_ints-{-None]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_string[not_inplace-no_reuse-enclose_ints-\"-{]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_string[not_inplace-no_reuse-enclose_ints-\"-\"]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_string[not_inplace-no_reuse-enclose_ints-\"-None]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_string[not_inplace-no_reuse-no_enclose_ints-{-{]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_string[not_inplace-no_reuse-no_enclose_ints-{-\"]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_string[not_inplace-no_reuse-no_enclose_ints-{-None]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_string[not_inplace-no_reuse-no_enclose_ints-\"-{]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_string[not_inplace-no_reuse-no_enclose_ints-\"-\"]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_addition_of_enclosing_on_string[not_inplace-no_reuse-no_enclose_ints-\"-None]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_no_addition_block_types[inplace-{-enclose_int-reuse-preamble]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_no_addition_block_types[inplace-{-enclose_int-reuse-implicit_comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_no_addition_block_types[inplace-{-enclose_int-reuse-explicit_comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_no_addition_block_types[inplace-{-enclose_int-no_reuse-preamble]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_no_addition_block_types[inplace-{-enclose_int-no_reuse-implicit_comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_no_addition_block_types[inplace-{-enclose_int-no_reuse-explicit_comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_no_addition_block_types[inplace-{-no_enclose_int-reuse-preamble]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_no_addition_block_types[inplace-{-no_enclose_int-reuse-implicit_comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_no_addition_block_types[inplace-{-no_enclose_int-reuse-explicit_comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_no_addition_block_types[inplace-{-no_enclose_int-no_reuse-preamble]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_no_addition_block_types[inplace-{-no_enclose_int-no_reuse-implicit_comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_no_addition_block_types[inplace-{-no_enclose_int-no_reuse-explicit_comment]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_no_addition_block_types[inplace-\"-enclose_int-reuse-preamble]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_no_addition_block_types[inplace-\"-enclose_int-reuse-implicit_comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_no_addition_block_types[inplace-\"-enclose_int-reuse-explicit_comment]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_no_addition_block_types[inplace-\"-enclose_int-no_reuse-preamble]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_no_addition_block_types[inplace-\"-enclose_int-no_reuse-implicit_comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_no_addition_block_types[inplace-\"-enclose_int-no_reuse-explicit_comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_no_addition_block_types[inplace-\"-no_enclose_int-reuse-preamble]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_no_addition_block_types[inplace-\"-no_enclose_int-reuse-implicit_comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_no_addition_block_types[inplace-\"-no_enclose_int-reuse-explicit_comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_no_addition_block_types[inplace-\"-no_enclose_int-no_reuse-preamble]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_no_addition_block_types[inplace-\"-no_enclose_int-no_reuse-implicit_comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_no_addition_block_types[inplace-\"-no_enclose_int-no_reuse-explicit_comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_no_addition_block_types[not_inplace-{-enclose_int-reuse-preamble]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_no_addition_block_types[not_inplace-{-enclose_int-reuse-implicit_comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_no_addition_block_types[not_inplace-{-enclose_int-reuse-explicit_comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_no_addition_block_types[not_inplace-{-enclose_int-no_reuse-preamble]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_no_addition_block_types[not_inplace-{-enclose_int-no_reuse-implicit_comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_no_addition_block_types[not_inplace-{-enclose_int-no_reuse-explicit_comment]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_no_addition_block_types[not_inplace-{-no_enclose_int-reuse-preamble]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_no_addition_block_types[not_inplace-{-no_enclose_int-reuse-implicit_comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_no_addition_block_types[not_inplace-{-no_enclose_int-reuse-explicit_comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_no_addition_block_types[not_inplace-{-no_enclose_int-no_reuse-preamble]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_no_addition_block_types[not_inplace-{-no_enclose_int-no_reuse-implicit_comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_no_addition_block_types[not_inplace-{-no_enclose_int-no_reuse-explicit_comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_no_addition_block_types[not_inplace-\"-enclose_int-reuse-preamble]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_no_addition_block_types[not_inplace-\"-enclose_int-reuse-implicit_comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_no_addition_block_types[not_inplace-\"-enclose_int-reuse-explicit_comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_no_addition_block_types[not_inplace-\"-enclose_int-no_reuse-preamble]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_no_addition_block_types[not_inplace-\"-enclose_int-no_reuse-implicit_comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_no_addition_block_types[not_inplace-\"-enclose_int-no_reuse-explicit_comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_no_addition_block_types[not_inplace-\"-no_enclose_int-reuse-preamble]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_no_addition_block_types[not_inplace-\"-no_enclose_int-reuse-implicit_comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_no_addition_block_types[not_inplace-\"-no_enclose_int-reuse-explicit_comment]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_no_addition_block_types[not_inplace-\"-no_enclose_int-no_reuse-preamble]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_no_addition_block_types[not_inplace-\"-no_enclose_int-no_reuse-implicit_comment]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_enclosing",
            "name": "test_no_addition_block_types[not_inplace-\"-no_enclose_int-no_reuse-explicit_comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_interpolate",
            "name": "test_string_interpolation_middleware_interpolates_string",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_interpolate",
            "name": "test_warning_is_raised_if_enclosings_are_removed",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_latex_encoding",
            "name": "test_latex_special_chars_decoding[\\\\textbf]",
            "time": 0.01,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_latex_encoding",
            "name": "test_latex_special_chars_decoding[\\\\o{}]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_latex_encoding",
            "name": "test_latex_special_chars_decoding[Keep math mode]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_latex_encoding",
            "name": "test_latex_special_chars_decoding[Keep \\\\$]",
            "time": 0.022,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_latex_encoding",
            "name": "test_latex_special_chars_decoding[Remove braces-wrapping0]",
            "time": 0.003,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_latex_encoding",
            "name": "test_latex_special_chars_decoding[Remove \\\\url{...}]",
            "time": 0.003,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_latex_encoding",
            "name": "test_latex_special_chars_decoding[Keep special chars in url]",
            "time": 0.003,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_latex_encoding",
            "name": "test_latex_special_chars_decoding[Remove braces-wrapping1]",
            "time": 0.003,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_latex_encoding",
            "name": "test_latex_special_chars_encoding[\\\\o{}]",
            "time": 0.003,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_latex_encoding",
            "name": "test_latex_special_chars_encoding[Keep math mode]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_latex_encoding",
            "name": "test_latex_special_chars_encoding[Escape $]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_latex_encoding",
            "name": "test_latex_special_chars_encoding[\\\\url{...} for https]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_latex_encoding",
            "name": "test_latex_special_chars_encoding[\\\\url{...} for http]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_latex_encoding",
            "name": "test_latex_special_chars_encoding[\\\\url{...} for www.]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_latex_encoding",
            "name": "test_latex_special_chars_encoding[\\\\url{...} for https://www.]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_latex_encoding",
            "name": "test_inplace[LatexEncodingMiddleware-True]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_latex_encoding",
            "name": "test_inplace[LatexEncodingMiddleware-False]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_latex_encoding",
            "name": "test_inplace[LatexDecodingMiddleware-True]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_latex_encoding",
            "name": "test_inplace[LatexDecodingMiddleware-False]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_month",
            "name": "test_long_string_months",
            "time": 0.004,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_month",
            "name": "test_short_string_months",
            "time": 0.003,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_month",
            "name": "test_int_months",
            "time": 0.003,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_coauthors_consistent_with_bibtex[Simple Name-expected0]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_coauthors_consistent_with_bibtex[First Name and Last Name-expected1]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_coauthors_consistent_with_bibtex[First Name AND Last Name-expected2]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_coauthors_consistent_with_bibtex[First Name And Last Name-expected3]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_coauthors_consistent_with_bibtex[First Name aNd Last Name-expected4]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_coauthors_consistent_with_bibtex[First Name    and Last Name-expected5]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_coauthors_consistent_with_bibtex[First Name and   Last Name-expected6]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_coauthors_consistent_with_bibtex[First Name    and    Last Name-expected7]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_coauthors_consistent_with_bibtex[{Simon and Schuster}-expected8]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_coauthors_consistent_with_bibtex[Something \\\\and Other-expected9]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_coauthors_consistent_with_bibtex[Name One and Two, Name and Name Three-expected10]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_coauthors_consistent_with_bibtex[P. M. Sutherland and Smith, J.-expected11]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_coauthors_consistent_with_bibtex[P. M. Sutherland and\\tSmith, J.-expected12]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_coauthors_consistent_with_bibtex[P. M. Sutherland and\\nSmith, J.-expected13]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_coauthors_consistent_with_bibtex[P. M. Sutherland AND\\tSmith, J.-expected14]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_coauthors_consistent_with_bibtex[P. M. Sutherland AND\\nSmith, J.-expected15]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_coauthors_consistent_with_bibtex[P. M. Sutherland And\\tSmith, J.-expected16]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_coauthors_consistent_with_bibtex[P. M. Sutherland And\\nSmith, J.-expected17]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_coauthors_consistent_with_bibtex[P. M. Sutherland aNd\\tSmith, J.-expected18]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_coauthors_consistent_with_bibtex[P. M. Sutherland aNd\\nSmith, J.-expected19]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_coauthors_consistent_with_bibtex[Fake Name an{d brace in an}d and Somebody Else-expected20]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_coauthors_consistent_with_bibtex[and John Smith-expected21]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_coauthors_consistent_with_bibtex[ and John Smith-expected22]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_coauthors_consistent_with_bibtex[and John Smith and Phil Holden-expected23]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_coauthors_consistent_with_bibtex[ and John Smith and Phil Holden-expected24]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_coauthors_consistent_with_bibtex[\\tand John Smith and Phil Holden-expected25]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_coauthors_consistent_with_bibtex[\\nand John Smith and Phil Holden-expected26]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_coauthors_consistent_with_bibtex[John Smith and Phil Holden and-expected27]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_coauthors_consistent_with_bibtex[John Smith and Phil Holden and -expected28]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_coauthors_consistent_with_bibtex[John Smith and Phil Holden and\\n-expected29]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_coauthors_consistent_with_bibtex[John Smith and Phil Holden and\\t-expected30]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_coauthors_consistent_with_bibtex[Harry Fellowes and D. Drumpf-expected31]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_coauthors_consistent_with_bibtex[Harry Fellowes~and D. Drumpf-expected32]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_coauthors_consistent_with_bibtex[Harry Fellowes~and~D. Drumpf-expected33]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_coauthors_consistent_with_bibtex[Harry Fellowes and~D. Drumpf-expected34]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_coauthors_consistent_with_bibtex[      -expected35]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_coauthors_consistent_with_bibtex[\\t\\n \\t-expected36]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_coauthors_consistent_with_bibtex[~-expected37]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_coauthors_consistent_with_bibtex[~~~ and J. Smith-expected38]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_name_splitting_whitespace_inputs[empty string]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_name_splitting_whitespace_inputs[single space]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_name_splitting_whitespace_inputs[multiple spaces]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_name_splitting_whitespace_inputs[diverse whitespace characters]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_name_splitting_strict_mode[BB,-Trailing comma at end of name]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_name_splitting_strict_mode[BB, -Trailing comma at end of name]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_name_splitting_strict_mode[BB, ~\\t-Trailing comma at end of name]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_name_splitting_strict_mode[, ~\\t-Trailing comma at end of name]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_name_splitting_strict_mode[AA, BB, CC, DD-Too many commas]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_name_splitting_strict_mode[AA {BB CC-Unterminated opening brace]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_name_splitting_strict_mode[AA {{{BB CC-Unterminated opening brace]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_name_splitting_strict_mode[AA {{{BB} CC}-Unterminated opening brace]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_name_splitting_strict_mode[AA BB CC}-Unmatched closing brace]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_name_splitting_strict_mode[AA BB CC}}}-Unmatched closing brace]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_name_splitting_strict_mode[{AA {BB CC}}}-Unmatched closing brace]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_name_splitting_no_strict_mode[trailing comma]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_name_splitting_no_strict_mode[trailing comma and space]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_name_splitting_no_strict_mode[trailing comma and tab]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_name_splitting_no_strict_mode[empty with trailing comma and tab]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_name_splitting_no_strict_mode[too many commas]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_name_splitting_no_strict_mode[unterminated opening brace 1]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_name_splitting_no_strict_mode[unterminated opening brace 2]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_name_splitting_no_strict_mode[unterminated opening brace 3]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_name_splitting_no_strict_mode[unmatched closing brace 1]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_name_splitting_no_strict_mode[unmatched closing brace 2]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_name_splitting_no_strict_mode[unmatched closing brace 3]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_name_splitting_commas_at_higher_brace_level[strict]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_name_splitting_commas_at_higher_brace_level[non-strict]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[strict-Per Brinch Hansen-expected_as_dict0]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[strict-Brinch Hansen, Per-expected_as_dict1]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[strict-Brinch Hansen,, Per-expected_as_dict2]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[strict-Charles Louis Xavier Joseph de la Vall{\\\\'e}e Poussin-expected_as_dict3]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[strict-D[onald] E. Knuth-expected_as_dict4]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[strict-A. {Delgado de Molina}-expected_as_dict5]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[strict-M. Vign{\\\\'e}-expected_as_dict6]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[strict-AA BB-expected_as_dict7]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[strict-AA-expected_as_dict8]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[strict-AA bb-expected_as_dict9]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[strict-aa-expected_as_dict10]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[strict-AA bb CC-expected_as_dict11]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[strict-AA bb CC dd EE-expected_as_dict12]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[strict-AA 1B cc dd-expected_as_dict13]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[strict-AA 1b cc dd-expected_as_dict14]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[strict-AA {b}B cc dd-expected_as_dict15]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[strict-AA {b}b cc dd-expected_as_dict16]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[strict-AA {B}b cc dd-expected_as_dict17]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[strict-AA {B}B cc dd-expected_as_dict18]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[strict-AA \\\\BB{b} cc dd-expected_as_dict19]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[strict-AA \\\\bb{b} cc dd-expected_as_dict20]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[strict-AA {bb} cc DD-expected_as_dict21]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[strict-AA bb {cc} DD-expected_as_dict22]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[strict-AA {bb} CC-expected_as_dict23]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[strict-bb CC, AA-expected_as_dict24]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[strict-bb CC, aa-expected_as_dict25]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[strict-bb CC dd EE, AA-expected_as_dict26]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[strict-bb, AA-expected_as_dict27]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[strict-bb CC,XX, AA-expected_as_dict28]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[strict-bb CC,xx, AA-expected_as_dict29]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[strict-BB,, AA-expected_as_dict30]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[strict-Paul \\\\'Emile Victor-expected_as_dict31]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[strict-Paul {\\\\'E}mile Victor-expected_as_dict32]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[strict-Paul \\\\'emile Victor-expected_as_dict33]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[strict-Paul {\\\\'e}mile Victor-expected_as_dict34]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[strict-Victor, Paul \\\\'Emile-expected_as_dict35]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[strict-Victor, Paul {\\\\'E}mile-expected_as_dict36]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[strict-Victor, Paul \\\\'emile-expected_as_dict37]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[strict-Victor, Paul {\\\\'e}mile-expected_as_dict38]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[strict-Dominique Galouzeau de Villepin-expected_as_dict39]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[strict-Dominique {G}alouzeau de Villepin-expected_as_dict40]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[strict-Galouzeau de Villepin, Dominique-expected_as_dict41]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[strict-A. E.                   Siegman-expected_as_dict42]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[strict-A. G. W. Cameron-expected_as_dict43]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[strict-A. Hoenig-expected_as_dict44]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[strict-A. J. Van Haagen-expected_as_dict45]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[strict-A. S. Berdnikov-expected_as_dict46]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[strict-A. Trevorrow-expected_as_dict47]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[strict-Adam H. Lewenberg-expected_as_dict48]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[strict-Addison-Wesley Publishing Company-expected_as_dict49]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[strict-Advogato (Raph Levien)-expected_as_dict50]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[strict-Andrea de Leeuw van Weenen-expected_as_dict51]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[strict-Andreas Geyer-Schulz-expected_as_dict52]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[strict-Andr{\\\\'e} Heck-expected_as_dict53]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[strict-Anne Br{\\\\\"u}ggemann-Klein-expected_as_dict54]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[strict-Anonymous-expected_as_dict55]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[strict-B. Beeton-expected_as_dict56]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[strict-B. Hamilton Kelly-expected_as_dict57]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[strict-B. V. Venkata Krishna Sastry-expected_as_dict58]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[strict-Benedict L{\\\\o}fstedt-expected_as_dict59]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[strict-Bogus{\\\\l}aw Jackowski-expected_as_dict60]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[strict-Christina A. L.\\\\ Thiele-expected_as_dict61]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[strict-D. Men'shikov-expected_as_dict62]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[strict-Darko \\\\v{Z}ubrini{\\\\'c}-expected_as_dict63]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[strict-Dunja Mladeni{\\\\'c}-expected_as_dict64]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[strict-Edwin V. {Bell, II}-expected_as_dict65]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[strict-Frank G. {Bennett, Jr.}-expected_as_dict66]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[strict-Fr{\\\\'e}d{\\\\'e}ric Boulanger-expected_as_dict67]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[strict-Ford, Jr., Henry-expected_as_dict68]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[strict-mr Ford, Jr., Henry-expected_as_dict69]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[strict-Fukui Rei-expected_as_dict70]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[strict-G. Gr{\\\\\"a}tzer-expected_as_dict71]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[strict-George Gr{\\\\\"a}tzer-expected_as_dict72]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[strict-Georgia K. M. Tobin-expected_as_dict73]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[strict-Gilbert van den Dobbelsteen-expected_as_dict74]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[strict-Gy{\\\\\"o}ngyi Bujdos{\\\\'o}-expected_as_dict75]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[strict-Helmut J{\\\\\"u}rgensen-expected_as_dict76]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[strict-Herbert Vo{\\\\ss}-expected_as_dict77]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[strict-H{\\\\'a}n Th{\\\\^e}\\\\llap{\\\\raise 0.5ex\\\\hbox{\\\\'{\\\\relax}}} Th{\\\\'a}nh-expected_as_dict78]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[strict-H{\\\\`a}n Th\\\\^e\\\\llap{\\\\raise0.5ex\\\\hbox{\\\\'{\\\\relax}}} Th{\\\\`a}nh-expected_as_dict79]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[strict-J. Vesel{\\\\'y}-expected_as_dict80]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[strict-Javier Rodr\\\\'{\\\\i}guez Laguna-expected_as_dict81]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[strict-Ji\\\\v{r}\\\\'{\\\\i} Vesel{\\\\'y}-expected_as_dict82]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[strict-Ji\\\\v{r}\\\\'{\\\\i} Zlatu{\\\\v{s}}ka-expected_as_dict83]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[strict-Ji\\\\v{r}{\\\\'\\\\i} Vesel{\\\\'y}-expected_as_dict84]",
            "time": 0.01,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[strict-Ji\\\\v{r}{\\\\'{\\\\i}}Zlatu{\\\\v{s}}ka-expected_as_dict85]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[strict-Jim Hef{}feron-expected_as_dict86]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[strict-J{\\\\\"o}rg Knappen-expected_as_dict87]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[strict-J{\\\\\"o}rgen L. Pind-expected_as_dict88]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[strict-J{\\\\'e}r\\\\^ome Laurens-expected_as_dict89]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[strict-J{{\\\\\"o}}rg Knappen-expected_as_dict90]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[strict-K. Anil Kumar-expected_as_dict91]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[strict-Karel Hor{\\\\'a}k-expected_as_dict92]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[strict-Karel P\\\\'{\\\\i}{\\\\v{s}}ka-expected_as_dict93]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[strict-Karel P{\\\\'\\\\i}{\\\\v{s}}ka-expected_as_dict94]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[strict-Karel Skoup\\\\'{y}-expected_as_dict95]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[strict-Karel Skoup{\\\\'y}-expected_as_dict96]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[strict-Kent McPherson-expected_as_dict97]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[strict-Klaus H{\\\\\"o}ppner-expected_as_dict98]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[strict-Lars Hellstr{\\\\\"o}m-expected_as_dict99]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[strict-Laura Elizabeth Jackson-expected_as_dict100]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[strict-M. D{\\\\'{\\\\i}}az-expected_as_dict101]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[strict-M/iche/al /O Searc/oid-expected_as_dict102]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[strict-Marek Ry{\\\\'c}ko-expected_as_dict103]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[strict-Marina Yu. Nikulina-expected_as_dict104]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[strict-Max D{\\\\'{\\\\i}}az-expected_as_dict105]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[strict-Merry Obrecht Sawdey-expected_as_dict106]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[strict-Miroslava Mis{\\\\'a}kov{\\\\'a}-expected_as_dict107]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[strict-N. A. F. M. Poppelier-expected_as_dict108]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[strict-Nico A. F. M. Poppelier-expected_as_dict109]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[strict-Onofrio de Bari-expected_as_dict110]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[strict-Pablo Rosell-Gonz{\\\\'a}lez-expected_as_dict111]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[strict-Paco La                  Bruna-expected_as_dict112]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[strict-Paul                  Franchi-Zannettacci-expected_as_dict113]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[strict-Pavel \\\\v{S}eve\\\\v{c}ek-expected_as_dict114]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[strict-Petr Ol{\\\\v{s}}ak-expected_as_dict115]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[strict-Petr Ol{\\\\v{s}}{\\\\'a}k-expected_as_dict116]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[strict-Primo\\\\v{z} Peterlin-expected_as_dict117]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[strict-Prof. Alban Grimm-expected_as_dict118]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[strict-P{\\\\'e}ter Husz{\\\\'a}r-expected_as_dict119]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[strict-P{\\\\'e}ter Szab{\\\\'o}-expected_as_dict120]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[strict-Rafa{\\\\l}\\\\.Zbikowski-expected_as_dict121]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[strict-Rainer Sch{\\\\\"o}pf-expected_as_dict122]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[strict-T. L. (Frank) Pappas-expected_as_dict123]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[strict-TUG 2004 conference-expected_as_dict124]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[strict-TUG {\\\\sltt DVI} Driver Standards Committee-expected_as_dict125]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[strict-TUG {\\\\sltt xDVIx} Driver Standards Committee-expected_as_dict126]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[strict-University of M{\\\\\"u}nster-expected_as_dict127]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[strict-Walter van der Laan-expected_as_dict128]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[strict-Wendy G.                  McKay-expected_as_dict129]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[strict-Wendy McKay-expected_as_dict130]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[strict-W{\\\\l}odek Bzyl-expected_as_dict131]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[strict-\\\\LaTeX Project Team-expected_as_dict132]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[strict-\\\\rlap{Lutz Birkhahn}-expected_as_dict133]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[strict-{Jim Hef{}feron}-expected_as_dict134]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[strict-{Kristoffer H\\\\o{}gsbro Rose}-expected_as_dict135]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[strict-{TUG} {Working} {Group} on a {\\\\TeX} {Directory} {Structure}-expected_as_dict136]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[strict-{The \\\\TUB{} Team}-expected_as_dict137]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[strict-{\\\\LaTeX} project team-expected_as_dict138]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[strict-{\\\\NTG{} \\\\TeX{} future working group}-expected_as_dict139]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[strict-{{\\\\LaTeX\\\\,3} Project Team}-expected_as_dict140]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[strict-Johansen Kyle, Derik Mamania M.-expected_as_dict141]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[strict-Johannes Adam Ferdinand Alois Josef Maria Marko d'Aviano Pius von und zu Liechtenstein-expected_as_dict142]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[strict-Brand\\\\~{a}o, F-expected_as_dict143]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[non-strict-Per Brinch Hansen-expected_as_dict0]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[non-strict-Brinch Hansen, Per-expected_as_dict1]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[non-strict-Brinch Hansen,, Per-expected_as_dict2]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[non-strict-Charles Louis Xavier Joseph de la Vall{\\\\'e}e Poussin-expected_as_dict3]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[non-strict-D[onald] E. Knuth-expected_as_dict4]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[non-strict-A. {Delgado de Molina}-expected_as_dict5]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[non-strict-M. Vign{\\\\'e}-expected_as_dict6]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[non-strict-AA BB-expected_as_dict7]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[non-strict-AA-expected_as_dict8]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[non-strict-AA bb-expected_as_dict9]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[non-strict-aa-expected_as_dict10]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[non-strict-AA bb CC-expected_as_dict11]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[non-strict-AA bb CC dd EE-expected_as_dict12]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[non-strict-AA 1B cc dd-expected_as_dict13]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[non-strict-AA 1b cc dd-expected_as_dict14]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[non-strict-AA {b}B cc dd-expected_as_dict15]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[non-strict-AA {b}b cc dd-expected_as_dict16]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[non-strict-AA {B}b cc dd-expected_as_dict17]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[non-strict-AA {B}B cc dd-expected_as_dict18]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[non-strict-AA \\\\BB{b} cc dd-expected_as_dict19]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[non-strict-AA \\\\bb{b} cc dd-expected_as_dict20]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[non-strict-AA {bb} cc DD-expected_as_dict21]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[non-strict-AA bb {cc} DD-expected_as_dict22]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[non-strict-AA {bb} CC-expected_as_dict23]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[non-strict-bb CC, AA-expected_as_dict24]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[non-strict-bb CC, aa-expected_as_dict25]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[non-strict-bb CC dd EE, AA-expected_as_dict26]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[non-strict-bb, AA-expected_as_dict27]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[non-strict-bb CC,XX, AA-expected_as_dict28]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[non-strict-bb CC,xx, AA-expected_as_dict29]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[non-strict-BB,, AA-expected_as_dict30]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[non-strict-Paul \\\\'Emile Victor-expected_as_dict31]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[non-strict-Paul {\\\\'E}mile Victor-expected_as_dict32]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[non-strict-Paul \\\\'emile Victor-expected_as_dict33]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[non-strict-Paul {\\\\'e}mile Victor-expected_as_dict34]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[non-strict-Victor, Paul \\\\'Emile-expected_as_dict35]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[non-strict-Victor, Paul {\\\\'E}mile-expected_as_dict36]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[non-strict-Victor, Paul \\\\'emile-expected_as_dict37]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[non-strict-Victor, Paul {\\\\'e}mile-expected_as_dict38]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[non-strict-Dominique Galouzeau de Villepin-expected_as_dict39]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[non-strict-Dominique {G}alouzeau de Villepin-expected_as_dict40]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[non-strict-Galouzeau de Villepin, Dominique-expected_as_dict41]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[non-strict-A. E.                   Siegman-expected_as_dict42]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[non-strict-A. G. W. Cameron-expected_as_dict43]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[non-strict-A. Hoenig-expected_as_dict44]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[non-strict-A. J. Van Haagen-expected_as_dict45]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[non-strict-A. S. Berdnikov-expected_as_dict46]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[non-strict-A. Trevorrow-expected_as_dict47]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[non-strict-Adam H. Lewenberg-expected_as_dict48]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[non-strict-Addison-Wesley Publishing Company-expected_as_dict49]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[non-strict-Advogato (Raph Levien)-expected_as_dict50]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[non-strict-Andrea de Leeuw van Weenen-expected_as_dict51]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[non-strict-Andreas Geyer-Schulz-expected_as_dict52]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[non-strict-Andr{\\\\'e} Heck-expected_as_dict53]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[non-strict-Anne Br{\\\\\"u}ggemann-Klein-expected_as_dict54]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[non-strict-Anonymous-expected_as_dict55]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[non-strict-B. Beeton-expected_as_dict56]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[non-strict-B. Hamilton Kelly-expected_as_dict57]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[non-strict-B. V. Venkata Krishna Sastry-expected_as_dict58]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[non-strict-Benedict L{\\\\o}fstedt-expected_as_dict59]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[non-strict-Bogus{\\\\l}aw Jackowski-expected_as_dict60]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[non-strict-Christina A. L.\\\\ Thiele-expected_as_dict61]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[non-strict-D. Men'shikov-expected_as_dict62]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[non-strict-Darko \\\\v{Z}ubrini{\\\\'c}-expected_as_dict63]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[non-strict-Dunja Mladeni{\\\\'c}-expected_as_dict64]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[non-strict-Edwin V. {Bell, II}-expected_as_dict65]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[non-strict-Frank G. {Bennett, Jr.}-expected_as_dict66]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[non-strict-Fr{\\\\'e}d{\\\\'e}ric Boulanger-expected_as_dict67]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[non-strict-Ford, Jr., Henry-expected_as_dict68]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[non-strict-mr Ford, Jr., Henry-expected_as_dict69]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[non-strict-Fukui Rei-expected_as_dict70]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[non-strict-G. Gr{\\\\\"a}tzer-expected_as_dict71]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[non-strict-George Gr{\\\\\"a}tzer-expected_as_dict72]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[non-strict-Georgia K. M. Tobin-expected_as_dict73]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[non-strict-Gilbert van den Dobbelsteen-expected_as_dict74]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[non-strict-Gy{\\\\\"o}ngyi Bujdos{\\\\'o}-expected_as_dict75]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[non-strict-Helmut J{\\\\\"u}rgensen-expected_as_dict76]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[non-strict-Herbert Vo{\\\\ss}-expected_as_dict77]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[non-strict-H{\\\\'a}n Th{\\\\^e}\\\\llap{\\\\raise 0.5ex\\\\hbox{\\\\'{\\\\relax}}} Th{\\\\'a}nh-expected_as_dict78]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[non-strict-H{\\\\`a}n Th\\\\^e\\\\llap{\\\\raise0.5ex\\\\hbox{\\\\'{\\\\relax}}} Th{\\\\`a}nh-expected_as_dict79]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[non-strict-J. Vesel{\\\\'y}-expected_as_dict80]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[non-strict-Javier Rodr\\\\'{\\\\i}guez Laguna-expected_as_dict81]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[non-strict-Ji\\\\v{r}\\\\'{\\\\i} Vesel{\\\\'y}-expected_as_dict82]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[non-strict-Ji\\\\v{r}\\\\'{\\\\i} Zlatu{\\\\v{s}}ka-expected_as_dict83]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[non-strict-Ji\\\\v{r}{\\\\'\\\\i} Vesel{\\\\'y}-expected_as_dict84]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[non-strict-Ji\\\\v{r}{\\\\'{\\\\i}}Zlatu{\\\\v{s}}ka-expected_as_dict85]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[non-strict-Jim Hef{}feron-expected_as_dict86]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[non-strict-J{\\\\\"o}rg Knappen-expected_as_dict87]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[non-strict-J{\\\\\"o}rgen L. Pind-expected_as_dict88]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[non-strict-J{\\\\'e}r\\\\^ome Laurens-expected_as_dict89]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[non-strict-J{{\\\\\"o}}rg Knappen-expected_as_dict90]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[non-strict-K. Anil Kumar-expected_as_dict91]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[non-strict-Karel Hor{\\\\'a}k-expected_as_dict92]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[non-strict-Karel P\\\\'{\\\\i}{\\\\v{s}}ka-expected_as_dict93]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[non-strict-Karel P{\\\\'\\\\i}{\\\\v{s}}ka-expected_as_dict94]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[non-strict-Karel Skoup\\\\'{y}-expected_as_dict95]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[non-strict-Karel Skoup{\\\\'y}-expected_as_dict96]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[non-strict-Kent McPherson-expected_as_dict97]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[non-strict-Klaus H{\\\\\"o}ppner-expected_as_dict98]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[non-strict-Lars Hellstr{\\\\\"o}m-expected_as_dict99]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[non-strict-Laura Elizabeth Jackson-expected_as_dict100]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[non-strict-M. D{\\\\'{\\\\i}}az-expected_as_dict101]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[non-strict-M/iche/al /O Searc/oid-expected_as_dict102]",
            "time": 0.02,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[non-strict-Marek Ry{\\\\'c}ko-expected_as_dict103]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[non-strict-Marina Yu. Nikulina-expected_as_dict104]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[non-strict-Max D{\\\\'{\\\\i}}az-expected_as_dict105]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[non-strict-Merry Obrecht Sawdey-expected_as_dict106]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[non-strict-Miroslava Mis{\\\\'a}kov{\\\\'a}-expected_as_dict107]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[non-strict-N. A. F. M. Poppelier-expected_as_dict108]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[non-strict-Nico A. F. M. Poppelier-expected_as_dict109]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[non-strict-Onofrio de Bari-expected_as_dict110]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[non-strict-Pablo Rosell-Gonz{\\\\'a}lez-expected_as_dict111]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[non-strict-Paco La                  Bruna-expected_as_dict112]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[non-strict-Paul                  Franchi-Zannettacci-expected_as_dict113]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[non-strict-Pavel \\\\v{S}eve\\\\v{c}ek-expected_as_dict114]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[non-strict-Petr Ol{\\\\v{s}}ak-expected_as_dict115]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[non-strict-Petr Ol{\\\\v{s}}{\\\\'a}k-expected_as_dict116]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[non-strict-Primo\\\\v{z} Peterlin-expected_as_dict117]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[non-strict-Prof. Alban Grimm-expected_as_dict118]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[non-strict-P{\\\\'e}ter Husz{\\\\'a}r-expected_as_dict119]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[non-strict-P{\\\\'e}ter Szab{\\\\'o}-expected_as_dict120]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[non-strict-Rafa{\\\\l}\\\\.Zbikowski-expected_as_dict121]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[non-strict-Rainer Sch{\\\\\"o}pf-expected_as_dict122]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[non-strict-T. L. (Frank) Pappas-expected_as_dict123]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[non-strict-TUG 2004 conference-expected_as_dict124]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[non-strict-TUG {\\\\sltt DVI} Driver Standards Committee-expected_as_dict125]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[non-strict-TUG {\\\\sltt xDVIx} Driver Standards Committee-expected_as_dict126]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[non-strict-University of M{\\\\\"u}nster-expected_as_dict127]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[non-strict-Walter van der Laan-expected_as_dict128]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[non-strict-Wendy G.                  McKay-expected_as_dict129]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[non-strict-Wendy McKay-expected_as_dict130]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[non-strict-W{\\\\l}odek Bzyl-expected_as_dict131]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[non-strict-\\\\LaTeX Project Team-expected_as_dict132]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[non-strict-\\\\rlap{Lutz Birkhahn}-expected_as_dict133]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[non-strict-{Jim Hef{}feron}-expected_as_dict134]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[non-strict-{Kristoffer H\\\\o{}gsbro Rose}-expected_as_dict135]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[non-strict-{TUG} {Working} {Group} on a {\\\\TeX} {Directory} {Structure}-expected_as_dict136]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[non-strict-{The \\\\TUB{} Team}-expected_as_dict137]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[non-strict-{\\\\LaTeX} project team-expected_as_dict138]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[non-strict-{\\\\NTG{} \\\\TeX{} future working group}-expected_as_dict139]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[non-strict-{{\\\\LaTeX\\\\,3} Project Team}-expected_as_dict140]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[non-strict-Johansen Kyle, Derik Mamania M.-expected_as_dict141]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[non-strict-Johannes Adam Ferdinand Alois Josef Maria Marko d'Aviano Pius von und zu Liechtenstein-expected_as_dict142]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_into_parts[non-strict-Brand\\\\~{a}o, F-expected_as_dict143]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_separate_co_names_middleware[inplace]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_separate_co_names_middleware[copy]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_merge_co_names_middleware[inplace]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_merge_co_names_middleware[copy]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_parts[inplace]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_parts[copy]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_merge_name_parts[inplace]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_merge_name_parts[copy]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_parts_exception[BB,-Trailing comma at end of name]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_parts_exception[BB, -Trailing comma at end of name]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_parts_exception[BB, ~\\t-Trailing comma at end of name]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_parts_exception[, ~\\t-Trailing comma at end of name]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_parts_exception[AA, BB, CC, DD-Too many commas]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_parts_exception[AA {BB CC-Unterminated opening brace]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_parts_exception[AA {{{BB CC-Unterminated opening brace]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_parts_exception[AA {{{BB} CC}-Unterminated opening brace]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_parts_exception[AA BB CC}-Unmatched closing brace]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_parts_exception[AA BB CC}}}-Unmatched closing brace]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_names",
            "name": "test_split_name_parts_exception[{AA {BB CC}}}-Unmatched closing brace]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_sorting_blocks",
            "name": "test_sorting_blocks_preserving_comments_default_type_order",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_sorting_blocks",
            "name": "test_sorting_blocks_preserving_comments_custom_type_order",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_sorting_blocks",
            "name": "test_sorting_blocks_no_comment_preserving_with_custom_order",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_sorting_entry_fields",
            "name": "test_sort_alphabetically[True]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_sorting_entry_fields",
            "name": "test_sort_alphabetically[False]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_sorting_entry_fields",
            "name": "test_sort_custom_order_case_insensitive[True]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_sorting_entry_fields",
            "name": "test_sort_custom_order_case_insensitive[False]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.middleware_tests.test_sorting_entry_fields",
            "name": "test_sort_order_custom_case_sensitive",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_basic",
            "name": "test_entry[expected0]",
            "time": 0.003,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_basic",
            "name": "test_entry[expected1]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_basic",
            "name": "test_strings[expected0]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_basic",
            "name": "test_strings[expected1]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_basic",
            "name": "test_preamble",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_basic",
            "name": "test_comments[expected0]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_basic",
            "name": "test_comments[expected1]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_basic",
            "name": "test_comments[expected2]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_basic",
            "name": "test_failed_block",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_basic",
            "name": "test_handles_duplicate_entries",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_basic",
            "name": "test_handles_duplicate_strings",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_entry",
            "name": "test_field_enclosings[year-2019-1]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_entry",
            "name": "test_field_enclosings[month-1-2]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_entry",
            "name": "test_field_enclosings[author-\"John Doe\"-3]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_entry",
            "name": "test_field_enclosings[journal-someJournalReference-4]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_entry",
            "name": "test_entry_type[@article-article]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_entry",
            "name": "test_entry_type[@ARTICLE-article]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_entry",
            "name": "test_entry_type[@Article-article]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_entry",
            "name": "test_entry_type[@book-book]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_entry",
            "name": "test_entry_type[@BOOK-book]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_entry",
            "name": "test_entry_type[@Book-book]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_entry",
            "name": "test_entry_type[@inbook-inbook]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_entry",
            "name": "test_entry_type[@INBOOK-inbook]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_entry",
            "name": "test_entry_type[@Inbook-inbook]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_entry",
            "name": "test_entry_type[@incollection-incollection]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_entry",
            "name": "test_entry_type[@INCOLLECTION-incollection]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_entry",
            "name": "test_entry_type[@Incollection-incollection]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_entry",
            "name": "test_entry_type[@inproceedings-inproceedings]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_entry",
            "name": "test_entry_type[@INPROCEEDINGS-inproceedings]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_entry",
            "name": "test_entry_type[@InprocEEdings-inproceedings]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_entry",
            "name": "test_field_value[double_quotes-John Doe]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_entry",
            "name": "test_field_value[double_quotes-\\xe0 {\\\\`a} \\\\`{a}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_entry",
            "name": "test_field_value[double_quotes-{\\\\`a} {\\\\`a} {\\\\`a}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_entry",
            "name": "test_field_value[double_quotes-Two Gedenk\\\\\"uberlieferung der Angelsachsen]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_entry",
            "name": "test_field_value[double_quotes-\\\\texttimes{}{\\\\texttimes}\\\\texttimes]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_entry",
            "name": "test_field_value[double_quotes-p\\\\^{a}t\\\\'{e}Title with \\\\{ a curly brace]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_entry",
            "name": "test_field_value[double_quotes-Title with \\\\} a curly brace]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_entry",
            "name": "test_field_value[double_quotes-Title with \\\\{ a curly brace and \\\\} a curly brace]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_entry",
            "name": "test_field_value[double_quotes-Title with \\\\{ a curly brace and \\\\} a curly brace and \\\\{ another curly brace]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_entry",
            "name": "test_field_value[double_quotes-Title with { UnEscaped Curly } Braces]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_entry",
            "name": "test_field_value[curly_braces-John Doe]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_entry",
            "name": "test_field_value[curly_braces-\\xe0 {\\\\`a} \\\\`{a}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_entry",
            "name": "test_field_value[curly_braces-{\\\\`a} {\\\\`a} {\\\\`a}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_entry",
            "name": "test_field_value[curly_braces-Two Gedenk\\\\\"uberlieferung der Angelsachsen]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_entry",
            "name": "test_field_value[curly_braces-\\\\texttimes{}{\\\\texttimes}\\\\texttimes]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_entry",
            "name": "test_field_value[curly_braces-p\\\\^{a}t\\\\'{e}Title with \\\\{ a curly brace]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_entry",
            "name": "test_field_value[curly_braces-Title with \\\\} a curly brace]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_entry",
            "name": "test_field_value[curly_braces-Title with \\\\{ a curly brace and \\\\} a curly brace]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_entry",
            "name": "test_field_value[curly_braces-Title with \\\\{ a curly brace and \\\\} a curly brace and \\\\{ another curly brace]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_entry",
            "name": "test_field_value[curly_braces-Title with { UnEscaped Curly } Braces]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_entry",
            "name": "test_trailing_comma[double_quotes]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_entry",
            "name": "test_trailing_comma[curly_braces]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_entry",
            "name": "test_trailing_comma[no enclosing]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_entry",
            "name": "test_multiple_identical_field_keys",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[John Doe-@article{test,\\n    author = \"John Doe\",\\n    title = \"Some title\",\\n}-@article{test,\\n    author = \"John Doe\",\\n    title = \"Some title\",\\n}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[John Doe-@article{test,\\n    author = \"John Doe\",\\n    title = \"Some title\",\\n}-@string{someString = \"some value\"}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[John Doe-@article{test,\\n    author = \"John Doe\",\\n    title = \"Some title\",\\n}-@string{someString = \"some value\"}\\n\\n% This is a comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[John Doe-@article{test,\\n    author = \"John Doe\",\\n    title = \"Some title\",\\n}-@preamble{some preamble}]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[John Doe-@article{test,\\n    author = \"John Doe\",\\n    title = \"Some title\",\\n}-\\n]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[John Doe-@article{test,\\n    author = \"John Doe\",\\n    title = \"Some title\",\\n}-% This is a comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[John Doe-@string{someString = \"some value\"}-@article{test,\\n    author = \"John Doe\",\\n    title = \"Some title\",\\n}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[John Doe-@string{someString = \"some value\"}-@string{someString = \"some value\"}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[John Doe-@string{someString = \"some value\"}-@string{someString = \"some value\"}\\n\\n% This is a comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[John Doe-@string{someString = \"some value\"}-@preamble{some preamble}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[John Doe-@string{someString = \"some value\"}-\\n]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[John Doe-@string{someString = \"some value\"}-% This is a comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[John Doe-@string{someString = \"some value\"}\\n\\n% This is a comment-@article{test,\\n    author = \"John Doe\",\\n    title = \"Some title\",\\n}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[John Doe-@string{someString = \"some value\"}\\n\\n% This is a comment-@string{someString = \"some value\"}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[John Doe-@string{someString = \"some value\"}\\n\\n% This is a comment-@string{someString = \"some value\"}\\n\\n% This is a comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[John Doe-@string{someString = \"some value\"}\\n\\n% This is a comment-@preamble{some preamble}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[John Doe-@string{someString = \"some value\"}\\n\\n% This is a comment-\\n]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[John Doe-@string{someString = \"some value\"}\\n\\n% This is a comment-% This is a comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[John Doe-@preamble{some preamble}-@article{test,\\n    author = \"John Doe\",\\n    title = \"Some title\",\\n}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[John Doe-@preamble{some preamble}-@string{someString = \"some value\"}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[John Doe-@preamble{some preamble}-@string{someString = \"some value\"}\\n\\n% This is a comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[John Doe-@preamble{some preamble}-@preamble{some preamble}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[John Doe-@preamble{some preamble}-\\n]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[John Doe-@preamble{some preamble}-% This is a comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[John Doe-\\n-@article{test,\\n    author = \"John Doe\",\\n    title = \"Some title\",\\n}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[John Doe-\\n-@string{someString = \"some value\"}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[John Doe-\\n-@string{someString = \"some value\"}\\n\\n% This is a comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[John Doe-\\n-@preamble{some preamble}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[John Doe-\\n-\\n]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[John Doe-\\n-% This is a comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[John Doe-% This is a comment-@article{test,\\n    author = \"John Doe\",\\n    title = \"Some title\",\\n}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[John Doe-% This is a comment-@string{someString = \"some value\"}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[John Doe-% This is a comment-@string{someString = \"some value\"}\\n\\n% This is a comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[John Doe-% This is a comment-@preamble{some preamble}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[John Doe-% This is a comment-\\n]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[John Doe-% This is a comment-% This is a comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[\\xe0 {\\\\`a} \\\\`{a}-@article{test,\\n    author = \"John Doe\",\\n    title = \"Some title\",\\n}-@article{test,\\n    author = \"John Doe\",\\n    title = \"Some title\",\\n}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[\\xe0 {\\\\`a} \\\\`{a}-@article{test,\\n    author = \"John Doe\",\\n    title = \"Some title\",\\n}-@string{someString = \"some value\"}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[\\xe0 {\\\\`a} \\\\`{a}-@article{test,\\n    author = \"John Doe\",\\n    title = \"Some title\",\\n}-@string{someString = \"some value\"}\\n\\n% This is a comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[\\xe0 {\\\\`a} \\\\`{a}-@article{test,\\n    author = \"John Doe\",\\n    title = \"Some title\",\\n}-@preamble{some preamble}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[\\xe0 {\\\\`a} \\\\`{a}-@article{test,\\n    author = \"John Doe\",\\n    title = \"Some title\",\\n}-\\n]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[\\xe0 {\\\\`a} \\\\`{a}-@article{test,\\n    author = \"John Doe\",\\n    title = \"Some title\",\\n}-% This is a comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[\\xe0 {\\\\`a} \\\\`{a}-@string{someString = \"some value\"}-@article{test,\\n    author = \"John Doe\",\\n    title = \"Some title\",\\n}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[\\xe0 {\\\\`a} \\\\`{a}-@string{someString = \"some value\"}-@string{someString = \"some value\"}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[\\xe0 {\\\\`a} \\\\`{a}-@string{someString = \"some value\"}-@string{someString = \"some value\"}\\n\\n% This is a comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[\\xe0 {\\\\`a} \\\\`{a}-@string{someString = \"some value\"}-@preamble{some preamble}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[\\xe0 {\\\\`a} \\\\`{a}-@string{someString = \"some value\"}-\\n]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[\\xe0 {\\\\`a} \\\\`{a}-@string{someString = \"some value\"}-% This is a comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[\\xe0 {\\\\`a} \\\\`{a}-@string{someString = \"some value\"}\\n\\n% This is a comment-@article{test,\\n    author = \"John Doe\",\\n    title = \"Some title\",\\n}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[\\xe0 {\\\\`a} \\\\`{a}-@string{someString = \"some value\"}\\n\\n% This is a comment-@string{someString = \"some value\"}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[\\xe0 {\\\\`a} \\\\`{a}-@string{someString = \"some value\"}\\n\\n% This is a comment-@string{someString = \"some value\"}\\n\\n% This is a comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[\\xe0 {\\\\`a} \\\\`{a}-@string{someString = \"some value\"}\\n\\n% This is a comment-@preamble{some preamble}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[\\xe0 {\\\\`a} \\\\`{a}-@string{someString = \"some value\"}\\n\\n% This is a comment-\\n]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[\\xe0 {\\\\`a} \\\\`{a}-@string{someString = \"some value\"}\\n\\n% This is a comment-% This is a comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[\\xe0 {\\\\`a} \\\\`{a}-@preamble{some preamble}-@article{test,\\n    author = \"John Doe\",\\n    title = \"Some title\",\\n}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[\\xe0 {\\\\`a} \\\\`{a}-@preamble{some preamble}-@string{someString = \"some value\"}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[\\xe0 {\\\\`a} \\\\`{a}-@preamble{some preamble}-@string{someString = \"some value\"}\\n\\n% This is a comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[\\xe0 {\\\\`a} \\\\`{a}-@preamble{some preamble}-@preamble{some preamble}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[\\xe0 {\\\\`a} \\\\`{a}-@preamble{some preamble}-\\n]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[\\xe0 {\\\\`a} \\\\`{a}-@preamble{some preamble}-% This is a comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[\\xe0 {\\\\`a} \\\\`{a}-\\n-@article{test,\\n    author = \"John Doe\",\\n    title = \"Some title\",\\n}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[\\xe0 {\\\\`a} \\\\`{a}-\\n-@string{someString = \"some value\"}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[\\xe0 {\\\\`a} \\\\`{a}-\\n-@string{someString = \"some value\"}\\n\\n% This is a comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[\\xe0 {\\\\`a} \\\\`{a}-\\n-@preamble{some preamble}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[\\xe0 {\\\\`a} \\\\`{a}-\\n-\\n]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[\\xe0 {\\\\`a} \\\\`{a}-\\n-% This is a comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[\\xe0 {\\\\`a} \\\\`{a}-% This is a comment-@article{test,\\n    author = \"John Doe\",\\n    title = \"Some title\",\\n}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[\\xe0 {\\\\`a} \\\\`{a}-% This is a comment-@string{someString = \"some value\"}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[\\xe0 {\\\\`a} \\\\`{a}-% This is a comment-@string{someString = \"some value\"}\\n\\n% This is a comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[\\xe0 {\\\\`a} \\\\`{a}-% This is a comment-@preamble{some preamble}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[\\xe0 {\\\\`a} \\\\`{a}-% This is a comment-\\n]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[\\xe0 {\\\\`a} \\\\`{a}-% This is a comment-% This is a comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[{\\\\`a} {\\\\`a} {\\\\`a}-@article{test,\\n    author = \"John Doe\",\\n    title = \"Some title\",\\n}-@article{test,\\n    author = \"John Doe\",\\n    title = \"Some title\",\\n}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[{\\\\`a} {\\\\`a} {\\\\`a}-@article{test,\\n    author = \"John Doe\",\\n    title = \"Some title\",\\n}-@string{someString = \"some value\"}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[{\\\\`a} {\\\\`a} {\\\\`a}-@article{test,\\n    author = \"John Doe\",\\n    title = \"Some title\",\\n}-@string{someString = \"some value\"}\\n\\n% This is a comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[{\\\\`a} {\\\\`a} {\\\\`a}-@article{test,\\n    author = \"John Doe\",\\n    title = \"Some title\",\\n}-@preamble{some preamble}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[{\\\\`a} {\\\\`a} {\\\\`a}-@article{test,\\n    author = \"John Doe\",\\n    title = \"Some title\",\\n}-\\n]",
            "time": 0.003,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[{\\\\`a} {\\\\`a} {\\\\`a}-@article{test,\\n    author = \"John Doe\",\\n    title = \"Some title\",\\n}-% This is a comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[{\\\\`a} {\\\\`a} {\\\\`a}-@string{someString = \"some value\"}-@article{test,\\n    author = \"John Doe\",\\n    title = \"Some title\",\\n}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[{\\\\`a} {\\\\`a} {\\\\`a}-@string{someString = \"some value\"}-@string{someString = \"some value\"}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[{\\\\`a} {\\\\`a} {\\\\`a}-@string{someString = \"some value\"}-@string{someString = \"some value\"}\\n\\n% This is a comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[{\\\\`a} {\\\\`a} {\\\\`a}-@string{someString = \"some value\"}-@preamble{some preamble}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[{\\\\`a} {\\\\`a} {\\\\`a}-@string{someString = \"some value\"}-\\n]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[{\\\\`a} {\\\\`a} {\\\\`a}-@string{someString = \"some value\"}-% This is a comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[{\\\\`a} {\\\\`a} {\\\\`a}-@string{someString = \"some value\"}\\n\\n% This is a comment-@article{test,\\n    author = \"John Doe\",\\n    title = \"Some title\",\\n}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[{\\\\`a} {\\\\`a} {\\\\`a}-@string{someString = \"some value\"}\\n\\n% This is a comment-@string{someString = \"some value\"}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[{\\\\`a} {\\\\`a} {\\\\`a}-@string{someString = \"some value\"}\\n\\n% This is a comment-@string{someString = \"some value\"}\\n\\n% This is a comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[{\\\\`a} {\\\\`a} {\\\\`a}-@string{someString = \"some value\"}\\n\\n% This is a comment-@preamble{some preamble}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[{\\\\`a} {\\\\`a} {\\\\`a}-@string{someString = \"some value\"}\\n\\n% This is a comment-\\n]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[{\\\\`a} {\\\\`a} {\\\\`a}-@string{someString = \"some value\"}\\n\\n% This is a comment-% This is a comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[{\\\\`a} {\\\\`a} {\\\\`a}-@preamble{some preamble}-@article{test,\\n    author = \"John Doe\",\\n    title = \"Some title\",\\n}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[{\\\\`a} {\\\\`a} {\\\\`a}-@preamble{some preamble}-@string{someString = \"some value\"}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[{\\\\`a} {\\\\`a} {\\\\`a}-@preamble{some preamble}-@string{someString = \"some value\"}\\n\\n% This is a comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[{\\\\`a} {\\\\`a} {\\\\`a}-@preamble{some preamble}-@preamble{some preamble}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[{\\\\`a} {\\\\`a} {\\\\`a}-@preamble{some preamble}-\\n]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[{\\\\`a} {\\\\`a} {\\\\`a}-@preamble{some preamble}-% This is a comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[{\\\\`a} {\\\\`a} {\\\\`a}-\\n-@article{test,\\n    author = \"John Doe\",\\n    title = \"Some title\",\\n}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[{\\\\`a} {\\\\`a} {\\\\`a}-\\n-@string{someString = \"some value\"}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[{\\\\`a} {\\\\`a} {\\\\`a}-\\n-@string{someString = \"some value\"}\\n\\n% This is a comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[{\\\\`a} {\\\\`a} {\\\\`a}-\\n-@preamble{some preamble}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[{\\\\`a} {\\\\`a} {\\\\`a}-\\n-\\n]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[{\\\\`a} {\\\\`a} {\\\\`a}-\\n-% This is a comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[{\\\\`a} {\\\\`a} {\\\\`a}-% This is a comment-@article{test,\\n    author = \"John Doe\",\\n    title = \"Some title\",\\n}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[{\\\\`a} {\\\\`a} {\\\\`a}-% This is a comment-@string{someString = \"some value\"}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[{\\\\`a} {\\\\`a} {\\\\`a}-% This is a comment-@string{someString = \"some value\"}\\n\\n% This is a comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[{\\\\`a} {\\\\`a} {\\\\`a}-% This is a comment-@preamble{some preamble}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[{\\\\`a} {\\\\`a} {\\\\`a}-% This is a comment-\\n]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[{\\\\`a} {\\\\`a} {\\\\`a}-% This is a comment-% This is a comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[Two Gedenk\\\\\"uberlieferung der Angelsachsen-@article{test,\\n    author = \"John Doe\",\\n    title = \"Some title\",\\n}-@article{test,\\n    author = \"John Doe\",\\n    title = \"Some title\",\\n}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[Two Gedenk\\\\\"uberlieferung der Angelsachsen-@article{test,\\n    author = \"John Doe\",\\n    title = \"Some title\",\\n}-@string{someString = \"some value\"}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[Two Gedenk\\\\\"uberlieferung der Angelsachsen-@article{test,\\n    author = \"John Doe\",\\n    title = \"Some title\",\\n}-@string{someString = \"some value\"}\\n\\n% This is a comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[Two Gedenk\\\\\"uberlieferung der Angelsachsen-@article{test,\\n    author = \"John Doe\",\\n    title = \"Some title\",\\n}-@preamble{some preamble}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[Two Gedenk\\\\\"uberlieferung der Angelsachsen-@article{test,\\n    author = \"John Doe\",\\n    title = \"Some title\",\\n}-\\n]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[Two Gedenk\\\\\"uberlieferung der Angelsachsen-@article{test,\\n    author = \"John Doe\",\\n    title = \"Some title\",\\n}-% This is a comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[Two Gedenk\\\\\"uberlieferung der Angelsachsen-@string{someString = \"some value\"}-@article{test,\\n    author = \"John Doe\",\\n    title = \"Some title\",\\n}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[Two Gedenk\\\\\"uberlieferung der Angelsachsen-@string{someString = \"some value\"}-@string{someString = \"some value\"}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[Two Gedenk\\\\\"uberlieferung der Angelsachsen-@string{someString = \"some value\"}-@string{someString = \"some value\"}\\n\\n% This is a comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[Two Gedenk\\\\\"uberlieferung der Angelsachsen-@string{someString = \"some value\"}-@preamble{some preamble}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[Two Gedenk\\\\\"uberlieferung der Angelsachsen-@string{someString = \"some value\"}-\\n]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[Two Gedenk\\\\\"uberlieferung der Angelsachsen-@string{someString = \"some value\"}-% This is a comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[Two Gedenk\\\\\"uberlieferung der Angelsachsen-@string{someString = \"some value\"}\\n\\n% This is a comment-@article{test,\\n    author = \"John Doe\",\\n    title = \"Some title\",\\n}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[Two Gedenk\\\\\"uberlieferung der Angelsachsen-@string{someString = \"some value\"}\\n\\n% This is a comment-@string{someString = \"some value\"}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[Two Gedenk\\\\\"uberlieferung der Angelsachsen-@string{someString = \"some value\"}\\n\\n% This is a comment-@string{someString = \"some value\"}\\n\\n% This is a comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[Two Gedenk\\\\\"uberlieferung der Angelsachsen-@string{someString = \"some value\"}\\n\\n% This is a comment-@preamble{some preamble}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[Two Gedenk\\\\\"uberlieferung der Angelsachsen-@string{someString = \"some value\"}\\n\\n% This is a comment-\\n]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[Two Gedenk\\\\\"uberlieferung der Angelsachsen-@string{someString = \"some value\"}\\n\\n% This is a comment-% This is a comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[Two Gedenk\\\\\"uberlieferung der Angelsachsen-@preamble{some preamble}-@article{test,\\n    author = \"John Doe\",\\n    title = \"Some title\",\\n}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[Two Gedenk\\\\\"uberlieferung der Angelsachsen-@preamble{some preamble}-@string{someString = \"some value\"}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[Two Gedenk\\\\\"uberlieferung der Angelsachsen-@preamble{some preamble}-@string{someString = \"some value\"}\\n\\n% This is a comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[Two Gedenk\\\\\"uberlieferung der Angelsachsen-@preamble{some preamble}-@preamble{some preamble}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[Two Gedenk\\\\\"uberlieferung der Angelsachsen-@preamble{some preamble}-\\n]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[Two Gedenk\\\\\"uberlieferung der Angelsachsen-@preamble{some preamble}-% This is a comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[Two Gedenk\\\\\"uberlieferung der Angelsachsen-\\n-@article{test,\\n    author = \"John Doe\",\\n    title = \"Some title\",\\n}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[Two Gedenk\\\\\"uberlieferung der Angelsachsen-\\n-@string{someString = \"some value\"}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[Two Gedenk\\\\\"uberlieferung der Angelsachsen-\\n-@string{someString = \"some value\"}\\n\\n% This is a comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[Two Gedenk\\\\\"uberlieferung der Angelsachsen-\\n-@preamble{some preamble}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[Two Gedenk\\\\\"uberlieferung der Angelsachsen-\\n-\\n]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[Two Gedenk\\\\\"uberlieferung der Angelsachsen-\\n-% This is a comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[Two Gedenk\\\\\"uberlieferung der Angelsachsen-% This is a comment-@article{test,\\n    author = \"John Doe\",\\n    title = \"Some title\",\\n}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[Two Gedenk\\\\\"uberlieferung der Angelsachsen-% This is a comment-@string{someString = \"some value\"}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[Two Gedenk\\\\\"uberlieferung der Angelsachsen-% This is a comment-@string{someString = \"some value\"}\\n\\n% This is a comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[Two Gedenk\\\\\"uberlieferung der Angelsachsen-% This is a comment-@preamble{some preamble}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[Two Gedenk\\\\\"uberlieferung der Angelsachsen-% This is a comment-\\n]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[Two Gedenk\\\\\"uberlieferung der Angelsachsen-% This is a comment-% This is a comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[\\\\texttimes{}{\\\\texttimes}\\\\texttimes-@article{test,\\n    author = \"John Doe\",\\n    title = \"Some title\",\\n}-@article{test,\\n    author = \"John Doe\",\\n    title = \"Some title\",\\n}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[\\\\texttimes{}{\\\\texttimes}\\\\texttimes-@article{test,\\n    author = \"John Doe\",\\n    title = \"Some title\",\\n}-@string{someString = \"some value\"}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[\\\\texttimes{}{\\\\texttimes}\\\\texttimes-@article{test,\\n    author = \"John Doe\",\\n    title = \"Some title\",\\n}-@string{someString = \"some value\"}\\n\\n% This is a comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[\\\\texttimes{}{\\\\texttimes}\\\\texttimes-@article{test,\\n    author = \"John Doe\",\\n    title = \"Some title\",\\n}-@preamble{some preamble}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[\\\\texttimes{}{\\\\texttimes}\\\\texttimes-@article{test,\\n    author = \"John Doe\",\\n    title = \"Some title\",\\n}-\\n]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[\\\\texttimes{}{\\\\texttimes}\\\\texttimes-@article{test,\\n    author = \"John Doe\",\\n    title = \"Some title\",\\n}-% This is a comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[\\\\texttimes{}{\\\\texttimes}\\\\texttimes-@string{someString = \"some value\"}-@article{test,\\n    author = \"John Doe\",\\n    title = \"Some title\",\\n}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[\\\\texttimes{}{\\\\texttimes}\\\\texttimes-@string{someString = \"some value\"}-@string{someString = \"some value\"}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[\\\\texttimes{}{\\\\texttimes}\\\\texttimes-@string{someString = \"some value\"}-@string{someString = \"some value\"}\\n\\n% This is a comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[\\\\texttimes{}{\\\\texttimes}\\\\texttimes-@string{someString = \"some value\"}-@preamble{some preamble}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[\\\\texttimes{}{\\\\texttimes}\\\\texttimes-@string{someString = \"some value\"}-\\n]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[\\\\texttimes{}{\\\\texttimes}\\\\texttimes-@string{someString = \"some value\"}-% This is a comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[\\\\texttimes{}{\\\\texttimes}\\\\texttimes-@string{someString = \"some value\"}\\n\\n% This is a comment-@article{test,\\n    author = \"John Doe\",\\n    title = \"Some title\",\\n}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[\\\\texttimes{}{\\\\texttimes}\\\\texttimes-@string{someString = \"some value\"}\\n\\n% This is a comment-@string{someString = \"some value\"}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[\\\\texttimes{}{\\\\texttimes}\\\\texttimes-@string{someString = \"some value\"}\\n\\n% This is a comment-@string{someString = \"some value\"}\\n\\n% This is a comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[\\\\texttimes{}{\\\\texttimes}\\\\texttimes-@string{someString = \"some value\"}\\n\\n% This is a comment-@preamble{some preamble}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[\\\\texttimes{}{\\\\texttimes}\\\\texttimes-@string{someString = \"some value\"}\\n\\n% This is a comment-\\n]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[\\\\texttimes{}{\\\\texttimes}\\\\texttimes-@string{someString = \"some value\"}\\n\\n% This is a comment-% This is a comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[\\\\texttimes{}{\\\\texttimes}\\\\texttimes-@preamble{some preamble}-@article{test,\\n    author = \"John Doe\",\\n    title = \"Some title\",\\n}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[\\\\texttimes{}{\\\\texttimes}\\\\texttimes-@preamble{some preamble}-@string{someString = \"some value\"}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[\\\\texttimes{}{\\\\texttimes}\\\\texttimes-@preamble{some preamble}-@string{someString = \"some value\"}\\n\\n% This is a comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[\\\\texttimes{}{\\\\texttimes}\\\\texttimes-@preamble{some preamble}-@preamble{some preamble}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[\\\\texttimes{}{\\\\texttimes}\\\\texttimes-@preamble{some preamble}-\\n]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[\\\\texttimes{}{\\\\texttimes}\\\\texttimes-@preamble{some preamble}-% This is a comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[\\\\texttimes{}{\\\\texttimes}\\\\texttimes-\\n-@article{test,\\n    author = \"John Doe\",\\n    title = \"Some title\",\\n}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[\\\\texttimes{}{\\\\texttimes}\\\\texttimes-\\n-@string{someString = \"some value\"}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[\\\\texttimes{}{\\\\texttimes}\\\\texttimes-\\n-@string{someString = \"some value\"}\\n\\n% This is a comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[\\\\texttimes{}{\\\\texttimes}\\\\texttimes-\\n-@preamble{some preamble}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[\\\\texttimes{}{\\\\texttimes}\\\\texttimes-\\n-\\n]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[\\\\texttimes{}{\\\\texttimes}\\\\texttimes-\\n-% This is a comment]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[\\\\texttimes{}{\\\\texttimes}\\\\texttimes-% This is a comment-@article{test,\\n    author = \"John Doe\",\\n    title = \"Some title\",\\n}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[\\\\texttimes{}{\\\\texttimes}\\\\texttimes-% This is a comment-@string{someString = \"some value\"}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[\\\\texttimes{}{\\\\texttimes}\\\\texttimes-% This is a comment-@string{someString = \"some value\"}\\n\\n% This is a comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[\\\\texttimes{}{\\\\texttimes}\\\\texttimes-% This is a comment-@preamble{some preamble}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[\\\\texttimes{}{\\\\texttimes}\\\\texttimes-% This is a comment-\\n]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[\\\\texttimes{}{\\\\texttimes}\\\\texttimes-% This is a comment-% This is a comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[p\\\\^{a}t\\\\'{e}Title with \\\\{ a curly brace-@article{test,\\n    author = \"John Doe\",\\n    title = \"Some title\",\\n}-@article{test,\\n    author = \"John Doe\",\\n    title = \"Some title\",\\n}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[p\\\\^{a}t\\\\'{e}Title with \\\\{ a curly brace-@article{test,\\n    author = \"John Doe\",\\n    title = \"Some title\",\\n}-@string{someString = \"some value\"}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[p\\\\^{a}t\\\\'{e}Title with \\\\{ a curly brace-@article{test,\\n    author = \"John Doe\",\\n    title = \"Some title\",\\n}-@string{someString = \"some value\"}\\n\\n% This is a comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[p\\\\^{a}t\\\\'{e}Title with \\\\{ a curly brace-@article{test,\\n    author = \"John Doe\",\\n    title = \"Some title\",\\n}-@preamble{some preamble}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[p\\\\^{a}t\\\\'{e}Title with \\\\{ a curly brace-@article{test,\\n    author = \"John Doe\",\\n    title = \"Some title\",\\n}-\\n]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[p\\\\^{a}t\\\\'{e}Title with \\\\{ a curly brace-@article{test,\\n    author = \"John Doe\",\\n    title = \"Some title\",\\n}-% This is a comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[p\\\\^{a}t\\\\'{e}Title with \\\\{ a curly brace-@string{someString = \"some value\"}-@article{test,\\n    author = \"John Doe\",\\n    title = \"Some title\",\\n}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[p\\\\^{a}t\\\\'{e}Title with \\\\{ a curly brace-@string{someString = \"some value\"}-@string{someString = \"some value\"}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[p\\\\^{a}t\\\\'{e}Title with \\\\{ a curly brace-@string{someString = \"some value\"}-@string{someString = \"some value\"}\\n\\n% This is a comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[p\\\\^{a}t\\\\'{e}Title with \\\\{ a curly brace-@string{someString = \"some value\"}-@preamble{some preamble}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[p\\\\^{a}t\\\\'{e}Title with \\\\{ a curly brace-@string{someString = \"some value\"}-\\n]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[p\\\\^{a}t\\\\'{e}Title with \\\\{ a curly brace-@string{someString = \"some value\"}-% This is a comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[p\\\\^{a}t\\\\'{e}Title with \\\\{ a curly brace-@string{someString = \"some value\"}\\n\\n% This is a comment-@article{test,\\n    author = \"John Doe\",\\n    title = \"Some title\",\\n}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[p\\\\^{a}t\\\\'{e}Title with \\\\{ a curly brace-@string{someString = \"some value\"}\\n\\n% This is a comment-@string{someString = \"some value\"}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[p\\\\^{a}t\\\\'{e}Title with \\\\{ a curly brace-@string{someString = \"some value\"}\\n\\n% This is a comment-@string{someString = \"some value\"}\\n\\n% This is a comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[p\\\\^{a}t\\\\'{e}Title with \\\\{ a curly brace-@string{someString = \"some value\"}\\n\\n% This is a comment-@preamble{some preamble}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[p\\\\^{a}t\\\\'{e}Title with \\\\{ a curly brace-@string{someString = \"some value\"}\\n\\n% This is a comment-\\n]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[p\\\\^{a}t\\\\'{e}Title with \\\\{ a curly brace-@string{someString = \"some value\"}\\n\\n% This is a comment-% This is a comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[p\\\\^{a}t\\\\'{e}Title with \\\\{ a curly brace-@preamble{some preamble}-@article{test,\\n    author = \"John Doe\",\\n    title = \"Some title\",\\n}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[p\\\\^{a}t\\\\'{e}Title with \\\\{ a curly brace-@preamble{some preamble}-@string{someString = \"some value\"}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[p\\\\^{a}t\\\\'{e}Title with \\\\{ a curly brace-@preamble{some preamble}-@string{someString = \"some value\"}\\n\\n% This is a comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[p\\\\^{a}t\\\\'{e}Title with \\\\{ a curly brace-@preamble{some preamble}-@preamble{some preamble}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[p\\\\^{a}t\\\\'{e}Title with \\\\{ a curly brace-@preamble{some preamble}-\\n]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[p\\\\^{a}t\\\\'{e}Title with \\\\{ a curly brace-@preamble{some preamble}-% This is a comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[p\\\\^{a}t\\\\'{e}Title with \\\\{ a curly brace-\\n-@article{test,\\n    author = \"John Doe\",\\n    title = \"Some title\",\\n}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[p\\\\^{a}t\\\\'{e}Title with \\\\{ a curly brace-\\n-@string{someString = \"some value\"}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[p\\\\^{a}t\\\\'{e}Title with \\\\{ a curly brace-\\n-@string{someString = \"some value\"}\\n\\n% This is a comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[p\\\\^{a}t\\\\'{e}Title with \\\\{ a curly brace-\\n-@preamble{some preamble}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[p\\\\^{a}t\\\\'{e}Title with \\\\{ a curly brace-\\n-\\n]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[p\\\\^{a}t\\\\'{e}Title with \\\\{ a curly brace-\\n-% This is a comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[p\\\\^{a}t\\\\'{e}Title with \\\\{ a curly brace-% This is a comment-@article{test,\\n    author = \"John Doe\",\\n    title = \"Some title\",\\n}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[p\\\\^{a}t\\\\'{e}Title with \\\\{ a curly brace-% This is a comment-@string{someString = \"some value\"}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[p\\\\^{a}t\\\\'{e}Title with \\\\{ a curly brace-% This is a comment-@string{someString = \"some value\"}\\n\\n% This is a comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[p\\\\^{a}t\\\\'{e}Title with \\\\{ a curly brace-% This is a comment-@preamble{some preamble}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[p\\\\^{a}t\\\\'{e}Title with \\\\{ a curly brace-% This is a comment-\\n]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[p\\\\^{a}t\\\\'{e}Title with \\\\{ a curly brace-% This is a comment-% This is a comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[Title with \\\\} a curly brace-@article{test,\\n    author = \"John Doe\",\\n    title = \"Some title\",\\n}-@article{test,\\n    author = \"John Doe\",\\n    title = \"Some title\",\\n}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[Title with \\\\} a curly brace-@article{test,\\n    author = \"John Doe\",\\n    title = \"Some title\",\\n}-@string{someString = \"some value\"}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[Title with \\\\} a curly brace-@article{test,\\n    author = \"John Doe\",\\n    title = \"Some title\",\\n}-@string{someString = \"some value\"}\\n\\n% This is a comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[Title with \\\\} a curly brace-@article{test,\\n    author = \"John Doe\",\\n    title = \"Some title\",\\n}-@preamble{some preamble}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[Title with \\\\} a curly brace-@article{test,\\n    author = \"John Doe\",\\n    title = \"Some title\",\\n}-\\n]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[Title with \\\\} a curly brace-@article{test,\\n    author = \"John Doe\",\\n    title = \"Some title\",\\n}-% This is a comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[Title with \\\\} a curly brace-@string{someString = \"some value\"}-@article{test,\\n    author = \"John Doe\",\\n    title = \"Some title\",\\n}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[Title with \\\\} a curly brace-@string{someString = \"some value\"}-@string{someString = \"some value\"}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[Title with \\\\} a curly brace-@string{someString = \"some value\"}-@string{someString = \"some value\"}\\n\\n% This is a comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[Title with \\\\} a curly brace-@string{someString = \"some value\"}-@preamble{some preamble}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[Title with \\\\} a curly brace-@string{someString = \"some value\"}-\\n]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[Title with \\\\} a curly brace-@string{someString = \"some value\"}-% This is a comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[Title with \\\\} a curly brace-@string{someString = \"some value\"}\\n\\n% This is a comment-@article{test,\\n    author = \"John Doe\",\\n    title = \"Some title\",\\n}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[Title with \\\\} a curly brace-@string{someString = \"some value\"}\\n\\n% This is a comment-@string{someString = \"some value\"}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[Title with \\\\} a curly brace-@string{someString = \"some value\"}\\n\\n% This is a comment-@string{someString = \"some value\"}\\n\\n% This is a comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[Title with \\\\} a curly brace-@string{someString = \"some value\"}\\n\\n% This is a comment-@preamble{some preamble}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[Title with \\\\} a curly brace-@string{someString = \"some value\"}\\n\\n% This is a comment-\\n]",
            "time": 0.004,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[Title with \\\\} a curly brace-@string{someString = \"some value\"}\\n\\n% This is a comment-% This is a comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[Title with \\\\} a curly brace-@preamble{some preamble}-@article{test,\\n    author = \"John Doe\",\\n    title = \"Some title\",\\n}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[Title with \\\\} a curly brace-@preamble{some preamble}-@string{someString = \"some value\"}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[Title with \\\\} a curly brace-@preamble{some preamble}-@string{someString = \"some value\"}\\n\\n% This is a comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[Title with \\\\} a curly brace-@preamble{some preamble}-@preamble{some preamble}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[Title with \\\\} a curly brace-@preamble{some preamble}-\\n]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[Title with \\\\} a curly brace-@preamble{some preamble}-% This is a comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[Title with \\\\} a curly brace-\\n-@article{test,\\n    author = \"John Doe\",\\n    title = \"Some title\",\\n}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[Title with \\\\} a curly brace-\\n-@string{someString = \"some value\"}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[Title with \\\\} a curly brace-\\n-@string{someString = \"some value\"}\\n\\n% This is a comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[Title with \\\\} a curly brace-\\n-@preamble{some preamble}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[Title with \\\\} a curly brace-\\n-\\n]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[Title with \\\\} a curly brace-\\n-% This is a comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[Title with \\\\} a curly brace-% This is a comment-@article{test,\\n    author = \"John Doe\",\\n    title = \"Some title\",\\n}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[Title with \\\\} a curly brace-% This is a comment-@string{someString = \"some value\"}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[Title with \\\\} a curly brace-% This is a comment-@string{someString = \"some value\"}\\n\\n% This is a comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[Title with \\\\} a curly brace-% This is a comment-@preamble{some preamble}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[Title with \\\\} a curly brace-% This is a comment-\\n]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[Title with \\\\} a curly brace-% This is a comment-% This is a comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[Title with \\\\{ a curly brace and \\\\} a curly brace-@article{test,\\n    author = \"John Doe\",\\n    title = \"Some title\",\\n}-@article{test,\\n    author = \"John Doe\",\\n    title = \"Some title\",\\n}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[Title with \\\\{ a curly brace and \\\\} a curly brace-@article{test,\\n    author = \"John Doe\",\\n    title = \"Some title\",\\n}-@string{someString = \"some value\"}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[Title with \\\\{ a curly brace and \\\\} a curly brace-@article{test,\\n    author = \"John Doe\",\\n    title = \"Some title\",\\n}-@string{someString = \"some value\"}\\n\\n% This is a comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[Title with \\\\{ a curly brace and \\\\} a curly brace-@article{test,\\n    author = \"John Doe\",\\n    title = \"Some title\",\\n}-@preamble{some preamble}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[Title with \\\\{ a curly brace and \\\\} a curly brace-@article{test,\\n    author = \"John Doe\",\\n    title = \"Some title\",\\n}-\\n]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[Title with \\\\{ a curly brace and \\\\} a curly brace-@article{test,\\n    author = \"John Doe\",\\n    title = \"Some title\",\\n}-% This is a comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[Title with \\\\{ a curly brace and \\\\} a curly brace-@string{someString = \"some value\"}-@article{test,\\n    author = \"John Doe\",\\n    title = \"Some title\",\\n}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[Title with \\\\{ a curly brace and \\\\} a curly brace-@string{someString = \"some value\"}-@string{someString = \"some value\"}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[Title with \\\\{ a curly brace and \\\\} a curly brace-@string{someString = \"some value\"}-@string{someString = \"some value\"}\\n\\n% This is a comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[Title with \\\\{ a curly brace and \\\\} a curly brace-@string{someString = \"some value\"}-@preamble{some preamble}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[Title with \\\\{ a curly brace and \\\\} a curly brace-@string{someString = \"some value\"}-\\n]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[Title with \\\\{ a curly brace and \\\\} a curly brace-@string{someString = \"some value\"}-% This is a comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[Title with \\\\{ a curly brace and \\\\} a curly brace-@string{someString = \"some value\"}\\n\\n% This is a comment-@article{test,\\n    author = \"John Doe\",\\n    title = \"Some title\",\\n}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[Title with \\\\{ a curly brace and \\\\} a curly brace-@string{someString = \"some value\"}\\n\\n% This is a comment-@string{someString = \"some value\"}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[Title with \\\\{ a curly brace and \\\\} a curly brace-@string{someString = \"some value\"}\\n\\n% This is a comment-@string{someString = \"some value\"}\\n\\n% This is a comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[Title with \\\\{ a curly brace and \\\\} a curly brace-@string{someString = \"some value\"}\\n\\n% This is a comment-@preamble{some preamble}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[Title with \\\\{ a curly brace and \\\\} a curly brace-@string{someString = \"some value\"}\\n\\n% This is a comment-\\n]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[Title with \\\\{ a curly brace and \\\\} a curly brace-@string{someString = \"some value\"}\\n\\n% This is a comment-% This is a comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[Title with \\\\{ a curly brace and \\\\} a curly brace-@preamble{some preamble}-@article{test,\\n    author = \"John Doe\",\\n    title = \"Some title\",\\n}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[Title with \\\\{ a curly brace and \\\\} a curly brace-@preamble{some preamble}-@string{someString = \"some value\"}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[Title with \\\\{ a curly brace and \\\\} a curly brace-@preamble{some preamble}-@string{someString = \"some value\"}\\n\\n% This is a comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[Title with \\\\{ a curly brace and \\\\} a curly brace-@preamble{some preamble}-@preamble{some preamble}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[Title with \\\\{ a curly brace and \\\\} a curly brace-@preamble{some preamble}-\\n]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[Title with \\\\{ a curly brace and \\\\} a curly brace-@preamble{some preamble}-% This is a comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[Title with \\\\{ a curly brace and \\\\} a curly brace-\\n-@article{test,\\n    author = \"John Doe\",\\n    title = \"Some title\",\\n}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[Title with \\\\{ a curly brace and \\\\} a curly brace-\\n-@string{someString = \"some value\"}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[Title with \\\\{ a curly brace and \\\\} a curly brace-\\n-@string{someString = \"some value\"}\\n\\n% This is a comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[Title with \\\\{ a curly brace and \\\\} a curly brace-\\n-@preamble{some preamble}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[Title with \\\\{ a curly brace and \\\\} a curly brace-\\n-\\n]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[Title with \\\\{ a curly brace and \\\\} a curly brace-\\n-% This is a comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[Title with \\\\{ a curly brace and \\\\} a curly brace-% This is a comment-@article{test,\\n    author = \"John Doe\",\\n    title = \"Some title\",\\n}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[Title with \\\\{ a curly brace and \\\\} a curly brace-% This is a comment-@string{someString = \"some value\"}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[Title with \\\\{ a curly brace and \\\\} a curly brace-% This is a comment-@string{someString = \"some value\"}\\n\\n% This is a comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[Title with \\\\{ a curly brace and \\\\} a curly brace-% This is a comment-@preamble{some preamble}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[Title with \\\\{ a curly brace and \\\\} a curly brace-% This is a comment-\\n]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[Title with \\\\{ a curly brace and \\\\} a curly brace-% This is a comment-% This is a comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[Title with \\\\{ a curly brace and \\\\} a curly brace and \\\\{ another curly brace-@article{test,\\n    author = \"John Doe\",\\n    title = \"Some title\",\\n}-@article{test,\\n    author = \"John Doe\",\\n    title = \"Some title\",\\n}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[Title with \\\\{ a curly brace and \\\\} a curly brace and \\\\{ another curly brace-@article{test,\\n    author = \"John Doe\",\\n    title = \"Some title\",\\n}-@string{someString = \"some value\"}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[Title with \\\\{ a curly brace and \\\\} a curly brace and \\\\{ another curly brace-@article{test,\\n    author = \"John Doe\",\\n    title = \"Some title\",\\n}-@string{someString = \"some value\"}\\n\\n% This is a comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[Title with \\\\{ a curly brace and \\\\} a curly brace and \\\\{ another curly brace-@article{test,\\n    author = \"John Doe\",\\n    title = \"Some title\",\\n}-@preamble{some preamble}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[Title with \\\\{ a curly brace and \\\\} a curly brace and \\\\{ another curly brace-@article{test,\\n    author = \"John Doe\",\\n    title = \"Some title\",\\n}-\\n]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[Title with \\\\{ a curly brace and \\\\} a curly brace and \\\\{ another curly brace-@article{test,\\n    author = \"John Doe\",\\n    title = \"Some title\",\\n}-% This is a comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[Title with \\\\{ a curly brace and \\\\} a curly brace and \\\\{ another curly brace-@string{someString = \"some value\"}-@article{test,\\n    author = \"John Doe\",\\n    title = \"Some title\",\\n}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[Title with \\\\{ a curly brace and \\\\} a curly brace and \\\\{ another curly brace-@string{someString = \"some value\"}-@string{someString = \"some value\"}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[Title with \\\\{ a curly brace and \\\\} a curly brace and \\\\{ another curly brace-@string{someString = \"some value\"}-@string{someString = \"some value\"}\\n\\n% This is a comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[Title with \\\\{ a curly brace and \\\\} a curly brace and \\\\{ another curly brace-@string{someString = \"some value\"}-@preamble{some preamble}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[Title with \\\\{ a curly brace and \\\\} a curly brace and \\\\{ another curly brace-@string{someString = \"some value\"}-\\n]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[Title with \\\\{ a curly brace and \\\\} a curly brace and \\\\{ another curly brace-@string{someString = \"some value\"}-% This is a comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[Title with \\\\{ a curly brace and \\\\} a curly brace and \\\\{ another curly brace-@string{someString = \"some value\"}\\n\\n% This is a comment-@article{test,\\n    author = \"John Doe\",\\n    title = \"Some title\",\\n}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[Title with \\\\{ a curly brace and \\\\} a curly brace and \\\\{ another curly brace-@string{someString = \"some value\"}\\n\\n% This is a comment-@string{someString = \"some value\"}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[Title with \\\\{ a curly brace and \\\\} a curly brace and \\\\{ another curly brace-@string{someString = \"some value\"}\\n\\n% This is a comment-@string{someString = \"some value\"}\\n\\n% This is a comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[Title with \\\\{ a curly brace and \\\\} a curly brace and \\\\{ another curly brace-@string{someString = \"some value\"}\\n\\n% This is a comment-@preamble{some preamble}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[Title with \\\\{ a curly brace and \\\\} a curly brace and \\\\{ another curly brace-@string{someString = \"some value\"}\\n\\n% This is a comment-\\n]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[Title with \\\\{ a curly brace and \\\\} a curly brace and \\\\{ another curly brace-@string{someString = \"some value\"}\\n\\n% This is a comment-% This is a comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[Title with \\\\{ a curly brace and \\\\} a curly brace and \\\\{ another curly brace-@preamble{some preamble}-@article{test,\\n    author = \"John Doe\",\\n    title = \"Some title\",\\n}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[Title with \\\\{ a curly brace and \\\\} a curly brace and \\\\{ another curly brace-@preamble{some preamble}-@string{someString = \"some value\"}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[Title with \\\\{ a curly brace and \\\\} a curly brace and \\\\{ another curly brace-@preamble{some preamble}-@string{someString = \"some value\"}\\n\\n% This is a comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[Title with \\\\{ a curly brace and \\\\} a curly brace and \\\\{ another curly brace-@preamble{some preamble}-@preamble{some preamble}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[Title with \\\\{ a curly brace and \\\\} a curly brace and \\\\{ another curly brace-@preamble{some preamble}-\\n]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[Title with \\\\{ a curly brace and \\\\} a curly brace and \\\\{ another curly brace-@preamble{some preamble}-% This is a comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[Title with \\\\{ a curly brace and \\\\} a curly brace and \\\\{ another curly brace-\\n-@article{test,\\n    author = \"John Doe\",\\n    title = \"Some title\",\\n}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[Title with \\\\{ a curly brace and \\\\} a curly brace and \\\\{ another curly brace-\\n-@string{someString = \"some value\"}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[Title with \\\\{ a curly brace and \\\\} a curly brace and \\\\{ another curly brace-\\n-@string{someString = \"some value\"}\\n\\n% This is a comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[Title with \\\\{ a curly brace and \\\\} a curly brace and \\\\{ another curly brace-\\n-@preamble{some preamble}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[Title with \\\\{ a curly brace and \\\\} a curly brace and \\\\{ another curly brace-\\n-\\n]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[Title with \\\\{ a curly brace and \\\\} a curly brace and \\\\{ another curly brace-\\n-% This is a comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[Title with \\\\{ a curly brace and \\\\} a curly brace and \\\\{ another curly brace-% This is a comment-@article{test,\\n    author = \"John Doe\",\\n    title = \"Some title\",\\n}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[Title with \\\\{ a curly brace and \\\\} a curly brace and \\\\{ another curly brace-% This is a comment-@string{someString = \"some value\"}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[Title with \\\\{ a curly brace and \\\\} a curly brace and \\\\{ another curly brace-% This is a comment-@string{someString = \"some value\"}\\n\\n% This is a comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[Title with \\\\{ a curly brace and \\\\} a curly brace and \\\\{ another curly brace-% This is a comment-@preamble{some preamble}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[Title with \\\\{ a curly brace and \\\\} a curly brace and \\\\{ another curly brace-% This is a comment-\\n]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[Title with \\\\{ a curly brace and \\\\} a curly brace and \\\\{ another curly brace-% This is a comment-% This is a comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[Title with { UnEscaped Curly } Braces-@article{test,\\n    author = \"John Doe\",\\n    title = \"Some title\",\\n}-@article{test,\\n    author = \"John Doe\",\\n    title = \"Some title\",\\n}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[Title with { UnEscaped Curly } Braces-@article{test,\\n    author = \"John Doe\",\\n    title = \"Some title\",\\n}-@string{someString = \"some value\"}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[Title with { UnEscaped Curly } Braces-@article{test,\\n    author = \"John Doe\",\\n    title = \"Some title\",\\n}-@string{someString = \"some value\"}\\n\\n% This is a comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[Title with { UnEscaped Curly } Braces-@article{test,\\n    author = \"John Doe\",\\n    title = \"Some title\",\\n}-@preamble{some preamble}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[Title with { UnEscaped Curly } Braces-@article{test,\\n    author = \"John Doe\",\\n    title = \"Some title\",\\n}-\\n]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[Title with { UnEscaped Curly } Braces-@article{test,\\n    author = \"John Doe\",\\n    title = \"Some title\",\\n}-% This is a comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[Title with { UnEscaped Curly } Braces-@string{someString = \"some value\"}-@article{test,\\n    author = \"John Doe\",\\n    title = \"Some title\",\\n}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[Title with { UnEscaped Curly } Braces-@string{someString = \"some value\"}-@string{someString = \"some value\"}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[Title with { UnEscaped Curly } Braces-@string{someString = \"some value\"}-@string{someString = \"some value\"}\\n\\n% This is a comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[Title with { UnEscaped Curly } Braces-@string{someString = \"some value\"}-@preamble{some preamble}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[Title with { UnEscaped Curly } Braces-@string{someString = \"some value\"}-\\n]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[Title with { UnEscaped Curly } Braces-@string{someString = \"some value\"}-% This is a comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[Title with { UnEscaped Curly } Braces-@string{someString = \"some value\"}\\n\\n% This is a comment-@article{test,\\n    author = \"John Doe\",\\n    title = \"Some title\",\\n}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[Title with { UnEscaped Curly } Braces-@string{someString = \"some value\"}\\n\\n% This is a comment-@string{someString = \"some value\"}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[Title with { UnEscaped Curly } Braces-@string{someString = \"some value\"}\\n\\n% This is a comment-@string{someString = \"some value\"}\\n\\n% This is a comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[Title with { UnEscaped Curly } Braces-@string{someString = \"some value\"}\\n\\n% This is a comment-@preamble{some preamble}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[Title with { UnEscaped Curly } Braces-@string{someString = \"some value\"}\\n\\n% This is a comment-\\n]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[Title with { UnEscaped Curly } Braces-@string{someString = \"some value\"}\\n\\n% This is a comment-% This is a comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[Title with { UnEscaped Curly } Braces-@preamble{some preamble}-@article{test,\\n    author = \"John Doe\",\\n    title = \"Some title\",\\n}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[Title with { UnEscaped Curly } Braces-@preamble{some preamble}-@string{someString = \"some value\"}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[Title with { UnEscaped Curly } Braces-@preamble{some preamble}-@string{someString = \"some value\"}\\n\\n% This is a comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[Title with { UnEscaped Curly } Braces-@preamble{some preamble}-@preamble{some preamble}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[Title with { UnEscaped Curly } Braces-@preamble{some preamble}-\\n]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[Title with { UnEscaped Curly } Braces-@preamble{some preamble}-% This is a comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[Title with { UnEscaped Curly } Braces-\\n-@article{test,\\n    author = \"John Doe\",\\n    title = \"Some title\",\\n}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[Title with { UnEscaped Curly } Braces-\\n-@string{someString = \"some value\"}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[Title with { UnEscaped Curly } Braces-\\n-@string{someString = \"some value\"}\\n\\n% This is a comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[Title with { UnEscaped Curly } Braces-\\n-@preamble{some preamble}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[Title with { UnEscaped Curly } Braces-\\n-\\n]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[Title with { UnEscaped Curly } Braces-\\n-% This is a comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[Title with { UnEscaped Curly } Braces-% This is a comment-@article{test,\\n    author = \"John Doe\",\\n    title = \"Some title\",\\n}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[Title with { UnEscaped Curly } Braces-% This is a comment-@string{someString = \"some value\"}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[Title with { UnEscaped Curly } Braces-% This is a comment-@string{someString = \"some value\"}\\n\\n% This is a comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[Title with { UnEscaped Curly } Braces-% This is a comment-@preamble{some preamble}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[Title with { UnEscaped Curly } Braces-% This is a comment-\\n]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_explicit_comment",
            "name": "test_explicit_comment_parsing[Title with { UnEscaped Curly } Braces-% This is a comment-% This is a comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_implicit_comments",
            "name": "test_implicit_comment_eof",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_implicit_comments",
            "name": "test_implicit_comment_start_of_file",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_implicit_comments",
            "name": "test_implicit_comment_on_block_end_line[@article{article1, title={title1}}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_implicit_comments",
            "name": "test_implicit_comment_on_block_end_line[@article{article1, \\n  title={title1}\\n}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_implicit_comments",
            "name": "test_implicit_comment_on_block_end_line[@string{foo = \"bar\"}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_implicit_comments",
            "name": "test_implicit_comment_on_block_end_line[@preamble{e = mc^2}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_implicit_comments",
            "name": "test_multiline_implicit_comment",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_parse_failures",
            "name": "test_faulty_block_parsing[no_block_afterwards-entry_without_closing_brace-@article{test,\\n    author = \"John Doe\",\\n    title = \"Some title\",\\n}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_parse_failures",
            "name": "test_faulty_block_parsing[no_block_afterwards-entry_without_closing_brace-@string{someString = \"some value\"}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_parse_failures",
            "name": "test_faulty_block_parsing[no_block_afterwards-entry_without_closing_brace-@string{someString = \"some value\"}\\n\\n% This is a comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_parse_failures",
            "name": "test_faulty_block_parsing[no_block_afterwards-entry_without_closing_brace-@preamble{some preamble}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_parse_failures",
            "name": "test_faulty_block_parsing[no_block_afterwards-entry_without_closing_brace-\\n]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_parse_failures",
            "name": "test_faulty_block_parsing[no_block_afterwards-entry_without_closing_brace-% This is a comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_parse_failures",
            "name": "test_faulty_block_parsing[no_block_afterwards-multiline_entry_without_closing_brace-@article{test,\\n    author = \"John Doe\",\\n    title = \"Some title\",\\n}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_parse_failures",
            "name": "test_faulty_block_parsing[no_block_afterwards-multiline_entry_without_closing_brace-@string{someString = \"some value\"}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_parse_failures",
            "name": "test_faulty_block_parsing[no_block_afterwards-multiline_entry_without_closing_brace-@string{someString = \"some value\"}\\n\\n% This is a comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_parse_failures",
            "name": "test_faulty_block_parsing[no_block_afterwards-multiline_entry_without_closing_brace-@preamble{some preamble}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_parse_failures",
            "name": "test_faulty_block_parsing[no_block_afterwards-multiline_entry_without_closing_brace-\\n]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_parse_failures",
            "name": "test_faulty_block_parsing[no_block_afterwards-multiline_entry_without_closing_brace-% This is a comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_parse_failures",
            "name": "test_faulty_block_parsing[no_block_afterwards-entry_without_field_and_closing_brace-@article{test,\\n    author = \"John Doe\",\\n    title = \"Some title\",\\n}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_parse_failures",
            "name": "test_faulty_block_parsing[no_block_afterwards-entry_without_field_and_closing_brace-@string{someString = \"some value\"}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_parse_failures",
            "name": "test_faulty_block_parsing[no_block_afterwards-entry_without_field_and_closing_brace-@string{someString = \"some value\"}\\n\\n% This is a comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_parse_failures",
            "name": "test_faulty_block_parsing[no_block_afterwards-entry_without_field_and_closing_brace-@preamble{some preamble}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_parse_failures",
            "name": "test_faulty_block_parsing[no_block_afterwards-entry_without_field_and_closing_brace-\\n]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_parse_failures",
            "name": "test_faulty_block_parsing[no_block_afterwards-entry_without_field_and_closing_brace-% This is a comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_parse_failures",
            "name": "test_faulty_block_parsing[no_block_afterwards-entry_only_with_key_no_comma-@article{test,\\n    author = \"John Doe\",\\n    title = \"Some title\",\\n}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_parse_failures",
            "name": "test_faulty_block_parsing[no_block_afterwards-entry_only_with_key_no_comma-@string{someString = \"some value\"}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_parse_failures",
            "name": "test_faulty_block_parsing[no_block_afterwards-entry_only_with_key_no_comma-@string{someString = \"some value\"}\\n\\n% This is a comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_parse_failures",
            "name": "test_faulty_block_parsing[no_block_afterwards-entry_only_with_key_no_comma-@preamble{some preamble}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_parse_failures",
            "name": "test_faulty_block_parsing[no_block_afterwards-entry_only_with_key_no_comma-\\n]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_parse_failures",
            "name": "test_faulty_block_parsing[no_block_afterwards-entry_only_with_key_no_comma-% This is a comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_parse_failures",
            "name": "test_faulty_block_parsing[no_block_afterwards-entry_missing_comma_between_fields-@article{test,\\n    author = \"John Doe\",\\n    title = \"Some title\",\\n}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_parse_failures",
            "name": "test_faulty_block_parsing[no_block_afterwards-entry_missing_comma_between_fields-@string{someString = \"some value\"}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_parse_failures",
            "name": "test_faulty_block_parsing[no_block_afterwards-entry_missing_comma_between_fields-@string{someString = \"some value\"}\\n\\n% This is a comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_parse_failures",
            "name": "test_faulty_block_parsing[no_block_afterwards-entry_missing_comma_between_fields-@preamble{some preamble}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_parse_failures",
            "name": "test_faulty_block_parsing[no_block_afterwards-entry_missing_comma_between_fields-\\n]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_parse_failures",
            "name": "test_faulty_block_parsing[no_block_afterwards-entry_missing_comma_between_fields-% This is a comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_parse_failures",
            "name": "test_faulty_block_parsing[no_block_afterwards-field_missing_closing_brace-@article{test,\\n    author = \"John Doe\",\\n    title = \"Some title\",\\n}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_parse_failures",
            "name": "test_faulty_block_parsing[no_block_afterwards-field_missing_closing_brace-@string{someString = \"some value\"}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_parse_failures",
            "name": "test_faulty_block_parsing[no_block_afterwards-field_missing_closing_brace-@string{someString = \"some value\"}\\n\\n% This is a comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_parse_failures",
            "name": "test_faulty_block_parsing[no_block_afterwards-field_missing_closing_brace-@preamble{some preamble}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_parse_failures",
            "name": "test_faulty_block_parsing[no_block_afterwards-field_missing_closing_brace-\\n]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_parse_failures",
            "name": "test_faulty_block_parsing[no_block_afterwards-field_missing_closing_brace-% This is a comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_parse_failures",
            "name": "test_faulty_block_parsing[no_block_afterwards-field_missing_closing_quote-@article{test,\\n    author = \"John Doe\",\\n    title = \"Some title\",\\n}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_parse_failures",
            "name": "test_faulty_block_parsing[no_block_afterwards-field_missing_closing_quote-@string{someString = \"some value\"}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_parse_failures",
            "name": "test_faulty_block_parsing[no_block_afterwards-field_missing_closing_quote-@string{someString = \"some value\"}\\n\\n% This is a comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_parse_failures",
            "name": "test_faulty_block_parsing[no_block_afterwards-field_missing_closing_quote-@preamble{some preamble}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_parse_failures",
            "name": "test_faulty_block_parsing[no_block_afterwards-field_missing_closing_quote-\\n]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_parse_failures",
            "name": "test_faulty_block_parsing[no_block_afterwards-field_missing_closing_quote-% This is a comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_parse_failures",
            "name": "test_faulty_block_parsing[no_block_afterwards-string_without_closing_brace-@article{test,\\n    author = \"John Doe\",\\n    title = \"Some title\",\\n}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_parse_failures",
            "name": "test_faulty_block_parsing[no_block_afterwards-string_without_closing_brace-@string{someString = \"some value\"}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_parse_failures",
            "name": "test_faulty_block_parsing[no_block_afterwards-string_without_closing_brace-@string{someString = \"some value\"}\\n\\n% This is a comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_parse_failures",
            "name": "test_faulty_block_parsing[no_block_afterwards-string_without_closing_brace-@preamble{some preamble}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_parse_failures",
            "name": "test_faulty_block_parsing[no_block_afterwards-string_without_closing_brace-\\n]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_parse_failures",
            "name": "test_faulty_block_parsing[no_block_afterwards-string_without_closing_brace-% This is a comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_parse_failures",
            "name": "test_faulty_block_parsing[no_block_afterwards-preable_without_closing_brace0-@article{test,\\n    author = \"John Doe\",\\n    title = \"Some title\",\\n}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_parse_failures",
            "name": "test_faulty_block_parsing[no_block_afterwards-preable_without_closing_brace0-@string{someString = \"some value\"}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_parse_failures",
            "name": "test_faulty_block_parsing[no_block_afterwards-preable_without_closing_brace0-@string{someString = \"some value\"}\\n\\n% This is a comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_parse_failures",
            "name": "test_faulty_block_parsing[no_block_afterwards-preable_without_closing_brace0-@preamble{some preamble}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_parse_failures",
            "name": "test_faulty_block_parsing[no_block_afterwards-preable_without_closing_brace0-\\n]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_parse_failures",
            "name": "test_faulty_block_parsing[no_block_afterwards-preable_without_closing_brace0-% This is a comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_parse_failures",
            "name": "test_faulty_block_parsing[no_block_afterwards-preable_without_closing_brace1-@article{test,\\n    author = \"John Doe\",\\n    title = \"Some title\",\\n}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_parse_failures",
            "name": "test_faulty_block_parsing[no_block_afterwards-preable_without_closing_brace1-@string{someString = \"some value\"}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_parse_failures",
            "name": "test_faulty_block_parsing[no_block_afterwards-preable_without_closing_brace1-@string{someString = \"some value\"}\\n\\n% This is a comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_parse_failures",
            "name": "test_faulty_block_parsing[no_block_afterwards-preable_without_closing_brace1-@preamble{some preamble}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_parse_failures",
            "name": "test_faulty_block_parsing[no_block_afterwards-preable_without_closing_brace1-\\n]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_parse_failures",
            "name": "test_faulty_block_parsing[no_block_afterwards-preable_without_closing_brace1-% This is a comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_parse_failures",
            "name": "test_faulty_block_parsing[block_afterwards-entry_without_closing_brace-@article{test,\\n    author = \"John Doe\",\\n    title = \"Some title\",\\n}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_parse_failures",
            "name": "test_faulty_block_parsing[block_afterwards-entry_without_closing_brace-@string{someString = \"some value\"}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_parse_failures",
            "name": "test_faulty_block_parsing[block_afterwards-entry_without_closing_brace-@string{someString = \"some value\"}\\n\\n% This is a comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_parse_failures",
            "name": "test_faulty_block_parsing[block_afterwards-entry_without_closing_brace-@preamble{some preamble}]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_parse_failures",
            "name": "test_faulty_block_parsing[block_afterwards-entry_without_closing_brace-\\n]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_parse_failures",
            "name": "test_faulty_block_parsing[block_afterwards-entry_without_closing_brace-% This is a comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_parse_failures",
            "name": "test_faulty_block_parsing[block_afterwards-multiline_entry_without_closing_brace-@article{test,\\n    author = \"John Doe\",\\n    title = \"Some title\",\\n}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_parse_failures",
            "name": "test_faulty_block_parsing[block_afterwards-multiline_entry_without_closing_brace-@string{someString = \"some value\"}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_parse_failures",
            "name": "test_faulty_block_parsing[block_afterwards-multiline_entry_without_closing_brace-@string{someString = \"some value\"}\\n\\n% This is a comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_parse_failures",
            "name": "test_faulty_block_parsing[block_afterwards-multiline_entry_without_closing_brace-@preamble{some preamble}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_parse_failures",
            "name": "test_faulty_block_parsing[block_afterwards-multiline_entry_without_closing_brace-\\n]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_parse_failures",
            "name": "test_faulty_block_parsing[block_afterwards-multiline_entry_without_closing_brace-% This is a comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_parse_failures",
            "name": "test_faulty_block_parsing[block_afterwards-entry_without_field_and_closing_brace-@article{test,\\n    author = \"John Doe\",\\n    title = \"Some title\",\\n}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_parse_failures",
            "name": "test_faulty_block_parsing[block_afterwards-entry_without_field_and_closing_brace-@string{someString = \"some value\"}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_parse_failures",
            "name": "test_faulty_block_parsing[block_afterwards-entry_without_field_and_closing_brace-@string{someString = \"some value\"}\\n\\n% This is a comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_parse_failures",
            "name": "test_faulty_block_parsing[block_afterwards-entry_without_field_and_closing_brace-@preamble{some preamble}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_parse_failures",
            "name": "test_faulty_block_parsing[block_afterwards-entry_without_field_and_closing_brace-\\n]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_parse_failures",
            "name": "test_faulty_block_parsing[block_afterwards-entry_without_field_and_closing_brace-% This is a comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_parse_failures",
            "name": "test_faulty_block_parsing[block_afterwards-entry_only_with_key_no_comma-@article{test,\\n    author = \"John Doe\",\\n    title = \"Some title\",\\n}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_parse_failures",
            "name": "test_faulty_block_parsing[block_afterwards-entry_only_with_key_no_comma-@string{someString = \"some value\"}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_parse_failures",
            "name": "test_faulty_block_parsing[block_afterwards-entry_only_with_key_no_comma-@string{someString = \"some value\"}\\n\\n% This is a comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_parse_failures",
            "name": "test_faulty_block_parsing[block_afterwards-entry_only_with_key_no_comma-@preamble{some preamble}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_parse_failures",
            "name": "test_faulty_block_parsing[block_afterwards-entry_only_with_key_no_comma-\\n]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_parse_failures",
            "name": "test_faulty_block_parsing[block_afterwards-entry_only_with_key_no_comma-% This is a comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_parse_failures",
            "name": "test_faulty_block_parsing[block_afterwards-entry_missing_comma_between_fields-@article{test,\\n    author = \"John Doe\",\\n    title = \"Some title\",\\n}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_parse_failures",
            "name": "test_faulty_block_parsing[block_afterwards-entry_missing_comma_between_fields-@string{someString = \"some value\"}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_parse_failures",
            "name": "test_faulty_block_parsing[block_afterwards-entry_missing_comma_between_fields-@string{someString = \"some value\"}\\n\\n% This is a comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_parse_failures",
            "name": "test_faulty_block_parsing[block_afterwards-entry_missing_comma_between_fields-@preamble{some preamble}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_parse_failures",
            "name": "test_faulty_block_parsing[block_afterwards-entry_missing_comma_between_fields-\\n]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_parse_failures",
            "name": "test_faulty_block_parsing[block_afterwards-entry_missing_comma_between_fields-% This is a comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_parse_failures",
            "name": "test_faulty_block_parsing[block_afterwards-field_missing_closing_brace-@article{test,\\n    author = \"John Doe\",\\n    title = \"Some title\",\\n}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_parse_failures",
            "name": "test_faulty_block_parsing[block_afterwards-field_missing_closing_brace-@string{someString = \"some value\"}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_parse_failures",
            "name": "test_faulty_block_parsing[block_afterwards-field_missing_closing_brace-@string{someString = \"some value\"}\\n\\n% This is a comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_parse_failures",
            "name": "test_faulty_block_parsing[block_afterwards-field_missing_closing_brace-@preamble{some preamble}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_parse_failures",
            "name": "test_faulty_block_parsing[block_afterwards-field_missing_closing_brace-\\n]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_parse_failures",
            "name": "test_faulty_block_parsing[block_afterwards-field_missing_closing_brace-% This is a comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_parse_failures",
            "name": "test_faulty_block_parsing[block_afterwards-field_missing_closing_quote-@article{test,\\n    author = \"John Doe\",\\n    title = \"Some title\",\\n}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_parse_failures",
            "name": "test_faulty_block_parsing[block_afterwards-field_missing_closing_quote-@string{someString = \"some value\"}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_parse_failures",
            "name": "test_faulty_block_parsing[block_afterwards-field_missing_closing_quote-@string{someString = \"some value\"}\\n\\n% This is a comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_parse_failures",
            "name": "test_faulty_block_parsing[block_afterwards-field_missing_closing_quote-@preamble{some preamble}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_parse_failures",
            "name": "test_faulty_block_parsing[block_afterwards-field_missing_closing_quote-\\n]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_parse_failures",
            "name": "test_faulty_block_parsing[block_afterwards-field_missing_closing_quote-% This is a comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_parse_failures",
            "name": "test_faulty_block_parsing[block_afterwards-string_without_closing_brace-@article{test,\\n    author = \"John Doe\",\\n    title = \"Some title\",\\n}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_parse_failures",
            "name": "test_faulty_block_parsing[block_afterwards-string_without_closing_brace-@string{someString = \"some value\"}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_parse_failures",
            "name": "test_faulty_block_parsing[block_afterwards-string_without_closing_brace-@string{someString = \"some value\"}\\n\\n% This is a comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_parse_failures",
            "name": "test_faulty_block_parsing[block_afterwards-string_without_closing_brace-@preamble{some preamble}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_parse_failures",
            "name": "test_faulty_block_parsing[block_afterwards-string_without_closing_brace-\\n]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_parse_failures",
            "name": "test_faulty_block_parsing[block_afterwards-string_without_closing_brace-% This is a comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_parse_failures",
            "name": "test_faulty_block_parsing[block_afterwards-preable_without_closing_brace0-@article{test,\\n    author = \"John Doe\",\\n    title = \"Some title\",\\n}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_parse_failures",
            "name": "test_faulty_block_parsing[block_afterwards-preable_without_closing_brace0-@string{someString = \"some value\"}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_parse_failures",
            "name": "test_faulty_block_parsing[block_afterwards-preable_without_closing_brace0-@string{someString = \"some value\"}\\n\\n% This is a comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_parse_failures",
            "name": "test_faulty_block_parsing[block_afterwards-preable_without_closing_brace0-@preamble{some preamble}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_parse_failures",
            "name": "test_faulty_block_parsing[block_afterwards-preable_without_closing_brace0-\\n]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_parse_failures",
            "name": "test_faulty_block_parsing[block_afterwards-preable_without_closing_brace0-% This is a comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_parse_failures",
            "name": "test_faulty_block_parsing[block_afterwards-preable_without_closing_brace1-@article{test,\\n    author = \"John Doe\",\\n    title = \"Some title\",\\n}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_parse_failures",
            "name": "test_faulty_block_parsing[block_afterwards-preable_without_closing_brace1-@string{someString = \"some value\"}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_parse_failures",
            "name": "test_faulty_block_parsing[block_afterwards-preable_without_closing_brace1-@string{someString = \"some value\"}\\n\\n% This is a comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_parse_failures",
            "name": "test_faulty_block_parsing[block_afterwards-preable_without_closing_brace1-@preamble{some preamble}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_parse_failures",
            "name": "test_faulty_block_parsing[block_afterwards-preable_without_closing_brace1-\\n]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_parse_failures",
            "name": "test_faulty_block_parsing[block_afterwards-preable_without_closing_brace1-% This is a comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_preamble",
            "name": "test_preamble_parsing[ax + b-@article{test,\\n    author = \"John Doe\",\\n    title = \"Some title\",\\n}-@article{test,\\n    author = \"John Doe\",\\n    title = \"Some title\",\\n}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_preamble",
            "name": "test_preamble_parsing[ax + b-@article{test,\\n    author = \"John Doe\",\\n    title = \"Some title\",\\n}-@string{someString = \"some value\"}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_preamble",
            "name": "test_preamble_parsing[ax + b-@article{test,\\n    author = \"John Doe\",\\n    title = \"Some title\",\\n}-@string{someString = \"some value\"}\\n\\n% This is a comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_preamble",
            "name": "test_preamble_parsing[ax + b-@article{test,\\n    author = \"John Doe\",\\n    title = \"Some title\",\\n}-@preamble{some preamble}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_preamble",
            "name": "test_preamble_parsing[ax + b-@article{test,\\n    author = \"John Doe\",\\n    title = \"Some title\",\\n}-\\n]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_preamble",
            "name": "test_preamble_parsing[ax + b-@article{test,\\n    author = \"John Doe\",\\n    title = \"Some title\",\\n}-% This is a comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_preamble",
            "name": "test_preamble_parsing[ax + b-@string{someString = \"some value\"}-@article{test,\\n    author = \"John Doe\",\\n    title = \"Some title\",\\n}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_preamble",
            "name": "test_preamble_parsing[ax + b-@string{someString = \"some value\"}-@string{someString = \"some value\"}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_preamble",
            "name": "test_preamble_parsing[ax + b-@string{someString = \"some value\"}-@string{someString = \"some value\"}\\n\\n% This is a comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_preamble",
            "name": "test_preamble_parsing[ax + b-@string{someString = \"some value\"}-@preamble{some preamble}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_preamble",
            "name": "test_preamble_parsing[ax + b-@string{someString = \"some value\"}-\\n]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_preamble",
            "name": "test_preamble_parsing[ax + b-@string{someString = \"some value\"}-% This is a comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_preamble",
            "name": "test_preamble_parsing[ax + b-@string{someString = \"some value\"}\\n\\n% This is a comment-@article{test,\\n    author = \"John Doe\",\\n    title = \"Some title\",\\n}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_preamble",
            "name": "test_preamble_parsing[ax + b-@string{someString = \"some value\"}\\n\\n% This is a comment-@string{someString = \"some value\"}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_preamble",
            "name": "test_preamble_parsing[ax + b-@string{someString = \"some value\"}\\n\\n% This is a comment-@string{someString = \"some value\"}\\n\\n% This is a comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_preamble",
            "name": "test_preamble_parsing[ax + b-@string{someString = \"some value\"}\\n\\n% This is a comment-@preamble{some preamble}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_preamble",
            "name": "test_preamble_parsing[ax + b-@string{someString = \"some value\"}\\n\\n% This is a comment-\\n]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_preamble",
            "name": "test_preamble_parsing[ax + b-@string{someString = \"some value\"}\\n\\n% This is a comment-% This is a comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_preamble",
            "name": "test_preamble_parsing[ax + b-@preamble{some preamble}-@article{test,\\n    author = \"John Doe\",\\n    title = \"Some title\",\\n}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_preamble",
            "name": "test_preamble_parsing[ax + b-@preamble{some preamble}-@string{someString = \"some value\"}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_preamble",
            "name": "test_preamble_parsing[ax + b-@preamble{some preamble}-@string{someString = \"some value\"}\\n\\n% This is a comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_preamble",
            "name": "test_preamble_parsing[ax + b-@preamble{some preamble}-@preamble{some preamble}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_preamble",
            "name": "test_preamble_parsing[ax + b-@preamble{some preamble}-\\n]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_preamble",
            "name": "test_preamble_parsing[ax + b-@preamble{some preamble}-% This is a comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_preamble",
            "name": "test_preamble_parsing[ax + b-\\n-@article{test,\\n    author = \"John Doe\",\\n    title = \"Some title\",\\n}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_preamble",
            "name": "test_preamble_parsing[ax + b-\\n-@string{someString = \"some value\"}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_preamble",
            "name": "test_preamble_parsing[ax + b-\\n-@string{someString = \"some value\"}\\n\\n% This is a comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_preamble",
            "name": "test_preamble_parsing[ax + b-\\n-@preamble{some preamble}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_preamble",
            "name": "test_preamble_parsing[ax + b-\\n-\\n]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_preamble",
            "name": "test_preamble_parsing[ax + b-\\n-% This is a comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_preamble",
            "name": "test_preamble_parsing[ax + b-% This is a comment-@article{test,\\n    author = \"John Doe\",\\n    title = \"Some title\",\\n}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_preamble",
            "name": "test_preamble_parsing[ax + b-% This is a comment-@string{someString = \"some value\"}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_preamble",
            "name": "test_preamble_parsing[ax + b-% This is a comment-@string{someString = \"some value\"}\\n\\n% This is a comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_preamble",
            "name": "test_preamble_parsing[ax + b-% This is a comment-@preamble{some preamble}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_preamble",
            "name": "test_preamble_parsing[ax + b-% This is a comment-\\n]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_preamble",
            "name": "test_preamble_parsing[ax + b-% This is a comment-% This is a comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_preamble",
            "name": "test_preamble_parsing[ax + b + c-@article{test,\\n    author = \"John Doe\",\\n    title = \"Some title\",\\n}-@article{test,\\n    author = \"John Doe\",\\n    title = \"Some title\",\\n}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_preamble",
            "name": "test_preamble_parsing[ax + b + c-@article{test,\\n    author = \"John Doe\",\\n    title = \"Some title\",\\n}-@string{someString = \"some value\"}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_preamble",
            "name": "test_preamble_parsing[ax + b + c-@article{test,\\n    author = \"John Doe\",\\n    title = \"Some title\",\\n}-@string{someString = \"some value\"}\\n\\n% This is a comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_preamble",
            "name": "test_preamble_parsing[ax + b + c-@article{test,\\n    author = \"John Doe\",\\n    title = \"Some title\",\\n}-@preamble{some preamble}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_preamble",
            "name": "test_preamble_parsing[ax + b + c-@article{test,\\n    author = \"John Doe\",\\n    title = \"Some title\",\\n}-\\n]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_preamble",
            "name": "test_preamble_parsing[ax + b + c-@article{test,\\n    author = \"John Doe\",\\n    title = \"Some title\",\\n}-% This is a comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_preamble",
            "name": "test_preamble_parsing[ax + b + c-@string{someString = \"some value\"}-@article{test,\\n    author = \"John Doe\",\\n    title = \"Some title\",\\n}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_preamble",
            "name": "test_preamble_parsing[ax + b + c-@string{someString = \"some value\"}-@string{someString = \"some value\"}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_preamble",
            "name": "test_preamble_parsing[ax + b + c-@string{someString = \"some value\"}-@string{someString = \"some value\"}\\n\\n% This is a comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_preamble",
            "name": "test_preamble_parsing[ax + b + c-@string{someString = \"some value\"}-@preamble{some preamble}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_preamble",
            "name": "test_preamble_parsing[ax + b + c-@string{someString = \"some value\"}-\\n]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_preamble",
            "name": "test_preamble_parsing[ax + b + c-@string{someString = \"some value\"}-% This is a comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_preamble",
            "name": "test_preamble_parsing[ax + b + c-@string{someString = \"some value\"}\\n\\n% This is a comment-@article{test,\\n    author = \"John Doe\",\\n    title = \"Some title\",\\n}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_preamble",
            "name": "test_preamble_parsing[ax + b + c-@string{someString = \"some value\"}\\n\\n% This is a comment-@string{someString = \"some value\"}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_preamble",
            "name": "test_preamble_parsing[ax + b + c-@string{someString = \"some value\"}\\n\\n% This is a comment-@string{someString = \"some value\"}\\n\\n% This is a comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_preamble",
            "name": "test_preamble_parsing[ax + b + c-@string{someString = \"some value\"}\\n\\n% This is a comment-@preamble{some preamble}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_preamble",
            "name": "test_preamble_parsing[ax + b + c-@string{someString = \"some value\"}\\n\\n% This is a comment-\\n]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_preamble",
            "name": "test_preamble_parsing[ax + b + c-@string{someString = \"some value\"}\\n\\n% This is a comment-% This is a comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_preamble",
            "name": "test_preamble_parsing[ax + b + c-@preamble{some preamble}-@article{test,\\n    author = \"John Doe\",\\n    title = \"Some title\",\\n}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_preamble",
            "name": "test_preamble_parsing[ax + b + c-@preamble{some preamble}-@string{someString = \"some value\"}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_preamble",
            "name": "test_preamble_parsing[ax + b + c-@preamble{some preamble}-@string{someString = \"some value\"}\\n\\n% This is a comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_preamble",
            "name": "test_preamble_parsing[ax + b + c-@preamble{some preamble}-@preamble{some preamble}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_preamble",
            "name": "test_preamble_parsing[ax + b + c-@preamble{some preamble}-\\n]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_preamble",
            "name": "test_preamble_parsing[ax + b + c-@preamble{some preamble}-% This is a comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_preamble",
            "name": "test_preamble_parsing[ax + b + c-\\n-@article{test,\\n    author = \"John Doe\",\\n    title = \"Some title\",\\n}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_preamble",
            "name": "test_preamble_parsing[ax + b + c-\\n-@string{someString = \"some value\"}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_preamble",
            "name": "test_preamble_parsing[ax + b + c-\\n-@string{someString = \"some value\"}\\n\\n% This is a comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_preamble",
            "name": "test_preamble_parsing[ax + b + c-\\n-@preamble{some preamble}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_preamble",
            "name": "test_preamble_parsing[ax + b + c-\\n-\\n]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_preamble",
            "name": "test_preamble_parsing[ax + b + c-\\n-% This is a comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_preamble",
            "name": "test_preamble_parsing[ax + b + c-% This is a comment-@article{test,\\n    author = \"John Doe\",\\n    title = \"Some title\",\\n}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_preamble",
            "name": "test_preamble_parsing[ax + b + c-% This is a comment-@string{someString = \"some value\"}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_preamble",
            "name": "test_preamble_parsing[ax + b + c-% This is a comment-@string{someString = \"some value\"}\\n\\n% This is a comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_preamble",
            "name": "test_preamble_parsing[ax + b + c-% This is a comment-@preamble{some preamble}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_preamble",
            "name": "test_preamble_parsing[ax + b + c-% This is a comment-\\n]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_preamble",
            "name": "test_preamble_parsing[ax + b + c-% This is a comment-% This is a comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_preamble",
            "name": "test_preamble_parsing[a^2 + 2ab + b^2-@article{test,\\n    author = \"John Doe\",\\n    title = \"Some title\",\\n}-@article{test,\\n    author = \"John Doe\",\\n    title = \"Some title\",\\n}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_preamble",
            "name": "test_preamble_parsing[a^2 + 2ab + b^2-@article{test,\\n    author = \"John Doe\",\\n    title = \"Some title\",\\n}-@string{someString = \"some value\"}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_preamble",
            "name": "test_preamble_parsing[a^2 + 2ab + b^2-@article{test,\\n    author = \"John Doe\",\\n    title = \"Some title\",\\n}-@string{someString = \"some value\"}\\n\\n% This is a comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_preamble",
            "name": "test_preamble_parsing[a^2 + 2ab + b^2-@article{test,\\n    author = \"John Doe\",\\n    title = \"Some title\",\\n}-@preamble{some preamble}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_preamble",
            "name": "test_preamble_parsing[a^2 + 2ab + b^2-@article{test,\\n    author = \"John Doe\",\\n    title = \"Some title\",\\n}-\\n]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_preamble",
            "name": "test_preamble_parsing[a^2 + 2ab + b^2-@article{test,\\n    author = \"John Doe\",\\n    title = \"Some title\",\\n}-% This is a comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_preamble",
            "name": "test_preamble_parsing[a^2 + 2ab + b^2-@string{someString = \"some value\"}-@article{test,\\n    author = \"John Doe\",\\n    title = \"Some title\",\\n}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_preamble",
            "name": "test_preamble_parsing[a^2 + 2ab + b^2-@string{someString = \"some value\"}-@string{someString = \"some value\"}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_preamble",
            "name": "test_preamble_parsing[a^2 + 2ab + b^2-@string{someString = \"some value\"}-@string{someString = \"some value\"}\\n\\n% This is a comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_preamble",
            "name": "test_preamble_parsing[a^2 + 2ab + b^2-@string{someString = \"some value\"}-@preamble{some preamble}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_preamble",
            "name": "test_preamble_parsing[a^2 + 2ab + b^2-@string{someString = \"some value\"}-\\n]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_preamble",
            "name": "test_preamble_parsing[a^2 + 2ab + b^2-@string{someString = \"some value\"}-% This is a comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_preamble",
            "name": "test_preamble_parsing[a^2 + 2ab + b^2-@string{someString = \"some value\"}\\n\\n% This is a comment-@article{test,\\n    author = \"John Doe\",\\n    title = \"Some title\",\\n}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_preamble",
            "name": "test_preamble_parsing[a^2 + 2ab + b^2-@string{someString = \"some value\"}\\n\\n% This is a comment-@string{someString = \"some value\"}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_preamble",
            "name": "test_preamble_parsing[a^2 + 2ab + b^2-@string{someString = \"some value\"}\\n\\n% This is a comment-@string{someString = \"some value\"}\\n\\n% This is a comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_preamble",
            "name": "test_preamble_parsing[a^2 + 2ab + b^2-@string{someString = \"some value\"}\\n\\n% This is a comment-@preamble{some preamble}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_preamble",
            "name": "test_preamble_parsing[a^2 + 2ab + b^2-@string{someString = \"some value\"}\\n\\n% This is a comment-\\n]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_preamble",
            "name": "test_preamble_parsing[a^2 + 2ab + b^2-@string{someString = \"some value\"}\\n\\n% This is a comment-% This is a comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_preamble",
            "name": "test_preamble_parsing[a^2 + 2ab + b^2-@preamble{some preamble}-@article{test,\\n    author = \"John Doe\",\\n    title = \"Some title\",\\n}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_preamble",
            "name": "test_preamble_parsing[a^2 + 2ab + b^2-@preamble{some preamble}-@string{someString = \"some value\"}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_preamble",
            "name": "test_preamble_parsing[a^2 + 2ab + b^2-@preamble{some preamble}-@string{someString = \"some value\"}\\n\\n% This is a comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_preamble",
            "name": "test_preamble_parsing[a^2 + 2ab + b^2-@preamble{some preamble}-@preamble{some preamble}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_preamble",
            "name": "test_preamble_parsing[a^2 + 2ab + b^2-@preamble{some preamble}-\\n]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_preamble",
            "name": "test_preamble_parsing[a^2 + 2ab + b^2-@preamble{some preamble}-% This is a comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_preamble",
            "name": "test_preamble_parsing[a^2 + 2ab + b^2-\\n-@article{test,\\n    author = \"John Doe\",\\n    title = \"Some title\",\\n}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_preamble",
            "name": "test_preamble_parsing[a^2 + 2ab + b^2-\\n-@string{someString = \"some value\"}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_preamble",
            "name": "test_preamble_parsing[a^2 + 2ab + b^2-\\n-@string{someString = \"some value\"}\\n\\n% This is a comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_preamble",
            "name": "test_preamble_parsing[a^2 + 2ab + b^2-\\n-@preamble{some preamble}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_preamble",
            "name": "test_preamble_parsing[a^2 + 2ab + b^2-\\n-\\n]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_preamble",
            "name": "test_preamble_parsing[a^2 + 2ab + b^2-\\n-% This is a comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_preamble",
            "name": "test_preamble_parsing[a^2 + 2ab + b^2-% This is a comment-@article{test,\\n    author = \"John Doe\",\\n    title = \"Some title\",\\n}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_preamble",
            "name": "test_preamble_parsing[a^2 + 2ab + b^2-% This is a comment-@string{someString = \"some value\"}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_preamble",
            "name": "test_preamble_parsing[a^2 + 2ab + b^2-% This is a comment-@string{someString = \"some value\"}\\n\\n% This is a comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_preamble",
            "name": "test_preamble_parsing[a^2 + 2ab + b^2-% This is a comment-@preamble{some preamble}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_preamble",
            "name": "test_preamble_parsing[a^2 + 2ab + b^2-% This is a comment-\\n]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_preamble",
            "name": "test_preamble_parsing[a^2 + 2ab + b^2-% This is a comment-% This is a comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_preamble",
            "name": "test_preamble_parsing[\\\\{a_1, a_2, a_3\\\\}-@article{test,\\n    author = \"John Doe\",\\n    title = \"Some title\",\\n}-@article{test,\\n    author = \"John Doe\",\\n    title = \"Some title\",\\n}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_preamble",
            "name": "test_preamble_parsing[\\\\{a_1, a_2, a_3\\\\}-@article{test,\\n    author = \"John Doe\",\\n    title = \"Some title\",\\n}-@string{someString = \"some value\"}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_preamble",
            "name": "test_preamble_parsing[\\\\{a_1, a_2, a_3\\\\}-@article{test,\\n    author = \"John Doe\",\\n    title = \"Some title\",\\n}-@string{someString = \"some value\"}\\n\\n% This is a comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_preamble",
            "name": "test_preamble_parsing[\\\\{a_1, a_2, a_3\\\\}-@article{test,\\n    author = \"John Doe\",\\n    title = \"Some title\",\\n}-@preamble{some preamble}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_preamble",
            "name": "test_preamble_parsing[\\\\{a_1, a_2, a_3\\\\}-@article{test,\\n    author = \"John Doe\",\\n    title = \"Some title\",\\n}-\\n]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_preamble",
            "name": "test_preamble_parsing[\\\\{a_1, a_2, a_3\\\\}-@article{test,\\n    author = \"John Doe\",\\n    title = \"Some title\",\\n}-% This is a comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_preamble",
            "name": "test_preamble_parsing[\\\\{a_1, a_2, a_3\\\\}-@string{someString = \"some value\"}-@article{test,\\n    author = \"John Doe\",\\n    title = \"Some title\",\\n}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_preamble",
            "name": "test_preamble_parsing[\\\\{a_1, a_2, a_3\\\\}-@string{someString = \"some value\"}-@string{someString = \"some value\"}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_preamble",
            "name": "test_preamble_parsing[\\\\{a_1, a_2, a_3\\\\}-@string{someString = \"some value\"}-@string{someString = \"some value\"}\\n\\n% This is a comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_preamble",
            "name": "test_preamble_parsing[\\\\{a_1, a_2, a_3\\\\}-@string{someString = \"some value\"}-@preamble{some preamble}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_preamble",
            "name": "test_preamble_parsing[\\\\{a_1, a_2, a_3\\\\}-@string{someString = \"some value\"}-\\n]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_preamble",
            "name": "test_preamble_parsing[\\\\{a_1, a_2, a_3\\\\}-@string{someString = \"some value\"}-% This is a comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_preamble",
            "name": "test_preamble_parsing[\\\\{a_1, a_2, a_3\\\\}-@string{someString = \"some value\"}\\n\\n% This is a comment-@article{test,\\n    author = \"John Doe\",\\n    title = \"Some title\",\\n}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_preamble",
            "name": "test_preamble_parsing[\\\\{a_1, a_2, a_3\\\\}-@string{someString = \"some value\"}\\n\\n% This is a comment-@string{someString = \"some value\"}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_preamble",
            "name": "test_preamble_parsing[\\\\{a_1, a_2, a_3\\\\}-@string{someString = \"some value\"}\\n\\n% This is a comment-@string{someString = \"some value\"}\\n\\n% This is a comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_preamble",
            "name": "test_preamble_parsing[\\\\{a_1, a_2, a_3\\\\}-@string{someString = \"some value\"}\\n\\n% This is a comment-@preamble{some preamble}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_preamble",
            "name": "test_preamble_parsing[\\\\{a_1, a_2, a_3\\\\}-@string{someString = \"some value\"}\\n\\n% This is a comment-\\n]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_preamble",
            "name": "test_preamble_parsing[\\\\{a_1, a_2, a_3\\\\}-@string{someString = \"some value\"}\\n\\n% This is a comment-% This is a comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_preamble",
            "name": "test_preamble_parsing[\\\\{a_1, a_2, a_3\\\\}-@preamble{some preamble}-@article{test,\\n    author = \"John Doe\",\\n    title = \"Some title\",\\n}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_preamble",
            "name": "test_preamble_parsing[\\\\{a_1, a_2, a_3\\\\}-@preamble{some preamble}-@string{someString = \"some value\"}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_preamble",
            "name": "test_preamble_parsing[\\\\{a_1, a_2, a_3\\\\}-@preamble{some preamble}-@string{someString = \"some value\"}\\n\\n% This is a comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_preamble",
            "name": "test_preamble_parsing[\\\\{a_1, a_2, a_3\\\\}-@preamble{some preamble}-@preamble{some preamble}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_preamble",
            "name": "test_preamble_parsing[\\\\{a_1, a_2, a_3\\\\}-@preamble{some preamble}-\\n]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_preamble",
            "name": "test_preamble_parsing[\\\\{a_1, a_2, a_3\\\\}-@preamble{some preamble}-% This is a comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_preamble",
            "name": "test_preamble_parsing[\\\\{a_1, a_2, a_3\\\\}-\\n-@article{test,\\n    author = \"John Doe\",\\n    title = \"Some title\",\\n}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_preamble",
            "name": "test_preamble_parsing[\\\\{a_1, a_2, a_3\\\\}-\\n-@string{someString = \"some value\"}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_preamble",
            "name": "test_preamble_parsing[\\\\{a_1, a_2, a_3\\\\}-\\n-@string{someString = \"some value\"}\\n\\n% This is a comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_preamble",
            "name": "test_preamble_parsing[\\\\{a_1, a_2, a_3\\\\}-\\n-@preamble{some preamble}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_preamble",
            "name": "test_preamble_parsing[\\\\{a_1, a_2, a_3\\\\}-\\n-\\n]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_preamble",
            "name": "test_preamble_parsing[\\\\{a_1, a_2, a_3\\\\}-\\n-% This is a comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_preamble",
            "name": "test_preamble_parsing[\\\\{a_1, a_2, a_3\\\\}-% This is a comment-@article{test,\\n    author = \"John Doe\",\\n    title = \"Some title\",\\n}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_preamble",
            "name": "test_preamble_parsing[\\\\{a_1, a_2, a_3\\\\}-% This is a comment-@string{someString = \"some value\"}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_preamble",
            "name": "test_preamble_parsing[\\\\{a_1, a_2, a_3\\\\}-% This is a comment-@string{someString = \"some value\"}\\n\\n% This is a comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_preamble",
            "name": "test_preamble_parsing[\\\\{a_1, a_2, a_3\\\\}-% This is a comment-@preamble{some preamble}]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_preamble",
            "name": "test_preamble_parsing[\\\\{a_1, a_2, a_3\\\\}-% This is a comment-\\n]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_preamble",
            "name": "test_preamble_parsing[\\\\{a_1, a_2, a_3\\\\}-% This is a comment-% This is a comment]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_string",
            "name": "test_parse_string_key_val[double_quotes-John Doe-ICSE2022]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_string",
            "name": "test_parse_string_key_val[double_quotes-John Doe-ICSE2022-with-dash]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_string",
            "name": "test_parse_string_key_val[double_quotes-John Doe-ICSE2022_with_underscore]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_string",
            "name": "test_parse_string_key_val[double_quotes-John Doe-ICSE2022_with_underscore_and-dash]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_string",
            "name": "test_parse_string_key_val[double_quotes-\\xe0 {\\\\`a} \\\\`{a}-ICSE2022]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_string",
            "name": "test_parse_string_key_val[double_quotes-\\xe0 {\\\\`a} \\\\`{a}-ICSE2022-with-dash]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_string",
            "name": "test_parse_string_key_val[double_quotes-\\xe0 {\\\\`a} \\\\`{a}-ICSE2022_with_underscore]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_string",
            "name": "test_parse_string_key_val[double_quotes-\\xe0 {\\\\`a} \\\\`{a}-ICSE2022_with_underscore_and-dash]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_string",
            "name": "test_parse_string_key_val[double_quotes-{\\\\`a} {\\\\`a} {\\\\`a}-ICSE2022]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_string",
            "name": "test_parse_string_key_val[double_quotes-{\\\\`a} {\\\\`a} {\\\\`a}-ICSE2022-with-dash]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_string",
            "name": "test_parse_string_key_val[double_quotes-{\\\\`a} {\\\\`a} {\\\\`a}-ICSE2022_with_underscore]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_string",
            "name": "test_parse_string_key_val[double_quotes-{\\\\`a} {\\\\`a} {\\\\`a}-ICSE2022_with_underscore_and-dash]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_string",
            "name": "test_parse_string_key_val[double_quotes-Two Gedenk\\\\\"uberlieferung der Angelsachsen-ICSE2022]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_string",
            "name": "test_parse_string_key_val[double_quotes-Two Gedenk\\\\\"uberlieferung der Angelsachsen-ICSE2022-with-dash]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_string",
            "name": "test_parse_string_key_val[double_quotes-Two Gedenk\\\\\"uberlieferung der Angelsachsen-ICSE2022_with_underscore]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_string",
            "name": "test_parse_string_key_val[double_quotes-Two Gedenk\\\\\"uberlieferung der Angelsachsen-ICSE2022_with_underscore_and-dash]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_string",
            "name": "test_parse_string_key_val[double_quotes-\\\\texttimes{}{\\\\texttimes}\\\\texttimes-ICSE2022]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_string",
            "name": "test_parse_string_key_val[double_quotes-\\\\texttimes{}{\\\\texttimes}\\\\texttimes-ICSE2022-with-dash]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_string",
            "name": "test_parse_string_key_val[double_quotes-\\\\texttimes{}{\\\\texttimes}\\\\texttimes-ICSE2022_with_underscore]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_string",
            "name": "test_parse_string_key_val[double_quotes-\\\\texttimes{}{\\\\texttimes}\\\\texttimes-ICSE2022_with_underscore_and-dash]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_string",
            "name": "test_parse_string_key_val[double_quotes-p\\\\^{a}t\\\\'{e}Title with \\\\{ a curly brace-ICSE2022]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_string",
            "name": "test_parse_string_key_val[double_quotes-p\\\\^{a}t\\\\'{e}Title with \\\\{ a curly brace-ICSE2022-with-dash]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_string",
            "name": "test_parse_string_key_val[double_quotes-p\\\\^{a}t\\\\'{e}Title with \\\\{ a curly brace-ICSE2022_with_underscore]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_string",
            "name": "test_parse_string_key_val[double_quotes-p\\\\^{a}t\\\\'{e}Title with \\\\{ a curly brace-ICSE2022_with_underscore_and-dash]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_string",
            "name": "test_parse_string_key_val[double_quotes-Title with \\\\} a curly brace-ICSE2022]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_string",
            "name": "test_parse_string_key_val[double_quotes-Title with \\\\} a curly brace-ICSE2022-with-dash]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_string",
            "name": "test_parse_string_key_val[double_quotes-Title with \\\\} a curly brace-ICSE2022_with_underscore]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_string",
            "name": "test_parse_string_key_val[double_quotes-Title with \\\\} a curly brace-ICSE2022_with_underscore_and-dash]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_string",
            "name": "test_parse_string_key_val[double_quotes-Title with \\\\{ a curly brace and \\\\} a curly brace-ICSE2022]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_string",
            "name": "test_parse_string_key_val[double_quotes-Title with \\\\{ a curly brace and \\\\} a curly brace-ICSE2022-with-dash]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_string",
            "name": "test_parse_string_key_val[double_quotes-Title with \\\\{ a curly brace and \\\\} a curly brace-ICSE2022_with_underscore]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_string",
            "name": "test_parse_string_key_val[double_quotes-Title with \\\\{ a curly brace and \\\\} a curly brace-ICSE2022_with_underscore_and-dash]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_string",
            "name": "test_parse_string_key_val[double_quotes-Title with \\\\{ a curly brace and \\\\} a curly brace and \\\\{ another curly brace-ICSE2022]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_string",
            "name": "test_parse_string_key_val[double_quotes-Title with \\\\{ a curly brace and \\\\} a curly brace and \\\\{ another curly brace-ICSE2022-with-dash]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_string",
            "name": "test_parse_string_key_val[double_quotes-Title with \\\\{ a curly brace and \\\\} a curly brace and \\\\{ another curly brace-ICSE2022_with_underscore]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_string",
            "name": "test_parse_string_key_val[double_quotes-Title with \\\\{ a curly brace and \\\\} a curly brace and \\\\{ another curly brace-ICSE2022_with_underscore_and-dash]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_string",
            "name": "test_parse_string_key_val[double_quotes-Title with { UnEscaped Curly } Braces-ICSE2022]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_string",
            "name": "test_parse_string_key_val[double_quotes-Title with { UnEscaped Curly } Braces-ICSE2022-with-dash]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_string",
            "name": "test_parse_string_key_val[double_quotes-Title with { UnEscaped Curly } Braces-ICSE2022_with_underscore]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_string",
            "name": "test_parse_string_key_val[double_quotes-Title with { UnEscaped Curly } Braces-ICSE2022_with_underscore_and-dash]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_string",
            "name": "test_parse_string_key_val[double_quotes--ICSE2022]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_string",
            "name": "test_parse_string_key_val[double_quotes--ICSE2022-with-dash]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_string",
            "name": "test_parse_string_key_val[double_quotes--ICSE2022_with_underscore]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_string",
            "name": "test_parse_string_key_val[double_quotes--ICSE2022_with_underscore_and-dash]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_string",
            "name": "test_parse_string_key_val[curly_braces-John Doe-ICSE2022]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_string",
            "name": "test_parse_string_key_val[curly_braces-John Doe-ICSE2022-with-dash]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_string",
            "name": "test_parse_string_key_val[curly_braces-John Doe-ICSE2022_with_underscore]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_string",
            "name": "test_parse_string_key_val[curly_braces-John Doe-ICSE2022_with_underscore_and-dash]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_string",
            "name": "test_parse_string_key_val[curly_braces-\\xe0 {\\\\`a} \\\\`{a}-ICSE2022]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_string",
            "name": "test_parse_string_key_val[curly_braces-\\xe0 {\\\\`a} \\\\`{a}-ICSE2022-with-dash]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_string",
            "name": "test_parse_string_key_val[curly_braces-\\xe0 {\\\\`a} \\\\`{a}-ICSE2022_with_underscore]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_string",
            "name": "test_parse_string_key_val[curly_braces-\\xe0 {\\\\`a} \\\\`{a}-ICSE2022_with_underscore_and-dash]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_string",
            "name": "test_parse_string_key_val[curly_braces-{\\\\`a} {\\\\`a} {\\\\`a}-ICSE2022]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_string",
            "name": "test_parse_string_key_val[curly_braces-{\\\\`a} {\\\\`a} {\\\\`a}-ICSE2022-with-dash]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_string",
            "name": "test_parse_string_key_val[curly_braces-{\\\\`a} {\\\\`a} {\\\\`a}-ICSE2022_with_underscore]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_string",
            "name": "test_parse_string_key_val[curly_braces-{\\\\`a} {\\\\`a} {\\\\`a}-ICSE2022_with_underscore_and-dash]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_string",
            "name": "test_parse_string_key_val[curly_braces-Two Gedenk\\\\\"uberlieferung der Angelsachsen-ICSE2022]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_string",
            "name": "test_parse_string_key_val[curly_braces-Two Gedenk\\\\\"uberlieferung der Angelsachsen-ICSE2022-with-dash]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_string",
            "name": "test_parse_string_key_val[curly_braces-Two Gedenk\\\\\"uberlieferung der Angelsachsen-ICSE2022_with_underscore]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_string",
            "name": "test_parse_string_key_val[curly_braces-Two Gedenk\\\\\"uberlieferung der Angelsachsen-ICSE2022_with_underscore_and-dash]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_string",
            "name": "test_parse_string_key_val[curly_braces-\\\\texttimes{}{\\\\texttimes}\\\\texttimes-ICSE2022]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_string",
            "name": "test_parse_string_key_val[curly_braces-\\\\texttimes{}{\\\\texttimes}\\\\texttimes-ICSE2022-with-dash]",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_string",
            "name": "test_parse_string_key_val[curly_braces-\\\\texttimes{}{\\\\texttimes}\\\\texttimes-ICSE2022_with_underscore]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_string",
            "name": "test_parse_string_key_val[curly_braces-\\\\texttimes{}{\\\\texttimes}\\\\texttimes-ICSE2022_with_underscore_and-dash]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_string",
            "name": "test_parse_string_key_val[curly_braces-p\\\\^{a}t\\\\'{e}Title with \\\\{ a curly brace-ICSE2022]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_string",
            "name": "test_parse_string_key_val[curly_braces-p\\\\^{a}t\\\\'{e}Title with \\\\{ a curly brace-ICSE2022-with-dash]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_string",
            "name": "test_parse_string_key_val[curly_braces-p\\\\^{a}t\\\\'{e}Title with \\\\{ a curly brace-ICSE2022_with_underscore]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_string",
            "name": "test_parse_string_key_val[curly_braces-p\\\\^{a}t\\\\'{e}Title with \\\\{ a curly brace-ICSE2022_with_underscore_and-dash]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_string",
            "name": "test_parse_string_key_val[curly_braces-Title with \\\\} a curly brace-ICSE2022]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_string",
            "name": "test_parse_string_key_val[curly_braces-Title with \\\\} a curly brace-ICSE2022-with-dash]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_string",
            "name": "test_parse_string_key_val[curly_braces-Title with \\\\} a curly brace-ICSE2022_with_underscore]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_string",
            "name": "test_parse_string_key_val[curly_braces-Title with \\\\} a curly brace-ICSE2022_with_underscore_and-dash]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_string",
            "name": "test_parse_string_key_val[curly_braces-Title with \\\\{ a curly brace and \\\\} a curly brace-ICSE2022]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_string",
            "name": "test_parse_string_key_val[curly_braces-Title with \\\\{ a curly brace and \\\\} a curly brace-ICSE2022-with-dash]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_string",
            "name": "test_parse_string_key_val[curly_braces-Title with \\\\{ a curly brace and \\\\} a curly brace-ICSE2022_with_underscore]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_string",
            "name": "test_parse_string_key_val[curly_braces-Title with \\\\{ a curly brace and \\\\} a curly brace-ICSE2022_with_underscore_and-dash]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_string",
            "name": "test_parse_string_key_val[curly_braces-Title with \\\\{ a curly brace and \\\\} a curly brace and \\\\{ another curly brace-ICSE2022]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_string",
            "name": "test_parse_string_key_val[curly_braces-Title with \\\\{ a curly brace and \\\\} a curly brace and \\\\{ another curly brace-ICSE2022-with-dash]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_string",
            "name": "test_parse_string_key_val[curly_braces-Title with \\\\{ a curly brace and \\\\} a curly brace and \\\\{ another curly brace-ICSE2022_with_underscore]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_string",
            "name": "test_parse_string_key_val[curly_braces-Title with \\\\{ a curly brace and \\\\} a curly brace and \\\\{ another curly brace-ICSE2022_with_underscore_and-dash]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_string",
            "name": "test_parse_string_key_val[curly_braces-Title with { UnEscaped Curly } Braces-ICSE2022]",
            "time": 0.003,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_string",
            "name": "test_parse_string_key_val[curly_braces-Title with { UnEscaped Curly } Braces-ICSE2022-with-dash]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_string",
            "name": "test_parse_string_key_val[curly_braces-Title with { UnEscaped Curly } Braces-ICSE2022_with_underscore]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_string",
            "name": "test_parse_string_key_val[curly_braces-Title with { UnEscaped Curly } Braces-ICSE2022_with_underscore_and-dash]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_string",
            "name": "test_parse_string_key_val[curly_braces--ICSE2022]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_string",
            "name": "test_parse_string_key_val[curly_braces--ICSE2022-with-dash]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_string",
            "name": "test_parse_string_key_val[curly_braces--ICSE2022_with_underscore]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_string",
            "name": "test_parse_string_key_val[curly_braces--ICSE2022_with_underscore_and-dash]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_string",
            "name": "test_parse_empty_string[double_quotes]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "tests.splitter_tests.test_splitter_string",
            "name": "test_parse_empty_string[curly_braces]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        }
    ]
}