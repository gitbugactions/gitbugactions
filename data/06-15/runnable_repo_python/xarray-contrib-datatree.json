{
    "repository": "xarray-contrib/datatree",
    "stars": 125,
    "language": "python",
    "size": 368,
    "clone_url": "https://github.com/xarray-contrib/datatree.git",
    "timestamp": "2023-06-16T15:15:45.181076Z",
    "clone_success": true,
    "number of actions": 0,
    "number_of_test_actions": 1,
    "actions_successful": false,
    "number_of_actions": 2,
    "actions_build_tools": [
        "pytest",
        "unknown"
    ],
    "actions_test_build_tools": [
        "pytest"
    ],
    "actions_tests": [
        {
            "classname": "datatree.tests.test_dataset_api.TestDSMethodInheritance",
            "name": "test_dataset_method",
            "time": 0.005,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "datatree.tests.test_dataset_api.TestDSMethodInheritance",
            "name": "test_reduce_method",
            "time": 0.006,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "datatree.tests.test_dataset_api.TestDSMethodInheritance",
            "name": "test_nan_reduce_method",
            "time": 0.005,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "datatree.tests.test_dataset_api.TestDSMethodInheritance",
            "name": "test_cum_method",
            "time": 0.004,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "datatree.tests.test_dataset_api.TestOps",
            "name": "test_binary_op_on_int",
            "time": 0.016,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "datatree.tests.test_dataset_api.TestOps",
            "name": "test_binary_op_on_dataset",
            "time": 0.049,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "datatree.tests.test_dataset_api.TestOps",
            "name": "test_binary_op_on_datatree",
            "time": 0.01,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "datatree.tests.test_dataset_api.TestUFuncs",
            "name": "test_tree",
            "time": 0.014,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "datatree.tests.test_datatree.TestTreeCreation",
            "name": "test_empty",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "datatree.tests.test_datatree.TestTreeCreation",
            "name": "test_unnamed",
            "time": 0.007,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "datatree.tests.test_datatree.TestTreeCreation",
            "name": "test_bad_names",
            "time": 0.005,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "datatree.tests.test_datatree.TestFamilyTree",
            "name": "test_setparent_unnamed_child_node_fails",
            "time": 0.004,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "datatree.tests.test_datatree.TestFamilyTree",
            "name": "test_create_two_children",
            "time": 0.008,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "datatree.tests.test_datatree.TestFamilyTree",
            "name": "test_create_full_tree",
            "time": 0.018,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "datatree.tests.test_datatree.TestNames",
            "name": "test_child_gets_named_on_attach",
            "time": 0.004,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "datatree.tests.test_datatree.TestPaths",
            "name": "test_path_property",
            "time": 0.005,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "datatree.tests.test_datatree.TestPaths",
            "name": "test_path_roundtrip",
            "time": 0.005,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "datatree.tests.test_datatree.TestPaths",
            "name": "test_same_tree",
            "time": 0.005,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "datatree.tests.test_datatree.TestPaths",
            "name": "test_relative_paths",
            "time": 0.008,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "datatree.tests.test_datatree.TestStoreDatasets",
            "name": "test_create_with_data",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "datatree.tests.test_datatree.TestStoreDatasets",
            "name": "test_set_data",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "datatree.tests.test_datatree.TestStoreDatasets",
            "name": "test_has_data",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "datatree.tests.test_datatree.TestVariablesChildrenNameCollisions",
            "name": "test_parent_already_has_variable_with_childs_name",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "datatree.tests.test_datatree.TestVariablesChildrenNameCollisions",
            "name": "test_assign_when_already_child_with_variables_name",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "datatree.tests.test_datatree.TestGetItem",
            "name": "test_getitem_node",
            "time": 0.033,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "datatree.tests.test_datatree.TestGetItem",
            "name": "test_getitem_self",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "datatree.tests.test_datatree.TestGetItem",
            "name": "test_getitem_single_data_variable",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "datatree.tests.test_datatree.TestGetItem",
            "name": "test_getitem_single_data_variable_from_node",
            "time": 0.003,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "datatree.tests.test_datatree.TestGetItem",
            "name": "test_getitem_nonexistent_node",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "datatree.tests.test_datatree.TestGetItem",
            "name": "test_getitem_nonexistent_variable",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "datatree.tests.test_datatree.TestGetItem",
            "name": "test_getitem_multiple_data_variables",
            "time": 0.002,
            "results": [
                {
                    "result": "Skipped",
                    "message": "Should be deprecated in favour of .subset",
                    "type": "pytest.xfail"
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "datatree.tests.test_datatree.TestGetItem",
            "name": "test_getitem_dict_like_selection_access_to_dataset",
            "time": 0.003,
            "results": [
                {
                    "result": "Skipped",
                    "message": "Indexing needs to return whole tree (GH #77)",
                    "type": "pytest.xfail"
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "datatree.tests.test_datatree.TestUpdate",
            "name": "test_update",
            "time": 0.004,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "datatree.tests.test_datatree.TestUpdate",
            "name": "test_update_new_named_dataarray",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "datatree.tests.test_datatree.TestUpdate",
            "name": "test_update_doesnt_alter_child_name",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "datatree.tests.test_datatree.TestUpdate",
            "name": "test_update_overwrite",
            "time": 0.008,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "datatree.tests.test_datatree.TestCopy",
            "name": "test_copy",
            "time": 0.022,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "datatree.tests.test_datatree.TestCopy",
            "name": "test_copy_subtree",
            "time": 0.008,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "datatree.tests.test_datatree.TestCopy",
            "name": "test_deepcopy",
            "time": 0.027,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "datatree.tests.test_datatree.TestCopy",
            "name": "test_copy_with_data",
            "time": 0.005,
            "results": [
                {
                    "result": "Skipped",
                    "message": "data argument not yet implemented",
                    "type": "pytest.xfail"
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "datatree.tests.test_datatree.TestSetItem",
            "name": "test_setitem_new_child_node",
            "time": 0.003,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "datatree.tests.test_datatree.TestSetItem",
            "name": "test_setitem_unnamed_child_node_becomes_named",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "datatree.tests.test_datatree.TestSetItem",
            "name": "test_setitem_new_grandchild_node",
            "time": 0.005,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "datatree.tests.test_datatree.TestSetItem",
            "name": "test_grafted_subtree_retains_name",
            "time": 0.004,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "datatree.tests.test_datatree.TestSetItem",
            "name": "test_setitem_new_empty_node",
            "time": 0.004,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "datatree.tests.test_datatree.TestSetItem",
            "name": "test_setitem_overwrite_data_in_node_with_none",
            "time": 0.004,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "datatree.tests.test_datatree.TestSetItem",
            "name": "test_setitem_dataset_on_this_node",
            "time": 0.004,
            "results": [
                {
                    "result": "Skipped",
                    "message": "assigning Datasets doesn't yet create new nodes",
                    "type": "pytest.xfail"
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "datatree.tests.test_datatree.TestSetItem",
            "name": "test_setitem_dataset_as_new_node",
            "time": 0.004,
            "results": [
                {
                    "result": "Skipped",
                    "message": "assigning Datasets doesn't yet create new nodes",
                    "type": "pytest.xfail"
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "datatree.tests.test_datatree.TestSetItem",
            "name": "test_setitem_dataset_as_new_node_requiring_intermediate_nodes",
            "time": 0.006,
            "results": [
                {
                    "result": "Skipped",
                    "message": "assigning Datasets doesn't yet create new nodes",
                    "type": "pytest.xfail"
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "datatree.tests.test_datatree.TestSetItem",
            "name": "test_setitem_named_dataarray",
            "time": 0.004,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "datatree.tests.test_datatree.TestSetItem",
            "name": "test_setitem_unnamed_dataarray",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "datatree.tests.test_datatree.TestSetItem",
            "name": "test_setitem_variable",
            "time": 0.003,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "datatree.tests.test_datatree.TestSetItem",
            "name": "test_setitem_coerce_to_dataarray",
            "time": 0.003,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "datatree.tests.test_datatree.TestSetItem",
            "name": "test_setitem_add_new_variable_to_empty_node",
            "time": 0.004,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "datatree.tests.test_datatree.TestSetItem",
            "name": "test_setitem_dataarray_replace_existing_node",
            "time": 0.004,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "datatree.tests.test_datatree.TestTreeFromDict",
            "name": "test_data_in_root",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "datatree.tests.test_datatree.TestTreeFromDict",
            "name": "test_one_layer",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "datatree.tests.test_datatree.TestTreeFromDict",
            "name": "test_two_layers",
            "time": 0.003,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "datatree.tests.test_datatree.TestTreeFromDict",
            "name": "test_nones",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "datatree.tests.test_datatree.TestTreeFromDict",
            "name": "test_full",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "datatree.tests.test_datatree.TestTreeFromDict",
            "name": "test_datatree_values",
            "time": 0.003,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "datatree.tests.test_datatree.TestTreeFromDict",
            "name": "test_roundtrip",
            "time": 0.003,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "datatree.tests.test_datatree.TestTreeFromDict",
            "name": "test_roundtrip_unnamed_root",
            "time": 0.03,
            "results": [
                {
                    "result": "Skipped",
                    "message": "",
                    "type": "pytest.xfail"
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "datatree.tests.test_datatree.TestDatasetView",
            "name": "test_view_contents",
            "time": 0.065,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "datatree.tests.test_datatree.TestDatasetView",
            "name": "test_immutability",
            "time": 0.006,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "datatree.tests.test_datatree.TestDatasetView",
            "name": "test_methods",
            "time": 0.015,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "datatree.tests.test_datatree.TestDatasetView",
            "name": "test_arithmetic",
            "time": 0.006,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "datatree.tests.test_datatree.TestDatasetView",
            "name": "test_init_via_type",
            "time": 0.012,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "datatree.tests.test_datatree.TestAccess",
            "name": "test_attribute_access",
            "time": 0.009,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "datatree.tests.test_datatree.TestAccess",
            "name": "test_ipython_key_completions",
            "time": 0.003,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "datatree.tests.test_datatree.TestRestructuring",
            "name": "test_drop_nodes",
            "time": 0.004,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "datatree.tests.test_datatree.TestRestructuring",
            "name": "test_assign",
            "time": 0.009,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "datatree.tests.test_datatree.TestPipe",
            "name": "test_noop",
            "time": 0.005,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "datatree.tests.test_datatree.TestPipe",
            "name": "test_params",
            "time": 0.01,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "datatree.tests.test_datatree.TestPipe",
            "name": "test_named_self",
            "time": 0.003,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "datatree.tests.test_datatree.TestSubset",
            "name": "test_filter",
            "time": 0.008,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "datatree.tests.test_extensions.TestAccessor",
            "name": "test_register",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "datatree.tests.test_formatting.TestRepr",
            "name": "test_print_empty_node",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "datatree.tests.test_formatting.TestRepr",
            "name": "test_print_empty_node_with_attrs",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "datatree.tests.test_formatting.TestRepr",
            "name": "test_print_node_with_data",
            "time": 0.003,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "datatree.tests.test_formatting.TestRepr",
            "name": "test_nested_node",
            "time": 0.003,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "datatree.tests.test_formatting.TestRepr",
            "name": "test_print_datatree",
            "time": 0.007,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "datatree.tests.test_formatting.TestRepr",
            "name": "test_repr_of_node_with_data",
            "time": 0.005,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "datatree.tests.test_formatting.TestDiffFormatting",
            "name": "test_diff_structure",
            "time": 0.003,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "datatree.tests.test_formatting.TestDiffFormatting",
            "name": "test_diff_node_names",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "datatree.tests.test_formatting.TestDiffFormatting",
            "name": "test_diff_node_data",
            "time": 0.007,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "datatree.tests.test_formatting_html.Test_summarize_children",
            "name": "test_empty_mapping",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "datatree.tests.test_formatting_html.Test_summarize_children",
            "name": "test_one_child",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "datatree.tests.test_formatting_html.Test_summarize_children",
            "name": "test_two_children",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "datatree.tests.test_formatting_html.Test__wrap_repr",
            "name": "test_end[some html]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "datatree.tests.test_formatting_html.Test__wrap_repr",
            "name": "test_not_end[some html]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "datatree.tests.test_formatting_html.Test__wrap_repr",
            "name": "test_end[some other html]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "datatree.tests.test_formatting_html.Test__wrap_repr",
            "name": "test_not_end[some other html]",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "datatree.tests.test_io.TestIO",
            "name": "test_to_netcdf",
            "time": 0.145,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "datatree.tests.test_io.TestIO",
            "name": "test_netcdf_encoding",
            "time": 0.154,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "datatree.tests.test_io.TestIO",
            "name": "test_to_h5netcdf",
            "time": 0.225,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "datatree.tests.test_io.TestIO",
            "name": "test_to_zarr",
            "time": 0.145,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "datatree.tests.test_io.TestIO",
            "name": "test_zarr_encoding",
            "time": 0.082,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "datatree.tests.test_io.TestIO",
            "name": "test_to_zarr_zip_store",
            "time": 0.078,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "datatree.tests.test_io.TestIO",
            "name": "test_to_zarr_not_consolidated",
            "time": 0.069,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "datatree.tests.test_mapping.TestCheckTreesIsomorphic",
            "name": "test_not_a_tree",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "datatree.tests.test_mapping.TestCheckTreesIsomorphic",
            "name": "test_different_widths",
            "time": 0.004,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "datatree.tests.test_mapping.TestCheckTreesIsomorphic",
            "name": "test_different_heights",
            "time": 0.004,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "datatree.tests.test_mapping.TestCheckTreesIsomorphic",
            "name": "test_names_different",
            "time": 0.003,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "datatree.tests.test_mapping.TestCheckTreesIsomorphic",
            "name": "test_isomorphic_names_equal",
            "time": 0.004,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "datatree.tests.test_mapping.TestCheckTreesIsomorphic",
            "name": "test_isomorphic_ordering",
            "time": 0.004,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "datatree.tests.test_mapping.TestCheckTreesIsomorphic",
            "name": "test_isomorphic_names_not_equal",
            "time": 0.003,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "datatree.tests.test_mapping.TestCheckTreesIsomorphic",
            "name": "test_not_isomorphic_complex_tree",
            "time": 0.005,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "datatree.tests.test_mapping.TestCheckTreesIsomorphic",
            "name": "test_checking_from_root",
            "time": 0.005,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "datatree.tests.test_mapping.TestMapOverSubTree",
            "name": "test_no_trees_passed",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "datatree.tests.test_mapping.TestMapOverSubTree",
            "name": "test_not_isomorphic",
            "time": 0.009,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "datatree.tests.test_mapping.TestMapOverSubTree",
            "name": "test_no_trees_returned",
            "time": 0.006,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "datatree.tests.test_mapping.TestMapOverSubTree",
            "name": "test_single_dt_arg",
            "time": 0.011,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "datatree.tests.test_mapping.TestMapOverSubTree",
            "name": "test_single_dt_arg_plus_args_and_kwargs",
            "time": 0.01,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "datatree.tests.test_mapping.TestMapOverSubTree",
            "name": "test_multiple_dt_args",
            "time": 0.012,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "datatree.tests.test_mapping.TestMapOverSubTree",
            "name": "test_dt_as_kwarg",
            "time": 0.011,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "datatree.tests.test_mapping.TestMapOverSubTree",
            "name": "test_return_multiple_dts",
            "time": 0.017,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "datatree.tests.test_mapping.TestMapOverSubTree",
            "name": "test_return_wrong_type",
            "time": 0.004,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "datatree.tests.test_mapping.TestMapOverSubTree",
            "name": "test_return_tuple_of_wrong_types",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "datatree.tests.test_mapping.TestMapOverSubTree",
            "name": "test_return_inconsistent_number_of_results",
            "time": 0.002,
            "results": [
                {
                    "result": "Skipped",
                    "message": "",
                    "type": "pytest.xfail"
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "datatree.tests.test_mapping.TestMapOverSubTree",
            "name": "test_wrong_number_of_arguments_for_func",
            "time": 0.002,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "datatree.tests.test_mapping.TestMapOverSubTree",
            "name": "test_map_single_dataset_against_whole_tree",
            "time": 0.01,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "datatree.tests.test_mapping.TestMapOverSubTree",
            "name": "test_trees_with_different_node_names",
            "time": 0.001,
            "results": [
                {
                    "result": "Skipped",
                    "message": "",
                    "type": "pytest.xfail"
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "datatree.tests.test_mapping.TestMapOverSubTree",
            "name": "test_dt_method",
            "time": 0.007,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "datatree.tests.test_mapping.TestMapOverSubTree",
            "name": "test_discard_ancestry",
            "time": 0.004,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "datatree.tests.test_mapping.TestMutableOperations",
            "name": "test_construct_using_type",
            "time": 0.055,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "datatree.tests.test_mapping.TestMutableOperations",
            "name": "test_alter_inplace",
            "time": 0.008,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "datatree.tests.test_mapping.TestMapOverSubTreeInplace",
            "name": "test_map_over_subtree_inplace",
            "time": 0.017,
            "results": [
                {
                    "result": "Skipped",
                    "message": "",
                    "type": "pytest.xfail"
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "datatree.tests.test_treenode.TestFamilyTree",
            "name": "test_lonely",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "datatree.tests.test_treenode.TestFamilyTree",
            "name": "test_parenting",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "datatree.tests.test_treenode.TestFamilyTree",
            "name": "test_no_time_traveller_loops",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "datatree.tests.test_treenode.TestFamilyTree",
            "name": "test_parent_swap",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "datatree.tests.test_treenode.TestFamilyTree",
            "name": "test_multi_child_family",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "datatree.tests.test_treenode.TestFamilyTree",
            "name": "test_disown_child",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "datatree.tests.test_treenode.TestFamilyTree",
            "name": "test_doppelganger_child",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "datatree.tests.test_treenode.TestFamilyTree",
            "name": "test_sibling_relationships",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "datatree.tests.test_treenode.TestFamilyTree",
            "name": "test_ancestors",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "datatree.tests.test_treenode.TestGetNodes",
            "name": "test_get_child",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "datatree.tests.test_treenode.TestGetNodes",
            "name": "test_get_upwards",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "datatree.tests.test_treenode.TestGetNodes",
            "name": "test_get_from_root",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "datatree.tests.test_treenode.TestSetNodes",
            "name": "test_set_child_node",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "datatree.tests.test_treenode.TestSetNodes",
            "name": "test_child_already_exists",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "datatree.tests.test_treenode.TestSetNodes",
            "name": "test_set_grandchild",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "datatree.tests.test_treenode.TestSetNodes",
            "name": "test_create_intermediate_child",
            "time": 0.016,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "datatree.tests.test_treenode.TestSetNodes",
            "name": "test_overwrite_child",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "datatree.tests.test_treenode.TestPruning",
            "name": "test_del_child",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "datatree.tests.test_treenode.TestIterators",
            "name": "test_preorderiter",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "datatree.tests.test_treenode.TestIterators",
            "name": "test_levelorderiter",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "datatree.tests.test_treenode.TestAncestry",
            "name": "test_lineage",
            "time": 0.071,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "datatree.tests.test_treenode.TestAncestry",
            "name": "test_ancestors",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "datatree.tests.test_treenode.TestAncestry",
            "name": "test_subtree",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "datatree.tests.test_treenode.TestAncestry",
            "name": "test_descendants",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "datatree.tests.test_treenode.TestAncestry",
            "name": "test_leaves",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "datatree.tests.test_treenode.TestAncestry",
            "name": "test_levels",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "datatree.tests.test_treenode.TestRenderTree",
            "name": "test_render_nodetree",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        },
        {
            "classname": "datatree.tests.test_version",
            "name": "test_version",
            "time": 0.001,
            "results": [
                {
                    "result": "Passed",
                    "message": "",
                    "type": ""
                }
            ],
            "stdout": null,
            "stderr": null
        }
    ]
}