{
    "repository": "naver/cover-checker",
    "stars": 61,
    "language": "java",
    "size": 325,
    "clone_url": "https://github.com/naver/cover-checker.git",
    "timestamp": "2023-06-15T17:13:52.920069Z",
    "clone_success": true,
    "number of actions": 0,
    "number_of_test_actions": 1,
    "actions_successful": false,
    "number_of_actions": 1,
    "actions_build_tools": [
        "gradle"
    ],
    "actions_test_build_tools": [
        "gradle"
    ],
    "actions_data": {
        "failed": true,
        "tests": [],
        "stdout": "[cover-checker test and get coverage/test-window] \ud83d\ude80  Start image=crawlergpt:latest\n[cover-checker test and get coverage/test-linux ] \ud83d\ude80  Start image=crawlergpt:latest\n[cover-checker test and get coverage/test-macos ] \ud83d\ude80  Start image=crawlergpt:latest\n[cover-checker test and get coverage/test-window]   \ud83d\udc33  docker pull image=crawlergpt:latest platform= username= forcePull=false\n[cover-checker test and get coverage/test-linux ]   \ud83d\udc33  docker pull image=crawlergpt:latest platform= username= forcePull=false\n[cover-checker test and get coverage/test-macos ]   \ud83d\udc33  docker pull image=crawlergpt:latest platform= username= forcePull=false\n[cover-checker test and get coverage/test-linux ]   \ud83d\udc33  docker create image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[cover-checker test and get coverage/test-window]   \ud83d\udc33  docker create image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[cover-checker test and get coverage/test-macos ]   \ud83d\udc33  docker create image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[cover-checker test and get coverage/test-macos ]   \ud83d\udc33  docker run image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[cover-checker test and get coverage/test-window]   \ud83d\udc33  docker run image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[cover-checker test and get coverage/test-linux ]   \ud83d\udc33  docker run image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[cover-checker test and get coverage/test-window]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /tmp/569e0364-0b80-11ee-a890-af2cc187fc11/naver-cover-checker] user=0 workdir=\n[cover-checker test and get coverage/test-linux ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /tmp/569e0364-0b80-11ee-a890-af2cc187fc11/naver-cover-checker] user=0 workdir=\n[cover-checker test and get coverage/test-macos ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /tmp/569e0364-0b80-11ee-a890-af2cc187fc11/naver-cover-checker] user=0 workdir=\n[cover-checker test and get coverage/test-macos ]   \u2601  git clone 'https://github.com/actions/setup-java' # ref=v1\n[cover-checker test and get coverage/test-linux ]   \u2601  git clone 'https://github.com/actions/setup-java' # ref=v1\n[cover-checker test and get coverage/test-window]   \u2601  git clone 'https://github.com/actions/setup-java' # ref=v1\n[cover-checker test and get coverage/test-macos ] Non-terminating error while running 'git clone': some refs were not updated\n[cover-checker test and get coverage/test-macos ] \u2b50 Run Main actions/checkout@v2\n[cover-checker test and get coverage/test-linux ] Non-terminating error while running 'git clone': some refs were not updated\n[cover-checker test and get coverage/test-macos ]   \u2705  Success - Main actions/checkout@v2\n[cover-checker test and get coverage/test-linux ] \u2b50 Run Main actions/checkout@v2\n[cover-checker test and get coverage/test-window] Non-terminating error while running 'git clone': some refs were not updated\n[cover-checker test and get coverage/test-linux ]   \u2705  Success - Main actions/checkout@v2\n[cover-checker test and get coverage/test-window] \u2b50 Run Main actions/checkout@v2\n[cover-checker test and get coverage/test-window]   \u2705  Success - Main actions/checkout@v2\n[cover-checker test and get coverage/test-macos ] \u2b50 Run Main Set up JDK 1.8\n[cover-checker test and get coverage/test-macos ]   \ud83d\udc33  docker cp src=/home/andre-silva/.cache/act/actions-setup-java@v1/ dst=/var/run/act/actions/actions-setup-java@v1/\n[cover-checker test and get coverage/test-linux ] \u2b50 Run Main Set up JDK 1.8\n[cover-checker test and get coverage/test-window] \u2b50 Run Main Set up JDK 1.8\n[cover-checker test and get coverage/test-linux ]   \ud83d\udc33  docker cp src=/home/andre-silva/.cache/act/actions-setup-java@v1/ dst=/var/run/act/actions/actions-setup-java@v1/\n[cover-checker test and get coverage/test-macos ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /var/run/act/actions/actions-setup-java@v1/] user=0 workdir=\n[cover-checker test and get coverage/test-window]   \ud83d\udc33  docker cp src=/home/andre-silva/.cache/act/actions-setup-java@v1/ dst=/var/run/act/actions/actions-setup-java@v1/\n[cover-checker test and get coverage/test-macos ]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/actions-setup-java@v1/dist/setup/index.js] user= workdir=\n[cover-checker test and get coverage/test-linux ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /var/run/act/actions/actions-setup-java@v1/] user=0 workdir=\n[cover-checker test and get coverage/test-macos ]   \ud83d\udcac  ::debug::isExplicit: \n[cover-checker test and get coverage/test-macos ]   \ud83d\udcac  ::debug::explicit? false\n[cover-checker test and get coverage/test-macos ]   \ud83d\udcac  ::debug::evaluating 0 versions\n[cover-checker test and get coverage/test-macos ]   \ud83d\udcac  ::debug::match not found\n[cover-checker test and get coverage/test-macos ]   \ud83d\udcac  ::debug::Downloading JDK from Azul\n[cover-checker test and get coverage/test-linux ]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/actions-setup-java@v1/dist/setup/index.js] user= workdir=\n[cover-checker test and get coverage/test-window]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /var/run/act/actions/actions-setup-java@v1/] user=0 workdir=\n[cover-checker test and get coverage/test-window]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/actions-setup-java@v1/dist/setup/index.js] user= workdir=\n[cover-checker test and get coverage/test-linux ]   \ud83d\udcac  ::debug::isExplicit: \n[cover-checker test and get coverage/test-linux ]   \ud83d\udcac  ::debug::explicit? false\n[cover-checker test and get coverage/test-linux ]   \ud83d\udcac  ::debug::evaluating 0 versions\n[cover-checker test and get coverage/test-linux ]   \ud83d\udcac  ::debug::match not found\n[cover-checker test and get coverage/test-linux ]   \ud83d\udcac  ::debug::Downloading JDK from Azul\n[cover-checker test and get coverage/test-macos ]   \ud83d\udcac  ::debug::Searching for files with extension: -linux_x64.tar.gz\n[cover-checker test and get coverage/test-macos ]   \ud83d\udcac  ::debug::Downloading https://static.azul.com/zulu/bin/zulu8.70.0.23-ca-jdk8.0.372-linux_x64.tar.gz\n[cover-checker test and get coverage/test-macos ]   \ud83d\udcac  ::debug::Downloading /tmp/5f52d864-fd44-433c-9c84-b326131a53e9\n[cover-checker test and get coverage/test-window]   \ud83d\udcac  ::debug::isExplicit: \n[cover-checker test and get coverage/test-window]   \ud83d\udcac  ::debug::explicit? false\n[cover-checker test and get coverage/test-window]   \ud83d\udcac  ::debug::evaluating 0 versions\n[cover-checker test and get coverage/test-window]   \ud83d\udcac  ::debug::match not found\n[cover-checker test and get coverage/test-window]   \ud83d\udcac  ::debug::Downloading JDK from Azul\n[cover-checker test and get coverage/test-window]   \ud83d\udcac  ::debug::Searching for files with extension: -linux_x64.tar.gz\n[cover-checker test and get coverage/test-window]   \ud83d\udcac  ::debug::Downloading https://static.azul.com/zulu/bin/zulu8.70.0.23-ca-jdk8.0.372-linux_x64.tar.gz\n[cover-checker test and get coverage/test-window]   \ud83d\udcac  ::debug::Downloading /tmp/2934bf0b-8bed-4b6a-b97e-5379444a78b6\n[cover-checker test and get coverage/test-linux ]   \ud83d\udcac  ::debug::Searching for files with extension: -linux_x64.tar.gz\n[cover-checker test and get coverage/test-linux ]   \ud83d\udcac  ::debug::Downloading https://static.azul.com/zulu/bin/zulu8.70.0.23-ca-jdk8.0.372-linux_x64.tar.gz\n[cover-checker test and get coverage/test-linux ]   \ud83d\udcac  ::debug::Downloading /tmp/fa4b1c6b-686e-424f-86ef-dc6de4f9c614\n[cover-checker test and get coverage/test-macos ]   \ud83d\udcac  ::debug::download complete\n[cover-checker test and get coverage/test-macos ]   | [command]/usr/bin/tar --version\n[cover-checker test and get coverage/test-macos ]   | tar (GNU tar) 1.30\n[cover-checker test and get coverage/test-macos ]   | Copyright (C) 2017 Free Software Foundation, Inc.\n[cover-checker test and get coverage/test-macos ]   | License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\n[cover-checker test and get coverage/test-macos ]   | This is free software: you are free to change and redistribute it.\n[cover-checker test and get coverage/test-macos ]   | There is NO WARRANTY, to the extent permitted by law.\n[cover-checker test and get coverage/test-macos ]   | \n[cover-checker test and get coverage/test-macos ]   | Written by John Gilmore and Jay Fenlason.\n[cover-checker test and get coverage/test-macos ]   | [command]/usr/bin/tar xz --warning=no-unknown-keyword -C /tmp/temp_1436650272 -f /tmp/5f52d864-fd44-433c-9c84-b326131a53e9\n[cover-checker test and get coverage/test-window]   \ud83d\udcac  ::debug::download complete\n[cover-checker test and get coverage/test-window]   | [command]/usr/bin/tar --version\n[cover-checker test and get coverage/test-window]   | tar (GNU tar) 1.30\n[cover-checker test and get coverage/test-window]   | Copyright (C) 2017 Free Software Foundation, Inc.\n[cover-checker test and get coverage/test-window]   | License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\n[cover-checker test and get coverage/test-window]   | This is free software: you are free to change and redistribute it.\n[cover-checker test and get coverage/test-window]   | There is NO WARRANTY, to the extent permitted by law.\n[cover-checker test and get coverage/test-window]   | \n[cover-checker test and get coverage/test-window]   | Written by John Gilmore and Jay Fenlason.\n[cover-checker test and get coverage/test-window]   | [command]/usr/bin/tar xz --warning=no-unknown-keyword -C /tmp/temp_41287239 -f /tmp/2934bf0b-8bed-4b6a-b97e-5379444a78b6\n[cover-checker test and get coverage/test-macos ]   \ud83d\udcac  ::debug::jdk extracted to /tmp/temp_1436650272/zulu8.70.0.23-ca-jdk8.0.372-linux_x64\n[cover-checker test and get coverage/test-macos ]   \ud83d\udcac  ::debug::Caching tool jdk 8.0.372 x64\n[cover-checker test and get coverage/test-macos ]   \ud83d\udcac  ::debug::source dir: /tmp/temp_1436650272/zulu8.70.0.23-ca-jdk8.0.372-linux_x64\n[cover-checker test and get coverage/test-macos ]   \ud83d\udcac  ::debug::destination /opt/hostedtoolcache/jdk/8.0.372/x64\n[cover-checker test and get coverage/test-window]   \ud83d\udcac  ::debug::jdk extracted to /tmp/temp_41287239/zulu8.70.0.23-ca-jdk8.0.372-linux_x64\n[cover-checker test and get coverage/test-window]   \ud83d\udcac  ::debug::Caching tool jdk 8.0.372 x64\n[cover-checker test and get coverage/test-window]   \ud83d\udcac  ::debug::source dir: /tmp/temp_41287239/zulu8.70.0.23-ca-jdk8.0.372-linux_x64\n[cover-checker test and get coverage/test-window]   \ud83d\udcac  ::debug::destination /opt/hostedtoolcache/jdk/8.0.372/x64\n[cover-checker test and get coverage/test-linux ]   \ud83d\udcac  ::debug::download complete\n[cover-checker test and get coverage/test-linux ]   | [command]/usr/bin/tar --version\n[cover-checker test and get coverage/test-linux ]   | tar (GNU tar) 1.30\n[cover-checker test and get coverage/test-linux ]   | Copyright (C) 2017 Free Software Foundation, Inc.\n[cover-checker test and get coverage/test-linux ]   | License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\n[cover-checker test and get coverage/test-linux ]   | This is free software: you are free to change and redistribute it.\n[cover-checker test and get coverage/test-linux ]   | There is NO WARRANTY, to the extent permitted by law.\n[cover-checker test and get coverage/test-linux ]   | \n[cover-checker test and get coverage/test-linux ]   | Written by John Gilmore and Jay Fenlason.\n[cover-checker test and get coverage/test-linux ]   | [command]/usr/bin/tar xz --warning=no-unknown-keyword -C /tmp/temp_604618800 -f /tmp/fa4b1c6b-686e-424f-86ef-dc6de4f9c614\n[cover-checker test and get coverage/test-macos ]   \ud83d\udcac  ::debug::finished caching tool\n[cover-checker test and get coverage/test-macos ]   \u2753 add-matcher /run/act/actions/actions-setup-java@v1/.github/java.json\n[cover-checker test and get coverage/test-macos ]   | creating settings.xml with server-id: github; environment variables: username=$GITHUB_ACTOR, password=$GITHUB_TOKEN, and gpg-passphrase=null\n[cover-checker test and get coverage/test-macos ]   \ud83d\udcac  ::debug::created directory /home/runneradmin/.m2\n[cover-checker test and get coverage/test-macos ]   | writing /home/runneradmin/.m2/settings.xml\n[cover-checker test and get coverage/test-macos ]   \u2705  Success - Main Set up JDK 1.8\n[cover-checker test and get coverage/test-macos ]   \u2699  ::set-env:: JAVA_HOME_8.0.372_x64=/opt/hostedtoolcache/jdk/8.0.372/x64\n[cover-checker test and get coverage/test-macos ]   \u2699  ::set-env:: JAVA_HOME=/opt/hostedtoolcache/jdk/8.0.372/x64\n[cover-checker test and get coverage/test-macos ]   \u2699  ::set-env:: JAVA_HOME_8_0_372_X64=/opt/hostedtoolcache/jdk/8.0.372/x64\n[cover-checker test and get coverage/test-macos ]   \u2699  ::set-output:: path=/opt/hostedtoolcache/jdk/8.0.372/x64\n[cover-checker test and get coverage/test-macos ]   \u2699  ::set-output:: version=8.0.372\n[cover-checker test and get coverage/test-macos ]   \u2699  ::add-path:: /opt/hostedtoolcache/jdk/8.0.372/x64/bin\n[cover-checker test and get coverage/test-macos ] \u2b50 Run Main Build with Gradle\n[cover-checker test and get coverage/test-macos ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/2] user= workdir=\n[cover-checker test and get coverage/test-linux ]   \ud83d\udcac  ::debug::jdk extracted to /tmp/temp_604618800/zulu8.70.0.23-ca-jdk8.0.372-linux_x64\n[cover-checker test and get coverage/test-linux ]   \ud83d\udcac  ::debug::Caching tool jdk 8.0.372 x64\n[cover-checker test and get coverage/test-linux ]   \ud83d\udcac  ::debug::source dir: /tmp/temp_604618800/zulu8.70.0.23-ca-jdk8.0.372-linux_x64\n[cover-checker test and get coverage/test-linux ]   \ud83d\udcac  ::debug::destination /opt/hostedtoolcache/jdk/8.0.372/x64\n[cover-checker test and get coverage/test-window]   \ud83d\udcac  ::debug::finished caching tool\n[cover-checker test and get coverage/test-window]   \u2753 add-matcher /run/act/actions/actions-setup-java@v1/.github/java.json\n[cover-checker test and get coverage/test-window]   | creating settings.xml with server-id: github; environment variables: username=$GITHUB_ACTOR, password=$GITHUB_TOKEN, and gpg-passphrase=null\n[cover-checker test and get coverage/test-window]   \ud83d\udcac  ::debug::created directory /home/runneradmin/.m2\n[cover-checker test and get coverage/test-window]   | writing /home/runneradmin/.m2/settings.xml\n[cover-checker test and get coverage/test-window]   \u2705  Success - Main Set up JDK 1.8\n[cover-checker test and get coverage/test-window]   \u2699  ::set-env:: JAVA_HOME_8.0.372_x64=/opt/hostedtoolcache/jdk/8.0.372/x64\n[cover-checker test and get coverage/test-window]   \u2699  ::set-env:: JAVA_HOME=/opt/hostedtoolcache/jdk/8.0.372/x64\n[cover-checker test and get coverage/test-window]   \u2699  ::set-env:: JAVA_HOME_8_0_372_X64=/opt/hostedtoolcache/jdk/8.0.372/x64\n[cover-checker test and get coverage/test-window]   \u2699  ::set-output:: path=/opt/hostedtoolcache/jdk/8.0.372/x64\n[cover-checker test and get coverage/test-window]   \u2699  ::set-output:: version=8.0.372\n[cover-checker test and get coverage/test-window]   \u2699  ::add-path:: /opt/hostedtoolcache/jdk/8.0.372/x64/bin\n[cover-checker test and get coverage/test-window] \u2b50 Run Main Build with Gradle\n[cover-checker test and get coverage/test-window]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/2] user= workdir=\n[cover-checker test and get coverage/test-linux ]   \ud83d\udcac  ::debug::finished caching tool\n[cover-checker test and get coverage/test-linux ]   \u2753 add-matcher /run/act/actions/actions-setup-java@v1/.github/java.json\n[cover-checker test and get coverage/test-linux ]   | creating settings.xml with server-id: github; environment variables: username=$GITHUB_ACTOR, password=$GITHUB_TOKEN, and gpg-passphrase=null\n[cover-checker test and get coverage/test-linux ]   \ud83d\udcac  ::debug::created directory /home/runneradmin/.m2\n[cover-checker test and get coverage/test-linux ]   | writing /home/runneradmin/.m2/settings.xml\n[cover-checker test and get coverage/test-linux ]   \u2705  Success - Main Set up JDK 1.8\n[cover-checker test and get coverage/test-linux ]   \u2699  ::set-env:: JAVA_HOME_8.0.372_x64=/opt/hostedtoolcache/jdk/8.0.372/x64\n[cover-checker test and get coverage/test-linux ]   \u2699  ::set-env:: JAVA_HOME=/opt/hostedtoolcache/jdk/8.0.372/x64\n[cover-checker test and get coverage/test-linux ]   \u2699  ::set-env:: JAVA_HOME_8_0_372_X64=/opt/hostedtoolcache/jdk/8.0.372/x64\n[cover-checker test and get coverage/test-linux ]   \u2699  ::set-output:: path=/opt/hostedtoolcache/jdk/8.0.372/x64\n[cover-checker test and get coverage/test-linux ]   \u2699  ::set-output:: version=8.0.372\n[cover-checker test and get coverage/test-linux ]   \u2699  ::add-path:: /opt/hostedtoolcache/jdk/8.0.372/x64/bin\n[cover-checker test and get coverage/test-linux ] \u2b50 Run Main Build with Gradle\n[cover-checker test and get coverage/test-linux ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/2] user= workdir=\n[cover-checker test and get coverage/test-window]   | /var/run/act/workflow/2: line 2: ./gradlew.bat: Permission denied\n[cover-checker test and get coverage/test-window]   \u274c  Failure - Main Build with Gradle\n[cover-checker test and get coverage/test-macos ]   | Downloading https://services.gradle.org/distributions/gradle-6.8.1-bin.zip\n[cover-checker test and get coverage/test-window] exitcode '126': failure\n[cover-checker test and get coverage/test-window] \u2b50 Run Post Set up JDK 1.8\n[cover-checker test and get coverage/test-window]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/actions-setup-java@v1/dist/cleanup/index.js] user= workdir=\n[cover-checker test and get coverage/test-linux ]   | Downloading https://services.gradle.org/distributions/gradle-6.8.1-bin.zip\n[cover-checker test and get coverage/test-window]   \u2705  Success - Post Set up JDK 1.8\n[cover-checker test and get coverage/test-macos ]   | ..........10%..........20%..........30%...........40%..........50%..........60%..........70%...........80%..........90%..........100%\n[cover-checker test and get coverage/test-macos ]   | \n[cover-checker test and get coverage/test-macos ]   | Welcome to Gradle 6.8.1!\n[cover-checker test and get coverage/test-macos ]   | \n[cover-checker test and get coverage/test-macos ]   | Here are the highlights of this release:\n[cover-checker test and get coverage/test-macos ]   |  - Faster Kotlin DSL script compilation\n[cover-checker test and get coverage/test-macos ]   |  - Vendor selection for Java toolchains\n[cover-checker test and get coverage/test-macos ]   |  - Convenient execution of tasks in composite builds\n[cover-checker test and get coverage/test-macos ]   |  - Consistent dependency resolution\n[cover-checker test and get coverage/test-macos ]   | \n[cover-checker test and get coverage/test-macos ]   | For more details see https://docs.gradle.org/6.8.1/release-notes.html\n[cover-checker test and get coverage/test-macos ]   | \n[cover-checker test and get coverage/test-macos ]   | Starting a Gradle Daemon (subsequent builds will be faster)\n[cover-checker test and get coverage/test-linux ]   | ..........10%..........20%..........30%...........40%..........50%..........60%..........70%...........80%..........90%..........100%\n[cover-checker test and get coverage/test-window] \ud83c\udfc1  Job failed\n[cover-checker test and get coverage/test-linux ]   | \n[cover-checker test and get coverage/test-linux ]   | Welcome to Gradle 6.8.1!\n[cover-checker test and get coverage/test-linux ]   | \n[cover-checker test and get coverage/test-linux ]   | Here are the highlights of this release:\n[cover-checker test and get coverage/test-linux ]   |  - Faster Kotlin DSL script compilation\n[cover-checker test and get coverage/test-linux ]   |  - Vendor selection for Java toolchains\n[cover-checker test and get coverage/test-linux ]   |  - Convenient execution of tasks in composite builds\n[cover-checker test and get coverage/test-linux ]   |  - Consistent dependency resolution\n[cover-checker test and get coverage/test-linux ]   | \n[cover-checker test and get coverage/test-linux ]   | For more details see https://docs.gradle.org/6.8.1/release-notes.html\n[cover-checker test and get coverage/test-linux ]   | \n[cover-checker test and get coverage/test-linux ]   | Starting a Gradle Daemon (subsequent builds will be faster)\n[cover-checker test and get coverage/test-macos ]   | > Task :cover-checker-cobertura:clean UP-TO-DATE\n[cover-checker test and get coverage/test-macos ]   | > Task :cover-checker-console:clean UP-TO-DATE\n[cover-checker test and get coverage/test-macos ]   | > Task :cover-checker-core:clean UP-TO-DATE\n[cover-checker test and get coverage/test-macos ]   | > Task :cover-checker-github:clean UP-TO-DATE\n[cover-checker test and get coverage/test-macos ]   | > Task :cover-checker-jacoco:clean UP-TO-DATE\n[cover-checker test and get coverage/test-macos ]   | > Task :cover-checker-core:compileJava\n[cover-checker test and get coverage/test-macos ]   | > Task :cover-checker-core:processResources NO-SOURCE\n[cover-checker test and get coverage/test-macos ]   | > Task :cover-checker-core:classes\n[cover-checker test and get coverage/test-macos ]   | > Task :cover-checker-core:jar\n[cover-checker test and get coverage/test-macos ]   | > Task :cover-checker-cobertura:compileJava\n[cover-checker test and get coverage/test-macos ]   | > Task :cover-checker-cobertura:processResources NO-SOURCE\n[cover-checker test and get coverage/test-macos ]   | > Task :cover-checker-cobertura:classes\n[cover-checker test and get coverage/test-macos ]   | > Task :cover-checker-cobertura:jar\n[cover-checker test and get coverage/test-macos ]   | > Task :cover-checker-cobertura:assemble\n[cover-checker test and get coverage/test-macos ]   | > Task :cover-checker-cobertura:compileTestJava\n[cover-checker test and get coverage/test-macos ]   | > Task :cover-checker-cobertura:processTestResources\n[cover-checker test and get coverage/test-macos ]   | > Task :cover-checker-cobertura:testClasses\n[cover-checker test and get coverage/test-macos ]   | \n[cover-checker test and get coverage/test-macos ]   | > Task :cover-checker-cobertura:test\n[cover-checker test and get coverage/test-macos ]   | \n[cover-checker test and get coverage/test-macos ]   | CoberturaXmlReportParserTest > parseCobertura() PASSED\n[cover-checker test and get coverage/test-macos ]   | \n[cover-checker test and get coverage/test-macos ]   | > Task :cover-checker-cobertura:jacocoTestReport\n[cover-checker test and get coverage/test-macos ]   | > Task :cover-checker-cobertura:check\n[cover-checker test and get coverage/test-macos ]   | > Task :cover-checker-cobertura:build\n[cover-checker test and get coverage/test-macos ]   | > Task :cover-checker-github:compileJava\n[cover-checker test and get coverage/test-macos ]   | > Task :cover-checker-github:processResources\n[cover-checker test and get coverage/test-macos ]   | > Task :cover-checker-github:classes\n[cover-checker test and get coverage/test-macos ]   | > Task :cover-checker-github:jar\n[cover-checker test and get coverage/test-macos ]   | > Task :cover-checker-jacoco:compileJava\n[cover-checker test and get coverage/test-macos ]   | > Task :cover-checker-jacoco:processResources NO-SOURCE\n[cover-checker test and get coverage/test-macos ]   | > Task :cover-checker-jacoco:classes\n[cover-checker test and get coverage/test-macos ]   | > Task :cover-checker-jacoco:jar\n[cover-checker test and get coverage/test-macos ]   | > Task :cover-checker-console:compileJava\n[cover-checker test and get coverage/test-macos ]   | > Task :cover-checker-console:processResources\n[cover-checker test and get coverage/test-macos ]   | > Task :cover-checker-console:classes\n[cover-checker test and get coverage/test-macos ]   | > Task :cover-checker-console:jar\n[cover-checker test and get coverage/test-macos ]   | > Task :cover-checker-console:startScripts\n[cover-checker test and get coverage/test-macos ]   | > Task :cover-checker-console:distTar\n[cover-checker test and get coverage/test-macos ]   | > Task :cover-checker-console:distZip\n[cover-checker test and get coverage/test-macos ]   | > Task :cover-checker-console:shadowJar\n[cover-checker test and get coverage/test-macos ]   | > Task :cover-checker-console:startShadowScripts\n[cover-checker test and get coverage/test-macos ]   | > Task :cover-checker-console:shadowDistTar\n[cover-checker test and get coverage/test-macos ]   | > Task :cover-checker-console:shadowDistZip\n[cover-checker test and get coverage/test-macos ]   | > Task :cover-checker-console:assemble\n[cover-checker test and get coverage/test-macos ]   | > Task :cover-checker-console:compileTestJava\n[cover-checker test and get coverage/test-macos ]   | > Task :cover-checker-console:processTestResources\n[cover-checker test and get coverage/test-macos ]   | > Task :cover-checker-console:testClasses\n[cover-checker test and get coverage/test-macos ]   | \n[cover-checker test and get coverage/test-macos ]   | > Task :cover-checker-console:test\n[cover-checker test and get coverage/test-macos ]   | \n[cover-checker test and get coverage/test-macos ]   | LauncherTest > testMain() PASSED\n[cover-checker test and get coverage/test-macos ]   | \n[cover-checker test and get coverage/test-macos ]   | ObjectFactoryTest > getCoberturaCoverageReportParser() PASSED\n[cover-checker test and get coverage/test-macos ]   | \n[cover-checker test and get coverage/test-macos ]   | ObjectFactoryTest > getNewCoverageParser() PASSED\n[cover-checker test and get coverage/test-macos ]   | \n[cover-checker test and get coverage/test-macos ]   | ObjectFactoryTest > getDiffParser() PASSED\n[cover-checker test and get coverage/test-macos ]   | \n[cover-checker test and get coverage/test-macos ]   | ObjectFactoryTest > getJacocoCoverageReportParser() PASSED\n[cover-checker test and get coverage/test-macos ]   | \n[cover-checker test and get coverage/test-macos ]   | ParameterParserTest > getFailParam() PASSED\n[cover-checker test and get coverage/test-macos ]   | \n[cover-checker test and get coverage/test-macos ]   | ParameterParserTest > getParam() PASSED\n[cover-checker test and get coverage/test-macos ]   | \n[cover-checker test and get coverage/test-macos ]   | > Task :cover-checker-console:jacocoTestReport\n[cover-checker test and get coverage/test-macos ]   | > Task :cover-checker-console:check\n[cover-checker test and get coverage/test-macos ]   | > Task :cover-checker-console:build\n[cover-checker test and get coverage/test-macos ]   | > Task :cover-checker-core:assemble\n[cover-checker test and get coverage/test-macos ]   | > Task :cover-checker-core:compileTestJava\n[cover-checker test and get coverage/test-macos ]   | > Task :cover-checker-core:processTestResources\n[cover-checker test and get coverage/test-macos ]   | > Task :cover-checker-core:testClasses\n[cover-checker test and get coverage/test-macos ]   | \n[cover-checker test and get coverage/test-macos ]   | > Task :cover-checker-core:test\n[cover-checker test and get coverage/test-macos ]   | \n[cover-checker test and get coverage/test-macos ]   | CoverCheckerTest > testCheck() PASSED\n[cover-checker test and get coverage/test-macos ]   | \n[cover-checker test and get coverage/test-macos ]   | NewCoverageCheckerTest > coverCheckTestForWindowPath() PASSED\n[cover-checker test and get coverage/test-macos ]   | \n[cover-checker test and get coverage/test-macos ]   | NewCoverageCheckerTest > coverCheckTestForMultiModule() PASSED\n[cover-checker test and get coverage/test-macos ]   | \n[cover-checker test and get coverage/test-macos ]   | NewCoverageCheckerTest > coverCheckTest() PASSED\n[cover-checker test and get coverage/test-macos ]   | \n[cover-checker test and get coverage/test-macos ]   | NewCoverageCheckerTest > coverCheckTestForNonJava() PASSED\n[cover-checker test and get coverage/test-macos ]   | \n[cover-checker test and get coverage/test-macos ]   | FileDiffParseTest > parserSimpleTest() PASSED\n[cover-checker test and get coverage/test-macos ]   | \n[cover-checker test and get coverage/test-macos ]   | FileDiffParseTest > parserComplexTest() PASSED\n[cover-checker test and get coverage/test-macos ]   | \n[cover-checker test and get coverage/test-macos ]   | DiffMapperTest > testNewSingleLine() PASSED\n[cover-checker test and get coverage/test-macos ]   | \n[cover-checker test and get coverage/test-macos ]   | DiffMapperTest > testSingleLineFix() PASSED\n[cover-checker test and get coverage/test-macos ]   | \n[cover-checker test and get coverage/test-macos ]   | PathUtilsTest > [1] null, null PASSED\n[cover-checker test and get coverage/test-macos ]   | \n[cover-checker test and get coverage/test-macos ]   | PathUtilsTest > [2] ,  PASSED\n[cover-checker test and get coverage/test-macos ]   | \n[cover-checker test and get coverage/test-macos ]   | PathUtilsTest > [3] test/test.java, test/test.java PASSED\n[cover-checker test and get coverage/test-macos ]   | \n[cover-checker test and get coverage/test-macos ]   | PathUtilsTest > [4] test\\test.java, test/test.java PASSED\n[cover-checker test and get coverage/test-macos ]   | \n[cover-checker test and get coverage/test-macos ]   | > Task :cover-checker-core:jacocoTestReport\n[cover-checker test and get coverage/test-macos ]   | > Task :cover-checker-core:check\n[cover-checker test and get coverage/test-macos ]   | > Task :cover-checker-core:build\n[cover-checker test and get coverage/test-macos ]   | > Task :cover-checker-github:assemble\n[cover-checker test and get coverage/test-macos ]   | > Task :cover-checker-github:compileTestJava\n[cover-checker test and get coverage/test-macos ]   | > Task :cover-checker-github:processTestResources\n[cover-checker test and get coverage/test-macos ]   | > Task :cover-checker-github:testClasses\n[cover-checker test and get coverage/test-macos ]   | \n[cover-checker test and get coverage/test-macos ]   | > Task :cover-checker-github:test\n[cover-checker test and get coverage/test-macos ]   | \n[cover-checker test and get coverage/test-macos ]   | GithubDiffManagerTest > getFileDiff() PASSED\n[cover-checker test and get coverage/test-macos ]   | \n[cover-checker test and get coverage/test-macos ]   | GithubCommentManagerTest > insertComment() PASSED\n[cover-checker test and get coverage/test-macos ]   | \n[cover-checker test and get coverage/test-macos ]   | GithubCommentManagerTest > deleteComment() PASSED\n[cover-checker test and get coverage/test-macos ]   | \n[cover-checker test and get coverage/test-macos ]   | GithubStatusManagerTest > setStatus() PASSED\n[cover-checker test and get coverage/test-macos ]   | \n[cover-checker test and get coverage/test-macos ]   | GithubPullRequestReporterTest > reportConfuseTest() PASSED\n[cover-checker test and get coverage/test-macos ]   | \n[cover-checker test and get coverage/test-macos ]   | GithubPullRequestReporterTest > reportNoneSourceTest() PASSED\n[cover-checker test and get coverage/test-macos ]   | \n[cover-checker test and get coverage/test-macos ]   | GithubPullRequestReporterTest > reportError() PASSED\n[cover-checker test and get coverage/test-macos ]   | \n[cover-checker test and get coverage/test-macos ]   | GithubPullRequestReporterTest > reportTest() PASSED\n[cover-checker test and get coverage/test-macos ]   | \n[cover-checker test and get coverage/test-macos ]   | GithubDiffParseTest > parsedGithubDiff() PASSED\n[cover-checker test and get coverage/test-macos ]   | \n[cover-checker test and get coverage/test-macos ]   | > Task :cover-checker-github:jacocoTestReport\n[cover-checker test and get coverage/test-macos ]   | > Task :cover-checker-github:check\n[cover-checker test and get coverage/test-macos ]   | > Task :cover-checker-github:build\n[cover-checker test and get coverage/test-macos ]   | > Task :cover-checker-jacoco:assemble\n[cover-checker test and get coverage/test-macos ]   | > Task :cover-checker-jacoco:compileTestJava\n[cover-checker test and get coverage/test-macos ]   | > Task :cover-checker-jacoco:processTestResources\n[cover-checker test and get coverage/test-macos ]   | > Task :cover-checker-jacoco:testClasses\n[cover-checker test and get coverage/test-macos ]   | \n[cover-checker test and get coverage/test-macos ]   | > Task :cover-checker-jacoco:test\n[cover-checker test and get coverage/test-macos ]   | \n[cover-checker test and get coverage/test-macos ]   | JacocoHtmlReportParserTest > htmlFileParsing() PASSED\n[cover-checker test and get coverage/test-macos ]   | \n[cover-checker test and get coverage/test-macos ]   | JacocoHtmlReportParserTest > directoryParsing() PASSED\n[cover-checker test and get coverage/test-macos ]   | \n[cover-checker test and get coverage/test-macos ]   | JacocoReportParserTest > testJacocoHtmlParserTest() PASSED\n[cover-checker test and get coverage/test-macos ]   | \n[cover-checker test and get coverage/test-macos ]   | JacocoReportParserTest > testJacocoXmlParserTest() PASSED\n[cover-checker test and get coverage/test-macos ]   | \n[cover-checker test and get coverage/test-macos ]   | JacocoXmlReportParserTest > testJacocoXmlParse() PASSED\n[cover-checker test and get coverage/test-macos ]   | \n[cover-checker test and get coverage/test-macos ]   | > Task :cover-checker-jacoco:jacocoTestReport\n[cover-checker test and get coverage/test-macos ]   | > Task :cover-checker-jacoco:check\n[cover-checker test and get coverage/test-macos ]   | > Task :cover-checker-jacoco:build\n[cover-checker test and get coverage/test-macos ]   | \n[cover-checker test and get coverage/test-macos ]   | Deprecated Gradle features were used in this build, making it incompatible with Gradle 7.0.\n[cover-checker test and get coverage/test-macos ]   | Use '--warning-mode all' to show the individual deprecation warnings.\n[cover-checker test and get coverage/test-macos ]   | See https://docs.gradle.org/6.8.1/userguide/command_line_interface.html#sec:command_line_warnings\n[cover-checker test and get coverage/test-macos ]   | \n[cover-checker test and get coverage/test-macos ]   | BUILD SUCCESSFUL in 59s\n[cover-checker test and get coverage/test-macos ]   | 44 actionable tasks: 39 executed, 5 up-to-date\n[cover-checker test and get coverage/test-macos ]   \u2705  Success - Main Build with Gradle\n[cover-checker test and get coverage/test-macos ] \u2b50 Run Post Set up JDK 1.8\n[cover-checker test and get coverage/test-macos ]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/actions-setup-java@v1/dist/cleanup/index.js] user= workdir=\n[cover-checker test and get coverage/test-macos ]   \u2705  Success - Post Set up JDK 1.8\n[cover-checker test and get coverage/test-macos ] \ud83c\udfc1  Job succeeded\n[cover-checker test and get coverage/test-linux ]   | > Task :cover-checker-cobertura:clean\n[cover-checker test and get coverage/test-linux ]   | > Task :cover-checker-console:clean\n[cover-checker test and get coverage/test-linux ]   | > Task :cover-checker-core:clean\n[cover-checker test and get coverage/test-linux ]   | > Task :cover-checker-github:clean\n[cover-checker test and get coverage/test-linux ]   | > Task :cover-checker-jacoco:clean\n[cover-checker test and get coverage/test-linux ]   | > Task :cover-checker-core:compileJava\n[cover-checker test and get coverage/test-linux ]   | > Task :cover-checker-core:processResources NO-SOURCE\n[cover-checker test and get coverage/test-linux ]   | > Task :cover-checker-core:classes\n[cover-checker test and get coverage/test-linux ]   | > Task :cover-checker-core:jar\n[cover-checker test and get coverage/test-linux ]   | > Task :cover-checker-cobertura:compileJava\n[cover-checker test and get coverage/test-linux ]   | > Task :cover-checker-cobertura:processResources NO-SOURCE\n[cover-checker test and get coverage/test-linux ]   | > Task :cover-checker-cobertura:classes\n[cover-checker test and get coverage/test-linux ]   | > Task :cover-checker-cobertura:jar\n[cover-checker test and get coverage/test-linux ]   | > Task :cover-checker-cobertura:assemble\n[cover-checker test and get coverage/test-linux ]   | > Task :cover-checker-cobertura:compileTestJava\n[cover-checker test and get coverage/test-linux ]   | > Task :cover-checker-cobertura:processTestResources\n[cover-checker test and get coverage/test-linux ]   | > Task :cover-checker-cobertura:testClasses\n[cover-checker test and get coverage/test-linux ]   | \n[cover-checker test and get coverage/test-linux ]   | > Task :cover-checker-cobertura:test\n[cover-checker test and get coverage/test-linux ]   | \n[cover-checker test and get coverage/test-linux ]   | CoberturaXmlReportParserTest > parseCobertura() PASSED\n[cover-checker test and get coverage/test-linux ]   | \n[cover-checker test and get coverage/test-linux ]   | > Task :cover-checker-cobertura:jacocoTestReport\n[cover-checker test and get coverage/test-linux ]   | > Task :cover-checker-cobertura:check\n[cover-checker test and get coverage/test-linux ]   | > Task :cover-checker-cobertura:build\n[cover-checker test and get coverage/test-linux ]   | > Task :cover-checker-github:compileJava\n[cover-checker test and get coverage/test-linux ]   | > Task :cover-checker-github:processResources\n[cover-checker test and get coverage/test-linux ]   | > Task :cover-checker-github:classes\n[cover-checker test and get coverage/test-linux ]   | > Task :cover-checker-github:jar\n[cover-checker test and get coverage/test-linux ]   | > Task :cover-checker-jacoco:compileJava\n[cover-checker test and get coverage/test-linux ]   | > Task :cover-checker-jacoco:processResources NO-SOURCE\n[cover-checker test and get coverage/test-linux ]   | > Task :cover-checker-jacoco:classes\n[cover-checker test and get coverage/test-linux ]   | > Task :cover-checker-jacoco:jar\n[cover-checker test and get coverage/test-linux ]   | > Task :cover-checker-console:compileJava\n[cover-checker test and get coverage/test-linux ]   | > Task :cover-checker-console:processResources\n[cover-checker test and get coverage/test-linux ]   | > Task :cover-checker-console:classes\n[cover-checker test and get coverage/test-linux ]   | > Task :cover-checker-console:jar\n[cover-checker test and get coverage/test-linux ]   | > Task :cover-checker-console:startScripts\n[cover-checker test and get coverage/test-linux ]   | > Task :cover-checker-console:distTar\n[cover-checker test and get coverage/test-linux ]   | > Task :cover-checker-console:distZip\n[cover-checker test and get coverage/test-linux ]   | > Task :cover-checker-console:shadowJar\n[cover-checker test and get coverage/test-linux ]   | > Task :cover-checker-console:startShadowScripts\n[cover-checker test and get coverage/test-linux ]   | > Task :cover-checker-console:shadowDistTar\n[cover-checker test and get coverage/test-linux ]   | > Task :cover-checker-console:shadowDistZip\n[cover-checker test and get coverage/test-linux ]   | > Task :cover-checker-console:assemble\n[cover-checker test and get coverage/test-linux ]   | > Task :cover-checker-console:compileTestJava\n[cover-checker test and get coverage/test-linux ]   | > Task :cover-checker-console:processTestResources\n[cover-checker test and get coverage/test-linux ]   | > Task :cover-checker-console:testClasses\n[cover-checker test and get coverage/test-linux ]   | \n[cover-checker test and get coverage/test-linux ]   | > Task :cover-checker-console:test\n[cover-checker test and get coverage/test-linux ]   | \n[cover-checker test and get coverage/test-linux ]   | LauncherTest > testMain() PASSED\n[cover-checker test and get coverage/test-linux ]   | \n[cover-checker test and get coverage/test-linux ]   | ObjectFactoryTest > getCoberturaCoverageReportParser() PASSED\n[cover-checker test and get coverage/test-linux ]   | \n[cover-checker test and get coverage/test-linux ]   | ObjectFactoryTest > getNewCoverageParser() PASSED\n[cover-checker test and get coverage/test-linux ]   | \n[cover-checker test and get coverage/test-linux ]   | ObjectFactoryTest > getDiffParser() PASSED\n[cover-checker test and get coverage/test-linux ]   | \n[cover-checker test and get coverage/test-linux ]   | ObjectFactoryTest > getJacocoCoverageReportParser() PASSED\n[cover-checker test and get coverage/test-linux ]   | \n[cover-checker test and get coverage/test-linux ]   | ParameterParserTest > getFailParam() PASSED\n[cover-checker test and get coverage/test-linux ]   | \n[cover-checker test and get coverage/test-linux ]   | ParameterParserTest > getParam() PASSED\n[cover-checker test and get coverage/test-linux ]   | \n[cover-checker test and get coverage/test-linux ]   | > Task :cover-checker-console:jacocoTestReport\n[cover-checker test and get coverage/test-linux ]   | > Task :cover-checker-console:check\n[cover-checker test and get coverage/test-linux ]   | > Task :cover-checker-console:build\n[cover-checker test and get coverage/test-linux ]   | > Task :cover-checker-core:assemble\n[cover-checker test and get coverage/test-linux ]   | > Task :cover-checker-core:compileTestJava\n[cover-checker test and get coverage/test-linux ]   | > Task :cover-checker-core:processTestResources\n[cover-checker test and get coverage/test-linux ]   | > Task :cover-checker-core:testClasses\n[cover-checker test and get coverage/test-linux ]   | \n[cover-checker test and get coverage/test-linux ]   | > Task :cover-checker-core:test\n[cover-checker test and get coverage/test-linux ]   | \n[cover-checker test and get coverage/test-linux ]   | CoverCheckerTest > testCheck() PASSED\n[cover-checker test and get coverage/test-linux ]   | \n[cover-checker test and get coverage/test-linux ]   | NewCoverageCheckerTest > coverCheckTestForWindowPath() PASSED\n[cover-checker test and get coverage/test-linux ]   | \n[cover-checker test and get coverage/test-linux ]   | NewCoverageCheckerTest > coverCheckTestForMultiModule() PASSED\n[cover-checker test and get coverage/test-linux ]   | \n[cover-checker test and get coverage/test-linux ]   | NewCoverageCheckerTest > coverCheckTest() PASSED\n[cover-checker test and get coverage/test-linux ]   | \n[cover-checker test and get coverage/test-linux ]   | NewCoverageCheckerTest > coverCheckTestForNonJava() PASSED\n[cover-checker test and get coverage/test-linux ]   | \n[cover-checker test and get coverage/test-linux ]   | FileDiffParseTest > parserSimpleTest() PASSED\n[cover-checker test and get coverage/test-linux ]   | \n[cover-checker test and get coverage/test-linux ]   | FileDiffParseTest > parserComplexTest() PASSED\n[cover-checker test and get coverage/test-linux ]   | \n[cover-checker test and get coverage/test-linux ]   | DiffMapperTest > testNewSingleLine() PASSED\n[cover-checker test and get coverage/test-linux ]   | \n[cover-checker test and get coverage/test-linux ]   | DiffMapperTest > testSingleLineFix() PASSED\n[cover-checker test and get coverage/test-linux ]   | \n[cover-checker test and get coverage/test-linux ]   | PathUtilsTest > [1] null, null PASSED\n[cover-checker test and get coverage/test-linux ]   | \n[cover-checker test and get coverage/test-linux ]   | PathUtilsTest > [2] ,  PASSED\n[cover-checker test and get coverage/test-linux ]   | \n[cover-checker test and get coverage/test-linux ]   | PathUtilsTest > [3] test/test.java, test/test.java PASSED\n[cover-checker test and get coverage/test-linux ]   | \n[cover-checker test and get coverage/test-linux ]   | PathUtilsTest > [4] test\\test.java, test/test.java PASSED\n[cover-checker test and get coverage/test-linux ]   | \n[cover-checker test and get coverage/test-linux ]   | > Task :cover-checker-core:jacocoTestReport\n[cover-checker test and get coverage/test-linux ]   | > Task :cover-checker-core:check\n[cover-checker test and get coverage/test-linux ]   | > Task :cover-checker-core:build\n[cover-checker test and get coverage/test-linux ]   | > Task :cover-checker-github:assemble\n[cover-checker test and get coverage/test-linux ]   | > Task :cover-checker-github:compileTestJava\n[cover-checker test and get coverage/test-linux ]   | > Task :cover-checker-github:processTestResources\n[cover-checker test and get coverage/test-linux ]   | > Task :cover-checker-github:testClasses\n[cover-checker test and get coverage/test-linux ]   | \n[cover-checker test and get coverage/test-linux ]   | > Task :cover-checker-github:test\n[cover-checker test and get coverage/test-linux ]   | \n[cover-checker test and get coverage/test-linux ]   | GithubDiffManagerTest > getFileDiff() PASSED\n[cover-checker test and get coverage/test-linux ]   | \n[cover-checker test and get coverage/test-linux ]   | GithubCommentManagerTest > insertComment() PASSED\n[cover-checker test and get coverage/test-linux ]   | \n[cover-checker test and get coverage/test-linux ]   | GithubCommentManagerTest > deleteComment() PASSED\n[cover-checker test and get coverage/test-linux ]   | \n[cover-checker test and get coverage/test-linux ]   | GithubStatusManagerTest > setStatus() PASSED\n[cover-checker test and get coverage/test-linux ]   | \n[cover-checker test and get coverage/test-linux ]   | GithubPullRequestReporterTest > reportConfuseTest() PASSED\n[cover-checker test and get coverage/test-linux ]   | \n[cover-checker test and get coverage/test-linux ]   | GithubPullRequestReporterTest > reportNoneSourceTest() PASSED\n[cover-checker test and get coverage/test-linux ]   | \n[cover-checker test and get coverage/test-linux ]   | GithubPullRequestReporterTest > reportError() PASSED\n[cover-checker test and get coverage/test-linux ]   | \n[cover-checker test and get coverage/test-linux ]   | GithubPullRequestReporterTest > reportTest() PASSED\n[cover-checker test and get coverage/test-linux ]   | \n[cover-checker test and get coverage/test-linux ]   | GithubDiffParseTest > parsedGithubDiff() PASSED\n[cover-checker test and get coverage/test-linux ]   | \n[cover-checker test and get coverage/test-linux ]   | > Task :cover-checker-github:jacocoTestReport\n[cover-checker test and get coverage/test-linux ]   | > Task :cover-checker-github:check\n[cover-checker test and get coverage/test-linux ]   | > Task :cover-checker-github:build\n[cover-checker test and get coverage/test-linux ]   | > Task :cover-checker-jacoco:assemble\n[cover-checker test and get coverage/test-linux ]   | > Task :cover-checker-jacoco:compileTestJava\n[cover-checker test and get coverage/test-linux ]   | > Task :cover-checker-jacoco:processTestResources\n[cover-checker test and get coverage/test-linux ]   | > Task :cover-checker-jacoco:testClasses\n[cover-checker test and get coverage/test-linux ]   | \n[cover-checker test and get coverage/test-linux ]   | > Task :cover-checker-jacoco:test\n[cover-checker test and get coverage/test-linux ]   | \n[cover-checker test and get coverage/test-linux ]   | JacocoHtmlReportParserTest > htmlFileParsing() PASSED\n[cover-checker test and get coverage/test-linux ]   | \n[cover-checker test and get coverage/test-linux ]   | JacocoHtmlReportParserTest > directoryParsing() PASSED\n[cover-checker test and get coverage/test-linux ]   | \n[cover-checker test and get coverage/test-linux ]   | JacocoReportParserTest > testJacocoHtmlParserTest() PASSED\n[cover-checker test and get coverage/test-linux ]   | \n[cover-checker test and get coverage/test-linux ]   | JacocoReportParserTest > testJacocoXmlParserTest() PASSED\n[cover-checker test and get coverage/test-linux ]   | \n[cover-checker test and get coverage/test-linux ]   | JacocoXmlReportParserTest > testJacocoXmlParse() PASSED\n[cover-checker test and get coverage/test-linux ]   | \n[cover-checker test and get coverage/test-linux ]   | > Task :cover-checker-jacoco:jacocoTestReport\n[cover-checker test and get coverage/test-linux ]   | > Task :cover-checker-jacoco:check\n[cover-checker test and get coverage/test-linux ]   | > Task :cover-checker-jacoco:build\n[cover-checker test and get coverage/test-linux ]   | \n[cover-checker test and get coverage/test-linux ]   | Deprecated Gradle features were used in this build, making it incompatible with Gradle 7.0.\n[cover-checker test and get coverage/test-linux ]   | Use '--warning-mode all' to show the individual deprecation warnings.\n[cover-checker test and get coverage/test-linux ]   | See https://docs.gradle.org/6.8.1/userguide/command_line_interface.html#sec:command_line_warnings\n[cover-checker test and get coverage/test-linux ]   | \n[cover-checker test and get coverage/test-linux ]   | BUILD SUCCESSFUL in 1m 52s\n[cover-checker test and get coverage/test-linux ]   | 44 actionable tasks: 44 executed\n[cover-checker test and get coverage/test-linux ]   \u2705  Success - Main Build with Gradle\n[cover-checker test and get coverage/test-linux ] \u2b50 Run Main comment coverage report\n[cover-checker test and get coverage/test-linux ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/3.sh] user= workdir=\n[cover-checker test and get coverage/test-linux ]   | Exception in thread \"main\" java.lang.NumberFormatException: For input string: \"%!f(<nil>)\"\n[cover-checker test and get coverage/test-linux ]   | \tat java.lang.NumberFormatException.forInputString(NumberFormatException.java:65)\n[cover-checker test and get coverage/test-linux ]   | \tat java.lang.Integer.parseInt(Integer.java:569)\n[cover-checker test and get coverage/test-linux ]   | \tat java.lang.Integer.parseInt(Integer.java:615)\n[cover-checker test and get coverage/test-linux ]   | \tat com.naver.nid.cover.util.ParameterParser.getParam(ParameterParser.java:60)\n[cover-checker test and get coverage/test-linux ]   | \tat com.naver.nid.cover.Launcher.main(Launcher.java:10)\n[cover-checker test and get coverage/test-linux ]   \u274c  Failure - Main comment coverage report\n[cover-checker test and get coverage/test-linux ] exitcode '1': failure\n[cover-checker test and get coverage/test-linux ] \u2b50 Run Post Set up JDK 1.8\n[cover-checker test and get coverage/test-linux ]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/actions-setup-java@v1/dist/cleanup/index.js] user= workdir=\n[cover-checker test and get coverage/test-linux ]   \u2705  Success - Post Set up JDK 1.8\n[cover-checker test and get coverage/test-linux ] \ud83c\udfc1  Job failed\n",
        "stderr": "Error: Job 'test-linux' failed\n",
        "workflow": "/tmp/569e0364-0b80-11ee-a890-af2cc187fc11/naver-cover-checker/.github/workflows/gradle-crawler.yml",
        "build_tool": "gradle",
        "elapsed_time": 166.91971278190613
    }
}