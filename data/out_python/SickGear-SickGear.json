{
    "repository": "SickGear/SickGear",
    "clone_url": "https://github.com/SickGear/SickGear.git",
    "timestamp": "2023-05-29T15:46:44.649564Z",
    "clone_success": true,
    "number of actions": 1,
    "number_of_test_actions": 1,
    "actions_successful": false,
    "actions_stdout": "[Python Unit Tests/linux  ] \ud83d\ude80  Start image=crawlergpt:latest\n[Python Unit Tests/macos  ] \ud83d\ude80  Start image=crawlergpt:latest\n[Python Unit Tests/windows] \ud83d\ude80  Start image=crawlergpt:latest\n[Python Unit Tests/windows]   \ud83d\udc33  docker pull image=crawlergpt:latest platform= username= forcePull=false\n[Python Unit Tests/linux  ]   \ud83d\udc33  docker pull image=crawlergpt:latest platform= username= forcePull=false\n[Python Unit Tests/macos  ]   \ud83d\udc33  docker pull image=crawlergpt:latest platform= username= forcePull=false\n[Python Unit Tests/windows]   \ud83d\udc33  docker create image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[Python Unit Tests/linux  ]   \ud83d\udc33  docker create image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[Python Unit Tests/macos  ]   \ud83d\udc33  docker create image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[Python Unit Tests/windows]   \ud83d\udc33  docker run image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[Python Unit Tests/linux  ]   \ud83d\udc33  docker run image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[Python Unit Tests/macos  ]   \ud83d\udc33  docker run image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[Python Unit Tests/macos  ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear] user=0 workdir=\n[Python Unit Tests/linux  ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear] user=0 workdir=\n[Python Unit Tests/windows]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear] user=0 workdir=\n[Python Unit Tests/linux  ]   \u2601  git clone 'https://github.com/actions/setup-python' # ref=v4\n[Python Unit Tests/windows]   \u2601  git clone 'https://github.com/actions/setup-python' # ref=v4\n[Python Unit Tests/macos  ]   \u2601  git clone 'https://github.com/actions/setup-python' # ref=v4\n[Python Unit Tests/linux  ] \ud83e\uddea  Matrix: map[os:ubuntu-latest python-version:3.8]\n[Python Unit Tests/linux  ] \u2b50 Run Main Set up Python 3.8\n[Python Unit Tests/windows] \ud83e\uddea  Matrix: map[os:ubuntu-latest python-version:3.8]\n[Python Unit Tests/windows] \u2b50 Run Main Set up Python 3.8\n[Python Unit Tests/macos  ] \ud83e\uddea  Matrix: map[os:ubuntu-latest python-version:3.8]\n[Python Unit Tests/macos  ] \u2b50 Run Main Set up Python 3.8\n[Python Unit Tests/linux  ]   \ud83d\udc33  docker cp src=/home/andre-silva/.cache/act/actions-setup-python@v4/ dst=/var/run/act/actions/actions-setup-python@v4/\n[Python Unit Tests/windows]   \ud83d\udc33  docker cp src=/home/andre-silva/.cache/act/actions-setup-python@v4/ dst=/var/run/act/actions/actions-setup-python@v4/\n[Python Unit Tests/macos  ]   \ud83d\udc33  docker cp src=/home/andre-silva/.cache/act/actions-setup-python@v4/ dst=/var/run/act/actions/actions-setup-python@v4/\n[Python Unit Tests/windows]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /var/run/act/actions/actions-setup-python@v4/] user=0 workdir=\n[Python Unit Tests/linux  ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /var/run/act/actions/actions-setup-python@v4/] user=0 workdir=\n[Python Unit Tests/macos  ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /var/run/act/actions/actions-setup-python@v4/] user=0 workdir=\n[Python Unit Tests/windows]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/actions-setup-python@v4/dist/setup/index.js] user= workdir=\n[Python Unit Tests/linux  ]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/actions-setup-python@v4/dist/setup/index.js] user= workdir=\n[Python Unit Tests/macos  ]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/actions-setup-python@v4/dist/setup/index.js] user= workdir=\n[Python Unit Tests/macos  ]   \ud83d\udcac  ::debug::Python is expected to be installed into /opt/hostedtoolcache\n[Python Unit Tests/macos  ]   \u2753  ::group::Installed versions\n[Python Unit Tests/macos  ]   \ud83d\udcac  ::debug::Semantic version spec of 3.8 is 3.8\n[Python Unit Tests/macos  ]   \ud83d\udcac  ::debug::isExplicit: \n[Python Unit Tests/macos  ]   \ud83d\udcac  ::debug::explicit? false\n[Python Unit Tests/macos  ]   \ud83d\udcac  ::debug::isExplicit: 2.7.18\n[Python Unit Tests/macos  ]   \ud83d\udcac  ::debug::explicit? true\n[Python Unit Tests/macos  ]   \ud83d\udcac  ::debug::isExplicit: 3.5.10\n[Python Unit Tests/macos  ]   \ud83d\udcac  ::debug::explicit? true\n[Python Unit Tests/macos  ]   \ud83d\udcac  ::debug::isExplicit: 3.6.14\n[Python Unit Tests/macos  ]   \ud83d\udcac  ::debug::explicit? true\n[Python Unit Tests/macos  ]   \ud83d\udcac  ::debug::isExplicit: 3.7.11\n[Python Unit Tests/macos  ]   \ud83d\udcac  ::debug::explicit? true\n[Python Unit Tests/macos  ]   \ud83d\udcac  ::debug::isExplicit: 3.8.11\n[Python Unit Tests/macos  ]   \ud83d\udcac  ::debug::explicit? true\n[Python Unit Tests/macos  ]   \ud83d\udcac  ::debug::isExplicit: 3.9.6\n[Python Unit Tests/macos  ]   \ud83d\udcac  ::debug::explicit? true\n[Python Unit Tests/macos  ]   \ud83d\udcac  ::debug::evaluating 6 versions\n[Python Unit Tests/macos  ]   \ud83d\udcac  ::debug::matched: 3.8.11\n[Python Unit Tests/macos  ]   \ud83d\udcac  ::debug::checking cache: /opt/hostedtoolcache/Python/3.8.11/x64\n[Python Unit Tests/macos  ]   \ud83d\udcac  ::debug::Found tool in cache Python 3.8.11 x64\n[Python Unit Tests/macos  ]   | Successfully set up CPython (3.8.11)\n[Python Unit Tests/macos  ]   \u2753  ::endgroup::\n[Python Unit Tests/macos  ]   \u2753 add-matcher /run/act/actions/actions-setup-python@v4/.github/python.json\n[Python Unit Tests/macos  ]   \u2705  Success - Main Set up Python 3.8\n[Python Unit Tests/linux  ]   \ud83d\udcac  ::debug::Python is expected to be installed into /opt/hostedtoolcache\n[Python Unit Tests/linux  ]   \u2753  ::group::Installed versions\n[Python Unit Tests/linux  ]   \ud83d\udcac  ::debug::Semantic version spec of 3.8 is 3.8\n[Python Unit Tests/linux  ]   \ud83d\udcac  ::debug::isExplicit: \n[Python Unit Tests/linux  ]   \ud83d\udcac  ::debug::explicit? false\n[Python Unit Tests/linux  ]   \ud83d\udcac  ::debug::isExplicit: 2.7.18\n[Python Unit Tests/linux  ]   \ud83d\udcac  ::debug::explicit? true\n[Python Unit Tests/linux  ]   \ud83d\udcac  ::debug::isExplicit: 3.5.10\n[Python Unit Tests/linux  ]   \ud83d\udcac  ::debug::explicit? true\n[Python Unit Tests/linux  ]   \ud83d\udcac  ::debug::isExplicit: 3.6.14\n[Python Unit Tests/linux  ]   \ud83d\udcac  ::debug::explicit? true\n[Python Unit Tests/linux  ]   \ud83d\udcac  ::debug::isExplicit: 3.7.11\n[Python Unit Tests/linux  ]   \ud83d\udcac  ::debug::explicit? true\n[Python Unit Tests/linux  ]   \ud83d\udcac  ::debug::isExplicit: 3.8.11\n[Python Unit Tests/linux  ]   \ud83d\udcac  ::debug::explicit? true\n[Python Unit Tests/linux  ]   \ud83d\udcac  ::debug::isExplicit: 3.9.6\n[Python Unit Tests/linux  ]   \ud83d\udcac  ::debug::explicit? true\n[Python Unit Tests/linux  ]   \ud83d\udcac  ::debug::evaluating 6 versions\n[Python Unit Tests/linux  ]   \ud83d\udcac  ::debug::matched: 3.8.11\n[Python Unit Tests/linux  ]   \ud83d\udcac  ::debug::checking cache: /opt/hostedtoolcache/Python/3.8.11/x64\n[Python Unit Tests/linux  ]   \ud83d\udcac  ::debug::Found tool in cache Python 3.8.11 x64\n[Python Unit Tests/linux  ]   | Successfully set up CPython (3.8.11)\n[Python Unit Tests/linux  ]   \u2753  ::endgroup::\n[Python Unit Tests/linux  ]   \u2753 add-matcher /run/act/actions/actions-setup-python@v4/.github/python.json\n[Python Unit Tests/windows]   \ud83d\udcac  ::debug::Python is expected to be installed into /opt/hostedtoolcache\n[Python Unit Tests/windows]   \u2753  ::group::Installed versions\n[Python Unit Tests/windows]   \ud83d\udcac  ::debug::Semantic version spec of 3.8 is 3.8\n[Python Unit Tests/windows]   \ud83d\udcac  ::debug::isExplicit: \n[Python Unit Tests/windows]   \ud83d\udcac  ::debug::explicit? false\n[Python Unit Tests/windows]   \ud83d\udcac  ::debug::isExplicit: 2.7.18\n[Python Unit Tests/windows]   \ud83d\udcac  ::debug::explicit? true\n[Python Unit Tests/windows]   \ud83d\udcac  ::debug::isExplicit: 3.5.10\n[Python Unit Tests/windows]   \ud83d\udcac  ::debug::explicit? true\n[Python Unit Tests/windows]   \ud83d\udcac  ::debug::isExplicit: 3.6.14\n[Python Unit Tests/windows]   \ud83d\udcac  ::debug::explicit? true\n[Python Unit Tests/windows]   \ud83d\udcac  ::debug::isExplicit: 3.7.11\n[Python Unit Tests/windows]   \ud83d\udcac  ::debug::explicit? true\n[Python Unit Tests/windows]   \ud83d\udcac  ::debug::isExplicit: 3.8.11\n[Python Unit Tests/windows]   \ud83d\udcac  ::debug::explicit? true\n[Python Unit Tests/windows]   \ud83d\udcac  ::debug::isExplicit: 3.9.6\n[Python Unit Tests/windows]   \ud83d\udcac  ::debug::explicit? true\n[Python Unit Tests/windows]   \ud83d\udcac  ::debug::evaluating 6 versions\n[Python Unit Tests/windows]   \ud83d\udcac  ::debug::matched: 3.8.11\n[Python Unit Tests/windows]   \ud83d\udcac  ::debug::checking cache: /opt/hostedtoolcache/Python/3.8.11/x64\n[Python Unit Tests/windows]   \ud83d\udcac  ::debug::Found tool in cache Python 3.8.11 x64\n[Python Unit Tests/windows]   | Successfully set up CPython (3.8.11)\n[Python Unit Tests/windows]   \u2753  ::endgroup::\n[Python Unit Tests/windows]   \u2753 add-matcher /run/act/actions/actions-setup-python@v4/.github/python.json\n[Python Unit Tests/linux  ]   \u2705  Success - Main Set up Python 3.8\n[Python Unit Tests/windows]   \u2705  Success - Main Set up Python 3.8\n[Python Unit Tests/windows]   \u2699  ::set-env:: Python_ROOT_DIR=/opt/hostedtoolcache/Python/3.8.11/x64\n[Python Unit Tests/windows]   \u2699  ::set-env:: Python2_ROOT_DIR=/opt/hostedtoolcache/Python/3.8.11/x64\n[Python Unit Tests/windows]   \u2699  ::set-env:: Python3_ROOT_DIR=/opt/hostedtoolcache/Python/3.8.11/x64\n[Python Unit Tests/windows]   \u2699  ::set-env:: LD_LIBRARY_PATH=/opt/hostedtoolcache/Python/3.8.11/x64/lib\n[Python Unit Tests/windows]   \u2699  ::set-env:: pythonLocation=/opt/hostedtoolcache/Python/3.8.11/x64\n[Python Unit Tests/windows]   \u2699  ::set-env:: PKG_CONFIG_PATH=/opt/hostedtoolcache/Python/3.8.11/x64/lib/pkgconfig\n[Python Unit Tests/macos  ]   \u2699  ::set-env:: LD_LIBRARY_PATH=/opt/hostedtoolcache/Python/3.8.11/x64/lib\n[Python Unit Tests/macos  ]   \u2699  ::set-env:: pythonLocation=/opt/hostedtoolcache/Python/3.8.11/x64\n[Python Unit Tests/macos  ]   \u2699  ::set-env:: PKG_CONFIG_PATH=/opt/hostedtoolcache/Python/3.8.11/x64/lib/pkgconfig\n[Python Unit Tests/macos  ]   \u2699  ::set-env:: Python_ROOT_DIR=/opt/hostedtoolcache/Python/3.8.11/x64\n[Python Unit Tests/macos  ]   \u2699  ::set-env:: Python2_ROOT_DIR=/opt/hostedtoolcache/Python/3.8.11/x64\n[Python Unit Tests/macos  ]   \u2699  ::set-env:: Python3_ROOT_DIR=/opt/hostedtoolcache/Python/3.8.11/x64\n[Python Unit Tests/linux  ]   \u2699  ::set-env:: LD_LIBRARY_PATH=/opt/hostedtoolcache/Python/3.8.11/x64/lib\n[Python Unit Tests/linux  ]   \u2699  ::set-env:: pythonLocation=/opt/hostedtoolcache/Python/3.8.11/x64\n[Python Unit Tests/linux  ]   \u2699  ::set-env:: PKG_CONFIG_PATH=/opt/hostedtoolcache/Python/3.8.11/x64/lib/pkgconfig\n[Python Unit Tests/linux  ]   \u2699  ::set-env:: Python_ROOT_DIR=/opt/hostedtoolcache/Python/3.8.11/x64\n[Python Unit Tests/linux  ]   \u2699  ::set-env:: Python2_ROOT_DIR=/opt/hostedtoolcache/Python/3.8.11/x64\n[Python Unit Tests/linux  ]   \u2699  ::set-env:: Python3_ROOT_DIR=/opt/hostedtoolcache/Python/3.8.11/x64\n[Python Unit Tests/linux  ]   \u2699  ::set-output:: python-version=3.8.11\n[Python Unit Tests/linux  ]   \u2699  ::set-output:: python-path=/opt/hostedtoolcache/Python/3.8.11/x64/bin/python\n[Python Unit Tests/macos  ]   \u2699  ::set-output:: python-path=/opt/hostedtoolcache/Python/3.8.11/x64/bin/python\n[Python Unit Tests/macos  ]   \u2699  ::set-output:: python-version=3.8.11\n[Python Unit Tests/windows]   \u2699  ::set-output:: python-version=3.8.11\n[Python Unit Tests/windows]   \u2699  ::set-output:: python-path=/opt/hostedtoolcache/Python/3.8.11/x64/bin/python\n[Python Unit Tests/macos  ]   \u2699  ::add-path:: /opt/hostedtoolcache/Python/3.8.11/x64\n[Python Unit Tests/macos  ]   \u2699  ::add-path:: /opt/hostedtoolcache/Python/3.8.11/x64/bin\n[Python Unit Tests/windows]   \u2699  ::add-path:: /opt/hostedtoolcache/Python/3.8.11/x64\n[Python Unit Tests/windows]   \u2699  ::add-path:: /opt/hostedtoolcache/Python/3.8.11/x64/bin\n[Python Unit Tests/linux  ]   \u2699  ::add-path:: /opt/hostedtoolcache/Python/3.8.11/x64\n[Python Unit Tests/linux  ]   \u2699  ::add-path:: /opt/hostedtoolcache/Python/3.8.11/x64/bin\n[Python Unit Tests/macos  ] \u2b50 Run Main actions/checkout@v3\n[Python Unit Tests/linux  ] \u2b50 Run Main actions/checkout@v3\n[Python Unit Tests/windows] \u2b50 Run Main actions/checkout@v3\n[Python Unit Tests/linux  ]   \u2705  Success - Main actions/checkout@v3\n[Python Unit Tests/macos  ]   \u2705  Success - Main actions/checkout@v3\n[Python Unit Tests/windows]   \u2705  Success - Main actions/checkout@v3\n[Python Unit Tests/macos  ] \u2b50 Run Main export BOTO_CONFIG=/dev/null\n[Python Unit Tests/windows] \u2b50 Run Main pip install responses\n[Python Unit Tests/linux  ] \u2b50 Run Main export BOTO_CONFIG=/dev/null\n[Python Unit Tests/macos  ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/2] user= workdir=\n[Python Unit Tests/linux  ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/2] user= workdir=\n[Python Unit Tests/macos  ]   \u2705  Success - Main export BOTO_CONFIG=/dev/null\n[Python Unit Tests/linux  ]   \u2705  Success - Main export BOTO_CONFIG=/dev/null\n[Python Unit Tests/macos  ] \u2b50 Run Main export PYTHONPATH=$PYTHONPATH:$(pwd)\n[Python Unit Tests/linux  ] \u2b50 Run Main export PYTHONPATH=$PYTHONPATH:$(pwd)\n[Python Unit Tests/windows]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/2] user= workdir=\n[Python Unit Tests/linux  ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/3] user= workdir=\n[Python Unit Tests/macos  ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/3] user= workdir=\n[Python Unit Tests/windows]   | Collecting responses\n[Python Unit Tests/windows]   |   Downloading responses-0.23.1-py3-none-any.whl (52 kB)\n[Python Unit Tests/windows]   | Collecting requests<3.0,>=2.22.0\n[Python Unit Tests/windows]   |   Downloading requests-2.31.0-py3-none-any.whl (62 kB)\n[Python Unit Tests/windows]   | Collecting urllib3>=1.25.10\n[Python Unit Tests/windows]   |   Downloading urllib3-2.0.2-py3-none-any.whl (123 kB)\n[Python Unit Tests/windows]   | Collecting pyyaml\n[Python Unit Tests/windows]   |   Downloading PyYAML-6.0-cp38-cp38-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_12_x86_64.manylinux2010_x86_64.whl (701 kB)\n[Python Unit Tests/windows]   | Collecting types-PyYAML\n[Python Unit Tests/windows]   |   Downloading types_PyYAML-6.0.12.10-py3-none-any.whl (14 kB)\n[Python Unit Tests/windows]   | Collecting certifi>=2017.4.17\n[Python Unit Tests/windows]   |   Downloading certifi-2023.5.7-py3-none-any.whl (156 kB)\n[Python Unit Tests/windows]   | Collecting idna<4,>=2.5\n[Python Unit Tests/windows]   |   Downloading idna-3.4-py3-none-any.whl (61 kB)\n[Python Unit Tests/windows]   | Collecting charset-normalizer<4,>=2\n[Python Unit Tests/windows]   |   Downloading charset_normalizer-3.1.0-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (195 kB)\n[Python Unit Tests/windows]   | Installing collected packages: urllib3, idna, charset-normalizer, certifi, types-PyYAML, requests, pyyaml, responses\n[Python Unit Tests/windows]   | Successfully installed certifi-2023.5.7 charset-normalizer-3.1.0 idna-3.4 pyyaml-6.0 requests-2.31.0 responses-0.23.1 types-PyYAML-6.0.12.10 urllib3-2.0.2\n[Python Unit Tests/windows]   | WARNING: You are using pip version 21.2.4; however, version 23.1.2 is available.\n[Python Unit Tests/windows]   | You should consider upgrading via the '/opt/hostedtoolcache/Python/3.8.11/x64/bin/python -m pip install --upgrade pip' command.\n[Python Unit Tests/windows]   \u2705  Success - Main pip install responses\n[Python Unit Tests/windows] \u2b50 Run Main pip install -r requirements.txt\n[Python Unit Tests/windows]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/3] user= workdir=\n[Python Unit Tests/linux  ]   \u2705  Success - Main export PYTHONPATH=$PYTHONPATH:$(pwd)\n[Python Unit Tests/macos  ]   \u2705  Success - Main export PYTHONPATH=$PYTHONPATH:$(pwd)\n[Python Unit Tests/macos  ] \u2b50 Run Main pip install responses\n[Python Unit Tests/linux  ] \u2b50 Run Main pip install responses\n[Python Unit Tests/macos  ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/4] user= workdir=\n[Python Unit Tests/linux  ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/4] user= workdir=\n[Python Unit Tests/macos  ]   | Collecting responses\n[Python Unit Tests/linux  ]   | Collecting responses\n[Python Unit Tests/linux  ]   |   Downloading responses-0.23.1-py3-none-any.whl (52 kB)\n[Python Unit Tests/macos  ]   |   Downloading responses-0.23.1-py3-none-any.whl (52 kB)\n[Python Unit Tests/windows]   | Collecting CT3\n[Python Unit Tests/macos  ]   | Collecting urllib3>=1.25.10\n[Python Unit Tests/macos  ]   |   Downloading urllib3-2.0.2-py3-none-any.whl (123 kB)\n[Python Unit Tests/linux  ]   | Collecting requests<3.0,>=2.22.0\n[Python Unit Tests/linux  ]   |   Downloading requests-2.31.0-py3-none-any.whl (62 kB)\n[Python Unit Tests/windows]   |   Downloading CT3-3.3.1-cp38-cp38-manylinux_2_5_x86_64.manylinux1_x86_64.whl (683 kB)\n[Python Unit Tests/macos  ]   | Collecting pyyaml\n[Python Unit Tests/linux  ]   | Collecting urllib3>=1.25.10\n[Python Unit Tests/linux  ]   |   Downloading urllib3-2.0.2-py3-none-any.whl (123 kB)\n[Python Unit Tests/macos  ]   |   Downloading PyYAML-6.0-cp38-cp38-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_12_x86_64.manylinux2010_x86_64.whl (701 kB)\n[Python Unit Tests/linux  ]   | Collecting types-PyYAML\n[Python Unit Tests/linux  ]   |   Downloading types_PyYAML-6.0.12.10-py3-none-any.whl (14 kB)\n[Python Unit Tests/windows]   | Installing collected packages: CT3\n[Python Unit Tests/macos  ]   | Collecting requests<3.0,>=2.22.0\n[Python Unit Tests/macos  ]   |   Downloading requests-2.31.0-py3-none-any.whl (62 kB)\n[Python Unit Tests/macos  ]   | Collecting types-PyYAML\n[Python Unit Tests/macos  ]   |   Downloading types_PyYAML-6.0.12.10-py3-none-any.whl (14 kB)\n[Python Unit Tests/linux  ]   | Collecting pyyaml\n[Python Unit Tests/linux  ]   |   Downloading PyYAML-6.0-cp38-cp38-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_12_x86_64.manylinux2010_x86_64.whl (701 kB)\n[Python Unit Tests/linux  ]   | Collecting idna<4,>=2.5\n[Python Unit Tests/windows]   | Successfully installed CT3-3.3.1\n[Python Unit Tests/linux  ]   |   Downloading idna-3.4-py3-none-any.whl (61 kB)\n[Python Unit Tests/windows]   | WARNING: You are using pip version 21.2.4; however, version 23.1.2 is available.\n[Python Unit Tests/windows]   | You should consider upgrading via the '/opt/hostedtoolcache/Python/3.8.11/x64/bin/python -m pip install --upgrade pip' command.\n[Python Unit Tests/linux  ]   | Collecting certifi>=2017.4.17\n[Python Unit Tests/linux  ]   |   Downloading certifi-2023.5.7-py3-none-any.whl (156 kB)\n[Python Unit Tests/windows]   \u2705  Success - Main pip install -r requirements.txt\n[Python Unit Tests/macos  ]   | Collecting charset-normalizer<4,>=2\n[Python Unit Tests/macos  ]   |   Downloading charset_normalizer-3.1.0-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (195 kB)\n[Python Unit Tests/macos  ]   | Collecting certifi>=2017.4.17\n[Python Unit Tests/macos  ]   |   Downloading certifi-2023.5.7-py3-none-any.whl (156 kB)\n[Python Unit Tests/macos  ]   | Collecting idna<4,>=2.5\n[Python Unit Tests/macos  ]   |   Downloading idna-3.4-py3-none-any.whl (61 kB)\n[Python Unit Tests/linux  ]   | Collecting charset-normalizer<4,>=2\n[Python Unit Tests/linux  ]   |   Downloading charset_normalizer-3.1.0-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (195 kB)\n[Python Unit Tests/macos  ]   | Installing collected packages: urllib3, idna, charset-normalizer, certifi, types-PyYAML, requests, pyyaml, responses\n[Python Unit Tests/linux  ]   | Installing collected packages: urllib3, idna, charset-normalizer, certifi, types-PyYAML, requests, pyyaml, responses\n[Python Unit Tests/windows] \u2b50 Run Main pip install coveralls\n[Python Unit Tests/macos  ]   | Successfully installed certifi-2023.5.7 charset-normalizer-3.1.0 idna-3.4 pyyaml-6.0 requests-2.31.0 responses-0.23.1 types-PyYAML-6.0.12.10 urllib3-2.0.2\n[Python Unit Tests/linux  ]   | Successfully installed certifi-2023.5.7 charset-normalizer-3.1.0 idna-3.4 pyyaml-6.0 requests-2.31.0 responses-0.23.1 types-PyYAML-6.0.12.10 urllib3-2.0.2\n[Python Unit Tests/windows]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/4] user= workdir=\n[Python Unit Tests/macos  ]   | WARNING: You are using pip version 21.2.4; however, version 23.1.2 is available.\n[Python Unit Tests/macos  ]   | You should consider upgrading via the '/opt/hostedtoolcache/Python/3.8.11/x64/bin/python -m pip install --upgrade pip' command.\n[Python Unit Tests/linux  ]   | WARNING: You are using pip version 21.2.4; however, version 23.1.2 is available.\n[Python Unit Tests/linux  ]   | You should consider upgrading via the '/opt/hostedtoolcache/Python/3.8.11/x64/bin/python -m pip install --upgrade pip' command.\n[Python Unit Tests/linux  ]   \u2705  Success - Main pip install responses\n[Python Unit Tests/macos  ]   \u2705  Success - Main pip install responses\n[Python Unit Tests/macos  ] \u2b50 Run Main pip install -r requirements.txt\n[Python Unit Tests/linux  ] \u2b50 Run Main pip install -r requirements.txt\n[Python Unit Tests/linux  ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/5] user= workdir=\n[Python Unit Tests/macos  ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/5] user= workdir=\n[Python Unit Tests/windows]   | Collecting coveralls\n[Python Unit Tests/linux  ]   | Collecting CT3\n[Python Unit Tests/windows]   |   Downloading coveralls-3.3.1-py2.py3-none-any.whl (14 kB)\n[Python Unit Tests/linux  ]   |   Downloading CT3-3.3.1-cp38-cp38-manylinux_2_5_x86_64.manylinux1_x86_64.whl (683 kB)\n[Python Unit Tests/linux  ]   | Installing collected packages: CT3\n[Python Unit Tests/macos  ]   | Collecting CT3\n[Python Unit Tests/macos  ]   |   Downloading CT3-3.3.1-cp38-cp38-manylinux_2_5_x86_64.manylinux1_x86_64.whl (683 kB)\n[Python Unit Tests/macos  ]   | Installing collected packages: CT3\n[Python Unit Tests/linux  ]   | Successfully installed CT3-3.3.1\n[Python Unit Tests/linux  ]   | WARNING: You are using pip version 21.2.4; however, version 23.1.2 is available.\n[Python Unit Tests/linux  ]   | You should consider upgrading via the '/opt/hostedtoolcache/Python/3.8.11/x64/bin/python -m pip install --upgrade pip' command.\n[Python Unit Tests/linux  ]   \u2705  Success - Main pip install -r requirements.txt\n[Python Unit Tests/macos  ]   | Successfully installed CT3-3.3.1\n[Python Unit Tests/macos  ]   | WARNING: You are using pip version 21.2.4; however, version 23.1.2 is available.\n[Python Unit Tests/macos  ]   | You should consider upgrading via the '/opt/hostedtoolcache/Python/3.8.11/x64/bin/python -m pip install --upgrade pip' command.\n[Python Unit Tests/macos  ]   \u2705  Success - Main pip install -r requirements.txt\n[Python Unit Tests/windows]   | Collecting coverage!=6.0.*,!=6.1,!=6.1.1,<7.0,>=4.1\n[Python Unit Tests/windows]   |   Downloading coverage-6.5.0-cp38-cp38-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl (214 kB)\n[Python Unit Tests/windows]   | Collecting docopt>=0.6.1\n[Python Unit Tests/windows]   |   Downloading docopt-0.6.2.tar.gz (25 kB)\n[Python Unit Tests/windows]   | Requirement already satisfied: requests>=1.0.0 in /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages (from coveralls) (2.31.0)\n[Python Unit Tests/windows]   | Requirement already satisfied: charset-normalizer<4,>=2 in /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages (from requests>=1.0.0->coveralls) (3.1.0)\n[Python Unit Tests/windows]   | Requirement already satisfied: urllib3<3,>=1.21.1 in /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages (from requests>=1.0.0->coveralls) (2.0.2)\n[Python Unit Tests/windows]   | Requirement already satisfied: certifi>=2017.4.17 in /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages (from requests>=1.0.0->coveralls) (2023.5.7)\n[Python Unit Tests/windows]   | Requirement already satisfied: idna<4,>=2.5 in /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages (from requests>=1.0.0->coveralls) (3.4)\n[Python Unit Tests/windows]   | Using legacy 'setup.py install' for docopt, since package 'wheel' is not installed.\n[Python Unit Tests/windows]   | Installing collected packages: docopt, coverage, coveralls\n[Python Unit Tests/windows]   |     Running setup.py install for docopt: started\n[Python Unit Tests/windows]   |     Running setup.py install for docopt: finished with status 'done'\n[Python Unit Tests/windows]   | Successfully installed coverage-6.5.0 coveralls-3.3.1 docopt-0.6.2\n[Python Unit Tests/windows]   | WARNING: You are using pip version 21.2.4; however, version 23.1.2 is available.\n[Python Unit Tests/windows]   | You should consider upgrading via the '/opt/hostedtoolcache/Python/3.8.11/x64/bin/python -m pip install --upgrade pip' command.\n[Python Unit Tests/windows]   \u2705  Success - Main pip install coveralls\n[Python Unit Tests/linux  ] \u2b50 Run Main pip install coveralls\n[Python Unit Tests/macos  ] \u2b50 Run Main pip install coveralls\n[Python Unit Tests/linux  ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/6] user= workdir=\n[Python Unit Tests/macos  ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/6] user= workdir=\n[Python Unit Tests/windows] \u2b50 Run Main Unit tests...\n[Python Unit Tests/windows]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/5] user= workdir=./tests\n[Python Unit Tests/linux  ]   | Collecting coveralls\n[Python Unit Tests/linux  ]   |   Downloading coveralls-3.3.1-py2.py3-none-any.whl (14 kB)\n[Python Unit Tests/linux  ]   | Collecting docopt>=0.6.1\n[Python Unit Tests/linux  ]   |   Downloading docopt-0.6.2.tar.gz (25 kB)\n[Python Unit Tests/linux  ]   | Collecting coverage!=6.0.*,!=6.1,!=6.1.1,<7.0,>=4.1\n[Python Unit Tests/linux  ]   |   Downloading coverage-6.5.0-cp38-cp38-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl (214 kB)\n[Python Unit Tests/linux  ]   | Requirement already satisfied: requests>=1.0.0 in /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages (from coveralls) (2.31.0)\n[Python Unit Tests/linux  ]   | Requirement already satisfied: urllib3<3,>=1.21.1 in /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages (from requests>=1.0.0->coveralls) (2.0.2)\n[Python Unit Tests/linux  ]   | Requirement already satisfied: charset-normalizer<4,>=2 in /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages (from requests>=1.0.0->coveralls) (3.1.0)\n[Python Unit Tests/linux  ]   | Requirement already satisfied: idna<4,>=2.5 in /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages (from requests>=1.0.0->coveralls) (3.4)\n[Python Unit Tests/linux  ]   | Requirement already satisfied: certifi>=2017.4.17 in /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages (from requests>=1.0.0->coveralls) (2023.5.7)\n[Python Unit Tests/linux  ]   | Using legacy 'setup.py install' for docopt, since package 'wheel' is not installed.\n[Python Unit Tests/linux  ]   | Installing collected packages: docopt, coverage, coveralls\n[Python Unit Tests/linux  ]   |     Running setup.py install for docopt: started\n[Python Unit Tests/linux  ]   |     Running setup.py install for docopt: finished with status 'done'\n[Python Unit Tests/linux  ]   | Successfully installed coverage-6.5.0 coveralls-3.3.1 docopt-0.6.2\n[Python Unit Tests/linux  ]   | WARNING: You are using pip version 21.2.4; however, version 23.1.2 is available.\n[Python Unit Tests/linux  ]   | You should consider upgrading via the '/opt/hostedtoolcache/Python/3.8.11/x64/bin/python -m pip install --upgrade pip' command.\n[Python Unit Tests/linux  ]   \u2705  Success - Main pip install coveralls\n[Python Unit Tests/linux  ] \u2b50 Run Main Unit tests...\n[Python Unit Tests/linux  ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/7] user= workdir=./tests\n[Python Unit Tests/macos  ]   | Collecting coveralls\n[Python Unit Tests/macos  ]   |   Downloading coveralls-3.3.1-py2.py3-none-any.whl (14 kB)\n[Python Unit Tests/macos  ]   | Collecting docopt>=0.6.1\n[Python Unit Tests/macos  ]   |   Downloading docopt-0.6.2.tar.gz (25 kB)\n[Python Unit Tests/macos  ]   | Requirement already satisfied: requests>=1.0.0 in /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages (from coveralls) (2.31.0)\n[Python Unit Tests/macos  ]   | Collecting coverage!=6.0.*,!=6.1,!=6.1.1,<7.0,>=4.1\n[Python Unit Tests/macos  ]   |   Downloading coverage-6.5.0-cp38-cp38-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl (214 kB)\n[Python Unit Tests/macos  ]   | Requirement already satisfied: charset-normalizer<4,>=2 in /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages (from requests>=1.0.0->coveralls) (3.1.0)\n[Python Unit Tests/macos  ]   | Requirement already satisfied: certifi>=2017.4.17 in /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages (from requests>=1.0.0->coveralls) (2023.5.7)\n[Python Unit Tests/macos  ]   | Requirement already satisfied: urllib3<3,>=1.21.1 in /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages (from requests>=1.0.0->coveralls) (2.0.2)\n[Python Unit Tests/macos  ]   | Requirement already satisfied: idna<4,>=2.5 in /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages (from requests>=1.0.0->coveralls) (3.4)\n[Python Unit Tests/macos  ]   | Using legacy 'setup.py install' for docopt, since package 'wheel' is not installed.\n[Python Unit Tests/macos  ]   | Installing collected packages: docopt, coverage, coveralls\n[Python Unit Tests/macos  ]   |     Running setup.py install for docopt: started\n[Python Unit Tests/macos  ]   |     Running setup.py install for docopt: finished with status 'done'\n[Python Unit Tests/macos  ]   | Successfully installed coverage-6.5.0 coveralls-3.3.1 docopt-0.6.2\n[Python Unit Tests/macos  ]   | WARNING: You are using pip version 21.2.4; however, version 23.1.2 is available.\n[Python Unit Tests/macos  ]   | You should consider upgrading via the '/opt/hostedtoolcache/Python/3.8.11/x64/bin/python -m pip install --upgrade pip' command.\n[Python Unit Tests/macos  ]   \u2705  Success - Main pip install coveralls\n[Python Unit Tests/macos  ] \u2b50 Run Main Unit tests...\n[Python Unit Tests/macos  ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/7] user= workdir=./tests\n[Python Unit Tests/linux  ]   | E...EE/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/lib/bs4_parser.py:34: GuessedAtParserWarning: No parser was explicitly specified, so I'm using the best available HTML parser for this system (\"html5lib\"). This usually isn't a problem, but if you run this code on another system, or in a different virtual environment, it may use a different parser and behave differently.\n[Python Unit Tests/linux  ]   | \n[Python Unit Tests/linux  ]   | The code that caused this warning is on line 34 of the file /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/lib/bs4_parser.py. To get rid of this warning, pass the additional argument 'features=\"html5lib\"' to the BeautifulSoup constructor.\n[Python Unit Tests/linux  ]   | \n[Python Unit Tests/linux  ]   |   self.soup = BeautifulSoup(*args, **kwargs_new)\n[Python Unit Tests/macos  ]   | EE...E/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/lib/bs4_parser.py:34: GuessedAtParserWarning: No parser was explicitly specified, so I'm using the best available HTML parser for this system (\"html5lib\"). This usually isn't a problem, but if you run this code on another system, or in a different virtual environment, it may use a different parser and behave differently.\n[Python Unit Tests/macos  ]   | \n[Python Unit Tests/macos  ]   | The code that caused this warning is on line 34 of the file /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/lib/bs4_parser.py. To get rid of this warning, pass the additional argument 'features=\"html5lib\"' to the BeautifulSoup constructor.\n[Python Unit Tests/macos  ]   | \n[Python Unit Tests/macos  ]   |   self.soup = BeautifulSoup(*args, **kwargs_new)\n[Python Unit Tests/macos  ]   | .EEE====================\n[Python Unit Tests/macos  ]   | STARTING - ALL TESTS\n[Python Unit Tests/macos  ]   | ====================\n[Python Unit Tests/macos  ]   | this will include\n[Python Unit Tests/macos  ]   | - pp_tests.py\n[Python Unit Tests/macos  ]   | - tvinfo_api_tests.py\n[Python Unit Tests/macos  ]   | - network_timezone_tests.py\n[Python Unit Tests/macos  ]   | - helpers_tests.py\n[Python Unit Tests/macos  ]   | - ignore_and_require_words_tests.py\n[Python Unit Tests/macos  ]   | - webapi_tests.py\n[Python Unit Tests/macos  ]   | - compatibility_tests.py\n[Python Unit Tests/macos  ]   | - db_tests.py\n[Python Unit Tests/macos  ]   | - search_tests.py\n[Python Unit Tests/macos  ]   | - scene_helpers_tests.py\n[Python Unit Tests/macos  ]   | - snatch_tests.py\n[Python Unit Tests/macos  ]   | - xem_tests.py\n[Python Unit Tests/macos  ]   | - newznab_tests.py\n[Python Unit Tests/macos  ]   | - migration_tests.py\n[Python Unit Tests/macos  ]   | - name_parser_tests.py\n[Python Unit Tests/macos  ]   | - show_tests.py\n[Python Unit Tests/macos  ]   | - tv_tests.py\n[Python Unit Tests/macos  ]   | - common_tests.py\n[Python Unit Tests/macos  ]   | testing person: TMDb: 968006\n[Python Unit Tests/macos  ]   | testing person: TVmaze: 15776\n[Python Unit Tests/macos  ]   | testing person: Trakt: 260345\n[Python Unit Tests/macos  ]   | testing person: IMDb: 3031063\n[Python Unit Tests/macos  ]   | unused files: {'c55e854bb64c382c20a7f9c2b935710b52d244c59d56f66b84f7524f0cc5cce9.obj_data', '481ef749d546a669798720cfa3b7f78435c16fca4165558f2c6081c225968160.obj_data', 'e72e4f47908e23af45be9303c81f7eb0b1137a3a9bb410c07b29bf1e33c5dc67.data', '5bdd1c1b847d98705feaccd39d84cf372f9f88da475f35625f9a85edf537ecbb.obj_data', 'c125f32afb1bd8e4660424c78ca9fa13f0c31a90891922ed5b6722aca3ac064e.data', 'c67f7e2f8184480a4ad959dd1bcf32ce82b37a07e18a2fa31b92b6ece34e3d51.data', '5a32b63e77f8c6a2594287c0161b770d368bee3771edb2ac3cbc173ac4e06941.obj_data', 'fafab82f85acb3c3bf4daa55dff9e664ebf69763357382f7afdde055f0c07984.data', '4bd42b7becdad01f9214ab51182f4ffbf454ba66289db3a4831e7dc3aaf8d895.data', '2ed461099fb00b9253929e6859a3a2e9ca15422b511da3b8b853becc257932e8.data', 'bc528a714a219bc38f1c4a337b5494e9a98c5019d0c88ebc876d3c6736fbc5dd.data', '528a8ab7840785ddfc3164df24000069fd627154c1021734bb4422b71a27305b.data', 'ddc30ceeccd141fe1f1455995ed96299d290b2c606c2a0612118c40ac792b92f.obj_data', 'fd8649918481dfefd0b31b2b74fcfa9f40066220f1393c248e4523e75fabaed1.data', '90e40779b01f3c920c77ebdb10e55b9c724953f6cf896eac77f0058840a5d0eb.obj_data', '17c5f3b4ff1067e8f12a05bf13b17ddc271792986fb97d19bc641281a676f1e7.data', '186023d0fd7394baeec9a8eaeb57cd3375ecb66b2388d4e50cdd3c69e19043a5.obj_data', '90c942aea32e621d24204873d09050e0ea04af4dd819b042d7b1ed3481022f35.obj_data', '4400498f7f9db8670f1378cbeb7f2f52553cd29d4772155138089a2dc7be6fa0.data', '5b83dc8110713f626382461ec68e02d558a6225ab6882056457eaae7e97a302a.data', '30d666db7c442b7041dbc112304bb09fd9a72076598c742aeb5edc9858bd7f17.data', '56a7ef92a567f41c819ce6373b21cbb1ec7a5cc1cb3390ce68f06c544f0d1982.data', 'ac80c0ffb06ea16dc3b5e89e6539725dc60630dc958a4bd5b9e22e887180acc7.data', '21448bf03b563f8fec02052a1c356ffda74f4376614dfffd9648bcb846c89ace.data', '502febd3497e0733cfa4cd8fc5fc3f5e7499ceb99a493eac16186c1994153044.obj_data', '648818b354563f5d3b303d4a2c0e88435102db5660b6976d057eab05ee5518c8.data', '23160ac2d48d5394b5ab9a0ece735110d04e90ff5e858cc2fe9650f213432352.data', 'cd98fb9642d2355d8ceb1eb564958daa761e2aa10ed60096b648f86e677473ee.data', '16ebc88e676e906c268974126bb7ae8deac4d1c70d2b5e6bfe7b504a15c76cf2.obj_data', 'd5c27ec085fd065c55e4980e157cb5e1c261d88a8089e234c5d0be3f232e0a97.data', 'e77ff1bc7378673ce532c005541ca7b8f4e250f391d989ec3389495ee3048b9d.data', '443bc26ad235dcd2bc32765a6b64b0481e98bac80c53f3c490ed0e994e43153e.obj_data', '0c83048a1bdb27602bcfef2edf87b94ab52903333c022b19209919c62b751e0a.data', '5533525209749f5b8f0a712af8e836766c110ef577de9be2b5c49982f452e005.obj_data', '87a1591a53625586a853da9926c054222a18ea82643c9e2fd2ce1aa7774d5d4b.data', '0dfc5546679e652d2cd4f82d515c73e42bbdd22f8c3a9a187a76a6d69fa518a3.data', 'aede00fb8bd5a0b5c9add3bec2e8db063e1a0767ed09a88038211994f52b176d.obj_data', '8bba320eea247cc7d054b9fcafb9e11d87b7638ac90e71605b040d7970bb1c70.data', '4e8d91720303f19a6e6594c459dce2c039d559143e4bdeef8353cced22ddf462.obj_data', '4539d263dcce33e01d0f56d3762636e58fe951a0ee1742e003852cad4f0959e3.data', 'b3fffb26ca4b32d1e31bc25533d0f6065df2feb8ac16a7d78323ce813f7db0a6.data', 'c95f9be0f6c3b3dd1b0fcc7232713ebd5c3096d3815c2bcf7a06365c30d5a676.data', '4f4a7770c5945b3a5cd6fb6381cbe04f99eac8bb1764d1100ee362e4573ca635.obj_data', 'bc885a119d2a742e7563b9f0f5248287ea439756a47e2bc3fec1a22f80f1464f.data', '3d566dc6153ed5b01d00e42fda8900e242e976b76de626879e4d01d4c671b065.data', '3f34fe97994f0be605174c141cbec7f9888ab9ccf9da1507c78faecfd44401ae.data', '77416d73f6f4e8c1e63de1fc6a0b9762fb17f0a657b2fb4740cbcab584ad5187.data', '31674aa8138822ea481d83b4f120401608eff189460dfb56a0d41e6635bf5d30.data', '4a37b82dabfb2b1fe98104240c2b5b94475002d4312f0aafd7d4f97283da9fc4.obj_data', '2c31741fdb548ab64d90c2acbbf730cef9b9debbc04d11ac07ed976832d0857c.obj_data', '17117bd58be4182a969b014ba816e2ea3b266d6bad7429f4e9ce0203819ff5de.data', '75cc012f7509a27f681f46a4f94eb22262d8354df6b5963354ea9eacb8fb9e55.data', 'b5fc03b3a0c798777ded6135a50e666e0e7731331c888a7a2d94cb16cc4afb9b.data', '9ca387eb24057381d943e2b2a20664eb8ceab87fa3b5475d471e5a7f8626878f.data', 'efec1f510f873f25ae5a5883bf835a6f54413c244d3154c09458ba1a5f59677b.obj_data', 'd03f54a9ab61b777bb3578841a9d128e66f93e5f7ed9606cd662ce08f317be94.data', '45e8ce3e8b449529f89ede756b3a9c6d8bfcbda37577b82accbce470371ea539.obj_data', '5ad3db843b8bcde1f068f99c2651062d16f38d2239eb4fd0f10508a3c641c019.obj_data', '7b3d6ec1e025f826bb93e0ffa16570d548be724cb1da3d82f74818b2a6d5c371.data', '5353fd0d66ee6cbda45d2598476ccdc66b1ab537ce3411cb3231ba02060097bf.data', 'edbef3cc91b926f81f30d84c0bcdcbedb43d79aa1ff28e1b67d15a465016f2f8.obj_data', 'e841ed1c58eef80ae71ba23bb1919d7dc77fb9b553dd983160280a43103f048b.data', '9964f78487b1a5123c1b6cdc07a08c7bb02423435abab13adb1c847d8887b8e5.obj_data', '56cc0186540cf1b0fb9ac191bcb8be6cbb60bcddbd78c61cbae64897bf230608.obj_data', '92cf9a07a23a32d81159730efb8cbcd29446734f3819f5a763b2904f95891fbb.data', '2e4429c5472dbf6f7221101f392c5bf28dc7319d9dda2f77a6d084555f0ba3e4.data', '27f54571a9da45cff8a7904c52219101ed86f9e3710dfaa0969ef10ab80482fb.data', '170635c883ef42d46e8cc31c71122aa7b4388a74e08bea5e2af421327e6f0265.data', '947db4bc14e10add8053ecf389df0267a501ebcc4b7b3b0db59e95260959a7b0.data', 'd42e2e9e5431607351d8074e4a48add0b95701b1f3930adb31a0ba4402800e0d.data', 'a10d862845493cd44f2ace2ba5106376410be1742729542178c75ba27b5986b1.obj_data', '34fa0e7bfa800a10c57006c4ee128f2e88778443713f4a6893674977aaa4ee19.obj_data', '89e1ebc7fb2a089ee18a453abe0c6af28b5cffddc12fb7bda34c0d8cd7c23ae5.data', '807254c3813fe50dd006f6515874f8489be563f143937e2ebff19b66659fad4f.data', '2e2c0f16c32ad314cfda35aec5ddb688ee0b13ca43864ee1d9faadcc5cb2f553.data', 'f50beb695d25bf062ad4d3c59afe4382ecbbbd784c8565e2c43a39055dfb4ba2.data', '1a07c81776902be37b00a5e419437b4c68af64df93652d44923398d231f44995.data', '5e0adc77e533c2694095395e4aee465709afc3bd8e8efa621dfbf7bee7d95b40.data', '3c7039b87148eb5d645002bc3096a61a7ac96cd4dd6880d7d8d8c622d5ab7a53.data', 'dcb3ba5cdec38f0c7504756f7f4e26db3fe8a73659c89072aeea544acd62ea2a.obj_data', '3893d3cfd2a012dc6855be4b8cc0ac32e98b8db0fa54dec54f01a3e38a521332.data', '48a5d04a9bb9c28fc3e14147ea4f1aeed1fa125cc301304fae3164309c4c6447.data', '67c6166cd63b9882ca5f87c6c99765f402b29fcf767d75bb292f0246531f416d.obj_data', 'da61cca5a5c062e337a33e38df7c441faf952170e1dea16c19c709ca1245a5de.obj_data', 'fd225f6274b24f5b1905bc272d25d18e7203b033818d5ac2ba8d470231e15a2c.obj_data', 'f7979c87115ff11f2eedb294a45a25b06ccc5bc67e26ea31848f62f5739aa5c9.obj_data', 'a0c3006b6b080d9e73f02f923d727f80b175c8e84e81d7e9fefe2ab49d2cb906.data', 'b9926f2b9a72af43f5910df21048da113d1288cc96ed69b33f655bfeb502086a.data', 'e87a771871b62b59d8f2e2b9c7d138f6b72ba71a56b030f88efe178d125f37a2.data', '8855abb4ebbd1227d67c76b5cfd4169955217704ddbab852f6ca60cc8a226a83.data', '038445677435284fabfae2ef510aae6158d0986f91821227d794aa0de97452bd.obj_data', '326b5e044ce064f6cc2ce8361cfdf7a26428d66c7fef58d4a872370ff1c3c96a.data', '5c3d104448319a6769924ec4d558369cecd7d9914fa8e3c229f0e972336cd9f1.data', 'f13aaf6c6423209bdd16deaf1b04998ad2d8c16810feab5f0f55d8e8880611f3.data', 'dd38622fc86a1a77e81864dc8540e0f850de203181d7c9b422ec8fd944b0a107.obj_data', '76f02ecf74fda0bce758d7ebfa4fc368eb8b702bb22e265e322550b4c36bca61.data', '7512c46c170d46530e4f9387ec13f9e17008e6390bf33436e4eec6f56a62d1f7.data', 'df6eadc0026f971615d9017f148edac27efbe82af287a523507a45a3433dc4c9.obj_data', '182e6626bed68f1d209fa4032bf0b830cef364efbf84b955d45011675e6196fd.obj_data', '29d20ee1837a8a777e6af3feb156fec476b7ec16bd76ff32840f2fa2623d712a.data', '22989beee1f37404ba905a60fe65ec2196db07563a5bd08a654223df62a7e46c.obj_data', 'a1fdd06ce7e16ca879f92c3814859b58dd3752661fa8989edb061a2f6c76cfbb.obj_data', '6833745e63e5337ee03881a594c7fa7254b2d259d4a90702d95a2d820b4c12f3.data', 'c171f33df676807136f9a84162d83081cf09955d68fab545b0de0ede2aea6bcd.data', '07e4a5a91e346bed55c78d75a40694a06592b460c06827b4fb96ecb7164ddd72.obj_data', '880778002dc0e84cad4cd6c78bd51aa8b305b7bd054f42b7d8f9a852a85d3539.data', '70d59b9d51fabf256150a86647ef9755d177d838b550ba6c772e6c0326ca0f85.data', '22d1174d6694674356d223a3ea69c1b67eb4ac01d7468b51c4e8dc44815bd921.data', '1bfaecb5aee0d196189b49bb93bdfaa8120001b7ab283941d7dc6884af2e210d.data', 'badf351c627c9c9ffa950d4a6ea2181842053d9be2a7e81bfe48c35ff5a1683a.obj_data', '21427e1bf9c5dc1b81a2c9df73063d3507115010c7302f05caa7d294c8cc664c.obj_data', 'ee6d7be82a5026b70adc194ff0b6ee34eca0b965c1861b1ac4f57a94797ea631.data', 'ba4a66b07ee1c0676ee6d2065be7a3c4d6362a0f20c464f42cad20f62d88a95e.obj_data', '2eab6039c0da89069b291d33dcbd2a919761c87a5345f1a9d71476c5245b1275.obj_data', '7261e42498d28901f8e7d4ff25d48c75faa3eb081da86abc17535b966a46080b.data', '675883464fc53d4c35d61d773d99930b8391f14916de607a0dd86c68cf2536a4.obj_data', '82e3cbbd102587ba54d80fdbe6756e142caaf661b8a1484ed867f00650e35451.data', '2e13afb4acec28c7e5cc2d6e79295e8b2496cac43d80ee73061037b819c66273.data', '73359a5fb2fee2fa49c42c64c51598cbf6b651655b8710667f4e56c9384a26ed.data', '9d5fb9af5fafb2e354e9590a6eb3fe59dbcc27e0f4fb8ccc7ca6bf307d532610.data', '6e7d0d08137cc13d0837cb64a4606ee60259dde0cae3cd6c34034ac91ac0d560.data', '4c9dd7466f1d8818c8dc9f6ad0952981ebc3d1f65f8cb5be5f8e8b60167fd4fb.data', '0402e2baa8244125ae9ae8fd8b3586453dad952a22795bcabafe1d63bc29d66f.data', '841c08f2ec66225d75bac8e9aeca9f152e9c36fbc6b2e7de63d77b9ec89c3921.data', '4658a80aed60539ae81ab8d60163a4f2dde3e42e2746eb9a1ab07dca95b8eb48.data', '9add06b3af8c06a5d9831299f3375b0031d8c8135fba006d84ede88a7d49fa59.data', '438eaab176cd40b38e7820b54196f56983d912daf96ab62d67ad66782c14b5f0.data', '4c7c6eb45b5be6ffae768ee8b3e4ddf9ee6eef9c988f3233b91f8192c0e38584.data', '4cb15ee442ec936aa4a8e8dcde0b4592cc9297243f1b71e980ae5d58cefb3863.obj_data', '2d039a3e509f71352669ca4e06041eb2a9738629e88a7c3e68a16c7e601ea4b0.obj_data', '08c8f985005889ce4b6311a28dbc592676099ed7fde08f7599f4cc3e04ce8e87.data', '5f25a831202035524e89f2fea4a40fa55db6ae7be22374d54da475018d783ee0.data', '35cd546e7f82fcaccd22c37af6613697bed44db469d4f76a8417403c2b77bd2b.data', '3f0cbbc88b32cfc64cff188b342a143366b2b99c6288fba8b5153367df061656.data', '413db559d232e17eebcf90fc0e98c82f2e00a0b9b3bafb073f4e33cb7f43c691.data', '2e89a532627022f47f530477b4c82e8c5a335be6c988941d15ea35cce5e1fbea.data', '9c755a20454891bb728ff90a6e9c78699aa625c1fc3fc59b1bb78dfa33fb1b3e.obj_data', 'eafedf8f54531efef157a370f6ff5cc718ebe303f05ef8f6ec7a8747800a04b0.obj_data', 'cb4690f70bd198c078506d973030b2d1a2458f379a124137960d53bb74495876.obj_data', 'dbfa0578f70df29edee6875406c17721376a591ee650839caf1e1b2886a86b81.data', 'b1829c20667efaeb4b83255e39501c7c38d986a88b9f9d73d187b0cb70d9060e.data', '76b705c40c77e84b62755ddc9232a5f9cd68e3498d70c86013f1e56558e5be5a.data', 'ce1640dc2ed84b5f5e433becdc5fa9e5995f5aa7c0dc4289dd8bc13a965cb2e0.obj_data', 'c96aefaefe7553443e9c1539c33d35f5b854dba94760f54d4559faf593d90b5b.data', '3df626ef1944ff0bcc377194cbd7b6508897d58a402ce2ef994da70052946fa9.obj_data', '7881354e5850db4313b154841613c45f62bf1bdfc1d95a72e5b0d44d5ab27e52.obj_data', '8e2a48dbbd07a4e2262a2aa5fedadae5d7e3c530494abb4d2fbfa4ce6ad97895.data', '4c5bd6265d0310449b811a9ee8ef106d7328a4d8510a2d61a253f80a3fcc939f.data', 'b087f6edf74dd067f9dc723bc93875f65ad7ff3b5d3896a9d95676e3f61e26c5.data', '6cf64206b6480572ca6010e28448330957b8ece812dfe56479df33b844dc3012.data', 'a1bb6af4a350b35fd1d1fb8a909ab9e1159b7fe65376908aa14efd35410bae16.obj_data', '03dd09a773bcdaf80f73ea56ea0ed4af923a7ee60e1ac8d3f510b68942f97e21.obj_data', '8cc6609199afc26d92588cbe20244cf30fb9afc5577649e32d010fdb95946883.data', 'b37b264719c0c5954bf57dcfce7fccf7fae1d8ea95da639aff0a4f580c239add.obj_data', '46abed8409c546f69ed6f1bb379eba2b6435ca0c0459b5f1e456b748ae119296.obj_data', 'c39637c11256690aefb42ad92fd99b383da87899c3498447aef91b0e74f01cb0.data', '01ceab4e46d976136784d89c7ea4467179b2f70223ce6da011cddbe7e0784ed3.obj_data', '4bfdb7325c4ebcede68ec96de734371bb069ba99e68cef7f490a089eae99e2d6.obj_data', '8f5fef3c110926f32780ef609743177a021b811e997528d9de0c0c0b60cb7508.data', '9104bbbb65f586a0d0e02177420940f1bb047631702440e6f669f9ab130b196c.data', 'd7f9c5e25ab675db72b7e8041e548e232830c3dbae382db0e276165e11ed824b.data', '80fd3e9e2e2abe5b2cf6406e020d508c38648b017c832a03162958b7eb048e7c.obj_data', 'e8e86bce73634d572c641e04bb77c7a9847135fe05536966737ddad091512d09.obj_data', 'd6f3425d23bc78f3765c13610076f70bd81c7cbd95eaed7cb8962a4ef1e3e2e3.data', '27e9be4d8b098de87bd78980cec5ec74e817f0c048a4a8c9e72397a2c8ee7085.obj_data', '74eb934daf296235b9681641c7b2387e29599922b26fa415ac7d628ea43324b9.data', 'bd7f54dacf87f55cf4fbcf4fd1058a2128bffc551760981f414a20a44fcf79ca.obj_data', '069c310a2351774f022fc79af486f757bd010e0d3fa1ae3778f76d3f59b8aa84.obj_data', 'fa59c5fcedd1f42fda506b77b4f7d535b4210e501f18ee4014b81b0c4e759e15.obj_data', 'cdace0cde9b22b765ed12261a65e78d48173dff95af8cee2332a292e2a38fd5c.obj_data', 'bbed4446a24cab7071ea086eb945d1329f7ab91cc8b65e28c375c6d01f1713fb.data', '31d09e10ffe6f9ed1e048dc190f70af1b1a64410c11c7c8f01a01ee2c2736a6d.data', '0d8bdf423bf777315b7d25184ebee1c58c8051a188b79df3e07945353755489e.data', '462d84c048ef3cfabd459433d393c236f67e9e1a56a9270e856b8c379db2d03d.obj_data', 'f8cea51a7466f77d5157b77338c2cc22240f0030008e9cec2a1fb3c2af388f56.obj_data', '5db50437d52044c552497ed47c5736a10ec13334cb232873d84aec7b69d3f06e.data', '9418de89bce3025e1c8fc317589e784cc8af5e282b48e2f96b279170338e5ae0.data', 'aaca13e577a6de50b65f531881e8eb49b8451194df220b2462338f796f7163bc.obj_data', '91d1a80f26b3948649095ce84cb7e11833a88e3781861eed05f968f61c55d86b.data', '2d20d12f4d4c356184419655e9cd3e815ea46e9e62df5b0ac8f7188a775c19d7.obj_data', '1d8ad0a4b4687e38faef5521bab630b39fc1a047189f1aa67491bb3bd3bd5357.data', '363beeb0c6766ae6706234abdf43a1512d431586cc84964f70bf3a2a234f1548.data', '687ab841e2c1b2c752be7add3e229daff2dbfa7bbb29574fe1048a25dfb565c4.data', 'a74815431e6ea0260b08f9c3274838f9a9ac85b06bb3d722a653894e56124701.data', '4fb0dcac4ab8d771c42ef8900c6a79b89ae3104f23cf72c9b35c6865991c5ad7.data', '41ed49dbf1f7a266e823a8202856e4b7e520082246fd6c62eb79dcdc8e5b5bc7.data', '759f1a69f60b446633dffdff63072b9273b8d0abca603cc190781d2ecd254e88.data', '502d8b4fa2d148b5638506ea738cabc373c36f0e35e1c33a98842138b0f87214.data', 'ed0581e1a01bf6b8e60371c4cd62483f466889da23cf6fe3af72563766bbe00c.data', '15c98af04cfba411018bf0ab3003dc8c69c11c9aa5f9c454704b23989c79644e.data'}/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/lib/dateutil/zoneinfo/__init__.py:30: UserWarning: Falling back to included zoneinfo file\n[Python Unit Tests/macos  ]   |   warnings.warn('Falling back to included zoneinfo file')\n[Python Unit Tests/windows]   | ......EEE.====================\n[Python Unit Tests/windows]   | STARTING - ALL TESTS\n[Python Unit Tests/windows]   | ====================\n[Python Unit Tests/windows]   | this will include\n[Python Unit Tests/windows]   | - pp_tests.py\n[Python Unit Tests/windows]   | - tvinfo_api_tests.py\n[Python Unit Tests/windows]   | - network_timezone_tests.py\n[Python Unit Tests/windows]   | - helpers_tests.py\n[Python Unit Tests/windows]   | - ignore_and_require_words_tests.py\n[Python Unit Tests/windows]   | - webapi_tests.py\n[Python Unit Tests/windows]   | - compatibility_tests.py\n[Python Unit Tests/windows]   | - db_tests.py\n[Python Unit Tests/windows]   | - search_tests.py\n[Python Unit Tests/windows]   | - scene_helpers_tests.py\n[Python Unit Tests/windows]   | - snatch_tests.py\n[Python Unit Tests/windows]   | - xem_tests.py\n[Python Unit Tests/windows]   | - newznab_tests.py\n[Python Unit Tests/windows]   | - migration_tests.py\n[Python Unit Tests/windows]   | - name_parser_tests.py\n[Python Unit Tests/windows]   | - show_tests.py\n[Python Unit Tests/windows]   | - tv_tests.py\n[Python Unit Tests/windows]   | - common_tests.py\n[Python Unit Tests/windows]   | testing TVmaze: get_premieres\n[Python Unit Tests/windows]   | testing TVmaze: get_returning\n[Python Unit Tests/windows]   | testing Trakt: get_anticipated\n[Python Unit Tests/windows]   | testing Trakt: get_recommended with parameter: {'period': 'weekly'}\n[Python Unit Tests/windows]   | testing Trakt: get_recommended with parameter: {'period': 'daily'}\n[Python Unit Tests/windows]   | testing Trakt: get_recommended with parameter: {'period': 'monthly'}\n[Python Unit Tests/windows]   | testing Trakt: get_recommended with parameter: {'period': 'yearly'}\n[Python Unit Tests/windows]   | testing Trakt: get_recommended with parameter: {'period': 'all'}\n[Python Unit Tests/windows]   | testing Trakt: get_most_collected with parameter: {'period': 'weekly'}\n[Python Unit Tests/windows]   | testing Trakt: get_most_collected with parameter: {'period': 'daily'}\n[Python Unit Tests/windows]   | testing Trakt: get_most_collected with parameter: {'period': 'monthly'}\n[Python Unit Tests/windows]   | testing Trakt: get_most_collected with parameter: {'period': 'yearly'}\n[Python Unit Tests/windows]   | testing Trakt: get_most_collected with parameter: {'period': 'all'}\n[Python Unit Tests/windows]   | testing Trakt: get_most_watched with parameter: {'period': 'weekly'}\n[Python Unit Tests/windows]   | testing Trakt: get_most_watched with parameter: {'period': 'daily'}\n[Python Unit Tests/windows]   | testing Trakt: get_most_watched with parameter: {'period': 'monthly'}\n[Python Unit Tests/windows]   | testing Trakt: get_most_watched with parameter: {'period': 'yearly'}\n[Python Unit Tests/windows]   | testing Trakt: get_most_watched with parameter: {'period': 'all'}\n[Python Unit Tests/windows]   | testing Trakt: get_most_played with parameter: {'period': 'weekly'}\n[Python Unit Tests/windows]   | testing Trakt: get_most_played with parameter: {'period': 'daily'}\n[Python Unit Tests/windows]   | testing Trakt: get_most_played with parameter: {'period': 'monthly'}\n[Python Unit Tests/windows]   | testing Trakt: get_most_played with parameter: {'period': 'yearly'}\n[Python Unit Tests/windows]   | testing Trakt: get_most_played with parameter: {'period': 'all'}\n[Python Unit Tests/windows]   | testing Trakt: get_new_seasons\n[Python Unit Tests/windows]   | testing Trakt: get_new_shows\n[Python Unit Tests/windows]   | testing Trakt: get_popular\n[Python Unit Tests/windows]   | testing Trakt: get_trending\n[Python Unit Tests/windows]   | testing Trakt: get_similar with parameter: {'tvid': 99113}\n[Python Unit Tests/windows]   | testing TMDb: discover\n[Python Unit Tests/windows]   | testing TMDb: get_top_rated\n[Python Unit Tests/windows]   | testing TMDb: get_popular\n[Python Unit Tests/windows]   | testing TMDb: get_trending with parameter: {'time_window': 'days'}\n[Python Unit Tests/windows]   | testing TMDb: get_trending with parameter: {'time_window': 'week'}\n[Python Unit Tests/windows]   | testing TMDb: get_recommended_for_show with parameter: {'tvid': 4145054}\n[Python Unit Tests/windows]   | testing TMDb: get_similar with parameter: {'tvid': 4145054}\n[Python Unit Tests/windows]   | testing [TheTVDB] search for: {'name': 'Shadowhunters'}\n[Python Unit Tests/windows]   | testing [TheTVDB] search for: {'name': 'Wednesday'}\n[Python Unit Tests/windows]   | testing [TheTVDB] search for: {'ids': {1: 295837}}\n[Python Unit Tests/windows]   | testing [Trakt] search for: {'name': 'Shadowhunters'}\n[Python Unit Tests/windows]   | testing [Trakt] search for: {'name': 'Wednesday'}\n[Python Unit Tests/windows]   | testing [Trakt] search for: {'ids': {1: 295837}}\n[Python Unit Tests/windows]   | testing [Trakt] search for: {'ids': {100: 4145054}}\n[Python Unit Tests/windows]   | testing [Trakt] search for: {'ids': {4: 119051}}\n[Python Unit Tests/windows]   | testing [Trakt] search for: {'ids': {1101: 'walker-independence'}}\n[Python Unit Tests/windows]   | testing [TMDb] search for: {'name': 'Shadowhunters'}\n[Python Unit Tests/windows]   | testing [TMDb] search for: {'name': 'Wednesday'}\n[Python Unit Tests/windows]   | testing [TMDb] search for: {'ids': {1: 295837}}\n[Python Unit Tests/windows]   | testing [TMDb] search for: {'ids': {100: 4145054}}\n[Python Unit Tests/windows]   | testing [TMDb] search for: {'ids': {4: 119051}}\n[Python Unit Tests/windows]   | testing [TVmaze] search for: {'name': 'Shadowhunters'}\n[Python Unit Tests/windows]   | testing [TVmaze] search for: {'name': 'Wednesday'}\n[Python Unit Tests/windows]   | testing [TVmaze] search for: {'ids': {1: 295837}}\n[Python Unit Tests/windows]   | testing [TVmaze] search for: {'ids': {100: 4145054}}\n[Python Unit Tests/windows]   | testing [TVmaze] search for: {'ids': {3: 2158}}\n[Python Unit Tests/windows]   | testing [TVmaze] search for: {'ids': {3: 53647}}\n[Python Unit Tests/windows]   | unused files: {'1b1dacfe2170d2a7a371929a355ee65f93b1515ccb2288c1e5a1d2e4ff59f573.data', '5bc1abb872f9d32a61ef4efff73857b111fb8cfac6f8e0c02447733ea1a6d929.data', '2f822de7005b8417e1368d9ce87d4c92c589ceb7d300a22ef53d409fd4ac54f7.data', 'aea0f568281a5e3c641ec1fcf18ecbf28bff419cdb9d346a5cc187a46b3c1e6c.data', '73359a5fb2fee2fa49c42c64c51598cbf6b651655b8710667f4e56c9384a26ed.data', '7512c46c170d46530e4f9387ec13f9e17008e6390bf33436e4eec6f56a62d1f7.data', '5e772d730a6faede60adff1636ebb22b6b780cbef8ed3fcff819e9562077bbba.data', '7261e42498d28901f8e7d4ff25d48c75faa3eb081da86abc17535b966a46080b.data', '270af338e6e71ca6d15ff9978c7a2cf7c6e01f513497b1b99d58a665d42209a7.data', '40f0a6f182ba097a48c98e711a937b85761db4ee6eabb1bd3f7e41e46fcea5ad.data', 'efec1f510f873f25ae5a5883bf835a6f54413c244d3154c09458ba1a5f59677b.obj_data', '9a3daa33668872965ea4b676c6e6c1462cb63df19f4fb186944b4fb6d36dde8a.data', '9ca67158820d0e691c121e9e20969197c7e2d9c1d147eb224c12aa9886772671.data', '6833745e63e5337ee03881a594c7fa7254b2d259d4a90702d95a2d820b4c12f3.data', 'c3a073a1ca6daa4031fd825a47077571b62cc577e3e6e7547f22d7102dde08ff.data', 'e77f9b2b4ea0c8f23e00bbef9dbd8ea3e42b845fbe4a58f18837167e4095d7f8.data', 'dd38622fc86a1a77e81864dc8540e0f850de203181d7c9b422ec8fd944b0a107.obj_data', 'c67f7e2f8184480a4ad959dd1bcf32ce82b37a07e18a2fa31b92b6ece34e3d51.data', '4429f2e114a11e4991da9d94469587a16948f430426819a0632c6160e42a6651.data', 'f13aaf6c6423209bdd16deaf1b04998ad2d8c16810feab5f0f55d8e8880611f3.data', '4ff4828b9bf4bf3be35e9e9f7cd96db47558d33c0e8982317b408f6336673704.data', '87a1591a53625586a853da9926c054222a18ea82643c9e2fd2ce1aa7774d5d4b.data', 'd14f84ca00260b007f7201cb940632700d0c25a579f35868585af2ffe97b0d95.data', 'c18faadd60052272166683655000c7db0e706a50f13c11f74abaec25cda9033b.data', '502febd3497e0733cfa4cd8fc5fc3f5e7499ceb99a493eac16186c1994153044.obj_data', '5cf1114b7c83b348dcbb794948df03b20921c1ed9f00aa9eb0468d4d5b513b61.data', '880778002dc0e84cad4cd6c78bd51aa8b305b7bd054f42b7d8f9a852a85d3539.data', '413db559d232e17eebcf90fc0e98c82f2e00a0b9b3bafb073f4e33cb7f43c691.data', '70d59b9d51fabf256150a86647ef9755d177d838b550ba6c772e6c0326ca0f85.data', '653613936406a53813ea9a0f11e34b502a462e2dd9105e2a6cd8cb918e079ef6.data', '694986a24d69fb5c02e4210e12b021df59fd55d4cd58550cd32e314910eab6cd.data', '3893d3cfd2a012dc6855be4b8cc0ac32e98b8db0fa54dec54f01a3e38a521332.data', 'd42e3f96ce163cafd87670c08e5431465e6c1036715d8bf45fd77d52106482e4.data', '67c6166cd63b9882ca5f87c6c99765f402b29fcf767d75bb292f0246531f416d.obj_data', '96cbb5b8a6da5b9f7e3814688028491bde4dbe83b8dcd7a7623cb2ba8f96d79a.data', 'a0c3006b6b080d9e73f02f923d727f80b175c8e84e81d7e9fefe2ab49d2cb906.data', '60a870071528b1cd714b9802333fb9a1aa0adb7725ae0c7c14a1f77eb5f4708c.obj_data', '947db4bc14e10add8053ecf389df0267a501ebcc4b7b3b0db59e95260959a7b0.data', '9d5fb9af5fafb2e354e9590a6eb3fe59dbcc27e0f4fb8ccc7ca6bf307d532610.data', '1479b266a6f44dc5f98945ea3b2754a6f636aac3052b4a560ef290b22e57f4a6.data', 'c53fd2a1332f8746893f2745360e99e1bdb1c70a9491e281b13e912908e99a99.data', '0ae7503cfdb07a1c2bde84011f2e5f2e669e93f8a57e2a1e6626e473162dc6d7.data', 'e1db11ce493654d4b202ac675e752ec5a6c3df3eba88403521a9b86ebac4f74e.data', '328a2d59fd50c0e3f1140d4d1edae96fe6cd92e66c270bda85d2bc64809436f6.data', 'cdace0cde9b22b765ed12261a65e78d48173dff95af8cee2332a292e2a38fd5c.obj_data', 'b4c6fabb82cf7e968e7db00dca240716f874d1ad561d0c09af42b856fd2c91bb.data', '2e4429c5472dbf6f7221101f392c5bf28dc7319d9dda2f77a6d084555f0ba3e4.data', '2a7e11d893c674789aeb0dde8a1f4468ad4184c2d2893b8c71f8a8151d519d87.data', 'ce64159dae21ec1caf915a25f3d0b0a34fb1dceeca9276bcbb81bf1b02f6f154.data', '787085b701b5be657221ebd1aa6ade6e1a264aa366100afb07bbc864c939bdbe.data', '96add172aacb57bd8535745ecc3faf0745e4ecb9b9957cdddfdf2e60d211ca3d.data', '6abcedfdf1265a04f59156aa1af76e5cacdf5df395b10d0f9c75ccc8836d0c8c.data', '9964f78487b1a5123c1b6cdc07a08c7bb02423435abab13adb1c847d8887b8e5.obj_data', '55c44e133a90163346cacca17bcd7ba8118d75473188432a5eecdd9129cd704f.data', '6a318024d236dc500ddf8f2a3e8fedd5be9b12cf4f8dd09346e95071f35c5c5b.obj_data', 'a8d890b86a7ab949c185306e9e6cb87300cf9336355a4045f50a17b74e2c4807.data', 'b5fc03b3a0c798777ded6135a50e666e0e7731331c888a7a2d94cb16cc4afb9b.data', 'b087f6edf74dd067f9dc723bc93875f65ad7ff3b5d3896a9d95676e3f61e26c5.data', 'e77ff1bc7378673ce532c005541ca7b8f4e250f391d989ec3389495ee3048b9d.data', '5083e460bc249289167f571395a7b5fcd4e7adaaa199b16fdbe642c772aae6c8.data', 'a74815431e6ea0260b08f9c3274838f9a9ac85b06bb3d722a653894e56124701.data', '96b8d4e1ce2aa6bceba917a0d7dc5a335916d445e69d877b14ed819caf83807b.data', 'd5c27ec085fd065c55e4980e157cb5e1c261d88a8089e234c5d0be3f232e0a97.data', '502d8b4fa2d148b5638506ea738cabc373c36f0e35e1c33a98842138b0f87214.data', '070c5721d6cd64ed2c8bb774d64cee3c6059a6778f917a3e2b45635a11763cd1.obj_data', 'c95f9be0f6c3b3dd1b0fcc7232713ebd5c3096d3815c2bcf7a06365c30d5a676.data', '80fd3e9e2e2abe5b2cf6406e020d508c38648b017c832a03162958b7eb048e7c.obj_data', 'd49547d0d40a48080a3f699629c88ff9637d18c937d28df0ea7926cc094738a5.data', '78298504fdc1b6c271d638739a44a99d115a5fa711fbd977b33d5f17ad90b7a5.data', 'd7f9c5e25ab675db72b7e8041e548e232830c3dbae382db0e276165e11ed824b.data', 'e8bb400818837fed96d5a7d28b7819cfb3cab8d89db694b14ad8a78483a0681f.data', '1d8ad0a4b4687e38faef5521bab630b39fc1a047189f1aa67491bb3bd3bd5357.data', '6809564f09f7b33f074e0140df1eeb0589847f235503868d2f4a904a1e9cc9f5.data', 'd6f3425d23bc78f3765c13610076f70bd81c7cbd95eaed7cb8962a4ef1e3e2e3.data', '9ac4b3c7927a6d4812db74b50e85ebd80fa1a44d1d135bb7c11286111d9b0b65.data', '4a6b807263390ae877c5a0562d96740c8ef559831772f617f2f4cd4add6f16c5.data', 'e87a771871b62b59d8f2e2b9c7d138f6b72ba71a56b030f88efe178d125f37a2.data', 'b3fffb26ca4b32d1e31bc25533d0f6065df2feb8ac16a7d78323ce813f7db0a6.data', '52f0777531dd218ab0b4da4cf9588404a295e1d6f4e001b576fad6f45ba95af2.data', '1779261cc0df35ee9a0d562b169918c15505cd6f4487238308c1305a710725b6.data', 'a4a8189b0e5e2f47377327ff296a06c7e368dba832eae7b8a136e2c728c796cb.data', 'ad1c419e03244f5a2d541fb774c6fbf267cb6fa7b096ac37647642c38d161d13.data', 'e9685c1f25478576d4b2051e9755d095f65bf86d526215410f386115edb3ab8e.data', '76f02ecf74fda0bce758d7ebfa4fc368eb8b702bb22e265e322550b4c36bca61.data', '8bad6ca76dd1973349dce14599aeee5c12c1fd2c41adf2c33c96f015aa845b2e.data', '56d8d5ab55444aeb3a3a045ed4e774ad105b8984a485618c4d4c4e5b8af10cc6.data', '9c755a20454891bb728ff90a6e9c78699aa625c1fc3fc59b1bb78dfa33fb1b3e.obj_data', 'df6eadc0026f971615d9017f148edac27efbe82af287a523507a45a3433dc4c9.obj_data', '58e96852062a2f2fcc2e982baec8d5b89bcfa4412636197790597cb9254f1c6f.data', '2105614e49946550d010f9b0d76de67502f4a55b4a05358aca923e7324fc4f56.data', 'c10ae6209adf8993564da42537f13eb794307b16fc9afaca40835c09fa6fc1f5.data', '2d252625158273918f90b9a3cf10790eac717d36c1c5e71ab93dfaa4d99bae47.data', 'bb3d38a1750e4226c9d78b5e90aa239ee0b04bfe8ca3726413f2264b46a3d0da.data', '76b705c40c77e84b62755ddc9232a5f9cd68e3498d70c86013f1e56558e5be5a.data', '21427e1bf9c5dc1b81a2c9df73063d3507115010c7302f05caa7d294c8cc664c.obj_data', '438eaab176cd40b38e7820b54196f56983d912daf96ab62d67ad66782c14b5f0.data', 'de07dba1a6f969ae4c350af9f7014e5b3f276392fc848df199ac4dd264ac560e.data', '7ef0280b2afcc59d77adb43a2549633981027379cbd5a397d92c5cccb550e754.data', '42c8760da948d300dfa3ec9479a3523ef8891d262952617b5cadb06a0bffb13b.data', 'f8cea51a7466f77d5157b77338c2cc22240f0030008e9cec2a1fb3c2af388f56.obj_data', '6b458bf37dcf193cb282ccd0a0c378412fc45507a565ec804a86b53bdda5e532.data', '3da4650f8808b654fabb63fb8801404cccd6b5fe54b420c5a8a8cab440381885.data', '65869802ec1e93a6292944119cab94bf6c673a49deb760891ab93d45cc32fdc8.data', '03dd09a773bcdaf80f73ea56ea0ed4af923a7ee60e1ac8d3f510b68942f97e21.obj_data', '1d36a973521ca7286f7855c940c4055a72ed01b19c3d8565d602036b9877d3c8.data', 'd83251c1340340ae12b2fcf85d1af8362a7fa0396cdab51d3fac1d6abbe79de8.data', 'c54d2a112b25ec758ca977e1d4b2df5d53cd9fd58595c42e1fab2e3819016c53.data', 'c1d4814d59dcd4c5973e4a886fd1f2cc9a63a45765657501c5b7f3ba1dbf95b4.data', '33399fa06984fe2a422f91804e8f5d24333901cadb03bdbc7adc49506d86d879.data', 'c1390c80ff690a85d5761c040ed8c701010d5743c87262d98b564828e6799007.data', '494ec96e39c263730ac15d26ac26f07faf8496ead7f1356942986536ee6b08aa.data', '3f0cbbc88b32cfc64cff188b342a143366b2b99c6288fba8b5153367df061656.data', '3f34fe97994f0be605174c141cbec7f9888ab9ccf9da1507c78faecfd44401ae.data', '17117bd58be4182a969b014ba816e2ea3b266d6bad7429f4e9ce0203819ff5de.data', '91d1a80f26b3948649095ce84cb7e11833a88e3781861eed05f968f61c55d86b.data', '22719edfece4266b896bbbe8a552f79e63e9470d6a25752d79dde074e6a3b1c7.data', 'a5614a2bc4654b9bc14c66bcca3106b84738b54df08ca15210b8fb2a902df703.data', '473f829129db37e311e4e703a73b406091b68fc2a9baae12355ebeb4d5598244.data', '3c7039b87148eb5d645002bc3096a61a7ac96cd4dd6880d7d8d8c622d5ab7a53.data', '33599cd67a318c91c789eacdcbd7edb6bc50ef603092f9645a4234e038b14263.data', '1df6f2174816fcb605fd02ec3e73bf364409ed21689e72629ff0f04a3b63a5d7.obj_data', 'c125f32afb1bd8e4660424c78ca9fa13f0c31a90891922ed5b6722aca3ac064e.data', '8550662b9f486819712eb2a1220aca1f384665e8b75b11c958ca0777ad362dfd.data', '3b0853ef5f44622e5f65e436b695489a6613cec61202f554c5be6665086be746.data', '23a2c3c4d42c0506000d91a5c5248084cede7f289d93fac4735e69f7874bec7d.data', '3d566dc6153ed5b01d00e42fda8900e242e976b76de626879e4d01d4c671b065.data', '0c83048a1bdb27602bcfef2edf87b94ab52903333c022b19209919c62b751e0a.data'}/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/lib/dateutil/zoneinfo/__init__.py:30: UserWarning: Falling back to included zoneinfo file\n[Python Unit Tests/windows]   |   warnings.warn('Falling back to included zoneinfo file')\n[Python Unit Tests/linux  ]   | .E../tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/lib/dateutil/zoneinfo/__init__.py:30: UserWarning: Falling back to included zoneinfo file\n[Python Unit Tests/linux  ]   |   warnings.warn('Falling back to included zoneinfo file')\n[Python Unit Tests/macos  ]   | ..................F.F.F.....E..FE..E.FFF...EEEE.EEEEEEEEEE.E........................................E.E..E...EEEEEEEE........\n[Python Unit Tests/macos  ]   | ======================================================================\n[Python Unit Tests/macos  ]   | ERROR: test_process (pp_tests.PPBasicTests)\n[Python Unit Tests/macos  ]   | ----------------------------------------------------------------------\n[Python Unit Tests/macos  ]   | Traceback (most recent call last):\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/pp_tests.py\", line 86, in test_process\n[Python Unit Tests/macos  ]   |     show_obj.location = test.SHOWDIR\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/tv.py\", line 1668, in _set_location\n[Python Unit Tests/macos  ]   |     raise exceptions_helper.NoNFOException('Invalid folder for the show!')\n[Python Unit Tests/macos  ]   | exceptions_helper.NoNFOException: Invalid folder for the show!\n[Python Unit Tests/macos  ]   | \n[Python Unit Tests/macos  ]   | ======================================================================\n[Python Unit Tests/macos  ]   | ERROR: test_root_folder (pp_tests.PPFolderTests)\n[Python Unit Tests/macos  ]   | ----------------------------------------------------------------------\n[Python Unit Tests/macos  ]   | Traceback (most recent call last):\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 730, in migration_code\n[Python Unit Tests/macos  ]   |     db_version = update.execute()\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/databases/mainDB.py\", line 382, in execute\n[Python Unit Tests/macos  ]   |     self.connection.action(query)\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 269, in action\n[Python Unit Tests/macos  ]   |     sql_result = self.connection.execute(query)\n[Python Unit Tests/macos  ]   | sqlite3.OperationalError: attempt to write a readonly database\n[Python Unit Tests/macos  ]   | \n[Python Unit Tests/macos  ]   | During handling of the above exception, another exception occurred:\n[Python Unit Tests/macos  ]   | \n[Python Unit Tests/macos  ]   | Traceback (most recent call last):\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/test_lib.py\", line 137, in setUp\n[Python Unit Tests/macos  ]   |     setup_test_db()\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/test_lib.py\", line 195, in setup_test_db\n[Python Unit Tests/macos  ]   |     db.migration_code(db.DBConnection())\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 738, in migration_code\n[Python Unit Tests/macos  ]   |     logger.log_error_and_exit(f'Successfully restored database version: {db_version}')\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/logger.py\", line 427, in log_error_and_exit\n[Python Unit Tests/macos  ]   |     sb_log_instance.log_error_and_exit(error_msg)\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/logger.py\", line 241, in log_error_and_exit\n[Python Unit Tests/macos  ]   |     sys.exit(error_msg.encode(sickgear.SYS_ENCODING, 'xmlcharrefreplace'))\n[Python Unit Tests/macos  ]   | SystemExit: b'Successfully restored database version: 0'\n[Python Unit Tests/macos  ]   | \n[Python Unit Tests/macos  ]   | ======================================================================\n[Python Unit Tests/macos  ]   | ERROR: test_browse_endpoints (tvinfo_api_tests.TVInfoTests)\n[Python Unit Tests/macos  ]   | ----------------------------------------------------------------------\n[Python Unit Tests/macos  ]   | Traceback (most recent call last):\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 730, in migration_code\n[Python Unit Tests/macos  ]   |     db_version = update.execute()\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/databases/mainDB.py\", line 1976, in execute\n[Python Unit Tests/macos  ]   |     self.connection.mass_action(cl)\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 216, in mass_action\n[Python Unit Tests/macos  ]   |     sql_result.append(cursor.execute(*tuple(cur_query)).fetchall())\n[Python Unit Tests/macos  ]   | sqlite3.OperationalError: disk I/O error\n[Python Unit Tests/macos  ]   | \n[Python Unit Tests/macos  ]   | During handling of the above exception, another exception occurred:\n[Python Unit Tests/macos  ]   | \n[Python Unit Tests/macos  ]   | Traceback (most recent call last):\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/test_lib.py\", line 137, in setUp\n[Python Unit Tests/macos  ]   |     setup_test_db()\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/test_lib.py\", line 195, in setup_test_db\n[Python Unit Tests/macos  ]   |     db.migration_code(db.DBConnection())\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 736, in migration_code\n[Python Unit Tests/macos  ]   |     if _restore_database(my_db.filename, db_version):\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 441, in _restore_database\n[Python Unit Tests/macos  ]   |     logger.log_error_and_exit('Database restore failed, abort upgrading database')\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/logger.py\", line 427, in log_error_and_exit\n[Python Unit Tests/macos  ]   |     sb_log_instance.log_error_and_exit(error_msg)\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/logger.py\", line 241, in log_error_and_exit\n[Python Unit Tests/macos  ]   |     sys.exit(error_msg.encode(sickgear.SYS_ENCODING, 'xmlcharrefreplace'))\n[Python Unit Tests/macos  ]   | SystemExit: b'Database restore failed, abort upgrading database'\n[Python Unit Tests/macos  ]   | \n[Python Unit Tests/macos  ]   | ======================================================================\n[Python Unit Tests/macos  ]   | ERROR: test_person_search (tvinfo_api_tests.TVInfoTests)\n[Python Unit Tests/macos  ]   | ----------------------------------------------------------------------\n[Python Unit Tests/macos  ]   | Traceback (most recent call last):\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 730, in migration_code\n[Python Unit Tests/macos  ]   |     db_version = update.execute()\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/databases/mainDB.py\", line 1733, in execute\n[Python Unit Tests/macos  ]   |     return self.set_db_version(20013)\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 609, in set_db_version\n[Python Unit Tests/macos  ]   |     self.connection.action('UPDATE db_version SET db_version = ? WHERE 1=1', [new_version])\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 272, in action\n[Python Unit Tests/macos  ]   |     sql_result = self.connection.execute(query, args)\n[Python Unit Tests/macos  ]   | sqlite3.OperationalError: attempt to write a readonly database\n[Python Unit Tests/macos  ]   | \n[Python Unit Tests/macos  ]   | During handling of the above exception, another exception occurred:\n[Python Unit Tests/macos  ]   | \n[Python Unit Tests/macos  ]   | Traceback (most recent call last):\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/test_lib.py\", line 137, in setUp\n[Python Unit Tests/macos  ]   |     setup_test_db()\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/test_lib.py\", line 195, in setup_test_db\n[Python Unit Tests/macos  ]   |     db.migration_code(db.DBConnection())\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 738, in migration_code\n[Python Unit Tests/macos  ]   |     logger.log_error_and_exit(f'Successfully restored database version: {db_version}')\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/logger.py\", line 427, in log_error_and_exit\n[Python Unit Tests/macos  ]   |     sb_log_instance.log_error_and_exit(error_msg)\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/logger.py\", line 241, in log_error_and_exit\n[Python Unit Tests/macos  ]   |     sys.exit(error_msg.encode(sickgear.SYS_ENCODING, 'xmlcharrefreplace'))\n[Python Unit Tests/macos  ]   | SystemExit: b'Successfully restored database version: 20012'\n[Python Unit Tests/macos  ]   | \n[Python Unit Tests/macos  ]   | ======================================================================\n[Python Unit Tests/macos  ]   | ERROR: test_show_data (tvinfo_api_tests.TVInfoTests)\n[Python Unit Tests/macos  ]   | ----------------------------------------------------------------------\n[Python Unit Tests/macos  ]   | Traceback (most recent call last):\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 730, in migration_code\n[Python Unit Tests/macos  ]   |     db_version = update.execute()\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/databases/mainDB.py\", line 382, in execute\n[Python Unit Tests/macos  ]   |     self.connection.action(query)\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 269, in action\n[Python Unit Tests/macos  ]   |     sql_result = self.connection.execute(query)\n[Python Unit Tests/macos  ]   | sqlite3.OperationalError: disk I/O error\n[Python Unit Tests/macos  ]   | \n[Python Unit Tests/macos  ]   | During handling of the above exception, another exception occurred:\n[Python Unit Tests/macos  ]   | \n[Python Unit Tests/macos  ]   | Traceback (most recent call last):\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/test_lib.py\", line 137, in setUp\n[Python Unit Tests/macos  ]   |     setup_test_db()\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/test_lib.py\", line 195, in setup_test_db\n[Python Unit Tests/macos  ]   |     db.migration_code(db.DBConnection())\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 738, in migration_code\n[Python Unit Tests/macos  ]   |     logger.log_error_and_exit(f'Successfully restored database version: {db_version}')\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/logger.py\", line 427, in log_error_and_exit\n[Python Unit Tests/macos  ]   |     sb_log_instance.log_error_and_exit(error_msg)\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/logger.py\", line 241, in log_error_and_exit\n[Python Unit Tests/macos  ]   |     sys.exit(error_msg.encode(sickgear.SYS_ENCODING, 'xmlcharrefreplace'))\n[Python Unit Tests/macos  ]   | SystemExit: b'Successfully restored database version: 0'\n[Python Unit Tests/macos  ]   | \n[Python Unit Tests/macos  ]   | ======================================================================\n[Python Unit Tests/macos  ]   | ERROR: test_show_search (tvinfo_api_tests.TVInfoTests)\n[Python Unit Tests/macos  ]   | ----------------------------------------------------------------------\n[Python Unit Tests/macos  ]   | Traceback (most recent call last):\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 730, in migration_code\n[Python Unit Tests/macos  ]   |     db_version = update.execute()\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/databases/mainDB.py\", line 382, in execute\n[Python Unit Tests/macos  ]   |     self.connection.action(query)\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 269, in action\n[Python Unit Tests/macos  ]   |     sql_result = self.connection.execute(query)\n[Python Unit Tests/macos  ]   | sqlite3.OperationalError: disk I/O error\n[Python Unit Tests/macos  ]   | \n[Python Unit Tests/macos  ]   | During handling of the above exception, another exception occurred:\n[Python Unit Tests/macos  ]   | \n[Python Unit Tests/macos  ]   | Traceback (most recent call last):\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/test_lib.py\", line 137, in setUp\n[Python Unit Tests/macos  ]   |     setup_test_db()\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/test_lib.py\", line 195, in setup_test_db\n[Python Unit Tests/macos  ]   |     db.migration_code(db.DBConnection())\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 736, in migration_code\n[Python Unit Tests/macos  ]   |     if _restore_database(my_db.filename, db_version):\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 441, in _restore_database\n[Python Unit Tests/macos  ]   |     logger.log_error_and_exit('Database restore failed, abort upgrading database')\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/logger.py\", line 427, in log_error_and_exit\n[Python Unit Tests/macos  ]   |     sb_log_instance.log_error_and_exit(error_msg)\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/logger.py\", line 241, in log_error_and_exit\n[Python Unit Tests/macos  ]   |     sys.exit(error_msg.encode(sickgear.SYS_ENCODING, 'xmlcharrefreplace'))\n[Python Unit Tests/macos  ]   | SystemExit: b'Database restore failed, abort upgrading database'\n[Python Unit Tests/macos  ]   | \n[Python Unit Tests/macos  ]   | ======================================================================\n[Python Unit Tests/macos  ]   | ERROR: test_pause_show (webapi_tests.WebAPICase)\n[Python Unit Tests/macos  ]   | ----------------------------------------------------------------------\n[Python Unit Tests/macos  ]   | Traceback (most recent call last):\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/webapi_tests.py\", line 261, in tearDown\n[Python Unit Tests/macos  ]   |     ep_obj.save_to_db()\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/tv.py\", line 4849, in save_to_db\n[Python Unit Tests/macos  ]   |     my_db.upsert('tv_episodes', new_value_dict, control_value_dict)\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 314, in upsert\n[Python Unit Tests/macos  ]   |     self.action(query, list(value_dict.values()) + list(key_dict.values()))\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 272, in action\n[Python Unit Tests/macos  ]   |     sql_result = self.connection.execute(query, args)\n[Python Unit Tests/macos  ]   | sqlite3.IntegrityError: UNIQUE constraint failed: tv_episodes.indexer, tv_episodes.showid, tv_episodes.season, tv_episodes.episode\n[Python Unit Tests/macos  ]   | \n[Python Unit Tests/macos  ]   | ======================================================================\n[Python Unit Tests/macos  ]   | ERROR: test_set_episode_status (webapi_tests.WebAPICase)\n[Python Unit Tests/macos  ]   | ----------------------------------------------------------------------\n[Python Unit Tests/macos  ]   | Traceback (most recent call last):\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/webapi_tests.py\", line 261, in tearDown\n[Python Unit Tests/macos  ]   |     ep_obj.save_to_db()\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/tv.py\", line 4849, in save_to_db\n[Python Unit Tests/macos  ]   |     my_db.upsert('tv_episodes', new_value_dict, control_value_dict)\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 307, in upsert\n[Python Unit Tests/macos  ]   |     self.action(query, list(value_dict.values()) + list(key_dict.values()))\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 272, in action\n[Python Unit Tests/macos  ]   |     sql_result = self.connection.execute(query, args)\n[Python Unit Tests/macos  ]   | sqlite3.OperationalError: no such table: tv_episodes\n[Python Unit Tests/macos  ]   | \n[Python Unit Tests/macos  ]   | ======================================================================\n[Python Unit Tests/macos  ]   | ERROR: test_set_show_scene_numbers (webapi_tests.WebAPICase)\n[Python Unit Tests/macos  ]   | ----------------------------------------------------------------------\n[Python Unit Tests/macos  ]   | Traceback (most recent call last):\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/webapi_tests.py\", line 262, in tearDown\n[Python Unit Tests/macos  ]   |     set_scene_numbering_helper(\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/scene_numbering.py\", line 1022, in set_scene_numbering_helper\n[Python Unit Tests/macos  ]   |     set_scene_numbering(**scene_args)\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/scene_numbering.py\", line 376, in set_scene_numbering\n[Python Unit Tests/macos  ]   |     my_db.action(\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 272, in action\n[Python Unit Tests/macos  ]   |     sql_result = self.connection.execute(query, args)\n[Python Unit Tests/macos  ]   | sqlite3.OperationalError: attempt to write a readonly database\n[Python Unit Tests/macos  ]   | \n[Python Unit Tests/macos  ]   | ======================================================================\n[Python Unit Tests/macos  ]   | ERROR: test_select (db_tests.DBBasicTests)\n[Python Unit Tests/macos  ]   | ----------------------------------------------------------------------\n[Python Unit Tests/macos  ]   | Traceback (most recent call last):\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 730, in migration_code\n[Python Unit Tests/macos  ]   |     db_version = update.execute()\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/databases/mainDB.py\", line 382, in execute\n[Python Unit Tests/macos  ]   |     self.connection.action(query)\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 269, in action\n[Python Unit Tests/macos  ]   |     sql_result = self.connection.execute(query)\n[Python Unit Tests/macos  ]   | sqlite3.OperationalError: disk I/O error\n[Python Unit Tests/macos  ]   | \n[Python Unit Tests/macos  ]   | During handling of the above exception, another exception occurred:\n[Python Unit Tests/macos  ]   | \n[Python Unit Tests/macos  ]   | Traceback (most recent call last):\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/db_tests.py\", line 28, in setUp\n[Python Unit Tests/macos  ]   |     super(DBBasicTests, self).setUp()\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/test_lib.py\", line 137, in setUp\n[Python Unit Tests/macos  ]   |     setup_test_db()\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/test_lib.py\", line 195, in setup_test_db\n[Python Unit Tests/macos  ]   |     db.migration_code(db.DBConnection())\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 738, in migration_code\n[Python Unit Tests/macos  ]   |     logger.log_error_and_exit(f'Successfully restored database version: {db_version}')\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/logger.py\", line 427, in log_error_and_exit\n[Python Unit Tests/macos  ]   |     sb_log_instance.log_error_and_exit(error_msg)\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/logger.py\", line 241, in log_error_and_exit\n[Python Unit Tests/macos  ]   |     sys.exit(error_msg.encode(sickgear.SYS_ENCODING, 'xmlcharrefreplace'))\n[Python Unit Tests/macos  ]   | SystemExit: b'Successfully restored database version: 0'\n[Python Unit Tests/macos  ]   | \n[Python Unit Tests/macos  ]   | ======================================================================\n[Python Unit Tests/macos  ]   | ERROR: test_webdl_type (search_tests.ProperTests)\n[Python Unit Tests/macos  ]   | ----------------------------------------------------------------------\n[Python Unit Tests/macos  ]   | Traceback (most recent call last):\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 730, in migration_code\n[Python Unit Tests/macos  ]   |     db_version = update.execute()\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/databases/mainDB.py\", line 382, in execute\n[Python Unit Tests/macos  ]   |     self.connection.action(query)\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 269, in action\n[Python Unit Tests/macos  ]   |     sql_result = self.connection.execute(query)\n[Python Unit Tests/macos  ]   | sqlite3.OperationalError: disk I/O error\n[Python Unit Tests/macos  ]   | \n[Python Unit Tests/macos  ]   | During handling of the above exception, another exception occurred:\n[Python Unit Tests/macos  ]   | \n[Python Unit Tests/macos  ]   | Traceback (most recent call last):\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/test_lib.py\", line 137, in setUp\n[Python Unit Tests/macos  ]   |     setup_test_db()\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/test_lib.py\", line 195, in setup_test_db\n[Python Unit Tests/macos  ]   |     db.migration_code(db.DBConnection())\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 738, in migration_code\n[Python Unit Tests/macos  ]   |     logger.log_error_and_exit(f'Successfully restored database version: {db_version}')\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/logger.py\", line 427, in log_error_and_exit\n[Python Unit Tests/macos  ]   |     sb_log_instance.log_error_and_exit(error_msg)\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/logger.py\", line 241, in log_error_and_exit\n[Python Unit Tests/macos  ]   |     sys.exit(error_msg.encode(sickgear.SYS_ENCODING, 'xmlcharrefreplace'))\n[Python Unit Tests/macos  ]   | SystemExit: b'Successfully restored database version: 0'\n[Python Unit Tests/macos  ]   | \n[Python Unit Tests/macos  ]   | ======================================================================\n[Python Unit Tests/macos  ]   | ERROR: test_sceneExceptionByName (scene_helpers_tests.SceneExceptionTestCase)\n[Python Unit Tests/macos  ]   | ----------------------------------------------------------------------\n[Python Unit Tests/macos  ]   | Traceback (most recent call last):\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 730, in migration_code\n[Python Unit Tests/macos  ]   |     db_version = update.execute()\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/databases/mainDB.py\", line 382, in execute\n[Python Unit Tests/macos  ]   |     self.connection.action(query)\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 269, in action\n[Python Unit Tests/macos  ]   |     sql_result = self.connection.execute(query)\n[Python Unit Tests/macos  ]   | sqlite3.OperationalError: disk I/O error\n[Python Unit Tests/macos  ]   | \n[Python Unit Tests/macos  ]   | During handling of the above exception, another exception occurred:\n[Python Unit Tests/macos  ]   | \n[Python Unit Tests/macos  ]   | Traceback (most recent call last):\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/scene_helpers_tests.py\", line 69, in setUp\n[Python Unit Tests/macos  ]   |     super(SceneExceptionTestCase, self).setUp()\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/test_lib.py\", line 137, in setUp\n[Python Unit Tests/macos  ]   |     setup_test_db()\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/test_lib.py\", line 195, in setup_test_db\n[Python Unit Tests/macos  ]   |     db.migration_code(db.DBConnection())\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 738, in migration_code\n[Python Unit Tests/macos  ]   |     logger.log_error_and_exit(f'Successfully restored database version: {db_version}')\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/logger.py\", line 427, in log_error_and_exit\n[Python Unit Tests/macos  ]   |     sb_log_instance.log_error_and_exit(error_msg)\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/logger.py\", line 241, in log_error_and_exit\n[Python Unit Tests/macos  ]   |     sys.exit(error_msg.encode(sickgear.SYS_ENCODING, 'xmlcharrefreplace'))\n[Python Unit Tests/macos  ]   | SystemExit: b'Successfully restored database version: 0'\n[Python Unit Tests/macos  ]   | \n[Python Unit Tests/macos  ]   | ======================================================================\n[Python Unit Tests/macos  ]   | ERROR: test_sceneExceptionByNameAnime (scene_helpers_tests.SceneExceptionTestCase)\n[Python Unit Tests/macos  ]   | ----------------------------------------------------------------------\n[Python Unit Tests/macos  ]   | Traceback (most recent call last):\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 457, in _process_upgrade\n[Python Unit Tests/macos  ]   |     instance.execute()\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/databases/cache_db.py\", line 126, in execute\n[Python Unit Tests/macos  ]   |     self.do_query(self.queries['add_backlogparts'] +\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 625, in do_query\n[Python Unit Tests/macos  ]   |     self.connection.action(query)\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 269, in action\n[Python Unit Tests/macos  ]   |     sql_result = self.connection.execute(query)\n[Python Unit Tests/macos  ]   | sqlite3.OperationalError: attempt to write a readonly database\n[Python Unit Tests/macos  ]   | \n[Python Unit Tests/macos  ]   | During handling of the above exception, another exception occurred:\n[Python Unit Tests/macos  ]   | \n[Python Unit Tests/macos  ]   | Traceback (most recent call last):\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/scene_helpers_tests.py\", line 69, in setUp\n[Python Unit Tests/macos  ]   |     super(SceneExceptionTestCase, self).setUp()\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/test_lib.py\", line 137, in setUp\n[Python Unit Tests/macos  ]   |     setup_test_db()\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/test_lib.py\", line 201, in setup_test_db\n[Python Unit Tests/macos  ]   |     db.upgrade_database(db.DBConnection('cache.db'), cache_db.InitialSchema)\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 428, in upgrade_database\n[Python Unit Tests/macos  ]   |     _process_upgrade(connection, schema)\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 477, in _process_upgrade\n[Python Unit Tests/macos  ]   |     _process_upgrade(connection, upgradeSubClass)\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 477, in _process_upgrade\n[Python Unit Tests/macos  ]   |     _process_upgrade(connection, upgradeSubClass)\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 465, in _process_upgrade\n[Python Unit Tests/macos  ]   |     if _restore_database(connection.filename, db_version):\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 441, in _restore_database\n[Python Unit Tests/macos  ]   |     logger.log_error_and_exit('Database restore failed, abort upgrading database')\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/logger.py\", line 427, in log_error_and_exit\n[Python Unit Tests/macos  ]   |     sb_log_instance.log_error_and_exit(error_msg)\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/logger.py\", line 241, in log_error_and_exit\n[Python Unit Tests/macos  ]   |     sys.exit(error_msg.encode(sickgear.SYS_ENCODING, 'xmlcharrefreplace'))\n[Python Unit Tests/macos  ]   | SystemExit: b'Database restore failed, abort upgrading database'\n[Python Unit Tests/macos  ]   | \n[Python Unit Tests/macos  ]   | ======================================================================\n[Python Unit Tests/macos  ]   | ERROR: test_sceneExceptionsBlack_Lagoon (scene_helpers_tests.SceneExceptionTestCase)\n[Python Unit Tests/macos  ]   | ----------------------------------------------------------------------\n[Python Unit Tests/macos  ]   | Traceback (most recent call last):\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 730, in migration_code\n[Python Unit Tests/macos  ]   |     db_version = update.execute()\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/databases/mainDB.py\", line 382, in execute\n[Python Unit Tests/macos  ]   |     self.connection.action(query)\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 269, in action\n[Python Unit Tests/macos  ]   |     sql_result = self.connection.execute(query)\n[Python Unit Tests/macos  ]   | sqlite3.OperationalError: disk I/O error\n[Python Unit Tests/macos  ]   | \n[Python Unit Tests/macos  ]   | During handling of the above exception, another exception occurred:\n[Python Unit Tests/macos  ]   | \n[Python Unit Tests/macos  ]   | Traceback (most recent call last):\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/scene_helpers_tests.py\", line 69, in setUp\n[Python Unit Tests/macos  ]   |     super(SceneExceptionTestCase, self).setUp()\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/test_lib.py\", line 137, in setUp\n[Python Unit Tests/macos  ]   |     setup_test_db()\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/test_lib.py\", line 195, in setup_test_db\n[Python Unit Tests/macos  ]   |     db.migration_code(db.DBConnection())\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 738, in migration_code\n[Python Unit Tests/macos  ]   |     logger.log_error_and_exit(f'Successfully restored database version: {db_version}')\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/logger.py\", line 427, in log_error_and_exit\n[Python Unit Tests/macos  ]   |     sb_log_instance.log_error_and_exit(error_msg)\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/logger.py\", line 241, in log_error_and_exit\n[Python Unit Tests/macos  ]   |     sys.exit(error_msg.encode(sickgear.SYS_ENCODING, 'xmlcharrefreplace'))\n[Python Unit Tests/macos  ]   | SystemExit: b'Successfully restored database version: 0'\n[Python Unit Tests/macos  ]   | \n[Python Unit Tests/macos  ]   | ======================================================================\n[Python Unit Tests/macos  ]   | ERROR: test_sceneExceptionsEmpty (scene_helpers_tests.SceneExceptionTestCase)\n[Python Unit Tests/macos  ]   | ----------------------------------------------------------------------\n[Python Unit Tests/macos  ]   | Traceback (most recent call last):\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 730, in migration_code\n[Python Unit Tests/macos  ]   |     db_version = update.execute()\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/databases/mainDB.py\", line 382, in execute\n[Python Unit Tests/macos  ]   |     self.connection.action(query)\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 269, in action\n[Python Unit Tests/macos  ]   |     sql_result = self.connection.execute(query)\n[Python Unit Tests/macos  ]   | sqlite3.OperationalError: table allowlist already exists\n[Python Unit Tests/macos  ]   | \n[Python Unit Tests/macos  ]   | During handling of the above exception, another exception occurred:\n[Python Unit Tests/macos  ]   | \n[Python Unit Tests/macos  ]   | Traceback (most recent call last):\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/scene_helpers_tests.py\", line 69, in setUp\n[Python Unit Tests/macos  ]   |     super(SceneExceptionTestCase, self).setUp()\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/test_lib.py\", line 137, in setUp\n[Python Unit Tests/macos  ]   |     setup_test_db()\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/test_lib.py\", line 195, in setup_test_db\n[Python Unit Tests/macos  ]   |     db.migration_code(db.DBConnection())\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 738, in migration_code\n[Python Unit Tests/macos  ]   |     logger.log_error_and_exit(f'Successfully restored database version: {db_version}')\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/logger.py\", line 427, in log_error_and_exit\n[Python Unit Tests/macos  ]   |     sb_log_instance.log_error_and_exit(error_msg)\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/logger.py\", line 241, in log_error_and_exit\n[Python Unit Tests/macos  ]   |     sys.exit(error_msg.encode(sickgear.SYS_ENCODING, 'xmlcharrefreplace'))\n[Python Unit Tests/macos  ]   | SystemExit: b'Successfully restored database version: 0'\n[Python Unit Tests/macos  ]   | \n[Python Unit Tests/macos  ]   | ======================================================================\n[Python Unit Tests/macos  ]   | ERROR: test_sceneExceptionsResetNameCache (scene_helpers_tests.SceneExceptionTestCase)\n[Python Unit Tests/macos  ]   | ----------------------------------------------------------------------\n[Python Unit Tests/macos  ]   | Traceback (most recent call last):\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 730, in migration_code\n[Python Unit Tests/macos  ]   |     db_version = update.execute()\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/databases/mainDB.py\", line 382, in execute\n[Python Unit Tests/macos  ]   |     self.connection.action(query)\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 269, in action\n[Python Unit Tests/macos  ]   |     sql_result = self.connection.execute(query)\n[Python Unit Tests/macos  ]   | sqlite3.OperationalError: disk I/O error\n[Python Unit Tests/macos  ]   | \n[Python Unit Tests/macos  ]   | During handling of the above exception, another exception occurred:\n[Python Unit Tests/macos  ]   | \n[Python Unit Tests/macos  ]   | Traceback (most recent call last):\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/scene_helpers_tests.py\", line 69, in setUp\n[Python Unit Tests/macos  ]   |     super(SceneExceptionTestCase, self).setUp()\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/test_lib.py\", line 137, in setUp\n[Python Unit Tests/macos  ]   |     setup_test_db()\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/test_lib.py\", line 195, in setup_test_db\n[Python Unit Tests/macos  ]   |     db.migration_code(db.DBConnection())\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 738, in migration_code\n[Python Unit Tests/macos  ]   |     logger.log_error_and_exit(f'Successfully restored database version: {db_version}')\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/logger.py\", line 427, in log_error_and_exit\n[Python Unit Tests/macos  ]   |     sb_log_instance.log_error_and_exit(error_msg)\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/logger.py\", line 241, in log_error_and_exit\n[Python Unit Tests/macos  ]   |     sys.exit(error_msg.encode(sickgear.SYS_ENCODING, 'xmlcharrefreplace'))\n[Python Unit Tests/macos  ]   | SystemExit: b'Successfully restored database version: 0'\n[Python Unit Tests/macos  ]   | \n[Python Unit Tests/macos  ]   | ======================================================================\n[Python Unit Tests/macos  ]   | ERROR: test_allPossibleShowNames (scene_helpers_tests.SceneTests)\n[Python Unit Tests/macos  ]   | ----------------------------------------------------------------------\n[Python Unit Tests/macos  ]   | Traceback (most recent call last):\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 730, in migration_code\n[Python Unit Tests/macos  ]   |     db_version = update.execute()\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/databases/mainDB.py\", line 382, in execute\n[Python Unit Tests/macos  ]   |     self.connection.action(query)\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 269, in action\n[Python Unit Tests/macos  ]   |     sql_result = self.connection.execute(query)\n[Python Unit Tests/macos  ]   | sqlite3.OperationalError: disk I/O error\n[Python Unit Tests/macos  ]   | \n[Python Unit Tests/macos  ]   | During handling of the above exception, another exception occurred:\n[Python Unit Tests/macos  ]   | \n[Python Unit Tests/macos  ]   | Traceback (most recent call last):\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/test_lib.py\", line 137, in setUp\n[Python Unit Tests/macos  ]   |     setup_test_db()\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/test_lib.py\", line 195, in setup_test_db\n[Python Unit Tests/macos  ]   |     db.migration_code(db.DBConnection())\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 738, in migration_code\n[Python Unit Tests/macos  ]   |     logger.log_error_and_exit(f'Successfully restored database version: {db_version}')\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/logger.py\", line 427, in log_error_and_exit\n[Python Unit Tests/macos  ]   |     sb_log_instance.log_error_and_exit(error_msg)\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/logger.py\", line 241, in log_error_and_exit\n[Python Unit Tests/macos  ]   |     sys.exit(error_msg.encode(sickgear.SYS_ENCODING, 'xmlcharrefreplace'))\n[Python Unit Tests/macos  ]   | SystemExit: b'Successfully restored database version: 0'\n[Python Unit Tests/macos  ]   | \n[Python Unit Tests/macos  ]   | ======================================================================\n[Python Unit Tests/macos  ]   | ERROR: test_pass_wordlist_checks (scene_helpers_tests.SceneTests)\n[Python Unit Tests/macos  ]   | ----------------------------------------------------------------------\n[Python Unit Tests/macos  ]   | Traceback (most recent call last):\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 730, in migration_code\n[Python Unit Tests/macos  ]   |     db_version = update.execute()\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/databases/mainDB.py\", line 382, in execute\n[Python Unit Tests/macos  ]   |     self.connection.action(query)\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 269, in action\n[Python Unit Tests/macos  ]   |     sql_result = self.connection.execute(query)\n[Python Unit Tests/macos  ]   | sqlite3.OperationalError: disk I/O error\n[Python Unit Tests/macos  ]   | \n[Python Unit Tests/macos  ]   | During handling of the above exception, another exception occurred:\n[Python Unit Tests/macos  ]   | \n[Python Unit Tests/macos  ]   | Traceback (most recent call last):\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/test_lib.py\", line 137, in setUp\n[Python Unit Tests/macos  ]   |     setup_test_db()\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/test_lib.py\", line 195, in setup_test_db\n[Python Unit Tests/macos  ]   |     db.migration_code(db.DBConnection())\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 738, in migration_code\n[Python Unit Tests/macos  ]   |     logger.log_error_and_exit(f'Successfully restored database version: {db_version}')\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/logger.py\", line 427, in log_error_and_exit\n[Python Unit Tests/macos  ]   |     sb_log_instance.log_error_and_exit(error_msg)\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/logger.py\", line 241, in log_error_and_exit\n[Python Unit Tests/macos  ]   |     sys.exit(error_msg.encode(sickgear.SYS_ENCODING, 'xmlcharrefreplace'))\n[Python Unit Tests/macos  ]   | SystemExit: b'Successfully restored database version: 0'\n[Python Unit Tests/macos  ]   | \n[Python Unit Tests/macos  ]   | ======================================================================\n[Python Unit Tests/macos  ]   | ERROR: test_formating (xem_tests.XEMBasicTests)\n[Python Unit Tests/macos  ]   | ----------------------------------------------------------------------\n[Python Unit Tests/macos  ]   | Traceback (most recent call last):\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 730, in migration_code\n[Python Unit Tests/macos  ]   |     db_version = update.execute()\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/databases/mainDB.py\", line 382, in execute\n[Python Unit Tests/macos  ]   |     self.connection.action(query)\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 269, in action\n[Python Unit Tests/macos  ]   |     sql_result = self.connection.execute(query)\n[Python Unit Tests/macos  ]   | sqlite3.OperationalError: attempt to write a readonly database\n[Python Unit Tests/macos  ]   | \n[Python Unit Tests/macos  ]   | During handling of the above exception, another exception occurred:\n[Python Unit Tests/macos  ]   | \n[Python Unit Tests/macos  ]   | Traceback (most recent call last):\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/test_lib.py\", line 137, in setUp\n[Python Unit Tests/macos  ]   |     setup_test_db()\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/test_lib.py\", line 195, in setup_test_db\n[Python Unit Tests/macos  ]   |     db.migration_code(db.DBConnection())\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 738, in migration_code\n[Python Unit Tests/macos  ]   |     logger.log_error_and_exit(f'Successfully restored database version: {db_version}')\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/logger.py\", line 427, in log_error_and_exit\n[Python Unit Tests/macos  ]   |     sb_log_instance.log_error_and_exit(error_msg)\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/logger.py\", line 241, in log_error_and_exit\n[Python Unit Tests/macos  ]   |     sys.exit(error_msg.encode(sickgear.SYS_ENCODING, 'xmlcharrefreplace'))\n[Python Unit Tests/macos  ]   | SystemExit: b'Successfully restored database version: 0'\n[Python Unit Tests/macos  ]   | \n[Python Unit Tests/macos  ]   | ======================================================================\n[Python Unit Tests/macos  ]   | ERROR: test_get_size_uid (newznab_tests.BasicTests)\n[Python Unit Tests/macos  ]   | ----------------------------------------------------------------------\n[Python Unit Tests/macos  ]   | Traceback (most recent call last):\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 730, in migration_code\n[Python Unit Tests/macos  ]   |     db_version = update.execute()\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/databases/mainDB.py\", line 382, in execute\n[Python Unit Tests/macos  ]   |     self.connection.action(query)\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 269, in action\n[Python Unit Tests/macos  ]   |     sql_result = self.connection.execute(query)\n[Python Unit Tests/macos  ]   | sqlite3.OperationalError: attempt to write a readonly database\n[Python Unit Tests/macos  ]   | \n[Python Unit Tests/macos  ]   | During handling of the above exception, another exception occurred:\n[Python Unit Tests/macos  ]   | \n[Python Unit Tests/macos  ]   | Traceback (most recent call last):\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/test_lib.py\", line 137, in setUp\n[Python Unit Tests/macos  ]   |     setup_test_db()\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/test_lib.py\", line 195, in setup_test_db\n[Python Unit Tests/macos  ]   |     db.migration_code(db.DBConnection())\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 738, in migration_code\n[Python Unit Tests/macos  ]   |     logger.log_error_and_exit(f'Successfully restored database version: {db_version}')\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/logger.py\", line 427, in log_error_and_exit\n[Python Unit Tests/macos  ]   |     sb_log_instance.log_error_and_exit(error_msg)\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/logger.py\", line 241, in log_error_and_exit\n[Python Unit Tests/macos  ]   |     sys.exit(error_msg.encode(sickgear.SYS_ENCODING, 'xmlcharrefreplace'))\n[Python Unit Tests/macos  ]   | SystemExit: b'Successfully restored database version: 0'\n[Python Unit Tests/macos  ]   | \n[Python Unit Tests/macos  ]   | ======================================================================\n[Python Unit Tests/macos  ]   | ERROR: test_parse_ids (newznab_tests.BasicTests)\n[Python Unit Tests/macos  ]   | ----------------------------------------------------------------------\n[Python Unit Tests/macos  ]   | Traceback (most recent call last):\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 730, in migration_code\n[Python Unit Tests/macos  ]   |     db_version = update.execute()\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/databases/mainDB.py\", line 382, in execute\n[Python Unit Tests/macos  ]   |     self.connection.action(query)\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 269, in action\n[Python Unit Tests/macos  ]   |     sql_result = self.connection.execute(query)\n[Python Unit Tests/macos  ]   | sqlite3.OperationalError: table allowlist already exists\n[Python Unit Tests/macos  ]   | \n[Python Unit Tests/macos  ]   | During handling of the above exception, another exception occurred:\n[Python Unit Tests/macos  ]   | \n[Python Unit Tests/macos  ]   | Traceback (most recent call last):\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/test_lib.py\", line 137, in setUp\n[Python Unit Tests/macos  ]   |     setup_test_db()\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/test_lib.py\", line 195, in setup_test_db\n[Python Unit Tests/macos  ]   |     db.migration_code(db.DBConnection())\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 738, in migration_code\n[Python Unit Tests/macos  ]   |     logger.log_error_and_exit(f'Successfully restored database version: {db_version}')\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/logger.py\", line 427, in log_error_and_exit\n[Python Unit Tests/macos  ]   |     sb_log_instance.log_error_and_exit(error_msg)\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/logger.py\", line 241, in log_error_and_exit\n[Python Unit Tests/macos  ]   |     sys.exit(error_msg.encode(sickgear.SYS_ENCODING, 'xmlcharrefreplace'))\n[Python Unit Tests/macos  ]   | SystemExit: b'Successfully restored database version: 0'\n[Python Unit Tests/macos  ]   | \n[Python Unit Tests/macos  ]   | ======================================================================\n[Python Unit Tests/macos  ]   | ERROR: test_parse_pub_date (newznab_tests.BasicTests)\n[Python Unit Tests/macos  ]   | ----------------------------------------------------------------------\n[Python Unit Tests/macos  ]   | Traceback (most recent call last):\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 730, in migration_code\n[Python Unit Tests/macos  ]   |     db_version = update.execute()\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/databases/mainDB.py\", line 382, in execute\n[Python Unit Tests/macos  ]   |     self.connection.action(query)\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 269, in action\n[Python Unit Tests/macos  ]   |     sql_result = self.connection.execute(query)\n[Python Unit Tests/macos  ]   | sqlite3.OperationalError: attempt to write a readonly database\n[Python Unit Tests/macos  ]   | \n[Python Unit Tests/macos  ]   | During handling of the above exception, another exception occurred:\n[Python Unit Tests/macos  ]   | \n[Python Unit Tests/macos  ]   | Traceback (most recent call last):\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/test_lib.py\", line 137, in setUp\n[Python Unit Tests/macos  ]   |     setup_test_db()\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/test_lib.py\", line 195, in setup_test_db\n[Python Unit Tests/macos  ]   |     db.migration_code(db.DBConnection())\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 738, in migration_code\n[Python Unit Tests/macos  ]   |     logger.log_error_and_exit(f'Successfully restored database version: {db_version}')\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/logger.py\", line 427, in log_error_and_exit\n[Python Unit Tests/macos  ]   |     sb_log_instance.log_error_and_exit(error_msg)\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/logger.py\", line 241, in log_error_and_exit\n[Python Unit Tests/macos  ]   |     sys.exit(error_msg.encode(sickgear.SYS_ENCODING, 'xmlcharrefreplace'))\n[Python Unit Tests/macos  ]   | SystemExit: b'Successfully restored database version: 0'\n[Python Unit Tests/macos  ]   | \n[Python Unit Tests/macos  ]   | ======================================================================\n[Python Unit Tests/macos  ]   | ERROR: test_title_and_url (newznab_tests.BasicTests)\n[Python Unit Tests/macos  ]   | ----------------------------------------------------------------------\n[Python Unit Tests/macos  ]   | Traceback (most recent call last):\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 730, in migration_code\n[Python Unit Tests/macos  ]   |     db_version = update.execute()\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/databases/mainDB.py\", line 382, in execute\n[Python Unit Tests/macos  ]   |     self.connection.action(query)\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 269, in action\n[Python Unit Tests/macos  ]   |     sql_result = self.connection.execute(query)\n[Python Unit Tests/macos  ]   | sqlite3.OperationalError: disk I/O error\n[Python Unit Tests/macos  ]   | \n[Python Unit Tests/macos  ]   | During handling of the above exception, another exception occurred:\n[Python Unit Tests/macos  ]   | \n[Python Unit Tests/macos  ]   | Traceback (most recent call last):\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/test_lib.py\", line 137, in setUp\n[Python Unit Tests/macos  ]   |     setup_test_db()\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/test_lib.py\", line 195, in setup_test_db\n[Python Unit Tests/macos  ]   |     db.migration_code(db.DBConnection())\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 738, in migration_code\n[Python Unit Tests/macos  ]   |     logger.log_error_and_exit(f'Successfully restored database version: {db_version}')\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/logger.py\", line 427, in log_error_and_exit\n[Python Unit Tests/macos  ]   |     sb_log_instance.log_error_and_exit(error_msg)\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/logger.py\", line 241, in log_error_and_exit\n[Python Unit Tests/macos  ]   |     sys.exit(error_msg.encode(sickgear.SYS_ENCODING, 'xmlcharrefreplace'))\n[Python Unit Tests/macos  ]   | SystemExit: b'Successfully restored database version: 0'\n[Python Unit Tests/macos  ]   | \n[Python Unit Tests/macos  ]   | ======================================================================\n[Python Unit Tests/macos  ]   | ERROR: test_migrations (migration_tests.MigrationBasicTests)\n[Python Unit Tests/macos  ]   | ----------------------------------------------------------------------\n[Python Unit Tests/macos  ]   | Traceback (most recent call last):\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/migration_tests.py\", line 46, in test_migrations\n[Python Unit Tests/macos  ]   |     update.execute()\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/migration_tests.py\", line 103, in execute\n[Python Unit Tests/macos  ]   |     self.connection.action(query)\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 269, in action\n[Python Unit Tests/macos  ]   |     sql_result = self.connection.execute(query)\n[Python Unit Tests/macos  ]   | sqlite3.OperationalError: disk I/O error\n[Python Unit Tests/macos  ]   | \n[Python Unit Tests/macos  ]   | ======================================================================\n[Python Unit Tests/macos  ]   | ERROR: test_dupe_names (name_parser_tests.DupeNameTests)\n[Python Unit Tests/macos  ]   | ----------------------------------------------------------------------\n[Python Unit Tests/macos  ]   | Traceback (most recent call last):\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/name_parser_tests.py\", line 898, in test_dupe_names\n[Python Unit Tests/macos  ]   |     sickgear.webserve.Home.make_showlist_unique_names()\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/webserve.py\", line 2499, in make_showlist_unique_names\n[Python Unit Tests/macos  ]   |     first_ep = sorted_show_list[i].first_aired_regular_episode\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/tv.py\", line 1392, in first_aired_regular_episode\n[Python Unit Tests/macos  ]   |     return self._get_end_episode(exclude_specials=True)\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/tv.py\", line 1371, in _get_end_episode\n[Python Unit Tests/macos  ]   |     eps = self.get_all_episodes()\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/tv.py\", line 1717, in get_all_episodes\n[Python Unit Tests/macos  ]   |     sql_result = my_db.select(sql_selection, sql_parameter)\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 289, in select\n[Python Unit Tests/macos  ]   |     sql_results = self.action(query, args).fetchall()\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 272, in action\n[Python Unit Tests/macos  ]   |     sql_result = self.connection.execute(query, args)\n[Python Unit Tests/macos  ]   | sqlite3.OperationalError: no such table: tv_episodes\n[Python Unit Tests/macos  ]   | \n[Python Unit Tests/macos  ]   | ======================================================================\n[Python Unit Tests/macos  ]   | ERROR: test_extra_info_no_name (name_parser_tests.ExtraInfoNoNameTests)\n[Python Unit Tests/macos  ]   | ----------------------------------------------------------------------\n[Python Unit Tests/macos  ]   | Traceback (most recent call last):\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 730, in migration_code\n[Python Unit Tests/macos  ]   |     db_version = update.execute()\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/databases/mainDB.py\", line 382, in execute\n[Python Unit Tests/macos  ]   |     self.connection.action(query)\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 269, in action\n[Python Unit Tests/macos  ]   |     sql_result = self.connection.execute(query)\n[Python Unit Tests/macos  ]   | sqlite3.OperationalError: disk I/O error\n[Python Unit Tests/macos  ]   | \n[Python Unit Tests/macos  ]   | During handling of the above exception, another exception occurred:\n[Python Unit Tests/macos  ]   | \n[Python Unit Tests/macos  ]   | Traceback (most recent call last):\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/name_parser_tests.py\", line 921, in setUp\n[Python Unit Tests/macos  ]   |     super(ExtraInfoNoNameTests, self).setUp()\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/test_lib.py\", line 137, in setUp\n[Python Unit Tests/macos  ]   |     setup_test_db()\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/test_lib.py\", line 195, in setup_test_db\n[Python Unit Tests/macos  ]   |     db.migration_code(db.DBConnection())\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 736, in migration_code\n[Python Unit Tests/macos  ]   |     if _restore_database(my_db.filename, db_version):\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 441, in _restore_database\n[Python Unit Tests/macos  ]   |     logger.log_error_and_exit('Database restore failed, abort upgrading database')\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/logger.py\", line 427, in log_error_and_exit\n[Python Unit Tests/macos  ]   |     sb_log_instance.log_error_and_exit(error_msg)\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/logger.py\", line 241, in log_error_and_exit\n[Python Unit Tests/macos  ]   |     sys.exit(error_msg.encode(sickgear.SYS_ENCODING, 'xmlcharrefreplace'))\n[Python Unit Tests/macos  ]   | SystemExit: b'Database restore failed, abort upgrading database'\n[Python Unit Tests/macos  ]   | \n[Python Unit Tests/macos  ]   | ======================================================================\n[Python Unit Tests/macos  ]   | ERROR: test_multi_ep_numbering (name_parser_tests.MultiSceneNumbering)\n[Python Unit Tests/macos  ]   | ----------------------------------------------------------------------\n[Python Unit Tests/macos  ]   | Traceback (most recent call last):\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 730, in migration_code\n[Python Unit Tests/macos  ]   |     db_version = update.execute()\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/databases/mainDB.py\", line 1769, in execute\n[Python Unit Tests/macos  ]   |     self.add_columns('tv_shows', [('timezone', 'TEXT', ''), ('airtime', 'NUMERIC'),\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 530, in add_columns\n[Python Unit Tests/macos  ]   |     self.connection.mass_action(sql)\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 216, in mass_action\n[Python Unit Tests/macos  ]   |     sql_result.append(cursor.execute(*tuple(cur_query)).fetchall())\n[Python Unit Tests/macos  ]   | sqlite3.OperationalError: duplicate column name: timezone\n[Python Unit Tests/macos  ]   | \n[Python Unit Tests/macos  ]   | During handling of the above exception, another exception occurred:\n[Python Unit Tests/macos  ]   | \n[Python Unit Tests/macos  ]   | Traceback (most recent call last):\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/test_lib.py\", line 137, in setUp\n[Python Unit Tests/macos  ]   |     setup_test_db()\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/test_lib.py\", line 195, in setup_test_db\n[Python Unit Tests/macos  ]   |     db.migration_code(db.DBConnection())\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 738, in migration_code\n[Python Unit Tests/macos  ]   |     logger.log_error_and_exit(f'Successfully restored database version: {db_version}')\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/logger.py\", line 427, in log_error_and_exit\n[Python Unit Tests/macos  ]   |     sb_log_instance.log_error_and_exit(error_msg)\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/logger.py\", line 241, in log_error_and_exit\n[Python Unit Tests/macos  ]   |     sys.exit(error_msg.encode(sickgear.SYS_ENCODING, 'xmlcharrefreplace'))\n[Python Unit Tests/macos  ]   | SystemExit: b'Successfully restored database version: 20014'\n[Python Unit Tests/macos  ]   | \n[Python Unit Tests/macos  ]   | ======================================================================\n[Python Unit Tests/macos  ]   | ERROR: test_init_empty_db (tv_tests.TVEpisodeTests)\n[Python Unit Tests/macos  ]   | ----------------------------------------------------------------------\n[Python Unit Tests/macos  ]   | Traceback (most recent call last):\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 730, in migration_code\n[Python Unit Tests/macos  ]   |     db_version = update.execute()\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/databases/mainDB.py\", line 382, in execute\n[Python Unit Tests/macos  ]   |     self.connection.action(query)\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 269, in action\n[Python Unit Tests/macos  ]   |     sql_result = self.connection.execute(query)\n[Python Unit Tests/macos  ]   | sqlite3.OperationalError: attempt to write a readonly database\n[Python Unit Tests/macos  ]   | \n[Python Unit Tests/macos  ]   | During handling of the above exception, another exception occurred:\n[Python Unit Tests/macos  ]   | \n[Python Unit Tests/macos  ]   | Traceback (most recent call last):\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/tv_tests.py\", line 82, in setUp\n[Python Unit Tests/macos  ]   |     super(TVEpisodeTests, self).setUp()\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/test_lib.py\", line 137, in setUp\n[Python Unit Tests/macos  ]   |     setup_test_db()\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/test_lib.py\", line 195, in setup_test_db\n[Python Unit Tests/macos  ]   |     db.migration_code(db.DBConnection())\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 738, in migration_code\n[Python Unit Tests/macos  ]   |     logger.log_error_and_exit(f'Successfully restored database version: {db_version}')\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/logger.py\", line 427, in log_error_and_exit\n[Python Unit Tests/macos  ]   |     sb_log_instance.log_error_and_exit(error_msg)\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/logger.py\", line 241, in log_error_and_exit\n[Python Unit Tests/macos  ]   |     sys.exit(error_msg.encode(sickgear.SYS_ENCODING, 'xmlcharrefreplace'))\n[Python Unit Tests/macos  ]   | SystemExit: b'Successfully restored database version: 0'\n[Python Unit Tests/macos  ]   | \n[Python Unit Tests/macos  ]   | ======================================================================\n[Python Unit Tests/macos  ]   | ERROR: test_find_show_by_id (tv_tests.TVFindTests)\n[Python Unit Tests/macos  ]   | ----------------------------------------------------------------------\n[Python Unit Tests/macos  ]   | Traceback (most recent call last):\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 730, in migration_code\n[Python Unit Tests/macos  ]   |     db_version = update.execute()\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/databases/mainDB.py\", line 382, in execute\n[Python Unit Tests/macos  ]   |     self.connection.action(query)\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 269, in action\n[Python Unit Tests/macos  ]   |     sql_result = self.connection.execute(query)\n[Python Unit Tests/macos  ]   | sqlite3.OperationalError: disk I/O error\n[Python Unit Tests/macos  ]   | \n[Python Unit Tests/macos  ]   | During handling of the above exception, another exception occurred:\n[Python Unit Tests/macos  ]   | \n[Python Unit Tests/macos  ]   | Traceback (most recent call last):\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/tv_tests.py\", line 239, in setUp\n[Python Unit Tests/macos  ]   |     super(TVFindTests, self).setUp()\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/test_lib.py\", line 137, in setUp\n[Python Unit Tests/macos  ]   |     setup_test_db()\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/test_lib.py\", line 195, in setup_test_db\n[Python Unit Tests/macos  ]   |     db.migration_code(db.DBConnection())\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 736, in migration_code\n[Python Unit Tests/macos  ]   |     if _restore_database(my_db.filename, db_version):\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 441, in _restore_database\n[Python Unit Tests/macos  ]   |     logger.log_error_and_exit('Database restore failed, abort upgrading database')\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/logger.py\", line 427, in log_error_and_exit\n[Python Unit Tests/macos  ]   |     sb_log_instance.log_error_and_exit(error_msg)\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/logger.py\", line 241, in log_error_and_exit\n[Python Unit Tests/macos  ]   |     sys.exit(error_msg.encode(sickgear.SYS_ENCODING, 'xmlcharrefreplace'))\n[Python Unit Tests/macos  ]   | SystemExit: b'Database restore failed, abort upgrading database'\n[Python Unit Tests/macos  ]   | \n[Python Unit Tests/macos  ]   | ======================================================================\n[Python Unit Tests/macos  ]   | ERROR: test_getEpisode (tv_tests.TVFormatPatternTests)\n[Python Unit Tests/macos  ]   | ----------------------------------------------------------------------\n[Python Unit Tests/macos  ]   | Traceback (most recent call last):\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 730, in migration_code\n[Python Unit Tests/macos  ]   |     db_version = update.execute()\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/databases/mainDB.py\", line 382, in execute\n[Python Unit Tests/macos  ]   |     self.connection.action(query)\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 269, in action\n[Python Unit Tests/macos  ]   |     sql_result = self.connection.execute(query)\n[Python Unit Tests/macos  ]   | sqlite3.OperationalError: disk I/O error\n[Python Unit Tests/macos  ]   | \n[Python Unit Tests/macos  ]   | During handling of the above exception, another exception occurred:\n[Python Unit Tests/macos  ]   | \n[Python Unit Tests/macos  ]   | Traceback (most recent call last):\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/tv_tests.py\", line 122, in setUp\n[Python Unit Tests/macos  ]   |     super(TVFormatPatternTests, self).setUp()\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/test_lib.py\", line 137, in setUp\n[Python Unit Tests/macos  ]   |     setup_test_db()\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/test_lib.py\", line 195, in setup_test_db\n[Python Unit Tests/macos  ]   |     db.migration_code(db.DBConnection())\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 738, in migration_code\n[Python Unit Tests/macos  ]   |     logger.log_error_and_exit(f'Successfully restored database version: {db_version}')\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/logger.py\", line 427, in log_error_and_exit\n[Python Unit Tests/macos  ]   |     sb_log_instance.log_error_and_exit(error_msg)\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/logger.py\", line 241, in log_error_and_exit\n[Python Unit Tests/macos  ]   |     sys.exit(error_msg.encode(sickgear.SYS_ENCODING, 'xmlcharrefreplace'))\n[Python Unit Tests/macos  ]   | SystemExit: b'Successfully restored database version: 0'\n[Python Unit Tests/macos  ]   | \n[Python Unit Tests/macos  ]   | ======================================================================\n[Python Unit Tests/macos  ]   | ERROR: test_change_indexerid (tv_tests.TVShowTests)\n[Python Unit Tests/macos  ]   | ----------------------------------------------------------------------\n[Python Unit Tests/macos  ]   | Traceback (most recent call last):\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 730, in migration_code\n[Python Unit Tests/macos  ]   |     db_version = update.execute()\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/databases/mainDB.py\", line 382, in execute\n[Python Unit Tests/macos  ]   |     self.connection.action(query)\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 269, in action\n[Python Unit Tests/macos  ]   |     sql_result = self.connection.execute(query)\n[Python Unit Tests/macos  ]   | sqlite3.OperationalError: disk I/O error\n[Python Unit Tests/macos  ]   | \n[Python Unit Tests/macos  ]   | During handling of the above exception, another exception occurred:\n[Python Unit Tests/macos  ]   | \n[Python Unit Tests/macos  ]   | Traceback (most recent call last):\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/tv_tests.py\", line 42, in setUp\n[Python Unit Tests/macos  ]   |     super(TVShowTests, self).setUp()\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/test_lib.py\", line 137, in setUp\n[Python Unit Tests/macos  ]   |     setup_test_db()\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/test_lib.py\", line 195, in setup_test_db\n[Python Unit Tests/macos  ]   |     db.migration_code(db.DBConnection())\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 738, in migration_code\n[Python Unit Tests/macos  ]   |     logger.log_error_and_exit(f'Successfully restored database version: {db_version}')\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/logger.py\", line 427, in log_error_and_exit\n[Python Unit Tests/macos  ]   |     sb_log_instance.log_error_and_exit(error_msg)\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/logger.py\", line 241, in log_error_and_exit\n[Python Unit Tests/macos  ]   |     sys.exit(error_msg.encode(sickgear.SYS_ENCODING, 'xmlcharrefreplace'))\n[Python Unit Tests/macos  ]   | SystemExit: b'Successfully restored database version: 0'\n[Python Unit Tests/macos  ]   | \n[Python Unit Tests/macos  ]   | ======================================================================\n[Python Unit Tests/macos  ]   | ERROR: test_init_indexerid (tv_tests.TVShowTests)\n[Python Unit Tests/macos  ]   | ----------------------------------------------------------------------\n[Python Unit Tests/macos  ]   | Traceback (most recent call last):\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 730, in migration_code\n[Python Unit Tests/macos  ]   |     db_version = update.execute()\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/databases/mainDB.py\", line 382, in execute\n[Python Unit Tests/macos  ]   |     self.connection.action(query)\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 269, in action\n[Python Unit Tests/macos  ]   |     sql_result = self.connection.execute(query)\n[Python Unit Tests/macos  ]   | sqlite3.OperationalError: table allowlist already exists\n[Python Unit Tests/macos  ]   | \n[Python Unit Tests/macos  ]   | During handling of the above exception, another exception occurred:\n[Python Unit Tests/macos  ]   | \n[Python Unit Tests/macos  ]   | Traceback (most recent call last):\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/tv_tests.py\", line 42, in setUp\n[Python Unit Tests/macos  ]   |     super(TVShowTests, self).setUp()\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/test_lib.py\", line 137, in setUp\n[Python Unit Tests/macos  ]   |     setup_test_db()\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/test_lib.py\", line 195, in setup_test_db\n[Python Unit Tests/macos  ]   |     db.migration_code(db.DBConnection())\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 738, in migration_code\n[Python Unit Tests/macos  ]   |     logger.log_error_and_exit(f'Successfully restored database version: {db_version}')\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/logger.py\", line 427, in log_error_and_exit\n[Python Unit Tests/macos  ]   |     sb_log_instance.log_error_and_exit(error_msg)\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/logger.py\", line 241, in log_error_and_exit\n[Python Unit Tests/macos  ]   |     sys.exit(error_msg.encode(sickgear.SYS_ENCODING, 'xmlcharrefreplace'))\n[Python Unit Tests/macos  ]   | SystemExit: b'Successfully restored database version: 0'\n[Python Unit Tests/macos  ]   | \n[Python Unit Tests/macos  ]   | ======================================================================\n[Python Unit Tests/macos  ]   | ERROR: test_set_name (tv_tests.TVShowTests)\n[Python Unit Tests/macos  ]   | ----------------------------------------------------------------------\n[Python Unit Tests/macos  ]   | Traceback (most recent call last):\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 730, in migration_code\n[Python Unit Tests/macos  ]   |     db_version = update.execute()\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/databases/mainDB.py\", line 382, in execute\n[Python Unit Tests/macos  ]   |     self.connection.action(query)\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 269, in action\n[Python Unit Tests/macos  ]   |     sql_result = self.connection.execute(query)\n[Python Unit Tests/macos  ]   | sqlite3.OperationalError: disk I/O error\n[Python Unit Tests/macos  ]   | \n[Python Unit Tests/macos  ]   | During handling of the above exception, another exception occurred:\n[Python Unit Tests/macos  ]   | \n[Python Unit Tests/macos  ]   | Traceback (most recent call last):\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/tv_tests.py\", line 42, in setUp\n[Python Unit Tests/macos  ]   |     super(TVShowTests, self).setUp()\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/test_lib.py\", line 137, in setUp\n[Python Unit Tests/macos  ]   |     setup_test_db()\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/test_lib.py\", line 195, in setup_test_db\n[Python Unit Tests/macos  ]   |     db.migration_code(db.DBConnection())\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 738, in migration_code\n[Python Unit Tests/macos  ]   |     logger.log_error_and_exit(f'Successfully restored database version: {db_version}')\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/logger.py\", line 427, in log_error_and_exit\n[Python Unit Tests/macos  ]   |     sb_log_instance.log_error_and_exit(error_msg)\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/logger.py\", line 241, in log_error_and_exit\n[Python Unit Tests/macos  ]   |     sys.exit(error_msg.encode(sickgear.SYS_ENCODING, 'xmlcharrefreplace'))\n[Python Unit Tests/macos  ]   | SystemExit: b'Successfully restored database version: 0'\n[Python Unit Tests/macos  ]   | \n[Python Unit Tests/macos  ]   | ======================================================================\n[Python Unit Tests/macos  ]   | ERROR: test_getEpisode (tv_tests.TVTests)\n[Python Unit Tests/macos  ]   | ----------------------------------------------------------------------\n[Python Unit Tests/macos  ]   | Traceback (most recent call last):\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 730, in migration_code\n[Python Unit Tests/macos  ]   |     db_version = update.execute()\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/databases/mainDB.py\", line 382, in execute\n[Python Unit Tests/macos  ]   |     self.connection.action(query)\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 269, in action\n[Python Unit Tests/macos  ]   |     sql_result = self.connection.execute(query)\n[Python Unit Tests/macos  ]   | sqlite3.OperationalError: attempt to write a readonly database\n[Python Unit Tests/macos  ]   | \n[Python Unit Tests/macos  ]   | During handling of the above exception, another exception occurred:\n[Python Unit Tests/macos  ]   | \n[Python Unit Tests/macos  ]   | Traceback (most recent call last):\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/tv_tests.py\", line 99, in setUp\n[Python Unit Tests/macos  ]   |     super(TVTests, self).setUp()\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/test_lib.py\", line 137, in setUp\n[Python Unit Tests/macos  ]   |     setup_test_db()\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/test_lib.py\", line 195, in setup_test_db\n[Python Unit Tests/macos  ]   |     db.migration_code(db.DBConnection())\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 738, in migration_code\n[Python Unit Tests/macos  ]   |     logger.log_error_and_exit(f'Successfully restored database version: {db_version}')\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/logger.py\", line 427, in log_error_and_exit\n[Python Unit Tests/macos  ]   |     sb_log_instance.log_error_and_exit(error_msg)\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/logger.py\", line 241, in log_error_and_exit\n[Python Unit Tests/macos  ]   |     sys.exit(error_msg.encode(sickgear.SYS_ENCODING, 'xmlcharrefreplace'))\n[Python Unit Tests/macos  ]   | SystemExit: b'Successfully restored database version: 0'\n[Python Unit Tests/macos  ]   | \n[Python Unit Tests/macos  ]   | ======================================================================\n[Python Unit Tests/macos  ]   | ERROR: test_TVidProdid (tv_tests.TVidProdidTests)\n[Python Unit Tests/macos  ]   | ----------------------------------------------------------------------\n[Python Unit Tests/windows]   | ....................F.F........F.E........E.EEEEEEEEEEEEEEEE..........................................E..E..EEEEEEEEE........\n[Python Unit Tests/windows]   | ======================================================================\n[Python Unit Tests/windows]   | ERROR: test_person_data (tvinfo_api_tests.TVInfoTests)\n[Python Unit Tests/windows]   | ----------------------------------------------------------------------\n[Python Unit Tests/windows]   | Traceback (most recent call last):\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 730, in migration_code\n[Python Unit Tests/windows]   |     db_version = update.execute()\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/databases/mainDB.py\", line 1694, in execute\n[Python Unit Tests/windows]   |     self.add_column('tv_shows', 'rls_global_exclude_ignore', data_type='TEXT', default='')\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 509, in add_column\n[Python Unit Tests/windows]   |     self.connection.action('ALTER TABLE [%s] ADD %s %s%s' %\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 269, in action\n[Python Unit Tests/windows]   |     sql_result = self.connection.execute(query)\n[Python Unit Tests/windows]   | sqlite3.OperationalError: duplicate column name: rls_global_exclude_ignore\n[Python Unit Tests/windows]   | \n[Python Unit Tests/windows]   | During handling of the above exception, another exception occurred:\n[Python Unit Tests/windows]   | \n[Python Unit Tests/windows]   | Traceback (most recent call last):\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/test_lib.py\", line 137, in setUp\n[Python Unit Tests/windows]   |     setup_test_db()\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/test_lib.py\", line 195, in setup_test_db\n[Python Unit Tests/windows]   |     db.migration_code(db.DBConnection())\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 738, in migration_code\n[Python Unit Tests/windows]   |     logger.log_error_and_exit(f'Successfully restored database version: {db_version}')\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/logger.py\", line 427, in log_error_and_exit\n[Python Unit Tests/windows]   |     sb_log_instance.log_error_and_exit(error_msg)\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/logger.py\", line 241, in log_error_and_exit\n[Python Unit Tests/windows]   |     sys.exit(error_msg.encode(sickgear.SYS_ENCODING, 'xmlcharrefreplace'))\n[Python Unit Tests/windows]   | SystemExit: b'Successfully restored database version: 20011'\n[Python Unit Tests/windows]   | \n[Python Unit Tests/windows]   | ======================================================================\n[Python Unit Tests/windows]   | ERROR: test_person_search (tvinfo_api_tests.TVInfoTests)\n[Python Unit Tests/windows]   | ----------------------------------------------------------------------\n[Python Unit Tests/windows]   | Traceback (most recent call last):\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 730, in migration_code\n[Python Unit Tests/windows]   |     db_version = update.execute()\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/databases/mainDB.py\", line 382, in execute\n[Python Unit Tests/windows]   |     self.connection.action(query)\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 269, in action\n[Python Unit Tests/windows]   |     sql_result = self.connection.execute(query)\n[Python Unit Tests/windows]   | sqlite3.OperationalError: attempt to write a readonly database\n[Python Unit Tests/windows]   | \n[Python Unit Tests/windows]   | During handling of the above exception, another exception occurred:\n[Python Unit Tests/windows]   | \n[Python Unit Tests/windows]   | Traceback (most recent call last):\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/test_lib.py\", line 137, in setUp\n[Python Unit Tests/windows]   |     setup_test_db()\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/test_lib.py\", line 195, in setup_test_db\n[Python Unit Tests/windows]   |     db.migration_code(db.DBConnection())\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 738, in migration_code\n[Python Unit Tests/windows]   |     logger.log_error_and_exit(f'Successfully restored database version: {db_version}')\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/logger.py\", line 427, in log_error_and_exit\n[Python Unit Tests/windows]   |     sb_log_instance.log_error_and_exit(error_msg)\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/logger.py\", line 241, in log_error_and_exit\n[Python Unit Tests/windows]   |     sys.exit(error_msg.encode(sickgear.SYS_ENCODING, 'xmlcharrefreplace'))\n[Python Unit Tests/windows]   | SystemExit: b'Successfully restored database version: 0'\n[Python Unit Tests/windows]   | \n[Python Unit Tests/windows]   | ======================================================================\n[Python Unit Tests/windows]   | ERROR: test_show_data (tvinfo_api_tests.TVInfoTests)\n[Python Unit Tests/windows]   | ----------------------------------------------------------------------\n[Python Unit Tests/windows]   | Traceback (most recent call last):\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 730, in migration_code\n[Python Unit Tests/windows]   |     db_version = update.execute()\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/databases/mainDB.py\", line 382, in execute\n[Python Unit Tests/windows]   |     self.connection.action(query)\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 269, in action\n[Python Unit Tests/windows]   |     sql_result = self.connection.execute(query)\n[Python Unit Tests/windows]   | sqlite3.OperationalError: attempt to write a readonly database\n[Python Unit Tests/windows]   | \n[Python Unit Tests/windows]   | During handling of the above exception, another exception occurred:\n[Python Unit Tests/windows]   | \n[Python Unit Tests/windows]   | Traceback (most recent call last):\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/test_lib.py\", line 137, in setUp\n[Python Unit Tests/windows]   |     setup_test_db()\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/test_lib.py\", line 195, in setup_test_db\n[Python Unit Tests/windows]   |     db.migration_code(db.DBConnection())\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 738, in migration_code\n[Python Unit Tests/windows]   |     logger.log_error_and_exit(f'Successfully restored database version: {db_version}')\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/logger.py\", line 427, in log_error_and_exit\n[Python Unit Tests/windows]   |     sb_log_instance.log_error_and_exit(error_msg)\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/logger.py\", line 241, in log_error_and_exit\n[Python Unit Tests/windows]   |     sys.exit(error_msg.encode(sickgear.SYS_ENCODING, 'xmlcharrefreplace'))\n[Python Unit Tests/windows]   | SystemExit: b'Successfully restored database version: 0'\n[Python Unit Tests/windows]   | \n[Python Unit Tests/windows]   | ======================================================================\n[Python Unit Tests/windows]   | ERROR: test_set_scene_numbering (webapi_tests.WebAPICase)\n[Python Unit Tests/windows]   | ----------------------------------------------------------------------\n[Python Unit Tests/windows]   | Traceback (most recent call last):\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/webapi_tests.py\", line 262, in tearDown\n[Python Unit Tests/windows]   |     set_scene_numbering_helper(\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/scene_numbering.py\", line 1022, in set_scene_numbering_helper\n[Python Unit Tests/windows]   |     set_scene_numbering(**scene_args)\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/scene_numbering.py\", line 342, in set_scene_numbering\n[Python Unit Tests/windows]   |     my_db.action(\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 273, in action\n[Python Unit Tests/windows]   |     self.connection.commit()\n[Python Unit Tests/windows]   | sqlite3.OperationalError: disk I/O error\n[Python Unit Tests/windows]   | \n[Python Unit Tests/windows]   | ======================================================================\n[Python Unit Tests/windows]   | ERROR: test_mass_action (db_tests.DBBasicTests)\n[Python Unit Tests/windows]   | ----------------------------------------------------------------------\n[Python Unit Tests/windows]   | Traceback (most recent call last):\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 457, in _process_upgrade\n[Python Unit Tests/windows]   |     instance.execute()\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/databases/cache_db.py\", line 115, in execute\n[Python Unit Tests/windows]   |     self.do_query(['DROP TABLE [provider_cache]'] + self.queries['consolidate_providers'] +\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 625, in do_query\n[Python Unit Tests/windows]   |     self.connection.action(query)\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 269, in action\n[Python Unit Tests/windows]   |     sql_result = self.connection.execute(query)\n[Python Unit Tests/windows]   | sqlite3.OperationalError: index tvrage_idx already exists\n[Python Unit Tests/windows]   | \n[Python Unit Tests/windows]   | During handling of the above exception, another exception occurred:\n[Python Unit Tests/windows]   | \n[Python Unit Tests/windows]   | Traceback (most recent call last):\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/db_tests.py\", line 28, in setUp\n[Python Unit Tests/windows]   |     super(DBBasicTests, self).setUp()\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/test_lib.py\", line 137, in setUp\n[Python Unit Tests/windows]   |     setup_test_db()\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/test_lib.py\", line 201, in setup_test_db\n[Python Unit Tests/windows]   |     db.upgrade_database(db.DBConnection('cache.db'), cache_db.InitialSchema)\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 428, in upgrade_database\n[Python Unit Tests/windows]   |     _process_upgrade(connection, schema)\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 477, in _process_upgrade\n[Python Unit Tests/windows]   |     _process_upgrade(connection, upgradeSubClass)\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 466, in _process_upgrade\n[Python Unit Tests/windows]   |     logger.log_error_and_exit('Successfully restored database version: %s' % db_version)\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/logger.py\", line 427, in log_error_and_exit\n[Python Unit Tests/windows]   |     sb_log_instance.log_error_and_exit(error_msg)\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/logger.py\", line 241, in log_error_and_exit\n[Python Unit Tests/windows]   |     sys.exit(error_msg.encode(sickgear.SYS_ENCODING, 'xmlcharrefreplace'))\n[Python Unit Tests/windows]   | SystemExit: b'Successfully restored database version: 7'\n[Python Unit Tests/windows]   | \n[Python Unit Tests/windows]   | ======================================================================\n[Python Unit Tests/windows]   | ERROR: test_webdl_type (search_tests.ProperTests)\n[Python Unit Tests/windows]   | ----------------------------------------------------------------------\n[Python Unit Tests/windows]   | Traceback (most recent call last):\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 730, in migration_code\n[Python Unit Tests/windows]   |     db_version = update.execute()\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/databases/mainDB.py\", line 382, in execute\n[Python Unit Tests/windows]   |     self.connection.action(query)\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 269, in action\n[Python Unit Tests/windows]   |     sql_result = self.connection.execute(query)\n[Python Unit Tests/windows]   | sqlite3.OperationalError: disk I/O error\n[Python Unit Tests/windows]   | \n[Python Unit Tests/windows]   | During handling of the above exception, another exception occurred:\n[Python Unit Tests/windows]   | \n[Python Unit Tests/windows]   | Traceback (most recent call last):\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/test_lib.py\", line 137, in setUp\n[Python Unit Tests/windows]   |     setup_test_db()\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/test_lib.py\", line 195, in setup_test_db\n[Python Unit Tests/windows]   |     db.migration_code(db.DBConnection())\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 738, in migration_code\n[Python Unit Tests/windows]   |     logger.log_error_and_exit(f'Successfully restored database version: {db_version}')\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/logger.py\", line 427, in log_error_and_exit\n[Python Unit Tests/windows]   |     sb_log_instance.log_error_and_exit(error_msg)\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/logger.py\", line 241, in log_error_and_exit\n[Python Unit Tests/windows]   |     sys.exit(error_msg.encode(sickgear.SYS_ENCODING, 'xmlcharrefreplace'))\n[Python Unit Tests/windows]   | SystemExit: b'Successfully restored database version: 0'\n[Python Unit Tests/windows]   | \n[Python Unit Tests/windows]   | ======================================================================\n[Python Unit Tests/windows]   | ERROR: test_sceneExceptionByName (scene_helpers_tests.SceneExceptionTestCase)\n[Python Unit Tests/windows]   | ----------------------------------------------------------------------\n[Python Unit Tests/windows]   | Traceback (most recent call last):\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 730, in migration_code\n[Python Unit Tests/windows]   |     db_version = update.execute()\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/databases/mainDB.py\", line 382, in execute\n[Python Unit Tests/windows]   |     self.connection.action(query)\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 269, in action\n[Python Unit Tests/windows]   |     sql_result = self.connection.execute(query)\n[Python Unit Tests/windows]   | sqlite3.OperationalError: attempt to write a readonly database\n[Python Unit Tests/windows]   | \n[Python Unit Tests/windows]   | During handling of the above exception, another exception occurred:\n[Python Unit Tests/windows]   | \n[Python Unit Tests/windows]   | Traceback (most recent call last):\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/scene_helpers_tests.py\", line 69, in setUp\n[Python Unit Tests/windows]   |     super(SceneExceptionTestCase, self).setUp()\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/test_lib.py\", line 137, in setUp\n[Python Unit Tests/windows]   |     setup_test_db()\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/test_lib.py\", line 195, in setup_test_db\n[Python Unit Tests/windows]   |     db.migration_code(db.DBConnection())\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 738, in migration_code\n[Python Unit Tests/windows]   |     logger.log_error_and_exit(f'Successfully restored database version: {db_version}')\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/logger.py\", line 427, in log_error_and_exit\n[Python Unit Tests/windows]   |     sb_log_instance.log_error_and_exit(error_msg)\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/logger.py\", line 241, in log_error_and_exit\n[Python Unit Tests/windows]   |     sys.exit(error_msg.encode(sickgear.SYS_ENCODING, 'xmlcharrefreplace'))\n[Python Unit Tests/windows]   | SystemExit: b'Successfully restored database version: 0'\n[Python Unit Tests/windows]   | \n[Python Unit Tests/windows]   | ======================================================================\n[Python Unit Tests/windows]   | ERROR: test_sceneExceptionByNameAnime (scene_helpers_tests.SceneExceptionTestCase)\n[Python Unit Tests/windows]   | ----------------------------------------------------------------------\n[Python Unit Tests/windows]   | Traceback (most recent call last):\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 730, in migration_code\n[Python Unit Tests/windows]   |     db_version = update.execute()\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/databases/mainDB.py\", line 382, in execute\n[Python Unit Tests/windows]   |     self.connection.action(query)\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 269, in action\n[Python Unit Tests/windows]   |     sql_result = self.connection.execute(query)\n[Python Unit Tests/windows]   | sqlite3.OperationalError: disk I/O error\n[Python Unit Tests/windows]   | \n[Python Unit Tests/windows]   | During handling of the above exception, another exception occurred:\n[Python Unit Tests/windows]   | \n[Python Unit Tests/windows]   | Traceback (most recent call last):\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/scene_helpers_tests.py\", line 69, in setUp\n[Python Unit Tests/windows]   |     super(SceneExceptionTestCase, self).setUp()\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/test_lib.py\", line 137, in setUp\n[Python Unit Tests/windows]   |     setup_test_db()\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/test_lib.py\", line 195, in setup_test_db\n[Python Unit Tests/windows]   |     db.migration_code(db.DBConnection())\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 736, in migration_code\n[Python Unit Tests/windows]   |     if _restore_database(my_db.filename, db_version):\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 441, in _restore_database\n[Python Unit Tests/windows]   |     logger.log_error_and_exit('Database restore failed, abort upgrading database')\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/logger.py\", line 427, in log_error_and_exit\n[Python Unit Tests/windows]   |     sb_log_instance.log_error_and_exit(error_msg)\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/logger.py\", line 241, in log_error_and_exit\n[Python Unit Tests/windows]   |     sys.exit(error_msg.encode(sickgear.SYS_ENCODING, 'xmlcharrefreplace'))\n[Python Unit Tests/windows]   | SystemExit: b'Database restore failed, abort upgrading database'\n[Python Unit Tests/windows]   | \n[Python Unit Tests/windows]   | ======================================================================\n[Python Unit Tests/windows]   | ERROR: test_sceneExceptionByNameEmpty (scene_helpers_tests.SceneExceptionTestCase)\n[Python Unit Tests/windows]   | ----------------------------------------------------------------------\n[Python Unit Tests/windows]   | Traceback (most recent call last):\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 457, in _process_upgrade\n[Python Unit Tests/windows]   |     instance.execute()\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/databases/cache_db.py\", line 115, in execute\n[Python Unit Tests/windows]   |     self.do_query(['DROP TABLE [provider_cache]'] + self.queries['consolidate_providers'] +\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 625, in do_query\n[Python Unit Tests/windows]   |     self.connection.action(query)\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 269, in action\n[Python Unit Tests/windows]   |     sql_result = self.connection.execute(query)\n[Python Unit Tests/windows]   | sqlite3.OperationalError: table provider_cache already exists\n[Python Unit Tests/windows]   | \n[Python Unit Tests/windows]   | During handling of the above exception, another exception occurred:\n[Python Unit Tests/windows]   | \n[Python Unit Tests/windows]   | Traceback (most recent call last):\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/scene_helpers_tests.py\", line 69, in setUp\n[Python Unit Tests/windows]   |     super(SceneExceptionTestCase, self).setUp()\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/test_lib.py\", line 137, in setUp\n[Python Unit Tests/windows]   |     setup_test_db()\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/test_lib.py\", line 201, in setup_test_db\n[Python Unit Tests/windows]   |     db.upgrade_database(db.DBConnection('cache.db'), cache_db.InitialSchema)\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 428, in upgrade_database\n[Python Unit Tests/windows]   |     _process_upgrade(connection, schema)\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 477, in _process_upgrade\n[Python Unit Tests/windows]   |     _process_upgrade(connection, upgradeSubClass)\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 466, in _process_upgrade\n[Python Unit Tests/windows]   |     logger.log_error_and_exit('Successfully restored database version: %s' % db_version)\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/logger.py\", line 427, in log_error_and_exit\n[Python Unit Tests/windows]   |     sb_log_instance.log_error_and_exit(error_msg)\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/logger.py\", line 241, in log_error_and_exit\n[Python Unit Tests/windows]   |     sys.exit(error_msg.encode(sickgear.SYS_ENCODING, 'xmlcharrefreplace'))\n[Python Unit Tests/windows]   | SystemExit: b'Successfully restored database version: 1'\n[Python Unit Tests/windows]   | \n[Python Unit Tests/windows]   | ======================================================================\n[Python Unit Tests/windows]   | ERROR: test_sceneExceptionsBlack_Lagoon (scene_helpers_tests.SceneExceptionTestCase)\n[Python Unit Tests/windows]   | ----------------------------------------------------------------------\n[Python Unit Tests/windows]   | Traceback (most recent call last):\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/scene_helpers_tests.py\", line 77, in setUp\n[Python Unit Tests/windows]   |     scene_exceptions.ReleaseMap().fetch_exceptions()\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/scene_exceptions.py\", line 181, in fetch_exceptions\n[Python Unit Tests/windows]   |     my_db.select('SELECT show_name, season'\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 289, in select\n[Python Unit Tests/windows]   |     sql_results = self.action(query, args).fetchall()\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 272, in action\n[Python Unit Tests/windows]   |     sql_result = self.connection.execute(query, args)\n[Python Unit Tests/windows]   | sqlite3.OperationalError: no such table: scene_exceptions\n[Python Unit Tests/windows]   | \n[Python Unit Tests/windows]   | ======================================================================\n[Python Unit Tests/windows]   | ERROR: test_sceneExceptionsEmpty (scene_helpers_tests.SceneExceptionTestCase)\n[Python Unit Tests/windows]   | ----------------------------------------------------------------------\n[Python Unit Tests/windows]   | Traceback (most recent call last):\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 730, in migration_code\n[Python Unit Tests/windows]   |     db_version = update.execute()\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/databases/mainDB.py\", line 1557, in execute\n[Python Unit Tests/windows]   |     self.add_column(t[0], 'indexer')\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 509, in add_column\n[Python Unit Tests/windows]   |     self.connection.action('ALTER TABLE [%s] ADD %s %s%s' %\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 269, in action\n[Python Unit Tests/windows]   |     sql_result = self.connection.execute(query)\n[Python Unit Tests/windows]   | sqlite3.OperationalError: attempt to write a readonly database\n[Python Unit Tests/windows]   | \n[Python Unit Tests/windows]   | During handling of the above exception, another exception occurred:\n[Python Unit Tests/windows]   | \n[Python Unit Tests/windows]   | Traceback (most recent call last):\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/scene_helpers_tests.py\", line 69, in setUp\n[Python Unit Tests/windows]   |     super(SceneExceptionTestCase, self).setUp()\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/test_lib.py\", line 137, in setUp\n[Python Unit Tests/windows]   |     setup_test_db()\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/test_lib.py\", line 195, in setup_test_db\n[Python Unit Tests/windows]   |     db.migration_code(db.DBConnection())\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 738, in migration_code\n[Python Unit Tests/windows]   |     logger.log_error_and_exit(f'Successfully restored database version: {db_version}')\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/logger.py\", line 427, in log_error_and_exit\n[Python Unit Tests/windows]   |     sb_log_instance.log_error_and_exit(error_msg)\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/logger.py\", line 241, in log_error_and_exit\n[Python Unit Tests/windows]   |     sys.exit(error_msg.encode(sickgear.SYS_ENCODING, 'xmlcharrefreplace'))\n[Python Unit Tests/windows]   | SystemExit: b'Successfully restored database version: 20010'\n[Python Unit Tests/windows]   | \n[Python Unit Tests/windows]   | ======================================================================\n[Python Unit Tests/windows]   | ERROR: test_sceneExceptionsResetNameCache (scene_helpers_tests.SceneExceptionTestCase)\n[Python Unit Tests/windows]   | ----------------------------------------------------------------------\n[Python Unit Tests/windows]   | Traceback (most recent call last):\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 730, in migration_code\n[Python Unit Tests/windows]   |     db_version = update.execute()\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/databases/mainDB.py\", line 382, in execute\n[Python Unit Tests/windows]   |     self.connection.action(query)\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 269, in action\n[Python Unit Tests/windows]   |     sql_result = self.connection.execute(query)\n[Python Unit Tests/windows]   | sqlite3.OperationalError: disk I/O error\n[Python Unit Tests/windows]   | \n[Python Unit Tests/windows]   | During handling of the above exception, another exception occurred:\n[Python Unit Tests/windows]   | \n[Python Unit Tests/windows]   | Traceback (most recent call last):\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/scene_helpers_tests.py\", line 69, in setUp\n[Python Unit Tests/windows]   |     super(SceneExceptionTestCase, self).setUp()\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/test_lib.py\", line 137, in setUp\n[Python Unit Tests/windows]   |     setup_test_db()\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/test_lib.py\", line 195, in setup_test_db\n[Python Unit Tests/windows]   |     db.migration_code(db.DBConnection())\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 738, in migration_code\n[Python Unit Tests/windows]   |     logger.log_error_and_exit(f'Successfully restored database version: {db_version}')\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/logger.py\", line 427, in log_error_and_exit\n[Python Unit Tests/windows]   |     sb_log_instance.log_error_and_exit(error_msg)\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/logger.py\", line 241, in log_error_and_exit\n[Python Unit Tests/windows]   |     sys.exit(error_msg.encode(sickgear.SYS_ENCODING, 'xmlcharrefreplace'))\n[Python Unit Tests/windows]   | SystemExit: b'Successfully restored database version: 0'\n[Python Unit Tests/windows]   | \n[Python Unit Tests/windows]   | ======================================================================\n[Python Unit Tests/windows]   | ERROR: test_allPossibleShowNames (scene_helpers_tests.SceneTests)\n[Python Unit Tests/windows]   | ----------------------------------------------------------------------\n[Python Unit Tests/windows]   | Traceback (most recent call last):\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 730, in migration_code\n[Python Unit Tests/windows]   |     db_version = update.execute()\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/databases/mainDB.py\", line 382, in execute\n[Python Unit Tests/windows]   |     self.connection.action(query)\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 269, in action\n[Python Unit Tests/windows]   |     sql_result = self.connection.execute(query)\n[Python Unit Tests/windows]   | sqlite3.OperationalError: attempt to write a readonly database\n[Python Unit Tests/windows]   | \n[Python Unit Tests/windows]   | During handling of the above exception, another exception occurred:\n[Python Unit Tests/windows]   | \n[Python Unit Tests/windows]   | Traceback (most recent call last):\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/test_lib.py\", line 137, in setUp\n[Python Unit Tests/windows]   |     setup_test_db()\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/test_lib.py\", line 195, in setup_test_db\n[Python Unit Tests/windows]   |     db.migration_code(db.DBConnection())\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 736, in migration_code\n[Python Unit Tests/windows]   |     if _restore_database(my_db.filename, db_version):\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 441, in _restore_database\n[Python Unit Tests/windows]   |     logger.log_error_and_exit('Database restore failed, abort upgrading database')\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/logger.py\", line 427, in log_error_and_exit\n[Python Unit Tests/windows]   |     sb_log_instance.log_error_and_exit(error_msg)\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/logger.py\", line 241, in log_error_and_exit\n[Python Unit Tests/windows]   |     sys.exit(error_msg.encode(sickgear.SYS_ENCODING, 'xmlcharrefreplace'))\n[Python Unit Tests/windows]   | SystemExit: b'Database restore failed, abort upgrading database'\n[Python Unit Tests/windows]   | \n[Python Unit Tests/windows]   | ======================================================================\n[Python Unit Tests/windows]   | ERROR: test_pass_wordlist_checks (scene_helpers_tests.SceneTests)\n[Python Unit Tests/windows]   | ----------------------------------------------------------------------\n[Python Unit Tests/windows]   | Traceback (most recent call last):\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 730, in migration_code\n[Python Unit Tests/windows]   |     db_version = update.execute()\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/databases/mainDB.py\", line 382, in execute\n[Python Unit Tests/windows]   |     self.connection.action(query)\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 269, in action\n[Python Unit Tests/windows]   |     sql_result = self.connection.execute(query)\n[Python Unit Tests/windows]   | sqlite3.OperationalError: table allowlist already exists\n[Python Unit Tests/windows]   | \n[Python Unit Tests/windows]   | During handling of the above exception, another exception occurred:\n[Python Unit Tests/windows]   | \n[Python Unit Tests/windows]   | Traceback (most recent call last):\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/test_lib.py\", line 137, in setUp\n[Python Unit Tests/windows]   |     setup_test_db()\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/test_lib.py\", line 195, in setup_test_db\n[Python Unit Tests/windows]   |     db.migration_code(db.DBConnection())\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 738, in migration_code\n[Python Unit Tests/windows]   |     logger.log_error_and_exit(f'Successfully restored database version: {db_version}')\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/logger.py\", line 427, in log_error_and_exit\n[Python Unit Tests/windows]   |     sb_log_instance.log_error_and_exit(error_msg)\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/logger.py\", line 241, in log_error_and_exit\n[Python Unit Tests/windows]   |     sys.exit(error_msg.encode(sickgear.SYS_ENCODING, 'xmlcharrefreplace'))\n[Python Unit Tests/windows]   | SystemExit: b'Successfully restored database version: 0'\n[Python Unit Tests/windows]   | \n[Python Unit Tests/windows]   | ======================================================================\n[Python Unit Tests/windows]   | ERROR: test_formating (xem_tests.XEMBasicTests)\n[Python Unit Tests/windows]   | ----------------------------------------------------------------------\n[Python Unit Tests/windows]   | Traceback (most recent call last):\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 730, in migration_code\n[Python Unit Tests/windows]   |     db_version = update.execute()\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/databases/mainDB.py\", line 382, in execute\n[Python Unit Tests/windows]   |     self.connection.action(query)\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 269, in action\n[Python Unit Tests/windows]   |     sql_result = self.connection.execute(query)\n[Python Unit Tests/windows]   | sqlite3.OperationalError: disk I/O error\n[Python Unit Tests/windows]   | \n[Python Unit Tests/windows]   | During handling of the above exception, another exception occurred:\n[Python Unit Tests/windows]   | \n[Python Unit Tests/windows]   | Traceback (most recent call last):\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/test_lib.py\", line 137, in setUp\n[Python Unit Tests/windows]   |     setup_test_db()\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/test_lib.py\", line 195, in setup_test_db\n[Python Unit Tests/windows]   |     db.migration_code(db.DBConnection())\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 738, in migration_code\n[Python Unit Tests/windows]   |     logger.log_error_and_exit(f'Successfully restored database version: {db_version}')\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/logger.py\", line 427, in log_error_and_exit\n[Python Unit Tests/windows]   |     sb_log_instance.log_error_and_exit(error_msg)\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/logger.py\", line 241, in log_error_and_exit\n[Python Unit Tests/windows]   |     sys.exit(error_msg.encode(sickgear.SYS_ENCODING, 'xmlcharrefreplace'))\n[Python Unit Tests/windows]   | SystemExit: b'Successfully restored database version: 0'\n[Python Unit Tests/windows]   | \n[Python Unit Tests/windows]   | ======================================================================\n[Python Unit Tests/windows]   | ERROR: test_get_size_uid (newznab_tests.BasicTests)\n[Python Unit Tests/windows]   | ----------------------------------------------------------------------\n[Python Unit Tests/windows]   | Traceback (most recent call last):\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 730, in migration_code\n[Python Unit Tests/windows]   |     db_version = update.execute()\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/databases/mainDB.py\", line 382, in execute\n[Python Unit Tests/windows]   |     self.connection.action(query)\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 269, in action\n[Python Unit Tests/windows]   |     sql_result = self.connection.execute(query)\n[Python Unit Tests/windows]   | sqlite3.OperationalError: disk I/O error\n[Python Unit Tests/windows]   | \n[Python Unit Tests/windows]   | During handling of the above exception, another exception occurred:\n[Python Unit Tests/windows]   | \n[Python Unit Tests/windows]   | Traceback (most recent call last):\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/test_lib.py\", line 137, in setUp\n[Python Unit Tests/windows]   |     setup_test_db()\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/test_lib.py\", line 195, in setup_test_db\n[Python Unit Tests/windows]   |     db.migration_code(db.DBConnection())\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 736, in migration_code\n[Python Unit Tests/windows]   |     if _restore_database(my_db.filename, db_version):\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 441, in _restore_database\n[Python Unit Tests/windows]   |     logger.log_error_and_exit('Database restore failed, abort upgrading database')\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/logger.py\", line 427, in log_error_and_exit\n[Python Unit Tests/windows]   |     sb_log_instance.log_error_and_exit(error_msg)\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/logger.py\", line 241, in log_error_and_exit\n[Python Unit Tests/windows]   |     sys.exit(error_msg.encode(sickgear.SYS_ENCODING, 'xmlcharrefreplace'))\n[Python Unit Tests/windows]   | SystemExit: b'Database restore failed, abort upgrading database'\n[Python Unit Tests/windows]   | \n[Python Unit Tests/windows]   | ======================================================================\n[Python Unit Tests/windows]   | ERROR: test_parse_ids (newznab_tests.BasicTests)\n[Python Unit Tests/windows]   | ----------------------------------------------------------------------\n[Python Unit Tests/windows]   | Traceback (most recent call last):\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 730, in migration_code\n[Python Unit Tests/windows]   |     db_version = update.execute()\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/databases/mainDB.py\", line 382, in execute\n[Python Unit Tests/windows]   |     self.connection.action(query)\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 269, in action\n[Python Unit Tests/windows]   |     sql_result = self.connection.execute(query)\n[Python Unit Tests/windows]   | sqlite3.OperationalError: disk I/O error\n[Python Unit Tests/windows]   | \n[Python Unit Tests/windows]   | During handling of the above exception, another exception occurred:\n[Python Unit Tests/windows]   | \n[Python Unit Tests/windows]   | Traceback (most recent call last):\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/test_lib.py\", line 137, in setUp\n[Python Unit Tests/windows]   |     setup_test_db()\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/test_lib.py\", line 195, in setup_test_db\n[Python Unit Tests/windows]   |     db.migration_code(db.DBConnection())\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 738, in migration_code\n[Python Unit Tests/windows]   |     logger.log_error_and_exit(f'Successfully restored database version: {db_version}')\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/logger.py\", line 427, in log_error_and_exit\n[Python Unit Tests/windows]   |     sb_log_instance.log_error_and_exit(error_msg)\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/logger.py\", line 241, in log_error_and_exit\n[Python Unit Tests/windows]   |     sys.exit(error_msg.encode(sickgear.SYS_ENCODING, 'xmlcharrefreplace'))\n[Python Unit Tests/windows]   | SystemExit: b'Successfully restored database version: 0'\n[Python Unit Tests/windows]   | \n[Python Unit Tests/windows]   | ======================================================================\n[Python Unit Tests/windows]   | ERROR: test_parse_pub_date (newznab_tests.BasicTests)\n[Python Unit Tests/windows]   | ----------------------------------------------------------------------\n[Python Unit Tests/windows]   | Traceback (most recent call last):\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 730, in migration_code\n[Python Unit Tests/windows]   |     db_version = update.execute()\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/databases/mainDB.py\", line 382, in execute\n[Python Unit Tests/windows]   |     self.connection.action(query)\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 269, in action\n[Python Unit Tests/windows]   |     sql_result = self.connection.execute(query)\n[Python Unit Tests/windows]   | sqlite3.OperationalError: attempt to write a readonly database\n[Python Unit Tests/windows]   | \n[Python Unit Tests/windows]   | During handling of the above exception, another exception occurred:\n[Python Unit Tests/windows]   | \n[Python Unit Tests/windows]   | Traceback (most recent call last):\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/test_lib.py\", line 137, in setUp\n[Python Unit Tests/windows]   |     setup_test_db()\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/test_lib.py\", line 195, in setup_test_db\n[Python Unit Tests/windows]   |     db.migration_code(db.DBConnection())\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 736, in migration_code\n[Python Unit Tests/windows]   |     if _restore_database(my_db.filename, db_version):\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 441, in _restore_database\n[Python Unit Tests/windows]   |     logger.log_error_and_exit('Database restore failed, abort upgrading database')\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/logger.py\", line 427, in log_error_and_exit\n[Python Unit Tests/windows]   |     sb_log_instance.log_error_and_exit(error_msg)\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/logger.py\", line 241, in log_error_and_exit\n[Python Unit Tests/windows]   |     sys.exit(error_msg.encode(sickgear.SYS_ENCODING, 'xmlcharrefreplace'))\n[Python Unit Tests/windows]   | SystemExit: b'Database restore failed, abort upgrading database'\n[Python Unit Tests/windows]   | \n[Python Unit Tests/windows]   | ======================================================================\n[Python Unit Tests/windows]   | ERROR: test_title_and_url (newznab_tests.BasicTests)\n[Python Unit Tests/windows]   | ----------------------------------------------------------------------\n[Python Unit Tests/windows]   | Traceback (most recent call last):\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 730, in migration_code\n[Python Unit Tests/windows]   |     db_version = update.execute()\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/databases/mainDB.py\", line 1769, in execute\n[Python Unit Tests/windows]   |     self.add_columns('tv_shows', [('timezone', 'TEXT', ''), ('airtime', 'NUMERIC'),\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 530, in add_columns\n[Python Unit Tests/windows]   |     self.connection.mass_action(sql)\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 216, in mass_action\n[Python Unit Tests/windows]   |     sql_result.append(cursor.execute(*tuple(cur_query)).fetchall())\n[Python Unit Tests/windows]   | sqlite3.OperationalError: duplicate column name: timezone\n[Python Unit Tests/windows]   | \n[Python Unit Tests/windows]   | During handling of the above exception, another exception occurred:\n[Python Unit Tests/windows]   | \n[Python Unit Tests/windows]   | Traceback (most recent call last):\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/test_lib.py\", line 137, in setUp\n[Python Unit Tests/windows]   |     setup_test_db()\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/test_lib.py\", line 195, in setup_test_db\n[Python Unit Tests/windows]   |     db.migration_code(db.DBConnection())\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 738, in migration_code\n[Python Unit Tests/windows]   |     logger.log_error_and_exit(f'Successfully restored database version: {db_version}')\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/logger.py\", line 427, in log_error_and_exit\n[Python Unit Tests/windows]   |     sb_log_instance.log_error_and_exit(error_msg)\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/logger.py\", line 241, in log_error_and_exit\n[Python Unit Tests/windows]   |     sys.exit(error_msg.encode(sickgear.SYS_ENCODING, 'xmlcharrefreplace'))\n[Python Unit Tests/windows]   | SystemExit: b'Successfully restored database version: 20014'\n[Python Unit Tests/windows]   | \n[Python Unit Tests/windows]   | ======================================================================\n[Python Unit Tests/windows]   | ERROR: test_caps (newznab_tests.FakeProviderTests)\n[Python Unit Tests/windows]   | ----------------------------------------------------------------------\n[Python Unit Tests/windows]   | Traceback (most recent call last):\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 730, in migration_code\n[Python Unit Tests/windows]   |     db_version = update.execute()\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/databases/mainDB.py\", line 1775, in execute\n[Python Unit Tests/windows]   |     self.add_columns('tv_episodes', [('timezone', 'TEXT', ''), ('airtime', 'NUMERIC'),\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 530, in add_columns\n[Python Unit Tests/windows]   |     self.connection.mass_action(sql)\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 216, in mass_action\n[Python Unit Tests/windows]   |     sql_result.append(cursor.execute(*tuple(cur_query)).fetchall())\n[Python Unit Tests/windows]   | sqlite3.OperationalError: attempt to write a readonly database\n[Python Unit Tests/windows]   | \n[Python Unit Tests/windows]   | During handling of the above exception, another exception occurred:\n[Python Unit Tests/windows]   | \n[Python Unit Tests/windows]   | Traceback (most recent call last):\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/test_lib.py\", line 137, in setUp\n[Python Unit Tests/windows]   |     setup_test_db()\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/test_lib.py\", line 195, in setup_test_db\n[Python Unit Tests/windows]   |     db.migration_code(db.DBConnection())\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 738, in migration_code\n[Python Unit Tests/windows]   |     logger.log_error_and_exit(f'Successfully restored database version: {db_version}')\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/logger.py\", line 427, in log_error_and_exit\n[Python Unit Tests/windows]   |     sb_log_instance.log_error_and_exit(error_msg)\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/logger.py\", line 241, in log_error_and_exit\n[Python Unit Tests/windows]   |     sys.exit(error_msg.encode(sickgear.SYS_ENCODING, 'xmlcharrefreplace'))\n[Python Unit Tests/windows]   | SystemExit: b'Successfully restored database version: 20014'\n[Python Unit Tests/windows]   | \n[Python Unit Tests/windows]   | ======================================================================\n[Python Unit Tests/windows]   | ERROR: test_migrations (migration_tests.MigrationBasicTests)\n[Python Unit Tests/windows]   | ----------------------------------------------------------------------\n[Python Unit Tests/windows]   | Traceback (most recent call last):\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 730, in migration_code\n[Python Unit Tests/windows]   |     db_version = update.execute()\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/databases/mainDB.py\", line 1368, in execute\n[Python Unit Tests/windows]   |     self.connection.action('VACUUM')\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 269, in action\n[Python Unit Tests/windows]   |     sql_result = self.connection.execute(query)\n[Python Unit Tests/windows]   | sqlite3.OperationalError: attempt to write a readonly database\n[Python Unit Tests/windows]   | \n[Python Unit Tests/windows]   | During handling of the above exception, another exception occurred:\n[Python Unit Tests/windows]   | \n[Python Unit Tests/windows]   | Traceback (most recent call last):\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/migration_tests.py\", line 49, in test_migrations\n[Python Unit Tests/windows]   |     db.migration_code(my_db)\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 738, in migration_code\n[Python Unit Tests/windows]   |     logger.log_error_and_exit(f'Successfully restored database version: {db_version}')\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/logger.py\", line 427, in log_error_and_exit\n[Python Unit Tests/windows]   |     sb_log_instance.log_error_and_exit(error_msg)\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/logger.py\", line 241, in log_error_and_exit\n[Python Unit Tests/windows]   |     sys.exit(error_msg.encode(sickgear.SYS_ENCODING, 'xmlcharrefreplace'))\n[Python Unit Tests/windows]   | SystemExit: b'Successfully restored database version: 20000'\n[Python Unit Tests/windows]   | \n[Python Unit Tests/windows]   | ======================================================================\n[Python Unit Tests/windows]   | ERROR: test_extra_info_no_name (name_parser_tests.ExtraInfoNoNameTests)\n[Python Unit Tests/windows]   | ----------------------------------------------------------------------\n[Python Unit Tests/windows]   | Traceback (most recent call last):\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 730, in migration_code\n[Python Unit Tests/windows]   |     db_version = update.execute()\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/databases/mainDB.py\", line 382, in execute\n[Python Unit Tests/windows]   |     self.connection.action(query)\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 269, in action\n[Python Unit Tests/windows]   |     sql_result = self.connection.execute(query)\n[Python Unit Tests/windows]   | sqlite3.OperationalError: attempt to write a readonly database\n[Python Unit Tests/windows]   | \n[Python Unit Tests/windows]   | During handling of the above exception, another exception occurred:\n[Python Unit Tests/windows]   | \n[Python Unit Tests/windows]   | Traceback (most recent call last):\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/name_parser_tests.py\", line 921, in setUp\n[Python Unit Tests/windows]   |     super(ExtraInfoNoNameTests, self).setUp()\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/test_lib.py\", line 137, in setUp\n[Python Unit Tests/windows]   |     setup_test_db()\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/test_lib.py\", line 195, in setup_test_db\n[Python Unit Tests/windows]   |     db.migration_code(db.DBConnection())\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 738, in migration_code\n[Python Unit Tests/windows]   |     logger.log_error_and_exit(f'Successfully restored database version: {db_version}')\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/logger.py\", line 427, in log_error_and_exit\n[Python Unit Tests/windows]   |     sb_log_instance.log_error_and_exit(error_msg)\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/logger.py\", line 241, in log_error_and_exit\n[Python Unit Tests/windows]   |     sys.exit(error_msg.encode(sickgear.SYS_ENCODING, 'xmlcharrefreplace'))\n[Python Unit Tests/windows]   | SystemExit: b'Successfully restored database version: 0'\n[Python Unit Tests/windows]   | \n[Python Unit Tests/windows]   | ======================================================================\n[Python Unit Tests/windows]   | ERROR: test_multi_ep_numbering (name_parser_tests.MultiSceneNumbering)\n[Python Unit Tests/windows]   | ----------------------------------------------------------------------\n[Python Unit Tests/windows]   | Traceback (most recent call last):\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 730, in migration_code\n[Python Unit Tests/windows]   |     db_version = update.execute()\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/databases/mainDB.py\", line 382, in execute\n[Python Unit Tests/windows]   |     self.connection.action(query)\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 269, in action\n[Python Unit Tests/windows]   |     sql_result = self.connection.execute(query)\n[Python Unit Tests/windows]   | sqlite3.OperationalError: table allowlist already exists\n[Python Unit Tests/windows]   | \n[Python Unit Tests/windows]   | During handling of the above exception, another exception occurred:\n[Python Unit Tests/windows]   | \n[Python Unit Tests/windows]   | Traceback (most recent call last):\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/test_lib.py\", line 137, in setUp\n[Python Unit Tests/windows]   |     setup_test_db()\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/test_lib.py\", line 195, in setup_test_db\n[Python Unit Tests/windows]   |     db.migration_code(db.DBConnection())\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 738, in migration_code\n[Python Unit Tests/windows]   |     logger.log_error_and_exit(f'Successfully restored database version: {db_version}')\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/logger.py\", line 427, in log_error_and_exit\n[Python Unit Tests/windows]   |     sb_log_instance.log_error_and_exit(error_msg)\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/logger.py\", line 241, in log_error_and_exit\n[Python Unit Tests/windows]   |     sys.exit(error_msg.encode(sickgear.SYS_ENCODING, 'xmlcharrefreplace'))\n[Python Unit Tests/windows]   | SystemExit: b'Successfully restored database version: 0'\n[Python Unit Tests/windows]   | \n[Python Unit Tests/windows]   | ======================================================================\n[Python Unit Tests/windows]   | ERROR: test_getWanted (show_tests.ShowAddTests)\n[Python Unit Tests/windows]   | ----------------------------------------------------------------------\n[Python Unit Tests/windows]   | Traceback (most recent call last):\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 730, in migration_code\n[Python Unit Tests/windows]   |     db_version = update.execute()\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/databases/mainDB.py\", line 382, in execute\n[Python Unit Tests/windows]   |     self.connection.action(query)\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 269, in action\n[Python Unit Tests/windows]   |     sql_result = self.connection.execute(query)\n[Python Unit Tests/windows]   | sqlite3.OperationalError: attempt to write a readonly database\n[Python Unit Tests/windows]   | \n[Python Unit Tests/windows]   | During handling of the above exception, another exception occurred:\n[Python Unit Tests/windows]   | \n[Python Unit Tests/windows]   | Traceback (most recent call last):\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/show_tests.py\", line 381, in setUp\n[Python Unit Tests/windows]   |     super(ShowAddTests, self).setUp()\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/test_lib.py\", line 137, in setUp\n[Python Unit Tests/windows]   |     setup_test_db()\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/test_lib.py\", line 195, in setup_test_db\n[Python Unit Tests/windows]   |     db.migration_code(db.DBConnection())\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 738, in migration_code\n[Python Unit Tests/windows]   |     logger.log_error_and_exit(f'Successfully restored database version: {db_version}')\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/logger.py\", line 427, in log_error_and_exit\n[Python Unit Tests/windows]   |     sb_log_instance.log_error_and_exit(error_msg)\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/logger.py\", line 241, in log_error_and_exit\n[Python Unit Tests/windows]   |     sys.exit(error_msg.encode(sickgear.SYS_ENCODING, 'xmlcharrefreplace'))\n[Python Unit Tests/windows]   | SystemExit: b'Successfully restored database version: 0'\n[Python Unit Tests/windows]   | \n[Python Unit Tests/windows]   | ======================================================================\n[Python Unit Tests/windows]   | ERROR: test_init_empty_db (tv_tests.TVEpisodeTests)\n[Python Unit Tests/windows]   | ----------------------------------------------------------------------\n[Python Unit Tests/windows]   | Traceback (most recent call last):\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 730, in migration_code\n[Python Unit Tests/windows]   |     db_version = update.execute()\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/databases/mainDB.py\", line 382, in execute\n[Python Unit Tests/windows]   |     self.connection.action(query)\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 269, in action\n[Python Unit Tests/windows]   |     sql_result = self.connection.execute(query)\n[Python Unit Tests/windows]   | sqlite3.OperationalError: attempt to write a readonly database\n[Python Unit Tests/windows]   | \n[Python Unit Tests/windows]   | During handling of the above exception, another exception occurred:\n[Python Unit Tests/windows]   | \n[Python Unit Tests/windows]   | Traceback (most recent call last):\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/tv_tests.py\", line 82, in setUp\n[Python Unit Tests/windows]   |     super(TVEpisodeTests, self).setUp()\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/test_lib.py\", line 137, in setUp\n[Python Unit Tests/windows]   |     setup_test_db()\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/test_lib.py\", line 195, in setup_test_db\n[Python Unit Tests/windows]   |     db.migration_code(db.DBConnection())\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 738, in migration_code\n[Python Unit Tests/windows]   |     logger.log_error_and_exit(f'Successfully restored database version: {db_version}')\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/logger.py\", line 427, in log_error_and_exit\n[Python Unit Tests/windows]   |     sb_log_instance.log_error_and_exit(error_msg)\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/logger.py\", line 241, in log_error_and_exit\n[Python Unit Tests/windows]   |     sys.exit(error_msg.encode(sickgear.SYS_ENCODING, 'xmlcharrefreplace'))\n[Python Unit Tests/windows]   | SystemExit: b'Successfully restored database version: 0'\n[Python Unit Tests/windows]   | \n[Python Unit Tests/windows]   | ======================================================================\n[Python Unit Tests/windows]   | ERROR: test_find_show_by_id (tv_tests.TVFindTests)\n[Python Unit Tests/windows]   | ----------------------------------------------------------------------\n[Python Unit Tests/windows]   | Traceback (most recent call last):\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 730, in migration_code\n[Python Unit Tests/windows]   |     db_version = update.execute()\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/databases/mainDB.py\", line 382, in execute\n[Python Unit Tests/windows]   |     self.connection.action(query)\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 269, in action\n[Python Unit Tests/windows]   |     sql_result = self.connection.execute(query)\n[Python Unit Tests/windows]   | sqlite3.OperationalError: disk I/O error\n[Python Unit Tests/windows]   | \n[Python Unit Tests/windows]   | During handling of the above exception, another exception occurred:\n[Python Unit Tests/windows]   | \n[Python Unit Tests/windows]   | Traceback (most recent call last):\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/tv_tests.py\", line 239, in setUp\n[Python Unit Tests/windows]   |     super(TVFindTests, self).setUp()\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/test_lib.py\", line 137, in setUp\n[Python Unit Tests/windows]   |     setup_test_db()\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/test_lib.py\", line 195, in setup_test_db\n[Python Unit Tests/windows]   |     db.migration_code(db.DBConnection())\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 736, in migration_code\n[Python Unit Tests/windows]   |     if _restore_database(my_db.filename, db_version):\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 441, in _restore_database\n[Python Unit Tests/windows]   |     logger.log_error_and_exit('Database restore failed, abort upgrading database')\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/logger.py\", line 427, in log_error_and_exit\n[Python Unit Tests/windows]   |     sb_log_instance.log_error_and_exit(error_msg)\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/logger.py\", line 241, in log_error_and_exit\n[Python Unit Tests/windows]   |     sys.exit(error_msg.encode(sickgear.SYS_ENCODING, 'xmlcharrefreplace'))\n[Python Unit Tests/windows]   | SystemExit: b'Database restore failed, abort upgrading database'\n[Python Unit Tests/windows]   | \n[Python Unit Tests/windows]   | ======================================================================\n[Python Unit Tests/windows]   | ERROR: test_getEpisode (tv_tests.TVFormatPatternTests)\n[Python Unit Tests/windows]   | ----------------------------------------------------------------------\n[Python Unit Tests/windows]   | Traceback (most recent call last):\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 730, in migration_code\n[Python Unit Tests/windows]   |     db_version = update.execute()\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/databases/mainDB.py\", line 313, in execute\n[Python Unit Tests/windows]   |     if not self.has_table('tv_shows') and not self.has_table('db_version'):\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 486, in has_table\n[Python Unit Tests/windows]   |     return 0 < len(self.connection.select('SELECT 1 FROM sqlite_master WHERE name = ?;', (table_name,)))\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 289, in select\n[Python Unit Tests/windows]   |     sql_results = self.action(query, args).fetchall()\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 272, in action\n[Python Unit Tests/windows]   |     sql_result = self.connection.execute(query, args)\n[Python Unit Tests/windows]   | sqlite3.OperationalError: disk I/O error\n[Python Unit Tests/windows]   | \n[Python Unit Tests/windows]   | During handling of the above exception, another exception occurred:\n[Python Unit Tests/windows]   | \n[Python Unit Tests/windows]   | Traceback (most recent call last):\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/tv_tests.py\", line 122, in setUp\n[Python Unit Tests/windows]   |     super(TVFormatPatternTests, self).setUp()\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/test_lib.py\", line 137, in setUp\n[Python Unit Tests/windows]   |     setup_test_db()\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/test_lib.py\", line 195, in setup_test_db\n[Python Unit Tests/windows]   |     db.migration_code(db.DBConnection())\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 738, in migration_code\n[Python Unit Tests/windows]   |     logger.log_error_and_exit(f'Successfully restored database version: {db_version}')\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/logger.py\", line 427, in log_error_and_exit\n[Python Unit Tests/windows]   |     sb_log_instance.log_error_and_exit(error_msg)\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/logger.py\", line 241, in log_error_and_exit\n[Python Unit Tests/windows]   |     sys.exit(error_msg.encode(sickgear.SYS_ENCODING, 'xmlcharrefreplace'))\n[Python Unit Tests/windows]   | SystemExit: b'Successfully restored database version: 0'\n[Python Unit Tests/windows]   | \n[Python Unit Tests/windows]   | ======================================================================\n[Python Unit Tests/windows]   | ERROR: test_change_indexerid (tv_tests.TVShowTests)\n[Python Unit Tests/windows]   | ----------------------------------------------------------------------\n[Python Unit Tests/windows]   | Traceback (most recent call last):\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 730, in migration_code\n[Python Unit Tests/windows]   |     db_version = update.execute()\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/databases/mainDB.py\", line 382, in execute\n[Python Unit Tests/windows]   |     self.connection.action(query)\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 269, in action\n[Python Unit Tests/windows]   |     sql_result = self.connection.execute(query)\n[Python Unit Tests/windows]   | sqlite3.OperationalError: disk I/O error\n[Python Unit Tests/windows]   | \n[Python Unit Tests/windows]   | During handling of the above exception, another exception occurred:\n[Python Unit Tests/windows]   | \n[Python Unit Tests/windows]   | Traceback (most recent call last):\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/tv_tests.py\", line 42, in setUp\n[Python Unit Tests/windows]   |     super(TVShowTests, self).setUp()\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/test_lib.py\", line 137, in setUp\n[Python Unit Tests/windows]   |     setup_test_db()\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/test_lib.py\", line 195, in setup_test_db\n[Python Unit Tests/windows]   |     db.migration_code(db.DBConnection())\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 736, in migration_code\n[Python Unit Tests/windows]   |     if _restore_database(my_db.filename, db_version):\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 441, in _restore_database\n[Python Unit Tests/windows]   |     logger.log_error_and_exit('Database restore failed, abort upgrading database')\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/logger.py\", line 427, in log_error_and_exit\n[Python Unit Tests/windows]   |     sb_log_instance.log_error_and_exit(error_msg)\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/logger.py\", line 241, in log_error_and_exit\n[Python Unit Tests/windows]   |     sys.exit(error_msg.encode(sickgear.SYS_ENCODING, 'xmlcharrefreplace'))\n[Python Unit Tests/windows]   | SystemExit: b'Database restore failed, abort upgrading database'\n[Python Unit Tests/windows]   | \n[Python Unit Tests/windows]   | ======================================================================\n[Python Unit Tests/windows]   | ERROR: test_init_indexerid (tv_tests.TVShowTests)\n[Python Unit Tests/windows]   | ----------------------------------------------------------------------\n[Python Unit Tests/windows]   | Traceback (most recent call last):\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 730, in migration_code\n[Python Unit Tests/windows]   |     db_version = update.execute()\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/databases/mainDB.py\", line 382, in execute\n[Python Unit Tests/windows]   |     self.connection.action(query)\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 269, in action\n[Python Unit Tests/windows]   |     sql_result = self.connection.execute(query)\n[Python Unit Tests/windows]   | sqlite3.OperationalError: attempt to write a readonly database\n[Python Unit Tests/windows]   | \n[Python Unit Tests/windows]   | During handling of the above exception, another exception occurred:\n[Python Unit Tests/windows]   | \n[Python Unit Tests/windows]   | Traceback (most recent call last):\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/tv_tests.py\", line 42, in setUp\n[Python Unit Tests/windows]   |     super(TVShowTests, self).setUp()\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/test_lib.py\", line 137, in setUp\n[Python Unit Tests/windows]   |     setup_test_db()\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/test_lib.py\", line 195, in setup_test_db\n[Python Unit Tests/windows]   |     db.migration_code(db.DBConnection())\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 738, in migration_code\n[Python Unit Tests/windows]   |     logger.log_error_and_exit(f'Successfully restored database version: {db_version}')\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/logger.py\", line 427, in log_error_and_exit\n[Python Unit Tests/windows]   |     sb_log_instance.log_error_and_exit(error_msg)\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/logger.py\", line 241, in log_error_and_exit\n[Python Unit Tests/windows]   |     sys.exit(error_msg.encode(sickgear.SYS_ENCODING, 'xmlcharrefreplace'))\n[Python Unit Tests/windows]   | SystemExit: b'Successfully restored database version: 0'\n[Python Unit Tests/windows]   | \n[Python Unit Tests/windows]   | ======================================================================\n[Python Unit Tests/windows]   | ERROR: test_set_name (tv_tests.TVShowTests)\n[Python Unit Tests/windows]   | ----------------------------------------------------------------------\n[Python Unit Tests/windows]   | Traceback (most recent call last):\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 730, in migration_code\n[Python Unit Tests/windows]   |     db_version = update.execute()\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/databases/mainDB.py\", line 382, in execute\n[Python Unit Tests/windows]   |     self.connection.action(query)\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 269, in action\n[Python Unit Tests/windows]   |     sql_result = self.connection.execute(query)\n[Python Unit Tests/windows]   | sqlite3.OperationalError: attempt to write a readonly database\n[Python Unit Tests/windows]   | \n[Python Unit Tests/windows]   | During handling of the above exception, another exception occurred:\n[Python Unit Tests/windows]   | \n[Python Unit Tests/windows]   | Traceback (most recent call last):\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/tv_tests.py\", line 42, in setUp\n[Python Unit Tests/windows]   |     super(TVShowTests, self).setUp()\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/test_lib.py\", line 137, in setUp\n[Python Unit Tests/windows]   |     setup_test_db()\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/test_lib.py\", line 195, in setup_test_db\n[Python Unit Tests/windows]   |     db.migration_code(db.DBConnection())\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 738, in migration_code\n[Python Unit Tests/windows]   |     logger.log_error_and_exit(f'Successfully restored database version: {db_version}')\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/logger.py\", line 427, in log_error_and_exit\n[Python Unit Tests/windows]   |     sb_log_instance.log_error_and_exit(error_msg)\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/logger.py\", line 241, in log_error_and_exit\n[Python Unit Tests/windows]   |     sys.exit(error_msg.encode(sickgear.SYS_ENCODING, 'xmlcharrefreplace'))\n[Python Unit Tests/windows]   | SystemExit: b'Successfully restored database version: 0'\n[Python Unit Tests/windows]   | \n[Python Unit Tests/windows]   | ======================================================================\n[Python Unit Tests/windows]   | ERROR: test_getEpisode (tv_tests.TVTests)\n[Python Unit Tests/windows]   | ----------------------------------------------------------------------\n[Python Unit Tests/windows]   | Traceback (most recent call last):\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 730, in migration_code\n[Python Unit Tests/windows]   |     db_version = update.execute()\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/databases/mainDB.py\", line 382, in execute\n[Python Unit Tests/windows]   |     self.connection.action(query)\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 269, in action\n[Python Unit Tests/windows]   |     sql_result = self.connection.execute(query)\n[Python Unit Tests/windows]   | sqlite3.OperationalError: attempt to write a readonly database\n[Python Unit Tests/windows]   | \n[Python Unit Tests/windows]   | During handling of the above exception, another exception occurred:\n[Python Unit Tests/windows]   | \n[Python Unit Tests/windows]   | Traceback (most recent call last):\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/tv_tests.py\", line 99, in setUp\n[Python Unit Tests/windows]   |     super(TVTests, self).setUp()\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/test_lib.py\", line 137, in setUp\n[Python Unit Tests/windows]   |     setup_test_db()\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/test_lib.py\", line 195, in setup_test_db\n[Python Unit Tests/windows]   |     db.migration_code(db.DBConnection())\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 738, in migration_code\n[Python Unit Tests/windows]   |     logger.log_error_and_exit(f'Successfully restored database version: {db_version}')\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/logger.py\", line 427, in log_error_and_exit\n[Python Unit Tests/windows]   |     sb_log_instance.log_error_and_exit(error_msg)\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/logger.py\", line 241, in log_error_and_exit\n[Python Unit Tests/windows]   |     sys.exit(error_msg.encode(sickgear.SYS_ENCODING, 'xmlcharrefreplace'))\n[Python Unit Tests/windows]   | SystemExit: b'Successfully restored database version: 0'\n[Python Unit Tests/windows]   | \n[Python Unit Tests/windows]   | ======================================================================\n[Python Unit Tests/windows]   | ERROR: test_TVidProdid (tv_tests.TVidProdidTests)\n[Python Unit Tests/windows]   | ----------------------------------------------------------------------\n[Python Unit Tests/windows]   | Traceback (most recent call last):\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 730, in migration_code\n[Python Unit Tests/windows]   |     db_version = update.execute()\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/databases/mainDB.py\", line 382, in execute\n[Python Unit Tests/windows]   |     self.connection.action(query)\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 269, in action\n[Python Unit Tests/windows]   |     sql_result = self.connection.execute(query)\n[Python Unit Tests/windows]   | sqlite3.OperationalError: attempt to write a readonly database\n[Python Unit Tests/windows]   | \n[Python Unit Tests/windows]   | During handling of the above exception, another exception occurred:\n[Python Unit Tests/windows]   | \n[Python Unit Tests/windows]   | Traceback (most recent call last):\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/test_lib.py\", line 137, in setUp\n[Python Unit Tests/windows]   |     setup_test_db()\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/test_lib.py\", line 195, in setup_test_db\n[Python Unit Tests/windows]   |     db.migration_code(db.DBConnection())\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 738, in migration_code\n[Python Unit Tests/windows]   |     logger.log_error_and_exit(f'Successfully restored database version: {db_version}')\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/logger.py\", line 427, in log_error_and_exit\n[Python Unit Tests/windows]   |     sb_log_instance.log_error_and_exit(error_msg)\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/logger.py\", line 241, in log_error_and_exit\n[Python Unit Tests/windows]   |     sys.exit(error_msg.encode(sickgear.SYS_ENCODING, 'xmlcharrefreplace'))\n[Python Unit Tests/windows]   | SystemExit: b'Successfully restored database version: 0'\n[Python Unit Tests/windows]   | \n[Python Unit Tests/windows]   | ======================================================================\n[Python Unit Tests/windows]   | FAIL: test_get_require_words (webapi_tests.WebAPICase)\n[Python Unit Tests/windows]   | ----------------------------------------------------------------------\n[Python Unit Tests/windows]   | Traceback (most recent call last):\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/webapi_tests.py\", line 519, in test_get_require_words\n[Python Unit Tests/windows]   |     self._check_success_base_response(data, webapi.CMD_SickGearListRequireWords,\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/webapi_tests.py\", line 295, in _check_success_base_response\n[Python Unit Tests/windows]   |     self.assertEqual(data['result'], 'success')\n[Python Unit Tests/windows]   | AssertionError: 'fatal' != 'success'\n[Python Unit Tests/windows]   | - fatal\n[Python Unit Tests/windows]   | + success\n[Python Unit Tests/windows]   | \n[Python Unit Tests/windows]   | \n[Python Unit Tests/windows]   | ======================================================================\n[Python Unit Tests/macos  ]   | \n[Python Unit Tests/macos  ]   | reset mock methods\n[Python Unit Tests/macos  ]   | Traceback (most recent call last):\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 730, in migration_code\n[Python Unit Tests/macos  ]   |     db_version = update.execute()\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/databases/mainDB.py\", line 382, in execute\n[Python Unit Tests/macos  ]   |     self.connection.action(query)\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 269, in action\n[Python Unit Tests/macos  ]   |     sql_result = self.connection.execute(query)\n[Python Unit Tests/macos  ]   | sqlite3.OperationalError: attempt to write a readonly database\n[Python Unit Tests/macos  ]   | \n[Python Unit Tests/macos  ]   | During handling of the above exception, another exception occurred:\n[Python Unit Tests/macos  ]   | \n[Python Unit Tests/macos  ]   | Traceback (most recent call last):\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/test_lib.py\", line 137, in setUp\n[Python Unit Tests/macos  ]   |     setup_test_db()\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/test_lib.py\", line 195, in setup_test_db\n[Python Unit Tests/macos  ]   |     db.migration_code(db.DBConnection())\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 738, in migration_code\n[Python Unit Tests/macos  ]   |     logger.log_error_and_exit(f'Successfully restored database version: {db_version}')\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/logger.py\", line 427, in log_error_and_exit\n[Python Unit Tests/macos  ]   |     sb_log_instance.log_error_and_exit(error_msg)\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/logger.py\", line 241, in log_error_and_exit\n[Python Unit Tests/macos  ]   |     sys.exit(error_msg.encode(sickgear.SYS_ENCODING, 'xmlcharrefreplace'))\n[Python Unit Tests/macos  ]   | SystemExit: b'Successfully restored database version: 0'\n[Python Unit Tests/macos  ]   | \n[Python Unit Tests/macos  ]   | ======================================================================\n[Python Unit Tests/macos  ]   | FAIL: test_get_ignore_words (webapi_tests.WebAPICase)\n[Python Unit Tests/macos  ]   | ----------------------------------------------------------------------\n[Python Unit Tests/macos  ]   | Traceback (most recent call last):\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/webapi_tests.py\", line 540, in test_get_ignore_words\n[Python Unit Tests/macos  ]   |     self._check_success_base_response(data, webapi.CMD_SickGearListIgnoreWords,\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/webapi_tests.py\", line 295, in _check_success_base_response\n[Python Unit Tests/macos  ]   |     self.assertEqual(data['result'], 'success')\n[Python Unit Tests/macos  ]   | AssertionError: 'fatal' != 'success'\n[Python Unit Tests/macos  ]   | - fatal\n[Python Unit Tests/macos  ]   | + success\n[Python Unit Tests/macos  ]   | \n[Python Unit Tests/macos  ]   | \n[Python Unit Tests/macos  ]   | ======================================================================\n[Python Unit Tests/macos  ]   | FAIL: test_get_require_words (webapi_tests.WebAPICase)\n[Python Unit Tests/macos  ]   | ----------------------------------------------------------------------\n[Python Unit Tests/macos  ]   | Traceback (most recent call last):\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/webapi_tests.py\", line 519, in test_get_require_words\n[Python Unit Tests/macos  ]   |     self._check_success_base_response(data, webapi.CMD_SickGearListRequireWords,\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/webapi_tests.py\", line 295, in _check_success_base_response\n[Python Unit Tests/macos  ]   |     self.assertEqual(data['result'], 'success')\n[Python Unit Tests/macos  ]   | AssertionError: 'fatal' != 'success'\n[Python Unit Tests/macos  ]   | - fatal\n[Python Unit Tests/macos  ]   | + success\n[Python Unit Tests/macos  ]   | \n[Python Unit Tests/macos  ]   | \n[Python Unit Tests/macos  ]   | ======================================================================\n[Python Unit Tests/macos  ]   | FAIL: test_get_scene_qualities (webapi_tests.WebAPICase)\n[Python Unit Tests/macos  ]   | ----------------------------------------------------------------------\n[Python Unit Tests/macos  ]   | Traceback (most recent call last):\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/webapi_tests.py\", line 586, in test_get_scene_qualities\n[Python Unit Tests/macos  ]   |     self._check_success_base_response(data, webapi.CMD_SickGearExceptions)\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/webapi_tests.py\", line 295, in _check_success_base_response\n[Python Unit Tests/macos  ]   |     self.assertEqual(data['result'], 'success')\n[Python Unit Tests/macos  ]   | AssertionError: 'fatal' != 'success'\n[Python Unit Tests/macos  ]   | - fatal\n[Python Unit Tests/macos  ]   | + success\n[Python Unit Tests/macos  ]   | \n[Python Unit Tests/macos  ]   | \n[Python Unit Tests/macos  ]   | ======================================================================\n[Python Unit Tests/macos  ]   | FAIL: test_seasons (webapi_tests.WebAPICase)\n[Python Unit Tests/macos  ]   | ----------------------------------------------------------------------\n[Python Unit Tests/macos  ]   | Traceback (most recent call last):\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/webapi_tests.py\", line 380, in test_seasons\n[Python Unit Tests/macos  ]   |     self.assertTrue(r, msg='Failed command: %s - data season dict%s' % (\n[Python Unit Tests/macos  ]   | AssertionError: False is not true : Failed command: sg.show.seasons - data season dict, Missing fields: 1\n[Python Unit Tests/macos  ]   | \n[Python Unit Tests/macos  ]   | ======================================================================\n[Python Unit Tests/macos  ]   | FAIL: test_show (webapi_tests.WebAPICase)\n[Python Unit Tests/macos  ]   | ----------------------------------------------------------------------\n[Python Unit Tests/macos  ]   | Traceback (most recent call last):\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/webapi_tests.py\", line 366, in test_show\n[Python Unit Tests/macos  ]   |     self._check_success_base_response(data, webapi.CMD_SickGearShow)\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/webapi_tests.py\", line 295, in _check_success_base_response\n[Python Unit Tests/macos  ]   |     self.assertEqual(data['result'], 'success')\n[Python Unit Tests/macos  ]   | AssertionError: 'fatal' != 'success'\n[Python Unit Tests/macos  ]   | - fatal\n[Python Unit Tests/macos  ]   | + success\n[Python Unit Tests/macos  ]   | \n[Python Unit Tests/macos  ]   | \n[Python Unit Tests/macos  ]   | ======================================================================\n[Python Unit Tests/macos  ]   | FAIL: test_show_stats (webapi_tests.WebAPICase)\n[Python Unit Tests/macos  ]   | ----------------------------------------------------------------------\n[Python Unit Tests/macos  ]   | Traceback (most recent call last):\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/webapi_tests.py\", line 628, in test_show_stats\n[Python Unit Tests/macos  ]   |     self._check_success_base_response(data, webapi.CMD_SickGearShowStats)\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/webapi_tests.py\", line 295, in _check_success_base_response\n[Python Unit Tests/macos  ]   |     self.assertEqual(data['result'], 'success')\n[Python Unit Tests/macos  ]   | AssertionError: 'fatal' != 'success'\n[Python Unit Tests/macos  ]   | - fatal\n[Python Unit Tests/macos  ]   | + success\n[Python Unit Tests/macos  ]   | \n[Python Unit Tests/macos  ]   | \n[Python Unit Tests/macos  ]   | ======================================================================\n[Python Unit Tests/macos  ]   | FAIL: test_shows_stats (webapi_tests.WebAPICase)\n[Python Unit Tests/macos  ]   | ----------------------------------------------------------------------\n[Python Unit Tests/macos  ]   | Traceback (most recent call last):\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/webapi_tests.py\", line 616, in test_shows_stats\n[Python Unit Tests/macos  ]   |     self._check_success_base_response(data, webapi.CMD_SickGearShowsStats)\n[Python Unit Tests/macos  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/webapi_tests.py\", line 295, in _check_success_base_response\n[Python Unit Tests/macos  ]   |     self.assertEqual(data['result'], 'success')\n[Python Unit Tests/macos  ]   | AssertionError: 'fatal' != 'success'\n[Python Unit Tests/macos  ]   | - fatal\n[Python Unit Tests/macos  ]   | + success\n[Python Unit Tests/macos  ]   | \n[Python Unit Tests/macos  ]   | \n[Python Unit Tests/macos  ]   | ----------------------------------------------------------------------\n[Python Unit Tests/macos  ]   | Ran 135 tests in 90.171s\n[Python Unit Tests/macos  ]   | \n[Python Unit Tests/macos  ]   | FAILED (failures=7, errors=35)\n[Python Unit Tests/windows]   | FAIL: test_get_scene_qualities (webapi_tests.WebAPICase)\n[Python Unit Tests/windows]   | ----------------------------------------------------------------------\n[Python Unit Tests/windows]   | Traceback (most recent call last):\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/webapi_tests.py\", line 586, in test_get_scene_qualities\n[Python Unit Tests/windows]   |     self._check_success_base_response(data, webapi.CMD_SickGearExceptions)\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/webapi_tests.py\", line 295, in _check_success_base_response\n[Python Unit Tests/windows]   |     self.assertEqual(data['result'], 'success')\n[Python Unit Tests/windows]   | AssertionError: 'fatal' != 'success'\n[Python Unit Tests/windows]   | - fatal\n[Python Unit Tests/windows]   | + success\n[Python Unit Tests/windows]   | \n[Python Unit Tests/windows]   | \n[Python Unit Tests/windows]   | ======================================================================\n[Python Unit Tests/windows]   | FAIL: test_seasons (webapi_tests.WebAPICase)\n[Python Unit Tests/windows]   | ----------------------------------------------------------------------\n[Python Unit Tests/windows]   | Traceback (most recent call last):\n[Python Unit Tests/windows]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/webapi_tests.py\", line 380, in test_seasons\n[Python Unit Tests/windows]   |     self.assertTrue(r, msg='Failed command: %s - data season dict%s' % (\n[Python Unit Tests/windows]   | AssertionError: False is not true : Failed command: sg.show.seasons - data season dict, Missing fields: 1\n[Python Unit Tests/windows]   | \n[Python Unit Tests/windows]   | ----------------------------------------------------------------------\n[Python Unit Tests/windows]   | Ran 135 tests in 101.513s\n[Python Unit Tests/windows]   | \n[Python Unit Tests/windows]   | FAILED (failures=3, errors=32)\n[Python Unit Tests/windows]   | \n[Python Unit Tests/windows]   | reset mock methods\n[Python Unit Tests/macos  ]   \u274c  Failure - Main Unit tests...\n[Python Unit Tests/windows]   \u274c  Failure - Main Unit tests...\n[Python Unit Tests/macos  ] exitcode '255': failure\n[Python Unit Tests/windows] exitcode '255': failure\n[Python Unit Tests/macos  ] \ud83c\udfc1  Job failed\n[Python Unit Tests/windows] \ud83c\udfc1  Job failed\n[Python Unit Tests/linux  ]   | ..........FF..F.F.F.F.FF.F.FE..FEEEFE.FFF..EEEEEEEEEEEEEEE....................................................................\n[Python Unit Tests/linux  ]   | ======================================================================\n[Python Unit Tests/linux  ]   | ERROR: test_process (pp_tests.PPBasicTests)\n[Python Unit Tests/linux  ]   | ----------------------------------------------------------------------\n[Python Unit Tests/linux  ]   | Traceback (most recent call last):\n[Python Unit Tests/linux  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 730, in migration_code\n[Python Unit Tests/linux  ]   |     db_version = update.execute()\n[Python Unit Tests/linux  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/databases/mainDB.py\", line 1769, in execute\n[Python Unit Tests/linux  ]   |     self.add_columns('tv_shows', [('timezone', 'TEXT', ''), ('airtime', 'NUMERIC'),\n[Python Unit Tests/linux  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 530, in add_columns\n[Python Unit Tests/linux  ]   |     self.connection.mass_action(sql)\n[Python Unit Tests/linux  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 216, in mass_action\n[Python Unit Tests/linux  ]   |     sql_result.append(cursor.execute(*tuple(cur_query)).fetchall())\n[Python Unit Tests/linux  ]   | sqlite3.OperationalError: duplicate column name: timezone\n[Python Unit Tests/linux  ]   | \n[Python Unit Tests/linux  ]   | During handling of the above exception, another exception occurred:\n[Python Unit Tests/linux  ]   | \n[Python Unit Tests/linux  ]   | Traceback (most recent call last):\n[Python Unit Tests/linux  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/test_lib.py\", line 137, in setUp\n[Python Unit Tests/linux  ]   |     setup_test_db()\n[Python Unit Tests/linux  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/test_lib.py\", line 195, in setup_test_db\n[Python Unit Tests/linux  ]   |     db.migration_code(db.DBConnection())\n[Python Unit Tests/linux  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 738, in migration_code\n[Python Unit Tests/linux  ]   |     logger.log_error_and_exit(f'Successfully restored database version: {db_version}')\n[Python Unit Tests/linux  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/logger.py\", line 427, in log_error_and_exit\n[Python Unit Tests/linux  ]   |     sb_log_instance.log_error_and_exit(error_msg)\n[Python Unit Tests/linux  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/logger.py\", line 241, in log_error_and_exit\n[Python Unit Tests/linux  ]   |     sys.exit(error_msg.encode(sickgear.SYS_ENCODING, 'xmlcharrefreplace'))\n[Python Unit Tests/linux  ]   | SystemExit: b'Successfully restored database version: 20014'\n[Python Unit Tests/linux  ]   | \n[Python Unit Tests/linux  ]   | ======================================================================\n[Python Unit Tests/linux  ]   | ERROR: test_extra_script (pp_tests.PPScriptTests)\n[Python Unit Tests/linux  ]   | ----------------------------------------------------------------------\n[Python Unit Tests/linux  ]   | Traceback (most recent call last):\n[Python Unit Tests/linux  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 730, in migration_code\n[Python Unit Tests/linux  ]   |     db_version = update.execute()\n[Python Unit Tests/linux  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/databases/mainDB.py\", line 382, in execute\n[Python Unit Tests/linux  ]   |     self.connection.action(query)\n[Python Unit Tests/linux  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 269, in action\n[Python Unit Tests/linux  ]   |     sql_result = self.connection.execute(query)\n[Python Unit Tests/linux  ]   | sqlite3.OperationalError: disk I/O error\n[Python Unit Tests/linux  ]   | \n[Python Unit Tests/linux  ]   | During handling of the above exception, another exception occurred:\n[Python Unit Tests/linux  ]   | \n[Python Unit Tests/linux  ]   | Traceback (most recent call last):\n[Python Unit Tests/linux  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/test_lib.py\", line 137, in setUp\n[Python Unit Tests/linux  ]   |     setup_test_db()\n[Python Unit Tests/linux  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/test_lib.py\", line 195, in setup_test_db\n[Python Unit Tests/linux  ]   |     db.migration_code(db.DBConnection())\n[Python Unit Tests/linux  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 736, in migration_code\n[Python Unit Tests/linux  ]   |     if _restore_database(my_db.filename, db_version):\n[Python Unit Tests/linux  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 441, in _restore_database\n[Python Unit Tests/linux  ]   |     logger.log_error_and_exit('Database restore failed, abort upgrading database')\n[Python Unit Tests/linux  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/logger.py\", line 427, in log_error_and_exit\n[Python Unit Tests/linux  ]   |     sb_log_instance.log_error_and_exit(error_msg)\n[Python Unit Tests/linux  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/logger.py\", line 241, in log_error_and_exit\n[Python Unit Tests/linux  ]   |     sys.exit(error_msg.encode(sickgear.SYS_ENCODING, 'xmlcharrefreplace'))\n[Python Unit Tests/linux  ]   | SystemExit: b'Database restore failed, abort upgrading database'\n[Python Unit Tests/linux  ]   | \n[Python Unit Tests/linux  ]   | ======================================================================\n[Python Unit Tests/linux  ]   | ERROR: test_browse_endpoints (tvinfo_api_tests.TVInfoTests)\n[Python Unit Tests/linux  ]   | ----------------------------------------------------------------------\n[Python Unit Tests/linux  ]   | Traceback (most recent call last):\n[Python Unit Tests/linux  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 730, in migration_code\n[Python Unit Tests/linux  ]   |     db_version = update.execute()\n[Python Unit Tests/linux  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/databases/mainDB.py\", line 382, in execute\n[Python Unit Tests/linux  ]   |     self.connection.action(query)\n[Python Unit Tests/linux  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 269, in action\n[Python Unit Tests/linux  ]   |     sql_result = self.connection.execute(query)\n[Python Unit Tests/linux  ]   | sqlite3.OperationalError: disk I/O error\n[Python Unit Tests/linux  ]   | \n[Python Unit Tests/linux  ]   | During handling of the above exception, another exception occurred:\n[Python Unit Tests/linux  ]   | \n[Python Unit Tests/linux  ]   | Traceback (most recent call last):\n[Python Unit Tests/linux  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/test_lib.py\", line 137, in setUp\n[Python Unit Tests/linux  ]   |     setup_test_db()\n[Python Unit Tests/linux  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/test_lib.py\", line 195, in setup_test_db\n[Python Unit Tests/linux  ]   |     db.migration_code(db.DBConnection())\n[Python Unit Tests/linux  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 736, in migration_code\n[Python Unit Tests/linux  ]   |     if _restore_database(my_db.filename, db_version):\n[Python Unit Tests/linux  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 441, in _restore_database\n[Python Unit Tests/linux  ]   |     logger.log_error_and_exit('Database restore failed, abort upgrading database')\n[Python Unit Tests/linux  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/logger.py\", line 427, in log_error_and_exit\n[Python Unit Tests/linux  ]   |     sb_log_instance.log_error_and_exit(error_msg)\n[Python Unit Tests/linux  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/logger.py\", line 241, in log_error_and_exit\n[Python Unit Tests/linux  ]   |     sys.exit(error_msg.encode(sickgear.SYS_ENCODING, 'xmlcharrefreplace'))\n[Python Unit Tests/linux  ]   | SystemExit: b'Database restore failed, abort upgrading database'\n[Python Unit Tests/linux  ]   | \n[Python Unit Tests/linux  ]   | ======================================================================\n[Python Unit Tests/linux  ]   | ERROR: test_person_search (tvinfo_api_tests.TVInfoTests)\n[Python Unit Tests/linux  ]   | ----------------------------------------------------------------------\n[Python Unit Tests/linux  ]   | Traceback (most recent call last):\n[Python Unit Tests/linux  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 730, in migration_code\n[Python Unit Tests/linux  ]   |     db_version = update.execute()\n[Python Unit Tests/linux  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/databases/mainDB.py\", line 1769, in execute\n[Python Unit Tests/linux  ]   |     self.add_columns('tv_shows', [('timezone', 'TEXT', ''), ('airtime', 'NUMERIC'),\n[Python Unit Tests/linux  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 530, in add_columns\n[Python Unit Tests/linux  ]   |     self.connection.mass_action(sql)\n[Python Unit Tests/linux  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 216, in mass_action\n[Python Unit Tests/linux  ]   |     sql_result.append(cursor.execute(*tuple(cur_query)).fetchall())\n[Python Unit Tests/linux  ]   | sqlite3.OperationalError: duplicate column name: timezone\n[Python Unit Tests/linux  ]   | \n[Python Unit Tests/linux  ]   | During handling of the above exception, another exception occurred:\n[Python Unit Tests/linux  ]   | \n[Python Unit Tests/linux  ]   | Traceback (most recent call last):\n[Python Unit Tests/linux  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/test_lib.py\", line 137, in setUp\n[Python Unit Tests/linux  ]   |     setup_test_db()\n[Python Unit Tests/linux  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/test_lib.py\", line 195, in setup_test_db\n[Python Unit Tests/linux  ]   |     db.migration_code(db.DBConnection())\n[Python Unit Tests/linux  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 738, in migration_code\n[Python Unit Tests/linux  ]   |     logger.log_error_and_exit(f'Successfully restored database version: {db_version}')\n[Python Unit Tests/linux  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/logger.py\", line 427, in log_error_and_exit\n[Python Unit Tests/linux  ]   |     sb_log_instance.log_error_and_exit(error_msg)\n[Python Unit Tests/linux  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/logger.py\", line 241, in log_error_and_exit\n[Python Unit Tests/linux  ]   |     sys.exit(error_msg.encode(sickgear.SYS_ENCODING, 'xmlcharrefreplace'))\n[Python Unit Tests/linux  ]   | SystemExit: b'Successfully restored database version: 20014'\n[Python Unit Tests/linux  ]   | \n[Python Unit Tests/linux  ]   | ======================================================================\n[Python Unit Tests/linux  ]   | ERROR: test_pause_show (webapi_tests.WebAPICase)\n[Python Unit Tests/linux  ]   | ----------------------------------------------------------------------\n[Python Unit Tests/linux  ]   | Traceback (most recent call last):\n[Python Unit Tests/linux  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/webapi_tests.py\", line 256, in tearDown\n[Python Unit Tests/linux  ]   |     show_obj.save_to_db()\n[Python Unit Tests/linux  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/tv.py\", line 3658, in save_to_db\n[Python Unit Tests/linux  ]   |     my_db.upsert('tv_shows', new_value_dict, control_value_dict)\n[Python Unit Tests/linux  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 307, in upsert\n[Python Unit Tests/linux  ]   |     self.action(query, list(value_dict.values()) + list(key_dict.values()))\n[Python Unit Tests/linux  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 272, in action\n[Python Unit Tests/linux  ]   |     sql_result = self.connection.execute(query, args)\n[Python Unit Tests/linux  ]   | sqlite3.OperationalError: no such table: tv_shows\n[Python Unit Tests/linux  ]   | \n[Python Unit Tests/linux  ]   | ======================================================================\n[Python Unit Tests/linux  ]   | ERROR: test_set_episode_status (webapi_tests.WebAPICase)\n[Python Unit Tests/linux  ]   | ----------------------------------------------------------------------\n[Python Unit Tests/linux  ]   | Traceback (most recent call last):\n[Python Unit Tests/linux  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/webapi_tests.py\", line 256, in tearDown\n[Python Unit Tests/linux  ]   |     show_obj.save_to_db()\n[Python Unit Tests/linux  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/tv.py\", line 3658, in save_to_db\n[Python Unit Tests/linux  ]   |     my_db.upsert('tv_shows', new_value_dict, control_value_dict)\n[Python Unit Tests/linux  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 307, in upsert\n[Python Unit Tests/linux  ]   |     self.action(query, list(value_dict.values()) + list(key_dict.values()))\n[Python Unit Tests/linux  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 272, in action\n[Python Unit Tests/linux  ]   |     sql_result = self.connection.execute(query, args)\n[Python Unit Tests/linux  ]   | sqlite3.OperationalError: no such table: tv_shows\n[Python Unit Tests/linux  ]   | \n[Python Unit Tests/linux  ]   | ======================================================================\n[Python Unit Tests/linux  ]   | ERROR: test_set_scene_numbering (webapi_tests.WebAPICase)\n[Python Unit Tests/linux  ]   | ----------------------------------------------------------------------\n[Python Unit Tests/linux  ]   | Traceback (most recent call last):\n[Python Unit Tests/linux  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/webapi_tests.py\", line 256, in tearDown\n[Python Unit Tests/linux  ]   |     show_obj.save_to_db()\n[Python Unit Tests/linux  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/tv.py\", line 3658, in save_to_db\n[Python Unit Tests/linux  ]   |     my_db.upsert('tv_shows', new_value_dict, control_value_dict)\n[Python Unit Tests/linux  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 307, in upsert\n[Python Unit Tests/linux  ]   |     self.action(query, list(value_dict.values()) + list(key_dict.values()))\n[Python Unit Tests/linux  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 272, in action\n[Python Unit Tests/linux  ]   |     sql_result = self.connection.execute(query, args)\n[Python Unit Tests/linux  ]   | sqlite3.OperationalError: no such table: tv_shows\n[Python Unit Tests/linux  ]   | \n[Python Unit Tests/linux  ]   | ======================================================================\n[Python Unit Tests/linux  ]   | ERROR: test_set_show_quality (webapi_tests.WebAPICase)\n[Python Unit Tests/linux  ]   | ----------------------------------------------------------------------\n[Python Unit Tests/linux  ]   | Traceback (most recent call last):\n[Python Unit Tests/linux  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/webapi_tests.py\", line 256, in tearDown\n[Python Unit Tests/linux  ]   |     show_obj.save_to_db()\n[Python Unit Tests/linux  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/tv.py\", line 3658, in save_to_db\n[Python Unit Tests/linux  ]   |     my_db.upsert('tv_shows', new_value_dict, control_value_dict)\n[Python Unit Tests/linux  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 307, in upsert\n[Python Unit Tests/linux  ]   |     self.action(query, list(value_dict.values()) + list(key_dict.values()))\n[Python Unit Tests/linux  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 272, in action\n[Python Unit Tests/linux  ]   |     sql_result = self.connection.execute(query, args)\n[Python Unit Tests/linux  ]   | sqlite3.OperationalError: no such table: tv_shows\n[Python Unit Tests/linux  ]   | \n[Python Unit Tests/linux  ]   | ======================================================================\n[Python Unit Tests/linux  ]   | ERROR: test_set_show_scene_numbers (webapi_tests.WebAPICase)\n[Python Unit Tests/linux  ]   | ----------------------------------------------------------------------\n[Python Unit Tests/linux  ]   | Traceback (most recent call last):\n[Python Unit Tests/linux  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/webapi_tests.py\", line 256, in tearDown\n[Python Unit Tests/linux  ]   |     show_obj.save_to_db()\n[Python Unit Tests/linux  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/tv.py\", line 3658, in save_to_db\n[Python Unit Tests/linux  ]   |     my_db.upsert('tv_shows', new_value_dict, control_value_dict)\n[Python Unit Tests/linux  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 307, in upsert\n[Python Unit Tests/linux  ]   |     self.action(query, list(value_dict.values()) + list(key_dict.values()))\n[Python Unit Tests/linux  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 272, in action\n[Python Unit Tests/linux  ]   |     sql_result = self.connection.execute(query, args)\n[Python Unit Tests/linux  ]   | sqlite3.OperationalError: no such table: tv_shows\n[Python Unit Tests/linux  ]   | \n[Python Unit Tests/linux  ]   | ======================================================================\n[Python Unit Tests/linux  ]   | ERROR: test_mass_action (db_tests.DBBasicTests)\n[Python Unit Tests/linux  ]   | ----------------------------------------------------------------------\n[Python Unit Tests/linux  ]   | Traceback (most recent call last):\n[Python Unit Tests/linux  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/db_tests.py\", line 59, in test_mass_action\n[Python Unit Tests/linux  ]   |     result = self.db.mass_action([\n[Python Unit Tests/linux  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 216, in mass_action\n[Python Unit Tests/linux  ]   |     sql_result.append(cursor.execute(*tuple(cur_query)).fetchall())\n[Python Unit Tests/linux  ]   | sqlite3.OperationalError: table tv_shows has no column named overview\n[Python Unit Tests/linux  ]   | \n[Python Unit Tests/linux  ]   | ======================================================================\n[Python Unit Tests/linux  ]   | ERROR: test_select (db_tests.DBBasicTests)\n[Python Unit Tests/linux  ]   | ----------------------------------------------------------------------\n[Python Unit Tests/linux  ]   | Traceback (most recent call last):\n[Python Unit Tests/linux  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 730, in migration_code\n[Python Unit Tests/linux  ]   |     db_version = update.execute()\n[Python Unit Tests/linux  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/databases/mainDB.py\", line 382, in execute\n[Python Unit Tests/linux  ]   |     self.connection.action(query)\n[Python Unit Tests/linux  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 269, in action\n[Python Unit Tests/linux  ]   |     sql_result = self.connection.execute(query)\n[Python Unit Tests/linux  ]   | sqlite3.OperationalError: disk I/O error\n[Python Unit Tests/linux  ]   | \n[Python Unit Tests/linux  ]   | During handling of the above exception, another exception occurred:\n[Python Unit Tests/linux  ]   | \n[Python Unit Tests/linux  ]   | Traceback (most recent call last):\n[Python Unit Tests/linux  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/db_tests.py\", line 28, in setUp\n[Python Unit Tests/linux  ]   |     super(DBBasicTests, self).setUp()\n[Python Unit Tests/linux  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/test_lib.py\", line 137, in setUp\n[Python Unit Tests/linux  ]   |     setup_test_db()\n[Python Unit Tests/linux  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/test_lib.py\", line 195, in setup_test_db\n[Python Unit Tests/linux  ]   |     db.migration_code(db.DBConnection())\n[Python Unit Tests/linux  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 736, in migration_code\n[Python Unit Tests/linux  ]   |     if _restore_database(my_db.filename, db_version):\n[Python Unit Tests/linux  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 441, in _restore_database\n[Python Unit Tests/linux  ]   |     logger.log_error_and_exit('Database restore failed, abort upgrading database')\n[Python Unit Tests/linux  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/logger.py\", line 427, in log_error_and_exit\n[Python Unit Tests/linux  ]   |     sb_log_instance.log_error_and_exit(error_msg)\n[Python Unit Tests/linux  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/logger.py\", line 241, in log_error_and_exit\n[Python Unit Tests/linux  ]   |     sys.exit(error_msg.encode(sickgear.SYS_ENCODING, 'xmlcharrefreplace'))\n[Python Unit Tests/linux  ]   | SystemExit: b'Database restore failed, abort upgrading database'\n[Python Unit Tests/linux  ]   | \n[Python Unit Tests/linux  ]   | ======================================================================\n[Python Unit Tests/linux  ]   | ERROR: test_webdl_type (search_tests.ProperTests)\n[Python Unit Tests/linux  ]   | ----------------------------------------------------------------------\n[Python Unit Tests/linux  ]   | Traceback (most recent call last):\n[Python Unit Tests/linux  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 730, in migration_code\n[Python Unit Tests/linux  ]   |     db_version = update.execute()\n[Python Unit Tests/linux  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/databases/mainDB.py\", line 382, in execute\n[Python Unit Tests/linux  ]   |     self.connection.action(query)\n[Python Unit Tests/linux  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 269, in action\n[Python Unit Tests/linux  ]   |     sql_result = self.connection.execute(query)\n[Python Unit Tests/linux  ]   | sqlite3.OperationalError: disk I/O error\n[Python Unit Tests/linux  ]   | \n[Python Unit Tests/linux  ]   | During handling of the above exception, another exception occurred:\n[Python Unit Tests/linux  ]   | \n[Python Unit Tests/linux  ]   | Traceback (most recent call last):\n[Python Unit Tests/linux  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/test_lib.py\", line 137, in setUp\n[Python Unit Tests/linux  ]   |     setup_test_db()\n[Python Unit Tests/linux  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/test_lib.py\", line 195, in setup_test_db\n[Python Unit Tests/linux  ]   |     db.migration_code(db.DBConnection())\n[Python Unit Tests/linux  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 738, in migration_code\n[Python Unit Tests/linux  ]   |     logger.log_error_and_exit(f'Successfully restored database version: {db_version}')\n[Python Unit Tests/linux  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/logger.py\", line 427, in log_error_and_exit\n[Python Unit Tests/linux  ]   |     sb_log_instance.log_error_and_exit(error_msg)\n[Python Unit Tests/linux  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/logger.py\", line 241, in log_error_and_exit\n[Python Unit Tests/linux  ]   |     sys.exit(error_msg.encode(sickgear.SYS_ENCODING, 'xmlcharrefreplace'))\n[Python Unit Tests/linux  ]   | SystemExit: b'Successfully restored database version: 0'\n[Python Unit Tests/linux  ]   | \n[Python Unit Tests/linux  ]   | ======================================================================\n[Python Unit Tests/linux  ]   | ERROR: test_sceneExceptionByName (scene_helpers_tests.SceneExceptionTestCase)\n[Python Unit Tests/linux  ]   | ----------------------------------------------------------------------\n[Python Unit Tests/linux  ]   | Traceback (most recent call last):\n[Python Unit Tests/linux  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/scene_helpers_tests.py\", line 76, in setUp\n[Python Unit Tests/linux  ]   |     sickgear.webserve.Home.make_showlist_unique_names()\n[Python Unit Tests/linux  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/webserve.py\", line 2490, in make_showlist_unique_names\n[Python Unit Tests/linux  ]   |     first_ep = sorted_show_list[dups[val.name]].first_aired_regular_episode\n[Python Unit Tests/linux  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/tv.py\", line 1392, in first_aired_regular_episode\n[Python Unit Tests/linux  ]   |     return self._get_end_episode(exclude_specials=True)\n[Python Unit Tests/linux  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/tv.py\", line 1371, in _get_end_episode\n[Python Unit Tests/linux  ]   |     eps = self.get_all_episodes()\n[Python Unit Tests/linux  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/tv.py\", line 1717, in get_all_episodes\n[Python Unit Tests/linux  ]   |     sql_result = my_db.select(sql_selection, sql_parameter)\n[Python Unit Tests/linux  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 289, in select\n[Python Unit Tests/linux  ]   |     sql_results = self.action(query, args).fetchall()\n[Python Unit Tests/linux  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 272, in action\n[Python Unit Tests/linux  ]   |     sql_result = self.connection.execute(query, args)\n[Python Unit Tests/linux  ]   | sqlite3.OperationalError: no such table: tv_episodes\n[Python Unit Tests/linux  ]   | \n[Python Unit Tests/linux  ]   | ======================================================================\n[Python Unit Tests/linux  ]   | ERROR: test_sceneExceptionByNameAnime (scene_helpers_tests.SceneExceptionTestCase)\n[Python Unit Tests/linux  ]   | ----------------------------------------------------------------------\n[Python Unit Tests/linux  ]   | Traceback (most recent call last):\n[Python Unit Tests/linux  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 730, in migration_code\n[Python Unit Tests/linux  ]   |     db_version = update.execute()\n[Python Unit Tests/linux  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/databases/mainDB.py\", line 382, in execute\n[Python Unit Tests/linux  ]   |     self.connection.action(query)\n[Python Unit Tests/linux  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 269, in action\n[Python Unit Tests/linux  ]   |     sql_result = self.connection.execute(query)\n[Python Unit Tests/linux  ]   | sqlite3.OperationalError: table allowlist already exists\n[Python Unit Tests/linux  ]   | \n[Python Unit Tests/linux  ]   | During handling of the above exception, another exception occurred:\n[Python Unit Tests/linux  ]   | \n[Python Unit Tests/linux  ]   | Traceback (most recent call last):\n[Python Unit Tests/linux  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/scene_helpers_tests.py\", line 69, in setUp\n[Python Unit Tests/linux  ]   |     super(SceneExceptionTestCase, self).setUp()\n[Python Unit Tests/linux  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/test_lib.py\", line 137, in setUp\n[Python Unit Tests/linux  ]   |     setup_test_db()\n[Python Unit Tests/linux  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/test_lib.py\", line 195, in setup_test_db\n[Python Unit Tests/linux  ]   |     db.migration_code(db.DBConnection())\n[Python Unit Tests/linux  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 738, in migration_code\n[Python Unit Tests/linux  ]   |     logger.log_error_and_exit(f'Successfully restored database version: {db_version}')\n[Python Unit Tests/linux  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/logger.py\", line 427, in log_error_and_exit\n[Python Unit Tests/linux  ]   |     sb_log_instance.log_error_and_exit(error_msg)\n[Python Unit Tests/linux  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/logger.py\", line 241, in log_error_and_exit\n[Python Unit Tests/linux  ]   |     sys.exit(error_msg.encode(sickgear.SYS_ENCODING, 'xmlcharrefreplace'))\n[Python Unit Tests/linux  ]   | SystemExit: b'Successfully restored database version: 0'\n[Python Unit Tests/linux  ]   | \n[Python Unit Tests/linux  ]   | ======================================================================\n[Python Unit Tests/linux  ]   | ERROR: test_sceneExceptionByNameEmpty (scene_helpers_tests.SceneExceptionTestCase)\n[Python Unit Tests/linux  ]   | ----------------------------------------------------------------------\n[Python Unit Tests/linux  ]   | Traceback (most recent call last):\n[Python Unit Tests/linux  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 730, in migration_code\n[Python Unit Tests/linux  ]   |     db_version = update.execute()\n[Python Unit Tests/linux  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/databases/mainDB.py\", line 382, in execute\n[Python Unit Tests/linux  ]   |     self.connection.action(query)\n[Python Unit Tests/linux  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 269, in action\n[Python Unit Tests/linux  ]   |     sql_result = self.connection.execute(query)\n[Python Unit Tests/linux  ]   | sqlite3.OperationalError: attempt to write a readonly database\n[Python Unit Tests/linux  ]   | \n[Python Unit Tests/linux  ]   | During handling of the above exception, another exception occurred:\n[Python Unit Tests/linux  ]   | \n[Python Unit Tests/linux  ]   | Traceback (most recent call last):\n[Python Unit Tests/linux  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/scene_helpers_tests.py\", line 69, in setUp\n[Python Unit Tests/linux  ]   |     super(SceneExceptionTestCase, self).setUp()\n[Python Unit Tests/linux  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/test_lib.py\", line 137, in setUp\n[Python Unit Tests/linux  ]   |     setup_test_db()\n[Python Unit Tests/linux  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/test_lib.py\", line 195, in setup_test_db\n[Python Unit Tests/linux  ]   |     db.migration_code(db.DBConnection())\n[Python Unit Tests/linux  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 736, in migration_code\n[Python Unit Tests/linux  ]   |     if _restore_database(my_db.filename, db_version):\n[Python Unit Tests/linux  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 441, in _restore_database\n[Python Unit Tests/linux  ]   |     logger.log_error_and_exit('Database restore failed, abort upgrading database')\n[Python Unit Tests/linux  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/logger.py\", line 427, in log_error_and_exit\n[Python Unit Tests/linux  ]   |     sb_log_instance.log_error_and_exit(error_msg)\n[Python Unit Tests/linux  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/logger.py\", line 241, in log_error_and_exit\n[Python Unit Tests/linux  ]   |     sys.exit(error_msg.encode(sickgear.SYS_ENCODING, 'xmlcharrefreplace'))\n[Python Unit Tests/linux  ]   | SystemExit: b'Database restore failed, abort upgrading database'\n[Python Unit Tests/linux  ]   | \n[Python Unit Tests/linux  ]   | ======================================================================\n[Python Unit Tests/linux  ]   | ERROR: test_sceneExceptionsBlack_Lagoon (scene_helpers_tests.SceneExceptionTestCase)\n[Python Unit Tests/linux  ]   | ----------------------------------------------------------------------\n[Python Unit Tests/linux  ]   | Traceback (most recent call last):\n[Python Unit Tests/linux  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 730, in migration_code\n[Python Unit Tests/linux  ]   |     db_version = update.execute()\n[Python Unit Tests/linux  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/databases/mainDB.py\", line 382, in execute\n[Python Unit Tests/linux  ]   |     self.connection.action(query)\n[Python Unit Tests/linux  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 269, in action\n[Python Unit Tests/linux  ]   |     sql_result = self.connection.execute(query)\n[Python Unit Tests/linux  ]   | sqlite3.OperationalError: disk I/O error\n[Python Unit Tests/linux  ]   | \n[Python Unit Tests/linux  ]   | During handling of the above exception, another exception occurred:\n[Python Unit Tests/linux  ]   | \n[Python Unit Tests/linux  ]   | Traceback (most recent call last):\n[Python Unit Tests/linux  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/scene_helpers_tests.py\", line 69, in setUp\n[Python Unit Tests/linux  ]   |     super(SceneExceptionTestCase, self).setUp()\n[Python Unit Tests/linux  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/test_lib.py\", line 137, in setUp\n[Python Unit Tests/linux  ]   |     setup_test_db()\n[Python Unit Tests/linux  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/test_lib.py\", line 195, in setup_test_db\n[Python Unit Tests/linux  ]   |     db.migration_code(db.DBConnection())\n[Python Unit Tests/linux  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 738, in migration_code\n[Python Unit Tests/linux  ]   |     logger.log_error_and_exit(f'Successfully restored database version: {db_version}')\n[Python Unit Tests/linux  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/logger.py\", line 427, in log_error_and_exit\n[Python Unit Tests/linux  ]   |     sb_log_instance.log_error_and_exit(error_msg)\n[Python Unit Tests/linux  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/logger.py\", line 241, in log_error_and_exit\n[Python Unit Tests/linux  ]   |     sys.exit(error_msg.encode(sickgear.SYS_ENCODING, 'xmlcharrefreplace'))\n[Python Unit Tests/linux  ]   | SystemExit: b'Successfully restored database version: 0'\n[Python Unit Tests/linux  ]   | \n[Python Unit Tests/linux  ]   | ======================================================================\n[Python Unit Tests/linux  ]   | ERROR: test_sceneExceptionsEmpty (scene_helpers_tests.SceneExceptionTestCase)\n[Python Unit Tests/linux  ]   | ----------------------------------------------------------------------\n[Python Unit Tests/linux  ]   | Traceback (most recent call last):\n[Python Unit Tests/linux  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 730, in migration_code\n[Python Unit Tests/linux  ]   |     db_version = update.execute()\n[Python Unit Tests/linux  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/databases/mainDB.py\", line 382, in execute\n[Python Unit Tests/linux  ]   |     self.connection.action(query)\n[Python Unit Tests/linux  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 269, in action\n[Python Unit Tests/linux  ]   |     sql_result = self.connection.execute(query)\n[Python Unit Tests/linux  ]   | sqlite3.OperationalError: disk I/O error\n[Python Unit Tests/linux  ]   | \n[Python Unit Tests/linux  ]   | During handling of the above exception, another exception occurred:\n[Python Unit Tests/linux  ]   | \n[Python Unit Tests/linux  ]   | Traceback (most recent call last):\n[Python Unit Tests/linux  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/scene_helpers_tests.py\", line 69, in setUp\n[Python Unit Tests/linux  ]   |     super(SceneExceptionTestCase, self).setUp()\n[Python Unit Tests/linux  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/test_lib.py\", line 137, in setUp\n[Python Unit Tests/linux  ]   |     setup_test_db()\n[Python Unit Tests/linux  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/test_lib.py\", line 195, in setup_test_db\n[Python Unit Tests/linux  ]   |     db.migration_code(db.DBConnection())\n[Python Unit Tests/linux  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 736, in migration_code\n[Python Unit Tests/linux  ]   |     if _restore_database(my_db.filename, db_version):\n[Python Unit Tests/linux  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 441, in _restore_database\n[Python Unit Tests/linux  ]   |     logger.log_error_and_exit('Database restore failed, abort upgrading database')\n[Python Unit Tests/linux  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/logger.py\", line 427, in log_error_and_exit\n[Python Unit Tests/linux  ]   |     sb_log_instance.log_error_and_exit(error_msg)\n[Python Unit Tests/linux  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/logger.py\", line 241, in log_error_and_exit\n[Python Unit Tests/linux  ]   |     sys.exit(error_msg.encode(sickgear.SYS_ENCODING, 'xmlcharrefreplace'))\n[Python Unit Tests/linux  ]   | SystemExit: b'Database restore failed, abort upgrading database'\n[Python Unit Tests/linux  ]   | \n[Python Unit Tests/linux  ]   | ======================================================================\n[Python Unit Tests/linux  ]   | ERROR: test_sceneExceptionsResetNameCache (scene_helpers_tests.SceneExceptionTestCase)\n[Python Unit Tests/linux  ]   | ----------------------------------------------------------------------\n[Python Unit Tests/linux  ]   | Traceback (most recent call last):\n[Python Unit Tests/linux  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 730, in migration_code\n[Python Unit Tests/linux  ]   |     db_version = update.execute()\n[Python Unit Tests/linux  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/databases/mainDB.py\", line 382, in execute\n[Python Unit Tests/linux  ]   |     self.connection.action(query)\n[Python Unit Tests/linux  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 269, in action\n[Python Unit Tests/linux  ]   |     sql_result = self.connection.execute(query)\n[Python Unit Tests/linux  ]   | sqlite3.OperationalError: table allowlist already exists\n[Python Unit Tests/linux  ]   | \n[Python Unit Tests/linux  ]   | During handling of the above exception, another exception occurred:\n[Python Unit Tests/linux  ]   | \n[Python Unit Tests/linux  ]   | Traceback (most recent call last):\n[Python Unit Tests/linux  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/scene_helpers_tests.py\", line 69, in setUp\n[Python Unit Tests/linux  ]   |     super(SceneExceptionTestCase, self).setUp()\n[Python Unit Tests/linux  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/test_lib.py\", line 137, in setUp\n[Python Unit Tests/linux  ]   |     setup_test_db()\n[Python Unit Tests/linux  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/test_lib.py\", line 195, in setup_test_db\n[Python Unit Tests/linux  ]   |     db.migration_code(db.DBConnection())\n[Python Unit Tests/linux  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 738, in migration_code\n[Python Unit Tests/linux  ]   |     logger.log_error_and_exit(f'Successfully restored database version: {db_version}')\n[Python Unit Tests/linux  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/logger.py\", line 427, in log_error_and_exit\n[Python Unit Tests/linux  ]   |     sb_log_instance.log_error_and_exit(error_msg)\n[Python Unit Tests/linux  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/logger.py\", line 241, in log_error_and_exit\n[Python Unit Tests/linux  ]   |     sys.exit(error_msg.encode(sickgear.SYS_ENCODING, 'xmlcharrefreplace'))\n[Python Unit Tests/linux  ]   | SystemExit: b'Successfully restored database version: 0'\n[Python Unit Tests/linux  ]   | \n[Python Unit Tests/linux  ]   | ======================================================================\n[Python Unit Tests/linux  ]   | ERROR: test_allPossibleShowNames (scene_helpers_tests.SceneTests)\n[Python Unit Tests/linux  ]   | ----------------------------------------------------------------------\n[Python Unit Tests/linux  ]   | Traceback (most recent call last):\n[Python Unit Tests/linux  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 730, in migration_code\n[Python Unit Tests/linux  ]   |     db_version = update.execute()\n[Python Unit Tests/linux  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/databases/mainDB.py\", line 382, in execute\n[Python Unit Tests/linux  ]   |     self.connection.action(query)\n[Python Unit Tests/linux  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 269, in action\n[Python Unit Tests/linux  ]   |     sql_result = self.connection.execute(query)\n[Python Unit Tests/linux  ]   | sqlite3.OperationalError: disk I/O error\n[Python Unit Tests/linux  ]   | \n[Python Unit Tests/linux  ]   | During handling of the above exception, another exception occurred:\n[Python Unit Tests/linux  ]   | \n[Python Unit Tests/linux  ]   | Traceback (most recent call last):\n[Python Unit Tests/linux  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/test_lib.py\", line 137, in setUp\n[Python Unit Tests/linux  ]   |     setup_test_db()\n[Python Unit Tests/linux  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/test_lib.py\", line 195, in setup_test_db\n[Python Unit Tests/linux  ]   |     db.migration_code(db.DBConnection())\n[Python Unit Tests/linux  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 736, in migration_code\n[Python Unit Tests/linux  ]   |     if _restore_database(my_db.filename, db_version):\n[Python Unit Tests/linux  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 441, in _restore_database\n[Python Unit Tests/linux  ]   |     logger.log_error_and_exit('Database restore failed, abort upgrading database')\n[Python Unit Tests/linux  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/logger.py\", line 427, in log_error_and_exit\n[Python Unit Tests/linux  ]   |     sb_log_instance.log_error_and_exit(error_msg)\n[Python Unit Tests/linux  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/logger.py\", line 241, in log_error_and_exit\n[Python Unit Tests/linux  ]   |     sys.exit(error_msg.encode(sickgear.SYS_ENCODING, 'xmlcharrefreplace'))\n[Python Unit Tests/linux  ]   | SystemExit: b'Database restore failed, abort upgrading database'\n[Python Unit Tests/linux  ]   | \n[Python Unit Tests/linux  ]   | ======================================================================\n[Python Unit Tests/linux  ]   | ERROR: test_pass_wordlist_checks (scene_helpers_tests.SceneTests)\n[Python Unit Tests/linux  ]   | ----------------------------------------------------------------------\n[Python Unit Tests/linux  ]   | Traceback (most recent call last):\n[Python Unit Tests/linux  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 730, in migration_code\n[Python Unit Tests/linux  ]   |     db_version = update.execute()\n[Python Unit Tests/linux  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/databases/mainDB.py\", line 382, in execute\n[Python Unit Tests/linux  ]   |     self.connection.action(query)\n[Python Unit Tests/linux  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 269, in action\n[Python Unit Tests/linux  ]   |     sql_result = self.connection.execute(query)\n[Python Unit Tests/linux  ]   | sqlite3.OperationalError: table allowlist already exists\n[Python Unit Tests/linux  ]   | \n[Python Unit Tests/linux  ]   | During handling of the above exception, another exception occurred:\n[Python Unit Tests/linux  ]   | \n[Python Unit Tests/linux  ]   | Traceback (most recent call last):\n[Python Unit Tests/linux  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/test_lib.py\", line 137, in setUp\n[Python Unit Tests/linux  ]   |     setup_test_db()\n[Python Unit Tests/linux  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/test_lib.py\", line 195, in setup_test_db\n[Python Unit Tests/linux  ]   |     db.migration_code(db.DBConnection())\n[Python Unit Tests/linux  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 738, in migration_code\n[Python Unit Tests/linux  ]   |     logger.log_error_and_exit(f'Successfully restored database version: {db_version}')\n[Python Unit Tests/linux  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/logger.py\", line 427, in log_error_and_exit\n[Python Unit Tests/linux  ]   |     sb_log_instance.log_error_and_exit(error_msg)\n[Python Unit Tests/linux  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/logger.py\", line 241, in log_error_and_exit\n[Python Unit Tests/linux  ]   |     sys.exit(error_msg.encode(sickgear.SYS_ENCODING, 'xmlcharrefreplace'))\n[Python Unit Tests/linux  ]   | SystemExit: b'Successfully restored database version: 0'\n[Python Unit Tests/linux  ]   | \n[Python Unit Tests/linux  ]   | ======================================================================\n[Python Unit Tests/linux  ]   | ERROR: test_formating (xem_tests.XEMBasicTests)\n[Python Unit Tests/linux  ]   | ----------------------------------------------------------------------\n[Python Unit Tests/linux  ]   | Traceback (most recent call last):\n[Python Unit Tests/linux  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 730, in migration_code\n[Python Unit Tests/linux  ]   |     db_version = update.execute()\n[Python Unit Tests/linux  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/databases/mainDB.py\", line 382, in execute\n[Python Unit Tests/linux  ]   |     self.connection.action(query)\n[Python Unit Tests/linux  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 269, in action\n[Python Unit Tests/linux  ]   |     sql_result = self.connection.execute(query)\n[Python Unit Tests/linux  ]   | sqlite3.OperationalError: disk I/O error\n[Python Unit Tests/linux  ]   | \n[Python Unit Tests/linux  ]   | During handling of the above exception, another exception occurred:\n[Python Unit Tests/linux  ]   | \n[Python Unit Tests/linux  ]   | Traceback (most recent call last):\n[Python Unit Tests/linux  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/test_lib.py\", line 137, in setUp\n[Python Unit Tests/linux  ]   |     setup_test_db()\n[Python Unit Tests/linux  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/test_lib.py\", line 195, in setup_test_db\n[Python Unit Tests/linux  ]   |     db.migration_code(db.DBConnection())\n[Python Unit Tests/linux  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 738, in migration_code\n[Python Unit Tests/linux  ]   |     logger.log_error_and_exit(f'Successfully restored database version: {db_version}')\n[Python Unit Tests/linux  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/logger.py\", line 427, in log_error_and_exit\n[Python Unit Tests/linux  ]   |     sb_log_instance.log_error_and_exit(error_msg)\n[Python Unit Tests/linux  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/logger.py\", line 241, in log_error_and_exit\n[Python Unit Tests/linux  ]   |     sys.exit(error_msg.encode(sickgear.SYS_ENCODING, 'xmlcharrefreplace'))\n[Python Unit Tests/linux  ]   | SystemExit: b'Successfully restored database version: 0'\n[Python Unit Tests/linux  ]   | \n[Python Unit Tests/linux  ]   | ======================================================================\n[Python Unit Tests/linux  ]   | ERROR: test_get_size_uid (newznab_tests.BasicTests)\n[Python Unit Tests/linux  ]   | ----------------------------------------------------------------------\n[Python Unit Tests/linux  ]   | Traceback (most recent call last):\n[Python Unit Tests/linux  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 730, in migration_code\n[Python Unit Tests/linux  ]   |     db_version = update.execute()\n[Python Unit Tests/linux  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/databases/mainDB.py\", line 382, in execute\n[Python Unit Tests/linux  ]   |     self.connection.action(query)\n[Python Unit Tests/linux  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 269, in action\n[Python Unit Tests/linux  ]   |     sql_result = self.connection.execute(query)\n[Python Unit Tests/linux  ]   | sqlite3.OperationalError: disk I/O error\n[Python Unit Tests/linux  ]   | \n[Python Unit Tests/linux  ]   | During handling of the above exception, another exception occurred:\n[Python Unit Tests/linux  ]   | \n[Python Unit Tests/linux  ]   | Traceback (most recent call last):\n[Python Unit Tests/linux  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/test_lib.py\", line 137, in setUp\n[Python Unit Tests/linux  ]   |     setup_test_db()\n[Python Unit Tests/linux  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/test_lib.py\", line 195, in setup_test_db\n[Python Unit Tests/linux  ]   |     db.migration_code(db.DBConnection())\n[Python Unit Tests/linux  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 738, in migration_code\n[Python Unit Tests/linux  ]   |     logger.log_error_and_exit(f'Successfully restored database version: {db_version}')\n[Python Unit Tests/linux  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/logger.py\", line 427, in log_error_and_exit\n[Python Unit Tests/linux  ]   |     sb_log_instance.log_error_and_exit(error_msg)\n[Python Unit Tests/linux  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/logger.py\", line 241, in log_error_and_exit\n[Python Unit Tests/linux  ]   |     sys.exit(error_msg.encode(sickgear.SYS_ENCODING, 'xmlcharrefreplace'))\n[Python Unit Tests/linux  ]   | SystemExit: b'Successfully restored database version: 0'\n[Python Unit Tests/linux  ]   | \n[Python Unit Tests/linux  ]   | ======================================================================\n[Python Unit Tests/linux  ]   | ERROR: test_parse_ids (newznab_tests.BasicTests)\n[Python Unit Tests/linux  ]   | ----------------------------------------------------------------------\n[Python Unit Tests/linux  ]   | Traceback (most recent call last):\n[Python Unit Tests/linux  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 730, in migration_code\n[Python Unit Tests/linux  ]   |     db_version = update.execute()\n[Python Unit Tests/linux  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/databases/mainDB.py\", line 382, in execute\n[Python Unit Tests/linux  ]   |     self.connection.action(query)\n[Python Unit Tests/linux  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 269, in action\n[Python Unit Tests/linux  ]   |     sql_result = self.connection.execute(query)\n[Python Unit Tests/linux  ]   | sqlite3.OperationalError: attempt to write a readonly database\n[Python Unit Tests/linux  ]   | \n[Python Unit Tests/linux  ]   | During handling of the above exception, another exception occurred:\n[Python Unit Tests/linux  ]   | \n[Python Unit Tests/linux  ]   | Traceback (most recent call last):\n[Python Unit Tests/linux  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/test_lib.py\", line 137, in setUp\n[Python Unit Tests/linux  ]   |     setup_test_db()\n[Python Unit Tests/linux  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/test_lib.py\", line 195, in setup_test_db\n[Python Unit Tests/linux  ]   |     db.migration_code(db.DBConnection())\n[Python Unit Tests/linux  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 738, in migration_code\n[Python Unit Tests/linux  ]   |     logger.log_error_and_exit(f'Successfully restored database version: {db_version}')\n[Python Unit Tests/linux  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/logger.py\", line 427, in log_error_and_exit\n[Python Unit Tests/linux  ]   |     sb_log_instance.log_error_and_exit(error_msg)\n[Python Unit Tests/linux  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/logger.py\", line 241, in log_error_and_exit\n[Python Unit Tests/linux  ]   |     sys.exit(error_msg.encode(sickgear.SYS_ENCODING, 'xmlcharrefreplace'))\n[Python Unit Tests/linux  ]   | SystemExit: b'Successfully restored database version: 0'\n[Python Unit Tests/linux  ]   | \n[Python Unit Tests/linux  ]   | ======================================================================\n[Python Unit Tests/linux  ]   | ERROR: test_parse_pub_date (newznab_tests.BasicTests)\n[Python Unit Tests/linux  ]   | ----------------------------------------------------------------------\n[Python Unit Tests/linux  ]   | Traceback (most recent call last):\n[Python Unit Tests/linux  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 730, in migration_code\n[Python Unit Tests/linux  ]   |     db_version = update.execute()\n[Python Unit Tests/linux  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/databases/mainDB.py\", line 382, in execute\n[Python Unit Tests/linux  ]   |     self.connection.action(query)\n[Python Unit Tests/linux  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 269, in action\n[Python Unit Tests/linux  ]   |     sql_result = self.connection.execute(query)\n[Python Unit Tests/linux  ]   | sqlite3.OperationalError: disk I/O error\n[Python Unit Tests/linux  ]   | \n[Python Unit Tests/linux  ]   | During handling of the above exception, another exception occurred:\n[Python Unit Tests/linux  ]   | \n[Python Unit Tests/linux  ]   | Traceback (most recent call last):\n[Python Unit Tests/linux  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/test_lib.py\", line 137, in setUp\n[Python Unit Tests/linux  ]   |     setup_test_db()\n[Python Unit Tests/linux  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/test_lib.py\", line 195, in setup_test_db\n[Python Unit Tests/linux  ]   |     db.migration_code(db.DBConnection())\n[Python Unit Tests/linux  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 736, in migration_code\n[Python Unit Tests/linux  ]   |     if _restore_database(my_db.filename, db_version):\n[Python Unit Tests/linux  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/db.py\", line 441, in _restore_database\n[Python Unit Tests/linux  ]   |     logger.log_error_and_exit('Database restore failed, abort upgrading database')\n[Python Unit Tests/linux  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/logger.py\", line 427, in log_error_and_exit\n[Python Unit Tests/linux  ]   |     sb_log_instance.log_error_and_exit(error_msg)\n[Python Unit Tests/linux  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/sickgear/logger.py\", line 241, in log_error_and_exit\n[Python Unit Tests/linux  ]   |     sys.exit(error_msg.encode(sickgear.SYS_ENCODING, 'xmlcharrefreplace'))\n[Python Unit Tests/linux  ]   | SystemExit: b'Database restore failed, abort upgrading database'\n[Python Unit Tests/linux  ]   | \n[Python Unit Tests/linux  ]   | ======================================================================\n[Python Unit Tests/linux  ]   | FAIL: test_all_shows (webapi_tests.WebAPICase)\n[Python Unit Tests/linux  ]   | ----------------------------------------------------------------------\n[Python Unit Tests/linux  ]   | Traceback (most recent call last):\n[Python Unit Tests/linux  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/webapi_tests.py\", line 413, in test_all_shows\n[Python Unit Tests/linux  ]   |     self._check_success_base_response(data, webapi.CMD_SickGearShows)\n[Python Unit Tests/linux  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/webapi_tests.py\", line 295, in _check_success_base_response\n[Python Unit Tests/linux  ]   |     self.assertEqual(data['result'], 'success')\n[Python Unit Tests/linux  ]   | AssertionError: 'fatal' != 'success'\n[Python Unit Tests/linux  ]   | - fatal\n[Python Unit Tests/linux  ]   | + success\n[Python Unit Tests/linux  ]   | \n[Python Unit Tests/linux  ]   | \n[Python Unit Tests/linux  ]   | ======================================================================\n[Python Unit Tests/linux  ]   | FAIL: test_coming_episodes (webapi_tests.WebAPICase)\n[Python Unit Tests/linux  ]   | ----------------------------------------------------------------------\n[Python Unit Tests/linux  ]   | Traceback (most recent call last):\n[Python Unit Tests/linux  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/webapi_tests.py\", line 386, in test_coming_episodes\n[Python Unit Tests/linux  ]   |     self._check_success_base_response(data, webapi.CMD_SickGearComingEpisodes)\n[Python Unit Tests/linux  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/webapi_tests.py\", line 295, in _check_success_base_response\n[Python Unit Tests/linux  ]   |     self.assertEqual(data['result'], 'success')\n[Python Unit Tests/linux  ]   | AssertionError: 'fatal' != 'success'\n[Python Unit Tests/linux  ]   | - fatal\n[Python Unit Tests/linux  ]   | + success\n[Python Unit Tests/linux  ]   | \n[Python Unit Tests/linux  ]   | \n[Python Unit Tests/linux  ]   | ======================================================================\n[Python Unit Tests/linux  ]   | FAIL: test_episode (webapi_tests.WebAPICase)\n[Python Unit Tests/linux  ]   | ----------------------------------------------------------------------\n[Python Unit Tests/linux  ]   | Traceback (most recent call last):\n[Python Unit Tests/linux  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/webapi_tests.py\", line 424, in test_episode\n[Python Unit Tests/linux  ]   |     self.assertEqual(data['result'], 'error')\n[Python Unit Tests/linux  ]   | AssertionError: 'fatal' != 'error'\n[Python Unit Tests/linux  ]   | - fatal\n[Python Unit Tests/linux  ]   | + error\n[Python Unit Tests/linux  ]   | \n[Python Unit Tests/linux  ]   | \n[Python Unit Tests/linux  ]   | ======================================================================\n[Python Unit Tests/linux  ]   | FAIL: test_get_episodelist (webapi_tests.WebAPICase)\n[Python Unit Tests/linux  ]   | ----------------------------------------------------------------------\n[Python Unit Tests/linux  ]   | Traceback (most recent call last):\n[Python Unit Tests/linux  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/webapi_tests.py\", line 494, in test_get_episodelist\n[Python Unit Tests/linux  ]   |     self._check_success_base_response(data, webapi.CMD_SickGearShowSeasons)\n[Python Unit Tests/linux  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/webapi_tests.py\", line 295, in _check_success_base_response\n[Python Unit Tests/linux  ]   |     self.assertEqual(data['result'], 'success')\n[Python Unit Tests/linux  ]   | AssertionError: 'fatal' != 'success'\n[Python Unit Tests/linux  ]   | - fatal\n[Python Unit Tests/linux  ]   | + success\n[Python Unit Tests/linux  ]   | \n[Python Unit Tests/linux  ]   | \n[Python Unit Tests/linux  ]   | ======================================================================\n[Python Unit Tests/linux  ]   | FAIL: test_get_ignore_words (webapi_tests.WebAPICase)\n[Python Unit Tests/linux  ]   | ----------------------------------------------------------------------\n[Python Unit Tests/linux  ]   | Traceback (most recent call last):\n[Python Unit Tests/linux  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/webapi_tests.py\", line 540, in test_get_ignore_words\n[Python Unit Tests/linux  ]   |     self._check_success_base_response(data, webapi.CMD_SickGearListIgnoreWords,\n[Python Unit Tests/linux  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/webapi_tests.py\", line 295, in _check_success_base_response\n[Python Unit Tests/linux  ]   |     self.assertEqual(data['result'], 'success')\n[Python Unit Tests/linux  ]   | AssertionError: 'fatal' != 'success'\n[Python Unit Tests/linux  ]   | - fatal\n[Python Unit Tests/linux  ]   | + success\n[Python Unit Tests/linux  ]   | \n[Python Unit Tests/linux  ]   | \n[Python Unit Tests/linux  ]   | ======================================================================\n[Python Unit Tests/linux  ]   | FAIL: test_get_require_words (webapi_tests.WebAPICase)\n[Python Unit Tests/linux  ]   | ----------------------------------------------------------------------\n[Python Unit Tests/linux  ]   | Traceback (most recent call last):\n[Python Unit Tests/linux  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/webapi_tests.py\", line 519, in test_get_require_words\n[Python Unit Tests/linux  ]   |     self._check_success_base_response(data, webapi.CMD_SickGearListRequireWords,\n[Python Unit Tests/linux  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/webapi_tests.py\", line 295, in _check_success_base_response\n[Python Unit Tests/linux  ]   |     self.assertEqual(data['result'], 'success')\n[Python Unit Tests/linux  ]   | AssertionError: 'fatal' != 'success'\n[Python Unit Tests/linux  ]   | - fatal\n[Python Unit Tests/linux  ]   | + success\n[Python Unit Tests/linux  ]   | \n[Python Unit Tests/linux  ]   | \n[Python Unit Tests/linux  ]   | ======================================================================\n[Python Unit Tests/linux  ]   | FAIL: test_get_scene_qualities (webapi_tests.WebAPICase)\n[Python Unit Tests/linux  ]   | ----------------------------------------------------------------------\n[Python Unit Tests/linux  ]   | Traceback (most recent call last):\n[Python Unit Tests/linux  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/webapi_tests.py\", line 586, in test_get_scene_qualities\n[Python Unit Tests/linux  ]   |     self._check_success_base_response(data, webapi.CMD_SickGearExceptions)\n[Python Unit Tests/linux  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/webapi_tests.py\", line 295, in _check_success_base_response\n[Python Unit Tests/linux  ]   |     self.assertEqual(data['result'], 'success')\n[Python Unit Tests/linux  ]   | AssertionError: 'fatal' != 'success'\n[Python Unit Tests/linux  ]   | - fatal\n[Python Unit Tests/linux  ]   | + success\n[Python Unit Tests/linux  ]   | \n[Python Unit Tests/linux  ]   | \n[Python Unit Tests/linux  ]   | ======================================================================\n[Python Unit Tests/linux  ]   | FAIL: test_get_schedules (webapi_tests.WebAPICase)\n[Python Unit Tests/linux  ]   | ----------------------------------------------------------------------\n[Python Unit Tests/linux  ]   | Traceback (most recent call last):\n[Python Unit Tests/linux  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/webapi_tests.py\", line 655, in test_get_schedules\n[Python Unit Tests/linux  ]   |     self._check_success_base_response(data, webapi.CMD_SickGearCheckScheduler)\n[Python Unit Tests/linux  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/webapi_tests.py\", line 295, in _check_success_base_response\n[Python Unit Tests/linux  ]   |     self.assertEqual(data['result'], 'success')\n[Python Unit Tests/linux  ]   | AssertionError: 'fatal' != 'success'\n[Python Unit Tests/linux  ]   | - fatal\n[Python Unit Tests/linux  ]   | + success\n[Python Unit Tests/linux  ]   | \n[Python Unit Tests/linux  ]   | \n[Python Unit Tests/linux  ]   | ======================================================================\n[Python Unit Tests/linux  ]   | FAIL: test_get_seasonlist (webapi_tests.WebAPICase)\n[Python Unit Tests/linux  ]   | ----------------------------------------------------------------------\n[Python Unit Tests/linux  ]   | Traceback (most recent call last):\n[Python Unit Tests/linux  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/webapi_tests.py\", line 485, in test_get_seasonlist\n[Python Unit Tests/linux  ]   |     self._check_success_base_response(data, webapi.CMD_SickGearShowSeasonList, data_type=list)\n[Python Unit Tests/linux  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/webapi_tests.py\", line 294, in _check_success_base_response\n[Python Unit Tests/linux  ]   |     self.assertTrue(r, msg='Failed command: %s%s' % (webapi._functionMaper_reversed[endpoint], msg))\n[Python Unit Tests/linux  ]   | AssertionError: False is not true : Failed command: sg.show.seasonlist, Wrong field type: data: Expected: <class 'dict'>, Got: <class 'list'>\n[Python Unit Tests/linux  ]   | \n[Python Unit Tests/linux  ]   | ======================================================================\n[Python Unit Tests/linux  ]   | FAIL: test_history (webapi_tests.WebAPICase)\n[Python Unit Tests/linux  ]   | ----------------------------------------------------------------------\n[Python Unit Tests/linux  ]   | Traceback (most recent call last):\n[Python Unit Tests/linux  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/webapi_tests.py\", line 601, in test_history\n[Python Unit Tests/linux  ]   |     self._check_success_base_response(data, webapi.CMD_SickGearHistory, data_type=list)\n[Python Unit Tests/linux  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/webapi_tests.py\", line 294, in _check_success_base_response\n[Python Unit Tests/linux  ]   |     self.assertTrue(r, msg='Failed command: %s%s' % (webapi._functionMaper_reversed[endpoint], msg))\n[Python Unit Tests/linux  ]   | AssertionError: False is not true : Failed command: sg.history, Wrong field type: data: Expected: <class 'dict'>, Got: <class 'list'>\n[Python Unit Tests/linux  ]   | \n[Python Unit Tests/linux  ]   | ======================================================================\n[Python Unit Tests/linux  ]   | FAIL: test_seasons (webapi_tests.WebAPICase)\n[Python Unit Tests/linux  ]   | ----------------------------------------------------------------------\n[Python Unit Tests/linux  ]   | Traceback (most recent call last):\n[Python Unit Tests/linux  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/webapi_tests.py\", line 373, in test_seasons\n[Python Unit Tests/linux  ]   |     self._check_success_base_response(data, webapi.CMD_SickGearShowSeasons)\n[Python Unit Tests/linux  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/webapi_tests.py\", line 295, in _check_success_base_response\n[Python Unit Tests/linux  ]   |     self.assertEqual(data['result'], 'success')\n[Python Unit Tests/linux  ]   | AssertionError: 'fatal' != 'success'\n[Python Unit Tests/linux  ]   | - fatal\n[Python Unit Tests/linux  ]   | + success\n[Python Unit Tests/linux  ]   | \n[Python Unit Tests/linux  ]   | \n[Python Unit Tests/linux  ]   | ======================================================================\n[Python Unit Tests/linux  ]   | FAIL: test_set_show_scene_numbers (webapi_tests.WebAPICase)\n[Python Unit Tests/linux  ]   | ----------------------------------------------------------------------\n[Python Unit Tests/linux  ]   | Traceback (most recent call last):\n[Python Unit Tests/linux  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/webapi_tests.py\", line 798, in test_set_show_scene_numbers\n[Python Unit Tests/linux  ]   |     self._check_success_base_response(data, webapi.CMD_SickGearSetSceneNumber)\n[Python Unit Tests/linux  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/webapi_tests.py\", line 295, in _check_success_base_response\n[Python Unit Tests/linux  ]   |     self.assertEqual(data['result'], 'success')\n[Python Unit Tests/linux  ]   | AssertionError: 'fatal' != 'success'\n[Python Unit Tests/linux  ]   | - fatal\n[Python Unit Tests/linux  ]   | + success\n[Python Unit Tests/linux  ]   | \n[Python Unit Tests/linux  ]   | \n[Python Unit Tests/linux  ]   | ======================================================================\n[Python Unit Tests/linux  ]   | FAIL: test_show (webapi_tests.WebAPICase)\n[Python Unit Tests/linux  ]   | ----------------------------------------------------------------------\n[Python Unit Tests/linux  ]   | Traceback (most recent call last):\n[Python Unit Tests/linux  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/webapi_tests.py\", line 366, in test_show\n[Python Unit Tests/linux  ]   |     self._check_success_base_response(data, webapi.CMD_SickGearShow)\n[Python Unit Tests/linux  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/webapi_tests.py\", line 295, in _check_success_base_response\n[Python Unit Tests/linux  ]   |     self.assertEqual(data['result'], 'success')\n[Python Unit Tests/linux  ]   | AssertionError: 'fatal' != 'success'\n[Python Unit Tests/linux  ]   | - fatal\n[Python Unit Tests/linux  ]   | + success\n[Python Unit Tests/linux  ]   | \n[Python Unit Tests/linux  ]   | \n[Python Unit Tests/linux  ]   | ======================================================================\n[Python Unit Tests/linux  ]   | FAIL: test_show_stats (webapi_tests.WebAPICase)\n[Python Unit Tests/linux  ]   | ----------------------------------------------------------------------\n[Python Unit Tests/linux  ]   | Traceback (most recent call last):\n[Python Unit Tests/linux  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/webapi_tests.py\", line 628, in test_show_stats\n[Python Unit Tests/linux  ]   |     self._check_success_base_response(data, webapi.CMD_SickGearShowStats)\n[Python Unit Tests/linux  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/webapi_tests.py\", line 295, in _check_success_base_response\n[Python Unit Tests/linux  ]   |     self.assertEqual(data['result'], 'success')\n[Python Unit Tests/linux  ]   | AssertionError: 'fatal' != 'success'\n[Python Unit Tests/linux  ]   | - fatal\n[Python Unit Tests/linux  ]   | + success\n[Python Unit Tests/linux  ]   | \n[Python Unit Tests/linux  ]   | \n[Python Unit Tests/linux  ]   | ======================================================================\n[Python Unit Tests/linux  ]   | FAIL: test_shows_stats (webapi_tests.WebAPICase)\n[Python Unit Tests/linux  ]   | ----------------------------------------------------------------------\n[Python Unit Tests/linux  ]   | Traceback (most recent call last):\n[Python Unit Tests/linux  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/webapi_tests.py\", line 616, in test_shows_stats\n[Python Unit Tests/linux  ]   |     self._check_success_base_response(data, webapi.CMD_SickGearShowsStats)\n[Python Unit Tests/linux  ]   |   File \"/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/SickGear-SickGear/tests/webapi_tests.py\", line 295, in _check_success_base_response\n[Python Unit Tests/linux  ]   |     self.assertEqual(data['result'], 'success')\n[Python Unit Tests/linux  ]   | AssertionError: 'fatal' != 'success'\n[Python Unit Tests/linux  ]   | - fatal\n[Python Unit Tests/linux  ]   | + success\n[Python Unit Tests/linux  ]   | \n[Python Unit Tests/linux  ]   | \n[Python Unit Tests/linux  ]   | ----------------------------------------------------------------------\n[Python Unit Tests/linux  ]   | Ran 135 tests in 166.158s\n[Python Unit Tests/linux  ]   | \n[Python Unit Tests/linux  ]   | FAILED (failures=15, errors=24)\n[Python Unit Tests/linux  ]   | ====================\n[Python Unit Tests/linux  ]   | STARTING - ALL TESTS\n[Python Unit Tests/linux  ]   | ====================\n[Python Unit Tests/linux  ]   | this will include\n[Python Unit Tests/linux  ]   | - pp_tests.py\n[Python Unit Tests/linux  ]   | - tvinfo_api_tests.py\n[Python Unit Tests/linux  ]   | - network_timezone_tests.py\n[Python Unit Tests/linux  ]   | - helpers_tests.py\n[Python Unit Tests/linux  ]   | - ignore_and_require_words_tests.py\n[Python Unit Tests/linux  ]   | - webapi_tests.py\n[Python Unit Tests/linux  ]   | - compatibility_tests.py\n[Python Unit Tests/linux  ]   | - db_tests.py\n[Python Unit Tests/linux  ]   | - search_tests.py\n[Python Unit Tests/linux  ]   | - scene_helpers_tests.py\n[Python Unit Tests/linux  ]   | - snatch_tests.py\n[Python Unit Tests/linux  ]   | - xem_tests.py\n[Python Unit Tests/linux  ]   | - newznab_tests.py\n[Python Unit Tests/linux  ]   | - migration_tests.py\n[Python Unit Tests/linux  ]   | - name_parser_tests.py\n[Python Unit Tests/linux  ]   | - show_tests.py\n[Python Unit Tests/linux  ]   | - tv_tests.py\n[Python Unit Tests/linux  ]   | - common_tests.py\n[Python Unit Tests/linux  ]   | testing person: TMDb: 968006\n[Python Unit Tests/linux  ]   | testing person: TVmaze: 15776\n[Python Unit Tests/linux  ]   | testing person: Trakt: 260345\n[Python Unit Tests/linux  ]   | testing person: IMDb: 3031063\n[Python Unit Tests/linux  ]   | testing show: TheTVDB: 295837\n[Python Unit Tests/linux  ]   | error getting: https://api.thetvdb.com/series/295837/episodes?page=0\n[Python Unit Tests/linux  ]   | error getting: https://api.thetvdb.com/series/295837/episodes?page=0\n[Python Unit Tests/linux  ]   | error getting: https://api.thetvdb.com/series/295837/episodes?page=0\n[Python Unit Tests/linux  ]   | error getting: https://api.thetvdb.com/series/295837/episodes?page=0\n[Python Unit Tests/linux  ]   | testing show: TMDb: 63210\n[Python Unit Tests/linux  ]   | testing show: TVmaze: 2158\n[Python Unit Tests/linux  ]   | testing [TheTVDB] search for: {'name': 'Shadowhunters'}\n[Python Unit Tests/linux  ]   | testing [TheTVDB] search for: {'name': 'Wednesday'}\n[Python Unit Tests/linux  ]   | testing [TheTVDB] search for: {'ids': {1: 295837}}\n[Python Unit Tests/linux  ]   | testing [Trakt] search for: {'name': 'Shadowhunters'}\n[Python Unit Tests/linux  ]   | testing [Trakt] search for: {'name': 'Wednesday'}\n[Python Unit Tests/linux  ]   | testing [Trakt] search for: {'ids': {1: 295837}}\n[Python Unit Tests/linux  ]   | testing [Trakt] search for: {'ids': {100: 4145054}}\n[Python Unit Tests/linux  ]   | testing [Trakt] search for: {'ids': {4: 119051}}\n[Python Unit Tests/linux  ]   | testing [Trakt] search for: {'ids': {1101: 'walker-independence'}}\n[Python Unit Tests/linux  ]   | testing [TMDb] search for: {'name': 'Shadowhunters'}\n[Python Unit Tests/linux  ]   | testing [TMDb] search for: {'name': 'Wednesday'}\n[Python Unit Tests/linux  ]   | testing [TMDb] search for: {'ids': {1: 295837}}\n[Python Unit Tests/linux  ]   | testing [TMDb] search for: {'ids': {100: 4145054}}\n[Python Unit Tests/linux  ]   | testing [TMDb] search for: {'ids': {4: 119051}}\n[Python Unit Tests/linux  ]   | testing [TVmaze] search for: {'name': 'Shadowhunters'}\n[Python Unit Tests/linux  ]   | testing [TVmaze] search for: {'name': 'Wednesday'}\n[Python Unit Tests/linux  ]   | testing [TVmaze] search for: {'ids': {1: 295837}}\n[Python Unit Tests/linux  ]   | testing [TVmaze] search for: {'ids': {100: 4145054}}\n[Python Unit Tests/linux  ]   | testing [TVmaze] search for: {'ids': {3: 2158}}\n[Python Unit Tests/linux  ]   | testing [TVmaze] search for: {'ids': {3: 53647}}\n[Python Unit Tests/linux  ]   | unused files: {'528a8ab7840785ddfc3164df24000069fd627154c1021734bb4422b71a27305b.data', '3f0cbbc88b32cfc64cff188b342a143366b2b99c6288fba8b5153367df061656.data', '74eb934daf296235b9681641c7b2387e29599922b26fa415ac7d628ea43324b9.data', 'e841ed1c58eef80ae71ba23bb1919d7dc77fb9b553dd983160280a43103f048b.data', '75cc012f7509a27f681f46a4f94eb22262d8354df6b5963354ea9eacb8fb9e55.data', '2c31741fdb548ab64d90c2acbbf730cef9b9debbc04d11ac07ed976832d0857c.obj_data', '92cf9a07a23a32d81159730efb8cbcd29446734f3819f5a763b2904f95891fbb.data', '23160ac2d48d5394b5ab9a0ece735110d04e90ff5e858cc2fe9650f213432352.data', 'bd7f54dacf87f55cf4fbcf4fd1058a2128bffc551760981f414a20a44fcf79ca.obj_data', 'fafab82f85acb3c3bf4daa55dff9e664ebf69763357382f7afdde055f0c07984.data', '73359a5fb2fee2fa49c42c64c51598cbf6b651655b8710667f4e56c9384a26ed.data', 'e72e4f47908e23af45be9303c81f7eb0b1137a3a9bb410c07b29bf1e33c5dc67.data', 'fd225f6274b24f5b1905bc272d25d18e7203b033818d5ac2ba8d470231e15a2c.obj_data', '1a07c81776902be37b00a5e419437b4c68af64df93652d44923398d231f44995.data', '363beeb0c6766ae6706234abdf43a1512d431586cc84964f70bf3a2a234f1548.data', '4400498f7f9db8670f1378cbeb7f2f52553cd29d4772155138089a2dc7be6fa0.data', '67c6166cd63b9882ca5f87c6c99765f402b29fcf767d75bb292f0246531f416d.obj_data', 'bc528a714a219bc38f1c4a337b5494e9a98c5019d0c88ebc876d3c6736fbc5dd.data', 'a1bb6af4a350b35fd1d1fb8a909ab9e1159b7fe65376908aa14efd35410bae16.obj_data', 'aaca13e577a6de50b65f531881e8eb49b8451194df220b2462338f796f7163bc.obj_data', '880778002dc0e84cad4cd6c78bd51aa8b305b7bd054f42b7d8f9a852a85d3539.data', '4539d263dcce33e01d0f56d3762636e58fe951a0ee1742e003852cad4f0959e3.data', '91d1a80f26b3948649095ce84cb7e11833a88e3781861eed05f968f61c55d86b.data', '6833745e63e5337ee03881a594c7fa7254b2d259d4a90702d95a2d820b4c12f3.data', 'b37b264719c0c5954bf57dcfce7fccf7fae1d8ea95da639aff0a4f580c239add.obj_data', '9ca387eb24057381d943e2b2a20664eb8ceab87fa3b5475d471e5a7f8626878f.data', 'da61cca5a5c062e337a33e38df7c441faf952170e1dea16c19c709ca1245a5de.obj_data', '462d84c048ef3cfabd459433d393c236f67e9e1a56a9270e856b8c379db2d03d.obj_data', '326b5e044ce064f6cc2ce8361cfdf7a26428d66c7fef58d4a872370ff1c3c96a.data', 'a1fdd06ce7e16ca879f92c3814859b58dd3752661fa8989edb061a2f6c76cfbb.obj_data', '3df626ef1944ff0bcc377194cbd7b6508897d58a402ce2ef994da70052946fa9.obj_data', '069c310a2351774f022fc79af486f757bd010e0d3fa1ae3778f76d3f59b8aa84.obj_data', '648818b354563f5d3b303d4a2c0e88435102db5660b6976d057eab05ee5518c8.data', 'ddc30ceeccd141fe1f1455995ed96299d290b2c606c2a0612118c40ac792b92f.obj_data', 'fd8649918481dfefd0b31b2b74fcfa9f40066220f1393c248e4523e75fabaed1.data', '9418de89bce3025e1c8fc317589e784cc8af5e282b48e2f96b279170338e5ae0.data', '5c3d104448319a6769924ec4d558369cecd7d9914fa8e3c229f0e972336cd9f1.data', '2e4429c5472dbf6f7221101f392c5bf28dc7319d9dda2f77a6d084555f0ba3e4.data', 'f50beb695d25bf062ad4d3c59afe4382ecbbbd784c8565e2c43a39055dfb4ba2.data', '502febd3497e0733cfa4cd8fc5fc3f5e7499ceb99a493eac16186c1994153044.obj_data', '687ab841e2c1b2c752be7add3e229daff2dbfa7bbb29574fe1048a25dfb565c4.data', 'c96aefaefe7553443e9c1539c33d35f5b854dba94760f54d4559faf593d90b5b.data', '0d8bdf423bf777315b7d25184ebee1c58c8051a188b79df3e07945353755489e.data', 'dbfa0578f70df29edee6875406c17721376a591ee650839caf1e1b2886a86b81.data', 'c39637c11256690aefb42ad92fd99b383da87899c3498447aef91b0e74f01cb0.data', 'e8e86bce73634d572c641e04bb77c7a9847135fe05536966737ddad091512d09.obj_data', '08c8f985005889ce4b6311a28dbc592676099ed7fde08f7599f4cc3e04ce8e87.data', '48a5d04a9bb9c28fc3e14147ea4f1aeed1fa125cc301304fae3164309c4c6447.data', '4e8d91720303f19a6e6594c459dce2c039d559143e4bdeef8353cced22ddf462.obj_data', '186023d0fd7394baeec9a8eaeb57cd3375ecb66b2388d4e50cdd3c69e19043a5.obj_data', '17117bd58be4182a969b014ba816e2ea3b266d6bad7429f4e9ce0203819ff5de.data', '759f1a69f60b446633dffdff63072b9273b8d0abca603cc190781d2ecd254e88.data', '4fb0dcac4ab8d771c42ef8900c6a79b89ae3104f23cf72c9b35c6865991c5ad7.data', '841c08f2ec66225d75bac8e9aeca9f152e9c36fbc6b2e7de63d77b9ec89c3921.data', 'ed0581e1a01bf6b8e60371c4cd62483f466889da23cf6fe3af72563766bbe00c.data', '22989beee1f37404ba905a60fe65ec2196db07563a5bd08a654223df62a7e46c.obj_data', '01ceab4e46d976136784d89c7ea4467179b2f70223ce6da011cddbe7e0784ed3.obj_data', 'f8cea51a7466f77d5157b77338c2cc22240f0030008e9cec2a1fb3c2af388f56.obj_data', '03dd09a773bcdaf80f73ea56ea0ed4af923a7ee60e1ac8d3f510b68942f97e21.obj_data', '4a37b82dabfb2b1fe98104240c2b5b94475002d4312f0aafd7d4f97283da9fc4.obj_data', '80fd3e9e2e2abe5b2cf6406e020d508c38648b017c832a03162958b7eb048e7c.obj_data', '16ebc88e676e906c268974126bb7ae8deac4d1c70d2b5e6bfe7b504a15c76cf2.obj_data', '07e4a5a91e346bed55c78d75a40694a06592b460c06827b4fb96ecb7164ddd72.obj_data', '7b3d6ec1e025f826bb93e0ffa16570d548be724cb1da3d82f74818b2a6d5c371.data', '6e7d0d08137cc13d0837cb64a4606ee60259dde0cae3cd6c34034ac91ac0d560.data', '9104bbbb65f586a0d0e02177420940f1bb047631702440e6f669f9ab130b196c.data', 'edbef3cc91b926f81f30d84c0bcdcbedb43d79aa1ff28e1b67d15a465016f2f8.obj_data', '90e40779b01f3c920c77ebdb10e55b9c724953f6cf896eac77f0058840a5d0eb.obj_data', '5db50437d52044c552497ed47c5736a10ec13334cb232873d84aec7b69d3f06e.data', 'ba4a66b07ee1c0676ee6d2065be7a3c4d6362a0f20c464f42cad20f62d88a95e.obj_data', 'df6eadc0026f971615d9017f148edac27efbe82af287a523507a45a3433dc4c9.obj_data', 'dcb3ba5cdec38f0c7504756f7f4e26db3fe8a73659c89072aeea544acd62ea2a.obj_data', '8e2a48dbbd07a4e2262a2aa5fedadae5d7e3c530494abb4d2fbfa4ce6ad97895.data', 'b1829c20667efaeb4b83255e39501c7c38d986a88b9f9d73d187b0cb70d9060e.data', '29d20ee1837a8a777e6af3feb156fec476b7ec16bd76ff32840f2fa2623d712a.data', '5353fd0d66ee6cbda45d2598476ccdc66b1ab537ce3411cb3231ba02060097bf.data', '8bba320eea247cc7d054b9fcafb9e11d87b7638ac90e71605b040d7970bb1c70.data', '8855abb4ebbd1227d67c76b5cfd4169955217704ddbab852f6ca60cc8a226a83.data', 'bbed4446a24cab7071ea086eb945d1329f7ab91cc8b65e28c375c6d01f1713fb.data', 'dd38622fc86a1a77e81864dc8540e0f850de203181d7c9b422ec8fd944b0a107.obj_data', '7881354e5850db4313b154841613c45f62bf1bdfc1d95a72e5b0d44d5ab27e52.obj_data', '038445677435284fabfae2ef510aae6158d0986f91821227d794aa0de97452bd.obj_data', '2d20d12f4d4c356184419655e9cd3e815ea46e9e62df5b0ac8f7188a775c19d7.obj_data', '41ed49dbf1f7a266e823a8202856e4b7e520082246fd6c62eb79dcdc8e5b5bc7.data', '4658a80aed60539ae81ab8d60163a4f2dde3e42e2746eb9a1ab07dca95b8eb48.data', '9964f78487b1a5123c1b6cdc07a08c7bb02423435abab13adb1c847d8887b8e5.obj_data', '1d8ad0a4b4687e38faef5521bab630b39fc1a047189f1aa67491bb3bd3bd5357.data', '5ad3db843b8bcde1f068f99c2651062d16f38d2239eb4fd0f10508a3c641c019.obj_data', '31674aa8138822ea481d83b4f120401608eff189460dfb56a0d41e6635bf5d30.data', '21448bf03b563f8fec02052a1c356ffda74f4376614dfffd9648bcb846c89ace.data', '5533525209749f5b8f0a712af8e836766c110ef577de9be2b5c49982f452e005.obj_data', '0dfc5546679e652d2cd4f82d515c73e42bbdd22f8c3a9a187a76a6d69fa518a3.data', '9c755a20454891bb728ff90a6e9c78699aa625c1fc3fc59b1bb78dfa33fb1b3e.obj_data', '8f5fef3c110926f32780ef609743177a021b811e997528d9de0c0c0b60cb7508.data', 'ac80c0ffb06ea16dc3b5e89e6539725dc60630dc958a4bd5b9e22e887180acc7.data', '4bd42b7becdad01f9214ab51182f4ffbf454ba66289db3a4831e7dc3aaf8d895.data', '9add06b3af8c06a5d9831299f3375b0031d8c8135fba006d84ede88a7d49fa59.data', '46abed8409c546f69ed6f1bb379eba2b6435ca0c0459b5f1e456b748ae119296.obj_data', 'cd98fb9642d2355d8ceb1eb564958daa761e2aa10ed60096b648f86e677473ee.data', 'c55e854bb64c382c20a7f9c2b935710b52d244c59d56f66b84f7524f0cc5cce9.obj_data', '481ef749d546a669798720cfa3b7f78435c16fca4165558f2c6081c225968160.obj_data', 'badf351c627c9c9ffa950d4a6ea2181842053d9be2a7e81bfe48c35ff5a1683a.obj_data', 'd03f54a9ab61b777bb3578841a9d128e66f93e5f7ed9606cd662ce08f317be94.data', '5a32b63e77f8c6a2594287c0161b770d368bee3771edb2ac3cbc173ac4e06941.obj_data', 'eafedf8f54531efef157a370f6ff5cc718ebe303f05ef8f6ec7a8747800a04b0.obj_data', '5e0adc77e533c2694095395e4aee465709afc3bd8e8efa621dfbf7bee7d95b40.data'}\n[Python Unit Tests/linux  ]   | reset mock methods\n[Python Unit Tests/linux  ]   \u274c  Failure - Main Unit tests...\n[Python Unit Tests/linux  ] exitcode '255': failure\n[Python Unit Tests/linux  ] \ud83c\udfc1  Job failed\n",
    "actions_stderr": "Error: Job 'macos' failed\n"
}