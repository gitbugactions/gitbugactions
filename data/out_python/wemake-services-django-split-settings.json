{
    "repository": "wemake-services/django-split-settings",
    "clone_url": "https://github.com/wemake-services/django-split-settings.git",
    "timestamp": "2023-05-29T14:49:29.506610Z",
    "clone_success": true,
    "number of actions": 1,
    "number_of_test_actions": 1,
    "actions_successful": false,
    "actions_stdout": "[test/build-1] \ud83d\ude80  Start image=crawlergpt:latest\n[test/build-2] \ud83d\ude80  Start image=crawlergpt:latest\n[test/build-1]   \ud83d\udc33  docker pull image=crawlergpt:latest platform= username= forcePull=false\n[test/build-2]   \ud83d\udc33  docker pull image=crawlergpt:latest platform= username= forcePull=false\n[test/build-2]   \ud83d\udc33  docker create image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[test/build-1]   \ud83d\udc33  docker create image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[test/build-2]   \ud83d\udc33  docker run image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[test/build-1]   \ud83d\udc33  docker run image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[test/build-2]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/wemake-services-django-split-settings] user=0 workdir=\n[test/build-1]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/wemake-services-django-split-settings] user=0 workdir=\n[test/build-1]   \u2601  git clone 'https://github.com/actions/setup-python' # ref=v4\n[test/build-2]   \u2601  git clone 'https://github.com/actions/setup-python' # ref=v4\n[test/build-1] Unable to checkout bd6b4b6205c4dbad673328db7b31b7fab9e241c0: EOF\n[test/build-2]   \u2601  git clone 'https://github.com/codecov/codecov-action' # ref=v3\n[test/build-2] \ud83e\uddea  Matrix: map[django-version:Django~=3.2.0 python-version:3.7]\n[test/build-2] \u2b50 Run Main actions/checkout@v3\n[test/build-2]   \u2705  Success - Main actions/checkout@v3\n[test/build-1] \ud83c\udfc1  Job succeeded\n[test/build-2] \u2b50 Run Main Set up Python 3.7\n[test/build-2]   \ud83d\udc33  docker cp src=/home/andre-silva/.cache/act/actions-setup-python@v4/ dst=/var/run/act/actions/actions-setup-python@v4/\n[test/build-2]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /var/run/act/actions/actions-setup-python@v4/] user=0 workdir=\n[test/build-2]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/actions-setup-python@v4/dist/setup/index.js] user= workdir=\n[test/build-2]   \ud83d\udcac  ::debug::Python is expected to be installed into /opt/hostedtoolcache\n[test/build-2]   \u2753  ::group::Installed versions\n[test/build-2]   \ud83d\udcac  ::debug::Semantic version spec of 3.7 is 3.7\n[test/build-2]   \ud83d\udcac  ::debug::isExplicit: \n[test/build-2]   \ud83d\udcac  ::debug::explicit? false\n[test/build-2]   \ud83d\udcac  ::debug::isExplicit: 2.7.18\n[test/build-2]   \ud83d\udcac  ::debug::explicit? true\n[test/build-2]   \ud83d\udcac  ::debug::isExplicit: 3.5.10\n[test/build-2]   \ud83d\udcac  ::debug::explicit? true\n[test/build-2]   \ud83d\udcac  ::debug::isExplicit: 3.6.14\n[test/build-2]   \ud83d\udcac  ::debug::explicit? true\n[test/build-2]   \ud83d\udcac  ::debug::isExplicit: 3.7.11\n[test/build-2]   \ud83d\udcac  ::debug::explicit? true\n[test/build-2]   \ud83d\udcac  ::debug::isExplicit: 3.8.11\n[test/build-2]   \ud83d\udcac  ::debug::explicit? true\n[test/build-2]   \ud83d\udcac  ::debug::isExplicit: 3.9.6\n[test/build-2]   \ud83d\udcac  ::debug::explicit? true\n[test/build-2]   \ud83d\udcac  ::debug::evaluating 6 versions\n[test/build-2]   \ud83d\udcac  ::debug::matched: 3.7.11\n[test/build-2]   \ud83d\udcac  ::debug::checking cache: /opt/hostedtoolcache/Python/3.7.11/x64\n[test/build-2]   \ud83d\udcac  ::debug::Found tool in cache Python 3.7.11 x64\n[test/build-2]   | Successfully set up CPython (3.7.11)\n[test/build-2]   \u2753  ::endgroup::\n[test/build-2]   \u2753 add-matcher /run/act/actions/actions-setup-python@v4/.github/python.json\n[test/build-2]   \u2705  Success - Main Set up Python 3.7\n[test/build-2]   \u2699  ::set-env:: Python_ROOT_DIR=/opt/hostedtoolcache/Python/3.7.11/x64\n[test/build-2]   \u2699  ::set-env:: Python2_ROOT_DIR=/opt/hostedtoolcache/Python/3.7.11/x64\n[test/build-2]   \u2699  ::set-env:: Python3_ROOT_DIR=/opt/hostedtoolcache/Python/3.7.11/x64\n[test/build-2]   \u2699  ::set-env:: LD_LIBRARY_PATH=/opt/hostedtoolcache/Python/3.7.11/x64/lib\n[test/build-2]   \u2699  ::set-env:: pythonLocation=/opt/hostedtoolcache/Python/3.7.11/x64\n[test/build-2]   \u2699  ::set-env:: PKG_CONFIG_PATH=/opt/hostedtoolcache/Python/3.7.11/x64/lib/pkgconfig\n[test/build-2]   \u2699  ::set-output:: python-version=3.7.11\n[test/build-2]   \u2699  ::set-output:: python-path=/opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[test/build-2]   \u2699  ::add-path:: /opt/hostedtoolcache/Python/3.7.11/x64\n[test/build-2]   \u2699  ::add-path:: /opt/hostedtoolcache/Python/3.7.11/x64/bin\n[test/build-2] \u2b50 Run Main Install poetry\n[test/build-2]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/2] user= workdir=\n[test/build-2]   | The canonical source for Poetry's installation script is now https://install.python-poetry.org. Please update your usage to reflect this.\n[test/build-2]   | Retrieving Poetry metadata\n[test/build-2]   | \n[test/build-2]   | # Welcome to Poetry!\n[test/build-2]   | \n[test/build-2]   | This will download and install the latest version of Poetry,\n[test/build-2]   | a dependency and package manager for Python.\n[test/build-2]   | \n[test/build-2]   | It will add the `poetry` command to Poetry's bin directory, located at:\n[test/build-2]   | \n[test/build-2]   | /home/runneradmin/.local/bin\n[test/build-2]   | \n[test/build-2]   | You can uninstall at any time by executing this script with the --uninstall option,\n[test/build-2]   | and these changes will be reverted.\n[test/build-2]   | \n[test/build-2]   | Installing Poetry (1.5.0)\n[test/build-2]   | Installing Poetry (1.5.0): Creating environment\n[test/build-2]   | Installing Poetry (1.5.0): Installing Poetry\n[test/build-2]   | Installing Poetry (1.5.0): Creating script\n[test/build-2]   | Installing Poetry (1.5.0): Done\n[test/build-2]   | \n[test/build-2]   | Poetry (1.5.0) is installed now. Great!\n[test/build-2]   | \n[test/build-2]   | To get started you need Poetry's bin directory (/home/runneradmin/.local/bin) in your `PATH`\n[test/build-2]   | environment variable.\n[test/build-2]   | \n[test/build-2]   | Add `export PATH=\"/home/runneradmin/.local/bin:$PATH\"` to your shell configuration file.\n[test/build-2]   | \n[test/build-2]   | Alternatively, you can call Poetry explicitly with `/home/runneradmin/.local/bin/poetry`.\n[test/build-2]   | \n[test/build-2]   | You can test that everything is set up by executing:\n[test/build-2]   | \n[test/build-2]   | `poetry --version`\n[test/build-2]   | \n[test/build-2]   \u2705  Success - Main Install poetry\n[test/build-2]   \u2699  ::add-path:: /home/runneradmin/.poetry/bin\n[test/build-2] \u2b50 Run Main Install dependencies\n[test/build-2]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/3] user= workdir=\n[test/build-2]   | /var/run/act/workflow/3: line 2: poetry: command not found\n[test/build-2]   \u274c  Failure - Main Install dependencies\n[test/build-2] exitcode '127': command not found, please refer to https://github.com/nektos/act/issues/107 for more information\n[test/build-2] \ud83c\udfc1  Job failed\n",
    "actions_stderr": "Error: EOF\n"
}