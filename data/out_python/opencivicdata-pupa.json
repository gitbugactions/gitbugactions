{
    "repository": "opencivicdata/pupa",
    "clone_url": "https://github.com/opencivicdata/pupa.git",
    "timestamp": "2023-05-29T14:48:21.326959Z",
    "clone_success": true,
    "number of actions": 1,
    "number_of_test_actions": 1,
    "actions_successful": false,
    "actions_stdout": "[Test and build Python package/test] \ud83d\ude80  Start image=crawlergpt:latest\n[Test and build Python package/test]   \ud83d\udc33  docker pull image=crawlergpt:latest platform= username= forcePull=false\n[Test and build Python package/test]   \ud83d\udc33  docker create image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[Test and build Python package/test]   \ud83d\udc33  docker run image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[Test and build Python package/test]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/opencivicdata-pupa] user=0 workdir=\n[Test and build Python package/test]   \u2601  git clone 'https://github.com/actions/setup-python' # ref=v2\n[Test and build Python package/test] \ud83e\uddea  Matrix: map[django-series:2.2 python-version:3.6]\n[Test and build Python package/test] \u2b50 Run Main actions/checkout@v2\n[Test and build Python package/test]   \u2705  Success - Main actions/checkout@v2\n[Test and build Python package/test] \u2b50 Run Main Set up Python 3.6\n[Test and build Python package/test]   \ud83d\udc33  docker cp src=/home/andre-silva/.cache/act/actions-setup-python@v2/ dst=/var/run/act/actions/actions-setup-python@v2/\n[Test and build Python package/test]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /var/run/act/actions/actions-setup-python@v2/] user=0 workdir=\n[Test and build Python package/test]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/actions-setup-python@v2/dist/setup/index.js] user= workdir=\n[Test and build Python package/test]   \ud83d\udcac  ::debug::Semantic version spec of 3.6 is 3.6\n[Test and build Python package/test]   \ud83d\udcac  ::debug::isExplicit: \n[Test and build Python package/test]   \ud83d\udcac  ::debug::explicit? false\n[Test and build Python package/test]   \ud83d\udcac  ::debug::isExplicit: 2.7.18\n[Test and build Python package/test]   \ud83d\udcac  ::debug::explicit? true\n[Test and build Python package/test]   \ud83d\udcac  ::debug::isExplicit: 3.5.10\n[Test and build Python package/test]   \ud83d\udcac  ::debug::explicit? true\n[Test and build Python package/test]   \ud83d\udcac  ::debug::isExplicit: 3.6.14\n[Test and build Python package/test]   \ud83d\udcac  ::debug::explicit? true\n[Test and build Python package/test]   \ud83d\udcac  ::debug::isExplicit: 3.7.11\n[Test and build Python package/test]   \ud83d\udcac  ::debug::explicit? true\n[Test and build Python package/test]   \ud83d\udcac  ::debug::isExplicit: 3.8.11\n[Test and build Python package/test]   \ud83d\udcac  ::debug::explicit? true\n[Test and build Python package/test]   \ud83d\udcac  ::debug::isExplicit: 3.9.6\n[Test and build Python package/test]   \ud83d\udcac  ::debug::explicit? true\n[Test and build Python package/test]   \ud83d\udcac  ::debug::evaluating 6 versions\n[Test and build Python package/test]   \ud83d\udcac  ::debug::matched: 3.6.14\n[Test and build Python package/test]   \ud83d\udcac  ::debug::checking cache: /opt/hostedtoolcache/Python/3.6.14/x64\n[Test and build Python package/test]   \ud83d\udcac  ::debug::Found tool in cache Python 3.6.14 x64\n[Test and build Python package/test]   | Successfully setup CPython (3.6.14)\n[Test and build Python package/test]   \u2753 add-matcher /run/act/actions/actions-setup-python@v2/.github/python.json\n[Test and build Python package/test]   \u2705  Success - Main Set up Python 3.6\n[Test and build Python package/test]   \u2699  ::set-env:: LD_LIBRARY_PATH=/opt/hostedtoolcache/Python/3.6.14/x64/lib\n[Test and build Python package/test]   \u2699  ::set-env:: pythonLocation=/opt/hostedtoolcache/Python/3.6.14/x64\n[Test and build Python package/test]   \u2699  ::set-output:: python-version=3.6.14\n[Test and build Python package/test]   \u2699  ::add-path:: /opt/hostedtoolcache/Python/3.6.14/x64\n[Test and build Python package/test]   \u2699  ::add-path:: /opt/hostedtoolcache/Python/3.6.14/x64/bin\n[Test and build Python package/test] \u2b50 Run Main Install dependencies\n[Test and build Python package/test]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/2] user= workdir=\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | WARNING: apt does not have a stable CLI interface. Use with caution in scripts.\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | Get:1 https://dl.hhvm.com/ubuntu focal InRelease [3137 B]\n[Test and build Python package/test]   | Hit:2 http://ppa.launchpad.net/ubuntu-toolchain-r/test/ubuntu focal InRelease\n[Test and build Python package/test]   | Hit:3 http://archive.ubuntu.com/ubuntu focal InRelease\n[Test and build Python package/test]   | Get:4 http://security.ubuntu.com/ubuntu focal-security InRelease [114 kB]\n[Test and build Python package/test]   | Get:5 https://packages.microsoft.com/ubuntu/20.04/prod focal InRelease [3611 B]\n[Test and build Python package/test]   | Get:6 https://cloud.r-project.org/bin/linux/ubuntu focal-cran40/ InRelease [3622 B]\n[Test and build Python package/test]   | Get:7 http://dl.google.com/linux/chrome/deb stable InRelease [1825 B]\n[Test and build Python package/test]   | Get:8 http://archive.ubuntu.com/ubuntu focal-updates InRelease [114 kB]\n[Test and build Python package/test]   | Hit:9 https://adoptopenjdk.jfrog.io/adoptopenjdk/deb focal InRelease\n[Test and build Python package/test]   | Get:10 http://archive.ubuntu.com/ubuntu focal-backports InRelease [108 kB]\n[Test and build Python package/test]   | Get:11 http://security.ubuntu.com/ubuntu focal-security/main i386 Packages [739 kB]\n[Test and build Python package/test]   | Get:12 https://packages.microsoft.com/ubuntu/20.04/prod focal/main amd64 Packages [201 kB]\n[Test and build Python package/test]   | Get:13 https://packages.microsoft.com/ubuntu/20.04/prod focal/main all Packages [2521 B]\n[Test and build Python package/test]   | Get:14 https://dl.hhvm.com/ubuntu focal/main amd64 Packages [1880 B]\n[Test and build Python package/test]   | Get:15 http://security.ubuntu.com/ubuntu focal-security/multiverse i386 Packages [8141 B]\n[Test and build Python package/test]   | Get:16 http://security.ubuntu.com/ubuntu focal-security/multiverse amd64 Packages [28.5 kB]\n[Test and build Python package/test]   | Get:17 http://security.ubuntu.com/ubuntu focal-security/universe amd64 Packages [1052 kB]\n[Test and build Python package/test]   | Get:18 https://cloud.r-project.org/bin/linux/ubuntu focal-cran40/ Packages [77.6 kB]\n[Test and build Python package/test]   | Get:19 http://security.ubuntu.com/ubuntu focal-security/restricted i386 Packages [36.9 kB]\n[Test and build Python package/test]   | Get:20 http://security.ubuntu.com/ubuntu focal-security/universe i386 Packages [739 kB]\n[Test and build Python package/test]   | Err:7 http://dl.google.com/linux/chrome/deb stable InRelease\n[Test and build Python package/test]   |   The following signatures couldn't be verified because the public key is not available: NO_PUBKEY 4EB27DB2A3B88B8B\n[Test and build Python package/test]   | Get:21 http://security.ubuntu.com/ubuntu focal-security/restricted amd64 Packages [2270 kB]\n[Test and build Python package/test]   | Get:22 http://security.ubuntu.com/ubuntu focal-security/main amd64 Packages [2726 kB]\n[Test and build Python package/test]   | Get:23 http://archive.ubuntu.com/ubuntu focal-updates/universe amd64 Packages [1346 kB]\n[Test and build Python package/test]   | Get:24 http://archive.ubuntu.com/ubuntu focal-updates/multiverse amd64 Packages [31.2 kB]\n[Test and build Python package/test]   | Get:25 http://archive.ubuntu.com/ubuntu focal-updates/main amd64 Packages [3204 kB]\n[Test and build Python package/test]   | Get:26 http://archive.ubuntu.com/ubuntu focal-updates/restricted amd64 Packages [2412 kB]\n[Test and build Python package/test]   | Get:27 http://archive.ubuntu.com/ubuntu focal-backports/main amd64 Packages [55.2 kB]\n[Test and build Python package/test]   | Get:28 http://archive.ubuntu.com/ubuntu focal-backports/universe amd64 Packages [28.6 kB]\n[Test and build Python package/test]   | Fetched 15.3 MB in 6s (2433 kB/s)\n[Test and build Python package/test]   | Reading package lists...\n[Test and build Python package/test]   | Building dependency tree...\n[Test and build Python package/test]   | Reading state information...\n[Test and build Python package/test]   | W: An error occurred during the signature verification. The repository is not updated and the previous index files will be used. GPG error: http://dl.google.com/linux/chrome/deb stable InRelease: The following signatures couldn't be verified because the public key is not available: NO_PUBKEY 4EB27DB2A3B88B8B\n[Test and build Python package/test]   | W: Failed to fetch http://dl.google.com/linux/chrome/deb/dists/stable/InRelease  The following signatures couldn't be verified because the public key is not available: NO_PUBKEY 4EB27DB2A3B88B8B\n[Test and build Python package/test]   | W: Some index files failed to download. They have been ignored, or old ones used instead.\n[Test and build Python package/test]   | 388 packages can be upgraded. Run 'apt list --upgradable' to see them.\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | WARNING: apt does not have a stable CLI interface. Use with caution in scripts.\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | Reading package lists...\n[Test and build Python package/test]   | Building dependency tree...\n[Test and build Python package/test]   | Reading state information...\n[Test and build Python package/test]   | The following additional packages will be installed:\n[Test and build Python package/test]   |   gdal-data libaec0 libarmadillo9 libarpack2 libcfitsio8 libcharls2 libdap25\n[Test and build Python package/test]   |   libdapclient6v5 libepsilon1 libfreexl1 libfyba0 libgdal26 libgeos-3.8.0\n[Test and build Python package/test]   |   libgeos-c1v5 libgeotiff5 libhdf4-0-alt libhdf5-103 libkmlbase1 libkmldom1\n[Test and build Python package/test]   |   libkmlengine1 libminizip1 libnetcdf15 libogdi4.1 libopenjp2-7 libpoppler97\n[Test and build Python package/test]   |   libproj15 libqhull7 libspatialite7 libsuperlu5 libsz2 liburiparser1\n[Test and build Python package/test]   |   libxerces-c3.2 poppler-data proj-bin proj-data python3-gdal python3-numpy\n[Test and build Python package/test]   | Suggested packages:\n[Test and build Python package/test]   |   libgdal-grass geotiff-bin libgeotiff-epsg libhdf4-doc libhdf4-alt-dev\n[Test and build Python package/test]   |   hdf4-tools ogdi-bin poppler-utils ghostscript fonts-japanese-mincho\n[Test and build Python package/test]   |   | fonts-ipafont-mincho fonts-japanese-gothic | fonts-ipafont-gothic\n[Test and build Python package/test]   |   fonts-arphic-ukai fonts-arphic-uming fonts-nanum python-numpy-doc\n[Test and build Python package/test]   |   python3-pytest python3-numpy-dbg\n[Test and build Python package/test]   | The following NEW packages will be installed:\n[Test and build Python package/test]   |   gdal-bin gdal-data libaec0 libarmadillo9 libarpack2 libcfitsio8 libcharls2\n[Test and build Python package/test]   |   libdap25 libdapclient6v5 libepsilon1 libfreexl1 libfyba0 libgdal26\n[Test and build Python package/test]   |   libgeos-3.8.0 libgeos-c1v5 libgeotiff5 libhdf4-0-alt libhdf5-103 libkmlbase1\n[Test and build Python package/test]   |   libkmldom1 libkmlengine1 libminizip1 libnetcdf15 libogdi4.1 libopenjp2-7\n[Test and build Python package/test]   |   libpoppler97 libproj15 libqhull7 libspatialite7 libsuperlu5 libsz2\n[Test and build Python package/test]   |   liburiparser1 libxerces-c3.2 poppler-data proj-bin proj-data python3-gdal\n[Test and build Python package/test]   |   python3-numpy\n[Test and build Python package/test]   | 0 upgraded, 38 newly installed, 0 to remove and 388 not upgraded.\n[Test and build Python package/test]   | Need to get 28.1 MB of archives.\n[Test and build Python package/test]   | After this operation, 114 MB of additional disk space will be used.\n[Test and build Python package/test]   | Get:1 http://archive.ubuntu.com/ubuntu focal/main amd64 poppler-data all 0.4.9-2 [1475 kB]\n[Test and build Python package/test]   | Get:2 http://archive.ubuntu.com/ubuntu focal-updates/main amd64 python3-numpy amd64 1:1.17.4-5ubuntu3.1 [2724 kB]\n[Test and build Python package/test]   | Get:3 http://archive.ubuntu.com/ubuntu focal/universe amd64 gdal-data all 3.0.4+dfsg-1build3 [186 kB]\n[Test and build Python package/test]   | Get:4 http://archive.ubuntu.com/ubuntu focal/universe amd64 libarpack2 amd64 3.7.0-3 [92.8 kB]\n[Test and build Python package/test]   | Get:5 http://archive.ubuntu.com/ubuntu focal/universe amd64 libsuperlu5 amd64 5.2.1+dfsg1-4 [159 kB]\n[Test and build Python package/test]   | Get:6 http://archive.ubuntu.com/ubuntu focal/universe amd64 libarmadillo9 amd64 1:9.800.4+dfsg-1build1 [93.2 kB]\n[Test and build Python package/test]   | Get:7 http://archive.ubuntu.com/ubuntu focal/universe amd64 libcfitsio8 amd64 3.470-3 [466 kB]\n[Test and build Python package/test]   | Get:8 http://archive.ubuntu.com/ubuntu focal/universe amd64 libcharls2 amd64 2.0.0+dfsg-1build1 [74.1 kB]\n[Test and build Python package/test]   | Get:9 http://archive.ubuntu.com/ubuntu focal/universe amd64 libdap25 amd64 3.20.5-1 [435 kB]\n[Test and build Python package/test]   | Get:10 http://archive.ubuntu.com/ubuntu focal/universe amd64 libdapclient6v5 amd64 3.20.5-1 [92.2 kB]\n[Test and build Python package/test]   | Get:11 http://archive.ubuntu.com/ubuntu focal/universe amd64 libepsilon1 amd64 0.9.2+dfsg-4 [41.0 kB]\n[Test and build Python package/test]   | Get:12 http://archive.ubuntu.com/ubuntu focal/universe amd64 libfreexl1 amd64 1.0.5-3 [33.4 kB]\n[Test and build Python package/test]   | Get:13 http://archive.ubuntu.com/ubuntu focal/universe amd64 libfyba0 amd64 4.1.1-6build1 [113 kB]\n[Test and build Python package/test]   | Get:14 http://archive.ubuntu.com/ubuntu focal/universe amd64 libgeos-3.8.0 amd64 3.8.0-1build1 [535 kB]\n[Test and build Python package/test]   | Get:15 http://archive.ubuntu.com/ubuntu focal/universe amd64 libgeos-c1v5 amd64 3.8.0-1build1 [69.9 kB]\n[Test and build Python package/test]   | Get:16 http://archive.ubuntu.com/ubuntu focal/universe amd64 proj-data all 6.3.1-1 [7647 kB]\n[Test and build Python package/test]   | Get:17 http://archive.ubuntu.com/ubuntu focal/universe amd64 libproj15 amd64 6.3.1-1 [925 kB]\n[Test and build Python package/test]   | Get:18 http://archive.ubuntu.com/ubuntu focal/universe amd64 libgeotiff5 amd64 1.5.1-2 [53.1 kB]\n[Test and build Python package/test]   | Get:19 http://archive.ubuntu.com/ubuntu focal/universe amd64 libhdf4-0-alt amd64 4.2.14-1ubuntu1 [268 kB]\n[Test and build Python package/test]   | Get:20 http://archive.ubuntu.com/ubuntu focal/universe amd64 libaec0 amd64 1.0.4-1 [19.1 kB]\n[Test and build Python package/test]   | Get:21 http://archive.ubuntu.com/ubuntu focal/universe amd64 libsz2 amd64 1.0.4-1 [5188 B]\n[Test and build Python package/test]   | Get:22 http://archive.ubuntu.com/ubuntu focal/universe amd64 libhdf5-103 amd64 1.10.4+repack-11ubuntu1 [1311 kB]\n[Test and build Python package/test]   | Get:23 http://archive.ubuntu.com/ubuntu focal/universe amd64 libminizip1 amd64 1.1-8build1 [20.2 kB]\n[Test and build Python package/test]   | Get:24 http://archive.ubuntu.com/ubuntu focal/universe amd64 liburiparser1 amd64 0.9.3-2 [39.3 kB]\n[Test and build Python package/test]   | Get:25 http://archive.ubuntu.com/ubuntu focal/universe amd64 libkmlbase1 amd64 1.3.0-8build1 [45.4 kB]\n[Test and build Python package/test]   | Get:26 http://archive.ubuntu.com/ubuntu focal/universe amd64 libkmldom1 amd64 1.3.0-8build1 [152 kB]\n[Test and build Python package/test]   | Get:27 http://archive.ubuntu.com/ubuntu focal/universe amd64 libkmlengine1 amd64 1.3.0-8build1 [72.5 kB]\n[Test and build Python package/test]   | Get:28 http://archive.ubuntu.com/ubuntu focal/universe amd64 libnetcdf15 amd64 1:4.7.3-1 [341 kB]\n[Test and build Python package/test]   | Get:29 http://archive.ubuntu.com/ubuntu focal/universe amd64 libogdi4.1 amd64 4.1.0+ds-1build1 [198 kB]\n[Test and build Python package/test]   | Get:30 http://archive.ubuntu.com/ubuntu focal-updates/main amd64 libopenjp2-7 amd64 2.3.1-1ubuntu4.20.04.1 [141 kB]\n[Test and build Python package/test]   | Get:31 http://archive.ubuntu.com/ubuntu focal-updates/main amd64 libpoppler97 amd64 0.86.1-0ubuntu1.1 [916 kB]\n[Test and build Python package/test]   | Get:32 http://archive.ubuntu.com/ubuntu focal/universe amd64 libqhull7 amd64 2015.2-4 [152 kB]\n[Test and build Python package/test]   | Get:33 http://archive.ubuntu.com/ubuntu focal/universe amd64 libspatialite7 amd64 4.3.0a-6build1 [1286 kB]\n[Test and build Python package/test]   | Get:34 http://archive.ubuntu.com/ubuntu focal/universe amd64 libxerces-c3.2 amd64 3.2.2+debian-1build3 [878 kB]\n[Test and build Python package/test]   | Get:35 http://archive.ubuntu.com/ubuntu focal/universe amd64 libgdal26 amd64 3.0.4+dfsg-1build3 [6156 kB]\n[Test and build Python package/test]   | Get:36 http://archive.ubuntu.com/ubuntu focal/universe amd64 python3-gdal amd64 3.0.4+dfsg-1build3 [527 kB]\n[Test and build Python package/test]   | Get:37 http://archive.ubuntu.com/ubuntu focal/universe amd64 gdal-bin amd64 3.0.4+dfsg-1build3 [256 kB]\n[Test and build Python package/test]   | Get:38 http://archive.ubuntu.com/ubuntu focal/universe amd64 proj-bin amd64 6.3.1-1 [88.8 kB]\n[Test and build Python package/test]   | Fetched 28.1 MB in 7s (3803 kB/s)\n[Test and build Python package/test]   | Selecting previously unselected package poppler-data.\r\n[Test and build Python package/test]   | (Reading database ... \r(Reading database ... 5%\r(Reading database ... 10%\r(Reading database ... 15%\r(Reading database ... 20%\r(Reading database ... 25%\r(Reading database ... 30%\r(Reading database ... 35%\r(Reading database ... 40%\r(Reading database ... 45%\r(Reading database ... 50%\r(Reading database ... 55%\r(Reading database ... 60%\r(Reading database ... 65%\r(Reading database ... 70%\r(Reading database ... 75%\r(Reading database ... 80%\r(Reading database ... 85%\r(Reading database ... 90%\r(Reading database ... 95%\r(Reading database ... 100%\r(Reading database ... 193678 files and directories currently installed.)\r\n[Test and build Python package/test]   | Preparing to unpack .../00-poppler-data_0.4.9-2_all.deb ...\r\n[Test and build Python package/test]   | Unpacking poppler-data (0.4.9-2) ...\r\n[Test and build Python package/test]   | Selecting previously unselected package python3-numpy.\r\n[Test and build Python package/test]   | Preparing to unpack .../01-python3-numpy_1%3a1.17.4-5ubuntu3.1_amd64.deb ...\r\n[Test and build Python package/test]   | Unpacking python3-numpy (1:1.17.4-5ubuntu3.1) ...\r\n[Test and build Python package/test]   | Selecting previously unselected package gdal-data.\r\n[Test and build Python package/test]   | Preparing to unpack .../02-gdal-data_3.0.4+dfsg-1build3_all.deb ...\r\n[Test and build Python package/test]   | Unpacking gdal-data (3.0.4+dfsg-1build3) ...\r\n[Test and build Python package/test]   | Selecting previously unselected package libarpack2:amd64.\r\n[Test and build Python package/test]   | Preparing to unpack .../03-libarpack2_3.7.0-3_amd64.deb ...\r\n[Test and build Python package/test]   | Unpacking libarpack2:amd64 (3.7.0-3) ...\r\n[Test and build Python package/test]   | Selecting previously unselected package libsuperlu5:amd64.\r\n[Test and build Python package/test]   | Preparing to unpack .../04-libsuperlu5_5.2.1+dfsg1-4_amd64.deb ...\r\n[Test and build Python package/test]   | Unpacking libsuperlu5:amd64 (5.2.1+dfsg1-4) ...\r\n[Test and build Python package/test]   | Selecting previously unselected package libarmadillo9.\r\n[Test and build Python package/test]   | Preparing to unpack .../05-libarmadillo9_1%3a9.800.4+dfsg-1build1_amd64.deb ...\r\n[Test and build Python package/test]   | Unpacking libarmadillo9 (1:9.800.4+dfsg-1build1) ...\r\n[Test and build Python package/test]   | Selecting previously unselected package libcfitsio8:amd64.\r\n[Test and build Python package/test]   | Preparing to unpack .../06-libcfitsio8_3.470-3_amd64.deb ...\r\n[Test and build Python package/test]   | Unpacking libcfitsio8:amd64 (3.470-3) ...\r\n[Test and build Python package/test]   | Selecting previously unselected package libcharls2:amd64.\r\n[Test and build Python package/test]   | Preparing to unpack .../07-libcharls2_2.0.0+dfsg-1build1_amd64.deb ...\r\n[Test and build Python package/test]   | Unpacking libcharls2:amd64 (2.0.0+dfsg-1build1) ...\r\n[Test and build Python package/test]   | Selecting previously unselected package libdap25:amd64.\r\n[Test and build Python package/test]   | Preparing to unpack .../08-libdap25_3.20.5-1_amd64.deb ...\r\n[Test and build Python package/test]   | Unpacking libdap25:amd64 (3.20.5-1) ...\r\n[Test and build Python package/test]   | Selecting previously unselected package libdapclient6v5:amd64.\r\n[Test and build Python package/test]   | Preparing to unpack .../09-libdapclient6v5_3.20.5-1_amd64.deb ...\r\n[Test and build Python package/test]   | Unpacking libdapclient6v5:amd64 (3.20.5-1) ...\r\n[Test and build Python package/test]   | Selecting previously unselected package libepsilon1:amd64.\r\n[Test and build Python package/test]   | Preparing to unpack .../10-libepsilon1_0.9.2+dfsg-4_amd64.deb ...\r\n[Test and build Python package/test]   | Unpacking libepsilon1:amd64 (0.9.2+dfsg-4) ...\r\n[Test and build Python package/test]   | Selecting previously unselected package libfreexl1:amd64.\r\n[Test and build Python package/test]   | Preparing to unpack .../11-libfreexl1_1.0.5-3_amd64.deb ...\r\n[Test and build Python package/test]   | Unpacking libfreexl1:amd64 (1.0.5-3) ...\r\n[Test and build Python package/test]   | Selecting previously unselected package libfyba0:amd64.\r\n[Test and build Python package/test]   | Preparing to unpack .../12-libfyba0_4.1.1-6build1_amd64.deb ...\r\n[Test and build Python package/test]   | Unpacking libfyba0:amd64 (4.1.1-6build1) ...\r\n[Test and build Python package/test]   | Selecting previously unselected package libgeos-3.8.0:amd64.\r\n[Test and build Python package/test]   | Preparing to unpack .../13-libgeos-3.8.0_3.8.0-1build1_amd64.deb ...\r\n[Test and build Python package/test]   | Unpacking libgeos-3.8.0:amd64 (3.8.0-1build1) ...\r\n[Test and build Python package/test]   | Selecting previously unselected package libgeos-c1v5:amd64.\r\n[Test and build Python package/test]   | Preparing to unpack .../14-libgeos-c1v5_3.8.0-1build1_amd64.deb ...\r\n[Test and build Python package/test]   | Unpacking libgeos-c1v5:amd64 (3.8.0-1build1) ...\r\n[Test and build Python package/test]   | Selecting previously unselected package proj-data.\r\n[Test and build Python package/test]   | Preparing to unpack .../15-proj-data_6.3.1-1_all.deb ...\r\n[Test and build Python package/test]   | Unpacking proj-data (6.3.1-1) ...\r\n[Test and build Python package/test]   | Selecting previously unselected package libproj15:amd64.\r\n[Test and build Python package/test]   | Preparing to unpack .../16-libproj15_6.3.1-1_amd64.deb ...\r\n[Test and build Python package/test]   | Unpacking libproj15:amd64 (6.3.1-1) ...\r\n[Test and build Python package/test]   | Selecting previously unselected package libgeotiff5:amd64.\r\n[Test and build Python package/test]   | Preparing to unpack .../17-libgeotiff5_1.5.1-2_amd64.deb ...\r\n[Test and build Python package/test]   | Unpacking libgeotiff5:amd64 (1.5.1-2) ...\r\n[Test and build Python package/test]   | Selecting previously unselected package libhdf4-0-alt.\r\n[Test and build Python package/test]   | Preparing to unpack .../18-libhdf4-0-alt_4.2.14-1ubuntu1_amd64.deb ...\r\n[Test and build Python package/test]   | Unpacking libhdf4-0-alt (4.2.14-1ubuntu1) ...\r\n[Test and build Python package/test]   | Selecting previously unselected package libaec0:amd64.\r\n[Test and build Python package/test]   | Preparing to unpack .../19-libaec0_1.0.4-1_amd64.deb ...\r\n[Test and build Python package/test]   | Unpacking libaec0:amd64 (1.0.4-1) ...\r\n[Test and build Python package/test]   | Selecting previously unselected package libsz2:amd64.\r\n[Test and build Python package/test]   | Preparing to unpack .../20-libsz2_1.0.4-1_amd64.deb ...\r\n[Test and build Python package/test]   | Unpacking libsz2:amd64 (1.0.4-1) ...\r\n[Test and build Python package/test]   | Selecting previously unselected package libhdf5-103:amd64.\r\n[Test and build Python package/test]   | Preparing to unpack .../21-libhdf5-103_1.10.4+repack-11ubuntu1_amd64.deb ...\r\n[Test and build Python package/test]   | Unpacking libhdf5-103:amd64 (1.10.4+repack-11ubuntu1) ...\r\n[Test and build Python package/test]   | Selecting previously unselected package libminizip1:amd64.\r\n[Test and build Python package/test]   | Preparing to unpack .../22-libminizip1_1.1-8build1_amd64.deb ...\r\n[Test and build Python package/test]   | Unpacking libminizip1:amd64 (1.1-8build1) ...\r\n[Test and build Python package/test]   | Selecting previously unselected package liburiparser1:amd64.\r\n[Test and build Python package/test]   | Preparing to unpack .../23-liburiparser1_0.9.3-2_amd64.deb ...\r\n[Test and build Python package/test]   | Unpacking liburiparser1:amd64 (0.9.3-2) ...\r\n[Test and build Python package/test]   | Selecting previously unselected package libkmlbase1:amd64.\r\n[Test and build Python package/test]   | Preparing to unpack .../24-libkmlbase1_1.3.0-8build1_amd64.deb ...\r\n[Test and build Python package/test]   | Unpacking libkmlbase1:amd64 (1.3.0-8build1) ...\r\n[Test and build Python package/test]   | Selecting previously unselected package libkmldom1:amd64.\r\n[Test and build Python package/test]   | Preparing to unpack .../25-libkmldom1_1.3.0-8build1_amd64.deb ...\r\n[Test and build Python package/test]   | Unpacking libkmldom1:amd64 (1.3.0-8build1) ...\r\n[Test and build Python package/test]   | Selecting previously unselected package libkmlengine1:amd64.\r\n[Test and build Python package/test]   | Preparing to unpack .../26-libkmlengine1_1.3.0-8build1_amd64.deb ...\r\n[Test and build Python package/test]   | Unpacking libkmlengine1:amd64 (1.3.0-8build1) ...\r\n[Test and build Python package/test]   | Selecting previously unselected package libnetcdf15:amd64.\r\n[Test and build Python package/test]   | Preparing to unpack .../27-libnetcdf15_1%3a4.7.3-1_amd64.deb ...\r\n[Test and build Python package/test]   | Unpacking libnetcdf15:amd64 (1:4.7.3-1) ...\r\n[Test and build Python package/test]   | Selecting previously unselected package libogdi4.1.\r\n[Test and build Python package/test]   | Preparing to unpack .../28-libogdi4.1_4.1.0+ds-1build1_amd64.deb ...\r\n[Test and build Python package/test]   | Unpacking libogdi4.1 (4.1.0+ds-1build1) ...\r\n[Test and build Python package/test]   | Selecting previously unselected package libopenjp2-7:amd64.\r\n[Test and build Python package/test]   | Preparing to unpack .../29-libopenjp2-7_2.3.1-1ubuntu4.20.04.1_amd64.deb ...\r\n[Test and build Python package/test]   | Unpacking libopenjp2-7:amd64 (2.3.1-1ubuntu4.20.04.1) ...\r\n[Test and build Python package/test]   | Selecting previously unselected package libpoppler97:amd64.\r\n[Test and build Python package/test]   | Preparing to unpack .../30-libpoppler97_0.86.1-0ubuntu1.1_amd64.deb ...\r\n[Test and build Python package/test]   | Unpacking libpoppler97:amd64 (0.86.1-0ubuntu1.1) ...\r\n[Test and build Python package/test]   | Selecting previously unselected package libqhull7:amd64.\r\n[Test and build Python package/test]   | Preparing to unpack .../31-libqhull7_2015.2-4_amd64.deb ...\r\n[Test and build Python package/test]   | Unpacking libqhull7:amd64 (2015.2-4) ...\r\n[Test and build Python package/test]   | Selecting previously unselected package libspatialite7:amd64.\r\n[Test and build Python package/test]   | Preparing to unpack .../32-libspatialite7_4.3.0a-6build1_amd64.deb ...\r\n[Test and build Python package/test]   | Unpacking libspatialite7:amd64 (4.3.0a-6build1) ...\r\n[Test and build Python package/test]   | Selecting previously unselected package libxerces-c3.2:amd64.\r\n[Test and build Python package/test]   | Preparing to unpack .../33-libxerces-c3.2_3.2.2+debian-1build3_amd64.deb ...\r\n[Test and build Python package/test]   | Unpacking libxerces-c3.2:amd64 (3.2.2+debian-1build3) ...\r\n[Test and build Python package/test]   | Selecting previously unselected package libgdal26.\r\n[Test and build Python package/test]   | Preparing to unpack .../34-libgdal26_3.0.4+dfsg-1build3_amd64.deb ...\r\n[Test and build Python package/test]   | Unpacking libgdal26 (3.0.4+dfsg-1build3) ...\r\n[Test and build Python package/test]   | Selecting previously unselected package python3-gdal.\r\n[Test and build Python package/test]   | Preparing to unpack .../35-python3-gdal_3.0.4+dfsg-1build3_amd64.deb ...\r\n[Test and build Python package/test]   | Unpacking python3-gdal (3.0.4+dfsg-1build3) ...\r\n[Test and build Python package/test]   | Selecting previously unselected package gdal-bin.\r\n[Test and build Python package/test]   | Preparing to unpack .../36-gdal-bin_3.0.4+dfsg-1build3_amd64.deb ...\r\n[Test and build Python package/test]   | Unpacking gdal-bin (3.0.4+dfsg-1build3) ...\r\n[Test and build Python package/test]   | Selecting previously unselected package proj-bin.\r\n[Test and build Python package/test]   | Preparing to unpack .../37-proj-bin_6.3.1-1_amd64.deb ...\r\n[Test and build Python package/test]   | Unpacking proj-bin (6.3.1-1) ...\r\n[Test and build Python package/test]   | Setting up libxerces-c3.2:amd64 (3.2.2+debian-1build3) ...\r\n[Test and build Python package/test]   | Setting up proj-data (6.3.1-1) ...\r\n[Test and build Python package/test]   | Setting up libgeos-3.8.0:amd64 (3.8.0-1build1) ...\r\n[Test and build Python package/test]   | Setting up libogdi4.1 (4.1.0+ds-1build1) ...\r\n[Test and build Python package/test]   | Setting up libcharls2:amd64 (2.0.0+dfsg-1build1) ...\r\n[Test and build Python package/test]   | Setting up libminizip1:amd64 (1.1-8build1) ...\r\n[Test and build Python package/test]   | Setting up libarpack2:amd64 (3.7.0-3) ...\r\n[Test and build Python package/test]   | Setting up libsuperlu5:amd64 (5.2.1+dfsg1-4) ...\r\n[Test and build Python package/test]   | Setting up libdap25:amd64 (3.20.5-1) ...\r\n[Test and build Python package/test]   | Setting up libqhull7:amd64 (2015.2-4) ...\r\n[Test and build Python package/test]   | Setting up libepsilon1:amd64 (0.9.2+dfsg-4) ...\r\n[Test and build Python package/test]   | Setting up libaec0:amd64 (1.0.4-1) ...\r\n[Test and build Python package/test]   | Setting up gdal-data (3.0.4+dfsg-1build3) ...\r\n[Test and build Python package/test]   | Setting up poppler-data (0.4.9-2) ...\r\n[Test and build Python package/test]   | Setting up libcfitsio8:amd64 (3.470-3) ...\r\n[Test and build Python package/test]   | Setting up libgeos-c1v5:amd64 (3.8.0-1build1) ...\r\n[Test and build Python package/test]   | Setting up libproj15:amd64 (6.3.1-1) ...\r\n[Test and build Python package/test]   | Setting up python3-numpy (1:1.17.4-5ubuntu3.1) ...\r\n[Test and build Python package/test]   | Setting up libhdf4-0-alt (4.2.14-1ubuntu1) ...\r\n[Test and build Python package/test]   | Setting up liburiparser1:amd64 (0.9.3-2) ...\r\n[Test and build Python package/test]   | Setting up libfreexl1:amd64 (1.0.5-3) ...\r\n[Test and build Python package/test]   | Setting up libfyba0:amd64 (4.1.1-6build1) ...\r\n[Test and build Python package/test]   | Setting up libkmlbase1:amd64 (1.3.0-8build1) ...\r\n[Test and build Python package/test]   | Setting up libdapclient6v5:amd64 (3.20.5-1) ...\r\n[Test and build Python package/test]   | Setting up libopenjp2-7:amd64 (2.3.1-1ubuntu4.20.04.1) ...\r\n[Test and build Python package/test]   | Setting up libarmadillo9 (1:9.800.4+dfsg-1build1) ...\r\n[Test and build Python package/test]   | Setting up libsz2:amd64 (1.0.4-1) ...\r\n[Test and build Python package/test]   | Setting up libkmldom1:amd64 (1.3.0-8build1) ...\r\n[Test and build Python package/test]   | Setting up libspatialite7:amd64 (4.3.0a-6build1) ...\r\n[Test and build Python package/test]   | Setting up libkmlengine1:amd64 (1.3.0-8build1) ...\r\n[Test and build Python package/test]   | Setting up proj-bin (6.3.1-1) ...\r\n[Test and build Python package/test]   | Setting up libpoppler97:amd64 (0.86.1-0ubuntu1.1) ...\r\n[Test and build Python package/test]   | Setting up libgeotiff5:amd64 (1.5.1-2) ...\r\n[Test and build Python package/test]   | Setting up libhdf5-103:amd64 (1.10.4+repack-11ubuntu1) ...\r\n[Test and build Python package/test]   | Setting up libnetcdf15:amd64 (1:4.7.3-1) ...\r\n[Test and build Python package/test]   | Setting up libgdal26 (3.0.4+dfsg-1build3) ...\r\n[Test and build Python package/test]   | Setting up python3-gdal (3.0.4+dfsg-1build3) ...\r\n[Test and build Python package/test]   | Setting up gdal-bin (3.0.4+dfsg-1build3) ...\r\n[Test and build Python package/test]   | Processing triggers for libc-bin (2.31-0ubuntu9.2) ...\r\n[Test and build Python package/test]   | Processing triggers for fontconfig (2.13.1-2ubuntu3) ...\r\n[Test and build Python package/test]   | Processing /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/opencivicdata-pupa\n[Test and build Python package/test]   |   DEPRECATION: A future pip version will change local packages to be built in-place without first copying to a temporary directory. We recommend you use --use-feature=in-tree-build to test your packages with this new behavior before it becomes the default.\n[Test and build Python package/test]   |    pip 21.3 will remove support for this functionality. You can find discussion regarding this at https://github.com/pypa/pip/issues/7555.\n[Test and build Python package/test]   | Collecting Django==2.2\n[Test and build Python package/test]   |   Downloading Django-2.2-py3-none-any.whl (7.4 MB)\n[Test and build Python package/test]   | Collecting sqlparse\n[Test and build Python package/test]   |   Downloading sqlparse-0.4.4-py3-none-any.whl (41 kB)\n[Test and build Python package/test]   | Collecting pytz\n[Test and build Python package/test]   |   Downloading pytz-2023.3-py2.py3-none-any.whl (502 kB)\n[Test and build Python package/test]   | Collecting opencivicdata>=3.3.0\n[Test and build Python package/test]   |   Downloading opencivicdata-3.3.0-py2.py3-none-any.whl (84 kB)\n[Test and build Python package/test]   | Collecting dj_database_url>=0.3.0\n[Test and build Python package/test]   |   Downloading dj_database_url-2.0.0-py3-none-any.whl (7.6 kB)\n[Test and build Python package/test]   | Collecting scrapelib>=1.0\n[Test and build Python package/test]   |   Downloading scrapelib-1.2.0-py2.py3-none-any.whl (16 kB)\n[Test and build Python package/test]   | Collecting jsonschema>=3.0.0\n[Test and build Python package/test]   |   Downloading jsonschema-4.0.0a6-py2.py3-none-any.whl (74 kB)\n[Test and build Python package/test]   | Collecting psycopg2-binary\n[Test and build Python package/test]   |   Downloading psycopg2-binary-2.9.6.tar.gz (384 kB)\n[Test and build Python package/test]   | Collecting mock\n[Test and build Python package/test]   |   Downloading mock-5.0.2-py3-none-any.whl (30 kB)\n[Test and build Python package/test]   | Collecting pytest>=3.6\n[Test and build Python package/test]   |   Downloading pytest-7.0.1-py3-none-any.whl (296 kB)\n[Test and build Python package/test]   | Collecting pytest-cov\n[Test and build Python package/test]   |   Downloading pytest_cov-4.0.0-py3-none-any.whl (21 kB)\n[Test and build Python package/test]   | Collecting pytest-django\n[Test and build Python package/test]   |   Downloading pytest_django-4.5.2-py3-none-any.whl (20 kB)\n[Test and build Python package/test]   | Collecting freezegun\n[Test and build Python package/test]   |   Downloading freezegun-1.2.2-py3-none-any.whl (17 kB)\n[Test and build Python package/test]   | Collecting coveralls\n[Test and build Python package/test]   |   Downloading coveralls-3.3.1-py2.py3-none-any.whl (14 kB)\n[Test and build Python package/test]   | Collecting coverage<=6.5.0\n[Test and build Python package/test]   |   Downloading coverage-6.2-cp36-cp36m-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_12_x86_64.manylinux2010_x86_64.whl (212 kB)\n[Test and build Python package/test]   | Collecting flake8\n[Test and build Python package/test]   |   Downloading flake8-5.0.4-py2.py3-none-any.whl (61 kB)\n[Test and build Python package/test]   | Collecting typing-extensions>=3.10.0.0\n[Test and build Python package/test]   |   Downloading typing_extensions-4.1.1-py3-none-any.whl (26 kB)\n[Test and build Python package/test]   | Collecting dj_database_url>=0.3.0\n[Test and build Python package/test]   |   Downloading dj_database_url-1.3.0-py3-none-any.whl (7.4 kB)\n[Test and build Python package/test]   |   Downloading dj_database_url-1.2.0-py3-none-any.whl (7.1 kB)\n[Test and build Python package/test]   |   Downloading dj_database_url-1.1.0-py3-none-any.whl (6.9 kB)\n[Test and build Python package/test]   |   Downloading dj_database_url-1.0.0-py3-none-any.whl (6.6 kB)\n[Test and build Python package/test]   |   Downloading dj_database_url-0.5.0-py2.py3-none-any.whl (5.5 kB)\n[Test and build Python package/test]   | Collecting pyrsistent!=0.17.0,!=0.17.1,!=0.17.2,>=0.14.0\n[Test and build Python package/test]   |   Downloading pyrsistent-0.18.0-cp36-cp36m-manylinux1_x86_64.whl (117 kB)\n[Test and build Python package/test]   | Collecting importlib-metadata\n[Test and build Python package/test]   |   Downloading importlib_metadata-4.8.3-py3-none-any.whl (17 kB)\n[Test and build Python package/test]   | Collecting attrs>=17.4.0\n[Test and build Python package/test]   |   Downloading attrs-22.2.0-py3-none-any.whl (60 kB)\n[Test and build Python package/test]   | Collecting iniconfig\n[Test and build Python package/test]   |   Downloading iniconfig-1.1.1-py2.py3-none-any.whl (5.0 kB)\n[Test and build Python package/test]   | Collecting tomli>=1.0.0\n[Test and build Python package/test]   |   Downloading tomli-1.2.3-py3-none-any.whl (12 kB)\n[Test and build Python package/test]   | Collecting packaging\n[Test and build Python package/test]   |   Downloading packaging-21.3-py3-none-any.whl (40 kB)\n[Test and build Python package/test]   | Collecting py>=1.8.2\n[Test and build Python package/test]   |   Downloading py-1.11.0-py2.py3-none-any.whl (98 kB)\n[Test and build Python package/test]   | Collecting pluggy<2.0,>=0.12\n[Test and build Python package/test]   |   Downloading pluggy-1.0.0-py2.py3-none-any.whl (13 kB)\n[Test and build Python package/test]   | Collecting zipp>=0.5\n[Test and build Python package/test]   |   Downloading zipp-3.6.0-py3-none-any.whl (5.3 kB)\n[Test and build Python package/test]   | Collecting requests[security]>=2\n[Test and build Python package/test]   |   Downloading requests-2.27.1-py2.py3-none-any.whl (63 kB)\n[Test and build Python package/test]   | Collecting certifi>=2017.4.17\n[Test and build Python package/test]   |   Downloading certifi-2023.5.7-py3-none-any.whl (156 kB)\n[Test and build Python package/test]   | Collecting urllib3<1.27,>=1.21.1\n[Test and build Python package/test]   |   Downloading urllib3-1.26.16-py2.py3-none-any.whl (143 kB)\n[Test and build Python package/test]   | Collecting charset-normalizer~=2.0.0\n[Test and build Python package/test]   |   Downloading charset_normalizer-2.0.12-py3-none-any.whl (39 kB)\n[Test and build Python package/test]   | Collecting idna<4,>=2.5\n[Test and build Python package/test]   |   Downloading idna-3.4-py3-none-any.whl (61 kB)\n[Test and build Python package/test]   | Collecting docopt>=0.6.1\n[Test and build Python package/test]   |   Downloading docopt-0.6.2.tar.gz (25 kB)\n[Test and build Python package/test]   | Collecting mccabe<0.8.0,>=0.7.0\n[Test and build Python package/test]   |   Downloading mccabe-0.7.0-py2.py3-none-any.whl (7.3 kB)\n[Test and build Python package/test]   | Collecting pycodestyle<2.10.0,>=2.9.0\n[Test and build Python package/test]   |   Downloading pycodestyle-2.9.1-py2.py3-none-any.whl (41 kB)\n[Test and build Python package/test]   | Collecting pyflakes<2.6.0,>=2.5.0\n[Test and build Python package/test]   |   Downloading pyflakes-2.5.0-py2.py3-none-any.whl (66 kB)\n[Test and build Python package/test]   | Collecting importlib-metadata\n[Test and build Python package/test]   |   Downloading importlib_metadata-4.2.0-py3-none-any.whl (16 kB)\n[Test and build Python package/test]   | Collecting python-dateutil>=2.7\n[Test and build Python package/test]   |   Downloading python_dateutil-2.8.2-py2.py3-none-any.whl (247 kB)\n[Test and build Python package/test]   | Collecting six>=1.5\n[Test and build Python package/test]   |   Downloading six-1.16.0-py2.py3-none-any.whl (11 kB)\n[Test and build Python package/test]   | Collecting pyparsing!=3.0.5,>=2.0.2\n[Test and build Python package/test]   |   Downloading pyparsing-3.1.0b2-py3-none-any.whl (102 kB)\n[Test and build Python package/test]   | Using legacy 'setup.py install' for docopt, since package 'wheel' is not installed.\n[Test and build Python package/test]   | Using legacy 'setup.py install' for psycopg2-binary, since package 'wheel' is not installed.\n[Test and build Python package/test]   | Using legacy 'setup.py install' for pupa, since package 'wheel' is not installed.\n[Test and build Python package/test]   | Installing collected packages: zipp, urllib3, typing-extensions, idna, charset-normalizer, certifi, sqlparse, requests, pytz, pyparsing, importlib-metadata, tomli, six, pyrsistent, py, psycopg2-binary, pluggy, packaging, iniconfig, Django, coverage, attrs, scrapelib, python-dateutil, pytest, pyflakes, pycodestyle, opencivicdata, mccabe, jsonschema, docopt, dj-database-url, pytest-django, pytest-cov, pupa, mock, freezegun, flake8, coveralls\n[Test and build Python package/test]   |     Running setup.py install for psycopg2-binary: started\n[Test and build Python package/test]   |     Running setup.py install for psycopg2-binary: finished with status 'done'\n[Test and build Python package/test]   |     Running setup.py install for docopt: started\n[Test and build Python package/test]   |     Running setup.py install for docopt: finished with status 'done'\n[Test and build Python package/test]   |     Running setup.py install for pupa: started\n[Test and build Python package/test]   |     Running setup.py install for pupa: finished with status 'done'\n[Test and build Python package/test]   | Successfully installed Django-2.2 attrs-22.2.0 certifi-2023.5.7 charset-normalizer-2.0.12 coverage-6.2 coveralls-3.3.1 dj-database-url-0.5.0 docopt-0.6.2 flake8-5.0.4 freezegun-1.2.2 idna-3.4 importlib-metadata-4.2.0 iniconfig-1.1.1 jsonschema-4.0.0a6 mccabe-0.7.0 mock-5.0.2 opencivicdata-3.3.0 packaging-21.3 pluggy-1.0.0 psycopg2-binary-2.9.6 pupa-0.11.0 py-1.11.0 pycodestyle-2.9.1 pyflakes-2.5.0 pyparsing-3.1.0b2 pyrsistent-0.18.0 pytest-7.0.1 pytest-cov-4.0.0 pytest-django-4.5.2 python-dateutil-2.8.2 pytz-2023.3 requests-2.27.1 scrapelib-1.2.0 six-1.16.0 sqlparse-0.4.4 tomli-1.2.3 typing-extensions-4.1.1 urllib3-1.26.16 zipp-3.6.0\n[Test and build Python package/test]   | WARNING: You are using pip version 21.2.4; however, version 21.3.1 is available.\n[Test and build Python package/test]   | You should consider upgrading via the '/opt/hostedtoolcache/Python/3.6.14/x64/bin/python -m pip install --upgrade pip' command.\n[Test and build Python package/test]   \u2705  Success - Main Install dependencies\n[Test and build Python package/test] \u2b50 Run Main Lint with flake8\n[Test and build Python package/test]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/3] user= workdir=\n[Test and build Python package/test]   \u2705  Success - Main Lint with flake8\n[Test and build Python package/test] \u2b50 Run Main Test with pytest\n[Test and build Python package/test]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/4] user= workdir=\n[Test and build Python package/test]   | ============================= test session starts ==============================\n[Test and build Python package/test]   | platform linux -- Python 3.6.14, pytest-7.0.1, pluggy-1.0.0\n[Test and build Python package/test]   | django: settings: pupa.tests.django_settings (from option)\n[Test and build Python package/test]   | rootdir: /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/opencivicdata-pupa\n[Test and build Python package/test]   | plugins: django-4.5.2, cov-4.0.0\n[Test and build Python package/test]   | collected 185 items\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | pupa/tests/clean/test_clean.py EEE                                       [  1%]\n[Test and build Python package/test]   | pupa/tests/importers/test_base_importer.py EEEEEEEE                      [  5%]\n[Test and build Python package/test]   | pupa/tests/importers/test_bill_importer.py EEEEEEEEE                     [ 10%]\n[Test and build Python package/test]   | pupa/tests/importers/test_event_importer.py EEEEEEEEEE                   [ 16%]\n[Test and build Python package/test]   | pupa/tests/importers/test_jurisdiction_importer.py EEE                   [ 17%]\n[Test and build Python package/test]   | pupa/tests/importers/test_membership_importer.py EEEEEE                  [ 21%]\n[Test and build Python package/test]   | pupa/tests/importers/test_organization_importer.py EEEEEEEEEEEE          [ 27%]\n[Test and build Python package/test]   | pupa/tests/importers/test_people_importer.py EEEEEEEEEEEE                [ 34%]\n[Test and build Python package/test]   | pupa/tests/importers/test_post_importer.py EEE                           [ 35%]\n[Test and build Python package/test]   | pupa/tests/importers/test_vote_event_importer.py EEEEEEEEE               [ 40%]\n[Test and build Python package/test]   | pupa/tests/reports/test_session_report.py EEEEEEEEE                      [ 45%]\n[Test and build Python package/test]   | pupa/tests/importers/test_base_importer.py ...                           [ 47%]\n[Test and build Python package/test]   | pupa/tests/importers/test_topsort.py ...........                         [ 52%]\n[Test and build Python package/test]   | pupa/tests/scrape/test_bill_scrape.py ..............                     [ 60%]\n[Test and build Python package/test]   | pupa/tests/scrape/test_event_scrape.py ................                  [ 69%]\n[Test and build Python package/test]   | pupa/tests/scrape/test_jurisdiction_scrape.py ....                       [ 71%]\n[Test and build Python package/test]   | pupa/tests/scrape/test_model_basics.py ............                      [ 77%]\n[Test and build Python package/test]   | pupa/tests/scrape/test_people_org_scrape.py ....................         [ 88%]\n[Test and build Python package/test]   | pupa/tests/scrape/test_scraper.py ........                               [ 92%]\n[Test and build Python package/test]   | pupa/tests/scrape/test_utils.py ..                                       [ 94%]\n[Test and build Python package/test]   | pupa/tests/scrape/test_vote_event_scrape.py ...........                  [100%]\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | ==================================== ERRORS ====================================\n[Test and build Python package/test]   | ___________________ ERROR at setup of test_get_stale_objects ___________________\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def ensure_connection(self):\n[Test and build Python package/test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[Test and build Python package/test]   |         if self.connection is None:\n[Test and build Python package/test]   |             with self.wrap_database_errors:\n[Test and build Python package/test]   | >               self.connect()\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(self):\n[Test and build Python package/test]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[Test and build Python package/test]   |         # Check for invalid configurations.\n[Test and build Python package/test]   |         self.check_settings()\n[Test and build Python package/test]   |         # In case the previous connection was closed while in an atomic block\n[Test and build Python package/test]   |         self.in_atomic_block = False\n[Test and build Python package/test]   |         self.savepoint_ids = []\n[Test and build Python package/test]   |         self.needs_rollback = False\n[Test and build Python package/test]   |         # Reset parameters defining when to close the connection\n[Test and build Python package/test]   |         max_age = self.settings_dict['CONN_MAX_AGE']\n[Test and build Python package/test]   |         self.close_at = None if max_age is None else time.time() + max_age\n[Test and build Python package/test]   |         self.closed_in_transaction = False\n[Test and build Python package/test]   |         self.errors_occurred = False\n[Test and build Python package/test]   |         # Establish the connection\n[Test and build Python package/test]   |         conn_params = self.get_connection_params()\n[Test and build Python package/test]   | >       self.connection = self.get_new_connection(conn_params)\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:195: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | conn_params = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def get_new_connection(self, conn_params):\n[Test and build Python package/test]   | >       connection = Database.connect(**conn_params)\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/postgresql/base.py:178: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | dsn = 'user=test password=test host=localhost port=5432 dbname=test'\n[Test and build Python package/test]   | connection_factory = None, cursor_factory = None\n[Test and build Python package/test]   | kwargs = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | kwasync = {}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         Create a new database connection.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         The connection parameters can be specified as a string:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         or using a set of keyword arguments:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Or as a mix of both. The basic connection parameters are:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         - *dbname*: the database name\n[Test and build Python package/test]   |         - *database*: the database name (only as keyword argument)\n[Test and build Python package/test]   |         - *user*: user name used to authenticate\n[Test and build Python package/test]   |         - *password*: password used to authenticate\n[Test and build Python package/test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Test and build Python package/test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *connection_factory* parameter a different class or connections\n[Test and build Python package/test]   |         factory can be specified. It should be a callable object taking a dsn\n[Test and build Python package/test]   |         argument.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Test and build Python package/test]   |         used by cursor().\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Test and build Python package/test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Any other keyword parameter will be passed to the underlying client\n[Test and build Python package/test]   |         library: the list of supported parameters depends on the library version.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         kwasync = {}\n[Test and build Python package/test]   |         if 'async' in kwargs:\n[Test and build Python package/test]   |             kwasync['async'] = kwargs.pop('async')\n[Test and build Python package/test]   |         if 'async_' in kwargs:\n[Test and build Python package/test]   |             kwasync['async_'] = kwargs.pop('async_')\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Test and build Python package/test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Test and build Python package/test]   | E       psycopg2.OperationalError: could not connect to server: Connection refused\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (127.0.0.1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | E       could not connect to server: Cannot assign requested address\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (::1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/psycopg2/__init__.py:122: OperationalError\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | The above exception was the direct cause of the following exception:\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | request = <SubRequest '_django_db_marker' for <Function test_get_stale_objects>>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     @pytest.fixture(autouse=True)\n[Test and build Python package/test]   |     def _django_db_marker(request) -> None:\n[Test and build Python package/test]   |         \"\"\"Implement the django_db marker, internal to pytest-django.\"\"\"\n[Test and build Python package/test]   |         marker = request.node.get_closest_marker(\"django_db\")\n[Test and build Python package/test]   |         if marker:\n[Test and build Python package/test]   | >           request.getfixturevalue(\"_django_db_helper\")\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/pytest_django/plugin.py:465: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/pytest_django/fixtures.py:125: in django_db_setup\n[Test and build Python package/test]   |     **setup_databases_args\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/test/utils.py:174: in setup_databases\n[Test and build Python package/test]   |     serialize=connection.settings_dict.get('TEST', {}).get('SERIALIZE', True),\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/creation.py:58: in create_test_db\n[Test and build Python package/test]   |     self._create_test_db(verbosity, autoclobber, keepdb)\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/creation.py:168: in _create_test_db\n[Test and build Python package/test]   |     with self._nodb_connection.cursor() as cursor:\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:256: in cursor\n[Test and build Python package/test]   |     return self._cursor()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:233: in _cursor\n[Test and build Python package/test]   |     self.ensure_connection()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: in ensure_connection\n[Test and build Python package/test]   |     self.connect()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/utils.py:89: in __exit__\n[Test and build Python package/test]   |     raise dj_exc_value.with_traceback(traceback) from exc_value\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: in ensure_connection\n[Test and build Python package/test]   |     self.connect()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:195: in connect\n[Test and build Python package/test]   |     self.connection = self.get_new_connection(conn_params)\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/postgresql/base.py:178: in get_new_connection\n[Test and build Python package/test]   |     connection = Database.connect(**conn_params)\n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | dsn = 'user=test password=test host=localhost port=5432 dbname=test'\n[Test and build Python package/test]   | connection_factory = None, cursor_factory = None\n[Test and build Python package/test]   | kwargs = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | kwasync = {}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         Create a new database connection.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         The connection parameters can be specified as a string:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         or using a set of keyword arguments:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Or as a mix of both. The basic connection parameters are:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         - *dbname*: the database name\n[Test and build Python package/test]   |         - *database*: the database name (only as keyword argument)\n[Test and build Python package/test]   |         - *user*: user name used to authenticate\n[Test and build Python package/test]   |         - *password*: password used to authenticate\n[Test and build Python package/test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Test and build Python package/test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *connection_factory* parameter a different class or connections\n[Test and build Python package/test]   |         factory can be specified. It should be a callable object taking a dsn\n[Test and build Python package/test]   |         argument.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Test and build Python package/test]   |         used by cursor().\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Test and build Python package/test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Any other keyword parameter will be passed to the underlying client\n[Test and build Python package/test]   |         library: the list of supported parameters depends on the library version.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         kwasync = {}\n[Test and build Python package/test]   |         if 'async' in kwargs:\n[Test and build Python package/test]   |             kwasync['async'] = kwargs.pop('async')\n[Test and build Python package/test]   |         if 'async_' in kwargs:\n[Test and build Python package/test]   |             kwasync['async_'] = kwargs.pop('async_')\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Test and build Python package/test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Test and build Python package/test]   | E       django.db.utils.OperationalError: could not connect to server: Connection refused\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (127.0.0.1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | E       could not connect to server: Cannot assign requested address\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (::1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/psycopg2/__init__.py:122: OperationalError\n[Test and build Python package/test]   | _________________ ERROR at setup of test_remove_stale_objects __________________\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def ensure_connection(self):\n[Test and build Python package/test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[Test and build Python package/test]   |         if self.connection is None:\n[Test and build Python package/test]   |             with self.wrap_database_errors:\n[Test and build Python package/test]   | >               self.connect()\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(self):\n[Test and build Python package/test]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[Test and build Python package/test]   |         # Check for invalid configurations.\n[Test and build Python package/test]   |         self.check_settings()\n[Test and build Python package/test]   |         # In case the previous connection was closed while in an atomic block\n[Test and build Python package/test]   |         self.in_atomic_block = False\n[Test and build Python package/test]   |         self.savepoint_ids = []\n[Test and build Python package/test]   |         self.needs_rollback = False\n[Test and build Python package/test]   |         # Reset parameters defining when to close the connection\n[Test and build Python package/test]   |         max_age = self.settings_dict['CONN_MAX_AGE']\n[Test and build Python package/test]   |         self.close_at = None if max_age is None else time.time() + max_age\n[Test and build Python package/test]   |         self.closed_in_transaction = False\n[Test and build Python package/test]   |         self.errors_occurred = False\n[Test and build Python package/test]   |         # Establish the connection\n[Test and build Python package/test]   |         conn_params = self.get_connection_params()\n[Test and build Python package/test]   | >       self.connection = self.get_new_connection(conn_params)\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:195: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | conn_params = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def get_new_connection(self, conn_params):\n[Test and build Python package/test]   | >       connection = Database.connect(**conn_params)\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/postgresql/base.py:178: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | dsn = 'user=test password=test host=localhost port=5432 dbname=test'\n[Test and build Python package/test]   | connection_factory = None, cursor_factory = None\n[Test and build Python package/test]   | kwargs = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | kwasync = {}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         Create a new database connection.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         The connection parameters can be specified as a string:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         or using a set of keyword arguments:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Or as a mix of both. The basic connection parameters are:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         - *dbname*: the database name\n[Test and build Python package/test]   |         - *database*: the database name (only as keyword argument)\n[Test and build Python package/test]   |         - *user*: user name used to authenticate\n[Test and build Python package/test]   |         - *password*: password used to authenticate\n[Test and build Python package/test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Test and build Python package/test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *connection_factory* parameter a different class or connections\n[Test and build Python package/test]   |         factory can be specified. It should be a callable object taking a dsn\n[Test and build Python package/test]   |         argument.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Test and build Python package/test]   |         used by cursor().\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Test and build Python package/test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Any other keyword parameter will be passed to the underlying client\n[Test and build Python package/test]   |         library: the list of supported parameters depends on the library version.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         kwasync = {}\n[Test and build Python package/test]   |         if 'async' in kwargs:\n[Test and build Python package/test]   |             kwasync['async'] = kwargs.pop('async')\n[Test and build Python package/test]   |         if 'async_' in kwargs:\n[Test and build Python package/test]   |             kwasync['async_'] = kwargs.pop('async_')\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Test and build Python package/test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Test and build Python package/test]   | E       psycopg2.OperationalError: could not connect to server: Connection refused\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (127.0.0.1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | E       could not connect to server: Cannot assign requested address\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (::1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/psycopg2/__init__.py:122: OperationalError\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | The above exception was the direct cause of the following exception:\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | request = <SubRequest '_django_db_marker' for <Function test_remove_stale_objects>>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     @pytest.fixture(autouse=True)\n[Test and build Python package/test]   |     def _django_db_marker(request) -> None:\n[Test and build Python package/test]   |         \"\"\"Implement the django_db marker, internal to pytest-django.\"\"\"\n[Test and build Python package/test]   |         marker = request.node.get_closest_marker(\"django_db\")\n[Test and build Python package/test]   |         if marker:\n[Test and build Python package/test]   | >           request.getfixturevalue(\"_django_db_helper\")\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/pytest_django/plugin.py:465: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/pytest_django/fixtures.py:125: in django_db_setup\n[Test and build Python package/test]   |     **setup_databases_args\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/test/utils.py:174: in setup_databases\n[Test and build Python package/test]   |     serialize=connection.settings_dict.get('TEST', {}).get('SERIALIZE', True),\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/creation.py:58: in create_test_db\n[Test and build Python package/test]   |     self._create_test_db(verbosity, autoclobber, keepdb)\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/creation.py:168: in _create_test_db\n[Test and build Python package/test]   |     with self._nodb_connection.cursor() as cursor:\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:256: in cursor\n[Test and build Python package/test]   |     return self._cursor()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:233: in _cursor\n[Test and build Python package/test]   |     self.ensure_connection()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: in ensure_connection\n[Test and build Python package/test]   |     self.connect()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/utils.py:89: in __exit__\n[Test and build Python package/test]   |     raise dj_exc_value.with_traceback(traceback) from exc_value\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: in ensure_connection\n[Test and build Python package/test]   |     self.connect()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:195: in connect\n[Test and build Python package/test]   |     self.connection = self.get_new_connection(conn_params)\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/postgresql/base.py:178: in get_new_connection\n[Test and build Python package/test]   |     connection = Database.connect(**conn_params)\n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | dsn = 'user=test password=test host=localhost port=5432 dbname=test'\n[Test and build Python package/test]   | connection_factory = None, cursor_factory = None\n[Test and build Python package/test]   | kwargs = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | kwasync = {}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         Create a new database connection.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         The connection parameters can be specified as a string:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         or using a set of keyword arguments:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Or as a mix of both. The basic connection parameters are:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         - *dbname*: the database name\n[Test and build Python package/test]   |         - *database*: the database name (only as keyword argument)\n[Test and build Python package/test]   |         - *user*: user name used to authenticate\n[Test and build Python package/test]   |         - *password*: password used to authenticate\n[Test and build Python package/test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Test and build Python package/test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *connection_factory* parameter a different class or connections\n[Test and build Python package/test]   |         factory can be specified. It should be a callable object taking a dsn\n[Test and build Python package/test]   |         argument.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Test and build Python package/test]   |         used by cursor().\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Test and build Python package/test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Any other keyword parameter will be passed to the underlying client\n[Test and build Python package/test]   |         library: the list of supported parameters depends on the library version.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         kwasync = {}\n[Test and build Python package/test]   |         if 'async' in kwargs:\n[Test and build Python package/test]   |             kwasync['async'] = kwargs.pop('async')\n[Test and build Python package/test]   |         if 'async_' in kwargs:\n[Test and build Python package/test]   |             kwasync['async_'] = kwargs.pop('async_')\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Test and build Python package/test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Test and build Python package/test]   | E       django.db.utils.OperationalError: could not connect to server: Connection refused\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (127.0.0.1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | E       could not connect to server: Cannot assign requested address\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (::1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/psycopg2/__init__.py:122: OperationalError\n[Test and build Python package/test]   | _____________________ ERROR at setup of test_clean_command _____________________\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def ensure_connection(self):\n[Test and build Python package/test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[Test and build Python package/test]   |         if self.connection is None:\n[Test and build Python package/test]   |             with self.wrap_database_errors:\n[Test and build Python package/test]   | >               self.connect()\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(self):\n[Test and build Python package/test]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[Test and build Python package/test]   |         # Check for invalid configurations.\n[Test and build Python package/test]   |         self.check_settings()\n[Test and build Python package/test]   |         # In case the previous connection was closed while in an atomic block\n[Test and build Python package/test]   |         self.in_atomic_block = False\n[Test and build Python package/test]   |         self.savepoint_ids = []\n[Test and build Python package/test]   |         self.needs_rollback = False\n[Test and build Python package/test]   |         # Reset parameters defining when to close the connection\n[Test and build Python package/test]   |         max_age = self.settings_dict['CONN_MAX_AGE']\n[Test and build Python package/test]   |         self.close_at = None if max_age is None else time.time() + max_age\n[Test and build Python package/test]   |         self.closed_in_transaction = False\n[Test and build Python package/test]   |         self.errors_occurred = False\n[Test and build Python package/test]   |         # Establish the connection\n[Test and build Python package/test]   |         conn_params = self.get_connection_params()\n[Test and build Python package/test]   | >       self.connection = self.get_new_connection(conn_params)\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:195: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | conn_params = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def get_new_connection(self, conn_params):\n[Test and build Python package/test]   | >       connection = Database.connect(**conn_params)\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/postgresql/base.py:178: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | dsn = 'user=test password=test host=localhost port=5432 dbname=test'\n[Test and build Python package/test]   | connection_factory = None, cursor_factory = None\n[Test and build Python package/test]   | kwargs = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | kwasync = {}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         Create a new database connection.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         The connection parameters can be specified as a string:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         or using a set of keyword arguments:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Or as a mix of both. The basic connection parameters are:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         - *dbname*: the database name\n[Test and build Python package/test]   |         - *database*: the database name (only as keyword argument)\n[Test and build Python package/test]   |         - *user*: user name used to authenticate\n[Test and build Python package/test]   |         - *password*: password used to authenticate\n[Test and build Python package/test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Test and build Python package/test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *connection_factory* parameter a different class or connections\n[Test and build Python package/test]   |         factory can be specified. It should be a callable object taking a dsn\n[Test and build Python package/test]   |         argument.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Test and build Python package/test]   |         used by cursor().\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Test and build Python package/test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Any other keyword parameter will be passed to the underlying client\n[Test and build Python package/test]   |         library: the list of supported parameters depends on the library version.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         kwasync = {}\n[Test and build Python package/test]   |         if 'async' in kwargs:\n[Test and build Python package/test]   |             kwasync['async'] = kwargs.pop('async')\n[Test and build Python package/test]   |         if 'async_' in kwargs:\n[Test and build Python package/test]   |             kwasync['async_'] = kwargs.pop('async_')\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Test and build Python package/test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Test and build Python package/test]   | E       psycopg2.OperationalError: could not connect to server: Connection refused\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (127.0.0.1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | E       could not connect to server: Cannot assign requested address\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (::1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/psycopg2/__init__.py:122: OperationalError\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | The above exception was the direct cause of the following exception:\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | request = <SubRequest '_django_db_marker' for <Function test_clean_command>>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     @pytest.fixture(autouse=True)\n[Test and build Python package/test]   |     def _django_db_marker(request) -> None:\n[Test and build Python package/test]   |         \"\"\"Implement the django_db marker, internal to pytest-django.\"\"\"\n[Test and build Python package/test]   |         marker = request.node.get_closest_marker(\"django_db\")\n[Test and build Python package/test]   |         if marker:\n[Test and build Python package/test]   | >           request.getfixturevalue(\"_django_db_helper\")\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/pytest_django/plugin.py:465: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/pytest_django/fixtures.py:125: in django_db_setup\n[Test and build Python package/test]   |     **setup_databases_args\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/test/utils.py:174: in setup_databases\n[Test and build Python package/test]   |     serialize=connection.settings_dict.get('TEST', {}).get('SERIALIZE', True),\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/creation.py:58: in create_test_db\n[Test and build Python package/test]   |     self._create_test_db(verbosity, autoclobber, keepdb)\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/creation.py:168: in _create_test_db\n[Test and build Python package/test]   |     with self._nodb_connection.cursor() as cursor:\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:256: in cursor\n[Test and build Python package/test]   |     return self._cursor()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:233: in _cursor\n[Test and build Python package/test]   |     self.ensure_connection()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: in ensure_connection\n[Test and build Python package/test]   |     self.connect()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/utils.py:89: in __exit__\n[Test and build Python package/test]   |     raise dj_exc_value.with_traceback(traceback) from exc_value\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: in ensure_connection\n[Test and build Python package/test]   |     self.connect()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:195: in connect\n[Test and build Python package/test]   |     self.connection = self.get_new_connection(conn_params)\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/postgresql/base.py:178: in get_new_connection\n[Test and build Python package/test]   |     connection = Database.connect(**conn_params)\n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | dsn = 'user=test password=test host=localhost port=5432 dbname=test'\n[Test and build Python package/test]   | connection_factory = None, cursor_factory = None\n[Test and build Python package/test]   | kwargs = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | kwasync = {}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         Create a new database connection.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         The connection parameters can be specified as a string:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         or using a set of keyword arguments:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Or as a mix of both. The basic connection parameters are:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         - *dbname*: the database name\n[Test and build Python package/test]   |         - *database*: the database name (only as keyword argument)\n[Test and build Python package/test]   |         - *user*: user name used to authenticate\n[Test and build Python package/test]   |         - *password*: password used to authenticate\n[Test and build Python package/test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Test and build Python package/test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *connection_factory* parameter a different class or connections\n[Test and build Python package/test]   |         factory can be specified. It should be a callable object taking a dsn\n[Test and build Python package/test]   |         argument.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Test and build Python package/test]   |         used by cursor().\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Test and build Python package/test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Any other keyword parameter will be passed to the underlying client\n[Test and build Python package/test]   |         library: the list of supported parameters depends on the library version.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         kwasync = {}\n[Test and build Python package/test]   |         if 'async' in kwargs:\n[Test and build Python package/test]   |             kwasync['async'] = kwargs.pop('async')\n[Test and build Python package/test]   |         if 'async_' in kwargs:\n[Test and build Python package/test]   |             kwasync['async_'] = kwargs.pop('async_')\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Test and build Python package/test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Test and build Python package/test]   | E       django.db.utils.OperationalError: could not connect to server: Connection refused\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (127.0.0.1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | E       could not connect to server: Cannot assign requested address\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (::1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/psycopg2/__init__.py:122: OperationalError\n[Test and build Python package/test]   | ______________ ERROR at setup of test_last_seen_updates_on_scrape ______________\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def ensure_connection(self):\n[Test and build Python package/test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[Test and build Python package/test]   |         if self.connection is None:\n[Test and build Python package/test]   |             with self.wrap_database_errors:\n[Test and build Python package/test]   | >               self.connect()\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(self):\n[Test and build Python package/test]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[Test and build Python package/test]   |         # Check for invalid configurations.\n[Test and build Python package/test]   |         self.check_settings()\n[Test and build Python package/test]   |         # In case the previous connection was closed while in an atomic block\n[Test and build Python package/test]   |         self.in_atomic_block = False\n[Test and build Python package/test]   |         self.savepoint_ids = []\n[Test and build Python package/test]   |         self.needs_rollback = False\n[Test and build Python package/test]   |         # Reset parameters defining when to close the connection\n[Test and build Python package/test]   |         max_age = self.settings_dict['CONN_MAX_AGE']\n[Test and build Python package/test]   |         self.close_at = None if max_age is None else time.time() + max_age\n[Test and build Python package/test]   |         self.closed_in_transaction = False\n[Test and build Python package/test]   |         self.errors_occurred = False\n[Test and build Python package/test]   |         # Establish the connection\n[Test and build Python package/test]   |         conn_params = self.get_connection_params()\n[Test and build Python package/test]   | >       self.connection = self.get_new_connection(conn_params)\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:195: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | conn_params = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def get_new_connection(self, conn_params):\n[Test and build Python package/test]   | >       connection = Database.connect(**conn_params)\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/postgresql/base.py:178: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | dsn = 'user=test password=test host=localhost port=5432 dbname=test'\n[Test and build Python package/test]   | connection_factory = None, cursor_factory = None\n[Test and build Python package/test]   | kwargs = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | kwasync = {}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         Create a new database connection.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         The connection parameters can be specified as a string:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         or using a set of keyword arguments:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Or as a mix of both. The basic connection parameters are:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         - *dbname*: the database name\n[Test and build Python package/test]   |         - *database*: the database name (only as keyword argument)\n[Test and build Python package/test]   |         - *user*: user name used to authenticate\n[Test and build Python package/test]   |         - *password*: password used to authenticate\n[Test and build Python package/test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Test and build Python package/test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *connection_factory* parameter a different class or connections\n[Test and build Python package/test]   |         factory can be specified. It should be a callable object taking a dsn\n[Test and build Python package/test]   |         argument.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Test and build Python package/test]   |         used by cursor().\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Test and build Python package/test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Any other keyword parameter will be passed to the underlying client\n[Test and build Python package/test]   |         library: the list of supported parameters depends on the library version.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         kwasync = {}\n[Test and build Python package/test]   |         if 'async' in kwargs:\n[Test and build Python package/test]   |             kwasync['async'] = kwargs.pop('async')\n[Test and build Python package/test]   |         if 'async_' in kwargs:\n[Test and build Python package/test]   |             kwasync['async_'] = kwargs.pop('async_')\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Test and build Python package/test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Test and build Python package/test]   | E       psycopg2.OperationalError: could not connect to server: Connection refused\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (127.0.0.1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | E       could not connect to server: Cannot assign requested address\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (::1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/psycopg2/__init__.py:122: OperationalError\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | The above exception was the direct cause of the following exception:\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | request = <SubRequest '_django_db_marker' for <Function test_last_seen_updates_on_scrape>>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     @pytest.fixture(autouse=True)\n[Test and build Python package/test]   |     def _django_db_marker(request) -> None:\n[Test and build Python package/test]   |         \"\"\"Implement the django_db marker, internal to pytest-django.\"\"\"\n[Test and build Python package/test]   |         marker = request.node.get_closest_marker(\"django_db\")\n[Test and build Python package/test]   |         if marker:\n[Test and build Python package/test]   | >           request.getfixturevalue(\"_django_db_helper\")\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/pytest_django/plugin.py:465: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/pytest_django/fixtures.py:125: in django_db_setup\n[Test and build Python package/test]   |     **setup_databases_args\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/test/utils.py:174: in setup_databases\n[Test and build Python package/test]   |     serialize=connection.settings_dict.get('TEST', {}).get('SERIALIZE', True),\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/creation.py:58: in create_test_db\n[Test and build Python package/test]   |     self._create_test_db(verbosity, autoclobber, keepdb)\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/creation.py:168: in _create_test_db\n[Test and build Python package/test]   |     with self._nodb_connection.cursor() as cursor:\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:256: in cursor\n[Test and build Python package/test]   |     return self._cursor()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:233: in _cursor\n[Test and build Python package/test]   |     self.ensure_connection()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: in ensure_connection\n[Test and build Python package/test]   |     self.connect()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/utils.py:89: in __exit__\n[Test and build Python package/test]   |     raise dj_exc_value.with_traceback(traceback) from exc_value\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: in ensure_connection\n[Test and build Python package/test]   |     self.connect()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:195: in connect\n[Test and build Python package/test]   |     self.connection = self.get_new_connection(conn_params)\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/postgresql/base.py:178: in get_new_connection\n[Test and build Python package/test]   |     connection = Database.connect(**conn_params)\n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | dsn = 'user=test password=test host=localhost port=5432 dbname=test'\n[Test and build Python package/test]   | connection_factory = None, cursor_factory = None\n[Test and build Python package/test]   | kwargs = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | kwasync = {}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         Create a new database connection.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         The connection parameters can be specified as a string:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         or using a set of keyword arguments:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Or as a mix of both. The basic connection parameters are:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         - *dbname*: the database name\n[Test and build Python package/test]   |         - *database*: the database name (only as keyword argument)\n[Test and build Python package/test]   |         - *user*: user name used to authenticate\n[Test and build Python package/test]   |         - *password*: password used to authenticate\n[Test and build Python package/test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Test and build Python package/test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *connection_factory* parameter a different class or connections\n[Test and build Python package/test]   |         factory can be specified. It should be a callable object taking a dsn\n[Test and build Python package/test]   |         argument.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Test and build Python package/test]   |         used by cursor().\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Test and build Python package/test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Any other keyword parameter will be passed to the underlying client\n[Test and build Python package/test]   |         library: the list of supported parameters depends on the library version.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         kwasync = {}\n[Test and build Python package/test]   |         if 'async' in kwargs:\n[Test and build Python package/test]   |             kwasync['async'] = kwargs.pop('async')\n[Test and build Python package/test]   |         if 'async_' in kwargs:\n[Test and build Python package/test]   |             kwasync['async_'] = kwargs.pop('async_')\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Test and build Python package/test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Test and build Python package/test]   | E       django.db.utils.OperationalError: could not connect to server: Connection refused\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (127.0.0.1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | E       could not connect to server: Cannot assign requested address\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (::1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/psycopg2/__init__.py:122: OperationalError\n[Test and build Python package/test]   | ____________ ERROR at setup of test_deduplication_identical_object _____________\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def ensure_connection(self):\n[Test and build Python package/test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[Test and build Python package/test]   |         if self.connection is None:\n[Test and build Python package/test]   |             with self.wrap_database_errors:\n[Test and build Python package/test]   | >               self.connect()\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(self):\n[Test and build Python package/test]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[Test and build Python package/test]   |         # Check for invalid configurations.\n[Test and build Python package/test]   |         self.check_settings()\n[Test and build Python package/test]   |         # In case the previous connection was closed while in an atomic block\n[Test and build Python package/test]   |         self.in_atomic_block = False\n[Test and build Python package/test]   |         self.savepoint_ids = []\n[Test and build Python package/test]   |         self.needs_rollback = False\n[Test and build Python package/test]   |         # Reset parameters defining when to close the connection\n[Test and build Python package/test]   |         max_age = self.settings_dict['CONN_MAX_AGE']\n[Test and build Python package/test]   |         self.close_at = None if max_age is None else time.time() + max_age\n[Test and build Python package/test]   |         self.closed_in_transaction = False\n[Test and build Python package/test]   |         self.errors_occurred = False\n[Test and build Python package/test]   |         # Establish the connection\n[Test and build Python package/test]   |         conn_params = self.get_connection_params()\n[Test and build Python package/test]   | >       self.connection = self.get_new_connection(conn_params)\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:195: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | conn_params = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def get_new_connection(self, conn_params):\n[Test and build Python package/test]   | >       connection = Database.connect(**conn_params)\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/postgresql/base.py:178: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | dsn = 'user=test password=test host=localhost port=5432 dbname=test'\n[Test and build Python package/test]   | connection_factory = None, cursor_factory = None\n[Test and build Python package/test]   | kwargs = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | kwasync = {}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         Create a new database connection.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         The connection parameters can be specified as a string:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         or using a set of keyword arguments:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Or as a mix of both. The basic connection parameters are:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         - *dbname*: the database name\n[Test and build Python package/test]   |         - *database*: the database name (only as keyword argument)\n[Test and build Python package/test]   |         - *user*: user name used to authenticate\n[Test and build Python package/test]   |         - *password*: password used to authenticate\n[Test and build Python package/test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Test and build Python package/test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *connection_factory* parameter a different class or connections\n[Test and build Python package/test]   |         factory can be specified. It should be a callable object taking a dsn\n[Test and build Python package/test]   |         argument.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Test and build Python package/test]   |         used by cursor().\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Test and build Python package/test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Any other keyword parameter will be passed to the underlying client\n[Test and build Python package/test]   |         library: the list of supported parameters depends on the library version.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         kwasync = {}\n[Test and build Python package/test]   |         if 'async' in kwargs:\n[Test and build Python package/test]   |             kwasync['async'] = kwargs.pop('async')\n[Test and build Python package/test]   |         if 'async_' in kwargs:\n[Test and build Python package/test]   |             kwasync['async_'] = kwargs.pop('async_')\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Test and build Python package/test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Test and build Python package/test]   | E       psycopg2.OperationalError: could not connect to server: Connection refused\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (127.0.0.1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | E       could not connect to server: Cannot assign requested address\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (::1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/psycopg2/__init__.py:122: OperationalError\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | The above exception was the direct cause of the following exception:\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | request = <SubRequest '_django_db_marker' for <Function test_deduplication_identical_object>>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     @pytest.fixture(autouse=True)\n[Test and build Python package/test]   |     def _django_db_marker(request) -> None:\n[Test and build Python package/test]   |         \"\"\"Implement the django_db marker, internal to pytest-django.\"\"\"\n[Test and build Python package/test]   |         marker = request.node.get_closest_marker(\"django_db\")\n[Test and build Python package/test]   |         if marker:\n[Test and build Python package/test]   | >           request.getfixturevalue(\"_django_db_helper\")\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/pytest_django/plugin.py:465: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/pytest_django/fixtures.py:125: in django_db_setup\n[Test and build Python package/test]   |     **setup_databases_args\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/test/utils.py:174: in setup_databases\n[Test and build Python package/test]   |     serialize=connection.settings_dict.get('TEST', {}).get('SERIALIZE', True),\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/creation.py:58: in create_test_db\n[Test and build Python package/test]   |     self._create_test_db(verbosity, autoclobber, keepdb)\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/creation.py:168: in _create_test_db\n[Test and build Python package/test]   |     with self._nodb_connection.cursor() as cursor:\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:256: in cursor\n[Test and build Python package/test]   |     return self._cursor()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:233: in _cursor\n[Test and build Python package/test]   |     self.ensure_connection()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: in ensure_connection\n[Test and build Python package/test]   |     self.connect()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/utils.py:89: in __exit__\n[Test and build Python package/test]   |     raise dj_exc_value.with_traceback(traceback) from exc_value\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: in ensure_connection\n[Test and build Python package/test]   |     self.connect()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:195: in connect\n[Test and build Python package/test]   |     self.connection = self.get_new_connection(conn_params)\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/postgresql/base.py:178: in get_new_connection\n[Test and build Python package/test]   |     connection = Database.connect(**conn_params)\n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | dsn = 'user=test password=test host=localhost port=5432 dbname=test'\n[Test and build Python package/test]   | connection_factory = None, cursor_factory = None\n[Test and build Python package/test]   | kwargs = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | kwasync = {}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         Create a new database connection.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         The connection parameters can be specified as a string:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         or using a set of keyword arguments:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Or as a mix of both. The basic connection parameters are:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         - *dbname*: the database name\n[Test and build Python package/test]   |         - *database*: the database name (only as keyword argument)\n[Test and build Python package/test]   |         - *user*: user name used to authenticate\n[Test and build Python package/test]   |         - *password*: password used to authenticate\n[Test and build Python package/test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Test and build Python package/test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *connection_factory* parameter a different class or connections\n[Test and build Python package/test]   |         factory can be specified. It should be a callable object taking a dsn\n[Test and build Python package/test]   |         argument.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Test and build Python package/test]   |         used by cursor().\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Test and build Python package/test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Any other keyword parameter will be passed to the underlying client\n[Test and build Python package/test]   |         library: the list of supported parameters depends on the library version.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         kwasync = {}\n[Test and build Python package/test]   |         if 'async' in kwargs:\n[Test and build Python package/test]   |             kwasync['async'] = kwargs.pop('async')\n[Test and build Python package/test]   |         if 'async_' in kwargs:\n[Test and build Python package/test]   |             kwasync['async_'] = kwargs.pop('async_')\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Test and build Python package/test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Test and build Python package/test]   | E       django.db.utils.OperationalError: could not connect to server: Connection refused\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (127.0.0.1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | E       could not connect to server: Cannot assign requested address\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (::1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/psycopg2/__init__.py:122: OperationalError\n[Test and build Python package/test]   | ____ ERROR at setup of test_exception_on_identical_objects_in_import_stream ____\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def ensure_connection(self):\n[Test and build Python package/test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[Test and build Python package/test]   |         if self.connection is None:\n[Test and build Python package/test]   |             with self.wrap_database_errors:\n[Test and build Python package/test]   | >               self.connect()\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(self):\n[Test and build Python package/test]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[Test and build Python package/test]   |         # Check for invalid configurations.\n[Test and build Python package/test]   |         self.check_settings()\n[Test and build Python package/test]   |         # In case the previous connection was closed while in an atomic block\n[Test and build Python package/test]   |         self.in_atomic_block = False\n[Test and build Python package/test]   |         self.savepoint_ids = []\n[Test and build Python package/test]   |         self.needs_rollback = False\n[Test and build Python package/test]   |         # Reset parameters defining when to close the connection\n[Test and build Python package/test]   |         max_age = self.settings_dict['CONN_MAX_AGE']\n[Test and build Python package/test]   |         self.close_at = None if max_age is None else time.time() + max_age\n[Test and build Python package/test]   |         self.closed_in_transaction = False\n[Test and build Python package/test]   |         self.errors_occurred = False\n[Test and build Python package/test]   |         # Establish the connection\n[Test and build Python package/test]   |         conn_params = self.get_connection_params()\n[Test and build Python package/test]   | >       self.connection = self.get_new_connection(conn_params)\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:195: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | conn_params = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def get_new_connection(self, conn_params):\n[Test and build Python package/test]   | >       connection = Database.connect(**conn_params)\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/postgresql/base.py:178: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | dsn = 'user=test password=test host=localhost port=5432 dbname=test'\n[Test and build Python package/test]   | connection_factory = None, cursor_factory = None\n[Test and build Python package/test]   | kwargs = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | kwasync = {}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         Create a new database connection.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         The connection parameters can be specified as a string:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         or using a set of keyword arguments:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Or as a mix of both. The basic connection parameters are:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         - *dbname*: the database name\n[Test and build Python package/test]   |         - *database*: the database name (only as keyword argument)\n[Test and build Python package/test]   |         - *user*: user name used to authenticate\n[Test and build Python package/test]   |         - *password*: password used to authenticate\n[Test and build Python package/test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Test and build Python package/test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *connection_factory* parameter a different class or connections\n[Test and build Python package/test]   |         factory can be specified. It should be a callable object taking a dsn\n[Test and build Python package/test]   |         argument.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Test and build Python package/test]   |         used by cursor().\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Test and build Python package/test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Any other keyword parameter will be passed to the underlying client\n[Test and build Python package/test]   |         library: the list of supported parameters depends on the library version.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         kwasync = {}\n[Test and build Python package/test]   |         if 'async' in kwargs:\n[Test and build Python package/test]   |             kwasync['async'] = kwargs.pop('async')\n[Test and build Python package/test]   |         if 'async_' in kwargs:\n[Test and build Python package/test]   |             kwasync['async_'] = kwargs.pop('async_')\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Test and build Python package/test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Test and build Python package/test]   | E       psycopg2.OperationalError: could not connect to server: Connection refused\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (127.0.0.1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | E       could not connect to server: Cannot assign requested address\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (::1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/psycopg2/__init__.py:122: OperationalError\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | The above exception was the direct cause of the following exception:\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | request = <SubRequest '_django_db_marker' for <Function test_exception_on_identical_objects_in_import_stream>>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     @pytest.fixture(autouse=True)\n[Test and build Python package/test]   |     def _django_db_marker(request) -> None:\n[Test and build Python package/test]   |         \"\"\"Implement the django_db marker, internal to pytest-django.\"\"\"\n[Test and build Python package/test]   |         marker = request.node.get_closest_marker(\"django_db\")\n[Test and build Python package/test]   |         if marker:\n[Test and build Python package/test]   | >           request.getfixturevalue(\"_django_db_helper\")\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/pytest_django/plugin.py:465: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/pytest_django/fixtures.py:125: in django_db_setup\n[Test and build Python package/test]   |     **setup_databases_args\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/test/utils.py:174: in setup_databases\n[Test and build Python package/test]   |     serialize=connection.settings_dict.get('TEST', {}).get('SERIALIZE', True),\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/creation.py:58: in create_test_db\n[Test and build Python package/test]   |     self._create_test_db(verbosity, autoclobber, keepdb)\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/creation.py:168: in _create_test_db\n[Test and build Python package/test]   |     with self._nodb_connection.cursor() as cursor:\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:256: in cursor\n[Test and build Python package/test]   |     return self._cursor()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:233: in _cursor\n[Test and build Python package/test]   |     self.ensure_connection()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: in ensure_connection\n[Test and build Python package/test]   |     self.connect()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/utils.py:89: in __exit__\n[Test and build Python package/test]   |     raise dj_exc_value.with_traceback(traceback) from exc_value\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: in ensure_connection\n[Test and build Python package/test]   |     self.connect()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:195: in connect\n[Test and build Python package/test]   |     self.connection = self.get_new_connection(conn_params)\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/postgresql/base.py:178: in get_new_connection\n[Test and build Python package/test]   |     connection = Database.connect(**conn_params)\n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | dsn = 'user=test password=test host=localhost port=5432 dbname=test'\n[Test and build Python package/test]   | connection_factory = None, cursor_factory = None\n[Test and build Python package/test]   | kwargs = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | kwasync = {}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         Create a new database connection.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         The connection parameters can be specified as a string:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         or using a set of keyword arguments:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Or as a mix of both. The basic connection parameters are:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         - *dbname*: the database name\n[Test and build Python package/test]   |         - *database*: the database name (only as keyword argument)\n[Test and build Python package/test]   |         - *user*: user name used to authenticate\n[Test and build Python package/test]   |         - *password*: password used to authenticate\n[Test and build Python package/test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Test and build Python package/test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *connection_factory* parameter a different class or connections\n[Test and build Python package/test]   |         factory can be specified. It should be a callable object taking a dsn\n[Test and build Python package/test]   |         argument.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Test and build Python package/test]   |         used by cursor().\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Test and build Python package/test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Any other keyword parameter will be passed to the underlying client\n[Test and build Python package/test]   |         library: the list of supported parameters depends on the library version.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         kwasync = {}\n[Test and build Python package/test]   |         if 'async' in kwargs:\n[Test and build Python package/test]   |             kwasync['async'] = kwargs.pop('async')\n[Test and build Python package/test]   |         if 'async_' in kwargs:\n[Test and build Python package/test]   |             kwasync['async_'] = kwargs.pop('async_')\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Test and build Python package/test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Test and build Python package/test]   | E       django.db.utils.OperationalError: could not connect to server: Connection refused\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (127.0.0.1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | E       could not connect to server: Cannot assign requested address\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (::1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/psycopg2/__init__.py:122: OperationalError\n[Test and build Python package/test]   | ____________________ ERROR at setup of test_resolve_json_id ____________________\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def ensure_connection(self):\n[Test and build Python package/test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[Test and build Python package/test]   |         if self.connection is None:\n[Test and build Python package/test]   |             with self.wrap_database_errors:\n[Test and build Python package/test]   | >               self.connect()\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(self):\n[Test and build Python package/test]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[Test and build Python package/test]   |         # Check for invalid configurations.\n[Test and build Python package/test]   |         self.check_settings()\n[Test and build Python package/test]   |         # In case the previous connection was closed while in an atomic block\n[Test and build Python package/test]   |         self.in_atomic_block = False\n[Test and build Python package/test]   |         self.savepoint_ids = []\n[Test and build Python package/test]   |         self.needs_rollback = False\n[Test and build Python package/test]   |         # Reset parameters defining when to close the connection\n[Test and build Python package/test]   |         max_age = self.settings_dict['CONN_MAX_AGE']\n[Test and build Python package/test]   |         self.close_at = None if max_age is None else time.time() + max_age\n[Test and build Python package/test]   |         self.closed_in_transaction = False\n[Test and build Python package/test]   |         self.errors_occurred = False\n[Test and build Python package/test]   |         # Establish the connection\n[Test and build Python package/test]   |         conn_params = self.get_connection_params()\n[Test and build Python package/test]   | >       self.connection = self.get_new_connection(conn_params)\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:195: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | conn_params = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def get_new_connection(self, conn_params):\n[Test and build Python package/test]   | >       connection = Database.connect(**conn_params)\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/postgresql/base.py:178: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | dsn = 'user=test password=test host=localhost port=5432 dbname=test'\n[Test and build Python package/test]   | connection_factory = None, cursor_factory = None\n[Test and build Python package/test]   | kwargs = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | kwasync = {}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         Create a new database connection.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         The connection parameters can be specified as a string:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         or using a set of keyword arguments:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Or as a mix of both. The basic connection parameters are:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         - *dbname*: the database name\n[Test and build Python package/test]   |         - *database*: the database name (only as keyword argument)\n[Test and build Python package/test]   |         - *user*: user name used to authenticate\n[Test and build Python package/test]   |         - *password*: password used to authenticate\n[Test and build Python package/test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Test and build Python package/test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *connection_factory* parameter a different class or connections\n[Test and build Python package/test]   |         factory can be specified. It should be a callable object taking a dsn\n[Test and build Python package/test]   |         argument.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Test and build Python package/test]   |         used by cursor().\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Test and build Python package/test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Any other keyword parameter will be passed to the underlying client\n[Test and build Python package/test]   |         library: the list of supported parameters depends on the library version.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         kwasync = {}\n[Test and build Python package/test]   |         if 'async' in kwargs:\n[Test and build Python package/test]   |             kwasync['async'] = kwargs.pop('async')\n[Test and build Python package/test]   |         if 'async_' in kwargs:\n[Test and build Python package/test]   |             kwasync['async_'] = kwargs.pop('async_')\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Test and build Python package/test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Test and build Python package/test]   | E       psycopg2.OperationalError: could not connect to server: Connection refused\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (127.0.0.1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | E       could not connect to server: Cannot assign requested address\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (::1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/psycopg2/__init__.py:122: OperationalError\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | The above exception was the direct cause of the following exception:\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | request = <SubRequest '_django_db_marker' for <Function test_resolve_json_id>>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     @pytest.fixture(autouse=True)\n[Test and build Python package/test]   |     def _django_db_marker(request) -> None:\n[Test and build Python package/test]   |         \"\"\"Implement the django_db marker, internal to pytest-django.\"\"\"\n[Test and build Python package/test]   |         marker = request.node.get_closest_marker(\"django_db\")\n[Test and build Python package/test]   |         if marker:\n[Test and build Python package/test]   | >           request.getfixturevalue(\"_django_db_helper\")\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/pytest_django/plugin.py:465: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/pytest_django/fixtures.py:125: in django_db_setup\n[Test and build Python package/test]   |     **setup_databases_args\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/test/utils.py:174: in setup_databases\n[Test and build Python package/test]   |     serialize=connection.settings_dict.get('TEST', {}).get('SERIALIZE', True),\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/creation.py:58: in create_test_db\n[Test and build Python package/test]   |     self._create_test_db(verbosity, autoclobber, keepdb)\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/creation.py:168: in _create_test_db\n[Test and build Python package/test]   |     with self._nodb_connection.cursor() as cursor:\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:256: in cursor\n[Test and build Python package/test]   |     return self._cursor()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:233: in _cursor\n[Test and build Python package/test]   |     self.ensure_connection()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: in ensure_connection\n[Test and build Python package/test]   |     self.connect()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/utils.py:89: in __exit__\n[Test and build Python package/test]   |     raise dj_exc_value.with_traceback(traceback) from exc_value\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: in ensure_connection\n[Test and build Python package/test]   |     self.connect()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:195: in connect\n[Test and build Python package/test]   |     self.connection = self.get_new_connection(conn_params)\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/postgresql/base.py:178: in get_new_connection\n[Test and build Python package/test]   |     connection = Database.connect(**conn_params)\n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | dsn = 'user=test password=test host=localhost port=5432 dbname=test'\n[Test and build Python package/test]   | connection_factory = None, cursor_factory = None\n[Test and build Python package/test]   | kwargs = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | kwasync = {}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         Create a new database connection.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         The connection parameters can be specified as a string:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         or using a set of keyword arguments:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Or as a mix of both. The basic connection parameters are:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         - *dbname*: the database name\n[Test and build Python package/test]   |         - *database*: the database name (only as keyword argument)\n[Test and build Python package/test]   |         - *user*: user name used to authenticate\n[Test and build Python package/test]   |         - *password*: password used to authenticate\n[Test and build Python package/test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Test and build Python package/test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *connection_factory* parameter a different class or connections\n[Test and build Python package/test]   |         factory can be specified. It should be a callable object taking a dsn\n[Test and build Python package/test]   |         argument.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Test and build Python package/test]   |         used by cursor().\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Test and build Python package/test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Any other keyword parameter will be passed to the underlying client\n[Test and build Python package/test]   |         library: the list of supported parameters depends on the library version.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         kwasync = {}\n[Test and build Python package/test]   |         if 'async' in kwargs:\n[Test and build Python package/test]   |             kwasync['async'] = kwargs.pop('async')\n[Test and build Python package/test]   |         if 'async_' in kwargs:\n[Test and build Python package/test]   |             kwasync['async_'] = kwargs.pop('async_')\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Test and build Python package/test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Test and build Python package/test]   | E       django.db.utils.OperationalError: could not connect to server: Connection refused\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (127.0.0.1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | E       could not connect to server: Cannot assign requested address\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (::1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/psycopg2/__init__.py:122: OperationalError\n[Test and build Python package/test]   | ____________________ ERROR at setup of test_invalid_fields _____________________\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def ensure_connection(self):\n[Test and build Python package/test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[Test and build Python package/test]   |         if self.connection is None:\n[Test and build Python package/test]   |             with self.wrap_database_errors:\n[Test and build Python package/test]   | >               self.connect()\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(self):\n[Test and build Python package/test]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[Test and build Python package/test]   |         # Check for invalid configurations.\n[Test and build Python package/test]   |         self.check_settings()\n[Test and build Python package/test]   |         # In case the previous connection was closed while in an atomic block\n[Test and build Python package/test]   |         self.in_atomic_block = False\n[Test and build Python package/test]   |         self.savepoint_ids = []\n[Test and build Python package/test]   |         self.needs_rollback = False\n[Test and build Python package/test]   |         # Reset parameters defining when to close the connection\n[Test and build Python package/test]   |         max_age = self.settings_dict['CONN_MAX_AGE']\n[Test and build Python package/test]   |         self.close_at = None if max_age is None else time.time() + max_age\n[Test and build Python package/test]   |         self.closed_in_transaction = False\n[Test and build Python package/test]   |         self.errors_occurred = False\n[Test and build Python package/test]   |         # Establish the connection\n[Test and build Python package/test]   |         conn_params = self.get_connection_params()\n[Test and build Python package/test]   | >       self.connection = self.get_new_connection(conn_params)\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:195: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | conn_params = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def get_new_connection(self, conn_params):\n[Test and build Python package/test]   | >       connection = Database.connect(**conn_params)\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/postgresql/base.py:178: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | dsn = 'user=test password=test host=localhost port=5432 dbname=test'\n[Test and build Python package/test]   | connection_factory = None, cursor_factory = None\n[Test and build Python package/test]   | kwargs = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | kwasync = {}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         Create a new database connection.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         The connection parameters can be specified as a string:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         or using a set of keyword arguments:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Or as a mix of both. The basic connection parameters are:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         - *dbname*: the database name\n[Test and build Python package/test]   |         - *database*: the database name (only as keyword argument)\n[Test and build Python package/test]   |         - *user*: user name used to authenticate\n[Test and build Python package/test]   |         - *password*: password used to authenticate\n[Test and build Python package/test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Test and build Python package/test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *connection_factory* parameter a different class or connections\n[Test and build Python package/test]   |         factory can be specified. It should be a callable object taking a dsn\n[Test and build Python package/test]   |         argument.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Test and build Python package/test]   |         used by cursor().\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Test and build Python package/test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Any other keyword parameter will be passed to the underlying client\n[Test and build Python package/test]   |         library: the list of supported parameters depends on the library version.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         kwasync = {}\n[Test and build Python package/test]   |         if 'async' in kwargs:\n[Test and build Python package/test]   |             kwasync['async'] = kwargs.pop('async')\n[Test and build Python package/test]   |         if 'async_' in kwargs:\n[Test and build Python package/test]   |             kwasync['async_'] = kwargs.pop('async_')\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Test and build Python package/test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Test and build Python package/test]   | E       psycopg2.OperationalError: could not connect to server: Connection refused\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (127.0.0.1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | E       could not connect to server: Cannot assign requested address\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (::1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/psycopg2/__init__.py:122: OperationalError\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | The above exception was the direct cause of the following exception:\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | request = <SubRequest '_django_db_marker' for <Function test_invalid_fields>>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     @pytest.fixture(autouse=True)\n[Test and build Python package/test]   |     def _django_db_marker(request) -> None:\n[Test and build Python package/test]   |         \"\"\"Implement the django_db marker, internal to pytest-django.\"\"\"\n[Test and build Python package/test]   |         marker = request.node.get_closest_marker(\"django_db\")\n[Test and build Python package/test]   |         if marker:\n[Test and build Python package/test]   | >           request.getfixturevalue(\"_django_db_helper\")\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/pytest_django/plugin.py:465: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/pytest_django/fixtures.py:125: in django_db_setup\n[Test and build Python package/test]   |     **setup_databases_args\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/test/utils.py:174: in setup_databases\n[Test and build Python package/test]   |     serialize=connection.settings_dict.get('TEST', {}).get('SERIALIZE', True),\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/creation.py:58: in create_test_db\n[Test and build Python package/test]   |     self._create_test_db(verbosity, autoclobber, keepdb)\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/creation.py:168: in _create_test_db\n[Test and build Python package/test]   |     with self._nodb_connection.cursor() as cursor:\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:256: in cursor\n[Test and build Python package/test]   |     return self._cursor()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:233: in _cursor\n[Test and build Python package/test]   |     self.ensure_connection()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: in ensure_connection\n[Test and build Python package/test]   |     self.connect()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/utils.py:89: in __exit__\n[Test and build Python package/test]   |     raise dj_exc_value.with_traceback(traceback) from exc_value\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: in ensure_connection\n[Test and build Python package/test]   |     self.connect()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:195: in connect\n[Test and build Python package/test]   |     self.connection = self.get_new_connection(conn_params)\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/postgresql/base.py:178: in get_new_connection\n[Test and build Python package/test]   |     connection = Database.connect(**conn_params)\n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | dsn = 'user=test password=test host=localhost port=5432 dbname=test'\n[Test and build Python package/test]   | connection_factory = None, cursor_factory = None\n[Test and build Python package/test]   | kwargs = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | kwasync = {}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         Create a new database connection.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         The connection parameters can be specified as a string:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         or using a set of keyword arguments:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Or as a mix of both. The basic connection parameters are:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         - *dbname*: the database name\n[Test and build Python package/test]   |         - *database*: the database name (only as keyword argument)\n[Test and build Python package/test]   |         - *user*: user name used to authenticate\n[Test and build Python package/test]   |         - *password*: password used to authenticate\n[Test and build Python package/test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Test and build Python package/test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *connection_factory* parameter a different class or connections\n[Test and build Python package/test]   |         factory can be specified. It should be a callable object taking a dsn\n[Test and build Python package/test]   |         argument.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Test and build Python package/test]   |         used by cursor().\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Test and build Python package/test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Any other keyword parameter will be passed to the underlying client\n[Test and build Python package/test]   |         library: the list of supported parameters depends on the library version.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         kwasync = {}\n[Test and build Python package/test]   |         if 'async' in kwargs:\n[Test and build Python package/test]   |             kwasync['async'] = kwargs.pop('async')\n[Test and build Python package/test]   |         if 'async_' in kwargs:\n[Test and build Python package/test]   |             kwasync['async_'] = kwargs.pop('async_')\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Test and build Python package/test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Test and build Python package/test]   | E       django.db.utils.OperationalError: could not connect to server: Connection refused\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (127.0.0.1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | E       could not connect to server: Cannot assign requested address\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (::1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/psycopg2/__init__.py:122: OperationalError\n[Test and build Python package/test]   | ______________ ERROR at setup of test_invalid_fields_related_item ______________\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def ensure_connection(self):\n[Test and build Python package/test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[Test and build Python package/test]   |         if self.connection is None:\n[Test and build Python package/test]   |             with self.wrap_database_errors:\n[Test and build Python package/test]   | >               self.connect()\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(self):\n[Test and build Python package/test]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[Test and build Python package/test]   |         # Check for invalid configurations.\n[Test and build Python package/test]   |         self.check_settings()\n[Test and build Python package/test]   |         # In case the previous connection was closed while in an atomic block\n[Test and build Python package/test]   |         self.in_atomic_block = False\n[Test and build Python package/test]   |         self.savepoint_ids = []\n[Test and build Python package/test]   |         self.needs_rollback = False\n[Test and build Python package/test]   |         # Reset parameters defining when to close the connection\n[Test and build Python package/test]   |         max_age = self.settings_dict['CONN_MAX_AGE']\n[Test and build Python package/test]   |         self.close_at = None if max_age is None else time.time() + max_age\n[Test and build Python package/test]   |         self.closed_in_transaction = False\n[Test and build Python package/test]   |         self.errors_occurred = False\n[Test and build Python package/test]   |         # Establish the connection\n[Test and build Python package/test]   |         conn_params = self.get_connection_params()\n[Test and build Python package/test]   | >       self.connection = self.get_new_connection(conn_params)\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:195: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | conn_params = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def get_new_connection(self, conn_params):\n[Test and build Python package/test]   | >       connection = Database.connect(**conn_params)\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/postgresql/base.py:178: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | dsn = 'user=test password=test host=localhost port=5432 dbname=test'\n[Test and build Python package/test]   | connection_factory = None, cursor_factory = None\n[Test and build Python package/test]   | kwargs = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | kwasync = {}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         Create a new database connection.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         The connection parameters can be specified as a string:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         or using a set of keyword arguments:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Or as a mix of both. The basic connection parameters are:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         - *dbname*: the database name\n[Test and build Python package/test]   |         - *database*: the database name (only as keyword argument)\n[Test and build Python package/test]   |         - *user*: user name used to authenticate\n[Test and build Python package/test]   |         - *password*: password used to authenticate\n[Test and build Python package/test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Test and build Python package/test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *connection_factory* parameter a different class or connections\n[Test and build Python package/test]   |         factory can be specified. It should be a callable object taking a dsn\n[Test and build Python package/test]   |         argument.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Test and build Python package/test]   |         used by cursor().\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Test and build Python package/test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Any other keyword parameter will be passed to the underlying client\n[Test and build Python package/test]   |         library: the list of supported parameters depends on the library version.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         kwasync = {}\n[Test and build Python package/test]   |         if 'async' in kwargs:\n[Test and build Python package/test]   |             kwasync['async'] = kwargs.pop('async')\n[Test and build Python package/test]   |         if 'async_' in kwargs:\n[Test and build Python package/test]   |             kwasync['async_'] = kwargs.pop('async_')\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Test and build Python package/test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Test and build Python package/test]   | E       psycopg2.OperationalError: could not connect to server: Connection refused\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (127.0.0.1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | E       could not connect to server: Cannot assign requested address\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (::1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/psycopg2/__init__.py:122: OperationalError\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | The above exception was the direct cause of the following exception:\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | request = <SubRequest '_django_db_marker' for <Function test_invalid_fields_related_item>>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     @pytest.fixture(autouse=True)\n[Test and build Python package/test]   |     def _django_db_marker(request) -> None:\n[Test and build Python package/test]   |         \"\"\"Implement the django_db marker, internal to pytest-django.\"\"\"\n[Test and build Python package/test]   |         marker = request.node.get_closest_marker(\"django_db\")\n[Test and build Python package/test]   |         if marker:\n[Test and build Python package/test]   | >           request.getfixturevalue(\"_django_db_helper\")\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/pytest_django/plugin.py:465: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/pytest_django/fixtures.py:125: in django_db_setup\n[Test and build Python package/test]   |     **setup_databases_args\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/test/utils.py:174: in setup_databases\n[Test and build Python package/test]   |     serialize=connection.settings_dict.get('TEST', {}).get('SERIALIZE', True),\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/creation.py:58: in create_test_db\n[Test and build Python package/test]   |     self._create_test_db(verbosity, autoclobber, keepdb)\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/creation.py:168: in _create_test_db\n[Test and build Python package/test]   |     with self._nodb_connection.cursor() as cursor:\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:256: in cursor\n[Test and build Python package/test]   |     return self._cursor()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:233: in _cursor\n[Test and build Python package/test]   |     self.ensure_connection()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: in ensure_connection\n[Test and build Python package/test]   |     self.connect()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/utils.py:89: in __exit__\n[Test and build Python package/test]   |     raise dj_exc_value.with_traceback(traceback) from exc_value\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: in ensure_connection\n[Test and build Python package/test]   |     self.connect()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:195: in connect\n[Test and build Python package/test]   |     self.connection = self.get_new_connection(conn_params)\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/postgresql/base.py:178: in get_new_connection\n[Test and build Python package/test]   |     connection = Database.connect(**conn_params)\n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | dsn = 'user=test password=test host=localhost port=5432 dbname=test'\n[Test and build Python package/test]   | connection_factory = None, cursor_factory = None\n[Test and build Python package/test]   | kwargs = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | kwasync = {}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         Create a new database connection.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         The connection parameters can be specified as a string:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         or using a set of keyword arguments:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Or as a mix of both. The basic connection parameters are:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         - *dbname*: the database name\n[Test and build Python package/test]   |         - *database*: the database name (only as keyword argument)\n[Test and build Python package/test]   |         - *user*: user name used to authenticate\n[Test and build Python package/test]   |         - *password*: password used to authenticate\n[Test and build Python package/test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Test and build Python package/test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *connection_factory* parameter a different class or connections\n[Test and build Python package/test]   |         factory can be specified. It should be a callable object taking a dsn\n[Test and build Python package/test]   |         argument.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Test and build Python package/test]   |         used by cursor().\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Test and build Python package/test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Any other keyword parameter will be passed to the underlying client\n[Test and build Python package/test]   |         library: the list of supported parameters depends on the library version.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         kwasync = {}\n[Test and build Python package/test]   |         if 'async' in kwargs:\n[Test and build Python package/test]   |             kwasync['async'] = kwargs.pop('async')\n[Test and build Python package/test]   |         if 'async_' in kwargs:\n[Test and build Python package/test]   |             kwasync['async_'] = kwargs.pop('async_')\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Test and build Python package/test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Test and build Python package/test]   | E       django.db.utils.OperationalError: could not connect to server: Connection refused\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (127.0.0.1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | E       could not connect to server: Cannot assign requested address\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (::1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/psycopg2/__init__.py:122: OperationalError\n[Test and build Python package/test]   | _____________________ ERROR at setup of test_locked_field ______________________\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def ensure_connection(self):\n[Test and build Python package/test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[Test and build Python package/test]   |         if self.connection is None:\n[Test and build Python package/test]   |             with self.wrap_database_errors:\n[Test and build Python package/test]   | >               self.connect()\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(self):\n[Test and build Python package/test]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[Test and build Python package/test]   |         # Check for invalid configurations.\n[Test and build Python package/test]   |         self.check_settings()\n[Test and build Python package/test]   |         # In case the previous connection was closed while in an atomic block\n[Test and build Python package/test]   |         self.in_atomic_block = False\n[Test and build Python package/test]   |         self.savepoint_ids = []\n[Test and build Python package/test]   |         self.needs_rollback = False\n[Test and build Python package/test]   |         # Reset parameters defining when to close the connection\n[Test and build Python package/test]   |         max_age = self.settings_dict['CONN_MAX_AGE']\n[Test and build Python package/test]   |         self.close_at = None if max_age is None else time.time() + max_age\n[Test and build Python package/test]   |         self.closed_in_transaction = False\n[Test and build Python package/test]   |         self.errors_occurred = False\n[Test and build Python package/test]   |         # Establish the connection\n[Test and build Python package/test]   |         conn_params = self.get_connection_params()\n[Test and build Python package/test]   | >       self.connection = self.get_new_connection(conn_params)\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:195: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | conn_params = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def get_new_connection(self, conn_params):\n[Test and build Python package/test]   | >       connection = Database.connect(**conn_params)\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/postgresql/base.py:178: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | dsn = 'user=test password=test host=localhost port=5432 dbname=test'\n[Test and build Python package/test]   | connection_factory = None, cursor_factory = None\n[Test and build Python package/test]   | kwargs = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | kwasync = {}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         Create a new database connection.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         The connection parameters can be specified as a string:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         or using a set of keyword arguments:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Or as a mix of both. The basic connection parameters are:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         - *dbname*: the database name\n[Test and build Python package/test]   |         - *database*: the database name (only as keyword argument)\n[Test and build Python package/test]   |         - *user*: user name used to authenticate\n[Test and build Python package/test]   |         - *password*: password used to authenticate\n[Test and build Python package/test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Test and build Python package/test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *connection_factory* parameter a different class or connections\n[Test and build Python package/test]   |         factory can be specified. It should be a callable object taking a dsn\n[Test and build Python package/test]   |         argument.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Test and build Python package/test]   |         used by cursor().\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Test and build Python package/test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Any other keyword parameter will be passed to the underlying client\n[Test and build Python package/test]   |         library: the list of supported parameters depends on the library version.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         kwasync = {}\n[Test and build Python package/test]   |         if 'async' in kwargs:\n[Test and build Python package/test]   |             kwasync['async'] = kwargs.pop('async')\n[Test and build Python package/test]   |         if 'async_' in kwargs:\n[Test and build Python package/test]   |             kwasync['async_'] = kwargs.pop('async_')\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Test and build Python package/test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Test and build Python package/test]   | E       psycopg2.OperationalError: could not connect to server: Connection refused\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (127.0.0.1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | E       could not connect to server: Cannot assign requested address\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (::1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/psycopg2/__init__.py:122: OperationalError\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | The above exception was the direct cause of the following exception:\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | request = <SubRequest '_django_db_marker' for <Function test_locked_field>>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     @pytest.fixture(autouse=True)\n[Test and build Python package/test]   |     def _django_db_marker(request) -> None:\n[Test and build Python package/test]   |         \"\"\"Implement the django_db marker, internal to pytest-django.\"\"\"\n[Test and build Python package/test]   |         marker = request.node.get_closest_marker(\"django_db\")\n[Test and build Python package/test]   |         if marker:\n[Test and build Python package/test]   | >           request.getfixturevalue(\"_django_db_helper\")\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/pytest_django/plugin.py:465: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/pytest_django/fixtures.py:125: in django_db_setup\n[Test and build Python package/test]   |     **setup_databases_args\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/test/utils.py:174: in setup_databases\n[Test and build Python package/test]   |     serialize=connection.settings_dict.get('TEST', {}).get('SERIALIZE', True),\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/creation.py:58: in create_test_db\n[Test and build Python package/test]   |     self._create_test_db(verbosity, autoclobber, keepdb)\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/creation.py:168: in _create_test_db\n[Test and build Python package/test]   |     with self._nodb_connection.cursor() as cursor:\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:256: in cursor\n[Test and build Python package/test]   |     return self._cursor()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:233: in _cursor\n[Test and build Python package/test]   |     self.ensure_connection()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: in ensure_connection\n[Test and build Python package/test]   |     self.connect()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/utils.py:89: in __exit__\n[Test and build Python package/test]   |     raise dj_exc_value.with_traceback(traceback) from exc_value\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: in ensure_connection\n[Test and build Python package/test]   |     self.connect()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:195: in connect\n[Test and build Python package/test]   |     self.connection = self.get_new_connection(conn_params)\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/postgresql/base.py:178: in get_new_connection\n[Test and build Python package/test]   |     connection = Database.connect(**conn_params)\n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | dsn = 'user=test password=test host=localhost port=5432 dbname=test'\n[Test and build Python package/test]   | connection_factory = None, cursor_factory = None\n[Test and build Python package/test]   | kwargs = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | kwasync = {}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         Create a new database connection.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         The connection parameters can be specified as a string:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         or using a set of keyword arguments:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Or as a mix of both. The basic connection parameters are:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         - *dbname*: the database name\n[Test and build Python package/test]   |         - *database*: the database name (only as keyword argument)\n[Test and build Python package/test]   |         - *user*: user name used to authenticate\n[Test and build Python package/test]   |         - *password*: password used to authenticate\n[Test and build Python package/test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Test and build Python package/test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *connection_factory* parameter a different class or connections\n[Test and build Python package/test]   |         factory can be specified. It should be a callable object taking a dsn\n[Test and build Python package/test]   |         argument.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Test and build Python package/test]   |         used by cursor().\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Test and build Python package/test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Any other keyword parameter will be passed to the underlying client\n[Test and build Python package/test]   |         library: the list of supported parameters depends on the library version.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         kwasync = {}\n[Test and build Python package/test]   |         if 'async' in kwargs:\n[Test and build Python package/test]   |             kwasync['async'] = kwargs.pop('async')\n[Test and build Python package/test]   |         if 'async_' in kwargs:\n[Test and build Python package/test]   |             kwasync['async_'] = kwargs.pop('async_')\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Test and build Python package/test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Test and build Python package/test]   | E       django.db.utils.OperationalError: could not connect to server: Connection refused\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (127.0.0.1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | E       could not connect to server: Cannot assign requested address\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (::1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/psycopg2/__init__.py:122: OperationalError\n[Test and build Python package/test]   | _________________ ERROR at setup of test_locked_field_subitem __________________\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def ensure_connection(self):\n[Test and build Python package/test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[Test and build Python package/test]   |         if self.connection is None:\n[Test and build Python package/test]   |             with self.wrap_database_errors:\n[Test and build Python package/test]   | >               self.connect()\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(self):\n[Test and build Python package/test]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[Test and build Python package/test]   |         # Check for invalid configurations.\n[Test and build Python package/test]   |         self.check_settings()\n[Test and build Python package/test]   |         # In case the previous connection was closed while in an atomic block\n[Test and build Python package/test]   |         self.in_atomic_block = False\n[Test and build Python package/test]   |         self.savepoint_ids = []\n[Test and build Python package/test]   |         self.needs_rollback = False\n[Test and build Python package/test]   |         # Reset parameters defining when to close the connection\n[Test and build Python package/test]   |         max_age = self.settings_dict['CONN_MAX_AGE']\n[Test and build Python package/test]   |         self.close_at = None if max_age is None else time.time() + max_age\n[Test and build Python package/test]   |         self.closed_in_transaction = False\n[Test and build Python package/test]   |         self.errors_occurred = False\n[Test and build Python package/test]   |         # Establish the connection\n[Test and build Python package/test]   |         conn_params = self.get_connection_params()\n[Test and build Python package/test]   | >       self.connection = self.get_new_connection(conn_params)\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:195: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | conn_params = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def get_new_connection(self, conn_params):\n[Test and build Python package/test]   | >       connection = Database.connect(**conn_params)\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/postgresql/base.py:178: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | dsn = 'user=test password=test host=localhost port=5432 dbname=test'\n[Test and build Python package/test]   | connection_factory = None, cursor_factory = None\n[Test and build Python package/test]   | kwargs = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | kwasync = {}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         Create a new database connection.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         The connection parameters can be specified as a string:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         or using a set of keyword arguments:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Or as a mix of both. The basic connection parameters are:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         - *dbname*: the database name\n[Test and build Python package/test]   |         - *database*: the database name (only as keyword argument)\n[Test and build Python package/test]   |         - *user*: user name used to authenticate\n[Test and build Python package/test]   |         - *password*: password used to authenticate\n[Test and build Python package/test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Test and build Python package/test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *connection_factory* parameter a different class or connections\n[Test and build Python package/test]   |         factory can be specified. It should be a callable object taking a dsn\n[Test and build Python package/test]   |         argument.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Test and build Python package/test]   |         used by cursor().\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Test and build Python package/test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Any other keyword parameter will be passed to the underlying client\n[Test and build Python package/test]   |         library: the list of supported parameters depends on the library version.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         kwasync = {}\n[Test and build Python package/test]   |         if 'async' in kwargs:\n[Test and build Python package/test]   |             kwasync['async'] = kwargs.pop('async')\n[Test and build Python package/test]   |         if 'async_' in kwargs:\n[Test and build Python package/test]   |             kwasync['async_'] = kwargs.pop('async_')\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Test and build Python package/test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Test and build Python package/test]   | E       psycopg2.OperationalError: could not connect to server: Connection refused\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (127.0.0.1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | E       could not connect to server: Cannot assign requested address\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (::1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/psycopg2/__init__.py:122: OperationalError\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | The above exception was the direct cause of the following exception:\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | request = <SubRequest '_django_db_marker' for <Function test_locked_field_subitem>>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     @pytest.fixture(autouse=True)\n[Test and build Python package/test]   |     def _django_db_marker(request) -> None:\n[Test and build Python package/test]   |         \"\"\"Implement the django_db marker, internal to pytest-django.\"\"\"\n[Test and build Python package/test]   |         marker = request.node.get_closest_marker(\"django_db\")\n[Test and build Python package/test]   |         if marker:\n[Test and build Python package/test]   | >           request.getfixturevalue(\"_django_db_helper\")\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/pytest_django/plugin.py:465: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/pytest_django/fixtures.py:125: in django_db_setup\n[Test and build Python package/test]   |     **setup_databases_args\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/test/utils.py:174: in setup_databases\n[Test and build Python package/test]   |     serialize=connection.settings_dict.get('TEST', {}).get('SERIALIZE', True),\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/creation.py:58: in create_test_db\n[Test and build Python package/test]   |     self._create_test_db(verbosity, autoclobber, keepdb)\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/creation.py:168: in _create_test_db\n[Test and build Python package/test]   |     with self._nodb_connection.cursor() as cursor:\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:256: in cursor\n[Test and build Python package/test]   |     return self._cursor()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:233: in _cursor\n[Test and build Python package/test]   |     self.ensure_connection()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: in ensure_connection\n[Test and build Python package/test]   |     self.connect()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/utils.py:89: in __exit__\n[Test and build Python package/test]   |     raise dj_exc_value.with_traceback(traceback) from exc_value\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: in ensure_connection\n[Test and build Python package/test]   |     self.connect()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:195: in connect\n[Test and build Python package/test]   |     self.connection = self.get_new_connection(conn_params)\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/postgresql/base.py:178: in get_new_connection\n[Test and build Python package/test]   |     connection = Database.connect(**conn_params)\n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | dsn = 'user=test password=test host=localhost port=5432 dbname=test'\n[Test and build Python package/test]   | connection_factory = None, cursor_factory = None\n[Test and build Python package/test]   | kwargs = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | kwasync = {}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         Create a new database connection.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         The connection parameters can be specified as a string:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         or using a set of keyword arguments:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Or as a mix of both. The basic connection parameters are:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         - *dbname*: the database name\n[Test and build Python package/test]   |         - *database*: the database name (only as keyword argument)\n[Test and build Python package/test]   |         - *user*: user name used to authenticate\n[Test and build Python package/test]   |         - *password*: password used to authenticate\n[Test and build Python package/test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Test and build Python package/test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *connection_factory* parameter a different class or connections\n[Test and build Python package/test]   |         factory can be specified. It should be a callable object taking a dsn\n[Test and build Python package/test]   |         argument.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Test and build Python package/test]   |         used by cursor().\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Test and build Python package/test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Any other keyword parameter will be passed to the underlying client\n[Test and build Python package/test]   |         library: the list of supported parameters depends on the library version.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         kwasync = {}\n[Test and build Python package/test]   |         if 'async' in kwargs:\n[Test and build Python package/test]   |             kwasync['async'] = kwargs.pop('async')\n[Test and build Python package/test]   |         if 'async_' in kwargs:\n[Test and build Python package/test]   |             kwasync['async_'] = kwargs.pop('async_')\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Test and build Python package/test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Test and build Python package/test]   | E       django.db.utils.OperationalError: could not connect to server: Connection refused\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (127.0.0.1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | E       could not connect to server: Cannot assign requested address\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (::1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/psycopg2/__init__.py:122: OperationalError\n[Test and build Python package/test]   | _______________________ ERROR at setup of test_full_bill _______________________\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def ensure_connection(self):\n[Test and build Python package/test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[Test and build Python package/test]   |         if self.connection is None:\n[Test and build Python package/test]   |             with self.wrap_database_errors:\n[Test and build Python package/test]   | >               self.connect()\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(self):\n[Test and build Python package/test]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[Test and build Python package/test]   |         # Check for invalid configurations.\n[Test and build Python package/test]   |         self.check_settings()\n[Test and build Python package/test]   |         # In case the previous connection was closed while in an atomic block\n[Test and build Python package/test]   |         self.in_atomic_block = False\n[Test and build Python package/test]   |         self.savepoint_ids = []\n[Test and build Python package/test]   |         self.needs_rollback = False\n[Test and build Python package/test]   |         # Reset parameters defining when to close the connection\n[Test and build Python package/test]   |         max_age = self.settings_dict['CONN_MAX_AGE']\n[Test and build Python package/test]   |         self.close_at = None if max_age is None else time.time() + max_age\n[Test and build Python package/test]   |         self.closed_in_transaction = False\n[Test and build Python package/test]   |         self.errors_occurred = False\n[Test and build Python package/test]   |         # Establish the connection\n[Test and build Python package/test]   |         conn_params = self.get_connection_params()\n[Test and build Python package/test]   | >       self.connection = self.get_new_connection(conn_params)\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:195: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | conn_params = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def get_new_connection(self, conn_params):\n[Test and build Python package/test]   | >       connection = Database.connect(**conn_params)\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/postgresql/base.py:178: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | dsn = 'user=test password=test host=localhost port=5432 dbname=test'\n[Test and build Python package/test]   | connection_factory = None, cursor_factory = None\n[Test and build Python package/test]   | kwargs = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | kwasync = {}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         Create a new database connection.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         The connection parameters can be specified as a string:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         or using a set of keyword arguments:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Or as a mix of both. The basic connection parameters are:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         - *dbname*: the database name\n[Test and build Python package/test]   |         - *database*: the database name (only as keyword argument)\n[Test and build Python package/test]   |         - *user*: user name used to authenticate\n[Test and build Python package/test]   |         - *password*: password used to authenticate\n[Test and build Python package/test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Test and build Python package/test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *connection_factory* parameter a different class or connections\n[Test and build Python package/test]   |         factory can be specified. It should be a callable object taking a dsn\n[Test and build Python package/test]   |         argument.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Test and build Python package/test]   |         used by cursor().\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Test and build Python package/test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Any other keyword parameter will be passed to the underlying client\n[Test and build Python package/test]   |         library: the list of supported parameters depends on the library version.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         kwasync = {}\n[Test and build Python package/test]   |         if 'async' in kwargs:\n[Test and build Python package/test]   |             kwasync['async'] = kwargs.pop('async')\n[Test and build Python package/test]   |         if 'async_' in kwargs:\n[Test and build Python package/test]   |             kwasync['async_'] = kwargs.pop('async_')\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Test and build Python package/test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Test and build Python package/test]   | E       psycopg2.OperationalError: could not connect to server: Connection refused\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (127.0.0.1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | E       could not connect to server: Cannot assign requested address\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (::1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/psycopg2/__init__.py:122: OperationalError\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | The above exception was the direct cause of the following exception:\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | request = <SubRequest '_django_db_marker' for <Function test_full_bill>>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     @pytest.fixture(autouse=True)\n[Test and build Python package/test]   |     def _django_db_marker(request) -> None:\n[Test and build Python package/test]   |         \"\"\"Implement the django_db marker, internal to pytest-django.\"\"\"\n[Test and build Python package/test]   |         marker = request.node.get_closest_marker(\"django_db\")\n[Test and build Python package/test]   |         if marker:\n[Test and build Python package/test]   | >           request.getfixturevalue(\"_django_db_helper\")\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/pytest_django/plugin.py:465: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/pytest_django/fixtures.py:125: in django_db_setup\n[Test and build Python package/test]   |     **setup_databases_args\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/test/utils.py:174: in setup_databases\n[Test and build Python package/test]   |     serialize=connection.settings_dict.get('TEST', {}).get('SERIALIZE', True),\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/creation.py:58: in create_test_db\n[Test and build Python package/test]   |     self._create_test_db(verbosity, autoclobber, keepdb)\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/creation.py:168: in _create_test_db\n[Test and build Python package/test]   |     with self._nodb_connection.cursor() as cursor:\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:256: in cursor\n[Test and build Python package/test]   |     return self._cursor()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:233: in _cursor\n[Test and build Python package/test]   |     self.ensure_connection()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: in ensure_connection\n[Test and build Python package/test]   |     self.connect()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/utils.py:89: in __exit__\n[Test and build Python package/test]   |     raise dj_exc_value.with_traceback(traceback) from exc_value\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: in ensure_connection\n[Test and build Python package/test]   |     self.connect()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:195: in connect\n[Test and build Python package/test]   |     self.connection = self.get_new_connection(conn_params)\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/postgresql/base.py:178: in get_new_connection\n[Test and build Python package/test]   |     connection = Database.connect(**conn_params)\n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | dsn = 'user=test password=test host=localhost port=5432 dbname=test'\n[Test and build Python package/test]   | connection_factory = None, cursor_factory = None\n[Test and build Python package/test]   | kwargs = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | kwasync = {}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         Create a new database connection.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         The connection parameters can be specified as a string:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         or using a set of keyword arguments:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Or as a mix of both. The basic connection parameters are:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         - *dbname*: the database name\n[Test and build Python package/test]   |         - *database*: the database name (only as keyword argument)\n[Test and build Python package/test]   |         - *user*: user name used to authenticate\n[Test and build Python package/test]   |         - *password*: password used to authenticate\n[Test and build Python package/test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Test and build Python package/test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *connection_factory* parameter a different class or connections\n[Test and build Python package/test]   |         factory can be specified. It should be a callable object taking a dsn\n[Test and build Python package/test]   |         argument.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Test and build Python package/test]   |         used by cursor().\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Test and build Python package/test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Any other keyword parameter will be passed to the underlying client\n[Test and build Python package/test]   |         library: the list of supported parameters depends on the library version.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         kwasync = {}\n[Test and build Python package/test]   |         if 'async' in kwargs:\n[Test and build Python package/test]   |             kwasync['async'] = kwargs.pop('async')\n[Test and build Python package/test]   |         if 'async_' in kwargs:\n[Test and build Python package/test]   |             kwasync['async_'] = kwargs.pop('async_')\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Test and build Python package/test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Test and build Python package/test]   | E       django.db.utils.OperationalError: could not connect to server: Connection refused\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (127.0.0.1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | E       could not connect to server: Cannot assign requested address\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (::1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/psycopg2/__init__.py:122: OperationalError\n[Test and build Python package/test]   | __________________ ERROR at setup of test_bill_chamber_param ___________________\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def ensure_connection(self):\n[Test and build Python package/test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[Test and build Python package/test]   |         if self.connection is None:\n[Test and build Python package/test]   |             with self.wrap_database_errors:\n[Test and build Python package/test]   | >               self.connect()\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(self):\n[Test and build Python package/test]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[Test and build Python package/test]   |         # Check for invalid configurations.\n[Test and build Python package/test]   |         self.check_settings()\n[Test and build Python package/test]   |         # In case the previous connection was closed while in an atomic block\n[Test and build Python package/test]   |         self.in_atomic_block = False\n[Test and build Python package/test]   |         self.savepoint_ids = []\n[Test and build Python package/test]   |         self.needs_rollback = False\n[Test and build Python package/test]   |         # Reset parameters defining when to close the connection\n[Test and build Python package/test]   |         max_age = self.settings_dict['CONN_MAX_AGE']\n[Test and build Python package/test]   |         self.close_at = None if max_age is None else time.time() + max_age\n[Test and build Python package/test]   |         self.closed_in_transaction = False\n[Test and build Python package/test]   |         self.errors_occurred = False\n[Test and build Python package/test]   |         # Establish the connection\n[Test and build Python package/test]   |         conn_params = self.get_connection_params()\n[Test and build Python package/test]   | >       self.connection = self.get_new_connection(conn_params)\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:195: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | conn_params = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def get_new_connection(self, conn_params):\n[Test and build Python package/test]   | >       connection = Database.connect(**conn_params)\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/postgresql/base.py:178: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | dsn = 'user=test password=test host=localhost port=5432 dbname=test'\n[Test and build Python package/test]   | connection_factory = None, cursor_factory = None\n[Test and build Python package/test]   | kwargs = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | kwasync = {}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         Create a new database connection.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         The connection parameters can be specified as a string:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         or using a set of keyword arguments:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Or as a mix of both. The basic connection parameters are:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         - *dbname*: the database name\n[Test and build Python package/test]   |         - *database*: the database name (only as keyword argument)\n[Test and build Python package/test]   |         - *user*: user name used to authenticate\n[Test and build Python package/test]   |         - *password*: password used to authenticate\n[Test and build Python package/test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Test and build Python package/test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *connection_factory* parameter a different class or connections\n[Test and build Python package/test]   |         factory can be specified. It should be a callable object taking a dsn\n[Test and build Python package/test]   |         argument.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Test and build Python package/test]   |         used by cursor().\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Test and build Python package/test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Any other keyword parameter will be passed to the underlying client\n[Test and build Python package/test]   |         library: the list of supported parameters depends on the library version.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         kwasync = {}\n[Test and build Python package/test]   |         if 'async' in kwargs:\n[Test and build Python package/test]   |             kwasync['async'] = kwargs.pop('async')\n[Test and build Python package/test]   |         if 'async_' in kwargs:\n[Test and build Python package/test]   |             kwasync['async_'] = kwargs.pop('async_')\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Test and build Python package/test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Test and build Python package/test]   | E       psycopg2.OperationalError: could not connect to server: Connection refused\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (127.0.0.1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | E       could not connect to server: Cannot assign requested address\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (::1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/psycopg2/__init__.py:122: OperationalError\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | The above exception was the direct cause of the following exception:\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | request = <SubRequest '_django_db_marker' for <Function test_bill_chamber_param>>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     @pytest.fixture(autouse=True)\n[Test and build Python package/test]   |     def _django_db_marker(request) -> None:\n[Test and build Python package/test]   |         \"\"\"Implement the django_db marker, internal to pytest-django.\"\"\"\n[Test and build Python package/test]   |         marker = request.node.get_closest_marker(\"django_db\")\n[Test and build Python package/test]   |         if marker:\n[Test and build Python package/test]   | >           request.getfixturevalue(\"_django_db_helper\")\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/pytest_django/plugin.py:465: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/pytest_django/fixtures.py:125: in django_db_setup\n[Test and build Python package/test]   |     **setup_databases_args\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/test/utils.py:174: in setup_databases\n[Test and build Python package/test]   |     serialize=connection.settings_dict.get('TEST', {}).get('SERIALIZE', True),\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/creation.py:58: in create_test_db\n[Test and build Python package/test]   |     self._create_test_db(verbosity, autoclobber, keepdb)\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/creation.py:168: in _create_test_db\n[Test and build Python package/test]   |     with self._nodb_connection.cursor() as cursor:\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:256: in cursor\n[Test and build Python package/test]   |     return self._cursor()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:233: in _cursor\n[Test and build Python package/test]   |     self.ensure_connection()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: in ensure_connection\n[Test and build Python package/test]   |     self.connect()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/utils.py:89: in __exit__\n[Test and build Python package/test]   |     raise dj_exc_value.with_traceback(traceback) from exc_value\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: in ensure_connection\n[Test and build Python package/test]   |     self.connect()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:195: in connect\n[Test and build Python package/test]   |     self.connection = self.get_new_connection(conn_params)\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/postgresql/base.py:178: in get_new_connection\n[Test and build Python package/test]   |     connection = Database.connect(**conn_params)\n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | dsn = 'user=test password=test host=localhost port=5432 dbname=test'\n[Test and build Python package/test]   | connection_factory = None, cursor_factory = None\n[Test and build Python package/test]   | kwargs = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | kwasync = {}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         Create a new database connection.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         The connection parameters can be specified as a string:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         or using a set of keyword arguments:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Or as a mix of both. The basic connection parameters are:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         - *dbname*: the database name\n[Test and build Python package/test]   |         - *database*: the database name (only as keyword argument)\n[Test and build Python package/test]   |         - *user*: user name used to authenticate\n[Test and build Python package/test]   |         - *password*: password used to authenticate\n[Test and build Python package/test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Test and build Python package/test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *connection_factory* parameter a different class or connections\n[Test and build Python package/test]   |         factory can be specified. It should be a callable object taking a dsn\n[Test and build Python package/test]   |         argument.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Test and build Python package/test]   |         used by cursor().\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Test and build Python package/test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Any other keyword parameter will be passed to the underlying client\n[Test and build Python package/test]   |         library: the list of supported parameters depends on the library version.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         kwasync = {}\n[Test and build Python package/test]   |         if 'async' in kwargs:\n[Test and build Python package/test]   |             kwasync['async'] = kwargs.pop('async')\n[Test and build Python package/test]   |         if 'async_' in kwargs:\n[Test and build Python package/test]   |             kwasync['async_'] = kwargs.pop('async_')\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Test and build Python package/test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Test and build Python package/test]   | E       django.db.utils.OperationalError: could not connect to server: Connection refused\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (127.0.0.1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | E       could not connect to server: Cannot assign requested address\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (::1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/psycopg2/__init__.py:122: OperationalError\n[Test and build Python package/test]   | ______________________ ERROR at setup of test_bill_update ______________________\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def ensure_connection(self):\n[Test and build Python package/test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[Test and build Python package/test]   |         if self.connection is None:\n[Test and build Python package/test]   |             with self.wrap_database_errors:\n[Test and build Python package/test]   | >               self.connect()\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(self):\n[Test and build Python package/test]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[Test and build Python package/test]   |         # Check for invalid configurations.\n[Test and build Python package/test]   |         self.check_settings()\n[Test and build Python package/test]   |         # In case the previous connection was closed while in an atomic block\n[Test and build Python package/test]   |         self.in_atomic_block = False\n[Test and build Python package/test]   |         self.savepoint_ids = []\n[Test and build Python package/test]   |         self.needs_rollback = False\n[Test and build Python package/test]   |         # Reset parameters defining when to close the connection\n[Test and build Python package/test]   |         max_age = self.settings_dict['CONN_MAX_AGE']\n[Test and build Python package/test]   |         self.close_at = None if max_age is None else time.time() + max_age\n[Test and build Python package/test]   |         self.closed_in_transaction = False\n[Test and build Python package/test]   |         self.errors_occurred = False\n[Test and build Python package/test]   |         # Establish the connection\n[Test and build Python package/test]   |         conn_params = self.get_connection_params()\n[Test and build Python package/test]   | >       self.connection = self.get_new_connection(conn_params)\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:195: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | conn_params = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def get_new_connection(self, conn_params):\n[Test and build Python package/test]   | >       connection = Database.connect(**conn_params)\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/postgresql/base.py:178: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | dsn = 'user=test password=test host=localhost port=5432 dbname=test'\n[Test and build Python package/test]   | connection_factory = None, cursor_factory = None\n[Test and build Python package/test]   | kwargs = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | kwasync = {}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         Create a new database connection.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         The connection parameters can be specified as a string:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         or using a set of keyword arguments:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Or as a mix of both. The basic connection parameters are:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         - *dbname*: the database name\n[Test and build Python package/test]   |         - *database*: the database name (only as keyword argument)\n[Test and build Python package/test]   |         - *user*: user name used to authenticate\n[Test and build Python package/test]   |         - *password*: password used to authenticate\n[Test and build Python package/test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Test and build Python package/test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *connection_factory* parameter a different class or connections\n[Test and build Python package/test]   |         factory can be specified. It should be a callable object taking a dsn\n[Test and build Python package/test]   |         argument.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Test and build Python package/test]   |         used by cursor().\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Test and build Python package/test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Any other keyword parameter will be passed to the underlying client\n[Test and build Python package/test]   |         library: the list of supported parameters depends on the library version.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         kwasync = {}\n[Test and build Python package/test]   |         if 'async' in kwargs:\n[Test and build Python package/test]   |             kwasync['async'] = kwargs.pop('async')\n[Test and build Python package/test]   |         if 'async_' in kwargs:\n[Test and build Python package/test]   |             kwasync['async_'] = kwargs.pop('async_')\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Test and build Python package/test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Test and build Python package/test]   | E       psycopg2.OperationalError: could not connect to server: Connection refused\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (127.0.0.1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | E       could not connect to server: Cannot assign requested address\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (::1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/psycopg2/__init__.py:122: OperationalError\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | The above exception was the direct cause of the following exception:\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | request = <SubRequest '_django_db_marker' for <Function test_bill_update>>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     @pytest.fixture(autouse=True)\n[Test and build Python package/test]   |     def _django_db_marker(request) -> None:\n[Test and build Python package/test]   |         \"\"\"Implement the django_db marker, internal to pytest-django.\"\"\"\n[Test and build Python package/test]   |         marker = request.node.get_closest_marker(\"django_db\")\n[Test and build Python package/test]   |         if marker:\n[Test and build Python package/test]   | >           request.getfixturevalue(\"_django_db_helper\")\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/pytest_django/plugin.py:465: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/pytest_django/fixtures.py:125: in django_db_setup\n[Test and build Python package/test]   |     **setup_databases_args\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/test/utils.py:174: in setup_databases\n[Test and build Python package/test]   |     serialize=connection.settings_dict.get('TEST', {}).get('SERIALIZE', True),\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/creation.py:58: in create_test_db\n[Test and build Python package/test]   |     self._create_test_db(verbosity, autoclobber, keepdb)\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/creation.py:168: in _create_test_db\n[Test and build Python package/test]   |     with self._nodb_connection.cursor() as cursor:\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:256: in cursor\n[Test and build Python package/test]   |     return self._cursor()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:233: in _cursor\n[Test and build Python package/test]   |     self.ensure_connection()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: in ensure_connection\n[Test and build Python package/test]   |     self.connect()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/utils.py:89: in __exit__\n[Test and build Python package/test]   |     raise dj_exc_value.with_traceback(traceback) from exc_value\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: in ensure_connection\n[Test and build Python package/test]   |     self.connect()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:195: in connect\n[Test and build Python package/test]   |     self.connection = self.get_new_connection(conn_params)\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/postgresql/base.py:178: in get_new_connection\n[Test and build Python package/test]   |     connection = Database.connect(**conn_params)\n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | dsn = 'user=test password=test host=localhost port=5432 dbname=test'\n[Test and build Python package/test]   | connection_factory = None, cursor_factory = None\n[Test and build Python package/test]   | kwargs = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | kwasync = {}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         Create a new database connection.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         The connection parameters can be specified as a string:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         or using a set of keyword arguments:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Or as a mix of both. The basic connection parameters are:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         - *dbname*: the database name\n[Test and build Python package/test]   |         - *database*: the database name (only as keyword argument)\n[Test and build Python package/test]   |         - *user*: user name used to authenticate\n[Test and build Python package/test]   |         - *password*: password used to authenticate\n[Test and build Python package/test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Test and build Python package/test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *connection_factory* parameter a different class or connections\n[Test and build Python package/test]   |         factory can be specified. It should be a callable object taking a dsn\n[Test and build Python package/test]   |         argument.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Test and build Python package/test]   |         used by cursor().\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Test and build Python package/test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Any other keyword parameter will be passed to the underlying client\n[Test and build Python package/test]   |         library: the list of supported parameters depends on the library version.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         kwasync = {}\n[Test and build Python package/test]   |         if 'async' in kwargs:\n[Test and build Python package/test]   |             kwasync['async'] = kwargs.pop('async')\n[Test and build Python package/test]   |         if 'async_' in kwargs:\n[Test and build Python package/test]   |             kwasync['async_'] = kwargs.pop('async_')\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Test and build Python package/test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Test and build Python package/test]   | E       django.db.utils.OperationalError: could not connect to server: Connection refused\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (127.0.0.1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | E       could not connect to server: Cannot assign requested address\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (::1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/psycopg2/__init__.py:122: OperationalError\n[Test and build Python package/test]   | ____________ ERROR at setup of test_bill_update_because_of_subitem _____________\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def ensure_connection(self):\n[Test and build Python package/test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[Test and build Python package/test]   |         if self.connection is None:\n[Test and build Python package/test]   |             with self.wrap_database_errors:\n[Test and build Python package/test]   | >               self.connect()\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(self):\n[Test and build Python package/test]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[Test and build Python package/test]   |         # Check for invalid configurations.\n[Test and build Python package/test]   |         self.check_settings()\n[Test and build Python package/test]   |         # In case the previous connection was closed while in an atomic block\n[Test and build Python package/test]   |         self.in_atomic_block = False\n[Test and build Python package/test]   |         self.savepoint_ids = []\n[Test and build Python package/test]   |         self.needs_rollback = False\n[Test and build Python package/test]   |         # Reset parameters defining when to close the connection\n[Test and build Python package/test]   |         max_age = self.settings_dict['CONN_MAX_AGE']\n[Test and build Python package/test]   |         self.close_at = None if max_age is None else time.time() + max_age\n[Test and build Python package/test]   |         self.closed_in_transaction = False\n[Test and build Python package/test]   |         self.errors_occurred = False\n[Test and build Python package/test]   |         # Establish the connection\n[Test and build Python package/test]   |         conn_params = self.get_connection_params()\n[Test and build Python package/test]   | >       self.connection = self.get_new_connection(conn_params)\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:195: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | conn_params = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def get_new_connection(self, conn_params):\n[Test and build Python package/test]   | >       connection = Database.connect(**conn_params)\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/postgresql/base.py:178: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | dsn = 'user=test password=test host=localhost port=5432 dbname=test'\n[Test and build Python package/test]   | connection_factory = None, cursor_factory = None\n[Test and build Python package/test]   | kwargs = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | kwasync = {}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         Create a new database connection.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         The connection parameters can be specified as a string:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         or using a set of keyword arguments:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Or as a mix of both. The basic connection parameters are:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         - *dbname*: the database name\n[Test and build Python package/test]   |         - *database*: the database name (only as keyword argument)\n[Test and build Python package/test]   |         - *user*: user name used to authenticate\n[Test and build Python package/test]   |         - *password*: password used to authenticate\n[Test and build Python package/test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Test and build Python package/test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *connection_factory* parameter a different class or connections\n[Test and build Python package/test]   |         factory can be specified. It should be a callable object taking a dsn\n[Test and build Python package/test]   |         argument.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Test and build Python package/test]   |         used by cursor().\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Test and build Python package/test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Any other keyword parameter will be passed to the underlying client\n[Test and build Python package/test]   |         library: the list of supported parameters depends on the library version.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         kwasync = {}\n[Test and build Python package/test]   |         if 'async' in kwargs:\n[Test and build Python package/test]   |             kwasync['async'] = kwargs.pop('async')\n[Test and build Python package/test]   |         if 'async_' in kwargs:\n[Test and build Python package/test]   |             kwasync['async_'] = kwargs.pop('async_')\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Test and build Python package/test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Test and build Python package/test]   | E       psycopg2.OperationalError: could not connect to server: Connection refused\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (127.0.0.1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | E       could not connect to server: Cannot assign requested address\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (::1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/psycopg2/__init__.py:122: OperationalError\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | The above exception was the direct cause of the following exception:\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | request = <SubRequest '_django_db_marker' for <Function test_bill_update_because_of_subitem>>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     @pytest.fixture(autouse=True)\n[Test and build Python package/test]   |     def _django_db_marker(request) -> None:\n[Test and build Python package/test]   |         \"\"\"Implement the django_db marker, internal to pytest-django.\"\"\"\n[Test and build Python package/test]   |         marker = request.node.get_closest_marker(\"django_db\")\n[Test and build Python package/test]   |         if marker:\n[Test and build Python package/test]   | >           request.getfixturevalue(\"_django_db_helper\")\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/pytest_django/plugin.py:465: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/pytest_django/fixtures.py:125: in django_db_setup\n[Test and build Python package/test]   |     **setup_databases_args\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/test/utils.py:174: in setup_databases\n[Test and build Python package/test]   |     serialize=connection.settings_dict.get('TEST', {}).get('SERIALIZE', True),\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/creation.py:58: in create_test_db\n[Test and build Python package/test]   |     self._create_test_db(verbosity, autoclobber, keepdb)\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/creation.py:168: in _create_test_db\n[Test and build Python package/test]   |     with self._nodb_connection.cursor() as cursor:\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:256: in cursor\n[Test and build Python package/test]   |     return self._cursor()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:233: in _cursor\n[Test and build Python package/test]   |     self.ensure_connection()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: in ensure_connection\n[Test and build Python package/test]   |     self.connect()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/utils.py:89: in __exit__\n[Test and build Python package/test]   |     raise dj_exc_value.with_traceback(traceback) from exc_value\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: in ensure_connection\n[Test and build Python package/test]   |     self.connect()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:195: in connect\n[Test and build Python package/test]   |     self.connection = self.get_new_connection(conn_params)\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/postgresql/base.py:178: in get_new_connection\n[Test and build Python package/test]   |     connection = Database.connect(**conn_params)\n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | dsn = 'user=test password=test host=localhost port=5432 dbname=test'\n[Test and build Python package/test]   | connection_factory = None, cursor_factory = None\n[Test and build Python package/test]   | kwargs = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | kwasync = {}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         Create a new database connection.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         The connection parameters can be specified as a string:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         or using a set of keyword arguments:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Or as a mix of both. The basic connection parameters are:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         - *dbname*: the database name\n[Test and build Python package/test]   |         - *database*: the database name (only as keyword argument)\n[Test and build Python package/test]   |         - *user*: user name used to authenticate\n[Test and build Python package/test]   |         - *password*: password used to authenticate\n[Test and build Python package/test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Test and build Python package/test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *connection_factory* parameter a different class or connections\n[Test and build Python package/test]   |         factory can be specified. It should be a callable object taking a dsn\n[Test and build Python package/test]   |         argument.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Test and build Python package/test]   |         used by cursor().\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Test and build Python package/test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Any other keyword parameter will be passed to the underlying client\n[Test and build Python package/test]   |         library: the list of supported parameters depends on the library version.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         kwasync = {}\n[Test and build Python package/test]   |         if 'async' in kwargs:\n[Test and build Python package/test]   |             kwasync['async'] = kwargs.pop('async')\n[Test and build Python package/test]   |         if 'async_' in kwargs:\n[Test and build Python package/test]   |             kwasync['async_'] = kwargs.pop('async_')\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Test and build Python package/test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Test and build Python package/test]   | E       django.db.utils.OperationalError: could not connect to server: Connection refused\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (127.0.0.1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | E       could not connect to server: Cannot assign requested address\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (::1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/psycopg2/__init__.py:122: OperationalError\n[Test and build Python package/test]   | ________________ ERROR at setup of test_bill_update_subsubitem _________________\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def ensure_connection(self):\n[Test and build Python package/test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[Test and build Python package/test]   |         if self.connection is None:\n[Test and build Python package/test]   |             with self.wrap_database_errors:\n[Test and build Python package/test]   | >               self.connect()\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(self):\n[Test and build Python package/test]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[Test and build Python package/test]   |         # Check for invalid configurations.\n[Test and build Python package/test]   |         self.check_settings()\n[Test and build Python package/test]   |         # In case the previous connection was closed while in an atomic block\n[Test and build Python package/test]   |         self.in_atomic_block = False\n[Test and build Python package/test]   |         self.savepoint_ids = []\n[Test and build Python package/test]   |         self.needs_rollback = False\n[Test and build Python package/test]   |         # Reset parameters defining when to close the connection\n[Test and build Python package/test]   |         max_age = self.settings_dict['CONN_MAX_AGE']\n[Test and build Python package/test]   |         self.close_at = None if max_age is None else time.time() + max_age\n[Test and build Python package/test]   |         self.closed_in_transaction = False\n[Test and build Python package/test]   |         self.errors_occurred = False\n[Test and build Python package/test]   |         # Establish the connection\n[Test and build Python package/test]   |         conn_params = self.get_connection_params()\n[Test and build Python package/test]   | >       self.connection = self.get_new_connection(conn_params)\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:195: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | conn_params = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def get_new_connection(self, conn_params):\n[Test and build Python package/test]   | >       connection = Database.connect(**conn_params)\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/postgresql/base.py:178: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | dsn = 'user=test password=test host=localhost port=5432 dbname=test'\n[Test and build Python package/test]   | connection_factory = None, cursor_factory = None\n[Test and build Python package/test]   | kwargs = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | kwasync = {}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         Create a new database connection.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         The connection parameters can be specified as a string:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         or using a set of keyword arguments:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Or as a mix of both. The basic connection parameters are:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         - *dbname*: the database name\n[Test and build Python package/test]   |         - *database*: the database name (only as keyword argument)\n[Test and build Python package/test]   |         - *user*: user name used to authenticate\n[Test and build Python package/test]   |         - *password*: password used to authenticate\n[Test and build Python package/test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Test and build Python package/test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *connection_factory* parameter a different class or connections\n[Test and build Python package/test]   |         factory can be specified. It should be a callable object taking a dsn\n[Test and build Python package/test]   |         argument.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Test and build Python package/test]   |         used by cursor().\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Test and build Python package/test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Any other keyword parameter will be passed to the underlying client\n[Test and build Python package/test]   |         library: the list of supported parameters depends on the library version.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         kwasync = {}\n[Test and build Python package/test]   |         if 'async' in kwargs:\n[Test and build Python package/test]   |             kwasync['async'] = kwargs.pop('async')\n[Test and build Python package/test]   |         if 'async_' in kwargs:\n[Test and build Python package/test]   |             kwasync['async_'] = kwargs.pop('async_')\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Test and build Python package/test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Test and build Python package/test]   | E       psycopg2.OperationalError: could not connect to server: Connection refused\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (127.0.0.1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | E       could not connect to server: Cannot assign requested address\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (::1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/psycopg2/__init__.py:122: OperationalError\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | The above exception was the direct cause of the following exception:\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | request = <SubRequest '_django_db_marker' for <Function test_bill_update_subsubitem>>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     @pytest.fixture(autouse=True)\n[Test and build Python package/test]   |     def _django_db_marker(request) -> None:\n[Test and build Python package/test]   |         \"\"\"Implement the django_db marker, internal to pytest-django.\"\"\"\n[Test and build Python package/test]   |         marker = request.node.get_closest_marker(\"django_db\")\n[Test and build Python package/test]   |         if marker:\n[Test and build Python package/test]   | >           request.getfixturevalue(\"_django_db_helper\")\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/pytest_django/plugin.py:465: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/pytest_django/fixtures.py:125: in django_db_setup\n[Test and build Python package/test]   |     **setup_databases_args\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/test/utils.py:174: in setup_databases\n[Test and build Python package/test]   |     serialize=connection.settings_dict.get('TEST', {}).get('SERIALIZE', True),\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/creation.py:58: in create_test_db\n[Test and build Python package/test]   |     self._create_test_db(verbosity, autoclobber, keepdb)\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/creation.py:168: in _create_test_db\n[Test and build Python package/test]   |     with self._nodb_connection.cursor() as cursor:\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:256: in cursor\n[Test and build Python package/test]   |     return self._cursor()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:233: in _cursor\n[Test and build Python package/test]   |     self.ensure_connection()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: in ensure_connection\n[Test and build Python package/test]   |     self.connect()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/utils.py:89: in __exit__\n[Test and build Python package/test]   |     raise dj_exc_value.with_traceback(traceback) from exc_value\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: in ensure_connection\n[Test and build Python package/test]   |     self.connect()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:195: in connect\n[Test and build Python package/test]   |     self.connection = self.get_new_connection(conn_params)\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/postgresql/base.py:178: in get_new_connection\n[Test and build Python package/test]   |     connection = Database.connect(**conn_params)\n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | dsn = 'user=test password=test host=localhost port=5432 dbname=test'\n[Test and build Python package/test]   | connection_factory = None, cursor_factory = None\n[Test and build Python package/test]   | kwargs = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | kwasync = {}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         Create a new database connection.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         The connection parameters can be specified as a string:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         or using a set of keyword arguments:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Or as a mix of both. The basic connection parameters are:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         - *dbname*: the database name\n[Test and build Python package/test]   |         - *database*: the database name (only as keyword argument)\n[Test and build Python package/test]   |         - *user*: user name used to authenticate\n[Test and build Python package/test]   |         - *password*: password used to authenticate\n[Test and build Python package/test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Test and build Python package/test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *connection_factory* parameter a different class or connections\n[Test and build Python package/test]   |         factory can be specified. It should be a callable object taking a dsn\n[Test and build Python package/test]   |         argument.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Test and build Python package/test]   |         used by cursor().\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Test and build Python package/test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Any other keyword parameter will be passed to the underlying client\n[Test and build Python package/test]   |         library: the list of supported parameters depends on the library version.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         kwasync = {}\n[Test and build Python package/test]   |         if 'async' in kwargs:\n[Test and build Python package/test]   |             kwasync['async'] = kwargs.pop('async')\n[Test and build Python package/test]   |         if 'async_' in kwargs:\n[Test and build Python package/test]   |             kwasync['async_'] = kwargs.pop('async_')\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Test and build Python package/test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Test and build Python package/test]   | E       django.db.utils.OperationalError: could not connect to server: Connection refused\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (127.0.0.1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | E       could not connect to server: Cannot assign requested address\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (::1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/psycopg2/__init__.py:122: OperationalError\n[Test and build Python package/test]   | ______________ ERROR at setup of test_bill_sponsor_by_identifier _______________\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def ensure_connection(self):\n[Test and build Python package/test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[Test and build Python package/test]   |         if self.connection is None:\n[Test and build Python package/test]   |             with self.wrap_database_errors:\n[Test and build Python package/test]   | >               self.connect()\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(self):\n[Test and build Python package/test]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[Test and build Python package/test]   |         # Check for invalid configurations.\n[Test and build Python package/test]   |         self.check_settings()\n[Test and build Python package/test]   |         # In case the previous connection was closed while in an atomic block\n[Test and build Python package/test]   |         self.in_atomic_block = False\n[Test and build Python package/test]   |         self.savepoint_ids = []\n[Test and build Python package/test]   |         self.needs_rollback = False\n[Test and build Python package/test]   |         # Reset parameters defining when to close the connection\n[Test and build Python package/test]   |         max_age = self.settings_dict['CONN_MAX_AGE']\n[Test and build Python package/test]   |         self.close_at = None if max_age is None else time.time() + max_age\n[Test and build Python package/test]   |         self.closed_in_transaction = False\n[Test and build Python package/test]   |         self.errors_occurred = False\n[Test and build Python package/test]   |         # Establish the connection\n[Test and build Python package/test]   |         conn_params = self.get_connection_params()\n[Test and build Python package/test]   | >       self.connection = self.get_new_connection(conn_params)\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:195: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | conn_params = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def get_new_connection(self, conn_params):\n[Test and build Python package/test]   | >       connection = Database.connect(**conn_params)\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/postgresql/base.py:178: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | dsn = 'user=test password=test host=localhost port=5432 dbname=test'\n[Test and build Python package/test]   | connection_factory = None, cursor_factory = None\n[Test and build Python package/test]   | kwargs = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | kwasync = {}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         Create a new database connection.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         The connection parameters can be specified as a string:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         or using a set of keyword arguments:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Or as a mix of both. The basic connection parameters are:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         - *dbname*: the database name\n[Test and build Python package/test]   |         - *database*: the database name (only as keyword argument)\n[Test and build Python package/test]   |         - *user*: user name used to authenticate\n[Test and build Python package/test]   |         - *password*: password used to authenticate\n[Test and build Python package/test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Test and build Python package/test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *connection_factory* parameter a different class or connections\n[Test and build Python package/test]   |         factory can be specified. It should be a callable object taking a dsn\n[Test and build Python package/test]   |         argument.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Test and build Python package/test]   |         used by cursor().\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Test and build Python package/test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Any other keyword parameter will be passed to the underlying client\n[Test and build Python package/test]   |         library: the list of supported parameters depends on the library version.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         kwasync = {}\n[Test and build Python package/test]   |         if 'async' in kwargs:\n[Test and build Python package/test]   |             kwasync['async'] = kwargs.pop('async')\n[Test and build Python package/test]   |         if 'async_' in kwargs:\n[Test and build Python package/test]   |             kwasync['async_'] = kwargs.pop('async_')\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Test and build Python package/test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Test and build Python package/test]   | E       psycopg2.OperationalError: could not connect to server: Connection refused\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (127.0.0.1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | E       could not connect to server: Cannot assign requested address\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (::1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/psycopg2/__init__.py:122: OperationalError\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | The above exception was the direct cause of the following exception:\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | request = <SubRequest '_django_db_marker' for <Function test_bill_sponsor_by_identifier>>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     @pytest.fixture(autouse=True)\n[Test and build Python package/test]   |     def _django_db_marker(request) -> None:\n[Test and build Python package/test]   |         \"\"\"Implement the django_db marker, internal to pytest-django.\"\"\"\n[Test and build Python package/test]   |         marker = request.node.get_closest_marker(\"django_db\")\n[Test and build Python package/test]   |         if marker:\n[Test and build Python package/test]   | >           request.getfixturevalue(\"_django_db_helper\")\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/pytest_django/plugin.py:465: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/pytest_django/fixtures.py:125: in django_db_setup\n[Test and build Python package/test]   |     **setup_databases_args\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/test/utils.py:174: in setup_databases\n[Test and build Python package/test]   |     serialize=connection.settings_dict.get('TEST', {}).get('SERIALIZE', True),\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/creation.py:58: in create_test_db\n[Test and build Python package/test]   |     self._create_test_db(verbosity, autoclobber, keepdb)\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/creation.py:168: in _create_test_db\n[Test and build Python package/test]   |     with self._nodb_connection.cursor() as cursor:\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:256: in cursor\n[Test and build Python package/test]   |     return self._cursor()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:233: in _cursor\n[Test and build Python package/test]   |     self.ensure_connection()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: in ensure_connection\n[Test and build Python package/test]   |     self.connect()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/utils.py:89: in __exit__\n[Test and build Python package/test]   |     raise dj_exc_value.with_traceback(traceback) from exc_value\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: in ensure_connection\n[Test and build Python package/test]   |     self.connect()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:195: in connect\n[Test and build Python package/test]   |     self.connection = self.get_new_connection(conn_params)\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/postgresql/base.py:178: in get_new_connection\n[Test and build Python package/test]   |     connection = Database.connect(**conn_params)\n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | dsn = 'user=test password=test host=localhost port=5432 dbname=test'\n[Test and build Python package/test]   | connection_factory = None, cursor_factory = None\n[Test and build Python package/test]   | kwargs = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | kwasync = {}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         Create a new database connection.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         The connection parameters can be specified as a string:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         or using a set of keyword arguments:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Or as a mix of both. The basic connection parameters are:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         - *dbname*: the database name\n[Test and build Python package/test]   |         - *database*: the database name (only as keyword argument)\n[Test and build Python package/test]   |         - *user*: user name used to authenticate\n[Test and build Python package/test]   |         - *password*: password used to authenticate\n[Test and build Python package/test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Test and build Python package/test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *connection_factory* parameter a different class or connections\n[Test and build Python package/test]   |         factory can be specified. It should be a callable object taking a dsn\n[Test and build Python package/test]   |         argument.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Test and build Python package/test]   |         used by cursor().\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Test and build Python package/test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Any other keyword parameter will be passed to the underlying client\n[Test and build Python package/test]   |         library: the list of supported parameters depends on the library version.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         kwasync = {}\n[Test and build Python package/test]   |         if 'async' in kwargs:\n[Test and build Python package/test]   |             kwasync['async'] = kwargs.pop('async')\n[Test and build Python package/test]   |         if 'async_' in kwargs:\n[Test and build Python package/test]   |             kwasync['async_'] = kwargs.pop('async_')\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Test and build Python package/test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Test and build Python package/test]   | E       django.db.utils.OperationalError: could not connect to server: Connection refused\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (127.0.0.1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | E       could not connect to server: Cannot assign requested address\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (::1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/psycopg2/__init__.py:122: OperationalError\n[Test and build Python package/test]   | _______________ ERROR at setup of test_bill_sponsor_limit_lookup _______________\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def ensure_connection(self):\n[Test and build Python package/test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[Test and build Python package/test]   |         if self.connection is None:\n[Test and build Python package/test]   |             with self.wrap_database_errors:\n[Test and build Python package/test]   | >               self.connect()\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(self):\n[Test and build Python package/test]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[Test and build Python package/test]   |         # Check for invalid configurations.\n[Test and build Python package/test]   |         self.check_settings()\n[Test and build Python package/test]   |         # In case the previous connection was closed while in an atomic block\n[Test and build Python package/test]   |         self.in_atomic_block = False\n[Test and build Python package/test]   |         self.savepoint_ids = []\n[Test and build Python package/test]   |         self.needs_rollback = False\n[Test and build Python package/test]   |         # Reset parameters defining when to close the connection\n[Test and build Python package/test]   |         max_age = self.settings_dict['CONN_MAX_AGE']\n[Test and build Python package/test]   |         self.close_at = None if max_age is None else time.time() + max_age\n[Test and build Python package/test]   |         self.closed_in_transaction = False\n[Test and build Python package/test]   |         self.errors_occurred = False\n[Test and build Python package/test]   |         # Establish the connection\n[Test and build Python package/test]   |         conn_params = self.get_connection_params()\n[Test and build Python package/test]   | >       self.connection = self.get_new_connection(conn_params)\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:195: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | conn_params = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def get_new_connection(self, conn_params):\n[Test and build Python package/test]   | >       connection = Database.connect(**conn_params)\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/postgresql/base.py:178: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | dsn = 'user=test password=test host=localhost port=5432 dbname=test'\n[Test and build Python package/test]   | connection_factory = None, cursor_factory = None\n[Test and build Python package/test]   | kwargs = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | kwasync = {}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         Create a new database connection.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         The connection parameters can be specified as a string:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         or using a set of keyword arguments:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Or as a mix of both. The basic connection parameters are:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         - *dbname*: the database name\n[Test and build Python package/test]   |         - *database*: the database name (only as keyword argument)\n[Test and build Python package/test]   |         - *user*: user name used to authenticate\n[Test and build Python package/test]   |         - *password*: password used to authenticate\n[Test and build Python package/test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Test and build Python package/test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *connection_factory* parameter a different class or connections\n[Test and build Python package/test]   |         factory can be specified. It should be a callable object taking a dsn\n[Test and build Python package/test]   |         argument.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Test and build Python package/test]   |         used by cursor().\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Test and build Python package/test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Any other keyword parameter will be passed to the underlying client\n[Test and build Python package/test]   |         library: the list of supported parameters depends on the library version.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         kwasync = {}\n[Test and build Python package/test]   |         if 'async' in kwargs:\n[Test and build Python package/test]   |             kwasync['async'] = kwargs.pop('async')\n[Test and build Python package/test]   |         if 'async_' in kwargs:\n[Test and build Python package/test]   |             kwasync['async_'] = kwargs.pop('async_')\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Test and build Python package/test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Test and build Python package/test]   | E       psycopg2.OperationalError: could not connect to server: Connection refused\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (127.0.0.1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | E       could not connect to server: Cannot assign requested address\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (::1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/psycopg2/__init__.py:122: OperationalError\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | The above exception was the direct cause of the following exception:\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | request = <SubRequest '_django_db_marker' for <Function test_bill_sponsor_limit_lookup>>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     @pytest.fixture(autouse=True)\n[Test and build Python package/test]   |     def _django_db_marker(request) -> None:\n[Test and build Python package/test]   |         \"\"\"Implement the django_db marker, internal to pytest-django.\"\"\"\n[Test and build Python package/test]   |         marker = request.node.get_closest_marker(\"django_db\")\n[Test and build Python package/test]   |         if marker:\n[Test and build Python package/test]   | >           request.getfixturevalue(\"_django_db_helper\")\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/pytest_django/plugin.py:465: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/pytest_django/fixtures.py:125: in django_db_setup\n[Test and build Python package/test]   |     **setup_databases_args\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/test/utils.py:174: in setup_databases\n[Test and build Python package/test]   |     serialize=connection.settings_dict.get('TEST', {}).get('SERIALIZE', True),\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/creation.py:58: in create_test_db\n[Test and build Python package/test]   |     self._create_test_db(verbosity, autoclobber, keepdb)\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/creation.py:168: in _create_test_db\n[Test and build Python package/test]   |     with self._nodb_connection.cursor() as cursor:\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:256: in cursor\n[Test and build Python package/test]   |     return self._cursor()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:233: in _cursor\n[Test and build Python package/test]   |     self.ensure_connection()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: in ensure_connection\n[Test and build Python package/test]   |     self.connect()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/utils.py:89: in __exit__\n[Test and build Python package/test]   |     raise dj_exc_value.with_traceback(traceback) from exc_value\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: in ensure_connection\n[Test and build Python package/test]   |     self.connect()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:195: in connect\n[Test and build Python package/test]   |     self.connection = self.get_new_connection(conn_params)\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/postgresql/base.py:178: in get_new_connection\n[Test and build Python package/test]   |     connection = Database.connect(**conn_params)\n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | dsn = 'user=test password=test host=localhost port=5432 dbname=test'\n[Test and build Python package/test]   | connection_factory = None, cursor_factory = None\n[Test and build Python package/test]   | kwargs = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | kwasync = {}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         Create a new database connection.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         The connection parameters can be specified as a string:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         or using a set of keyword arguments:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Or as a mix of both. The basic connection parameters are:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         - *dbname*: the database name\n[Test and build Python package/test]   |         - *database*: the database name (only as keyword argument)\n[Test and build Python package/test]   |         - *user*: user name used to authenticate\n[Test and build Python package/test]   |         - *password*: password used to authenticate\n[Test and build Python package/test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Test and build Python package/test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *connection_factory* parameter a different class or connections\n[Test and build Python package/test]   |         factory can be specified. It should be a callable object taking a dsn\n[Test and build Python package/test]   |         argument.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Test and build Python package/test]   |         used by cursor().\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Test and build Python package/test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Any other keyword parameter will be passed to the underlying client\n[Test and build Python package/test]   |         library: the list of supported parameters depends on the library version.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         kwasync = {}\n[Test and build Python package/test]   |         if 'async' in kwargs:\n[Test and build Python package/test]   |             kwasync['async'] = kwargs.pop('async')\n[Test and build Python package/test]   |         if 'async_' in kwargs:\n[Test and build Python package/test]   |             kwasync['async_'] = kwargs.pop('async_')\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Test and build Python package/test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Test and build Python package/test]   | E       django.db.utils.OperationalError: could not connect to server: Connection refused\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (127.0.0.1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | E       could not connect to server: Cannot assign requested address\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (::1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/psycopg2/__init__.py:122: OperationalError\n[Test and build Python package/test]   | __________________ ERROR at setup of test_bill_action_extras ___________________\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def ensure_connection(self):\n[Test and build Python package/test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[Test and build Python package/test]   |         if self.connection is None:\n[Test and build Python package/test]   |             with self.wrap_database_errors:\n[Test and build Python package/test]   | >               self.connect()\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(self):\n[Test and build Python package/test]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[Test and build Python package/test]   |         # Check for invalid configurations.\n[Test and build Python package/test]   |         self.check_settings()\n[Test and build Python package/test]   |         # In case the previous connection was closed while in an atomic block\n[Test and build Python package/test]   |         self.in_atomic_block = False\n[Test and build Python package/test]   |         self.savepoint_ids = []\n[Test and build Python package/test]   |         self.needs_rollback = False\n[Test and build Python package/test]   |         # Reset parameters defining when to close the connection\n[Test and build Python package/test]   |         max_age = self.settings_dict['CONN_MAX_AGE']\n[Test and build Python package/test]   |         self.close_at = None if max_age is None else time.time() + max_age\n[Test and build Python package/test]   |         self.closed_in_transaction = False\n[Test and build Python package/test]   |         self.errors_occurred = False\n[Test and build Python package/test]   |         # Establish the connection\n[Test and build Python package/test]   |         conn_params = self.get_connection_params()\n[Test and build Python package/test]   | >       self.connection = self.get_new_connection(conn_params)\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:195: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | conn_params = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def get_new_connection(self, conn_params):\n[Test and build Python package/test]   | >       connection = Database.connect(**conn_params)\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/postgresql/base.py:178: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | dsn = 'user=test password=test host=localhost port=5432 dbname=test'\n[Test and build Python package/test]   | connection_factory = None, cursor_factory = None\n[Test and build Python package/test]   | kwargs = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | kwasync = {}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         Create a new database connection.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         The connection parameters can be specified as a string:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         or using a set of keyword arguments:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Or as a mix of both. The basic connection parameters are:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         - *dbname*: the database name\n[Test and build Python package/test]   |         - *database*: the database name (only as keyword argument)\n[Test and build Python package/test]   |         - *user*: user name used to authenticate\n[Test and build Python package/test]   |         - *password*: password used to authenticate\n[Test and build Python package/test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Test and build Python package/test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *connection_factory* parameter a different class or connections\n[Test and build Python package/test]   |         factory can be specified. It should be a callable object taking a dsn\n[Test and build Python package/test]   |         argument.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Test and build Python package/test]   |         used by cursor().\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Test and build Python package/test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Any other keyword parameter will be passed to the underlying client\n[Test and build Python package/test]   |         library: the list of supported parameters depends on the library version.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         kwasync = {}\n[Test and build Python package/test]   |         if 'async' in kwargs:\n[Test and build Python package/test]   |             kwasync['async'] = kwargs.pop('async')\n[Test and build Python package/test]   |         if 'async_' in kwargs:\n[Test and build Python package/test]   |             kwasync['async_'] = kwargs.pop('async_')\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Test and build Python package/test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Test and build Python package/test]   | E       psycopg2.OperationalError: could not connect to server: Connection refused\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (127.0.0.1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | E       could not connect to server: Cannot assign requested address\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (::1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/psycopg2/__init__.py:122: OperationalError\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | The above exception was the direct cause of the following exception:\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | request = <SubRequest '_django_db_marker' for <Function test_bill_action_extras>>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     @pytest.fixture(autouse=True)\n[Test and build Python package/test]   |     def _django_db_marker(request) -> None:\n[Test and build Python package/test]   |         \"\"\"Implement the django_db marker, internal to pytest-django.\"\"\"\n[Test and build Python package/test]   |         marker = request.node.get_closest_marker(\"django_db\")\n[Test and build Python package/test]   |         if marker:\n[Test and build Python package/test]   | >           request.getfixturevalue(\"_django_db_helper\")\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/pytest_django/plugin.py:465: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/pytest_django/fixtures.py:125: in django_db_setup\n[Test and build Python package/test]   |     **setup_databases_args\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/test/utils.py:174: in setup_databases\n[Test and build Python package/test]   |     serialize=connection.settings_dict.get('TEST', {}).get('SERIALIZE', True),\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/creation.py:58: in create_test_db\n[Test and build Python package/test]   |     self._create_test_db(verbosity, autoclobber, keepdb)\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/creation.py:168: in _create_test_db\n[Test and build Python package/test]   |     with self._nodb_connection.cursor() as cursor:\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:256: in cursor\n[Test and build Python package/test]   |     return self._cursor()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:233: in _cursor\n[Test and build Python package/test]   |     self.ensure_connection()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: in ensure_connection\n[Test and build Python package/test]   |     self.connect()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/utils.py:89: in __exit__\n[Test and build Python package/test]   |     raise dj_exc_value.with_traceback(traceback) from exc_value\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: in ensure_connection\n[Test and build Python package/test]   |     self.connect()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:195: in connect\n[Test and build Python package/test]   |     self.connection = self.get_new_connection(conn_params)\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/postgresql/base.py:178: in get_new_connection\n[Test and build Python package/test]   |     connection = Database.connect(**conn_params)\n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | dsn = 'user=test password=test host=localhost port=5432 dbname=test'\n[Test and build Python package/test]   | connection_factory = None, cursor_factory = None\n[Test and build Python package/test]   | kwargs = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | kwasync = {}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         Create a new database connection.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         The connection parameters can be specified as a string:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         or using a set of keyword arguments:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Or as a mix of both. The basic connection parameters are:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         - *dbname*: the database name\n[Test and build Python package/test]   |         - *database*: the database name (only as keyword argument)\n[Test and build Python package/test]   |         - *user*: user name used to authenticate\n[Test and build Python package/test]   |         - *password*: password used to authenticate\n[Test and build Python package/test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Test and build Python package/test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *connection_factory* parameter a different class or connections\n[Test and build Python package/test]   |         factory can be specified. It should be a callable object taking a dsn\n[Test and build Python package/test]   |         argument.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Test and build Python package/test]   |         used by cursor().\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Test and build Python package/test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Any other keyword parameter will be passed to the underlying client\n[Test and build Python package/test]   |         library: the list of supported parameters depends on the library version.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         kwasync = {}\n[Test and build Python package/test]   |         if 'async' in kwargs:\n[Test and build Python package/test]   |             kwasync['async'] = kwargs.pop('async')\n[Test and build Python package/test]   |         if 'async_' in kwargs:\n[Test and build Python package/test]   |             kwasync['async_'] = kwargs.pop('async_')\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Test and build Python package/test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Test and build Python package/test]   | E       django.db.utils.OperationalError: could not connect to server: Connection refused\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (127.0.0.1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | E       could not connect to server: Cannot assign requested address\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (::1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/psycopg2/__init__.py:122: OperationalError\n[Test and build Python package/test]   | ______________________ ERROR at setup of test_fix_bill_id ______________________\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def ensure_connection(self):\n[Test and build Python package/test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[Test and build Python package/test]   |         if self.connection is None:\n[Test and build Python package/test]   |             with self.wrap_database_errors:\n[Test and build Python package/test]   | >               self.connect()\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(self):\n[Test and build Python package/test]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[Test and build Python package/test]   |         # Check for invalid configurations.\n[Test and build Python package/test]   |         self.check_settings()\n[Test and build Python package/test]   |         # In case the previous connection was closed while in an atomic block\n[Test and build Python package/test]   |         self.in_atomic_block = False\n[Test and build Python package/test]   |         self.savepoint_ids = []\n[Test and build Python package/test]   |         self.needs_rollback = False\n[Test and build Python package/test]   |         # Reset parameters defining when to close the connection\n[Test and build Python package/test]   |         max_age = self.settings_dict['CONN_MAX_AGE']\n[Test and build Python package/test]   |         self.close_at = None if max_age is None else time.time() + max_age\n[Test and build Python package/test]   |         self.closed_in_transaction = False\n[Test and build Python package/test]   |         self.errors_occurred = False\n[Test and build Python package/test]   |         # Establish the connection\n[Test and build Python package/test]   |         conn_params = self.get_connection_params()\n[Test and build Python package/test]   | >       self.connection = self.get_new_connection(conn_params)\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:195: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | conn_params = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def get_new_connection(self, conn_params):\n[Test and build Python package/test]   | >       connection = Database.connect(**conn_params)\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/postgresql/base.py:178: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | dsn = 'user=test password=test host=localhost port=5432 dbname=test'\n[Test and build Python package/test]   | connection_factory = None, cursor_factory = None\n[Test and build Python package/test]   | kwargs = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | kwasync = {}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         Create a new database connection.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         The connection parameters can be specified as a string:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         or using a set of keyword arguments:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Or as a mix of both. The basic connection parameters are:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         - *dbname*: the database name\n[Test and build Python package/test]   |         - *database*: the database name (only as keyword argument)\n[Test and build Python package/test]   |         - *user*: user name used to authenticate\n[Test and build Python package/test]   |         - *password*: password used to authenticate\n[Test and build Python package/test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Test and build Python package/test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *connection_factory* parameter a different class or connections\n[Test and build Python package/test]   |         factory can be specified. It should be a callable object taking a dsn\n[Test and build Python package/test]   |         argument.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Test and build Python package/test]   |         used by cursor().\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Test and build Python package/test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Any other keyword parameter will be passed to the underlying client\n[Test and build Python package/test]   |         library: the list of supported parameters depends on the library version.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         kwasync = {}\n[Test and build Python package/test]   |         if 'async' in kwargs:\n[Test and build Python package/test]   |             kwasync['async'] = kwargs.pop('async')\n[Test and build Python package/test]   |         if 'async_' in kwargs:\n[Test and build Python package/test]   |             kwasync['async_'] = kwargs.pop('async_')\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Test and build Python package/test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Test and build Python package/test]   | E       psycopg2.OperationalError: could not connect to server: Connection refused\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (127.0.0.1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | E       could not connect to server: Cannot assign requested address\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (::1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/psycopg2/__init__.py:122: OperationalError\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | The above exception was the direct cause of the following exception:\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | request = <SubRequest '_django_db_marker' for <Function test_fix_bill_id>>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     @pytest.fixture(autouse=True)\n[Test and build Python package/test]   |     def _django_db_marker(request) -> None:\n[Test and build Python package/test]   |         \"\"\"Implement the django_db marker, internal to pytest-django.\"\"\"\n[Test and build Python package/test]   |         marker = request.node.get_closest_marker(\"django_db\")\n[Test and build Python package/test]   |         if marker:\n[Test and build Python package/test]   | >           request.getfixturevalue(\"_django_db_helper\")\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/pytest_django/plugin.py:465: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/pytest_django/fixtures.py:125: in django_db_setup\n[Test and build Python package/test]   |     **setup_databases_args\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/test/utils.py:174: in setup_databases\n[Test and build Python package/test]   |     serialize=connection.settings_dict.get('TEST', {}).get('SERIALIZE', True),\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/creation.py:58: in create_test_db\n[Test and build Python package/test]   |     self._create_test_db(verbosity, autoclobber, keepdb)\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/creation.py:168: in _create_test_db\n[Test and build Python package/test]   |     with self._nodb_connection.cursor() as cursor:\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:256: in cursor\n[Test and build Python package/test]   |     return self._cursor()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:233: in _cursor\n[Test and build Python package/test]   |     self.ensure_connection()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: in ensure_connection\n[Test and build Python package/test]   |     self.connect()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/utils.py:89: in __exit__\n[Test and build Python package/test]   |     raise dj_exc_value.with_traceback(traceback) from exc_value\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: in ensure_connection\n[Test and build Python package/test]   |     self.connect()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:195: in connect\n[Test and build Python package/test]   |     self.connection = self.get_new_connection(conn_params)\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/postgresql/base.py:178: in get_new_connection\n[Test and build Python package/test]   |     connection = Database.connect(**conn_params)\n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | dsn = 'user=test password=test host=localhost port=5432 dbname=test'\n[Test and build Python package/test]   | connection_factory = None, cursor_factory = None\n[Test and build Python package/test]   | kwargs = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | kwasync = {}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         Create a new database connection.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         The connection parameters can be specified as a string:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         or using a set of keyword arguments:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Or as a mix of both. The basic connection parameters are:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         - *dbname*: the database name\n[Test and build Python package/test]   |         - *database*: the database name (only as keyword argument)\n[Test and build Python package/test]   |         - *user*: user name used to authenticate\n[Test and build Python package/test]   |         - *password*: password used to authenticate\n[Test and build Python package/test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Test and build Python package/test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *connection_factory* parameter a different class or connections\n[Test and build Python package/test]   |         factory can be specified. It should be a callable object taking a dsn\n[Test and build Python package/test]   |         argument.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Test and build Python package/test]   |         used by cursor().\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Test and build Python package/test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Any other keyword parameter will be passed to the underlying client\n[Test and build Python package/test]   |         library: the list of supported parameters depends on the library version.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         kwasync = {}\n[Test and build Python package/test]   |         if 'async' in kwargs:\n[Test and build Python package/test]   |             kwasync['async'] = kwargs.pop('async')\n[Test and build Python package/test]   |         if 'async_' in kwargs:\n[Test and build Python package/test]   |             kwasync['async_'] = kwargs.pop('async_')\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Test and build Python package/test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Test and build Python package/test]   | E       django.db.utils.OperationalError: could not connect to server: Connection refused\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (127.0.0.1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | E       could not connect to server: Cannot assign requested address\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (::1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/psycopg2/__init__.py:122: OperationalError\n[Test and build Python package/test]   | _________________ ERROR at setup of test_related_people_event __________________\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def ensure_connection(self):\n[Test and build Python package/test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[Test and build Python package/test]   |         if self.connection is None:\n[Test and build Python package/test]   |             with self.wrap_database_errors:\n[Test and build Python package/test]   | >               self.connect()\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(self):\n[Test and build Python package/test]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[Test and build Python package/test]   |         # Check for invalid configurations.\n[Test and build Python package/test]   |         self.check_settings()\n[Test and build Python package/test]   |         # In case the previous connection was closed while in an atomic block\n[Test and build Python package/test]   |         self.in_atomic_block = False\n[Test and build Python package/test]   |         self.savepoint_ids = []\n[Test and build Python package/test]   |         self.needs_rollback = False\n[Test and build Python package/test]   |         # Reset parameters defining when to close the connection\n[Test and build Python package/test]   |         max_age = self.settings_dict['CONN_MAX_AGE']\n[Test and build Python package/test]   |         self.close_at = None if max_age is None else time.time() + max_age\n[Test and build Python package/test]   |         self.closed_in_transaction = False\n[Test and build Python package/test]   |         self.errors_occurred = False\n[Test and build Python package/test]   |         # Establish the connection\n[Test and build Python package/test]   |         conn_params = self.get_connection_params()\n[Test and build Python package/test]   | >       self.connection = self.get_new_connection(conn_params)\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:195: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | conn_params = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def get_new_connection(self, conn_params):\n[Test and build Python package/test]   | >       connection = Database.connect(**conn_params)\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/postgresql/base.py:178: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | dsn = 'user=test password=test host=localhost port=5432 dbname=test'\n[Test and build Python package/test]   | connection_factory = None, cursor_factory = None\n[Test and build Python package/test]   | kwargs = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | kwasync = {}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         Create a new database connection.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         The connection parameters can be specified as a string:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         or using a set of keyword arguments:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Or as a mix of both. The basic connection parameters are:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         - *dbname*: the database name\n[Test and build Python package/test]   |         - *database*: the database name (only as keyword argument)\n[Test and build Python package/test]   |         - *user*: user name used to authenticate\n[Test and build Python package/test]   |         - *password*: password used to authenticate\n[Test and build Python package/test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Test and build Python package/test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *connection_factory* parameter a different class or connections\n[Test and build Python package/test]   |         factory can be specified. It should be a callable object taking a dsn\n[Test and build Python package/test]   |         argument.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Test and build Python package/test]   |         used by cursor().\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Test and build Python package/test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Any other keyword parameter will be passed to the underlying client\n[Test and build Python package/test]   |         library: the list of supported parameters depends on the library version.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         kwasync = {}\n[Test and build Python package/test]   |         if 'async' in kwargs:\n[Test and build Python package/test]   |             kwasync['async'] = kwargs.pop('async')\n[Test and build Python package/test]   |         if 'async_' in kwargs:\n[Test and build Python package/test]   |             kwasync['async_'] = kwargs.pop('async_')\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Test and build Python package/test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Test and build Python package/test]   | E       psycopg2.OperationalError: could not connect to server: Connection refused\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (127.0.0.1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | E       could not connect to server: Cannot assign requested address\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (::1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/psycopg2/__init__.py:122: OperationalError\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | The above exception was the direct cause of the following exception:\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | request = <SubRequest '_django_db_marker' for <Function test_related_people_event>>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     @pytest.fixture(autouse=True)\n[Test and build Python package/test]   |     def _django_db_marker(request) -> None:\n[Test and build Python package/test]   |         \"\"\"Implement the django_db marker, internal to pytest-django.\"\"\"\n[Test and build Python package/test]   |         marker = request.node.get_closest_marker(\"django_db\")\n[Test and build Python package/test]   |         if marker:\n[Test and build Python package/test]   | >           request.getfixturevalue(\"_django_db_helper\")\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/pytest_django/plugin.py:465: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/pytest_django/fixtures.py:125: in django_db_setup\n[Test and build Python package/test]   |     **setup_databases_args\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/test/utils.py:174: in setup_databases\n[Test and build Python package/test]   |     serialize=connection.settings_dict.get('TEST', {}).get('SERIALIZE', True),\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/creation.py:58: in create_test_db\n[Test and build Python package/test]   |     self._create_test_db(verbosity, autoclobber, keepdb)\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/creation.py:168: in _create_test_db\n[Test and build Python package/test]   |     with self._nodb_connection.cursor() as cursor:\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:256: in cursor\n[Test and build Python package/test]   |     return self._cursor()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:233: in _cursor\n[Test and build Python package/test]   |     self.ensure_connection()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: in ensure_connection\n[Test and build Python package/test]   |     self.connect()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/utils.py:89: in __exit__\n[Test and build Python package/test]   |     raise dj_exc_value.with_traceback(traceback) from exc_value\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: in ensure_connection\n[Test and build Python package/test]   |     self.connect()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:195: in connect\n[Test and build Python package/test]   |     self.connection = self.get_new_connection(conn_params)\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/postgresql/base.py:178: in get_new_connection\n[Test and build Python package/test]   |     connection = Database.connect(**conn_params)\n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | dsn = 'user=test password=test host=localhost port=5432 dbname=test'\n[Test and build Python package/test]   | connection_factory = None, cursor_factory = None\n[Test and build Python package/test]   | kwargs = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | kwasync = {}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         Create a new database connection.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         The connection parameters can be specified as a string:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         or using a set of keyword arguments:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Or as a mix of both. The basic connection parameters are:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         - *dbname*: the database name\n[Test and build Python package/test]   |         - *database*: the database name (only as keyword argument)\n[Test and build Python package/test]   |         - *user*: user name used to authenticate\n[Test and build Python package/test]   |         - *password*: password used to authenticate\n[Test and build Python package/test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Test and build Python package/test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *connection_factory* parameter a different class or connections\n[Test and build Python package/test]   |         factory can be specified. It should be a callable object taking a dsn\n[Test and build Python package/test]   |         argument.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Test and build Python package/test]   |         used by cursor().\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Test and build Python package/test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Any other keyword parameter will be passed to the underlying client\n[Test and build Python package/test]   |         library: the list of supported parameters depends on the library version.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         kwasync = {}\n[Test and build Python package/test]   |         if 'async' in kwargs:\n[Test and build Python package/test]   |             kwasync['async'] = kwargs.pop('async')\n[Test and build Python package/test]   |         if 'async_' in kwargs:\n[Test and build Python package/test]   |             kwasync['async_'] = kwargs.pop('async_')\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Test and build Python package/test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Test and build Python package/test]   | E       django.db.utils.OperationalError: could not connect to server: Connection refused\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (127.0.0.1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | E       could not connect to server: Cannot assign requested address\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (::1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/psycopg2/__init__.py:122: OperationalError\n[Test and build Python package/test]   | __________________ ERROR at setup of test_related_vote_event ___________________\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def ensure_connection(self):\n[Test and build Python package/test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[Test and build Python package/test]   |         if self.connection is None:\n[Test and build Python package/test]   |             with self.wrap_database_errors:\n[Test and build Python package/test]   | >               self.connect()\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(self):\n[Test and build Python package/test]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[Test and build Python package/test]   |         # Check for invalid configurations.\n[Test and build Python package/test]   |         self.check_settings()\n[Test and build Python package/test]   |         # In case the previous connection was closed while in an atomic block\n[Test and build Python package/test]   |         self.in_atomic_block = False\n[Test and build Python package/test]   |         self.savepoint_ids = []\n[Test and build Python package/test]   |         self.needs_rollback = False\n[Test and build Python package/test]   |         # Reset parameters defining when to close the connection\n[Test and build Python package/test]   |         max_age = self.settings_dict['CONN_MAX_AGE']\n[Test and build Python package/test]   |         self.close_at = None if max_age is None else time.time() + max_age\n[Test and build Python package/test]   |         self.closed_in_transaction = False\n[Test and build Python package/test]   |         self.errors_occurred = False\n[Test and build Python package/test]   |         # Establish the connection\n[Test and build Python package/test]   |         conn_params = self.get_connection_params()\n[Test and build Python package/test]   | >       self.connection = self.get_new_connection(conn_params)\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:195: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | conn_params = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def get_new_connection(self, conn_params):\n[Test and build Python package/test]   | >       connection = Database.connect(**conn_params)\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/postgresql/base.py:178: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | dsn = 'user=test password=test host=localhost port=5432 dbname=test'\n[Test and build Python package/test]   | connection_factory = None, cursor_factory = None\n[Test and build Python package/test]   | kwargs = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | kwasync = {}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         Create a new database connection.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         The connection parameters can be specified as a string:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         or using a set of keyword arguments:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Or as a mix of both. The basic connection parameters are:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         - *dbname*: the database name\n[Test and build Python package/test]   |         - *database*: the database name (only as keyword argument)\n[Test and build Python package/test]   |         - *user*: user name used to authenticate\n[Test and build Python package/test]   |         - *password*: password used to authenticate\n[Test and build Python package/test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Test and build Python package/test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *connection_factory* parameter a different class or connections\n[Test and build Python package/test]   |         factory can be specified. It should be a callable object taking a dsn\n[Test and build Python package/test]   |         argument.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Test and build Python package/test]   |         used by cursor().\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Test and build Python package/test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Any other keyword parameter will be passed to the underlying client\n[Test and build Python package/test]   |         library: the list of supported parameters depends on the library version.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         kwasync = {}\n[Test and build Python package/test]   |         if 'async' in kwargs:\n[Test and build Python package/test]   |             kwasync['async'] = kwargs.pop('async')\n[Test and build Python package/test]   |         if 'async_' in kwargs:\n[Test and build Python package/test]   |             kwasync['async_'] = kwargs.pop('async_')\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Test and build Python package/test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Test and build Python package/test]   | E       psycopg2.OperationalError: could not connect to server: Connection refused\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (127.0.0.1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | E       could not connect to server: Cannot assign requested address\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (::1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/psycopg2/__init__.py:122: OperationalError\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | The above exception was the direct cause of the following exception:\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | request = <SubRequest '_django_db_marker' for <Function test_related_vote_event>>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     @pytest.fixture(autouse=True)\n[Test and build Python package/test]   |     def _django_db_marker(request) -> None:\n[Test and build Python package/test]   |         \"\"\"Implement the django_db marker, internal to pytest-django.\"\"\"\n[Test and build Python package/test]   |         marker = request.node.get_closest_marker(\"django_db\")\n[Test and build Python package/test]   |         if marker:\n[Test and build Python package/test]   | >           request.getfixturevalue(\"_django_db_helper\")\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/pytest_django/plugin.py:465: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/pytest_django/fixtures.py:125: in django_db_setup\n[Test and build Python package/test]   |     **setup_databases_args\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/test/utils.py:174: in setup_databases\n[Test and build Python package/test]   |     serialize=connection.settings_dict.get('TEST', {}).get('SERIALIZE', True),\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/creation.py:58: in create_test_db\n[Test and build Python package/test]   |     self._create_test_db(verbosity, autoclobber, keepdb)\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/creation.py:168: in _create_test_db\n[Test and build Python package/test]   |     with self._nodb_connection.cursor() as cursor:\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:256: in cursor\n[Test and build Python package/test]   |     return self._cursor()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:233: in _cursor\n[Test and build Python package/test]   |     self.ensure_connection()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: in ensure_connection\n[Test and build Python package/test]   |     self.connect()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/utils.py:89: in __exit__\n[Test and build Python package/test]   |     raise dj_exc_value.with_traceback(traceback) from exc_value\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: in ensure_connection\n[Test and build Python package/test]   |     self.connect()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:195: in connect\n[Test and build Python package/test]   |     self.connection = self.get_new_connection(conn_params)\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/postgresql/base.py:178: in get_new_connection\n[Test and build Python package/test]   |     connection = Database.connect(**conn_params)\n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | dsn = 'user=test password=test host=localhost port=5432 dbname=test'\n[Test and build Python package/test]   | connection_factory = None, cursor_factory = None\n[Test and build Python package/test]   | kwargs = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | kwasync = {}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         Create a new database connection.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         The connection parameters can be specified as a string:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         or using a set of keyword arguments:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Or as a mix of both. The basic connection parameters are:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         - *dbname*: the database name\n[Test and build Python package/test]   |         - *database*: the database name (only as keyword argument)\n[Test and build Python package/test]   |         - *user*: user name used to authenticate\n[Test and build Python package/test]   |         - *password*: password used to authenticate\n[Test and build Python package/test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Test and build Python package/test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *connection_factory* parameter a different class or connections\n[Test and build Python package/test]   |         factory can be specified. It should be a callable object taking a dsn\n[Test and build Python package/test]   |         argument.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Test and build Python package/test]   |         used by cursor().\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Test and build Python package/test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Any other keyword parameter will be passed to the underlying client\n[Test and build Python package/test]   |         library: the list of supported parameters depends on the library version.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         kwasync = {}\n[Test and build Python package/test]   |         if 'async' in kwargs:\n[Test and build Python package/test]   |             kwasync['async'] = kwargs.pop('async')\n[Test and build Python package/test]   |         if 'async_' in kwargs:\n[Test and build Python package/test]   |             kwasync['async_'] = kwargs.pop('async_')\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Test and build Python package/test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Test and build Python package/test]   | E       django.db.utils.OperationalError: could not connect to server: Connection refused\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (127.0.0.1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | E       could not connect to server: Cannot assign requested address\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (::1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/psycopg2/__init__.py:122: OperationalError\n[Test and build Python package/test]   | __________________ ERROR at setup of test_related_bill_event ___________________\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def ensure_connection(self):\n[Test and build Python package/test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[Test and build Python package/test]   |         if self.connection is None:\n[Test and build Python package/test]   |             with self.wrap_database_errors:\n[Test and build Python package/test]   | >               self.connect()\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(self):\n[Test and build Python package/test]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[Test and build Python package/test]   |         # Check for invalid configurations.\n[Test and build Python package/test]   |         self.check_settings()\n[Test and build Python package/test]   |         # In case the previous connection was closed while in an atomic block\n[Test and build Python package/test]   |         self.in_atomic_block = False\n[Test and build Python package/test]   |         self.savepoint_ids = []\n[Test and build Python package/test]   |         self.needs_rollback = False\n[Test and build Python package/test]   |         # Reset parameters defining when to close the connection\n[Test and build Python package/test]   |         max_age = self.settings_dict['CONN_MAX_AGE']\n[Test and build Python package/test]   |         self.close_at = None if max_age is None else time.time() + max_age\n[Test and build Python package/test]   |         self.closed_in_transaction = False\n[Test and build Python package/test]   |         self.errors_occurred = False\n[Test and build Python package/test]   |         # Establish the connection\n[Test and build Python package/test]   |         conn_params = self.get_connection_params()\n[Test and build Python package/test]   | >       self.connection = self.get_new_connection(conn_params)\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:195: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | conn_params = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def get_new_connection(self, conn_params):\n[Test and build Python package/test]   | >       connection = Database.connect(**conn_params)\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/postgresql/base.py:178: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | dsn = 'user=test password=test host=localhost port=5432 dbname=test'\n[Test and build Python package/test]   | connection_factory = None, cursor_factory = None\n[Test and build Python package/test]   | kwargs = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | kwasync = {}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         Create a new database connection.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         The connection parameters can be specified as a string:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         or using a set of keyword arguments:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Or as a mix of both. The basic connection parameters are:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         - *dbname*: the database name\n[Test and build Python package/test]   |         - *database*: the database name (only as keyword argument)\n[Test and build Python package/test]   |         - *user*: user name used to authenticate\n[Test and build Python package/test]   |         - *password*: password used to authenticate\n[Test and build Python package/test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Test and build Python package/test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *connection_factory* parameter a different class or connections\n[Test and build Python package/test]   |         factory can be specified. It should be a callable object taking a dsn\n[Test and build Python package/test]   |         argument.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Test and build Python package/test]   |         used by cursor().\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Test and build Python package/test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Any other keyword parameter will be passed to the underlying client\n[Test and build Python package/test]   |         library: the list of supported parameters depends on the library version.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         kwasync = {}\n[Test and build Python package/test]   |         if 'async' in kwargs:\n[Test and build Python package/test]   |             kwasync['async'] = kwargs.pop('async')\n[Test and build Python package/test]   |         if 'async_' in kwargs:\n[Test and build Python package/test]   |             kwasync['async_'] = kwargs.pop('async_')\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Test and build Python package/test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Test and build Python package/test]   | E       psycopg2.OperationalError: could not connect to server: Connection refused\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (127.0.0.1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | E       could not connect to server: Cannot assign requested address\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (::1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/psycopg2/__init__.py:122: OperationalError\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | The above exception was the direct cause of the following exception:\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | request = <SubRequest '_django_db_marker' for <Function test_related_bill_event>>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     @pytest.fixture(autouse=True)\n[Test and build Python package/test]   |     def _django_db_marker(request) -> None:\n[Test and build Python package/test]   |         \"\"\"Implement the django_db marker, internal to pytest-django.\"\"\"\n[Test and build Python package/test]   |         marker = request.node.get_closest_marker(\"django_db\")\n[Test and build Python package/test]   |         if marker:\n[Test and build Python package/test]   | >           request.getfixturevalue(\"_django_db_helper\")\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/pytest_django/plugin.py:465: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/pytest_django/fixtures.py:125: in django_db_setup\n[Test and build Python package/test]   |     **setup_databases_args\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/test/utils.py:174: in setup_databases\n[Test and build Python package/test]   |     serialize=connection.settings_dict.get('TEST', {}).get('SERIALIZE', True),\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/creation.py:58: in create_test_db\n[Test and build Python package/test]   |     self._create_test_db(verbosity, autoclobber, keepdb)\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/creation.py:168: in _create_test_db\n[Test and build Python package/test]   |     with self._nodb_connection.cursor() as cursor:\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:256: in cursor\n[Test and build Python package/test]   |     return self._cursor()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:233: in _cursor\n[Test and build Python package/test]   |     self.ensure_connection()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: in ensure_connection\n[Test and build Python package/test]   |     self.connect()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/utils.py:89: in __exit__\n[Test and build Python package/test]   |     raise dj_exc_value.with_traceback(traceback) from exc_value\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: in ensure_connection\n[Test and build Python package/test]   |     self.connect()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:195: in connect\n[Test and build Python package/test]   |     self.connection = self.get_new_connection(conn_params)\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/postgresql/base.py:178: in get_new_connection\n[Test and build Python package/test]   |     connection = Database.connect(**conn_params)\n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | dsn = 'user=test password=test host=localhost port=5432 dbname=test'\n[Test and build Python package/test]   | connection_factory = None, cursor_factory = None\n[Test and build Python package/test]   | kwargs = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | kwasync = {}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         Create a new database connection.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         The connection parameters can be specified as a string:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         or using a set of keyword arguments:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Or as a mix of both. The basic connection parameters are:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         - *dbname*: the database name\n[Test and build Python package/test]   |         - *database*: the database name (only as keyword argument)\n[Test and build Python package/test]   |         - *user*: user name used to authenticate\n[Test and build Python package/test]   |         - *password*: password used to authenticate\n[Test and build Python package/test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Test and build Python package/test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *connection_factory* parameter a different class or connections\n[Test and build Python package/test]   |         factory can be specified. It should be a callable object taking a dsn\n[Test and build Python package/test]   |         argument.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Test and build Python package/test]   |         used by cursor().\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Test and build Python package/test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Any other keyword parameter will be passed to the underlying client\n[Test and build Python package/test]   |         library: the list of supported parameters depends on the library version.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         kwasync = {}\n[Test and build Python package/test]   |         if 'async' in kwargs:\n[Test and build Python package/test]   |             kwasync['async'] = kwargs.pop('async')\n[Test and build Python package/test]   |         if 'async_' in kwargs:\n[Test and build Python package/test]   |             kwasync['async_'] = kwargs.pop('async_')\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Test and build Python package/test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Test and build Python package/test]   | E       django.db.utils.OperationalError: could not connect to server: Connection refused\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (127.0.0.1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | E       could not connect to server: Cannot assign requested address\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (::1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/psycopg2/__init__.py:122: OperationalError\n[Test and build Python package/test]   | ________________ ERROR at setup of test_related_committee_event ________________\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def ensure_connection(self):\n[Test and build Python package/test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[Test and build Python package/test]   |         if self.connection is None:\n[Test and build Python package/test]   |             with self.wrap_database_errors:\n[Test and build Python package/test]   | >               self.connect()\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(self):\n[Test and build Python package/test]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[Test and build Python package/test]   |         # Check for invalid configurations.\n[Test and build Python package/test]   |         self.check_settings()\n[Test and build Python package/test]   |         # In case the previous connection was closed while in an atomic block\n[Test and build Python package/test]   |         self.in_atomic_block = False\n[Test and build Python package/test]   |         self.savepoint_ids = []\n[Test and build Python package/test]   |         self.needs_rollback = False\n[Test and build Python package/test]   |         # Reset parameters defining when to close the connection\n[Test and build Python package/test]   |         max_age = self.settings_dict['CONN_MAX_AGE']\n[Test and build Python package/test]   |         self.close_at = None if max_age is None else time.time() + max_age\n[Test and build Python package/test]   |         self.closed_in_transaction = False\n[Test and build Python package/test]   |         self.errors_occurred = False\n[Test and build Python package/test]   |         # Establish the connection\n[Test and build Python package/test]   |         conn_params = self.get_connection_params()\n[Test and build Python package/test]   | >       self.connection = self.get_new_connection(conn_params)\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:195: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | conn_params = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def get_new_connection(self, conn_params):\n[Test and build Python package/test]   | >       connection = Database.connect(**conn_params)\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/postgresql/base.py:178: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | dsn = 'user=test password=test host=localhost port=5432 dbname=test'\n[Test and build Python package/test]   | connection_factory = None, cursor_factory = None\n[Test and build Python package/test]   | kwargs = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | kwasync = {}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         Create a new database connection.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         The connection parameters can be specified as a string:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         or using a set of keyword arguments:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Or as a mix of both. The basic connection parameters are:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         - *dbname*: the database name\n[Test and build Python package/test]   |         - *database*: the database name (only as keyword argument)\n[Test and build Python package/test]   |         - *user*: user name used to authenticate\n[Test and build Python package/test]   |         - *password*: password used to authenticate\n[Test and build Python package/test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Test and build Python package/test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *connection_factory* parameter a different class or connections\n[Test and build Python package/test]   |         factory can be specified. It should be a callable object taking a dsn\n[Test and build Python package/test]   |         argument.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Test and build Python package/test]   |         used by cursor().\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Test and build Python package/test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Any other keyword parameter will be passed to the underlying client\n[Test and build Python package/test]   |         library: the list of supported parameters depends on the library version.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         kwasync = {}\n[Test and build Python package/test]   |         if 'async' in kwargs:\n[Test and build Python package/test]   |             kwasync['async'] = kwargs.pop('async')\n[Test and build Python package/test]   |         if 'async_' in kwargs:\n[Test and build Python package/test]   |             kwasync['async_'] = kwargs.pop('async_')\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Test and build Python package/test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Test and build Python package/test]   | E       psycopg2.OperationalError: could not connect to server: Connection refused\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (127.0.0.1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | E       could not connect to server: Cannot assign requested address\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (::1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/psycopg2/__init__.py:122: OperationalError\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | The above exception was the direct cause of the following exception:\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | request = <SubRequest '_django_db_marker' for <Function test_related_committee_event>>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     @pytest.fixture(autouse=True)\n[Test and build Python package/test]   |     def _django_db_marker(request) -> None:\n[Test and build Python package/test]   |         \"\"\"Implement the django_db marker, internal to pytest-django.\"\"\"\n[Test and build Python package/test]   |         marker = request.node.get_closest_marker(\"django_db\")\n[Test and build Python package/test]   |         if marker:\n[Test and build Python package/test]   | >           request.getfixturevalue(\"_django_db_helper\")\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/pytest_django/plugin.py:465: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/pytest_django/fixtures.py:125: in django_db_setup\n[Test and build Python package/test]   |     **setup_databases_args\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/test/utils.py:174: in setup_databases\n[Test and build Python package/test]   |     serialize=connection.settings_dict.get('TEST', {}).get('SERIALIZE', True),\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/creation.py:58: in create_test_db\n[Test and build Python package/test]   |     self._create_test_db(verbosity, autoclobber, keepdb)\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/creation.py:168: in _create_test_db\n[Test and build Python package/test]   |     with self._nodb_connection.cursor() as cursor:\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:256: in cursor\n[Test and build Python package/test]   |     return self._cursor()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:233: in _cursor\n[Test and build Python package/test]   |     self.ensure_connection()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: in ensure_connection\n[Test and build Python package/test]   |     self.connect()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/utils.py:89: in __exit__\n[Test and build Python package/test]   |     raise dj_exc_value.with_traceback(traceback) from exc_value\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: in ensure_connection\n[Test and build Python package/test]   |     self.connect()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:195: in connect\n[Test and build Python package/test]   |     self.connection = self.get_new_connection(conn_params)\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/postgresql/base.py:178: in get_new_connection\n[Test and build Python package/test]   |     connection = Database.connect(**conn_params)\n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | dsn = 'user=test password=test host=localhost port=5432 dbname=test'\n[Test and build Python package/test]   | connection_factory = None, cursor_factory = None\n[Test and build Python package/test]   | kwargs = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | kwasync = {}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         Create a new database connection.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         The connection parameters can be specified as a string:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         or using a set of keyword arguments:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Or as a mix of both. The basic connection parameters are:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         - *dbname*: the database name\n[Test and build Python package/test]   |         - *database*: the database name (only as keyword argument)\n[Test and build Python package/test]   |         - *user*: user name used to authenticate\n[Test and build Python package/test]   |         - *password*: password used to authenticate\n[Test and build Python package/test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Test and build Python package/test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *connection_factory* parameter a different class or connections\n[Test and build Python package/test]   |         factory can be specified. It should be a callable object taking a dsn\n[Test and build Python package/test]   |         argument.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Test and build Python package/test]   |         used by cursor().\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Test and build Python package/test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Any other keyword parameter will be passed to the underlying client\n[Test and build Python package/test]   |         library: the list of supported parameters depends on the library version.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         kwasync = {}\n[Test and build Python package/test]   |         if 'async' in kwargs:\n[Test and build Python package/test]   |             kwasync['async'] = kwargs.pop('async')\n[Test and build Python package/test]   |         if 'async_' in kwargs:\n[Test and build Python package/test]   |             kwasync['async_'] = kwargs.pop('async_')\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Test and build Python package/test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Test and build Python package/test]   | E       django.db.utils.OperationalError: could not connect to server: Connection refused\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (127.0.0.1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | E       could not connect to server: Cannot assign requested address\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (::1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/psycopg2/__init__.py:122: OperationalError\n[Test and build Python package/test]   | ______________________ ERROR at setup of test_media_event ______________________\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def ensure_connection(self):\n[Test and build Python package/test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[Test and build Python package/test]   |         if self.connection is None:\n[Test and build Python package/test]   |             with self.wrap_database_errors:\n[Test and build Python package/test]   | >               self.connect()\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(self):\n[Test and build Python package/test]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[Test and build Python package/test]   |         # Check for invalid configurations.\n[Test and build Python package/test]   |         self.check_settings()\n[Test and build Python package/test]   |         # In case the previous connection was closed while in an atomic block\n[Test and build Python package/test]   |         self.in_atomic_block = False\n[Test and build Python package/test]   |         self.savepoint_ids = []\n[Test and build Python package/test]   |         self.needs_rollback = False\n[Test and build Python package/test]   |         # Reset parameters defining when to close the connection\n[Test and build Python package/test]   |         max_age = self.settings_dict['CONN_MAX_AGE']\n[Test and build Python package/test]   |         self.close_at = None if max_age is None else time.time() + max_age\n[Test and build Python package/test]   |         self.closed_in_transaction = False\n[Test and build Python package/test]   |         self.errors_occurred = False\n[Test and build Python package/test]   |         # Establish the connection\n[Test and build Python package/test]   |         conn_params = self.get_connection_params()\n[Test and build Python package/test]   | >       self.connection = self.get_new_connection(conn_params)\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:195: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | conn_params = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def get_new_connection(self, conn_params):\n[Test and build Python package/test]   | >       connection = Database.connect(**conn_params)\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/postgresql/base.py:178: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | dsn = 'user=test password=test host=localhost port=5432 dbname=test'\n[Test and build Python package/test]   | connection_factory = None, cursor_factory = None\n[Test and build Python package/test]   | kwargs = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | kwasync = {}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         Create a new database connection.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         The connection parameters can be specified as a string:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         or using a set of keyword arguments:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Or as a mix of both. The basic connection parameters are:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         - *dbname*: the database name\n[Test and build Python package/test]   |         - *database*: the database name (only as keyword argument)\n[Test and build Python package/test]   |         - *user*: user name used to authenticate\n[Test and build Python package/test]   |         - *password*: password used to authenticate\n[Test and build Python package/test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Test and build Python package/test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *connection_factory* parameter a different class or connections\n[Test and build Python package/test]   |         factory can be specified. It should be a callable object taking a dsn\n[Test and build Python package/test]   |         argument.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Test and build Python package/test]   |         used by cursor().\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Test and build Python package/test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Any other keyword parameter will be passed to the underlying client\n[Test and build Python package/test]   |         library: the list of supported parameters depends on the library version.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         kwasync = {}\n[Test and build Python package/test]   |         if 'async' in kwargs:\n[Test and build Python package/test]   |             kwasync['async'] = kwargs.pop('async')\n[Test and build Python package/test]   |         if 'async_' in kwargs:\n[Test and build Python package/test]   |             kwasync['async_'] = kwargs.pop('async_')\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Test and build Python package/test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Test and build Python package/test]   | E       psycopg2.OperationalError: could not connect to server: Connection refused\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (127.0.0.1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | E       could not connect to server: Cannot assign requested address\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (::1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/psycopg2/__init__.py:122: OperationalError\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | The above exception was the direct cause of the following exception:\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | request = <SubRequest '_django_db_marker' for <Function test_media_event>>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     @pytest.fixture(autouse=True)\n[Test and build Python package/test]   |     def _django_db_marker(request) -> None:\n[Test and build Python package/test]   |         \"\"\"Implement the django_db marker, internal to pytest-django.\"\"\"\n[Test and build Python package/test]   |         marker = request.node.get_closest_marker(\"django_db\")\n[Test and build Python package/test]   |         if marker:\n[Test and build Python package/test]   | >           request.getfixturevalue(\"_django_db_helper\")\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/pytest_django/plugin.py:465: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/pytest_django/fixtures.py:125: in django_db_setup\n[Test and build Python package/test]   |     **setup_databases_args\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/test/utils.py:174: in setup_databases\n[Test and build Python package/test]   |     serialize=connection.settings_dict.get('TEST', {}).get('SERIALIZE', True),\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/creation.py:58: in create_test_db\n[Test and build Python package/test]   |     self._create_test_db(verbosity, autoclobber, keepdb)\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/creation.py:168: in _create_test_db\n[Test and build Python package/test]   |     with self._nodb_connection.cursor() as cursor:\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:256: in cursor\n[Test and build Python package/test]   |     return self._cursor()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:233: in _cursor\n[Test and build Python package/test]   |     self.ensure_connection()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: in ensure_connection\n[Test and build Python package/test]   |     self.connect()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/utils.py:89: in __exit__\n[Test and build Python package/test]   |     raise dj_exc_value.with_traceback(traceback) from exc_value\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: in ensure_connection\n[Test and build Python package/test]   |     self.connect()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:195: in connect\n[Test and build Python package/test]   |     self.connection = self.get_new_connection(conn_params)\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/postgresql/base.py:178: in get_new_connection\n[Test and build Python package/test]   |     connection = Database.connect(**conn_params)\n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | dsn = 'user=test password=test host=localhost port=5432 dbname=test'\n[Test and build Python package/test]   | connection_factory = None, cursor_factory = None\n[Test and build Python package/test]   | kwargs = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | kwasync = {}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         Create a new database connection.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         The connection parameters can be specified as a string:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         or using a set of keyword arguments:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Or as a mix of both. The basic connection parameters are:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         - *dbname*: the database name\n[Test and build Python package/test]   |         - *database*: the database name (only as keyword argument)\n[Test and build Python package/test]   |         - *user*: user name used to authenticate\n[Test and build Python package/test]   |         - *password*: password used to authenticate\n[Test and build Python package/test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Test and build Python package/test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *connection_factory* parameter a different class or connections\n[Test and build Python package/test]   |         factory can be specified. It should be a callable object taking a dsn\n[Test and build Python package/test]   |         argument.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Test and build Python package/test]   |         used by cursor().\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Test and build Python package/test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Any other keyword parameter will be passed to the underlying client\n[Test and build Python package/test]   |         library: the list of supported parameters depends on the library version.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         kwasync = {}\n[Test and build Python package/test]   |         if 'async' in kwargs:\n[Test and build Python package/test]   |             kwasync['async'] = kwargs.pop('async')\n[Test and build Python package/test]   |         if 'async_' in kwargs:\n[Test and build Python package/test]   |             kwasync['async_'] = kwargs.pop('async_')\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Test and build Python package/test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Test and build Python package/test]   | E       django.db.utils.OperationalError: could not connect to server: Connection refused\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (127.0.0.1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | E       could not connect to server: Cannot assign requested address\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (::1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/psycopg2/__init__.py:122: OperationalError\n[Test and build Python package/test]   | ____________________ ERROR at setup of test_media_document _____________________\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def ensure_connection(self):\n[Test and build Python package/test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[Test and build Python package/test]   |         if self.connection is None:\n[Test and build Python package/test]   |             with self.wrap_database_errors:\n[Test and build Python package/test]   | >               self.connect()\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(self):\n[Test and build Python package/test]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[Test and build Python package/test]   |         # Check for invalid configurations.\n[Test and build Python package/test]   |         self.check_settings()\n[Test and build Python package/test]   |         # In case the previous connection was closed while in an atomic block\n[Test and build Python package/test]   |         self.in_atomic_block = False\n[Test and build Python package/test]   |         self.savepoint_ids = []\n[Test and build Python package/test]   |         self.needs_rollback = False\n[Test and build Python package/test]   |         # Reset parameters defining when to close the connection\n[Test and build Python package/test]   |         max_age = self.settings_dict['CONN_MAX_AGE']\n[Test and build Python package/test]   |         self.close_at = None if max_age is None else time.time() + max_age\n[Test and build Python package/test]   |         self.closed_in_transaction = False\n[Test and build Python package/test]   |         self.errors_occurred = False\n[Test and build Python package/test]   |         # Establish the connection\n[Test and build Python package/test]   |         conn_params = self.get_connection_params()\n[Test and build Python package/test]   | >       self.connection = self.get_new_connection(conn_params)\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:195: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | conn_params = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def get_new_connection(self, conn_params):\n[Test and build Python package/test]   | >       connection = Database.connect(**conn_params)\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/postgresql/base.py:178: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | dsn = 'user=test password=test host=localhost port=5432 dbname=test'\n[Test and build Python package/test]   | connection_factory = None, cursor_factory = None\n[Test and build Python package/test]   | kwargs = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | kwasync = {}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         Create a new database connection.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         The connection parameters can be specified as a string:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         or using a set of keyword arguments:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Or as a mix of both. The basic connection parameters are:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         - *dbname*: the database name\n[Test and build Python package/test]   |         - *database*: the database name (only as keyword argument)\n[Test and build Python package/test]   |         - *user*: user name used to authenticate\n[Test and build Python package/test]   |         - *password*: password used to authenticate\n[Test and build Python package/test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Test and build Python package/test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *connection_factory* parameter a different class or connections\n[Test and build Python package/test]   |         factory can be specified. It should be a callable object taking a dsn\n[Test and build Python package/test]   |         argument.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Test and build Python package/test]   |         used by cursor().\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Test and build Python package/test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Any other keyword parameter will be passed to the underlying client\n[Test and build Python package/test]   |         library: the list of supported parameters depends on the library version.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         kwasync = {}\n[Test and build Python package/test]   |         if 'async' in kwargs:\n[Test and build Python package/test]   |             kwasync['async'] = kwargs.pop('async')\n[Test and build Python package/test]   |         if 'async_' in kwargs:\n[Test and build Python package/test]   |             kwasync['async_'] = kwargs.pop('async_')\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Test and build Python package/test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Test and build Python package/test]   | E       psycopg2.OperationalError: could not connect to server: Connection refused\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (127.0.0.1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | E       could not connect to server: Cannot assign requested address\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (::1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/psycopg2/__init__.py:122: OperationalError\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | The above exception was the direct cause of the following exception:\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | request = <SubRequest '_django_db_marker' for <Function test_media_document>>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     @pytest.fixture(autouse=True)\n[Test and build Python package/test]   |     def _django_db_marker(request) -> None:\n[Test and build Python package/test]   |         \"\"\"Implement the django_db marker, internal to pytest-django.\"\"\"\n[Test and build Python package/test]   |         marker = request.node.get_closest_marker(\"django_db\")\n[Test and build Python package/test]   |         if marker:\n[Test and build Python package/test]   | >           request.getfixturevalue(\"_django_db_helper\")\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/pytest_django/plugin.py:465: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/pytest_django/fixtures.py:125: in django_db_setup\n[Test and build Python package/test]   |     **setup_databases_args\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/test/utils.py:174: in setup_databases\n[Test and build Python package/test]   |     serialize=connection.settings_dict.get('TEST', {}).get('SERIALIZE', True),\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/creation.py:58: in create_test_db\n[Test and build Python package/test]   |     self._create_test_db(verbosity, autoclobber, keepdb)\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/creation.py:168: in _create_test_db\n[Test and build Python package/test]   |     with self._nodb_connection.cursor() as cursor:\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:256: in cursor\n[Test and build Python package/test]   |     return self._cursor()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:233: in _cursor\n[Test and build Python package/test]   |     self.ensure_connection()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: in ensure_connection\n[Test and build Python package/test]   |     self.connect()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/utils.py:89: in __exit__\n[Test and build Python package/test]   |     raise dj_exc_value.with_traceback(traceback) from exc_value\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: in ensure_connection\n[Test and build Python package/test]   |     self.connect()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:195: in connect\n[Test and build Python package/test]   |     self.connection = self.get_new_connection(conn_params)\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/postgresql/base.py:178: in get_new_connection\n[Test and build Python package/test]   |     connection = Database.connect(**conn_params)\n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | dsn = 'user=test password=test host=localhost port=5432 dbname=test'\n[Test and build Python package/test]   | connection_factory = None, cursor_factory = None\n[Test and build Python package/test]   | kwargs = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | kwasync = {}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         Create a new database connection.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         The connection parameters can be specified as a string:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         or using a set of keyword arguments:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Or as a mix of both. The basic connection parameters are:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         - *dbname*: the database name\n[Test and build Python package/test]   |         - *database*: the database name (only as keyword argument)\n[Test and build Python package/test]   |         - *user*: user name used to authenticate\n[Test and build Python package/test]   |         - *password*: password used to authenticate\n[Test and build Python package/test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Test and build Python package/test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *connection_factory* parameter a different class or connections\n[Test and build Python package/test]   |         factory can be specified. It should be a callable object taking a dsn\n[Test and build Python package/test]   |         argument.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Test and build Python package/test]   |         used by cursor().\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Test and build Python package/test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Any other keyword parameter will be passed to the underlying client\n[Test and build Python package/test]   |         library: the list of supported parameters depends on the library version.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         kwasync = {}\n[Test and build Python package/test]   |         if 'async' in kwargs:\n[Test and build Python package/test]   |             kwasync['async'] = kwargs.pop('async')\n[Test and build Python package/test]   |         if 'async_' in kwargs:\n[Test and build Python package/test]   |             kwasync['async_'] = kwargs.pop('async_')\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Test and build Python package/test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Test and build Python package/test]   | E       django.db.utils.OperationalError: could not connect to server: Connection refused\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (127.0.0.1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | E       could not connect to server: Cannot assign requested address\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (::1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/psycopg2/__init__.py:122: OperationalError\n[Test and build Python package/test]   | ______________________ ERROR at setup of test_full_event _______________________\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def ensure_connection(self):\n[Test and build Python package/test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[Test and build Python package/test]   |         if self.connection is None:\n[Test and build Python package/test]   |             with self.wrap_database_errors:\n[Test and build Python package/test]   | >               self.connect()\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(self):\n[Test and build Python package/test]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[Test and build Python package/test]   |         # Check for invalid configurations.\n[Test and build Python package/test]   |         self.check_settings()\n[Test and build Python package/test]   |         # In case the previous connection was closed while in an atomic block\n[Test and build Python package/test]   |         self.in_atomic_block = False\n[Test and build Python package/test]   |         self.savepoint_ids = []\n[Test and build Python package/test]   |         self.needs_rollback = False\n[Test and build Python package/test]   |         # Reset parameters defining when to close the connection\n[Test and build Python package/test]   |         max_age = self.settings_dict['CONN_MAX_AGE']\n[Test and build Python package/test]   |         self.close_at = None if max_age is None else time.time() + max_age\n[Test and build Python package/test]   |         self.closed_in_transaction = False\n[Test and build Python package/test]   |         self.errors_occurred = False\n[Test and build Python package/test]   |         # Establish the connection\n[Test and build Python package/test]   |         conn_params = self.get_connection_params()\n[Test and build Python package/test]   | >       self.connection = self.get_new_connection(conn_params)\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:195: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | conn_params = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def get_new_connection(self, conn_params):\n[Test and build Python package/test]   | >       connection = Database.connect(**conn_params)\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/postgresql/base.py:178: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | dsn = 'user=test password=test host=localhost port=5432 dbname=test'\n[Test and build Python package/test]   | connection_factory = None, cursor_factory = None\n[Test and build Python package/test]   | kwargs = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | kwasync = {}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         Create a new database connection.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         The connection parameters can be specified as a string:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         or using a set of keyword arguments:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Or as a mix of both. The basic connection parameters are:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         - *dbname*: the database name\n[Test and build Python package/test]   |         - *database*: the database name (only as keyword argument)\n[Test and build Python package/test]   |         - *user*: user name used to authenticate\n[Test and build Python package/test]   |         - *password*: password used to authenticate\n[Test and build Python package/test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Test and build Python package/test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *connection_factory* parameter a different class or connections\n[Test and build Python package/test]   |         factory can be specified. It should be a callable object taking a dsn\n[Test and build Python package/test]   |         argument.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Test and build Python package/test]   |         used by cursor().\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Test and build Python package/test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Any other keyword parameter will be passed to the underlying client\n[Test and build Python package/test]   |         library: the list of supported parameters depends on the library version.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         kwasync = {}\n[Test and build Python package/test]   |         if 'async' in kwargs:\n[Test and build Python package/test]   |             kwasync['async'] = kwargs.pop('async')\n[Test and build Python package/test]   |         if 'async_' in kwargs:\n[Test and build Python package/test]   |             kwasync['async_'] = kwargs.pop('async_')\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Test and build Python package/test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Test and build Python package/test]   | E       psycopg2.OperationalError: could not connect to server: Connection refused\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (127.0.0.1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | E       could not connect to server: Cannot assign requested address\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (::1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/psycopg2/__init__.py:122: OperationalError\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | The above exception was the direct cause of the following exception:\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | request = <SubRequest '_django_db_marker' for <Function test_full_event>>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     @pytest.fixture(autouse=True)\n[Test and build Python package/test]   |     def _django_db_marker(request) -> None:\n[Test and build Python package/test]   |         \"\"\"Implement the django_db marker, internal to pytest-django.\"\"\"\n[Test and build Python package/test]   |         marker = request.node.get_closest_marker(\"django_db\")\n[Test and build Python package/test]   |         if marker:\n[Test and build Python package/test]   | >           request.getfixturevalue(\"_django_db_helper\")\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/pytest_django/plugin.py:465: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/pytest_django/fixtures.py:125: in django_db_setup\n[Test and build Python package/test]   |     **setup_databases_args\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/test/utils.py:174: in setup_databases\n[Test and build Python package/test]   |     serialize=connection.settings_dict.get('TEST', {}).get('SERIALIZE', True),\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/creation.py:58: in create_test_db\n[Test and build Python package/test]   |     self._create_test_db(verbosity, autoclobber, keepdb)\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/creation.py:168: in _create_test_db\n[Test and build Python package/test]   |     with self._nodb_connection.cursor() as cursor:\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:256: in cursor\n[Test and build Python package/test]   |     return self._cursor()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:233: in _cursor\n[Test and build Python package/test]   |     self.ensure_connection()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: in ensure_connection\n[Test and build Python package/test]   |     self.connect()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/utils.py:89: in __exit__\n[Test and build Python package/test]   |     raise dj_exc_value.with_traceback(traceback) from exc_value\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: in ensure_connection\n[Test and build Python package/test]   |     self.connect()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:195: in connect\n[Test and build Python package/test]   |     self.connection = self.get_new_connection(conn_params)\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/postgresql/base.py:178: in get_new_connection\n[Test and build Python package/test]   |     connection = Database.connect(**conn_params)\n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | dsn = 'user=test password=test host=localhost port=5432 dbname=test'\n[Test and build Python package/test]   | connection_factory = None, cursor_factory = None\n[Test and build Python package/test]   | kwargs = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | kwasync = {}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         Create a new database connection.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         The connection parameters can be specified as a string:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         or using a set of keyword arguments:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Or as a mix of both. The basic connection parameters are:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         - *dbname*: the database name\n[Test and build Python package/test]   |         - *database*: the database name (only as keyword argument)\n[Test and build Python package/test]   |         - *user*: user name used to authenticate\n[Test and build Python package/test]   |         - *password*: password used to authenticate\n[Test and build Python package/test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Test and build Python package/test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *connection_factory* parameter a different class or connections\n[Test and build Python package/test]   |         factory can be specified. It should be a callable object taking a dsn\n[Test and build Python package/test]   |         argument.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Test and build Python package/test]   |         used by cursor().\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Test and build Python package/test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Any other keyword parameter will be passed to the underlying client\n[Test and build Python package/test]   |         library: the list of supported parameters depends on the library version.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         kwasync = {}\n[Test and build Python package/test]   |         if 'async' in kwargs:\n[Test and build Python package/test]   |             kwasync['async'] = kwargs.pop('async')\n[Test and build Python package/test]   |         if 'async_' in kwargs:\n[Test and build Python package/test]   |             kwasync['async_'] = kwargs.pop('async_')\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Test and build Python package/test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Test and build Python package/test]   | E       django.db.utils.OperationalError: could not connect to server: Connection refused\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (127.0.0.1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | E       could not connect to server: Cannot assign requested address\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (::1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/psycopg2/__init__.py:122: OperationalError\n[Test and build Python package/test]   | _________________ ERROR at setup of test_pupa_identifier_event _________________\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def ensure_connection(self):\n[Test and build Python package/test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[Test and build Python package/test]   |         if self.connection is None:\n[Test and build Python package/test]   |             with self.wrap_database_errors:\n[Test and build Python package/test]   | >               self.connect()\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(self):\n[Test and build Python package/test]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[Test and build Python package/test]   |         # Check for invalid configurations.\n[Test and build Python package/test]   |         self.check_settings()\n[Test and build Python package/test]   |         # In case the previous connection was closed while in an atomic block\n[Test and build Python package/test]   |         self.in_atomic_block = False\n[Test and build Python package/test]   |         self.savepoint_ids = []\n[Test and build Python package/test]   |         self.needs_rollback = False\n[Test and build Python package/test]   |         # Reset parameters defining when to close the connection\n[Test and build Python package/test]   |         max_age = self.settings_dict['CONN_MAX_AGE']\n[Test and build Python package/test]   |         self.close_at = None if max_age is None else time.time() + max_age\n[Test and build Python package/test]   |         self.closed_in_transaction = False\n[Test and build Python package/test]   |         self.errors_occurred = False\n[Test and build Python package/test]   |         # Establish the connection\n[Test and build Python package/test]   |         conn_params = self.get_connection_params()\n[Test and build Python package/test]   | >       self.connection = self.get_new_connection(conn_params)\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:195: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | conn_params = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def get_new_connection(self, conn_params):\n[Test and build Python package/test]   | >       connection = Database.connect(**conn_params)\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/postgresql/base.py:178: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | dsn = 'user=test password=test host=localhost port=5432 dbname=test'\n[Test and build Python package/test]   | connection_factory = None, cursor_factory = None\n[Test and build Python package/test]   | kwargs = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | kwasync = {}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         Create a new database connection.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         The connection parameters can be specified as a string:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         or using a set of keyword arguments:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Or as a mix of both. The basic connection parameters are:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         - *dbname*: the database name\n[Test and build Python package/test]   |         - *database*: the database name (only as keyword argument)\n[Test and build Python package/test]   |         - *user*: user name used to authenticate\n[Test and build Python package/test]   |         - *password*: password used to authenticate\n[Test and build Python package/test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Test and build Python package/test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *connection_factory* parameter a different class or connections\n[Test and build Python package/test]   |         factory can be specified. It should be a callable object taking a dsn\n[Test and build Python package/test]   |         argument.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Test and build Python package/test]   |         used by cursor().\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Test and build Python package/test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Any other keyword parameter will be passed to the underlying client\n[Test and build Python package/test]   |         library: the list of supported parameters depends on the library version.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         kwasync = {}\n[Test and build Python package/test]   |         if 'async' in kwargs:\n[Test and build Python package/test]   |             kwasync['async'] = kwargs.pop('async')\n[Test and build Python package/test]   |         if 'async_' in kwargs:\n[Test and build Python package/test]   |             kwasync['async_'] = kwargs.pop('async_')\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Test and build Python package/test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Test and build Python package/test]   | E       psycopg2.OperationalError: could not connect to server: Connection refused\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (127.0.0.1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | E       could not connect to server: Cannot assign requested address\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (::1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/psycopg2/__init__.py:122: OperationalError\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | The above exception was the direct cause of the following exception:\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | request = <SubRequest '_django_db_marker' for <Function test_pupa_identifier_event>>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     @pytest.fixture(autouse=True)\n[Test and build Python package/test]   |     def _django_db_marker(request) -> None:\n[Test and build Python package/test]   |         \"\"\"Implement the django_db marker, internal to pytest-django.\"\"\"\n[Test and build Python package/test]   |         marker = request.node.get_closest_marker(\"django_db\")\n[Test and build Python package/test]   |         if marker:\n[Test and build Python package/test]   | >           request.getfixturevalue(\"_django_db_helper\")\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/pytest_django/plugin.py:465: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/pytest_django/fixtures.py:125: in django_db_setup\n[Test and build Python package/test]   |     **setup_databases_args\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/test/utils.py:174: in setup_databases\n[Test and build Python package/test]   |     serialize=connection.settings_dict.get('TEST', {}).get('SERIALIZE', True),\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/creation.py:58: in create_test_db\n[Test and build Python package/test]   |     self._create_test_db(verbosity, autoclobber, keepdb)\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/creation.py:168: in _create_test_db\n[Test and build Python package/test]   |     with self._nodb_connection.cursor() as cursor:\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:256: in cursor\n[Test and build Python package/test]   |     return self._cursor()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:233: in _cursor\n[Test and build Python package/test]   |     self.ensure_connection()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: in ensure_connection\n[Test and build Python package/test]   |     self.connect()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/utils.py:89: in __exit__\n[Test and build Python package/test]   |     raise dj_exc_value.with_traceback(traceback) from exc_value\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: in ensure_connection\n[Test and build Python package/test]   |     self.connect()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:195: in connect\n[Test and build Python package/test]   |     self.connection = self.get_new_connection(conn_params)\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/postgresql/base.py:178: in get_new_connection\n[Test and build Python package/test]   |     connection = Database.connect(**conn_params)\n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | dsn = 'user=test password=test host=localhost port=5432 dbname=test'\n[Test and build Python package/test]   | connection_factory = None, cursor_factory = None\n[Test and build Python package/test]   | kwargs = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | kwasync = {}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         Create a new database connection.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         The connection parameters can be specified as a string:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         or using a set of keyword arguments:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Or as a mix of both. The basic connection parameters are:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         - *dbname*: the database name\n[Test and build Python package/test]   |         - *database*: the database name (only as keyword argument)\n[Test and build Python package/test]   |         - *user*: user name used to authenticate\n[Test and build Python package/test]   |         - *password*: password used to authenticate\n[Test and build Python package/test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Test and build Python package/test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *connection_factory* parameter a different class or connections\n[Test and build Python package/test]   |         factory can be specified. It should be a callable object taking a dsn\n[Test and build Python package/test]   |         argument.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Test and build Python package/test]   |         used by cursor().\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Test and build Python package/test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Any other keyword parameter will be passed to the underlying client\n[Test and build Python package/test]   |         library: the list of supported parameters depends on the library version.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         kwasync = {}\n[Test and build Python package/test]   |         if 'async' in kwargs:\n[Test and build Python package/test]   |             kwasync['async'] = kwargs.pop('async')\n[Test and build Python package/test]   |         if 'async_' in kwargs:\n[Test and build Python package/test]   |             kwasync['async_'] = kwargs.pop('async_')\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Test and build Python package/test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Test and build Python package/test]   | E       django.db.utils.OperationalError: could not connect to server: Connection refused\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (127.0.0.1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | E       could not connect to server: Cannot assign requested address\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (::1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/psycopg2/__init__.py:122: OperationalError\n[Test and build Python package/test]   | _________________ ERROR at setup of test_top_level_media_event _________________\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def ensure_connection(self):\n[Test and build Python package/test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[Test and build Python package/test]   |         if self.connection is None:\n[Test and build Python package/test]   |             with self.wrap_database_errors:\n[Test and build Python package/test]   | >               self.connect()\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(self):\n[Test and build Python package/test]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[Test and build Python package/test]   |         # Check for invalid configurations.\n[Test and build Python package/test]   |         self.check_settings()\n[Test and build Python package/test]   |         # In case the previous connection was closed while in an atomic block\n[Test and build Python package/test]   |         self.in_atomic_block = False\n[Test and build Python package/test]   |         self.savepoint_ids = []\n[Test and build Python package/test]   |         self.needs_rollback = False\n[Test and build Python package/test]   |         # Reset parameters defining when to close the connection\n[Test and build Python package/test]   |         max_age = self.settings_dict['CONN_MAX_AGE']\n[Test and build Python package/test]   |         self.close_at = None if max_age is None else time.time() + max_age\n[Test and build Python package/test]   |         self.closed_in_transaction = False\n[Test and build Python package/test]   |         self.errors_occurred = False\n[Test and build Python package/test]   |         # Establish the connection\n[Test and build Python package/test]   |         conn_params = self.get_connection_params()\n[Test and build Python package/test]   | >       self.connection = self.get_new_connection(conn_params)\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:195: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | conn_params = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def get_new_connection(self, conn_params):\n[Test and build Python package/test]   | >       connection = Database.connect(**conn_params)\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/postgresql/base.py:178: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | dsn = 'user=test password=test host=localhost port=5432 dbname=test'\n[Test and build Python package/test]   | connection_factory = None, cursor_factory = None\n[Test and build Python package/test]   | kwargs = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | kwasync = {}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         Create a new database connection.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         The connection parameters can be specified as a string:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         or using a set of keyword arguments:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Or as a mix of both. The basic connection parameters are:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         - *dbname*: the database name\n[Test and build Python package/test]   |         - *database*: the database name (only as keyword argument)\n[Test and build Python package/test]   |         - *user*: user name used to authenticate\n[Test and build Python package/test]   |         - *password*: password used to authenticate\n[Test and build Python package/test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Test and build Python package/test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *connection_factory* parameter a different class or connections\n[Test and build Python package/test]   |         factory can be specified. It should be a callable object taking a dsn\n[Test and build Python package/test]   |         argument.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Test and build Python package/test]   |         used by cursor().\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Test and build Python package/test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Any other keyword parameter will be passed to the underlying client\n[Test and build Python package/test]   |         library: the list of supported parameters depends on the library version.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         kwasync = {}\n[Test and build Python package/test]   |         if 'async' in kwargs:\n[Test and build Python package/test]   |             kwasync['async'] = kwargs.pop('async')\n[Test and build Python package/test]   |         if 'async_' in kwargs:\n[Test and build Python package/test]   |             kwasync['async_'] = kwargs.pop('async_')\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Test and build Python package/test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Test and build Python package/test]   | E       psycopg2.OperationalError: could not connect to server: Connection refused\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (127.0.0.1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | E       could not connect to server: Cannot assign requested address\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (::1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/psycopg2/__init__.py:122: OperationalError\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | The above exception was the direct cause of the following exception:\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | request = <SubRequest '_django_db_marker' for <Function test_top_level_media_event>>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     @pytest.fixture(autouse=True)\n[Test and build Python package/test]   |     def _django_db_marker(request) -> None:\n[Test and build Python package/test]   |         \"\"\"Implement the django_db marker, internal to pytest-django.\"\"\"\n[Test and build Python package/test]   |         marker = request.node.get_closest_marker(\"django_db\")\n[Test and build Python package/test]   |         if marker:\n[Test and build Python package/test]   | >           request.getfixturevalue(\"_django_db_helper\")\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/pytest_django/plugin.py:465: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/pytest_django/fixtures.py:125: in django_db_setup\n[Test and build Python package/test]   |     **setup_databases_args\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/test/utils.py:174: in setup_databases\n[Test and build Python package/test]   |     serialize=connection.settings_dict.get('TEST', {}).get('SERIALIZE', True),\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/creation.py:58: in create_test_db\n[Test and build Python package/test]   |     self._create_test_db(verbosity, autoclobber, keepdb)\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/creation.py:168: in _create_test_db\n[Test and build Python package/test]   |     with self._nodb_connection.cursor() as cursor:\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:256: in cursor\n[Test and build Python package/test]   |     return self._cursor()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:233: in _cursor\n[Test and build Python package/test]   |     self.ensure_connection()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: in ensure_connection\n[Test and build Python package/test]   |     self.connect()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/utils.py:89: in __exit__\n[Test and build Python package/test]   |     raise dj_exc_value.with_traceback(traceback) from exc_value\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: in ensure_connection\n[Test and build Python package/test]   |     self.connect()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:195: in connect\n[Test and build Python package/test]   |     self.connection = self.get_new_connection(conn_params)\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/postgresql/base.py:178: in get_new_connection\n[Test and build Python package/test]   |     connection = Database.connect(**conn_params)\n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | dsn = 'user=test password=test host=localhost port=5432 dbname=test'\n[Test and build Python package/test]   | connection_factory = None, cursor_factory = None\n[Test and build Python package/test]   | kwargs = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | kwasync = {}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         Create a new database connection.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         The connection parameters can be specified as a string:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         or using a set of keyword arguments:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Or as a mix of both. The basic connection parameters are:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         - *dbname*: the database name\n[Test and build Python package/test]   |         - *database*: the database name (only as keyword argument)\n[Test and build Python package/test]   |         - *user*: user name used to authenticate\n[Test and build Python package/test]   |         - *password*: password used to authenticate\n[Test and build Python package/test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Test and build Python package/test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *connection_factory* parameter a different class or connections\n[Test and build Python package/test]   |         factory can be specified. It should be a callable object taking a dsn\n[Test and build Python package/test]   |         argument.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Test and build Python package/test]   |         used by cursor().\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Test and build Python package/test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Any other keyword parameter will be passed to the underlying client\n[Test and build Python package/test]   |         library: the list of supported parameters depends on the library version.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         kwasync = {}\n[Test and build Python package/test]   |         if 'async' in kwargs:\n[Test and build Python package/test]   |             kwasync['async'] = kwargs.pop('async')\n[Test and build Python package/test]   |         if 'async_' in kwargs:\n[Test and build Python package/test]   |             kwasync['async_'] = kwargs.pop('async_')\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Test and build Python package/test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Test and build Python package/test]   | E       django.db.utils.OperationalError: could not connect to server: Connection refused\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (127.0.0.1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | E       could not connect to server: Cannot assign requested address\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (::1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/psycopg2/__init__.py:122: OperationalError\n[Test and build Python package/test]   | ___________________ ERROR at setup of test_event_agenda_item ___________________\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def ensure_connection(self):\n[Test and build Python package/test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[Test and build Python package/test]   |         if self.connection is None:\n[Test and build Python package/test]   |             with self.wrap_database_errors:\n[Test and build Python package/test]   | >               self.connect()\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(self):\n[Test and build Python package/test]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[Test and build Python package/test]   |         # Check for invalid configurations.\n[Test and build Python package/test]   |         self.check_settings()\n[Test and build Python package/test]   |         # In case the previous connection was closed while in an atomic block\n[Test and build Python package/test]   |         self.in_atomic_block = False\n[Test and build Python package/test]   |         self.savepoint_ids = []\n[Test and build Python package/test]   |         self.needs_rollback = False\n[Test and build Python package/test]   |         # Reset parameters defining when to close the connection\n[Test and build Python package/test]   |         max_age = self.settings_dict['CONN_MAX_AGE']\n[Test and build Python package/test]   |         self.close_at = None if max_age is None else time.time() + max_age\n[Test and build Python package/test]   |         self.closed_in_transaction = False\n[Test and build Python package/test]   |         self.errors_occurred = False\n[Test and build Python package/test]   |         # Establish the connection\n[Test and build Python package/test]   |         conn_params = self.get_connection_params()\n[Test and build Python package/test]   | >       self.connection = self.get_new_connection(conn_params)\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:195: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | conn_params = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def get_new_connection(self, conn_params):\n[Test and build Python package/test]   | >       connection = Database.connect(**conn_params)\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/postgresql/base.py:178: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | dsn = 'user=test password=test host=localhost port=5432 dbname=test'\n[Test and build Python package/test]   | connection_factory = None, cursor_factory = None\n[Test and build Python package/test]   | kwargs = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | kwasync = {}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         Create a new database connection.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         The connection parameters can be specified as a string:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         or using a set of keyword arguments:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Or as a mix of both. The basic connection parameters are:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         - *dbname*: the database name\n[Test and build Python package/test]   |         - *database*: the database name (only as keyword argument)\n[Test and build Python package/test]   |         - *user*: user name used to authenticate\n[Test and build Python package/test]   |         - *password*: password used to authenticate\n[Test and build Python package/test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Test and build Python package/test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *connection_factory* parameter a different class or connections\n[Test and build Python package/test]   |         factory can be specified. It should be a callable object taking a dsn\n[Test and build Python package/test]   |         argument.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Test and build Python package/test]   |         used by cursor().\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Test and build Python package/test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Any other keyword parameter will be passed to the underlying client\n[Test and build Python package/test]   |         library: the list of supported parameters depends on the library version.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         kwasync = {}\n[Test and build Python package/test]   |         if 'async' in kwargs:\n[Test and build Python package/test]   |             kwasync['async'] = kwargs.pop('async')\n[Test and build Python package/test]   |         if 'async_' in kwargs:\n[Test and build Python package/test]   |             kwasync['async_'] = kwargs.pop('async_')\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Test and build Python package/test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Test and build Python package/test]   | E       psycopg2.OperationalError: could not connect to server: Connection refused\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (127.0.0.1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | E       could not connect to server: Cannot assign requested address\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (::1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/psycopg2/__init__.py:122: OperationalError\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | The above exception was the direct cause of the following exception:\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | request = <SubRequest '_django_db_marker' for <Function test_event_agenda_item>>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     @pytest.fixture(autouse=True)\n[Test and build Python package/test]   |     def _django_db_marker(request) -> None:\n[Test and build Python package/test]   |         \"\"\"Implement the django_db marker, internal to pytest-django.\"\"\"\n[Test and build Python package/test]   |         marker = request.node.get_closest_marker(\"django_db\")\n[Test and build Python package/test]   |         if marker:\n[Test and build Python package/test]   | >           request.getfixturevalue(\"_django_db_helper\")\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/pytest_django/plugin.py:465: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/pytest_django/fixtures.py:125: in django_db_setup\n[Test and build Python package/test]   |     **setup_databases_args\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/test/utils.py:174: in setup_databases\n[Test and build Python package/test]   |     serialize=connection.settings_dict.get('TEST', {}).get('SERIALIZE', True),\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/creation.py:58: in create_test_db\n[Test and build Python package/test]   |     self._create_test_db(verbosity, autoclobber, keepdb)\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/creation.py:168: in _create_test_db\n[Test and build Python package/test]   |     with self._nodb_connection.cursor() as cursor:\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:256: in cursor\n[Test and build Python package/test]   |     return self._cursor()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:233: in _cursor\n[Test and build Python package/test]   |     self.ensure_connection()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: in ensure_connection\n[Test and build Python package/test]   |     self.connect()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/utils.py:89: in __exit__\n[Test and build Python package/test]   |     raise dj_exc_value.with_traceback(traceback) from exc_value\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: in ensure_connection\n[Test and build Python package/test]   |     self.connect()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:195: in connect\n[Test and build Python package/test]   |     self.connection = self.get_new_connection(conn_params)\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/postgresql/base.py:178: in get_new_connection\n[Test and build Python package/test]   |     connection = Database.connect(**conn_params)\n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | dsn = 'user=test password=test host=localhost port=5432 dbname=test'\n[Test and build Python package/test]   | connection_factory = None, cursor_factory = None\n[Test and build Python package/test]   | kwargs = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | kwasync = {}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         Create a new database connection.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         The connection parameters can be specified as a string:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         or using a set of keyword arguments:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Or as a mix of both. The basic connection parameters are:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         - *dbname*: the database name\n[Test and build Python package/test]   |         - *database*: the database name (only as keyword argument)\n[Test and build Python package/test]   |         - *user*: user name used to authenticate\n[Test and build Python package/test]   |         - *password*: password used to authenticate\n[Test and build Python package/test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Test and build Python package/test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *connection_factory* parameter a different class or connections\n[Test and build Python package/test]   |         factory can be specified. It should be a callable object taking a dsn\n[Test and build Python package/test]   |         argument.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Test and build Python package/test]   |         used by cursor().\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Test and build Python package/test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Any other keyword parameter will be passed to the underlying client\n[Test and build Python package/test]   |         library: the list of supported parameters depends on the library version.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         kwasync = {}\n[Test and build Python package/test]   |         if 'async' in kwargs:\n[Test and build Python package/test]   |             kwasync['async'] = kwargs.pop('async')\n[Test and build Python package/test]   |         if 'async_' in kwargs:\n[Test and build Python package/test]   |             kwasync['async_'] = kwargs.pop('async_')\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Test and build Python package/test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Test and build Python package/test]   | E       django.db.utils.OperationalError: could not connect to server: Connection refused\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (127.0.0.1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | E       could not connect to server: Cannot assign requested address\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (::1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/psycopg2/__init__.py:122: OperationalError\n[Test and build Python package/test]   | __________________ ERROR at setup of test_jurisdiction_import __________________\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def ensure_connection(self):\n[Test and build Python package/test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[Test and build Python package/test]   |         if self.connection is None:\n[Test and build Python package/test]   |             with self.wrap_database_errors:\n[Test and build Python package/test]   | >               self.connect()\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(self):\n[Test and build Python package/test]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[Test and build Python package/test]   |         # Check for invalid configurations.\n[Test and build Python package/test]   |         self.check_settings()\n[Test and build Python package/test]   |         # In case the previous connection was closed while in an atomic block\n[Test and build Python package/test]   |         self.in_atomic_block = False\n[Test and build Python package/test]   |         self.savepoint_ids = []\n[Test and build Python package/test]   |         self.needs_rollback = False\n[Test and build Python package/test]   |         # Reset parameters defining when to close the connection\n[Test and build Python package/test]   |         max_age = self.settings_dict['CONN_MAX_AGE']\n[Test and build Python package/test]   |         self.close_at = None if max_age is None else time.time() + max_age\n[Test and build Python package/test]   |         self.closed_in_transaction = False\n[Test and build Python package/test]   |         self.errors_occurred = False\n[Test and build Python package/test]   |         # Establish the connection\n[Test and build Python package/test]   |         conn_params = self.get_connection_params()\n[Test and build Python package/test]   | >       self.connection = self.get_new_connection(conn_params)\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:195: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | conn_params = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def get_new_connection(self, conn_params):\n[Test and build Python package/test]   | >       connection = Database.connect(**conn_params)\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/postgresql/base.py:178: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | dsn = 'user=test password=test host=localhost port=5432 dbname=test'\n[Test and build Python package/test]   | connection_factory = None, cursor_factory = None\n[Test and build Python package/test]   | kwargs = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | kwasync = {}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         Create a new database connection.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         The connection parameters can be specified as a string:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         or using a set of keyword arguments:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Or as a mix of both. The basic connection parameters are:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         - *dbname*: the database name\n[Test and build Python package/test]   |         - *database*: the database name (only as keyword argument)\n[Test and build Python package/test]   |         - *user*: user name used to authenticate\n[Test and build Python package/test]   |         - *password*: password used to authenticate\n[Test and build Python package/test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Test and build Python package/test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *connection_factory* parameter a different class or connections\n[Test and build Python package/test]   |         factory can be specified. It should be a callable object taking a dsn\n[Test and build Python package/test]   |         argument.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Test and build Python package/test]   |         used by cursor().\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Test and build Python package/test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Any other keyword parameter will be passed to the underlying client\n[Test and build Python package/test]   |         library: the list of supported parameters depends on the library version.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         kwasync = {}\n[Test and build Python package/test]   |         if 'async' in kwargs:\n[Test and build Python package/test]   |             kwasync['async'] = kwargs.pop('async')\n[Test and build Python package/test]   |         if 'async_' in kwargs:\n[Test and build Python package/test]   |             kwasync['async_'] = kwargs.pop('async_')\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Test and build Python package/test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Test and build Python package/test]   | E       psycopg2.OperationalError: could not connect to server: Connection refused\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (127.0.0.1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | E       could not connect to server: Cannot assign requested address\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (::1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/psycopg2/__init__.py:122: OperationalError\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | The above exception was the direct cause of the following exception:\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | request = <SubRequest '_django_db_marker' for <Function test_jurisdiction_import>>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     @pytest.fixture(autouse=True)\n[Test and build Python package/test]   |     def _django_db_marker(request) -> None:\n[Test and build Python package/test]   |         \"\"\"Implement the django_db marker, internal to pytest-django.\"\"\"\n[Test and build Python package/test]   |         marker = request.node.get_closest_marker(\"django_db\")\n[Test and build Python package/test]   |         if marker:\n[Test and build Python package/test]   | >           request.getfixturevalue(\"_django_db_helper\")\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/pytest_django/plugin.py:465: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/pytest_django/fixtures.py:125: in django_db_setup\n[Test and build Python package/test]   |     **setup_databases_args\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/test/utils.py:174: in setup_databases\n[Test and build Python package/test]   |     serialize=connection.settings_dict.get('TEST', {}).get('SERIALIZE', True),\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/creation.py:58: in create_test_db\n[Test and build Python package/test]   |     self._create_test_db(verbosity, autoclobber, keepdb)\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/creation.py:168: in _create_test_db\n[Test and build Python package/test]   |     with self._nodb_connection.cursor() as cursor:\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:256: in cursor\n[Test and build Python package/test]   |     return self._cursor()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:233: in _cursor\n[Test and build Python package/test]   |     self.ensure_connection()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: in ensure_connection\n[Test and build Python package/test]   |     self.connect()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/utils.py:89: in __exit__\n[Test and build Python package/test]   |     raise dj_exc_value.with_traceback(traceback) from exc_value\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: in ensure_connection\n[Test and build Python package/test]   |     self.connect()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:195: in connect\n[Test and build Python package/test]   |     self.connection = self.get_new_connection(conn_params)\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/postgresql/base.py:178: in get_new_connection\n[Test and build Python package/test]   |     connection = Database.connect(**conn_params)\n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | dsn = 'user=test password=test host=localhost port=5432 dbname=test'\n[Test and build Python package/test]   | connection_factory = None, cursor_factory = None\n[Test and build Python package/test]   | kwargs = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | kwasync = {}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         Create a new database connection.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         The connection parameters can be specified as a string:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         or using a set of keyword arguments:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Or as a mix of both. The basic connection parameters are:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         - *dbname*: the database name\n[Test and build Python package/test]   |         - *database*: the database name (only as keyword argument)\n[Test and build Python package/test]   |         - *user*: user name used to authenticate\n[Test and build Python package/test]   |         - *password*: password used to authenticate\n[Test and build Python package/test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Test and build Python package/test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *connection_factory* parameter a different class or connections\n[Test and build Python package/test]   |         factory can be specified. It should be a callable object taking a dsn\n[Test and build Python package/test]   |         argument.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Test and build Python package/test]   |         used by cursor().\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Test and build Python package/test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Any other keyword parameter will be passed to the underlying client\n[Test and build Python package/test]   |         library: the list of supported parameters depends on the library version.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         kwasync = {}\n[Test and build Python package/test]   |         if 'async' in kwargs:\n[Test and build Python package/test]   |             kwasync['async'] = kwargs.pop('async')\n[Test and build Python package/test]   |         if 'async_' in kwargs:\n[Test and build Python package/test]   |             kwasync['async_'] = kwargs.pop('async_')\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Test and build Python package/test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Test and build Python package/test]   | E       django.db.utils.OperationalError: could not connect to server: Connection refused\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (127.0.0.1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | E       could not connect to server: Cannot assign requested address\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (::1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/psycopg2/__init__.py:122: OperationalError\n[Test and build Python package/test]   | __________________ ERROR at setup of test_jurisdiction_update __________________\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def ensure_connection(self):\n[Test and build Python package/test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[Test and build Python package/test]   |         if self.connection is None:\n[Test and build Python package/test]   |             with self.wrap_database_errors:\n[Test and build Python package/test]   | >               self.connect()\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(self):\n[Test and build Python package/test]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[Test and build Python package/test]   |         # Check for invalid configurations.\n[Test and build Python package/test]   |         self.check_settings()\n[Test and build Python package/test]   |         # In case the previous connection was closed while in an atomic block\n[Test and build Python package/test]   |         self.in_atomic_block = False\n[Test and build Python package/test]   |         self.savepoint_ids = []\n[Test and build Python package/test]   |         self.needs_rollback = False\n[Test and build Python package/test]   |         # Reset parameters defining when to close the connection\n[Test and build Python package/test]   |         max_age = self.settings_dict['CONN_MAX_AGE']\n[Test and build Python package/test]   |         self.close_at = None if max_age is None else time.time() + max_age\n[Test and build Python package/test]   |         self.closed_in_transaction = False\n[Test and build Python package/test]   |         self.errors_occurred = False\n[Test and build Python package/test]   |         # Establish the connection\n[Test and build Python package/test]   |         conn_params = self.get_connection_params()\n[Test and build Python package/test]   | >       self.connection = self.get_new_connection(conn_params)\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:195: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | conn_params = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def get_new_connection(self, conn_params):\n[Test and build Python package/test]   | >       connection = Database.connect(**conn_params)\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/postgresql/base.py:178: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | dsn = 'user=test password=test host=localhost port=5432 dbname=test'\n[Test and build Python package/test]   | connection_factory = None, cursor_factory = None\n[Test and build Python package/test]   | kwargs = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | kwasync = {}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         Create a new database connection.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         The connection parameters can be specified as a string:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         or using a set of keyword arguments:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Or as a mix of both. The basic connection parameters are:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         - *dbname*: the database name\n[Test and build Python package/test]   |         - *database*: the database name (only as keyword argument)\n[Test and build Python package/test]   |         - *user*: user name used to authenticate\n[Test and build Python package/test]   |         - *password*: password used to authenticate\n[Test and build Python package/test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Test and build Python package/test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *connection_factory* parameter a different class or connections\n[Test and build Python package/test]   |         factory can be specified. It should be a callable object taking a dsn\n[Test and build Python package/test]   |         argument.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Test and build Python package/test]   |         used by cursor().\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Test and build Python package/test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Any other keyword parameter will be passed to the underlying client\n[Test and build Python package/test]   |         library: the list of supported parameters depends on the library version.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         kwasync = {}\n[Test and build Python package/test]   |         if 'async' in kwargs:\n[Test and build Python package/test]   |             kwasync['async'] = kwargs.pop('async')\n[Test and build Python package/test]   |         if 'async_' in kwargs:\n[Test and build Python package/test]   |             kwasync['async_'] = kwargs.pop('async_')\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Test and build Python package/test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Test and build Python package/test]   | E       psycopg2.OperationalError: could not connect to server: Connection refused\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (127.0.0.1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | E       could not connect to server: Cannot assign requested address\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (::1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/psycopg2/__init__.py:122: OperationalError\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | The above exception was the direct cause of the following exception:\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | request = <SubRequest '_django_db_marker' for <Function test_jurisdiction_update>>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     @pytest.fixture(autouse=True)\n[Test and build Python package/test]   |     def _django_db_marker(request) -> None:\n[Test and build Python package/test]   |         \"\"\"Implement the django_db marker, internal to pytest-django.\"\"\"\n[Test and build Python package/test]   |         marker = request.node.get_closest_marker(\"django_db\")\n[Test and build Python package/test]   |         if marker:\n[Test and build Python package/test]   | >           request.getfixturevalue(\"_django_db_helper\")\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/pytest_django/plugin.py:465: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/pytest_django/fixtures.py:125: in django_db_setup\n[Test and build Python package/test]   |     **setup_databases_args\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/test/utils.py:174: in setup_databases\n[Test and build Python package/test]   |     serialize=connection.settings_dict.get('TEST', {}).get('SERIALIZE', True),\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/creation.py:58: in create_test_db\n[Test and build Python package/test]   |     self._create_test_db(verbosity, autoclobber, keepdb)\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/creation.py:168: in _create_test_db\n[Test and build Python package/test]   |     with self._nodb_connection.cursor() as cursor:\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:256: in cursor\n[Test and build Python package/test]   |     return self._cursor()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:233: in _cursor\n[Test and build Python package/test]   |     self.ensure_connection()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: in ensure_connection\n[Test and build Python package/test]   |     self.connect()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/utils.py:89: in __exit__\n[Test and build Python package/test]   |     raise dj_exc_value.with_traceback(traceback) from exc_value\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: in ensure_connection\n[Test and build Python package/test]   |     self.connect()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:195: in connect\n[Test and build Python package/test]   |     self.connection = self.get_new_connection(conn_params)\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/postgresql/base.py:178: in get_new_connection\n[Test and build Python package/test]   |     connection = Database.connect(**conn_params)\n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | dsn = 'user=test password=test host=localhost port=5432 dbname=test'\n[Test and build Python package/test]   | connection_factory = None, cursor_factory = None\n[Test and build Python package/test]   | kwargs = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | kwasync = {}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         Create a new database connection.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         The connection parameters can be specified as a string:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         or using a set of keyword arguments:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Or as a mix of both. The basic connection parameters are:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         - *dbname*: the database name\n[Test and build Python package/test]   |         - *database*: the database name (only as keyword argument)\n[Test and build Python package/test]   |         - *user*: user name used to authenticate\n[Test and build Python package/test]   |         - *password*: password used to authenticate\n[Test and build Python package/test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Test and build Python package/test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *connection_factory* parameter a different class or connections\n[Test and build Python package/test]   |         factory can be specified. It should be a callable object taking a dsn\n[Test and build Python package/test]   |         argument.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Test and build Python package/test]   |         used by cursor().\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Test and build Python package/test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Any other keyword parameter will be passed to the underlying client\n[Test and build Python package/test]   |         library: the list of supported parameters depends on the library version.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         kwasync = {}\n[Test and build Python package/test]   |         if 'async' in kwargs:\n[Test and build Python package/test]   |             kwasync['async'] = kwargs.pop('async')\n[Test and build Python package/test]   |         if 'async_' in kwargs:\n[Test and build Python package/test]   |             kwasync['async_'] = kwargs.pop('async_')\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Test and build Python package/test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Test and build Python package/test]   | E       django.db.utils.OperationalError: could not connect to server: Connection refused\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (127.0.0.1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | E       could not connect to server: Cannot assign requested address\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (::1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/psycopg2/__init__.py:122: OperationalError\n[Test and build Python package/test]   | ______________ ERROR at setup of test_jurisdiction_merge_related _______________\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def ensure_connection(self):\n[Test and build Python package/test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[Test and build Python package/test]   |         if self.connection is None:\n[Test and build Python package/test]   |             with self.wrap_database_errors:\n[Test and build Python package/test]   | >               self.connect()\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(self):\n[Test and build Python package/test]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[Test and build Python package/test]   |         # Check for invalid configurations.\n[Test and build Python package/test]   |         self.check_settings()\n[Test and build Python package/test]   |         # In case the previous connection was closed while in an atomic block\n[Test and build Python package/test]   |         self.in_atomic_block = False\n[Test and build Python package/test]   |         self.savepoint_ids = []\n[Test and build Python package/test]   |         self.needs_rollback = False\n[Test and build Python package/test]   |         # Reset parameters defining when to close the connection\n[Test and build Python package/test]   |         max_age = self.settings_dict['CONN_MAX_AGE']\n[Test and build Python package/test]   |         self.close_at = None if max_age is None else time.time() + max_age\n[Test and build Python package/test]   |         self.closed_in_transaction = False\n[Test and build Python package/test]   |         self.errors_occurred = False\n[Test and build Python package/test]   |         # Establish the connection\n[Test and build Python package/test]   |         conn_params = self.get_connection_params()\n[Test and build Python package/test]   | >       self.connection = self.get_new_connection(conn_params)\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:195: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | conn_params = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def get_new_connection(self, conn_params):\n[Test and build Python package/test]   | >       connection = Database.connect(**conn_params)\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/postgresql/base.py:178: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | dsn = 'user=test password=test host=localhost port=5432 dbname=test'\n[Test and build Python package/test]   | connection_factory = None, cursor_factory = None\n[Test and build Python package/test]   | kwargs = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | kwasync = {}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         Create a new database connection.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         The connection parameters can be specified as a string:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         or using a set of keyword arguments:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Or as a mix of both. The basic connection parameters are:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         - *dbname*: the database name\n[Test and build Python package/test]   |         - *database*: the database name (only as keyword argument)\n[Test and build Python package/test]   |         - *user*: user name used to authenticate\n[Test and build Python package/test]   |         - *password*: password used to authenticate\n[Test and build Python package/test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Test and build Python package/test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *connection_factory* parameter a different class or connections\n[Test and build Python package/test]   |         factory can be specified. It should be a callable object taking a dsn\n[Test and build Python package/test]   |         argument.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Test and build Python package/test]   |         used by cursor().\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Test and build Python package/test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Any other keyword parameter will be passed to the underlying client\n[Test and build Python package/test]   |         library: the list of supported parameters depends on the library version.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         kwasync = {}\n[Test and build Python package/test]   |         if 'async' in kwargs:\n[Test and build Python package/test]   |             kwasync['async'] = kwargs.pop('async')\n[Test and build Python package/test]   |         if 'async_' in kwargs:\n[Test and build Python package/test]   |             kwasync['async_'] = kwargs.pop('async_')\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Test and build Python package/test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Test and build Python package/test]   | E       psycopg2.OperationalError: could not connect to server: Connection refused\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (127.0.0.1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | E       could not connect to server: Cannot assign requested address\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (::1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/psycopg2/__init__.py:122: OperationalError\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | The above exception was the direct cause of the following exception:\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | request = <SubRequest '_django_db_marker' for <Function test_jurisdiction_merge_related>>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     @pytest.fixture(autouse=True)\n[Test and build Python package/test]   |     def _django_db_marker(request) -> None:\n[Test and build Python package/test]   |         \"\"\"Implement the django_db marker, internal to pytest-django.\"\"\"\n[Test and build Python package/test]   |         marker = request.node.get_closest_marker(\"django_db\")\n[Test and build Python package/test]   |         if marker:\n[Test and build Python package/test]   | >           request.getfixturevalue(\"_django_db_helper\")\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/pytest_django/plugin.py:465: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/pytest_django/fixtures.py:125: in django_db_setup\n[Test and build Python package/test]   |     **setup_databases_args\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/test/utils.py:174: in setup_databases\n[Test and build Python package/test]   |     serialize=connection.settings_dict.get('TEST', {}).get('SERIALIZE', True),\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/creation.py:58: in create_test_db\n[Test and build Python package/test]   |     self._create_test_db(verbosity, autoclobber, keepdb)\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/creation.py:168: in _create_test_db\n[Test and build Python package/test]   |     with self._nodb_connection.cursor() as cursor:\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:256: in cursor\n[Test and build Python package/test]   |     return self._cursor()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:233: in _cursor\n[Test and build Python package/test]   |     self.ensure_connection()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: in ensure_connection\n[Test and build Python package/test]   |     self.connect()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/utils.py:89: in __exit__\n[Test and build Python package/test]   |     raise dj_exc_value.with_traceback(traceback) from exc_value\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: in ensure_connection\n[Test and build Python package/test]   |     self.connect()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:195: in connect\n[Test and build Python package/test]   |     self.connection = self.get_new_connection(conn_params)\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/postgresql/base.py:178: in get_new_connection\n[Test and build Python package/test]   |     connection = Database.connect(**conn_params)\n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | dsn = 'user=test password=test host=localhost port=5432 dbname=test'\n[Test and build Python package/test]   | connection_factory = None, cursor_factory = None\n[Test and build Python package/test]   | kwargs = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | kwasync = {}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         Create a new database connection.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         The connection parameters can be specified as a string:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         or using a set of keyword arguments:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Or as a mix of both. The basic connection parameters are:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         - *dbname*: the database name\n[Test and build Python package/test]   |         - *database*: the database name (only as keyword argument)\n[Test and build Python package/test]   |         - *user*: user name used to authenticate\n[Test and build Python package/test]   |         - *password*: password used to authenticate\n[Test and build Python package/test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Test and build Python package/test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *connection_factory* parameter a different class or connections\n[Test and build Python package/test]   |         factory can be specified. It should be a callable object taking a dsn\n[Test and build Python package/test]   |         argument.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Test and build Python package/test]   |         used by cursor().\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Test and build Python package/test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Any other keyword parameter will be passed to the underlying client\n[Test and build Python package/test]   |         library: the list of supported parameters depends on the library version.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         kwasync = {}\n[Test and build Python package/test]   |         if 'async' in kwargs:\n[Test and build Python package/test]   |             kwasync['async'] = kwargs.pop('async')\n[Test and build Python package/test]   |         if 'async_' in kwargs:\n[Test and build Python package/test]   |             kwasync['async_'] = kwargs.pop('async_')\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Test and build Python package/test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Test and build Python package/test]   | E       django.db.utils.OperationalError: could not connect to server: Connection refused\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (127.0.0.1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | E       could not connect to server: Cannot assign requested address\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (::1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/psycopg2/__init__.py:122: OperationalError\n[Test and build Python package/test]   | ____________________ ERROR at setup of test_full_membership ____________________\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def ensure_connection(self):\n[Test and build Python package/test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[Test and build Python package/test]   |         if self.connection is None:\n[Test and build Python package/test]   |             with self.wrap_database_errors:\n[Test and build Python package/test]   | >               self.connect()\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(self):\n[Test and build Python package/test]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[Test and build Python package/test]   |         # Check for invalid configurations.\n[Test and build Python package/test]   |         self.check_settings()\n[Test and build Python package/test]   |         # In case the previous connection was closed while in an atomic block\n[Test and build Python package/test]   |         self.in_atomic_block = False\n[Test and build Python package/test]   |         self.savepoint_ids = []\n[Test and build Python package/test]   |         self.needs_rollback = False\n[Test and build Python package/test]   |         # Reset parameters defining when to close the connection\n[Test and build Python package/test]   |         max_age = self.settings_dict['CONN_MAX_AGE']\n[Test and build Python package/test]   |         self.close_at = None if max_age is None else time.time() + max_age\n[Test and build Python package/test]   |         self.closed_in_transaction = False\n[Test and build Python package/test]   |         self.errors_occurred = False\n[Test and build Python package/test]   |         # Establish the connection\n[Test and build Python package/test]   |         conn_params = self.get_connection_params()\n[Test and build Python package/test]   | >       self.connection = self.get_new_connection(conn_params)\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:195: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | conn_params = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def get_new_connection(self, conn_params):\n[Test and build Python package/test]   | >       connection = Database.connect(**conn_params)\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/postgresql/base.py:178: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | dsn = 'user=test password=test host=localhost port=5432 dbname=test'\n[Test and build Python package/test]   | connection_factory = None, cursor_factory = None\n[Test and build Python package/test]   | kwargs = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | kwasync = {}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         Create a new database connection.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         The connection parameters can be specified as a string:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         or using a set of keyword arguments:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Or as a mix of both. The basic connection parameters are:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         - *dbname*: the database name\n[Test and build Python package/test]   |         - *database*: the database name (only as keyword argument)\n[Test and build Python package/test]   |         - *user*: user name used to authenticate\n[Test and build Python package/test]   |         - *password*: password used to authenticate\n[Test and build Python package/test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Test and build Python package/test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *connection_factory* parameter a different class or connections\n[Test and build Python package/test]   |         factory can be specified. It should be a callable object taking a dsn\n[Test and build Python package/test]   |         argument.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Test and build Python package/test]   |         used by cursor().\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Test and build Python package/test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Any other keyword parameter will be passed to the underlying client\n[Test and build Python package/test]   |         library: the list of supported parameters depends on the library version.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         kwasync = {}\n[Test and build Python package/test]   |         if 'async' in kwargs:\n[Test and build Python package/test]   |             kwasync['async'] = kwargs.pop('async')\n[Test and build Python package/test]   |         if 'async_' in kwargs:\n[Test and build Python package/test]   |             kwasync['async_'] = kwargs.pop('async_')\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Test and build Python package/test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Test and build Python package/test]   | E       psycopg2.OperationalError: could not connect to server: Connection refused\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (127.0.0.1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | E       could not connect to server: Cannot assign requested address\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (::1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/psycopg2/__init__.py:122: OperationalError\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | The above exception was the direct cause of the following exception:\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | request = <SubRequest '_django_db_marker' for <Function test_full_membership>>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     @pytest.fixture(autouse=True)\n[Test and build Python package/test]   |     def _django_db_marker(request) -> None:\n[Test and build Python package/test]   |         \"\"\"Implement the django_db marker, internal to pytest-django.\"\"\"\n[Test and build Python package/test]   |         marker = request.node.get_closest_marker(\"django_db\")\n[Test and build Python package/test]   |         if marker:\n[Test and build Python package/test]   | >           request.getfixturevalue(\"_django_db_helper\")\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/pytest_django/plugin.py:465: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/pytest_django/fixtures.py:125: in django_db_setup\n[Test and build Python package/test]   |     **setup_databases_args\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/test/utils.py:174: in setup_databases\n[Test and build Python package/test]   |     serialize=connection.settings_dict.get('TEST', {}).get('SERIALIZE', True),\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/creation.py:58: in create_test_db\n[Test and build Python package/test]   |     self._create_test_db(verbosity, autoclobber, keepdb)\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/creation.py:168: in _create_test_db\n[Test and build Python package/test]   |     with self._nodb_connection.cursor() as cursor:\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:256: in cursor\n[Test and build Python package/test]   |     return self._cursor()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:233: in _cursor\n[Test and build Python package/test]   |     self.ensure_connection()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: in ensure_connection\n[Test and build Python package/test]   |     self.connect()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/utils.py:89: in __exit__\n[Test and build Python package/test]   |     raise dj_exc_value.with_traceback(traceback) from exc_value\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: in ensure_connection\n[Test and build Python package/test]   |     self.connect()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:195: in connect\n[Test and build Python package/test]   |     self.connection = self.get_new_connection(conn_params)\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/postgresql/base.py:178: in get_new_connection\n[Test and build Python package/test]   |     connection = Database.connect(**conn_params)\n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | dsn = 'user=test password=test host=localhost port=5432 dbname=test'\n[Test and build Python package/test]   | connection_factory = None, cursor_factory = None\n[Test and build Python package/test]   | kwargs = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | kwasync = {}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         Create a new database connection.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         The connection parameters can be specified as a string:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         or using a set of keyword arguments:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Or as a mix of both. The basic connection parameters are:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         - *dbname*: the database name\n[Test and build Python package/test]   |         - *database*: the database name (only as keyword argument)\n[Test and build Python package/test]   |         - *user*: user name used to authenticate\n[Test and build Python package/test]   |         - *password*: password used to authenticate\n[Test and build Python package/test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Test and build Python package/test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *connection_factory* parameter a different class or connections\n[Test and build Python package/test]   |         factory can be specified. It should be a callable object taking a dsn\n[Test and build Python package/test]   |         argument.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Test and build Python package/test]   |         used by cursor().\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Test and build Python package/test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Any other keyword parameter will be passed to the underlying client\n[Test and build Python package/test]   |         library: the list of supported parameters depends on the library version.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         kwasync = {}\n[Test and build Python package/test]   |         if 'async' in kwargs:\n[Test and build Python package/test]   |             kwasync['async'] = kwargs.pop('async')\n[Test and build Python package/test]   |         if 'async_' in kwargs:\n[Test and build Python package/test]   |             kwasync['async_'] = kwargs.pop('async_')\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Test and build Python package/test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Test and build Python package/test]   | E       django.db.utils.OperationalError: could not connect to server: Connection refused\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (127.0.0.1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | E       could not connect to server: Cannot assign requested address\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (::1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/psycopg2/__init__.py:122: OperationalError\n[Test and build Python package/test]   | _______________ ERROR at setup of test_no_membership_for_person ________________\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def ensure_connection(self):\n[Test and build Python package/test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[Test and build Python package/test]   |         if self.connection is None:\n[Test and build Python package/test]   |             with self.wrap_database_errors:\n[Test and build Python package/test]   | >               self.connect()\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(self):\n[Test and build Python package/test]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[Test and build Python package/test]   |         # Check for invalid configurations.\n[Test and build Python package/test]   |         self.check_settings()\n[Test and build Python package/test]   |         # In case the previous connection was closed while in an atomic block\n[Test and build Python package/test]   |         self.in_atomic_block = False\n[Test and build Python package/test]   |         self.savepoint_ids = []\n[Test and build Python package/test]   |         self.needs_rollback = False\n[Test and build Python package/test]   |         # Reset parameters defining when to close the connection\n[Test and build Python package/test]   |         max_age = self.settings_dict['CONN_MAX_AGE']\n[Test and build Python package/test]   |         self.close_at = None if max_age is None else time.time() + max_age\n[Test and build Python package/test]   |         self.closed_in_transaction = False\n[Test and build Python package/test]   |         self.errors_occurred = False\n[Test and build Python package/test]   |         # Establish the connection\n[Test and build Python package/test]   |         conn_params = self.get_connection_params()\n[Test and build Python package/test]   | >       self.connection = self.get_new_connection(conn_params)\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:195: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | conn_params = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def get_new_connection(self, conn_params):\n[Test and build Python package/test]   | >       connection = Database.connect(**conn_params)\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/postgresql/base.py:178: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | dsn = 'user=test password=test host=localhost port=5432 dbname=test'\n[Test and build Python package/test]   | connection_factory = None, cursor_factory = None\n[Test and build Python package/test]   | kwargs = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | kwasync = {}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         Create a new database connection.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         The connection parameters can be specified as a string:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         or using a set of keyword arguments:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Or as a mix of both. The basic connection parameters are:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         - *dbname*: the database name\n[Test and build Python package/test]   |         - *database*: the database name (only as keyword argument)\n[Test and build Python package/test]   |         - *user*: user name used to authenticate\n[Test and build Python package/test]   |         - *password*: password used to authenticate\n[Test and build Python package/test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Test and build Python package/test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *connection_factory* parameter a different class or connections\n[Test and build Python package/test]   |         factory can be specified. It should be a callable object taking a dsn\n[Test and build Python package/test]   |         argument.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Test and build Python package/test]   |         used by cursor().\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Test and build Python package/test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Any other keyword parameter will be passed to the underlying client\n[Test and build Python package/test]   |         library: the list of supported parameters depends on the library version.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         kwasync = {}\n[Test and build Python package/test]   |         if 'async' in kwargs:\n[Test and build Python package/test]   |             kwasync['async'] = kwargs.pop('async')\n[Test and build Python package/test]   |         if 'async_' in kwargs:\n[Test and build Python package/test]   |             kwasync['async_'] = kwargs.pop('async_')\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Test and build Python package/test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Test and build Python package/test]   | E       psycopg2.OperationalError: could not connect to server: Connection refused\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (127.0.0.1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | E       could not connect to server: Cannot assign requested address\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (::1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/psycopg2/__init__.py:122: OperationalError\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | The above exception was the direct cause of the following exception:\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | request = <SubRequest '_django_db_marker' for <Function test_no_membership_for_person>>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     @pytest.fixture(autouse=True)\n[Test and build Python package/test]   |     def _django_db_marker(request) -> None:\n[Test and build Python package/test]   |         \"\"\"Implement the django_db marker, internal to pytest-django.\"\"\"\n[Test and build Python package/test]   |         marker = request.node.get_closest_marker(\"django_db\")\n[Test and build Python package/test]   |         if marker:\n[Test and build Python package/test]   | >           request.getfixturevalue(\"_django_db_helper\")\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/pytest_django/plugin.py:465: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/pytest_django/fixtures.py:125: in django_db_setup\n[Test and build Python package/test]   |     **setup_databases_args\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/test/utils.py:174: in setup_databases\n[Test and build Python package/test]   |     serialize=connection.settings_dict.get('TEST', {}).get('SERIALIZE', True),\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/creation.py:58: in create_test_db\n[Test and build Python package/test]   |     self._create_test_db(verbosity, autoclobber, keepdb)\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/creation.py:168: in _create_test_db\n[Test and build Python package/test]   |     with self._nodb_connection.cursor() as cursor:\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:256: in cursor\n[Test and build Python package/test]   |     return self._cursor()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:233: in _cursor\n[Test and build Python package/test]   |     self.ensure_connection()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: in ensure_connection\n[Test and build Python package/test]   |     self.connect()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/utils.py:89: in __exit__\n[Test and build Python package/test]   |     raise dj_exc_value.with_traceback(traceback) from exc_value\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: in ensure_connection\n[Test and build Python package/test]   |     self.connect()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:195: in connect\n[Test and build Python package/test]   |     self.connection = self.get_new_connection(conn_params)\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/postgresql/base.py:178: in get_new_connection\n[Test and build Python package/test]   |     connection = Database.connect(**conn_params)\n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | dsn = 'user=test password=test host=localhost port=5432 dbname=test'\n[Test and build Python package/test]   | connection_factory = None, cursor_factory = None\n[Test and build Python package/test]   | kwargs = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | kwasync = {}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         Create a new database connection.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         The connection parameters can be specified as a string:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         or using a set of keyword arguments:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Or as a mix of both. The basic connection parameters are:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         - *dbname*: the database name\n[Test and build Python package/test]   |         - *database*: the database name (only as keyword argument)\n[Test and build Python package/test]   |         - *user*: user name used to authenticate\n[Test and build Python package/test]   |         - *password*: password used to authenticate\n[Test and build Python package/test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Test and build Python package/test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *connection_factory* parameter a different class or connections\n[Test and build Python package/test]   |         factory can be specified. It should be a callable object taking a dsn\n[Test and build Python package/test]   |         argument.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Test and build Python package/test]   |         used by cursor().\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Test and build Python package/test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Any other keyword parameter will be passed to the underlying client\n[Test and build Python package/test]   |         library: the list of supported parameters depends on the library version.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         kwasync = {}\n[Test and build Python package/test]   |         if 'async' in kwargs:\n[Test and build Python package/test]   |             kwasync['async'] = kwargs.pop('async')\n[Test and build Python package/test]   |         if 'async_' in kwargs:\n[Test and build Python package/test]   |             kwasync['async_'] = kwargs.pop('async_')\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Test and build Python package/test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Test and build Python package/test]   | E       django.db.utils.OperationalError: could not connect to server: Connection refused\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (127.0.0.1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | E       could not connect to server: Cannot assign requested address\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (::1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/psycopg2/__init__.py:122: OperationalError\n[Test and build Python package/test]   | _______ ERROR at setup of test_no_membership_for_person_including_party ________\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def ensure_connection(self):\n[Test and build Python package/test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[Test and build Python package/test]   |         if self.connection is None:\n[Test and build Python package/test]   |             with self.wrap_database_errors:\n[Test and build Python package/test]   | >               self.connect()\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(self):\n[Test and build Python package/test]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[Test and build Python package/test]   |         # Check for invalid configurations.\n[Test and build Python package/test]   |         self.check_settings()\n[Test and build Python package/test]   |         # In case the previous connection was closed while in an atomic block\n[Test and build Python package/test]   |         self.in_atomic_block = False\n[Test and build Python package/test]   |         self.savepoint_ids = []\n[Test and build Python package/test]   |         self.needs_rollback = False\n[Test and build Python package/test]   |         # Reset parameters defining when to close the connection\n[Test and build Python package/test]   |         max_age = self.settings_dict['CONN_MAX_AGE']\n[Test and build Python package/test]   |         self.close_at = None if max_age is None else time.time() + max_age\n[Test and build Python package/test]   |         self.closed_in_transaction = False\n[Test and build Python package/test]   |         self.errors_occurred = False\n[Test and build Python package/test]   |         # Establish the connection\n[Test and build Python package/test]   |         conn_params = self.get_connection_params()\n[Test and build Python package/test]   | >       self.connection = self.get_new_connection(conn_params)\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:195: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | conn_params = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def get_new_connection(self, conn_params):\n[Test and build Python package/test]   | >       connection = Database.connect(**conn_params)\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/postgresql/base.py:178: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | dsn = 'user=test password=test host=localhost port=5432 dbname=test'\n[Test and build Python package/test]   | connection_factory = None, cursor_factory = None\n[Test and build Python package/test]   | kwargs = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | kwasync = {}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         Create a new database connection.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         The connection parameters can be specified as a string:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         or using a set of keyword arguments:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Or as a mix of both. The basic connection parameters are:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         - *dbname*: the database name\n[Test and build Python package/test]   |         - *database*: the database name (only as keyword argument)\n[Test and build Python package/test]   |         - *user*: user name used to authenticate\n[Test and build Python package/test]   |         - *password*: password used to authenticate\n[Test and build Python package/test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Test and build Python package/test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *connection_factory* parameter a different class or connections\n[Test and build Python package/test]   |         factory can be specified. It should be a callable object taking a dsn\n[Test and build Python package/test]   |         argument.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Test and build Python package/test]   |         used by cursor().\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Test and build Python package/test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Any other keyword parameter will be passed to the underlying client\n[Test and build Python package/test]   |         library: the list of supported parameters depends on the library version.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         kwasync = {}\n[Test and build Python package/test]   |         if 'async' in kwargs:\n[Test and build Python package/test]   |             kwasync['async'] = kwargs.pop('async')\n[Test and build Python package/test]   |         if 'async_' in kwargs:\n[Test and build Python package/test]   |             kwasync['async_'] = kwargs.pop('async_')\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Test and build Python package/test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Test and build Python package/test]   | E       psycopg2.OperationalError: could not connect to server: Connection refused\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (127.0.0.1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | E       could not connect to server: Cannot assign requested address\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (::1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/psycopg2/__init__.py:122: OperationalError\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | The above exception was the direct cause of the following exception:\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | request = <SubRequest '_django_db_marker' for <Function test_no_membership_for_person_including_party>>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     @pytest.fixture(autouse=True)\n[Test and build Python package/test]   |     def _django_db_marker(request) -> None:\n[Test and build Python package/test]   |         \"\"\"Implement the django_db marker, internal to pytest-django.\"\"\"\n[Test and build Python package/test]   |         marker = request.node.get_closest_marker(\"django_db\")\n[Test and build Python package/test]   |         if marker:\n[Test and build Python package/test]   | >           request.getfixturevalue(\"_django_db_helper\")\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/pytest_django/plugin.py:465: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/pytest_django/fixtures.py:125: in django_db_setup\n[Test and build Python package/test]   |     **setup_databases_args\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/test/utils.py:174: in setup_databases\n[Test and build Python package/test]   |     serialize=connection.settings_dict.get('TEST', {}).get('SERIALIZE', True),\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/creation.py:58: in create_test_db\n[Test and build Python package/test]   |     self._create_test_db(verbosity, autoclobber, keepdb)\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/creation.py:168: in _create_test_db\n[Test and build Python package/test]   |     with self._nodb_connection.cursor() as cursor:\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:256: in cursor\n[Test and build Python package/test]   |     return self._cursor()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:233: in _cursor\n[Test and build Python package/test]   |     self.ensure_connection()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: in ensure_connection\n[Test and build Python package/test]   |     self.connect()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/utils.py:89: in __exit__\n[Test and build Python package/test]   |     raise dj_exc_value.with_traceback(traceback) from exc_value\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: in ensure_connection\n[Test and build Python package/test]   |     self.connect()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:195: in connect\n[Test and build Python package/test]   |     self.connection = self.get_new_connection(conn_params)\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/postgresql/base.py:178: in get_new_connection\n[Test and build Python package/test]   |     connection = Database.connect(**conn_params)\n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | dsn = 'user=test password=test host=localhost port=5432 dbname=test'\n[Test and build Python package/test]   | connection_factory = None, cursor_factory = None\n[Test and build Python package/test]   | kwargs = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | kwasync = {}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         Create a new database connection.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         The connection parameters can be specified as a string:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         or using a set of keyword arguments:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Or as a mix of both. The basic connection parameters are:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         - *dbname*: the database name\n[Test and build Python package/test]   |         - *database*: the database name (only as keyword argument)\n[Test and build Python package/test]   |         - *user*: user name used to authenticate\n[Test and build Python package/test]   |         - *password*: password used to authenticate\n[Test and build Python package/test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Test and build Python package/test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *connection_factory* parameter a different class or connections\n[Test and build Python package/test]   |         factory can be specified. It should be a callable object taking a dsn\n[Test and build Python package/test]   |         argument.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Test and build Python package/test]   |         used by cursor().\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Test and build Python package/test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Any other keyword parameter will be passed to the underlying client\n[Test and build Python package/test]   |         library: the list of supported parameters depends on the library version.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         kwasync = {}\n[Test and build Python package/test]   |         if 'async' in kwargs:\n[Test and build Python package/test]   |             kwasync['async'] = kwargs.pop('async')\n[Test and build Python package/test]   |         if 'async_' in kwargs:\n[Test and build Python package/test]   |             kwasync['async_'] = kwargs.pop('async_')\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Test and build Python package/test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Test and build Python package/test]   | E       django.db.utils.OperationalError: could not connect to server: Connection refused\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (127.0.0.1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | E       could not connect to server: Cannot assign requested address\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (::1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/psycopg2/__init__.py:122: OperationalError\n[Test and build Python package/test]   | ______________ ERROR at setup of test_multiple_orgs_of_same_class ______________\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def ensure_connection(self):\n[Test and build Python package/test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[Test and build Python package/test]   |         if self.connection is None:\n[Test and build Python package/test]   |             with self.wrap_database_errors:\n[Test and build Python package/test]   | >               self.connect()\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(self):\n[Test and build Python package/test]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[Test and build Python package/test]   |         # Check for invalid configurations.\n[Test and build Python package/test]   |         self.check_settings()\n[Test and build Python package/test]   |         # In case the previous connection was closed while in an atomic block\n[Test and build Python package/test]   |         self.in_atomic_block = False\n[Test and build Python package/test]   |         self.savepoint_ids = []\n[Test and build Python package/test]   |         self.needs_rollback = False\n[Test and build Python package/test]   |         # Reset parameters defining when to close the connection\n[Test and build Python package/test]   |         max_age = self.settings_dict['CONN_MAX_AGE']\n[Test and build Python package/test]   |         self.close_at = None if max_age is None else time.time() + max_age\n[Test and build Python package/test]   |         self.closed_in_transaction = False\n[Test and build Python package/test]   |         self.errors_occurred = False\n[Test and build Python package/test]   |         # Establish the connection\n[Test and build Python package/test]   |         conn_params = self.get_connection_params()\n[Test and build Python package/test]   | >       self.connection = self.get_new_connection(conn_params)\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:195: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | conn_params = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def get_new_connection(self, conn_params):\n[Test and build Python package/test]   | >       connection = Database.connect(**conn_params)\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/postgresql/base.py:178: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | dsn = 'user=test password=test host=localhost port=5432 dbname=test'\n[Test and build Python package/test]   | connection_factory = None, cursor_factory = None\n[Test and build Python package/test]   | kwargs = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | kwasync = {}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         Create a new database connection.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         The connection parameters can be specified as a string:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         or using a set of keyword arguments:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Or as a mix of both. The basic connection parameters are:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         - *dbname*: the database name\n[Test and build Python package/test]   |         - *database*: the database name (only as keyword argument)\n[Test and build Python package/test]   |         - *user*: user name used to authenticate\n[Test and build Python package/test]   |         - *password*: password used to authenticate\n[Test and build Python package/test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Test and build Python package/test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *connection_factory* parameter a different class or connections\n[Test and build Python package/test]   |         factory can be specified. It should be a callable object taking a dsn\n[Test and build Python package/test]   |         argument.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Test and build Python package/test]   |         used by cursor().\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Test and build Python package/test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Any other keyword parameter will be passed to the underlying client\n[Test and build Python package/test]   |         library: the list of supported parameters depends on the library version.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         kwasync = {}\n[Test and build Python package/test]   |         if 'async' in kwargs:\n[Test and build Python package/test]   |             kwasync['async'] = kwargs.pop('async')\n[Test and build Python package/test]   |         if 'async_' in kwargs:\n[Test and build Python package/test]   |             kwasync['async_'] = kwargs.pop('async_')\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Test and build Python package/test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Test and build Python package/test]   | E       psycopg2.OperationalError: could not connect to server: Connection refused\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (127.0.0.1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | E       could not connect to server: Cannot assign requested address\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (::1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/psycopg2/__init__.py:122: OperationalError\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | The above exception was the direct cause of the following exception:\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | request = <SubRequest '_django_db_marker' for <Function test_multiple_orgs_of_same_class>>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     @pytest.fixture(autouse=True)\n[Test and build Python package/test]   |     def _django_db_marker(request) -> None:\n[Test and build Python package/test]   |         \"\"\"Implement the django_db marker, internal to pytest-django.\"\"\"\n[Test and build Python package/test]   |         marker = request.node.get_closest_marker(\"django_db\")\n[Test and build Python package/test]   |         if marker:\n[Test and build Python package/test]   | >           request.getfixturevalue(\"_django_db_helper\")\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/pytest_django/plugin.py:465: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/pytest_django/fixtures.py:125: in django_db_setup\n[Test and build Python package/test]   |     **setup_databases_args\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/test/utils.py:174: in setup_databases\n[Test and build Python package/test]   |     serialize=connection.settings_dict.get('TEST', {}).get('SERIALIZE', True),\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/creation.py:58: in create_test_db\n[Test and build Python package/test]   |     self._create_test_db(verbosity, autoclobber, keepdb)\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/creation.py:168: in _create_test_db\n[Test and build Python package/test]   |     with self._nodb_connection.cursor() as cursor:\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:256: in cursor\n[Test and build Python package/test]   |     return self._cursor()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:233: in _cursor\n[Test and build Python package/test]   |     self.ensure_connection()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: in ensure_connection\n[Test and build Python package/test]   |     self.connect()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/utils.py:89: in __exit__\n[Test and build Python package/test]   |     raise dj_exc_value.with_traceback(traceback) from exc_value\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: in ensure_connection\n[Test and build Python package/test]   |     self.connect()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:195: in connect\n[Test and build Python package/test]   |     self.connection = self.get_new_connection(conn_params)\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/postgresql/base.py:178: in get_new_connection\n[Test and build Python package/test]   |     connection = Database.connect(**conn_params)\n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | dsn = 'user=test password=test host=localhost port=5432 dbname=test'\n[Test and build Python package/test]   | connection_factory = None, cursor_factory = None\n[Test and build Python package/test]   | kwargs = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | kwasync = {}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         Create a new database connection.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         The connection parameters can be specified as a string:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         or using a set of keyword arguments:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Or as a mix of both. The basic connection parameters are:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         - *dbname*: the database name\n[Test and build Python package/test]   |         - *database*: the database name (only as keyword argument)\n[Test and build Python package/test]   |         - *user*: user name used to authenticate\n[Test and build Python package/test]   |         - *password*: password used to authenticate\n[Test and build Python package/test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Test and build Python package/test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *connection_factory* parameter a different class or connections\n[Test and build Python package/test]   |         factory can be specified. It should be a callable object taking a dsn\n[Test and build Python package/test]   |         argument.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Test and build Python package/test]   |         used by cursor().\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Test and build Python package/test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Any other keyword parameter will be passed to the underlying client\n[Test and build Python package/test]   |         library: the list of supported parameters depends on the library version.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         kwasync = {}\n[Test and build Python package/test]   |         if 'async' in kwargs:\n[Test and build Python package/test]   |             kwasync['async'] = kwargs.pop('async')\n[Test and build Python package/test]   |         if 'async_' in kwargs:\n[Test and build Python package/test]   |             kwasync['async_'] = kwargs.pop('async_')\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Test and build Python package/test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Test and build Python package/test]   | E       django.db.utils.OperationalError: could not connect to server: Connection refused\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (127.0.0.1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | E       could not connect to server: Cannot assign requested address\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (::1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/psycopg2/__init__.py:122: OperationalError\n[Test and build Python package/test]   | _________________ ERROR at setup of test_multiple_posts_class __________________\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def ensure_connection(self):\n[Test and build Python package/test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[Test and build Python package/test]   |         if self.connection is None:\n[Test and build Python package/test]   |             with self.wrap_database_errors:\n[Test and build Python package/test]   | >               self.connect()\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(self):\n[Test and build Python package/test]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[Test and build Python package/test]   |         # Check for invalid configurations.\n[Test and build Python package/test]   |         self.check_settings()\n[Test and build Python package/test]   |         # In case the previous connection was closed while in an atomic block\n[Test and build Python package/test]   |         self.in_atomic_block = False\n[Test and build Python package/test]   |         self.savepoint_ids = []\n[Test and build Python package/test]   |         self.needs_rollback = False\n[Test and build Python package/test]   |         # Reset parameters defining when to close the connection\n[Test and build Python package/test]   |         max_age = self.settings_dict['CONN_MAX_AGE']\n[Test and build Python package/test]   |         self.close_at = None if max_age is None else time.time() + max_age\n[Test and build Python package/test]   |         self.closed_in_transaction = False\n[Test and build Python package/test]   |         self.errors_occurred = False\n[Test and build Python package/test]   |         # Establish the connection\n[Test and build Python package/test]   |         conn_params = self.get_connection_params()\n[Test and build Python package/test]   | >       self.connection = self.get_new_connection(conn_params)\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:195: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | conn_params = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def get_new_connection(self, conn_params):\n[Test and build Python package/test]   | >       connection = Database.connect(**conn_params)\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/postgresql/base.py:178: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | dsn = 'user=test password=test host=localhost port=5432 dbname=test'\n[Test and build Python package/test]   | connection_factory = None, cursor_factory = None\n[Test and build Python package/test]   | kwargs = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | kwasync = {}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         Create a new database connection.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         The connection parameters can be specified as a string:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         or using a set of keyword arguments:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Or as a mix of both. The basic connection parameters are:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         - *dbname*: the database name\n[Test and build Python package/test]   |         - *database*: the database name (only as keyword argument)\n[Test and build Python package/test]   |         - *user*: user name used to authenticate\n[Test and build Python package/test]   |         - *password*: password used to authenticate\n[Test and build Python package/test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Test and build Python package/test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *connection_factory* parameter a different class or connections\n[Test and build Python package/test]   |         factory can be specified. It should be a callable object taking a dsn\n[Test and build Python package/test]   |         argument.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Test and build Python package/test]   |         used by cursor().\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Test and build Python package/test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Any other keyword parameter will be passed to the underlying client\n[Test and build Python package/test]   |         library: the list of supported parameters depends on the library version.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         kwasync = {}\n[Test and build Python package/test]   |         if 'async' in kwargs:\n[Test and build Python package/test]   |             kwasync['async'] = kwargs.pop('async')\n[Test and build Python package/test]   |         if 'async_' in kwargs:\n[Test and build Python package/test]   |             kwasync['async_'] = kwargs.pop('async_')\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Test and build Python package/test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Test and build Python package/test]   | E       psycopg2.OperationalError: could not connect to server: Connection refused\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (127.0.0.1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | E       could not connect to server: Cannot assign requested address\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (::1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/psycopg2/__init__.py:122: OperationalError\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | The above exception was the direct cause of the following exception:\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | request = <SubRequest '_django_db_marker' for <Function test_multiple_posts_class>>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     @pytest.fixture(autouse=True)\n[Test and build Python package/test]   |     def _django_db_marker(request) -> None:\n[Test and build Python package/test]   |         \"\"\"Implement the django_db marker, internal to pytest-django.\"\"\"\n[Test and build Python package/test]   |         marker = request.node.get_closest_marker(\"django_db\")\n[Test and build Python package/test]   |         if marker:\n[Test and build Python package/test]   | >           request.getfixturevalue(\"_django_db_helper\")\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/pytest_django/plugin.py:465: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/pytest_django/fixtures.py:125: in django_db_setup\n[Test and build Python package/test]   |     **setup_databases_args\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/test/utils.py:174: in setup_databases\n[Test and build Python package/test]   |     serialize=connection.settings_dict.get('TEST', {}).get('SERIALIZE', True),\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/creation.py:58: in create_test_db\n[Test and build Python package/test]   |     self._create_test_db(verbosity, autoclobber, keepdb)\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/creation.py:168: in _create_test_db\n[Test and build Python package/test]   |     with self._nodb_connection.cursor() as cursor:\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:256: in cursor\n[Test and build Python package/test]   |     return self._cursor()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:233: in _cursor\n[Test and build Python package/test]   |     self.ensure_connection()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: in ensure_connection\n[Test and build Python package/test]   |     self.connect()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/utils.py:89: in __exit__\n[Test and build Python package/test]   |     raise dj_exc_value.with_traceback(traceback) from exc_value\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: in ensure_connection\n[Test and build Python package/test]   |     self.connect()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:195: in connect\n[Test and build Python package/test]   |     self.connection = self.get_new_connection(conn_params)\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/postgresql/base.py:178: in get_new_connection\n[Test and build Python package/test]   |     connection = Database.connect(**conn_params)\n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | dsn = 'user=test password=test host=localhost port=5432 dbname=test'\n[Test and build Python package/test]   | connection_factory = None, cursor_factory = None\n[Test and build Python package/test]   | kwargs = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | kwasync = {}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         Create a new database connection.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         The connection parameters can be specified as a string:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         or using a set of keyword arguments:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Or as a mix of both. The basic connection parameters are:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         - *dbname*: the database name\n[Test and build Python package/test]   |         - *database*: the database name (only as keyword argument)\n[Test and build Python package/test]   |         - *user*: user name used to authenticate\n[Test and build Python package/test]   |         - *password*: password used to authenticate\n[Test and build Python package/test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Test and build Python package/test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *connection_factory* parameter a different class or connections\n[Test and build Python package/test]   |         factory can be specified. It should be a callable object taking a dsn\n[Test and build Python package/test]   |         argument.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Test and build Python package/test]   |         used by cursor().\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Test and build Python package/test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Any other keyword parameter will be passed to the underlying client\n[Test and build Python package/test]   |         library: the list of supported parameters depends on the library version.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         kwasync = {}\n[Test and build Python package/test]   |         if 'async' in kwargs:\n[Test and build Python package/test]   |             kwasync['async'] = kwargs.pop('async')\n[Test and build Python package/test]   |         if 'async_' in kwargs:\n[Test and build Python package/test]   |             kwasync['async_'] = kwargs.pop('async_')\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Test and build Python package/test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Test and build Python package/test]   | E       django.db.utils.OperationalError: could not connect to server: Connection refused\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (127.0.0.1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | E       could not connect to server: Cannot assign requested address\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (::1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/psycopg2/__init__.py:122: OperationalError\n[Test and build Python package/test]   | ___________________ ERROR at setup of test_unmatched_person ____________________\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def ensure_connection(self):\n[Test and build Python package/test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[Test and build Python package/test]   |         if self.connection is None:\n[Test and build Python package/test]   |             with self.wrap_database_errors:\n[Test and build Python package/test]   | >               self.connect()\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(self):\n[Test and build Python package/test]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[Test and build Python package/test]   |         # Check for invalid configurations.\n[Test and build Python package/test]   |         self.check_settings()\n[Test and build Python package/test]   |         # In case the previous connection was closed while in an atomic block\n[Test and build Python package/test]   |         self.in_atomic_block = False\n[Test and build Python package/test]   |         self.savepoint_ids = []\n[Test and build Python package/test]   |         self.needs_rollback = False\n[Test and build Python package/test]   |         # Reset parameters defining when to close the connection\n[Test and build Python package/test]   |         max_age = self.settings_dict['CONN_MAX_AGE']\n[Test and build Python package/test]   |         self.close_at = None if max_age is None else time.time() + max_age\n[Test and build Python package/test]   |         self.closed_in_transaction = False\n[Test and build Python package/test]   |         self.errors_occurred = False\n[Test and build Python package/test]   |         # Establish the connection\n[Test and build Python package/test]   |         conn_params = self.get_connection_params()\n[Test and build Python package/test]   | >       self.connection = self.get_new_connection(conn_params)\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:195: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | conn_params = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def get_new_connection(self, conn_params):\n[Test and build Python package/test]   | >       connection = Database.connect(**conn_params)\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/postgresql/base.py:178: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | dsn = 'user=test password=test host=localhost port=5432 dbname=test'\n[Test and build Python package/test]   | connection_factory = None, cursor_factory = None\n[Test and build Python package/test]   | kwargs = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | kwasync = {}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         Create a new database connection.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         The connection parameters can be specified as a string:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         or using a set of keyword arguments:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Or as a mix of both. The basic connection parameters are:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         - *dbname*: the database name\n[Test and build Python package/test]   |         - *database*: the database name (only as keyword argument)\n[Test and build Python package/test]   |         - *user*: user name used to authenticate\n[Test and build Python package/test]   |         - *password*: password used to authenticate\n[Test and build Python package/test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Test and build Python package/test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *connection_factory* parameter a different class or connections\n[Test and build Python package/test]   |         factory can be specified. It should be a callable object taking a dsn\n[Test and build Python package/test]   |         argument.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Test and build Python package/test]   |         used by cursor().\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Test and build Python package/test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Any other keyword parameter will be passed to the underlying client\n[Test and build Python package/test]   |         library: the list of supported parameters depends on the library version.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         kwasync = {}\n[Test and build Python package/test]   |         if 'async' in kwargs:\n[Test and build Python package/test]   |             kwasync['async'] = kwargs.pop('async')\n[Test and build Python package/test]   |         if 'async_' in kwargs:\n[Test and build Python package/test]   |             kwasync['async_'] = kwargs.pop('async_')\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Test and build Python package/test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Test and build Python package/test]   | E       psycopg2.OperationalError: could not connect to server: Connection refused\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (127.0.0.1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | E       could not connect to server: Cannot assign requested address\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (::1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/psycopg2/__init__.py:122: OperationalError\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | The above exception was the direct cause of the following exception:\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | request = <SubRequest '_django_db_marker' for <Function test_unmatched_person>>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     @pytest.fixture(autouse=True)\n[Test and build Python package/test]   |     def _django_db_marker(request) -> None:\n[Test and build Python package/test]   |         \"\"\"Implement the django_db marker, internal to pytest-django.\"\"\"\n[Test and build Python package/test]   |         marker = request.node.get_closest_marker(\"django_db\")\n[Test and build Python package/test]   |         if marker:\n[Test and build Python package/test]   | >           request.getfixturevalue(\"_django_db_helper\")\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/pytest_django/plugin.py:465: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/pytest_django/fixtures.py:125: in django_db_setup\n[Test and build Python package/test]   |     **setup_databases_args\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/test/utils.py:174: in setup_databases\n[Test and build Python package/test]   |     serialize=connection.settings_dict.get('TEST', {}).get('SERIALIZE', True),\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/creation.py:58: in create_test_db\n[Test and build Python package/test]   |     self._create_test_db(verbosity, autoclobber, keepdb)\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/creation.py:168: in _create_test_db\n[Test and build Python package/test]   |     with self._nodb_connection.cursor() as cursor:\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:256: in cursor\n[Test and build Python package/test]   |     return self._cursor()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:233: in _cursor\n[Test and build Python package/test]   |     self.ensure_connection()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: in ensure_connection\n[Test and build Python package/test]   |     self.connect()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/utils.py:89: in __exit__\n[Test and build Python package/test]   |     raise dj_exc_value.with_traceback(traceback) from exc_value\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: in ensure_connection\n[Test and build Python package/test]   |     self.connect()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:195: in connect\n[Test and build Python package/test]   |     self.connection = self.get_new_connection(conn_params)\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/postgresql/base.py:178: in get_new_connection\n[Test and build Python package/test]   |     connection = Database.connect(**conn_params)\n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | dsn = 'user=test password=test host=localhost port=5432 dbname=test'\n[Test and build Python package/test]   | connection_factory = None, cursor_factory = None\n[Test and build Python package/test]   | kwargs = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | kwasync = {}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         Create a new database connection.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         The connection parameters can be specified as a string:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         or using a set of keyword arguments:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Or as a mix of both. The basic connection parameters are:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         - *dbname*: the database name\n[Test and build Python package/test]   |         - *database*: the database name (only as keyword argument)\n[Test and build Python package/test]   |         - *user*: user name used to authenticate\n[Test and build Python package/test]   |         - *password*: password used to authenticate\n[Test and build Python package/test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Test and build Python package/test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *connection_factory* parameter a different class or connections\n[Test and build Python package/test]   |         factory can be specified. It should be a callable object taking a dsn\n[Test and build Python package/test]   |         argument.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Test and build Python package/test]   |         used by cursor().\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Test and build Python package/test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Any other keyword parameter will be passed to the underlying client\n[Test and build Python package/test]   |         library: the list of supported parameters depends on the library version.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         kwasync = {}\n[Test and build Python package/test]   |         if 'async' in kwargs:\n[Test and build Python package/test]   |             kwasync['async'] = kwargs.pop('async')\n[Test and build Python package/test]   |         if 'async_' in kwargs:\n[Test and build Python package/test]   |             kwasync['async_'] = kwargs.pop('async_')\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Test and build Python package/test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Test and build Python package/test]   | E       django.db.utils.OperationalError: could not connect to server: Connection refused\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (127.0.0.1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | E       could not connect to server: Cannot assign requested address\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (::1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/psycopg2/__init__.py:122: OperationalError\n[Test and build Python package/test]   | ___________________ ERROR at setup of test_full_organization ___________________\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def ensure_connection(self):\n[Test and build Python package/test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[Test and build Python package/test]   |         if self.connection is None:\n[Test and build Python package/test]   |             with self.wrap_database_errors:\n[Test and build Python package/test]   | >               self.connect()\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(self):\n[Test and build Python package/test]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[Test and build Python package/test]   |         # Check for invalid configurations.\n[Test and build Python package/test]   |         self.check_settings()\n[Test and build Python package/test]   |         # In case the previous connection was closed while in an atomic block\n[Test and build Python package/test]   |         self.in_atomic_block = False\n[Test and build Python package/test]   |         self.savepoint_ids = []\n[Test and build Python package/test]   |         self.needs_rollback = False\n[Test and build Python package/test]   |         # Reset parameters defining when to close the connection\n[Test and build Python package/test]   |         max_age = self.settings_dict['CONN_MAX_AGE']\n[Test and build Python package/test]   |         self.close_at = None if max_age is None else time.time() + max_age\n[Test and build Python package/test]   |         self.closed_in_transaction = False\n[Test and build Python package/test]   |         self.errors_occurred = False\n[Test and build Python package/test]   |         # Establish the connection\n[Test and build Python package/test]   |         conn_params = self.get_connection_params()\n[Test and build Python package/test]   | >       self.connection = self.get_new_connection(conn_params)\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:195: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | conn_params = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def get_new_connection(self, conn_params):\n[Test and build Python package/test]   | >       connection = Database.connect(**conn_params)\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/postgresql/base.py:178: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | dsn = 'user=test password=test host=localhost port=5432 dbname=test'\n[Test and build Python package/test]   | connection_factory = None, cursor_factory = None\n[Test and build Python package/test]   | kwargs = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | kwasync = {}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         Create a new database connection.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         The connection parameters can be specified as a string:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         or using a set of keyword arguments:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Or as a mix of both. The basic connection parameters are:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         - *dbname*: the database name\n[Test and build Python package/test]   |         - *database*: the database name (only as keyword argument)\n[Test and build Python package/test]   |         - *user*: user name used to authenticate\n[Test and build Python package/test]   |         - *password*: password used to authenticate\n[Test and build Python package/test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Test and build Python package/test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *connection_factory* parameter a different class or connections\n[Test and build Python package/test]   |         factory can be specified. It should be a callable object taking a dsn\n[Test and build Python package/test]   |         argument.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Test and build Python package/test]   |         used by cursor().\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Test and build Python package/test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Any other keyword parameter will be passed to the underlying client\n[Test and build Python package/test]   |         library: the list of supported parameters depends on the library version.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         kwasync = {}\n[Test and build Python package/test]   |         if 'async' in kwargs:\n[Test and build Python package/test]   |             kwasync['async'] = kwargs.pop('async')\n[Test and build Python package/test]   |         if 'async_' in kwargs:\n[Test and build Python package/test]   |             kwasync['async_'] = kwargs.pop('async_')\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Test and build Python package/test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Test and build Python package/test]   | E       psycopg2.OperationalError: could not connect to server: Connection refused\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (127.0.0.1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | E       could not connect to server: Cannot assign requested address\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (::1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/psycopg2/__init__.py:122: OperationalError\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | The above exception was the direct cause of the following exception:\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | request = <SubRequest '_django_db_marker' for <Function test_full_organization>>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     @pytest.fixture(autouse=True)\n[Test and build Python package/test]   |     def _django_db_marker(request) -> None:\n[Test and build Python package/test]   |         \"\"\"Implement the django_db marker, internal to pytest-django.\"\"\"\n[Test and build Python package/test]   |         marker = request.node.get_closest_marker(\"django_db\")\n[Test and build Python package/test]   |         if marker:\n[Test and build Python package/test]   | >           request.getfixturevalue(\"_django_db_helper\")\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/pytest_django/plugin.py:465: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/pytest_django/fixtures.py:125: in django_db_setup\n[Test and build Python package/test]   |     **setup_databases_args\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/test/utils.py:174: in setup_databases\n[Test and build Python package/test]   |     serialize=connection.settings_dict.get('TEST', {}).get('SERIALIZE', True),\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/creation.py:58: in create_test_db\n[Test and build Python package/test]   |     self._create_test_db(verbosity, autoclobber, keepdb)\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/creation.py:168: in _create_test_db\n[Test and build Python package/test]   |     with self._nodb_connection.cursor() as cursor:\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:256: in cursor\n[Test and build Python package/test]   |     return self._cursor()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:233: in _cursor\n[Test and build Python package/test]   |     self.ensure_connection()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: in ensure_connection\n[Test and build Python package/test]   |     self.connect()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/utils.py:89: in __exit__\n[Test and build Python package/test]   |     raise dj_exc_value.with_traceback(traceback) from exc_value\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: in ensure_connection\n[Test and build Python package/test]   |     self.connect()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:195: in connect\n[Test and build Python package/test]   |     self.connection = self.get_new_connection(conn_params)\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/postgresql/base.py:178: in get_new_connection\n[Test and build Python package/test]   |     connection = Database.connect(**conn_params)\n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | dsn = 'user=test password=test host=localhost port=5432 dbname=test'\n[Test and build Python package/test]   | connection_factory = None, cursor_factory = None\n[Test and build Python package/test]   | kwargs = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | kwasync = {}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         Create a new database connection.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         The connection parameters can be specified as a string:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         or using a set of keyword arguments:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Or as a mix of both. The basic connection parameters are:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         - *dbname*: the database name\n[Test and build Python package/test]   |         - *database*: the database name (only as keyword argument)\n[Test and build Python package/test]   |         - *user*: user name used to authenticate\n[Test and build Python package/test]   |         - *password*: password used to authenticate\n[Test and build Python package/test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Test and build Python package/test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *connection_factory* parameter a different class or connections\n[Test and build Python package/test]   |         factory can be specified. It should be a callable object taking a dsn\n[Test and build Python package/test]   |         argument.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Test and build Python package/test]   |         used by cursor().\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Test and build Python package/test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Any other keyword parameter will be passed to the underlying client\n[Test and build Python package/test]   |         library: the list of supported parameters depends on the library version.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         kwasync = {}\n[Test and build Python package/test]   |         if 'async' in kwargs:\n[Test and build Python package/test]   |             kwasync['async'] = kwargs.pop('async')\n[Test and build Python package/test]   |         if 'async_' in kwargs:\n[Test and build Python package/test]   |             kwasync['async_'] = kwargs.pop('async_')\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Test and build Python package/test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Test and build Python package/test]   | E       django.db.utils.OperationalError: could not connect to server: Connection refused\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (127.0.0.1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | E       could not connect to server: Cannot assign requested address\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (::1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/psycopg2/__init__.py:122: OperationalError\n[Test and build Python package/test]   | __________ ERROR at setup of test_deduplication_similar_but_different __________\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def ensure_connection(self):\n[Test and build Python package/test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[Test and build Python package/test]   |         if self.connection is None:\n[Test and build Python package/test]   |             with self.wrap_database_errors:\n[Test and build Python package/test]   | >               self.connect()\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(self):\n[Test and build Python package/test]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[Test and build Python package/test]   |         # Check for invalid configurations.\n[Test and build Python package/test]   |         self.check_settings()\n[Test and build Python package/test]   |         # In case the previous connection was closed while in an atomic block\n[Test and build Python package/test]   |         self.in_atomic_block = False\n[Test and build Python package/test]   |         self.savepoint_ids = []\n[Test and build Python package/test]   |         self.needs_rollback = False\n[Test and build Python package/test]   |         # Reset parameters defining when to close the connection\n[Test and build Python package/test]   |         max_age = self.settings_dict['CONN_MAX_AGE']\n[Test and build Python package/test]   |         self.close_at = None if max_age is None else time.time() + max_age\n[Test and build Python package/test]   |         self.closed_in_transaction = False\n[Test and build Python package/test]   |         self.errors_occurred = False\n[Test and build Python package/test]   |         # Establish the connection\n[Test and build Python package/test]   |         conn_params = self.get_connection_params()\n[Test and build Python package/test]   | >       self.connection = self.get_new_connection(conn_params)\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:195: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | conn_params = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def get_new_connection(self, conn_params):\n[Test and build Python package/test]   | >       connection = Database.connect(**conn_params)\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/postgresql/base.py:178: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | dsn = 'user=test password=test host=localhost port=5432 dbname=test'\n[Test and build Python package/test]   | connection_factory = None, cursor_factory = None\n[Test and build Python package/test]   | kwargs = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | kwasync = {}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         Create a new database connection.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         The connection parameters can be specified as a string:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         or using a set of keyword arguments:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Or as a mix of both. The basic connection parameters are:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         - *dbname*: the database name\n[Test and build Python package/test]   |         - *database*: the database name (only as keyword argument)\n[Test and build Python package/test]   |         - *user*: user name used to authenticate\n[Test and build Python package/test]   |         - *password*: password used to authenticate\n[Test and build Python package/test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Test and build Python package/test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *connection_factory* parameter a different class or connections\n[Test and build Python package/test]   |         factory can be specified. It should be a callable object taking a dsn\n[Test and build Python package/test]   |         argument.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Test and build Python package/test]   |         used by cursor().\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Test and build Python package/test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Any other keyword parameter will be passed to the underlying client\n[Test and build Python package/test]   |         library: the list of supported parameters depends on the library version.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         kwasync = {}\n[Test and build Python package/test]   |         if 'async' in kwargs:\n[Test and build Python package/test]   |             kwasync['async'] = kwargs.pop('async')\n[Test and build Python package/test]   |         if 'async_' in kwargs:\n[Test and build Python package/test]   |             kwasync['async_'] = kwargs.pop('async_')\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Test and build Python package/test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Test and build Python package/test]   | E       psycopg2.OperationalError: could not connect to server: Connection refused\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (127.0.0.1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | E       could not connect to server: Cannot assign requested address\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (::1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/psycopg2/__init__.py:122: OperationalError\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | The above exception was the direct cause of the following exception:\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | request = <SubRequest '_django_db_marker' for <Function test_deduplication_similar_but_different>>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     @pytest.fixture(autouse=True)\n[Test and build Python package/test]   |     def _django_db_marker(request) -> None:\n[Test and build Python package/test]   |         \"\"\"Implement the django_db marker, internal to pytest-django.\"\"\"\n[Test and build Python package/test]   |         marker = request.node.get_closest_marker(\"django_db\")\n[Test and build Python package/test]   |         if marker:\n[Test and build Python package/test]   | >           request.getfixturevalue(\"_django_db_helper\")\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/pytest_django/plugin.py:465: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/pytest_django/fixtures.py:125: in django_db_setup\n[Test and build Python package/test]   |     **setup_databases_args\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/test/utils.py:174: in setup_databases\n[Test and build Python package/test]   |     serialize=connection.settings_dict.get('TEST', {}).get('SERIALIZE', True),\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/creation.py:58: in create_test_db\n[Test and build Python package/test]   |     self._create_test_db(verbosity, autoclobber, keepdb)\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/creation.py:168: in _create_test_db\n[Test and build Python package/test]   |     with self._nodb_connection.cursor() as cursor:\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:256: in cursor\n[Test and build Python package/test]   |     return self._cursor()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:233: in _cursor\n[Test and build Python package/test]   |     self.ensure_connection()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: in ensure_connection\n[Test and build Python package/test]   |     self.connect()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/utils.py:89: in __exit__\n[Test and build Python package/test]   |     raise dj_exc_value.with_traceback(traceback) from exc_value\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: in ensure_connection\n[Test and build Python package/test]   |     self.connect()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:195: in connect\n[Test and build Python package/test]   |     self.connection = self.get_new_connection(conn_params)\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/postgresql/base.py:178: in get_new_connection\n[Test and build Python package/test]   |     connection = Database.connect(**conn_params)\n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | dsn = 'user=test password=test host=localhost port=5432 dbname=test'\n[Test and build Python package/test]   | connection_factory = None, cursor_factory = None\n[Test and build Python package/test]   | kwargs = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | kwasync = {}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         Create a new database connection.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         The connection parameters can be specified as a string:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         or using a set of keyword arguments:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Or as a mix of both. The basic connection parameters are:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         - *dbname*: the database name\n[Test and build Python package/test]   |         - *database*: the database name (only as keyword argument)\n[Test and build Python package/test]   |         - *user*: user name used to authenticate\n[Test and build Python package/test]   |         - *password*: password used to authenticate\n[Test and build Python package/test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Test and build Python package/test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *connection_factory* parameter a different class or connections\n[Test and build Python package/test]   |         factory can be specified. It should be a callable object taking a dsn\n[Test and build Python package/test]   |         argument.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Test and build Python package/test]   |         used by cursor().\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Test and build Python package/test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Any other keyword parameter will be passed to the underlying client\n[Test and build Python package/test]   |         library: the list of supported parameters depends on the library version.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         kwasync = {}\n[Test and build Python package/test]   |         if 'async' in kwargs:\n[Test and build Python package/test]   |             kwasync['async'] = kwargs.pop('async')\n[Test and build Python package/test]   |         if 'async_' in kwargs:\n[Test and build Python package/test]   |             kwasync['async_'] = kwargs.pop('async_')\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Test and build Python package/test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Test and build Python package/test]   | E       django.db.utils.OperationalError: could not connect to server: Connection refused\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (127.0.0.1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | E       could not connect to server: Cannot assign requested address\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (::1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/psycopg2/__init__.py:122: OperationalError\n[Test and build Python package/test]   | ____________ ERROR at setup of test_deduplication_other_name_exists ____________\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def ensure_connection(self):\n[Test and build Python package/test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[Test and build Python package/test]   |         if self.connection is None:\n[Test and build Python package/test]   |             with self.wrap_database_errors:\n[Test and build Python package/test]   | >               self.connect()\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(self):\n[Test and build Python package/test]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[Test and build Python package/test]   |         # Check for invalid configurations.\n[Test and build Python package/test]   |         self.check_settings()\n[Test and build Python package/test]   |         # In case the previous connection was closed while in an atomic block\n[Test and build Python package/test]   |         self.in_atomic_block = False\n[Test and build Python package/test]   |         self.savepoint_ids = []\n[Test and build Python package/test]   |         self.needs_rollback = False\n[Test and build Python package/test]   |         # Reset parameters defining when to close the connection\n[Test and build Python package/test]   |         max_age = self.settings_dict['CONN_MAX_AGE']\n[Test and build Python package/test]   |         self.close_at = None if max_age is None else time.time() + max_age\n[Test and build Python package/test]   |         self.closed_in_transaction = False\n[Test and build Python package/test]   |         self.errors_occurred = False\n[Test and build Python package/test]   |         # Establish the connection\n[Test and build Python package/test]   |         conn_params = self.get_connection_params()\n[Test and build Python package/test]   | >       self.connection = self.get_new_connection(conn_params)\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:195: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | conn_params = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def get_new_connection(self, conn_params):\n[Test and build Python package/test]   | >       connection = Database.connect(**conn_params)\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/postgresql/base.py:178: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | dsn = 'user=test password=test host=localhost port=5432 dbname=test'\n[Test and build Python package/test]   | connection_factory = None, cursor_factory = None\n[Test and build Python package/test]   | kwargs = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | kwasync = {}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         Create a new database connection.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         The connection parameters can be specified as a string:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         or using a set of keyword arguments:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Or as a mix of both. The basic connection parameters are:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         - *dbname*: the database name\n[Test and build Python package/test]   |         - *database*: the database name (only as keyword argument)\n[Test and build Python package/test]   |         - *user*: user name used to authenticate\n[Test and build Python package/test]   |         - *password*: password used to authenticate\n[Test and build Python package/test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Test and build Python package/test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *connection_factory* parameter a different class or connections\n[Test and build Python package/test]   |         factory can be specified. It should be a callable object taking a dsn\n[Test and build Python package/test]   |         argument.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Test and build Python package/test]   |         used by cursor().\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Test and build Python package/test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Any other keyword parameter will be passed to the underlying client\n[Test and build Python package/test]   |         library: the list of supported parameters depends on the library version.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         kwasync = {}\n[Test and build Python package/test]   |         if 'async' in kwargs:\n[Test and build Python package/test]   |             kwasync['async'] = kwargs.pop('async')\n[Test and build Python package/test]   |         if 'async_' in kwargs:\n[Test and build Python package/test]   |             kwasync['async_'] = kwargs.pop('async_')\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Test and build Python package/test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Test and build Python package/test]   | E       psycopg2.OperationalError: could not connect to server: Connection refused\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (127.0.0.1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | E       could not connect to server: Cannot assign requested address\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (::1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/psycopg2/__init__.py:122: OperationalError\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | The above exception was the direct cause of the following exception:\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | request = <SubRequest '_django_db_marker' for <Function test_deduplication_other_name_exists>>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     @pytest.fixture(autouse=True)\n[Test and build Python package/test]   |     def _django_db_marker(request) -> None:\n[Test and build Python package/test]   |         \"\"\"Implement the django_db marker, internal to pytest-django.\"\"\"\n[Test and build Python package/test]   |         marker = request.node.get_closest_marker(\"django_db\")\n[Test and build Python package/test]   |         if marker:\n[Test and build Python package/test]   | >           request.getfixturevalue(\"_django_db_helper\")\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/pytest_django/plugin.py:465: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/pytest_django/fixtures.py:125: in django_db_setup\n[Test and build Python package/test]   |     **setup_databases_args\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/test/utils.py:174: in setup_databases\n[Test and build Python package/test]   |     serialize=connection.settings_dict.get('TEST', {}).get('SERIALIZE', True),\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/creation.py:58: in create_test_db\n[Test and build Python package/test]   |     self._create_test_db(verbosity, autoclobber, keepdb)\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/creation.py:168: in _create_test_db\n[Test and build Python package/test]   |     with self._nodb_connection.cursor() as cursor:\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:256: in cursor\n[Test and build Python package/test]   |     return self._cursor()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:233: in _cursor\n[Test and build Python package/test]   |     self.ensure_connection()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: in ensure_connection\n[Test and build Python package/test]   |     self.connect()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/utils.py:89: in __exit__\n[Test and build Python package/test]   |     raise dj_exc_value.with_traceback(traceback) from exc_value\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: in ensure_connection\n[Test and build Python package/test]   |     self.connect()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:195: in connect\n[Test and build Python package/test]   |     self.connection = self.get_new_connection(conn_params)\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/postgresql/base.py:178: in get_new_connection\n[Test and build Python package/test]   |     connection = Database.connect(**conn_params)\n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | dsn = 'user=test password=test host=localhost port=5432 dbname=test'\n[Test and build Python package/test]   | connection_factory = None, cursor_factory = None\n[Test and build Python package/test]   | kwargs = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | kwasync = {}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         Create a new database connection.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         The connection parameters can be specified as a string:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         or using a set of keyword arguments:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Or as a mix of both. The basic connection parameters are:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         - *dbname*: the database name\n[Test and build Python package/test]   |         - *database*: the database name (only as keyword argument)\n[Test and build Python package/test]   |         - *user*: user name used to authenticate\n[Test and build Python package/test]   |         - *password*: password used to authenticate\n[Test and build Python package/test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Test and build Python package/test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *connection_factory* parameter a different class or connections\n[Test and build Python package/test]   |         factory can be specified. It should be a callable object taking a dsn\n[Test and build Python package/test]   |         argument.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Test and build Python package/test]   |         used by cursor().\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Test and build Python package/test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Any other keyword parameter will be passed to the underlying client\n[Test and build Python package/test]   |         library: the list of supported parameters depends on the library version.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         kwasync = {}\n[Test and build Python package/test]   |         if 'async' in kwargs:\n[Test and build Python package/test]   |             kwasync['async'] = kwargs.pop('async')\n[Test and build Python package/test]   |         if 'async_' in kwargs:\n[Test and build Python package/test]   |             kwasync['async_'] = kwargs.pop('async_')\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Test and build Python package/test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Test and build Python package/test]   | E       django.db.utils.OperationalError: could not connect to server: Connection refused\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (127.0.0.1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | E       could not connect to server: Cannot assign requested address\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (::1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/psycopg2/__init__.py:122: OperationalError\n[Test and build Python package/test]   | ___________ ERROR at setup of test_deduplication_other_name_overlaps ___________\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def ensure_connection(self):\n[Test and build Python package/test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[Test and build Python package/test]   |         if self.connection is None:\n[Test and build Python package/test]   |             with self.wrap_database_errors:\n[Test and build Python package/test]   | >               self.connect()\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(self):\n[Test and build Python package/test]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[Test and build Python package/test]   |         # Check for invalid configurations.\n[Test and build Python package/test]   |         self.check_settings()\n[Test and build Python package/test]   |         # In case the previous connection was closed while in an atomic block\n[Test and build Python package/test]   |         self.in_atomic_block = False\n[Test and build Python package/test]   |         self.savepoint_ids = []\n[Test and build Python package/test]   |         self.needs_rollback = False\n[Test and build Python package/test]   |         # Reset parameters defining when to close the connection\n[Test and build Python package/test]   |         max_age = self.settings_dict['CONN_MAX_AGE']\n[Test and build Python package/test]   |         self.close_at = None if max_age is None else time.time() + max_age\n[Test and build Python package/test]   |         self.closed_in_transaction = False\n[Test and build Python package/test]   |         self.errors_occurred = False\n[Test and build Python package/test]   |         # Establish the connection\n[Test and build Python package/test]   |         conn_params = self.get_connection_params()\n[Test and build Python package/test]   | >       self.connection = self.get_new_connection(conn_params)\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:195: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | conn_params = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def get_new_connection(self, conn_params):\n[Test and build Python package/test]   | >       connection = Database.connect(**conn_params)\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/postgresql/base.py:178: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | dsn = 'user=test password=test host=localhost port=5432 dbname=test'\n[Test and build Python package/test]   | connection_factory = None, cursor_factory = None\n[Test and build Python package/test]   | kwargs = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | kwasync = {}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         Create a new database connection.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         The connection parameters can be specified as a string:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         or using a set of keyword arguments:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Or as a mix of both. The basic connection parameters are:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         - *dbname*: the database name\n[Test and build Python package/test]   |         - *database*: the database name (only as keyword argument)\n[Test and build Python package/test]   |         - *user*: user name used to authenticate\n[Test and build Python package/test]   |         - *password*: password used to authenticate\n[Test and build Python package/test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Test and build Python package/test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *connection_factory* parameter a different class or connections\n[Test and build Python package/test]   |         factory can be specified. It should be a callable object taking a dsn\n[Test and build Python package/test]   |         argument.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Test and build Python package/test]   |         used by cursor().\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Test and build Python package/test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Any other keyword parameter will be passed to the underlying client\n[Test and build Python package/test]   |         library: the list of supported parameters depends on the library version.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         kwasync = {}\n[Test and build Python package/test]   |         if 'async' in kwargs:\n[Test and build Python package/test]   |             kwasync['async'] = kwargs.pop('async')\n[Test and build Python package/test]   |         if 'async_' in kwargs:\n[Test and build Python package/test]   |             kwasync['async_'] = kwargs.pop('async_')\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Test and build Python package/test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Test and build Python package/test]   | E       psycopg2.OperationalError: could not connect to server: Connection refused\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (127.0.0.1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | E       could not connect to server: Cannot assign requested address\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (::1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/psycopg2/__init__.py:122: OperationalError\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | The above exception was the direct cause of the following exception:\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | request = <SubRequest '_django_db_marker' for <Function test_deduplication_other_name_overlaps>>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     @pytest.fixture(autouse=True)\n[Test and build Python package/test]   |     def _django_db_marker(request) -> None:\n[Test and build Python package/test]   |         \"\"\"Implement the django_db marker, internal to pytest-django.\"\"\"\n[Test and build Python package/test]   |         marker = request.node.get_closest_marker(\"django_db\")\n[Test and build Python package/test]   |         if marker:\n[Test and build Python package/test]   | >           request.getfixturevalue(\"_django_db_helper\")\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/pytest_django/plugin.py:465: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/pytest_django/fixtures.py:125: in django_db_setup\n[Test and build Python package/test]   |     **setup_databases_args\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/test/utils.py:174: in setup_databases\n[Test and build Python package/test]   |     serialize=connection.settings_dict.get('TEST', {}).get('SERIALIZE', True),\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/creation.py:58: in create_test_db\n[Test and build Python package/test]   |     self._create_test_db(verbosity, autoclobber, keepdb)\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/creation.py:168: in _create_test_db\n[Test and build Python package/test]   |     with self._nodb_connection.cursor() as cursor:\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:256: in cursor\n[Test and build Python package/test]   |     return self._cursor()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:233: in _cursor\n[Test and build Python package/test]   |     self.ensure_connection()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: in ensure_connection\n[Test and build Python package/test]   |     self.connect()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/utils.py:89: in __exit__\n[Test and build Python package/test]   |     raise dj_exc_value.with_traceback(traceback) from exc_value\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: in ensure_connection\n[Test and build Python package/test]   |     self.connect()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:195: in connect\n[Test and build Python package/test]   |     self.connection = self.get_new_connection(conn_params)\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/postgresql/base.py:178: in get_new_connection\n[Test and build Python package/test]   |     connection = Database.connect(**conn_params)\n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | dsn = 'user=test password=test host=localhost port=5432 dbname=test'\n[Test and build Python package/test]   | connection_factory = None, cursor_factory = None\n[Test and build Python package/test]   | kwargs = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | kwasync = {}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         Create a new database connection.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         The connection parameters can be specified as a string:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         or using a set of keyword arguments:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Or as a mix of both. The basic connection parameters are:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         - *dbname*: the database name\n[Test and build Python package/test]   |         - *database*: the database name (only as keyword argument)\n[Test and build Python package/test]   |         - *user*: user name used to authenticate\n[Test and build Python package/test]   |         - *password*: password used to authenticate\n[Test and build Python package/test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Test and build Python package/test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *connection_factory* parameter a different class or connections\n[Test and build Python package/test]   |         factory can be specified. It should be a callable object taking a dsn\n[Test and build Python package/test]   |         argument.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Test and build Python package/test]   |         used by cursor().\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Test and build Python package/test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Any other keyword parameter will be passed to the underlying client\n[Test and build Python package/test]   |         library: the list of supported parameters depends on the library version.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         kwasync = {}\n[Test and build Python package/test]   |         if 'async' in kwargs:\n[Test and build Python package/test]   |             kwasync['async'] = kwargs.pop('async')\n[Test and build Python package/test]   |         if 'async_' in kwargs:\n[Test and build Python package/test]   |             kwasync['async_'] = kwargs.pop('async_')\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Test and build Python package/test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Test and build Python package/test]   | E       django.db.utils.OperationalError: could not connect to server: Connection refused\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (127.0.0.1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | E       could not connect to server: Cannot assign requested address\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (::1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/psycopg2/__init__.py:122: OperationalError\n[Test and build Python package/test]   | _____________ ERROR at setup of test_deduplication_error_overlaps ______________\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def ensure_connection(self):\n[Test and build Python package/test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[Test and build Python package/test]   |         if self.connection is None:\n[Test and build Python package/test]   |             with self.wrap_database_errors:\n[Test and build Python package/test]   | >               self.connect()\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(self):\n[Test and build Python package/test]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[Test and build Python package/test]   |         # Check for invalid configurations.\n[Test and build Python package/test]   |         self.check_settings()\n[Test and build Python package/test]   |         # In case the previous connection was closed while in an atomic block\n[Test and build Python package/test]   |         self.in_atomic_block = False\n[Test and build Python package/test]   |         self.savepoint_ids = []\n[Test and build Python package/test]   |         self.needs_rollback = False\n[Test and build Python package/test]   |         # Reset parameters defining when to close the connection\n[Test and build Python package/test]   |         max_age = self.settings_dict['CONN_MAX_AGE']\n[Test and build Python package/test]   |         self.close_at = None if max_age is None else time.time() + max_age\n[Test and build Python package/test]   |         self.closed_in_transaction = False\n[Test and build Python package/test]   |         self.errors_occurred = False\n[Test and build Python package/test]   |         # Establish the connection\n[Test and build Python package/test]   |         conn_params = self.get_connection_params()\n[Test and build Python package/test]   | >       self.connection = self.get_new_connection(conn_params)\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:195: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | conn_params = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def get_new_connection(self, conn_params):\n[Test and build Python package/test]   | >       connection = Database.connect(**conn_params)\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/postgresql/base.py:178: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | dsn = 'user=test password=test host=localhost port=5432 dbname=test'\n[Test and build Python package/test]   | connection_factory = None, cursor_factory = None\n[Test and build Python package/test]   | kwargs = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | kwasync = {}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         Create a new database connection.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         The connection parameters can be specified as a string:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         or using a set of keyword arguments:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Or as a mix of both. The basic connection parameters are:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         - *dbname*: the database name\n[Test and build Python package/test]   |         - *database*: the database name (only as keyword argument)\n[Test and build Python package/test]   |         - *user*: user name used to authenticate\n[Test and build Python package/test]   |         - *password*: password used to authenticate\n[Test and build Python package/test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Test and build Python package/test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *connection_factory* parameter a different class or connections\n[Test and build Python package/test]   |         factory can be specified. It should be a callable object taking a dsn\n[Test and build Python package/test]   |         argument.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Test and build Python package/test]   |         used by cursor().\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Test and build Python package/test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Any other keyword parameter will be passed to the underlying client\n[Test and build Python package/test]   |         library: the list of supported parameters depends on the library version.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         kwasync = {}\n[Test and build Python package/test]   |         if 'async' in kwargs:\n[Test and build Python package/test]   |             kwasync['async'] = kwargs.pop('async')\n[Test and build Python package/test]   |         if 'async_' in kwargs:\n[Test and build Python package/test]   |             kwasync['async_'] = kwargs.pop('async_')\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Test and build Python package/test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Test and build Python package/test]   | E       psycopg2.OperationalError: could not connect to server: Connection refused\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (127.0.0.1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | E       could not connect to server: Cannot assign requested address\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (::1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/psycopg2/__init__.py:122: OperationalError\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | The above exception was the direct cause of the following exception:\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | request = <SubRequest '_django_db_marker' for <Function test_deduplication_error_overlaps>>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     @pytest.fixture(autouse=True)\n[Test and build Python package/test]   |     def _django_db_marker(request) -> None:\n[Test and build Python package/test]   |         \"\"\"Implement the django_db marker, internal to pytest-django.\"\"\"\n[Test and build Python package/test]   |         marker = request.node.get_closest_marker(\"django_db\")\n[Test and build Python package/test]   |         if marker:\n[Test and build Python package/test]   | >           request.getfixturevalue(\"_django_db_helper\")\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/pytest_django/plugin.py:465: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/pytest_django/fixtures.py:125: in django_db_setup\n[Test and build Python package/test]   |     **setup_databases_args\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/test/utils.py:174: in setup_databases\n[Test and build Python package/test]   |     serialize=connection.settings_dict.get('TEST', {}).get('SERIALIZE', True),\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/creation.py:58: in create_test_db\n[Test and build Python package/test]   |     self._create_test_db(verbosity, autoclobber, keepdb)\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/creation.py:168: in _create_test_db\n[Test and build Python package/test]   |     with self._nodb_connection.cursor() as cursor:\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:256: in cursor\n[Test and build Python package/test]   |     return self._cursor()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:233: in _cursor\n[Test and build Python package/test]   |     self.ensure_connection()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: in ensure_connection\n[Test and build Python package/test]   |     self.connect()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/utils.py:89: in __exit__\n[Test and build Python package/test]   |     raise dj_exc_value.with_traceback(traceback) from exc_value\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: in ensure_connection\n[Test and build Python package/test]   |     self.connect()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:195: in connect\n[Test and build Python package/test]   |     self.connection = self.get_new_connection(conn_params)\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/postgresql/base.py:178: in get_new_connection\n[Test and build Python package/test]   |     connection = Database.connect(**conn_params)\n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | dsn = 'user=test password=test host=localhost port=5432 dbname=test'\n[Test and build Python package/test]   | connection_factory = None, cursor_factory = None\n[Test and build Python package/test]   | kwargs = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | kwasync = {}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         Create a new database connection.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         The connection parameters can be specified as a string:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         or using a set of keyword arguments:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Or as a mix of both. The basic connection parameters are:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         - *dbname*: the database name\n[Test and build Python package/test]   |         - *database*: the database name (only as keyword argument)\n[Test and build Python package/test]   |         - *user*: user name used to authenticate\n[Test and build Python package/test]   |         - *password*: password used to authenticate\n[Test and build Python package/test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Test and build Python package/test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *connection_factory* parameter a different class or connections\n[Test and build Python package/test]   |         factory can be specified. It should be a callable object taking a dsn\n[Test and build Python package/test]   |         argument.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Test and build Python package/test]   |         used by cursor().\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Test and build Python package/test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Any other keyword parameter will be passed to the underlying client\n[Test and build Python package/test]   |         library: the list of supported parameters depends on the library version.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         kwasync = {}\n[Test and build Python package/test]   |         if 'async' in kwargs:\n[Test and build Python package/test]   |             kwasync['async'] = kwargs.pop('async')\n[Test and build Python package/test]   |         if 'async_' in kwargs:\n[Test and build Python package/test]   |             kwasync['async_'] = kwargs.pop('async_')\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Test and build Python package/test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Test and build Python package/test]   | E       django.db.utils.OperationalError: could not connect to server: Connection refused\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (127.0.0.1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | E       could not connect to server: Cannot assign requested address\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (::1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/psycopg2/__init__.py:122: OperationalError\n[Test and build Python package/test]   | _______ ERROR at setup of test_deduplication_overlap_name_distinct_juris _______\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def ensure_connection(self):\n[Test and build Python package/test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[Test and build Python package/test]   |         if self.connection is None:\n[Test and build Python package/test]   |             with self.wrap_database_errors:\n[Test and build Python package/test]   | >               self.connect()\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(self):\n[Test and build Python package/test]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[Test and build Python package/test]   |         # Check for invalid configurations.\n[Test and build Python package/test]   |         self.check_settings()\n[Test and build Python package/test]   |         # In case the previous connection was closed while in an atomic block\n[Test and build Python package/test]   |         self.in_atomic_block = False\n[Test and build Python package/test]   |         self.savepoint_ids = []\n[Test and build Python package/test]   |         self.needs_rollback = False\n[Test and build Python package/test]   |         # Reset parameters defining when to close the connection\n[Test and build Python package/test]   |         max_age = self.settings_dict['CONN_MAX_AGE']\n[Test and build Python package/test]   |         self.close_at = None if max_age is None else time.time() + max_age\n[Test and build Python package/test]   |         self.closed_in_transaction = False\n[Test and build Python package/test]   |         self.errors_occurred = False\n[Test and build Python package/test]   |         # Establish the connection\n[Test and build Python package/test]   |         conn_params = self.get_connection_params()\n[Test and build Python package/test]   | >       self.connection = self.get_new_connection(conn_params)\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:195: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | conn_params = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def get_new_connection(self, conn_params):\n[Test and build Python package/test]   | >       connection = Database.connect(**conn_params)\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/postgresql/base.py:178: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | dsn = 'user=test password=test host=localhost port=5432 dbname=test'\n[Test and build Python package/test]   | connection_factory = None, cursor_factory = None\n[Test and build Python package/test]   | kwargs = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | kwasync = {}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         Create a new database connection.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         The connection parameters can be specified as a string:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         or using a set of keyword arguments:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Or as a mix of both. The basic connection parameters are:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         - *dbname*: the database name\n[Test and build Python package/test]   |         - *database*: the database name (only as keyword argument)\n[Test and build Python package/test]   |         - *user*: user name used to authenticate\n[Test and build Python package/test]   |         - *password*: password used to authenticate\n[Test and build Python package/test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Test and build Python package/test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *connection_factory* parameter a different class or connections\n[Test and build Python package/test]   |         factory can be specified. It should be a callable object taking a dsn\n[Test and build Python package/test]   |         argument.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Test and build Python package/test]   |         used by cursor().\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Test and build Python package/test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Any other keyword parameter will be passed to the underlying client\n[Test and build Python package/test]   |         library: the list of supported parameters depends on the library version.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         kwasync = {}\n[Test and build Python package/test]   |         if 'async' in kwargs:\n[Test and build Python package/test]   |             kwasync['async'] = kwargs.pop('async')\n[Test and build Python package/test]   |         if 'async_' in kwargs:\n[Test and build Python package/test]   |             kwasync['async_'] = kwargs.pop('async_')\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Test and build Python package/test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Test and build Python package/test]   | E       psycopg2.OperationalError: could not connect to server: Connection refused\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (127.0.0.1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | E       could not connect to server: Cannot assign requested address\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (::1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/psycopg2/__init__.py:122: OperationalError\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | The above exception was the direct cause of the following exception:\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | request = <SubRequest '_django_db_marker' for <Function test_deduplication_overlap_name_distinct_juris>>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     @pytest.fixture(autouse=True)\n[Test and build Python package/test]   |     def _django_db_marker(request) -> None:\n[Test and build Python package/test]   |         \"\"\"Implement the django_db marker, internal to pytest-django.\"\"\"\n[Test and build Python package/test]   |         marker = request.node.get_closest_marker(\"django_db\")\n[Test and build Python package/test]   |         if marker:\n[Test and build Python package/test]   | >           request.getfixturevalue(\"_django_db_helper\")\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/pytest_django/plugin.py:465: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/pytest_django/fixtures.py:125: in django_db_setup\n[Test and build Python package/test]   |     **setup_databases_args\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/test/utils.py:174: in setup_databases\n[Test and build Python package/test]   |     serialize=connection.settings_dict.get('TEST', {}).get('SERIALIZE', True),\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/creation.py:58: in create_test_db\n[Test and build Python package/test]   |     self._create_test_db(verbosity, autoclobber, keepdb)\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/creation.py:168: in _create_test_db\n[Test and build Python package/test]   |     with self._nodb_connection.cursor() as cursor:\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:256: in cursor\n[Test and build Python package/test]   |     return self._cursor()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:233: in _cursor\n[Test and build Python package/test]   |     self.ensure_connection()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: in ensure_connection\n[Test and build Python package/test]   |     self.connect()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/utils.py:89: in __exit__\n[Test and build Python package/test]   |     raise dj_exc_value.with_traceback(traceback) from exc_value\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: in ensure_connection\n[Test and build Python package/test]   |     self.connect()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:195: in connect\n[Test and build Python package/test]   |     self.connection = self.get_new_connection(conn_params)\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/postgresql/base.py:178: in get_new_connection\n[Test and build Python package/test]   |     connection = Database.connect(**conn_params)\n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | dsn = 'user=test password=test host=localhost port=5432 dbname=test'\n[Test and build Python package/test]   | connection_factory = None, cursor_factory = None\n[Test and build Python package/test]   | kwargs = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | kwasync = {}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         Create a new database connection.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         The connection parameters can be specified as a string:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         or using a set of keyword arguments:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Or as a mix of both. The basic connection parameters are:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         - *dbname*: the database name\n[Test and build Python package/test]   |         - *database*: the database name (only as keyword argument)\n[Test and build Python package/test]   |         - *user*: user name used to authenticate\n[Test and build Python package/test]   |         - *password*: password used to authenticate\n[Test and build Python package/test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Test and build Python package/test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *connection_factory* parameter a different class or connections\n[Test and build Python package/test]   |         factory can be specified. It should be a callable object taking a dsn\n[Test and build Python package/test]   |         argument.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Test and build Python package/test]   |         used by cursor().\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Test and build Python package/test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Any other keyword parameter will be passed to the underlying client\n[Test and build Python package/test]   |         library: the list of supported parameters depends on the library version.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         kwasync = {}\n[Test and build Python package/test]   |         if 'async' in kwargs:\n[Test and build Python package/test]   |             kwasync['async'] = kwargs.pop('async')\n[Test and build Python package/test]   |         if 'async_' in kwargs:\n[Test and build Python package/test]   |             kwasync['async_'] = kwargs.pop('async_')\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Test and build Python package/test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Test and build Python package/test]   | E       django.db.utils.OperationalError: could not connect to server: Connection refused\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (127.0.0.1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | E       could not connect to server: Cannot assign requested address\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (::1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/psycopg2/__init__.py:122: OperationalError\n[Test and build Python package/test]   | _________________ ERROR at setup of test_deduplication_parties _________________\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def ensure_connection(self):\n[Test and build Python package/test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[Test and build Python package/test]   |         if self.connection is None:\n[Test and build Python package/test]   |             with self.wrap_database_errors:\n[Test and build Python package/test]   | >               self.connect()\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(self):\n[Test and build Python package/test]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[Test and build Python package/test]   |         # Check for invalid configurations.\n[Test and build Python package/test]   |         self.check_settings()\n[Test and build Python package/test]   |         # In case the previous connection was closed while in an atomic block\n[Test and build Python package/test]   |         self.in_atomic_block = False\n[Test and build Python package/test]   |         self.savepoint_ids = []\n[Test and build Python package/test]   |         self.needs_rollback = False\n[Test and build Python package/test]   |         # Reset parameters defining when to close the connection\n[Test and build Python package/test]   |         max_age = self.settings_dict['CONN_MAX_AGE']\n[Test and build Python package/test]   |         self.close_at = None if max_age is None else time.time() + max_age\n[Test and build Python package/test]   |         self.closed_in_transaction = False\n[Test and build Python package/test]   |         self.errors_occurred = False\n[Test and build Python package/test]   |         # Establish the connection\n[Test and build Python package/test]   |         conn_params = self.get_connection_params()\n[Test and build Python package/test]   | >       self.connection = self.get_new_connection(conn_params)\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:195: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | conn_params = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def get_new_connection(self, conn_params):\n[Test and build Python package/test]   | >       connection = Database.connect(**conn_params)\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/postgresql/base.py:178: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | dsn = 'user=test password=test host=localhost port=5432 dbname=test'\n[Test and build Python package/test]   | connection_factory = None, cursor_factory = None\n[Test and build Python package/test]   | kwargs = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | kwasync = {}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         Create a new database connection.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         The connection parameters can be specified as a string:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         or using a set of keyword arguments:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Or as a mix of both. The basic connection parameters are:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         - *dbname*: the database name\n[Test and build Python package/test]   |         - *database*: the database name (only as keyword argument)\n[Test and build Python package/test]   |         - *user*: user name used to authenticate\n[Test and build Python package/test]   |         - *password*: password used to authenticate\n[Test and build Python package/test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Test and build Python package/test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *connection_factory* parameter a different class or connections\n[Test and build Python package/test]   |         factory can be specified. It should be a callable object taking a dsn\n[Test and build Python package/test]   |         argument.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Test and build Python package/test]   |         used by cursor().\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Test and build Python package/test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Any other keyword parameter will be passed to the underlying client\n[Test and build Python package/test]   |         library: the list of supported parameters depends on the library version.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         kwasync = {}\n[Test and build Python package/test]   |         if 'async' in kwargs:\n[Test and build Python package/test]   |             kwasync['async'] = kwargs.pop('async')\n[Test and build Python package/test]   |         if 'async_' in kwargs:\n[Test and build Python package/test]   |             kwasync['async_'] = kwargs.pop('async_')\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Test and build Python package/test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Test and build Python package/test]   | E       psycopg2.OperationalError: could not connect to server: Connection refused\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (127.0.0.1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | E       could not connect to server: Cannot assign requested address\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (::1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/psycopg2/__init__.py:122: OperationalError\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | The above exception was the direct cause of the following exception:\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | request = <SubRequest '_django_db_marker' for <Function test_deduplication_parties>>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     @pytest.fixture(autouse=True)\n[Test and build Python package/test]   |     def _django_db_marker(request) -> None:\n[Test and build Python package/test]   |         \"\"\"Implement the django_db marker, internal to pytest-django.\"\"\"\n[Test and build Python package/test]   |         marker = request.node.get_closest_marker(\"django_db\")\n[Test and build Python package/test]   |         if marker:\n[Test and build Python package/test]   | >           request.getfixturevalue(\"_django_db_helper\")\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/pytest_django/plugin.py:465: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/pytest_django/fixtures.py:125: in django_db_setup\n[Test and build Python package/test]   |     **setup_databases_args\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/test/utils.py:174: in setup_databases\n[Test and build Python package/test]   |     serialize=connection.settings_dict.get('TEST', {}).get('SERIALIZE', True),\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/creation.py:58: in create_test_db\n[Test and build Python package/test]   |     self._create_test_db(verbosity, autoclobber, keepdb)\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/creation.py:168: in _create_test_db\n[Test and build Python package/test]   |     with self._nodb_connection.cursor() as cursor:\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:256: in cursor\n[Test and build Python package/test]   |     return self._cursor()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:233: in _cursor\n[Test and build Python package/test]   |     self.ensure_connection()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: in ensure_connection\n[Test and build Python package/test]   |     self.connect()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/utils.py:89: in __exit__\n[Test and build Python package/test]   |     raise dj_exc_value.with_traceback(traceback) from exc_value\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: in ensure_connection\n[Test and build Python package/test]   |     self.connect()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:195: in connect\n[Test and build Python package/test]   |     self.connection = self.get_new_connection(conn_params)\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/postgresql/base.py:178: in get_new_connection\n[Test and build Python package/test]   |     connection = Database.connect(**conn_params)\n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | dsn = 'user=test password=test host=localhost port=5432 dbname=test'\n[Test and build Python package/test]   | connection_factory = None, cursor_factory = None\n[Test and build Python package/test]   | kwargs = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | kwasync = {}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         Create a new database connection.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         The connection parameters can be specified as a string:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         or using a set of keyword arguments:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Or as a mix of both. The basic connection parameters are:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         - *dbname*: the database name\n[Test and build Python package/test]   |         - *database*: the database name (only as keyword argument)\n[Test and build Python package/test]   |         - *user*: user name used to authenticate\n[Test and build Python package/test]   |         - *password*: password used to authenticate\n[Test and build Python package/test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Test and build Python package/test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *connection_factory* parameter a different class or connections\n[Test and build Python package/test]   |         factory can be specified. It should be a callable object taking a dsn\n[Test and build Python package/test]   |         argument.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Test and build Python package/test]   |         used by cursor().\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Test and build Python package/test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Any other keyword parameter will be passed to the underlying client\n[Test and build Python package/test]   |         library: the list of supported parameters depends on the library version.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         kwasync = {}\n[Test and build Python package/test]   |         if 'async' in kwargs:\n[Test and build Python package/test]   |             kwasync['async'] = kwargs.pop('async')\n[Test and build Python package/test]   |         if 'async_' in kwargs:\n[Test and build Python package/test]   |             kwasync['async_'] = kwargs.pop('async_')\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Test and build Python package/test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Test and build Python package/test]   | E       django.db.utils.OperationalError: could not connect to server: Connection refused\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (127.0.0.1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | E       could not connect to server: Cannot assign requested address\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (::1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/psycopg2/__init__.py:122: OperationalError\n[Test and build Python package/test]   | ___________ ERROR at setup of test_deduplication_prevents_identical ____________\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def ensure_connection(self):\n[Test and build Python package/test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[Test and build Python package/test]   |         if self.connection is None:\n[Test and build Python package/test]   |             with self.wrap_database_errors:\n[Test and build Python package/test]   | >               self.connect()\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(self):\n[Test and build Python package/test]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[Test and build Python package/test]   |         # Check for invalid configurations.\n[Test and build Python package/test]   |         self.check_settings()\n[Test and build Python package/test]   |         # In case the previous connection was closed while in an atomic block\n[Test and build Python package/test]   |         self.in_atomic_block = False\n[Test and build Python package/test]   |         self.savepoint_ids = []\n[Test and build Python package/test]   |         self.needs_rollback = False\n[Test and build Python package/test]   |         # Reset parameters defining when to close the connection\n[Test and build Python package/test]   |         max_age = self.settings_dict['CONN_MAX_AGE']\n[Test and build Python package/test]   |         self.close_at = None if max_age is None else time.time() + max_age\n[Test and build Python package/test]   |         self.closed_in_transaction = False\n[Test and build Python package/test]   |         self.errors_occurred = False\n[Test and build Python package/test]   |         # Establish the connection\n[Test and build Python package/test]   |         conn_params = self.get_connection_params()\n[Test and build Python package/test]   | >       self.connection = self.get_new_connection(conn_params)\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:195: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | conn_params = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def get_new_connection(self, conn_params):\n[Test and build Python package/test]   | >       connection = Database.connect(**conn_params)\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/postgresql/base.py:178: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | dsn = 'user=test password=test host=localhost port=5432 dbname=test'\n[Test and build Python package/test]   | connection_factory = None, cursor_factory = None\n[Test and build Python package/test]   | kwargs = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | kwasync = {}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         Create a new database connection.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         The connection parameters can be specified as a string:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         or using a set of keyword arguments:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Or as a mix of both. The basic connection parameters are:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         - *dbname*: the database name\n[Test and build Python package/test]   |         - *database*: the database name (only as keyword argument)\n[Test and build Python package/test]   |         - *user*: user name used to authenticate\n[Test and build Python package/test]   |         - *password*: password used to authenticate\n[Test and build Python package/test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Test and build Python package/test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *connection_factory* parameter a different class or connections\n[Test and build Python package/test]   |         factory can be specified. It should be a callable object taking a dsn\n[Test and build Python package/test]   |         argument.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Test and build Python package/test]   |         used by cursor().\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Test and build Python package/test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Any other keyword parameter will be passed to the underlying client\n[Test and build Python package/test]   |         library: the list of supported parameters depends on the library version.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         kwasync = {}\n[Test and build Python package/test]   |         if 'async' in kwargs:\n[Test and build Python package/test]   |             kwasync['async'] = kwargs.pop('async')\n[Test and build Python package/test]   |         if 'async_' in kwargs:\n[Test and build Python package/test]   |             kwasync['async_'] = kwargs.pop('async_')\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Test and build Python package/test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Test and build Python package/test]   | E       psycopg2.OperationalError: could not connect to server: Connection refused\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (127.0.0.1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | E       could not connect to server: Cannot assign requested address\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (::1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/psycopg2/__init__.py:122: OperationalError\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | The above exception was the direct cause of the following exception:\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | request = <SubRequest '_django_db_marker' for <Function test_deduplication_prevents_identical>>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     @pytest.fixture(autouse=True)\n[Test and build Python package/test]   |     def _django_db_marker(request) -> None:\n[Test and build Python package/test]   |         \"\"\"Implement the django_db marker, internal to pytest-django.\"\"\"\n[Test and build Python package/test]   |         marker = request.node.get_closest_marker(\"django_db\")\n[Test and build Python package/test]   |         if marker:\n[Test and build Python package/test]   | >           request.getfixturevalue(\"_django_db_helper\")\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/pytest_django/plugin.py:465: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/pytest_django/fixtures.py:125: in django_db_setup\n[Test and build Python package/test]   |     **setup_databases_args\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/test/utils.py:174: in setup_databases\n[Test and build Python package/test]   |     serialize=connection.settings_dict.get('TEST', {}).get('SERIALIZE', True),\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/creation.py:58: in create_test_db\n[Test and build Python package/test]   |     self._create_test_db(verbosity, autoclobber, keepdb)\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/creation.py:168: in _create_test_db\n[Test and build Python package/test]   |     with self._nodb_connection.cursor() as cursor:\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:256: in cursor\n[Test and build Python package/test]   |     return self._cursor()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:233: in _cursor\n[Test and build Python package/test]   |     self.ensure_connection()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: in ensure_connection\n[Test and build Python package/test]   |     self.connect()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/utils.py:89: in __exit__\n[Test and build Python package/test]   |     raise dj_exc_value.with_traceback(traceback) from exc_value\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: in ensure_connection\n[Test and build Python package/test]   |     self.connect()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:195: in connect\n[Test and build Python package/test]   |     self.connection = self.get_new_connection(conn_params)\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/postgresql/base.py:178: in get_new_connection\n[Test and build Python package/test]   |     connection = Database.connect(**conn_params)\n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | dsn = 'user=test password=test host=localhost port=5432 dbname=test'\n[Test and build Python package/test]   | connection_factory = None, cursor_factory = None\n[Test and build Python package/test]   | kwargs = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | kwasync = {}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         Create a new database connection.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         The connection parameters can be specified as a string:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         or using a set of keyword arguments:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Or as a mix of both. The basic connection parameters are:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         - *dbname*: the database name\n[Test and build Python package/test]   |         - *database*: the database name (only as keyword argument)\n[Test and build Python package/test]   |         - *user*: user name used to authenticate\n[Test and build Python package/test]   |         - *password*: password used to authenticate\n[Test and build Python package/test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Test and build Python package/test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *connection_factory* parameter a different class or connections\n[Test and build Python package/test]   |         factory can be specified. It should be a callable object taking a dsn\n[Test and build Python package/test]   |         argument.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Test and build Python package/test]   |         used by cursor().\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Test and build Python package/test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Any other keyword parameter will be passed to the underlying client\n[Test and build Python package/test]   |         library: the list of supported parameters depends on the library version.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         kwasync = {}\n[Test and build Python package/test]   |         if 'async' in kwargs:\n[Test and build Python package/test]   |             kwasync['async'] = kwargs.pop('async')\n[Test and build Python package/test]   |         if 'async_' in kwargs:\n[Test and build Python package/test]   |             kwasync['async_'] = kwargs.pop('async_')\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Test and build Python package/test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Test and build Python package/test]   | E       django.db.utils.OperationalError: could not connect to server: Connection refused\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (127.0.0.1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | E       could not connect to server: Cannot assign requested address\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (::1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/psycopg2/__init__.py:122: OperationalError\n[Test and build Python package/test]   | ______________________ ERROR at setup of test_pseudo_ids _______________________\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def ensure_connection(self):\n[Test and build Python package/test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[Test and build Python package/test]   |         if self.connection is None:\n[Test and build Python package/test]   |             with self.wrap_database_errors:\n[Test and build Python package/test]   | >               self.connect()\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(self):\n[Test and build Python package/test]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[Test and build Python package/test]   |         # Check for invalid configurations.\n[Test and build Python package/test]   |         self.check_settings()\n[Test and build Python package/test]   |         # In case the previous connection was closed while in an atomic block\n[Test and build Python package/test]   |         self.in_atomic_block = False\n[Test and build Python package/test]   |         self.savepoint_ids = []\n[Test and build Python package/test]   |         self.needs_rollback = False\n[Test and build Python package/test]   |         # Reset parameters defining when to close the connection\n[Test and build Python package/test]   |         max_age = self.settings_dict['CONN_MAX_AGE']\n[Test and build Python package/test]   |         self.close_at = None if max_age is None else time.time() + max_age\n[Test and build Python package/test]   |         self.closed_in_transaction = False\n[Test and build Python package/test]   |         self.errors_occurred = False\n[Test and build Python package/test]   |         # Establish the connection\n[Test and build Python package/test]   |         conn_params = self.get_connection_params()\n[Test and build Python package/test]   | >       self.connection = self.get_new_connection(conn_params)\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:195: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | conn_params = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def get_new_connection(self, conn_params):\n[Test and build Python package/test]   | >       connection = Database.connect(**conn_params)\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/postgresql/base.py:178: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | dsn = 'user=test password=test host=localhost port=5432 dbname=test'\n[Test and build Python package/test]   | connection_factory = None, cursor_factory = None\n[Test and build Python package/test]   | kwargs = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | kwasync = {}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         Create a new database connection.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         The connection parameters can be specified as a string:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         or using a set of keyword arguments:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Or as a mix of both. The basic connection parameters are:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         - *dbname*: the database name\n[Test and build Python package/test]   |         - *database*: the database name (only as keyword argument)\n[Test and build Python package/test]   |         - *user*: user name used to authenticate\n[Test and build Python package/test]   |         - *password*: password used to authenticate\n[Test and build Python package/test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Test and build Python package/test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *connection_factory* parameter a different class or connections\n[Test and build Python package/test]   |         factory can be specified. It should be a callable object taking a dsn\n[Test and build Python package/test]   |         argument.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Test and build Python package/test]   |         used by cursor().\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Test and build Python package/test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Any other keyword parameter will be passed to the underlying client\n[Test and build Python package/test]   |         library: the list of supported parameters depends on the library version.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         kwasync = {}\n[Test and build Python package/test]   |         if 'async' in kwargs:\n[Test and build Python package/test]   |             kwasync['async'] = kwargs.pop('async')\n[Test and build Python package/test]   |         if 'async_' in kwargs:\n[Test and build Python package/test]   |             kwasync['async_'] = kwargs.pop('async_')\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Test and build Python package/test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Test and build Python package/test]   | E       psycopg2.OperationalError: could not connect to server: Connection refused\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (127.0.0.1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | E       could not connect to server: Cannot assign requested address\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (::1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/psycopg2/__init__.py:122: OperationalError\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | The above exception was the direct cause of the following exception:\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | request = <SubRequest '_django_db_marker' for <Function test_pseudo_ids>>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     @pytest.fixture(autouse=True)\n[Test and build Python package/test]   |     def _django_db_marker(request) -> None:\n[Test and build Python package/test]   |         \"\"\"Implement the django_db marker, internal to pytest-django.\"\"\"\n[Test and build Python package/test]   |         marker = request.node.get_closest_marker(\"django_db\")\n[Test and build Python package/test]   |         if marker:\n[Test and build Python package/test]   | >           request.getfixturevalue(\"_django_db_helper\")\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/pytest_django/plugin.py:465: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/pytest_django/fixtures.py:125: in django_db_setup\n[Test and build Python package/test]   |     **setup_databases_args\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/test/utils.py:174: in setup_databases\n[Test and build Python package/test]   |     serialize=connection.settings_dict.get('TEST', {}).get('SERIALIZE', True),\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/creation.py:58: in create_test_db\n[Test and build Python package/test]   |     self._create_test_db(verbosity, autoclobber, keepdb)\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/creation.py:168: in _create_test_db\n[Test and build Python package/test]   |     with self._nodb_connection.cursor() as cursor:\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:256: in cursor\n[Test and build Python package/test]   |     return self._cursor()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:233: in _cursor\n[Test and build Python package/test]   |     self.ensure_connection()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: in ensure_connection\n[Test and build Python package/test]   |     self.connect()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/utils.py:89: in __exit__\n[Test and build Python package/test]   |     raise dj_exc_value.with_traceback(traceback) from exc_value\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: in ensure_connection\n[Test and build Python package/test]   |     self.connect()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:195: in connect\n[Test and build Python package/test]   |     self.connection = self.get_new_connection(conn_params)\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/postgresql/base.py:178: in get_new_connection\n[Test and build Python package/test]   |     connection = Database.connect(**conn_params)\n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | dsn = 'user=test password=test host=localhost port=5432 dbname=test'\n[Test and build Python package/test]   | connection_factory = None, cursor_factory = None\n[Test and build Python package/test]   | kwargs = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | kwasync = {}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         Create a new database connection.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         The connection parameters can be specified as a string:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         or using a set of keyword arguments:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Or as a mix of both. The basic connection parameters are:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         - *dbname*: the database name\n[Test and build Python package/test]   |         - *database*: the database name (only as keyword argument)\n[Test and build Python package/test]   |         - *user*: user name used to authenticate\n[Test and build Python package/test]   |         - *password*: password used to authenticate\n[Test and build Python package/test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Test and build Python package/test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *connection_factory* parameter a different class or connections\n[Test and build Python package/test]   |         factory can be specified. It should be a callable object taking a dsn\n[Test and build Python package/test]   |         argument.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Test and build Python package/test]   |         used by cursor().\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Test and build Python package/test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Any other keyword parameter will be passed to the underlying client\n[Test and build Python package/test]   |         library: the list of supported parameters depends on the library version.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         kwasync = {}\n[Test and build Python package/test]   |         if 'async' in kwargs:\n[Test and build Python package/test]   |             kwasync['async'] = kwargs.pop('async')\n[Test and build Python package/test]   |         if 'async_' in kwargs:\n[Test and build Python package/test]   |             kwasync['async_'] = kwargs.pop('async_')\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Test and build Python package/test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Test and build Python package/test]   | E       django.db.utils.OperationalError: could not connect to server: Connection refused\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (127.0.0.1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | E       could not connect to server: Cannot assign requested address\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (::1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/psycopg2/__init__.py:122: OperationalError\n[Test and build Python package/test]   | _________________ ERROR at setup of test_parent_id_resolution __________________\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def ensure_connection(self):\n[Test and build Python package/test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[Test and build Python package/test]   |         if self.connection is None:\n[Test and build Python package/test]   |             with self.wrap_database_errors:\n[Test and build Python package/test]   | >               self.connect()\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(self):\n[Test and build Python package/test]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[Test and build Python package/test]   |         # Check for invalid configurations.\n[Test and build Python package/test]   |         self.check_settings()\n[Test and build Python package/test]   |         # In case the previous connection was closed while in an atomic block\n[Test and build Python package/test]   |         self.in_atomic_block = False\n[Test and build Python package/test]   |         self.savepoint_ids = []\n[Test and build Python package/test]   |         self.needs_rollback = False\n[Test and build Python package/test]   |         # Reset parameters defining when to close the connection\n[Test and build Python package/test]   |         max_age = self.settings_dict['CONN_MAX_AGE']\n[Test and build Python package/test]   |         self.close_at = None if max_age is None else time.time() + max_age\n[Test and build Python package/test]   |         self.closed_in_transaction = False\n[Test and build Python package/test]   |         self.errors_occurred = False\n[Test and build Python package/test]   |         # Establish the connection\n[Test and build Python package/test]   |         conn_params = self.get_connection_params()\n[Test and build Python package/test]   | >       self.connection = self.get_new_connection(conn_params)\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:195: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | conn_params = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def get_new_connection(self, conn_params):\n[Test and build Python package/test]   | >       connection = Database.connect(**conn_params)\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/postgresql/base.py:178: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | dsn = 'user=test password=test host=localhost port=5432 dbname=test'\n[Test and build Python package/test]   | connection_factory = None, cursor_factory = None\n[Test and build Python package/test]   | kwargs = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | kwasync = {}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         Create a new database connection.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         The connection parameters can be specified as a string:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         or using a set of keyword arguments:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Or as a mix of both. The basic connection parameters are:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         - *dbname*: the database name\n[Test and build Python package/test]   |         - *database*: the database name (only as keyword argument)\n[Test and build Python package/test]   |         - *user*: user name used to authenticate\n[Test and build Python package/test]   |         - *password*: password used to authenticate\n[Test and build Python package/test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Test and build Python package/test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *connection_factory* parameter a different class or connections\n[Test and build Python package/test]   |         factory can be specified. It should be a callable object taking a dsn\n[Test and build Python package/test]   |         argument.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Test and build Python package/test]   |         used by cursor().\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Test and build Python package/test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Any other keyword parameter will be passed to the underlying client\n[Test and build Python package/test]   |         library: the list of supported parameters depends on the library version.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         kwasync = {}\n[Test and build Python package/test]   |         if 'async' in kwargs:\n[Test and build Python package/test]   |             kwasync['async'] = kwargs.pop('async')\n[Test and build Python package/test]   |         if 'async_' in kwargs:\n[Test and build Python package/test]   |             kwasync['async_'] = kwargs.pop('async_')\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Test and build Python package/test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Test and build Python package/test]   | E       psycopg2.OperationalError: could not connect to server: Connection refused\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (127.0.0.1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | E       could not connect to server: Cannot assign requested address\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (::1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/psycopg2/__init__.py:122: OperationalError\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | The above exception was the direct cause of the following exception:\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | request = <SubRequest '_django_db_marker' for <Function test_parent_id_resolution>>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     @pytest.fixture(autouse=True)\n[Test and build Python package/test]   |     def _django_db_marker(request) -> None:\n[Test and build Python package/test]   |         \"\"\"Implement the django_db marker, internal to pytest-django.\"\"\"\n[Test and build Python package/test]   |         marker = request.node.get_closest_marker(\"django_db\")\n[Test and build Python package/test]   |         if marker:\n[Test and build Python package/test]   | >           request.getfixturevalue(\"_django_db_helper\")\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/pytest_django/plugin.py:465: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/pytest_django/fixtures.py:125: in django_db_setup\n[Test and build Python package/test]   |     **setup_databases_args\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/test/utils.py:174: in setup_databases\n[Test and build Python package/test]   |     serialize=connection.settings_dict.get('TEST', {}).get('SERIALIZE', True),\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/creation.py:58: in create_test_db\n[Test and build Python package/test]   |     self._create_test_db(verbosity, autoclobber, keepdb)\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/creation.py:168: in _create_test_db\n[Test and build Python package/test]   |     with self._nodb_connection.cursor() as cursor:\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:256: in cursor\n[Test and build Python package/test]   |     return self._cursor()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:233: in _cursor\n[Test and build Python package/test]   |     self.ensure_connection()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: in ensure_connection\n[Test and build Python package/test]   |     self.connect()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/utils.py:89: in __exit__\n[Test and build Python package/test]   |     raise dj_exc_value.with_traceback(traceback) from exc_value\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: in ensure_connection\n[Test and build Python package/test]   |     self.connect()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:195: in connect\n[Test and build Python package/test]   |     self.connection = self.get_new_connection(conn_params)\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/postgresql/base.py:178: in get_new_connection\n[Test and build Python package/test]   |     connection = Database.connect(**conn_params)\n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | dsn = 'user=test password=test host=localhost port=5432 dbname=test'\n[Test and build Python package/test]   | connection_factory = None, cursor_factory = None\n[Test and build Python package/test]   | kwargs = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | kwasync = {}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         Create a new database connection.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         The connection parameters can be specified as a string:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         or using a set of keyword arguments:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Or as a mix of both. The basic connection parameters are:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         - *dbname*: the database name\n[Test and build Python package/test]   |         - *database*: the database name (only as keyword argument)\n[Test and build Python package/test]   |         - *user*: user name used to authenticate\n[Test and build Python package/test]   |         - *password*: password used to authenticate\n[Test and build Python package/test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Test and build Python package/test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *connection_factory* parameter a different class or connections\n[Test and build Python package/test]   |         factory can be specified. It should be a callable object taking a dsn\n[Test and build Python package/test]   |         argument.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Test and build Python package/test]   |         used by cursor().\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Test and build Python package/test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Any other keyword parameter will be passed to the underlying client\n[Test and build Python package/test]   |         library: the list of supported parameters depends on the library version.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         kwasync = {}\n[Test and build Python package/test]   |         if 'async' in kwargs:\n[Test and build Python package/test]   |             kwasync['async'] = kwargs.pop('async')\n[Test and build Python package/test]   |         if 'async_' in kwargs:\n[Test and build Python package/test]   |             kwasync['async_'] = kwargs.pop('async_')\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Test and build Python package/test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Test and build Python package/test]   | E       django.db.utils.OperationalError: could not connect to server: Connection refused\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (127.0.0.1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | E       could not connect to server: Cannot assign requested address\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (::1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/psycopg2/__init__.py:122: OperationalError\n[Test and build Python package/test]   | ______________ ERROR at setup of test_pseudo_parent_id_resolution ______________\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def ensure_connection(self):\n[Test and build Python package/test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[Test and build Python package/test]   |         if self.connection is None:\n[Test and build Python package/test]   |             with self.wrap_database_errors:\n[Test and build Python package/test]   | >               self.connect()\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(self):\n[Test and build Python package/test]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[Test and build Python package/test]   |         # Check for invalid configurations.\n[Test and build Python package/test]   |         self.check_settings()\n[Test and build Python package/test]   |         # In case the previous connection was closed while in an atomic block\n[Test and build Python package/test]   |         self.in_atomic_block = False\n[Test and build Python package/test]   |         self.savepoint_ids = []\n[Test and build Python package/test]   |         self.needs_rollback = False\n[Test and build Python package/test]   |         # Reset parameters defining when to close the connection\n[Test and build Python package/test]   |         max_age = self.settings_dict['CONN_MAX_AGE']\n[Test and build Python package/test]   |         self.close_at = None if max_age is None else time.time() + max_age\n[Test and build Python package/test]   |         self.closed_in_transaction = False\n[Test and build Python package/test]   |         self.errors_occurred = False\n[Test and build Python package/test]   |         # Establish the connection\n[Test and build Python package/test]   |         conn_params = self.get_connection_params()\n[Test and build Python package/test]   | >       self.connection = self.get_new_connection(conn_params)\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:195: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | conn_params = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def get_new_connection(self, conn_params):\n[Test and build Python package/test]   | >       connection = Database.connect(**conn_params)\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/postgresql/base.py:178: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | dsn = 'user=test password=test host=localhost port=5432 dbname=test'\n[Test and build Python package/test]   | connection_factory = None, cursor_factory = None\n[Test and build Python package/test]   | kwargs = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | kwasync = {}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         Create a new database connection.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         The connection parameters can be specified as a string:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         or using a set of keyword arguments:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Or as a mix of both. The basic connection parameters are:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         - *dbname*: the database name\n[Test and build Python package/test]   |         - *database*: the database name (only as keyword argument)\n[Test and build Python package/test]   |         - *user*: user name used to authenticate\n[Test and build Python package/test]   |         - *password*: password used to authenticate\n[Test and build Python package/test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Test and build Python package/test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *connection_factory* parameter a different class or connections\n[Test and build Python package/test]   |         factory can be specified. It should be a callable object taking a dsn\n[Test and build Python package/test]   |         argument.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Test and build Python package/test]   |         used by cursor().\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Test and build Python package/test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Any other keyword parameter will be passed to the underlying client\n[Test and build Python package/test]   |         library: the list of supported parameters depends on the library version.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         kwasync = {}\n[Test and build Python package/test]   |         if 'async' in kwargs:\n[Test and build Python package/test]   |             kwasync['async'] = kwargs.pop('async')\n[Test and build Python package/test]   |         if 'async_' in kwargs:\n[Test and build Python package/test]   |             kwasync['async_'] = kwargs.pop('async_')\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Test and build Python package/test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Test and build Python package/test]   | E       psycopg2.OperationalError: could not connect to server: Connection refused\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (127.0.0.1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | E       could not connect to server: Cannot assign requested address\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (::1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/psycopg2/__init__.py:122: OperationalError\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | The above exception was the direct cause of the following exception:\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | request = <SubRequest '_django_db_marker' for <Function test_pseudo_parent_id_resolution>>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     @pytest.fixture(autouse=True)\n[Test and build Python package/test]   |     def _django_db_marker(request) -> None:\n[Test and build Python package/test]   |         \"\"\"Implement the django_db marker, internal to pytest-django.\"\"\"\n[Test and build Python package/test]   |         marker = request.node.get_closest_marker(\"django_db\")\n[Test and build Python package/test]   |         if marker:\n[Test and build Python package/test]   | >           request.getfixturevalue(\"_django_db_helper\")\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/pytest_django/plugin.py:465: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/pytest_django/fixtures.py:125: in django_db_setup\n[Test and build Python package/test]   |     **setup_databases_args\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/test/utils.py:174: in setup_databases\n[Test and build Python package/test]   |     serialize=connection.settings_dict.get('TEST', {}).get('SERIALIZE', True),\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/creation.py:58: in create_test_db\n[Test and build Python package/test]   |     self._create_test_db(verbosity, autoclobber, keepdb)\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/creation.py:168: in _create_test_db\n[Test and build Python package/test]   |     with self._nodb_connection.cursor() as cursor:\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:256: in cursor\n[Test and build Python package/test]   |     return self._cursor()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:233: in _cursor\n[Test and build Python package/test]   |     self.ensure_connection()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: in ensure_connection\n[Test and build Python package/test]   |     self.connect()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/utils.py:89: in __exit__\n[Test and build Python package/test]   |     raise dj_exc_value.with_traceback(traceback) from exc_value\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: in ensure_connection\n[Test and build Python package/test]   |     self.connect()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:195: in connect\n[Test and build Python package/test]   |     self.connection = self.get_new_connection(conn_params)\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/postgresql/base.py:178: in get_new_connection\n[Test and build Python package/test]   |     connection = Database.connect(**conn_params)\n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | dsn = 'user=test password=test host=localhost port=5432 dbname=test'\n[Test and build Python package/test]   | connection_factory = None, cursor_factory = None\n[Test and build Python package/test]   | kwargs = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | kwasync = {}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         Create a new database connection.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         The connection parameters can be specified as a string:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         or using a set of keyword arguments:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Or as a mix of both. The basic connection parameters are:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         - *dbname*: the database name\n[Test and build Python package/test]   |         - *database*: the database name (only as keyword argument)\n[Test and build Python package/test]   |         - *user*: user name used to authenticate\n[Test and build Python package/test]   |         - *password*: password used to authenticate\n[Test and build Python package/test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Test and build Python package/test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *connection_factory* parameter a different class or connections\n[Test and build Python package/test]   |         factory can be specified. It should be a callable object taking a dsn\n[Test and build Python package/test]   |         argument.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Test and build Python package/test]   |         used by cursor().\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Test and build Python package/test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Any other keyword parameter will be passed to the underlying client\n[Test and build Python package/test]   |         library: the list of supported parameters depends on the library version.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         kwasync = {}\n[Test and build Python package/test]   |         if 'async' in kwargs:\n[Test and build Python package/test]   |             kwasync['async'] = kwargs.pop('async')\n[Test and build Python package/test]   |         if 'async_' in kwargs:\n[Test and build Python package/test]   |             kwasync['async_'] = kwargs.pop('async_')\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Test and build Python package/test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Test and build Python package/test]   | E       django.db.utils.OperationalError: could not connect to server: Connection refused\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (127.0.0.1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | E       could not connect to server: Cannot assign requested address\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (::1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/psycopg2/__init__.py:122: OperationalError\n[Test and build Python package/test]   | __________________ ERROR at setup of test_extras_organization __________________\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def ensure_connection(self):\n[Test and build Python package/test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[Test and build Python package/test]   |         if self.connection is None:\n[Test and build Python package/test]   |             with self.wrap_database_errors:\n[Test and build Python package/test]   | >               self.connect()\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(self):\n[Test and build Python package/test]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[Test and build Python package/test]   |         # Check for invalid configurations.\n[Test and build Python package/test]   |         self.check_settings()\n[Test and build Python package/test]   |         # In case the previous connection was closed while in an atomic block\n[Test and build Python package/test]   |         self.in_atomic_block = False\n[Test and build Python package/test]   |         self.savepoint_ids = []\n[Test and build Python package/test]   |         self.needs_rollback = False\n[Test and build Python package/test]   |         # Reset parameters defining when to close the connection\n[Test and build Python package/test]   |         max_age = self.settings_dict['CONN_MAX_AGE']\n[Test and build Python package/test]   |         self.close_at = None if max_age is None else time.time() + max_age\n[Test and build Python package/test]   |         self.closed_in_transaction = False\n[Test and build Python package/test]   |         self.errors_occurred = False\n[Test and build Python package/test]   |         # Establish the connection\n[Test and build Python package/test]   |         conn_params = self.get_connection_params()\n[Test and build Python package/test]   | >       self.connection = self.get_new_connection(conn_params)\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:195: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | conn_params = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def get_new_connection(self, conn_params):\n[Test and build Python package/test]   | >       connection = Database.connect(**conn_params)\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/postgresql/base.py:178: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | dsn = 'user=test password=test host=localhost port=5432 dbname=test'\n[Test and build Python package/test]   | connection_factory = None, cursor_factory = None\n[Test and build Python package/test]   | kwargs = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | kwasync = {}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         Create a new database connection.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         The connection parameters can be specified as a string:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         or using a set of keyword arguments:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Or as a mix of both. The basic connection parameters are:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         - *dbname*: the database name\n[Test and build Python package/test]   |         - *database*: the database name (only as keyword argument)\n[Test and build Python package/test]   |         - *user*: user name used to authenticate\n[Test and build Python package/test]   |         - *password*: password used to authenticate\n[Test and build Python package/test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Test and build Python package/test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *connection_factory* parameter a different class or connections\n[Test and build Python package/test]   |         factory can be specified. It should be a callable object taking a dsn\n[Test and build Python package/test]   |         argument.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Test and build Python package/test]   |         used by cursor().\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Test and build Python package/test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Any other keyword parameter will be passed to the underlying client\n[Test and build Python package/test]   |         library: the list of supported parameters depends on the library version.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         kwasync = {}\n[Test and build Python package/test]   |         if 'async' in kwargs:\n[Test and build Python package/test]   |             kwasync['async'] = kwargs.pop('async')\n[Test and build Python package/test]   |         if 'async_' in kwargs:\n[Test and build Python package/test]   |             kwasync['async_'] = kwargs.pop('async_')\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Test and build Python package/test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Test and build Python package/test]   | E       psycopg2.OperationalError: could not connect to server: Connection refused\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (127.0.0.1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | E       could not connect to server: Cannot assign requested address\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (::1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/psycopg2/__init__.py:122: OperationalError\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | The above exception was the direct cause of the following exception:\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | request = <SubRequest '_django_db_marker' for <Function test_extras_organization>>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     @pytest.fixture(autouse=True)\n[Test and build Python package/test]   |     def _django_db_marker(request) -> None:\n[Test and build Python package/test]   |         \"\"\"Implement the django_db marker, internal to pytest-django.\"\"\"\n[Test and build Python package/test]   |         marker = request.node.get_closest_marker(\"django_db\")\n[Test and build Python package/test]   |         if marker:\n[Test and build Python package/test]   | >           request.getfixturevalue(\"_django_db_helper\")\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/pytest_django/plugin.py:465: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/pytest_django/fixtures.py:125: in django_db_setup\n[Test and build Python package/test]   |     **setup_databases_args\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/test/utils.py:174: in setup_databases\n[Test and build Python package/test]   |     serialize=connection.settings_dict.get('TEST', {}).get('SERIALIZE', True),\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/creation.py:58: in create_test_db\n[Test and build Python package/test]   |     self._create_test_db(verbosity, autoclobber, keepdb)\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/creation.py:168: in _create_test_db\n[Test and build Python package/test]   |     with self._nodb_connection.cursor() as cursor:\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:256: in cursor\n[Test and build Python package/test]   |     return self._cursor()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:233: in _cursor\n[Test and build Python package/test]   |     self.ensure_connection()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: in ensure_connection\n[Test and build Python package/test]   |     self.connect()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/utils.py:89: in __exit__\n[Test and build Python package/test]   |     raise dj_exc_value.with_traceback(traceback) from exc_value\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: in ensure_connection\n[Test and build Python package/test]   |     self.connect()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:195: in connect\n[Test and build Python package/test]   |     self.connection = self.get_new_connection(conn_params)\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/postgresql/base.py:178: in get_new_connection\n[Test and build Python package/test]   |     connection = Database.connect(**conn_params)\n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | dsn = 'user=test password=test host=localhost port=5432 dbname=test'\n[Test and build Python package/test]   | connection_factory = None, cursor_factory = None\n[Test and build Python package/test]   | kwargs = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | kwasync = {}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         Create a new database connection.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         The connection parameters can be specified as a string:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         or using a set of keyword arguments:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Or as a mix of both. The basic connection parameters are:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         - *dbname*: the database name\n[Test and build Python package/test]   |         - *database*: the database name (only as keyword argument)\n[Test and build Python package/test]   |         - *user*: user name used to authenticate\n[Test and build Python package/test]   |         - *password*: password used to authenticate\n[Test and build Python package/test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Test and build Python package/test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *connection_factory* parameter a different class or connections\n[Test and build Python package/test]   |         factory can be specified. It should be a callable object taking a dsn\n[Test and build Python package/test]   |         argument.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Test and build Python package/test]   |         used by cursor().\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Test and build Python package/test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Any other keyword parameter will be passed to the underlying client\n[Test and build Python package/test]   |         library: the list of supported parameters depends on the library version.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         kwasync = {}\n[Test and build Python package/test]   |         if 'async' in kwargs:\n[Test and build Python package/test]   |             kwasync['async'] = kwargs.pop('async')\n[Test and build Python package/test]   |         if 'async_' in kwargs:\n[Test and build Python package/test]   |             kwasync['async_'] = kwargs.pop('async_')\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Test and build Python package/test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Test and build Python package/test]   | E       django.db.utils.OperationalError: could not connect to server: Connection refused\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (127.0.0.1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | E       could not connect to server: Cannot assign requested address\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (::1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/psycopg2/__init__.py:122: OperationalError\n[Test and build Python package/test]   | ______________________ ERROR at setup of test_full_person ______________________\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def ensure_connection(self):\n[Test and build Python package/test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[Test and build Python package/test]   |         if self.connection is None:\n[Test and build Python package/test]   |             with self.wrap_database_errors:\n[Test and build Python package/test]   | >               self.connect()\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(self):\n[Test and build Python package/test]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[Test and build Python package/test]   |         # Check for invalid configurations.\n[Test and build Python package/test]   |         self.check_settings()\n[Test and build Python package/test]   |         # In case the previous connection was closed while in an atomic block\n[Test and build Python package/test]   |         self.in_atomic_block = False\n[Test and build Python package/test]   |         self.savepoint_ids = []\n[Test and build Python package/test]   |         self.needs_rollback = False\n[Test and build Python package/test]   |         # Reset parameters defining when to close the connection\n[Test and build Python package/test]   |         max_age = self.settings_dict['CONN_MAX_AGE']\n[Test and build Python package/test]   |         self.close_at = None if max_age is None else time.time() + max_age\n[Test and build Python package/test]   |         self.closed_in_transaction = False\n[Test and build Python package/test]   |         self.errors_occurred = False\n[Test and build Python package/test]   |         # Establish the connection\n[Test and build Python package/test]   |         conn_params = self.get_connection_params()\n[Test and build Python package/test]   | >       self.connection = self.get_new_connection(conn_params)\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:195: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | conn_params = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def get_new_connection(self, conn_params):\n[Test and build Python package/test]   | >       connection = Database.connect(**conn_params)\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/postgresql/base.py:178: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | dsn = 'user=test password=test host=localhost port=5432 dbname=test'\n[Test and build Python package/test]   | connection_factory = None, cursor_factory = None\n[Test and build Python package/test]   | kwargs = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | kwasync = {}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         Create a new database connection.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         The connection parameters can be specified as a string:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         or using a set of keyword arguments:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Or as a mix of both. The basic connection parameters are:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         - *dbname*: the database name\n[Test and build Python package/test]   |         - *database*: the database name (only as keyword argument)\n[Test and build Python package/test]   |         - *user*: user name used to authenticate\n[Test and build Python package/test]   |         - *password*: password used to authenticate\n[Test and build Python package/test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Test and build Python package/test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *connection_factory* parameter a different class or connections\n[Test and build Python package/test]   |         factory can be specified. It should be a callable object taking a dsn\n[Test and build Python package/test]   |         argument.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Test and build Python package/test]   |         used by cursor().\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Test and build Python package/test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Any other keyword parameter will be passed to the underlying client\n[Test and build Python package/test]   |         library: the list of supported parameters depends on the library version.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         kwasync = {}\n[Test and build Python package/test]   |         if 'async' in kwargs:\n[Test and build Python package/test]   |             kwasync['async'] = kwargs.pop('async')\n[Test and build Python package/test]   |         if 'async_' in kwargs:\n[Test and build Python package/test]   |             kwasync['async_'] = kwargs.pop('async_')\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Test and build Python package/test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Test and build Python package/test]   | E       psycopg2.OperationalError: could not connect to server: Connection refused\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (127.0.0.1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | E       could not connect to server: Cannot assign requested address\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (::1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/psycopg2/__init__.py:122: OperationalError\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | The above exception was the direct cause of the following exception:\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | request = <SubRequest '_django_db_marker' for <Function test_full_person>>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     @pytest.fixture(autouse=True)\n[Test and build Python package/test]   |     def _django_db_marker(request) -> None:\n[Test and build Python package/test]   |         \"\"\"Implement the django_db marker, internal to pytest-django.\"\"\"\n[Test and build Python package/test]   |         marker = request.node.get_closest_marker(\"django_db\")\n[Test and build Python package/test]   |         if marker:\n[Test and build Python package/test]   | >           request.getfixturevalue(\"_django_db_helper\")\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/pytest_django/plugin.py:465: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/pytest_django/fixtures.py:125: in django_db_setup\n[Test and build Python package/test]   |     **setup_databases_args\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/test/utils.py:174: in setup_databases\n[Test and build Python package/test]   |     serialize=connection.settings_dict.get('TEST', {}).get('SERIALIZE', True),\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/creation.py:58: in create_test_db\n[Test and build Python package/test]   |     self._create_test_db(verbosity, autoclobber, keepdb)\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/creation.py:168: in _create_test_db\n[Test and build Python package/test]   |     with self._nodb_connection.cursor() as cursor:\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:256: in cursor\n[Test and build Python package/test]   |     return self._cursor()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:233: in _cursor\n[Test and build Python package/test]   |     self.ensure_connection()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: in ensure_connection\n[Test and build Python package/test]   |     self.connect()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/utils.py:89: in __exit__\n[Test and build Python package/test]   |     raise dj_exc_value.with_traceback(traceback) from exc_value\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: in ensure_connection\n[Test and build Python package/test]   |     self.connect()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:195: in connect\n[Test and build Python package/test]   |     self.connection = self.get_new_connection(conn_params)\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/postgresql/base.py:178: in get_new_connection\n[Test and build Python package/test]   |     connection = Database.connect(**conn_params)\n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | dsn = 'user=test password=test host=localhost port=5432 dbname=test'\n[Test and build Python package/test]   | connection_factory = None, cursor_factory = None\n[Test and build Python package/test]   | kwargs = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | kwasync = {}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         Create a new database connection.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         The connection parameters can be specified as a string:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         or using a set of keyword arguments:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Or as a mix of both. The basic connection parameters are:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         - *dbname*: the database name\n[Test and build Python package/test]   |         - *database*: the database name (only as keyword argument)\n[Test and build Python package/test]   |         - *user*: user name used to authenticate\n[Test and build Python package/test]   |         - *password*: password used to authenticate\n[Test and build Python package/test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Test and build Python package/test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *connection_factory* parameter a different class or connections\n[Test and build Python package/test]   |         factory can be specified. It should be a callable object taking a dsn\n[Test and build Python package/test]   |         argument.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Test and build Python package/test]   |         used by cursor().\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Test and build Python package/test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Any other keyword parameter will be passed to the underlying client\n[Test and build Python package/test]   |         library: the list of supported parameters depends on the library version.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         kwasync = {}\n[Test and build Python package/test]   |         if 'async' in kwargs:\n[Test and build Python package/test]   |             kwasync['async'] = kwargs.pop('async')\n[Test and build Python package/test]   |         if 'async_' in kwargs:\n[Test and build Python package/test]   |             kwasync['async_'] = kwargs.pop('async_')\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Test and build Python package/test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Test and build Python package/test]   | E       django.db.utils.OperationalError: could not connect to server: Connection refused\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (127.0.0.1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | E       could not connect to server: Cannot assign requested address\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (::1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/psycopg2/__init__.py:122: OperationalError\n[Test and build Python package/test]   | ________________ ERROR at setup of test_deduplication_same_name ________________\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def ensure_connection(self):\n[Test and build Python package/test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[Test and build Python package/test]   |         if self.connection is None:\n[Test and build Python package/test]   |             with self.wrap_database_errors:\n[Test and build Python package/test]   | >               self.connect()\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(self):\n[Test and build Python package/test]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[Test and build Python package/test]   |         # Check for invalid configurations.\n[Test and build Python package/test]   |         self.check_settings()\n[Test and build Python package/test]   |         # In case the previous connection was closed while in an atomic block\n[Test and build Python package/test]   |         self.in_atomic_block = False\n[Test and build Python package/test]   |         self.savepoint_ids = []\n[Test and build Python package/test]   |         self.needs_rollback = False\n[Test and build Python package/test]   |         # Reset parameters defining when to close the connection\n[Test and build Python package/test]   |         max_age = self.settings_dict['CONN_MAX_AGE']\n[Test and build Python package/test]   |         self.close_at = None if max_age is None else time.time() + max_age\n[Test and build Python package/test]   |         self.closed_in_transaction = False\n[Test and build Python package/test]   |         self.errors_occurred = False\n[Test and build Python package/test]   |         # Establish the connection\n[Test and build Python package/test]   |         conn_params = self.get_connection_params()\n[Test and build Python package/test]   | >       self.connection = self.get_new_connection(conn_params)\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:195: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | conn_params = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def get_new_connection(self, conn_params):\n[Test and build Python package/test]   | >       connection = Database.connect(**conn_params)\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/postgresql/base.py:178: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | dsn = 'user=test password=test host=localhost port=5432 dbname=test'\n[Test and build Python package/test]   | connection_factory = None, cursor_factory = None\n[Test and build Python package/test]   | kwargs = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | kwasync = {}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         Create a new database connection.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         The connection parameters can be specified as a string:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         or using a set of keyword arguments:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Or as a mix of both. The basic connection parameters are:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         - *dbname*: the database name\n[Test and build Python package/test]   |         - *database*: the database name (only as keyword argument)\n[Test and build Python package/test]   |         - *user*: user name used to authenticate\n[Test and build Python package/test]   |         - *password*: password used to authenticate\n[Test and build Python package/test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Test and build Python package/test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *connection_factory* parameter a different class or connections\n[Test and build Python package/test]   |         factory can be specified. It should be a callable object taking a dsn\n[Test and build Python package/test]   |         argument.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Test and build Python package/test]   |         used by cursor().\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Test and build Python package/test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Any other keyword parameter will be passed to the underlying client\n[Test and build Python package/test]   |         library: the list of supported parameters depends on the library version.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         kwasync = {}\n[Test and build Python package/test]   |         if 'async' in kwargs:\n[Test and build Python package/test]   |             kwasync['async'] = kwargs.pop('async')\n[Test and build Python package/test]   |         if 'async_' in kwargs:\n[Test and build Python package/test]   |             kwasync['async_'] = kwargs.pop('async_')\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Test and build Python package/test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Test and build Python package/test]   | E       psycopg2.OperationalError: could not connect to server: Connection refused\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (127.0.0.1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | E       could not connect to server: Cannot assign requested address\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (::1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/psycopg2/__init__.py:122: OperationalError\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | The above exception was the direct cause of the following exception:\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | request = <SubRequest '_django_db_marker' for <Function test_deduplication_same_name>>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     @pytest.fixture(autouse=True)\n[Test and build Python package/test]   |     def _django_db_marker(request) -> None:\n[Test and build Python package/test]   |         \"\"\"Implement the django_db marker, internal to pytest-django.\"\"\"\n[Test and build Python package/test]   |         marker = request.node.get_closest_marker(\"django_db\")\n[Test and build Python package/test]   |         if marker:\n[Test and build Python package/test]   | >           request.getfixturevalue(\"_django_db_helper\")\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/pytest_django/plugin.py:465: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/pytest_django/fixtures.py:125: in django_db_setup\n[Test and build Python package/test]   |     **setup_databases_args\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/test/utils.py:174: in setup_databases\n[Test and build Python package/test]   |     serialize=connection.settings_dict.get('TEST', {}).get('SERIALIZE', True),\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/creation.py:58: in create_test_db\n[Test and build Python package/test]   |     self._create_test_db(verbosity, autoclobber, keepdb)\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/creation.py:168: in _create_test_db\n[Test and build Python package/test]   |     with self._nodb_connection.cursor() as cursor:\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:256: in cursor\n[Test and build Python package/test]   |     return self._cursor()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:233: in _cursor\n[Test and build Python package/test]   |     self.ensure_connection()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: in ensure_connection\n[Test and build Python package/test]   |     self.connect()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/utils.py:89: in __exit__\n[Test and build Python package/test]   |     raise dj_exc_value.with_traceback(traceback) from exc_value\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: in ensure_connection\n[Test and build Python package/test]   |     self.connect()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:195: in connect\n[Test and build Python package/test]   |     self.connection = self.get_new_connection(conn_params)\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/postgresql/base.py:178: in get_new_connection\n[Test and build Python package/test]   |     connection = Database.connect(**conn_params)\n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | dsn = 'user=test password=test host=localhost port=5432 dbname=test'\n[Test and build Python package/test]   | connection_factory = None, cursor_factory = None\n[Test and build Python package/test]   | kwargs = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | kwasync = {}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         Create a new database connection.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         The connection parameters can be specified as a string:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         or using a set of keyword arguments:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Or as a mix of both. The basic connection parameters are:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         - *dbname*: the database name\n[Test and build Python package/test]   |         - *database*: the database name (only as keyword argument)\n[Test and build Python package/test]   |         - *user*: user name used to authenticate\n[Test and build Python package/test]   |         - *password*: password used to authenticate\n[Test and build Python package/test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Test and build Python package/test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *connection_factory* parameter a different class or connections\n[Test and build Python package/test]   |         factory can be specified. It should be a callable object taking a dsn\n[Test and build Python package/test]   |         argument.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Test and build Python package/test]   |         used by cursor().\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Test and build Python package/test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Any other keyword parameter will be passed to the underlying client\n[Test and build Python package/test]   |         library: the list of supported parameters depends on the library version.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         kwasync = {}\n[Test and build Python package/test]   |         if 'async' in kwargs:\n[Test and build Python package/test]   |             kwasync['async'] = kwargs.pop('async')\n[Test and build Python package/test]   |         if 'async_' in kwargs:\n[Test and build Python package/test]   |             kwasync['async_'] = kwargs.pop('async_')\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Test and build Python package/test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Test and build Python package/test]   | E       django.db.utils.OperationalError: could not connect to server: Connection refused\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (127.0.0.1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | E       could not connect to server: Cannot assign requested address\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (::1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/psycopg2/__init__.py:122: OperationalError\n[Test and build Python package/test]   | ____________ ERROR at setup of test_deduplication_other_name_exists ____________\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def ensure_connection(self):\n[Test and build Python package/test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[Test and build Python package/test]   |         if self.connection is None:\n[Test and build Python package/test]   |             with self.wrap_database_errors:\n[Test and build Python package/test]   | >               self.connect()\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(self):\n[Test and build Python package/test]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[Test and build Python package/test]   |         # Check for invalid configurations.\n[Test and build Python package/test]   |         self.check_settings()\n[Test and build Python package/test]   |         # In case the previous connection was closed while in an atomic block\n[Test and build Python package/test]   |         self.in_atomic_block = False\n[Test and build Python package/test]   |         self.savepoint_ids = []\n[Test and build Python package/test]   |         self.needs_rollback = False\n[Test and build Python package/test]   |         # Reset parameters defining when to close the connection\n[Test and build Python package/test]   |         max_age = self.settings_dict['CONN_MAX_AGE']\n[Test and build Python package/test]   |         self.close_at = None if max_age is None else time.time() + max_age\n[Test and build Python package/test]   |         self.closed_in_transaction = False\n[Test and build Python package/test]   |         self.errors_occurred = False\n[Test and build Python package/test]   |         # Establish the connection\n[Test and build Python package/test]   |         conn_params = self.get_connection_params()\n[Test and build Python package/test]   | >       self.connection = self.get_new_connection(conn_params)\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:195: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | conn_params = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def get_new_connection(self, conn_params):\n[Test and build Python package/test]   | >       connection = Database.connect(**conn_params)\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/postgresql/base.py:178: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | dsn = 'user=test password=test host=localhost port=5432 dbname=test'\n[Test and build Python package/test]   | connection_factory = None, cursor_factory = None\n[Test and build Python package/test]   | kwargs = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | kwasync = {}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         Create a new database connection.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         The connection parameters can be specified as a string:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         or using a set of keyword arguments:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Or as a mix of both. The basic connection parameters are:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         - *dbname*: the database name\n[Test and build Python package/test]   |         - *database*: the database name (only as keyword argument)\n[Test and build Python package/test]   |         - *user*: user name used to authenticate\n[Test and build Python package/test]   |         - *password*: password used to authenticate\n[Test and build Python package/test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Test and build Python package/test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *connection_factory* parameter a different class or connections\n[Test and build Python package/test]   |         factory can be specified. It should be a callable object taking a dsn\n[Test and build Python package/test]   |         argument.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Test and build Python package/test]   |         used by cursor().\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Test and build Python package/test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Any other keyword parameter will be passed to the underlying client\n[Test and build Python package/test]   |         library: the list of supported parameters depends on the library version.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         kwasync = {}\n[Test and build Python package/test]   |         if 'async' in kwargs:\n[Test and build Python package/test]   |             kwasync['async'] = kwargs.pop('async')\n[Test and build Python package/test]   |         if 'async_' in kwargs:\n[Test and build Python package/test]   |             kwasync['async_'] = kwargs.pop('async_')\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Test and build Python package/test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Test and build Python package/test]   | E       psycopg2.OperationalError: could not connect to server: Connection refused\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (127.0.0.1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | E       could not connect to server: Cannot assign requested address\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (::1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/psycopg2/__init__.py:122: OperationalError\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | The above exception was the direct cause of the following exception:\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | request = <SubRequest '_django_db_marker' for <Function test_deduplication_other_name_exists>>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     @pytest.fixture(autouse=True)\n[Test and build Python package/test]   |     def _django_db_marker(request) -> None:\n[Test and build Python package/test]   |         \"\"\"Implement the django_db marker, internal to pytest-django.\"\"\"\n[Test and build Python package/test]   |         marker = request.node.get_closest_marker(\"django_db\")\n[Test and build Python package/test]   |         if marker:\n[Test and build Python package/test]   | >           request.getfixturevalue(\"_django_db_helper\")\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/pytest_django/plugin.py:465: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/pytest_django/fixtures.py:125: in django_db_setup\n[Test and build Python package/test]   |     **setup_databases_args\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/test/utils.py:174: in setup_databases\n[Test and build Python package/test]   |     serialize=connection.settings_dict.get('TEST', {}).get('SERIALIZE', True),\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/creation.py:58: in create_test_db\n[Test and build Python package/test]   |     self._create_test_db(verbosity, autoclobber, keepdb)\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/creation.py:168: in _create_test_db\n[Test and build Python package/test]   |     with self._nodb_connection.cursor() as cursor:\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:256: in cursor\n[Test and build Python package/test]   |     return self._cursor()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:233: in _cursor\n[Test and build Python package/test]   |     self.ensure_connection()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: in ensure_connection\n[Test and build Python package/test]   |     self.connect()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/utils.py:89: in __exit__\n[Test and build Python package/test]   |     raise dj_exc_value.with_traceback(traceback) from exc_value\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: in ensure_connection\n[Test and build Python package/test]   |     self.connect()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:195: in connect\n[Test and build Python package/test]   |     self.connection = self.get_new_connection(conn_params)\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/postgresql/base.py:178: in get_new_connection\n[Test and build Python package/test]   |     connection = Database.connect(**conn_params)\n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | dsn = 'user=test password=test host=localhost port=5432 dbname=test'\n[Test and build Python package/test]   | connection_factory = None, cursor_factory = None\n[Test and build Python package/test]   | kwargs = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | kwasync = {}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         Create a new database connection.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         The connection parameters can be specified as a string:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         or using a set of keyword arguments:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Or as a mix of both. The basic connection parameters are:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         - *dbname*: the database name\n[Test and build Python package/test]   |         - *database*: the database name (only as keyword argument)\n[Test and build Python package/test]   |         - *user*: user name used to authenticate\n[Test and build Python package/test]   |         - *password*: password used to authenticate\n[Test and build Python package/test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Test and build Python package/test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *connection_factory* parameter a different class or connections\n[Test and build Python package/test]   |         factory can be specified. It should be a callable object taking a dsn\n[Test and build Python package/test]   |         argument.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Test and build Python package/test]   |         used by cursor().\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Test and build Python package/test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Any other keyword parameter will be passed to the underlying client\n[Test and build Python package/test]   |         library: the list of supported parameters depends on the library version.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         kwasync = {}\n[Test and build Python package/test]   |         if 'async' in kwargs:\n[Test and build Python package/test]   |             kwasync['async'] = kwargs.pop('async')\n[Test and build Python package/test]   |         if 'async_' in kwargs:\n[Test and build Python package/test]   |             kwasync['async_'] = kwargs.pop('async_')\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Test and build Python package/test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Test and build Python package/test]   | E       django.db.utils.OperationalError: could not connect to server: Connection refused\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (127.0.0.1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | E       could not connect to server: Cannot assign requested address\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (::1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/psycopg2/__init__.py:122: OperationalError\n[Test and build Python package/test]   | ___________ ERROR at setup of test_deduplication_other_name_overlaps ___________\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def ensure_connection(self):\n[Test and build Python package/test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[Test and build Python package/test]   |         if self.connection is None:\n[Test and build Python package/test]   |             with self.wrap_database_errors:\n[Test and build Python package/test]   | >               self.connect()\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(self):\n[Test and build Python package/test]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[Test and build Python package/test]   |         # Check for invalid configurations.\n[Test and build Python package/test]   |         self.check_settings()\n[Test and build Python package/test]   |         # In case the previous connection was closed while in an atomic block\n[Test and build Python package/test]   |         self.in_atomic_block = False\n[Test and build Python package/test]   |         self.savepoint_ids = []\n[Test and build Python package/test]   |         self.needs_rollback = False\n[Test and build Python package/test]   |         # Reset parameters defining when to close the connection\n[Test and build Python package/test]   |         max_age = self.settings_dict['CONN_MAX_AGE']\n[Test and build Python package/test]   |         self.close_at = None if max_age is None else time.time() + max_age\n[Test and build Python package/test]   |         self.closed_in_transaction = False\n[Test and build Python package/test]   |         self.errors_occurred = False\n[Test and build Python package/test]   |         # Establish the connection\n[Test and build Python package/test]   |         conn_params = self.get_connection_params()\n[Test and build Python package/test]   | >       self.connection = self.get_new_connection(conn_params)\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:195: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | conn_params = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def get_new_connection(self, conn_params):\n[Test and build Python package/test]   | >       connection = Database.connect(**conn_params)\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/postgresql/base.py:178: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | dsn = 'user=test password=test host=localhost port=5432 dbname=test'\n[Test and build Python package/test]   | connection_factory = None, cursor_factory = None\n[Test and build Python package/test]   | kwargs = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | kwasync = {}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         Create a new database connection.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         The connection parameters can be specified as a string:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         or using a set of keyword arguments:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Or as a mix of both. The basic connection parameters are:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         - *dbname*: the database name\n[Test and build Python package/test]   |         - *database*: the database name (only as keyword argument)\n[Test and build Python package/test]   |         - *user*: user name used to authenticate\n[Test and build Python package/test]   |         - *password*: password used to authenticate\n[Test and build Python package/test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Test and build Python package/test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *connection_factory* parameter a different class or connections\n[Test and build Python package/test]   |         factory can be specified. It should be a callable object taking a dsn\n[Test and build Python package/test]   |         argument.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Test and build Python package/test]   |         used by cursor().\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Test and build Python package/test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Any other keyword parameter will be passed to the underlying client\n[Test and build Python package/test]   |         library: the list of supported parameters depends on the library version.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         kwasync = {}\n[Test and build Python package/test]   |         if 'async' in kwargs:\n[Test and build Python package/test]   |             kwasync['async'] = kwargs.pop('async')\n[Test and build Python package/test]   |         if 'async_' in kwargs:\n[Test and build Python package/test]   |             kwasync['async_'] = kwargs.pop('async_')\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Test and build Python package/test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Test and build Python package/test]   | E       psycopg2.OperationalError: could not connect to server: Connection refused\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (127.0.0.1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | E       could not connect to server: Cannot assign requested address\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (::1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/psycopg2/__init__.py:122: OperationalError\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | The above exception was the direct cause of the following exception:\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | request = <SubRequest '_django_db_marker' for <Function test_deduplication_other_name_overlaps>>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     @pytest.fixture(autouse=True)\n[Test and build Python package/test]   |     def _django_db_marker(request) -> None:\n[Test and build Python package/test]   |         \"\"\"Implement the django_db marker, internal to pytest-django.\"\"\"\n[Test and build Python package/test]   |         marker = request.node.get_closest_marker(\"django_db\")\n[Test and build Python package/test]   |         if marker:\n[Test and build Python package/test]   | >           request.getfixturevalue(\"_django_db_helper\")\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/pytest_django/plugin.py:465: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/pytest_django/fixtures.py:125: in django_db_setup\n[Test and build Python package/test]   |     **setup_databases_args\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/test/utils.py:174: in setup_databases\n[Test and build Python package/test]   |     serialize=connection.settings_dict.get('TEST', {}).get('SERIALIZE', True),\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/creation.py:58: in create_test_db\n[Test and build Python package/test]   |     self._create_test_db(verbosity, autoclobber, keepdb)\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/creation.py:168: in _create_test_db\n[Test and build Python package/test]   |     with self._nodb_connection.cursor() as cursor:\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:256: in cursor\n[Test and build Python package/test]   |     return self._cursor()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:233: in _cursor\n[Test and build Python package/test]   |     self.ensure_connection()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: in ensure_connection\n[Test and build Python package/test]   |     self.connect()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/utils.py:89: in __exit__\n[Test and build Python package/test]   |     raise dj_exc_value.with_traceback(traceback) from exc_value\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: in ensure_connection\n[Test and build Python package/test]   |     self.connect()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:195: in connect\n[Test and build Python package/test]   |     self.connection = self.get_new_connection(conn_params)\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/postgresql/base.py:178: in get_new_connection\n[Test and build Python package/test]   |     connection = Database.connect(**conn_params)\n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | dsn = 'user=test password=test host=localhost port=5432 dbname=test'\n[Test and build Python package/test]   | connection_factory = None, cursor_factory = None\n[Test and build Python package/test]   | kwargs = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | kwasync = {}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         Create a new database connection.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         The connection parameters can be specified as a string:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         or using a set of keyword arguments:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Or as a mix of both. The basic connection parameters are:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         - *dbname*: the database name\n[Test and build Python package/test]   |         - *database*: the database name (only as keyword argument)\n[Test and build Python package/test]   |         - *user*: user name used to authenticate\n[Test and build Python package/test]   |         - *password*: password used to authenticate\n[Test and build Python package/test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Test and build Python package/test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *connection_factory* parameter a different class or connections\n[Test and build Python package/test]   |         factory can be specified. It should be a callable object taking a dsn\n[Test and build Python package/test]   |         argument.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Test and build Python package/test]   |         used by cursor().\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Test and build Python package/test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Any other keyword parameter will be passed to the underlying client\n[Test and build Python package/test]   |         library: the list of supported parameters depends on the library version.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         kwasync = {}\n[Test and build Python package/test]   |         if 'async' in kwargs:\n[Test and build Python package/test]   |             kwasync['async'] = kwargs.pop('async')\n[Test and build Python package/test]   |         if 'async_' in kwargs:\n[Test and build Python package/test]   |             kwasync['async_'] = kwargs.pop('async_')\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Test and build Python package/test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Test and build Python package/test]   | E       django.db.utils.OperationalError: could not connect to server: Connection refused\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (127.0.0.1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | E       could not connect to server: Cannot assign requested address\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (::1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/psycopg2/__init__.py:122: OperationalError\n[Test and build Python package/test]   | _____________ ERROR at setup of test_deduplication_no_name_overlap _____________\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def ensure_connection(self):\n[Test and build Python package/test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[Test and build Python package/test]   |         if self.connection is None:\n[Test and build Python package/test]   |             with self.wrap_database_errors:\n[Test and build Python package/test]   | >               self.connect()\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(self):\n[Test and build Python package/test]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[Test and build Python package/test]   |         # Check for invalid configurations.\n[Test and build Python package/test]   |         self.check_settings()\n[Test and build Python package/test]   |         # In case the previous connection was closed while in an atomic block\n[Test and build Python package/test]   |         self.in_atomic_block = False\n[Test and build Python package/test]   |         self.savepoint_ids = []\n[Test and build Python package/test]   |         self.needs_rollback = False\n[Test and build Python package/test]   |         # Reset parameters defining when to close the connection\n[Test and build Python package/test]   |         max_age = self.settings_dict['CONN_MAX_AGE']\n[Test and build Python package/test]   |         self.close_at = None if max_age is None else time.time() + max_age\n[Test and build Python package/test]   |         self.closed_in_transaction = False\n[Test and build Python package/test]   |         self.errors_occurred = False\n[Test and build Python package/test]   |         # Establish the connection\n[Test and build Python package/test]   |         conn_params = self.get_connection_params()\n[Test and build Python package/test]   | >       self.connection = self.get_new_connection(conn_params)\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:195: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | conn_params = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def get_new_connection(self, conn_params):\n[Test and build Python package/test]   | >       connection = Database.connect(**conn_params)\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/postgresql/base.py:178: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | dsn = 'user=test password=test host=localhost port=5432 dbname=test'\n[Test and build Python package/test]   | connection_factory = None, cursor_factory = None\n[Test and build Python package/test]   | kwargs = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | kwasync = {}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         Create a new database connection.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         The connection parameters can be specified as a string:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         or using a set of keyword arguments:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Or as a mix of both. The basic connection parameters are:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         - *dbname*: the database name\n[Test and build Python package/test]   |         - *database*: the database name (only as keyword argument)\n[Test and build Python package/test]   |         - *user*: user name used to authenticate\n[Test and build Python package/test]   |         - *password*: password used to authenticate\n[Test and build Python package/test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Test and build Python package/test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *connection_factory* parameter a different class or connections\n[Test and build Python package/test]   |         factory can be specified. It should be a callable object taking a dsn\n[Test and build Python package/test]   |         argument.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Test and build Python package/test]   |         used by cursor().\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Test and build Python package/test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Any other keyword parameter will be passed to the underlying client\n[Test and build Python package/test]   |         library: the list of supported parameters depends on the library version.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         kwasync = {}\n[Test and build Python package/test]   |         if 'async' in kwargs:\n[Test and build Python package/test]   |             kwasync['async'] = kwargs.pop('async')\n[Test and build Python package/test]   |         if 'async_' in kwargs:\n[Test and build Python package/test]   |             kwasync['async_'] = kwargs.pop('async_')\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Test and build Python package/test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Test and build Python package/test]   | E       psycopg2.OperationalError: could not connect to server: Connection refused\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (127.0.0.1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | E       could not connect to server: Cannot assign requested address\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (::1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/psycopg2/__init__.py:122: OperationalError\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | The above exception was the direct cause of the following exception:\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | request = <SubRequest '_django_db_marker' for <Function test_deduplication_no_name_overlap>>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     @pytest.fixture(autouse=True)\n[Test and build Python package/test]   |     def _django_db_marker(request) -> None:\n[Test and build Python package/test]   |         \"\"\"Implement the django_db marker, internal to pytest-django.\"\"\"\n[Test and build Python package/test]   |         marker = request.node.get_closest_marker(\"django_db\")\n[Test and build Python package/test]   |         if marker:\n[Test and build Python package/test]   | >           request.getfixturevalue(\"_django_db_helper\")\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/pytest_django/plugin.py:465: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/pytest_django/fixtures.py:125: in django_db_setup\n[Test and build Python package/test]   |     **setup_databases_args\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/test/utils.py:174: in setup_databases\n[Test and build Python package/test]   |     serialize=connection.settings_dict.get('TEST', {}).get('SERIALIZE', True),\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/creation.py:58: in create_test_db\n[Test and build Python package/test]   |     self._create_test_db(verbosity, autoclobber, keepdb)\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/creation.py:168: in _create_test_db\n[Test and build Python package/test]   |     with self._nodb_connection.cursor() as cursor:\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:256: in cursor\n[Test and build Python package/test]   |     return self._cursor()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:233: in _cursor\n[Test and build Python package/test]   |     self.ensure_connection()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: in ensure_connection\n[Test and build Python package/test]   |     self.connect()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/utils.py:89: in __exit__\n[Test and build Python package/test]   |     raise dj_exc_value.with_traceback(traceback) from exc_value\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: in ensure_connection\n[Test and build Python package/test]   |     self.connect()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:195: in connect\n[Test and build Python package/test]   |     self.connection = self.get_new_connection(conn_params)\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/postgresql/base.py:178: in get_new_connection\n[Test and build Python package/test]   |     connection = Database.connect(**conn_params)\n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | dsn = 'user=test password=test host=localhost port=5432 dbname=test'\n[Test and build Python package/test]   | connection_factory = None, cursor_factory = None\n[Test and build Python package/test]   | kwargs = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | kwasync = {}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         Create a new database connection.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         The connection parameters can be specified as a string:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         or using a set of keyword arguments:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Or as a mix of both. The basic connection parameters are:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         - *dbname*: the database name\n[Test and build Python package/test]   |         - *database*: the database name (only as keyword argument)\n[Test and build Python package/test]   |         - *user*: user name used to authenticate\n[Test and build Python package/test]   |         - *password*: password used to authenticate\n[Test and build Python package/test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Test and build Python package/test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *connection_factory* parameter a different class or connections\n[Test and build Python package/test]   |         factory can be specified. It should be a callable object taking a dsn\n[Test and build Python package/test]   |         argument.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Test and build Python package/test]   |         used by cursor().\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Test and build Python package/test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Any other keyword parameter will be passed to the underlying client\n[Test and build Python package/test]   |         library: the list of supported parameters depends on the library version.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         kwasync = {}\n[Test and build Python package/test]   |         if 'async' in kwargs:\n[Test and build Python package/test]   |             kwasync['async'] = kwargs.pop('async')\n[Test and build Python package/test]   |         if 'async_' in kwargs:\n[Test and build Python package/test]   |             kwasync['async_'] = kwargs.pop('async_')\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Test and build Python package/test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Test and build Python package/test]   | E       django.db.utils.OperationalError: could not connect to server: Connection refused\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (127.0.0.1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | E       could not connect to server: Cannot assign requested address\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (::1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/psycopg2/__init__.py:122: OperationalError\n[Test and build Python package/test]   | _________ ERROR at setup of test_deduplication_no_jurisdiction_overlap _________\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def ensure_connection(self):\n[Test and build Python package/test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[Test and build Python package/test]   |         if self.connection is None:\n[Test and build Python package/test]   |             with self.wrap_database_errors:\n[Test and build Python package/test]   | >               self.connect()\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(self):\n[Test and build Python package/test]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[Test and build Python package/test]   |         # Check for invalid configurations.\n[Test and build Python package/test]   |         self.check_settings()\n[Test and build Python package/test]   |         # In case the previous connection was closed while in an atomic block\n[Test and build Python package/test]   |         self.in_atomic_block = False\n[Test and build Python package/test]   |         self.savepoint_ids = []\n[Test and build Python package/test]   |         self.needs_rollback = False\n[Test and build Python package/test]   |         # Reset parameters defining when to close the connection\n[Test and build Python package/test]   |         max_age = self.settings_dict['CONN_MAX_AGE']\n[Test and build Python package/test]   |         self.close_at = None if max_age is None else time.time() + max_age\n[Test and build Python package/test]   |         self.closed_in_transaction = False\n[Test and build Python package/test]   |         self.errors_occurred = False\n[Test and build Python package/test]   |         # Establish the connection\n[Test and build Python package/test]   |         conn_params = self.get_connection_params()\n[Test and build Python package/test]   | >       self.connection = self.get_new_connection(conn_params)\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:195: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | conn_params = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def get_new_connection(self, conn_params):\n[Test and build Python package/test]   | >       connection = Database.connect(**conn_params)\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/postgresql/base.py:178: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | dsn = 'user=test password=test host=localhost port=5432 dbname=test'\n[Test and build Python package/test]   | connection_factory = None, cursor_factory = None\n[Test and build Python package/test]   | kwargs = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | kwasync = {}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         Create a new database connection.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         The connection parameters can be specified as a string:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         or using a set of keyword arguments:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Or as a mix of both. The basic connection parameters are:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         - *dbname*: the database name\n[Test and build Python package/test]   |         - *database*: the database name (only as keyword argument)\n[Test and build Python package/test]   |         - *user*: user name used to authenticate\n[Test and build Python package/test]   |         - *password*: password used to authenticate\n[Test and build Python package/test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Test and build Python package/test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *connection_factory* parameter a different class or connections\n[Test and build Python package/test]   |         factory can be specified. It should be a callable object taking a dsn\n[Test and build Python package/test]   |         argument.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Test and build Python package/test]   |         used by cursor().\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Test and build Python package/test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Any other keyword parameter will be passed to the underlying client\n[Test and build Python package/test]   |         library: the list of supported parameters depends on the library version.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         kwasync = {}\n[Test and build Python package/test]   |         if 'async' in kwargs:\n[Test and build Python package/test]   |             kwasync['async'] = kwargs.pop('async')\n[Test and build Python package/test]   |         if 'async_' in kwargs:\n[Test and build Python package/test]   |             kwasync['async_'] = kwargs.pop('async_')\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Test and build Python package/test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Test and build Python package/test]   | E       psycopg2.OperationalError: could not connect to server: Connection refused\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (127.0.0.1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | E       could not connect to server: Cannot assign requested address\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (::1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/psycopg2/__init__.py:122: OperationalError\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | The above exception was the direct cause of the following exception:\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | request = <SubRequest '_django_db_marker' for <Function test_deduplication_no_jurisdiction_overlap>>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     @pytest.fixture(autouse=True)\n[Test and build Python package/test]   |     def _django_db_marker(request) -> None:\n[Test and build Python package/test]   |         \"\"\"Implement the django_db marker, internal to pytest-django.\"\"\"\n[Test and build Python package/test]   |         marker = request.node.get_closest_marker(\"django_db\")\n[Test and build Python package/test]   |         if marker:\n[Test and build Python package/test]   | >           request.getfixturevalue(\"_django_db_helper\")\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/pytest_django/plugin.py:465: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/pytest_django/fixtures.py:125: in django_db_setup\n[Test and build Python package/test]   |     **setup_databases_args\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/test/utils.py:174: in setup_databases\n[Test and build Python package/test]   |     serialize=connection.settings_dict.get('TEST', {}).get('SERIALIZE', True),\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/creation.py:58: in create_test_db\n[Test and build Python package/test]   |     self._create_test_db(verbosity, autoclobber, keepdb)\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/creation.py:168: in _create_test_db\n[Test and build Python package/test]   |     with self._nodb_connection.cursor() as cursor:\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:256: in cursor\n[Test and build Python package/test]   |     return self._cursor()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:233: in _cursor\n[Test and build Python package/test]   |     self.ensure_connection()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: in ensure_connection\n[Test and build Python package/test]   |     self.connect()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/utils.py:89: in __exit__\n[Test and build Python package/test]   |     raise dj_exc_value.with_traceback(traceback) from exc_value\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: in ensure_connection\n[Test and build Python package/test]   |     self.connect()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:195: in connect\n[Test and build Python package/test]   |     self.connection = self.get_new_connection(conn_params)\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/postgresql/base.py:178: in get_new_connection\n[Test and build Python package/test]   |     connection = Database.connect(**conn_params)\n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | dsn = 'user=test password=test host=localhost port=5432 dbname=test'\n[Test and build Python package/test]   | connection_factory = None, cursor_factory = None\n[Test and build Python package/test]   | kwargs = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | kwasync = {}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         Create a new database connection.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         The connection parameters can be specified as a string:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         or using a set of keyword arguments:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Or as a mix of both. The basic connection parameters are:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         - *dbname*: the database name\n[Test and build Python package/test]   |         - *database*: the database name (only as keyword argument)\n[Test and build Python package/test]   |         - *user*: user name used to authenticate\n[Test and build Python package/test]   |         - *password*: password used to authenticate\n[Test and build Python package/test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Test and build Python package/test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *connection_factory* parameter a different class or connections\n[Test and build Python package/test]   |         factory can be specified. It should be a callable object taking a dsn\n[Test and build Python package/test]   |         argument.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Test and build Python package/test]   |         used by cursor().\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Test and build Python package/test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Any other keyword parameter will be passed to the underlying client\n[Test and build Python package/test]   |         library: the list of supported parameters depends on the library version.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         kwasync = {}\n[Test and build Python package/test]   |         if 'async' in kwargs:\n[Test and build Python package/test]   |             kwasync['async'] = kwargs.pop('async')\n[Test and build Python package/test]   |         if 'async_' in kwargs:\n[Test and build Python package/test]   |             kwasync['async_'] = kwargs.pop('async_')\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Test and build Python package/test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Test and build Python package/test]   | E       django.db.utils.OperationalError: could not connect to server: Connection refused\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (127.0.0.1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | E       could not connect to server: Cannot assign requested address\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (::1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/psycopg2/__init__.py:122: OperationalError\n[Test and build Python package/test]   | _________________ ERROR at setup of test_multiple_memberships __________________\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def ensure_connection(self):\n[Test and build Python package/test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[Test and build Python package/test]   |         if self.connection is None:\n[Test and build Python package/test]   |             with self.wrap_database_errors:\n[Test and build Python package/test]   | >               self.connect()\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(self):\n[Test and build Python package/test]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[Test and build Python package/test]   |         # Check for invalid configurations.\n[Test and build Python package/test]   |         self.check_settings()\n[Test and build Python package/test]   |         # In case the previous connection was closed while in an atomic block\n[Test and build Python package/test]   |         self.in_atomic_block = False\n[Test and build Python package/test]   |         self.savepoint_ids = []\n[Test and build Python package/test]   |         self.needs_rollback = False\n[Test and build Python package/test]   |         # Reset parameters defining when to close the connection\n[Test and build Python package/test]   |         max_age = self.settings_dict['CONN_MAX_AGE']\n[Test and build Python package/test]   |         self.close_at = None if max_age is None else time.time() + max_age\n[Test and build Python package/test]   |         self.closed_in_transaction = False\n[Test and build Python package/test]   |         self.errors_occurred = False\n[Test and build Python package/test]   |         # Establish the connection\n[Test and build Python package/test]   |         conn_params = self.get_connection_params()\n[Test and build Python package/test]   | >       self.connection = self.get_new_connection(conn_params)\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:195: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | conn_params = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def get_new_connection(self, conn_params):\n[Test and build Python package/test]   | >       connection = Database.connect(**conn_params)\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/postgresql/base.py:178: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | dsn = 'user=test password=test host=localhost port=5432 dbname=test'\n[Test and build Python package/test]   | connection_factory = None, cursor_factory = None\n[Test and build Python package/test]   | kwargs = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | kwasync = {}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         Create a new database connection.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         The connection parameters can be specified as a string:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         or using a set of keyword arguments:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Or as a mix of both. The basic connection parameters are:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         - *dbname*: the database name\n[Test and build Python package/test]   |         - *database*: the database name (only as keyword argument)\n[Test and build Python package/test]   |         - *user*: user name used to authenticate\n[Test and build Python package/test]   |         - *password*: password used to authenticate\n[Test and build Python package/test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Test and build Python package/test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *connection_factory* parameter a different class or connections\n[Test and build Python package/test]   |         factory can be specified. It should be a callable object taking a dsn\n[Test and build Python package/test]   |         argument.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Test and build Python package/test]   |         used by cursor().\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Test and build Python package/test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Any other keyword parameter will be passed to the underlying client\n[Test and build Python package/test]   |         library: the list of supported parameters depends on the library version.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         kwasync = {}\n[Test and build Python package/test]   |         if 'async' in kwargs:\n[Test and build Python package/test]   |             kwasync['async'] = kwargs.pop('async')\n[Test and build Python package/test]   |         if 'async_' in kwargs:\n[Test and build Python package/test]   |             kwasync['async_'] = kwargs.pop('async_')\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Test and build Python package/test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Test and build Python package/test]   | E       psycopg2.OperationalError: could not connect to server: Connection refused\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (127.0.0.1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | E       could not connect to server: Cannot assign requested address\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (::1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/psycopg2/__init__.py:122: OperationalError\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | The above exception was the direct cause of the following exception:\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | request = <SubRequest '_django_db_marker' for <Function test_multiple_memberships>>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     @pytest.fixture(autouse=True)\n[Test and build Python package/test]   |     def _django_db_marker(request) -> None:\n[Test and build Python package/test]   |         \"\"\"Implement the django_db marker, internal to pytest-django.\"\"\"\n[Test and build Python package/test]   |         marker = request.node.get_closest_marker(\"django_db\")\n[Test and build Python package/test]   |         if marker:\n[Test and build Python package/test]   | >           request.getfixturevalue(\"_django_db_helper\")\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/pytest_django/plugin.py:465: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/pytest_django/fixtures.py:125: in django_db_setup\n[Test and build Python package/test]   |     **setup_databases_args\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/test/utils.py:174: in setup_databases\n[Test and build Python package/test]   |     serialize=connection.settings_dict.get('TEST', {}).get('SERIALIZE', True),\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/creation.py:58: in create_test_db\n[Test and build Python package/test]   |     self._create_test_db(verbosity, autoclobber, keepdb)\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/creation.py:168: in _create_test_db\n[Test and build Python package/test]   |     with self._nodb_connection.cursor() as cursor:\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:256: in cursor\n[Test and build Python package/test]   |     return self._cursor()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:233: in _cursor\n[Test and build Python package/test]   |     self.ensure_connection()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: in ensure_connection\n[Test and build Python package/test]   |     self.connect()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/utils.py:89: in __exit__\n[Test and build Python package/test]   |     raise dj_exc_value.with_traceback(traceback) from exc_value\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: in ensure_connection\n[Test and build Python package/test]   |     self.connect()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:195: in connect\n[Test and build Python package/test]   |     self.connection = self.get_new_connection(conn_params)\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/postgresql/base.py:178: in get_new_connection\n[Test and build Python package/test]   |     connection = Database.connect(**conn_params)\n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | dsn = 'user=test password=test host=localhost port=5432 dbname=test'\n[Test and build Python package/test]   | connection_factory = None, cursor_factory = None\n[Test and build Python package/test]   | kwargs = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | kwasync = {}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         Create a new database connection.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         The connection parameters can be specified as a string:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         or using a set of keyword arguments:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Or as a mix of both. The basic connection parameters are:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         - *dbname*: the database name\n[Test and build Python package/test]   |         - *database*: the database name (only as keyword argument)\n[Test and build Python package/test]   |         - *user*: user name used to authenticate\n[Test and build Python package/test]   |         - *password*: password used to authenticate\n[Test and build Python package/test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Test and build Python package/test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *connection_factory* parameter a different class or connections\n[Test and build Python package/test]   |         factory can be specified. It should be a callable object taking a dsn\n[Test and build Python package/test]   |         argument.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Test and build Python package/test]   |         used by cursor().\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Test and build Python package/test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Any other keyword parameter will be passed to the underlying client\n[Test and build Python package/test]   |         library: the list of supported parameters depends on the library version.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         kwasync = {}\n[Test and build Python package/test]   |         if 'async' in kwargs:\n[Test and build Python package/test]   |             kwasync['async'] = kwargs.pop('async')\n[Test and build Python package/test]   |         if 'async_' in kwargs:\n[Test and build Python package/test]   |             kwasync['async_'] = kwargs.pop('async_')\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Test and build Python package/test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Test and build Python package/test]   | E       django.db.utils.OperationalError: could not connect to server: Connection refused\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (127.0.0.1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | E       could not connect to server: Cannot assign requested address\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (::1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/psycopg2/__init__.py:122: OperationalError\n[Test and build Python package/test]   | ___________________ ERROR at setup of test_same_name_people ____________________\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def ensure_connection(self):\n[Test and build Python package/test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[Test and build Python package/test]   |         if self.connection is None:\n[Test and build Python package/test]   |             with self.wrap_database_errors:\n[Test and build Python package/test]   | >               self.connect()\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(self):\n[Test and build Python package/test]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[Test and build Python package/test]   |         # Check for invalid configurations.\n[Test and build Python package/test]   |         self.check_settings()\n[Test and build Python package/test]   |         # In case the previous connection was closed while in an atomic block\n[Test and build Python package/test]   |         self.in_atomic_block = False\n[Test and build Python package/test]   |         self.savepoint_ids = []\n[Test and build Python package/test]   |         self.needs_rollback = False\n[Test and build Python package/test]   |         # Reset parameters defining when to close the connection\n[Test and build Python package/test]   |         max_age = self.settings_dict['CONN_MAX_AGE']\n[Test and build Python package/test]   |         self.close_at = None if max_age is None else time.time() + max_age\n[Test and build Python package/test]   |         self.closed_in_transaction = False\n[Test and build Python package/test]   |         self.errors_occurred = False\n[Test and build Python package/test]   |         # Establish the connection\n[Test and build Python package/test]   |         conn_params = self.get_connection_params()\n[Test and build Python package/test]   | >       self.connection = self.get_new_connection(conn_params)\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:195: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | conn_params = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def get_new_connection(self, conn_params):\n[Test and build Python package/test]   | >       connection = Database.connect(**conn_params)\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/postgresql/base.py:178: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | dsn = 'user=test password=test host=localhost port=5432 dbname=test'\n[Test and build Python package/test]   | connection_factory = None, cursor_factory = None\n[Test and build Python package/test]   | kwargs = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | kwasync = {}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         Create a new database connection.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         The connection parameters can be specified as a string:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         or using a set of keyword arguments:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Or as a mix of both. The basic connection parameters are:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         - *dbname*: the database name\n[Test and build Python package/test]   |         - *database*: the database name (only as keyword argument)\n[Test and build Python package/test]   |         - *user*: user name used to authenticate\n[Test and build Python package/test]   |         - *password*: password used to authenticate\n[Test and build Python package/test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Test and build Python package/test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *connection_factory* parameter a different class or connections\n[Test and build Python package/test]   |         factory can be specified. It should be a callable object taking a dsn\n[Test and build Python package/test]   |         argument.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Test and build Python package/test]   |         used by cursor().\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Test and build Python package/test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Any other keyword parameter will be passed to the underlying client\n[Test and build Python package/test]   |         library: the list of supported parameters depends on the library version.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         kwasync = {}\n[Test and build Python package/test]   |         if 'async' in kwargs:\n[Test and build Python package/test]   |             kwasync['async'] = kwargs.pop('async')\n[Test and build Python package/test]   |         if 'async_' in kwargs:\n[Test and build Python package/test]   |             kwasync['async_'] = kwargs.pop('async_')\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Test and build Python package/test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Test and build Python package/test]   | E       psycopg2.OperationalError: could not connect to server: Connection refused\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (127.0.0.1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | E       could not connect to server: Cannot assign requested address\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (::1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/psycopg2/__init__.py:122: OperationalError\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | The above exception was the direct cause of the following exception:\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | request = <SubRequest '_django_db_marker' for <Function test_same_name_people>>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     @pytest.fixture(autouse=True)\n[Test and build Python package/test]   |     def _django_db_marker(request) -> None:\n[Test and build Python package/test]   |         \"\"\"Implement the django_db marker, internal to pytest-django.\"\"\"\n[Test and build Python package/test]   |         marker = request.node.get_closest_marker(\"django_db\")\n[Test and build Python package/test]   |         if marker:\n[Test and build Python package/test]   | >           request.getfixturevalue(\"_django_db_helper\")\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/pytest_django/plugin.py:465: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/pytest_django/fixtures.py:125: in django_db_setup\n[Test and build Python package/test]   |     **setup_databases_args\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/test/utils.py:174: in setup_databases\n[Test and build Python package/test]   |     serialize=connection.settings_dict.get('TEST', {}).get('SERIALIZE', True),\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/creation.py:58: in create_test_db\n[Test and build Python package/test]   |     self._create_test_db(verbosity, autoclobber, keepdb)\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/creation.py:168: in _create_test_db\n[Test and build Python package/test]   |     with self._nodb_connection.cursor() as cursor:\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:256: in cursor\n[Test and build Python package/test]   |     return self._cursor()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:233: in _cursor\n[Test and build Python package/test]   |     self.ensure_connection()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: in ensure_connection\n[Test and build Python package/test]   |     self.connect()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/utils.py:89: in __exit__\n[Test and build Python package/test]   |     raise dj_exc_value.with_traceback(traceback) from exc_value\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: in ensure_connection\n[Test and build Python package/test]   |     self.connect()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:195: in connect\n[Test and build Python package/test]   |     self.connection = self.get_new_connection(conn_params)\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/postgresql/base.py:178: in get_new_connection\n[Test and build Python package/test]   |     connection = Database.connect(**conn_params)\n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | dsn = 'user=test password=test host=localhost port=5432 dbname=test'\n[Test and build Python package/test]   | connection_factory = None, cursor_factory = None\n[Test and build Python package/test]   | kwargs = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | kwasync = {}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         Create a new database connection.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         The connection parameters can be specified as a string:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         or using a set of keyword arguments:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Or as a mix of both. The basic connection parameters are:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         - *dbname*: the database name\n[Test and build Python package/test]   |         - *database*: the database name (only as keyword argument)\n[Test and build Python package/test]   |         - *user*: user name used to authenticate\n[Test and build Python package/test]   |         - *password*: password used to authenticate\n[Test and build Python package/test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Test and build Python package/test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *connection_factory* parameter a different class or connections\n[Test and build Python package/test]   |         factory can be specified. It should be a callable object taking a dsn\n[Test and build Python package/test]   |         argument.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Test and build Python package/test]   |         used by cursor().\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Test and build Python package/test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Any other keyword parameter will be passed to the underlying client\n[Test and build Python package/test]   |         library: the list of supported parameters depends on the library version.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         kwasync = {}\n[Test and build Python package/test]   |         if 'async' in kwargs:\n[Test and build Python package/test]   |             kwasync['async'] = kwargs.pop('async')\n[Test and build Python package/test]   |         if 'async_' in kwargs:\n[Test and build Python package/test]   |             kwasync['async_'] = kwargs.pop('async_')\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Test and build Python package/test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Test and build Python package/test]   | E       django.db.utils.OperationalError: could not connect to server: Connection refused\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (127.0.0.1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | E       could not connect to server: Cannot assign requested address\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (::1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/psycopg2/__init__.py:122: OperationalError\n[Test and build Python package/test]   | ______________ ERROR at setup of test_same_name_people_other_name ______________\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def ensure_connection(self):\n[Test and build Python package/test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[Test and build Python package/test]   |         if self.connection is None:\n[Test and build Python package/test]   |             with self.wrap_database_errors:\n[Test and build Python package/test]   | >               self.connect()\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(self):\n[Test and build Python package/test]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[Test and build Python package/test]   |         # Check for invalid configurations.\n[Test and build Python package/test]   |         self.check_settings()\n[Test and build Python package/test]   |         # In case the previous connection was closed while in an atomic block\n[Test and build Python package/test]   |         self.in_atomic_block = False\n[Test and build Python package/test]   |         self.savepoint_ids = []\n[Test and build Python package/test]   |         self.needs_rollback = False\n[Test and build Python package/test]   |         # Reset parameters defining when to close the connection\n[Test and build Python package/test]   |         max_age = self.settings_dict['CONN_MAX_AGE']\n[Test and build Python package/test]   |         self.close_at = None if max_age is None else time.time() + max_age\n[Test and build Python package/test]   |         self.closed_in_transaction = False\n[Test and build Python package/test]   |         self.errors_occurred = False\n[Test and build Python package/test]   |         # Establish the connection\n[Test and build Python package/test]   |         conn_params = self.get_connection_params()\n[Test and build Python package/test]   | >       self.connection = self.get_new_connection(conn_params)\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:195: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | conn_params = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def get_new_connection(self, conn_params):\n[Test and build Python package/test]   | >       connection = Database.connect(**conn_params)\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/postgresql/base.py:178: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | dsn = 'user=test password=test host=localhost port=5432 dbname=test'\n[Test and build Python package/test]   | connection_factory = None, cursor_factory = None\n[Test and build Python package/test]   | kwargs = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | kwasync = {}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         Create a new database connection.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         The connection parameters can be specified as a string:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         or using a set of keyword arguments:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Or as a mix of both. The basic connection parameters are:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         - *dbname*: the database name\n[Test and build Python package/test]   |         - *database*: the database name (only as keyword argument)\n[Test and build Python package/test]   |         - *user*: user name used to authenticate\n[Test and build Python package/test]   |         - *password*: password used to authenticate\n[Test and build Python package/test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Test and build Python package/test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *connection_factory* parameter a different class or connections\n[Test and build Python package/test]   |         factory can be specified. It should be a callable object taking a dsn\n[Test and build Python package/test]   |         argument.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Test and build Python package/test]   |         used by cursor().\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Test and build Python package/test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Any other keyword parameter will be passed to the underlying client\n[Test and build Python package/test]   |         library: the list of supported parameters depends on the library version.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         kwasync = {}\n[Test and build Python package/test]   |         if 'async' in kwargs:\n[Test and build Python package/test]   |             kwasync['async'] = kwargs.pop('async')\n[Test and build Python package/test]   |         if 'async_' in kwargs:\n[Test and build Python package/test]   |             kwasync['async_'] = kwargs.pop('async_')\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Test and build Python package/test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Test and build Python package/test]   | E       psycopg2.OperationalError: could not connect to server: Connection refused\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (127.0.0.1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | E       could not connect to server: Cannot assign requested address\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (::1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/psycopg2/__init__.py:122: OperationalError\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | The above exception was the direct cause of the following exception:\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | request = <SubRequest '_django_db_marker' for <Function test_same_name_people_other_name>>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     @pytest.fixture(autouse=True)\n[Test and build Python package/test]   |     def _django_db_marker(request) -> None:\n[Test and build Python package/test]   |         \"\"\"Implement the django_db marker, internal to pytest-django.\"\"\"\n[Test and build Python package/test]   |         marker = request.node.get_closest_marker(\"django_db\")\n[Test and build Python package/test]   |         if marker:\n[Test and build Python package/test]   | >           request.getfixturevalue(\"_django_db_helper\")\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/pytest_django/plugin.py:465: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/pytest_django/fixtures.py:125: in django_db_setup\n[Test and build Python package/test]   |     **setup_databases_args\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/test/utils.py:174: in setup_databases\n[Test and build Python package/test]   |     serialize=connection.settings_dict.get('TEST', {}).get('SERIALIZE', True),\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/creation.py:58: in create_test_db\n[Test and build Python package/test]   |     self._create_test_db(verbosity, autoclobber, keepdb)\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/creation.py:168: in _create_test_db\n[Test and build Python package/test]   |     with self._nodb_connection.cursor() as cursor:\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:256: in cursor\n[Test and build Python package/test]   |     return self._cursor()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:233: in _cursor\n[Test and build Python package/test]   |     self.ensure_connection()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: in ensure_connection\n[Test and build Python package/test]   |     self.connect()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/utils.py:89: in __exit__\n[Test and build Python package/test]   |     raise dj_exc_value.with_traceback(traceback) from exc_value\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: in ensure_connection\n[Test and build Python package/test]   |     self.connect()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:195: in connect\n[Test and build Python package/test]   |     self.connection = self.get_new_connection(conn_params)\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/postgresql/base.py:178: in get_new_connection\n[Test and build Python package/test]   |     connection = Database.connect(**conn_params)\n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | dsn = 'user=test password=test host=localhost port=5432 dbname=test'\n[Test and build Python package/test]   | connection_factory = None, cursor_factory = None\n[Test and build Python package/test]   | kwargs = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | kwasync = {}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         Create a new database connection.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         The connection parameters can be specified as a string:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         or using a set of keyword arguments:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Or as a mix of both. The basic connection parameters are:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         - *dbname*: the database name\n[Test and build Python package/test]   |         - *database*: the database name (only as keyword argument)\n[Test and build Python package/test]   |         - *user*: user name used to authenticate\n[Test and build Python package/test]   |         - *password*: password used to authenticate\n[Test and build Python package/test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Test and build Python package/test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *connection_factory* parameter a different class or connections\n[Test and build Python package/test]   |         factory can be specified. It should be a callable object taking a dsn\n[Test and build Python package/test]   |         argument.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Test and build Python package/test]   |         used by cursor().\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Test and build Python package/test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Any other keyword parameter will be passed to the underlying client\n[Test and build Python package/test]   |         library: the list of supported parameters depends on the library version.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         kwasync = {}\n[Test and build Python package/test]   |         if 'async' in kwargs:\n[Test and build Python package/test]   |             kwasync['async'] = kwargs.pop('async')\n[Test and build Python package/test]   |         if 'async_' in kwargs:\n[Test and build Python package/test]   |             kwasync['async_'] = kwargs.pop('async_')\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Test and build Python package/test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Test and build Python package/test]   | E       django.db.utils.OperationalError: could not connect to server: Connection refused\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (127.0.0.1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | E       could not connect to server: Cannot assign requested address\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (::1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/psycopg2/__init__.py:122: OperationalError\n[Test and build Python package/test]   | ________________ ERROR at setup of test_same_name_second_import ________________\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def ensure_connection(self):\n[Test and build Python package/test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[Test and build Python package/test]   |         if self.connection is None:\n[Test and build Python package/test]   |             with self.wrap_database_errors:\n[Test and build Python package/test]   | >               self.connect()\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(self):\n[Test and build Python package/test]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[Test and build Python package/test]   |         # Check for invalid configurations.\n[Test and build Python package/test]   |         self.check_settings()\n[Test and build Python package/test]   |         # In case the previous connection was closed while in an atomic block\n[Test and build Python package/test]   |         self.in_atomic_block = False\n[Test and build Python package/test]   |         self.savepoint_ids = []\n[Test and build Python package/test]   |         self.needs_rollback = False\n[Test and build Python package/test]   |         # Reset parameters defining when to close the connection\n[Test and build Python package/test]   |         max_age = self.settings_dict['CONN_MAX_AGE']\n[Test and build Python package/test]   |         self.close_at = None if max_age is None else time.time() + max_age\n[Test and build Python package/test]   |         self.closed_in_transaction = False\n[Test and build Python package/test]   |         self.errors_occurred = False\n[Test and build Python package/test]   |         # Establish the connection\n[Test and build Python package/test]   |         conn_params = self.get_connection_params()\n[Test and build Python package/test]   | >       self.connection = self.get_new_connection(conn_params)\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:195: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | conn_params = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def get_new_connection(self, conn_params):\n[Test and build Python package/test]   | >       connection = Database.connect(**conn_params)\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/postgresql/base.py:178: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | dsn = 'user=test password=test host=localhost port=5432 dbname=test'\n[Test and build Python package/test]   | connection_factory = None, cursor_factory = None\n[Test and build Python package/test]   | kwargs = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | kwasync = {}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         Create a new database connection.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         The connection parameters can be specified as a string:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         or using a set of keyword arguments:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Or as a mix of both. The basic connection parameters are:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         - *dbname*: the database name\n[Test and build Python package/test]   |         - *database*: the database name (only as keyword argument)\n[Test and build Python package/test]   |         - *user*: user name used to authenticate\n[Test and build Python package/test]   |         - *password*: password used to authenticate\n[Test and build Python package/test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Test and build Python package/test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *connection_factory* parameter a different class or connections\n[Test and build Python package/test]   |         factory can be specified. It should be a callable object taking a dsn\n[Test and build Python package/test]   |         argument.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Test and build Python package/test]   |         used by cursor().\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Test and build Python package/test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Any other keyword parameter will be passed to the underlying client\n[Test and build Python package/test]   |         library: the list of supported parameters depends on the library version.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         kwasync = {}\n[Test and build Python package/test]   |         if 'async' in kwargs:\n[Test and build Python package/test]   |             kwasync['async'] = kwargs.pop('async')\n[Test and build Python package/test]   |         if 'async_' in kwargs:\n[Test and build Python package/test]   |             kwasync['async_'] = kwargs.pop('async_')\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Test and build Python package/test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Test and build Python package/test]   | E       psycopg2.OperationalError: could not connect to server: Connection refused\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (127.0.0.1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | E       could not connect to server: Cannot assign requested address\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (::1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/psycopg2/__init__.py:122: OperationalError\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | The above exception was the direct cause of the following exception:\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | request = <SubRequest '_django_db_marker' for <Function test_same_name_second_import>>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     @pytest.fixture(autouse=True)\n[Test and build Python package/test]   |     def _django_db_marker(request) -> None:\n[Test and build Python package/test]   |         \"\"\"Implement the django_db marker, internal to pytest-django.\"\"\"\n[Test and build Python package/test]   |         marker = request.node.get_closest_marker(\"django_db\")\n[Test and build Python package/test]   |         if marker:\n[Test and build Python package/test]   | >           request.getfixturevalue(\"_django_db_helper\")\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/pytest_django/plugin.py:465: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/pytest_django/fixtures.py:125: in django_db_setup\n[Test and build Python package/test]   |     **setup_databases_args\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/test/utils.py:174: in setup_databases\n[Test and build Python package/test]   |     serialize=connection.settings_dict.get('TEST', {}).get('SERIALIZE', True),\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/creation.py:58: in create_test_db\n[Test and build Python package/test]   |     self._create_test_db(verbosity, autoclobber, keepdb)\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/creation.py:168: in _create_test_db\n[Test and build Python package/test]   |     with self._nodb_connection.cursor() as cursor:\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:256: in cursor\n[Test and build Python package/test]   |     return self._cursor()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:233: in _cursor\n[Test and build Python package/test]   |     self.ensure_connection()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: in ensure_connection\n[Test and build Python package/test]   |     self.connect()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/utils.py:89: in __exit__\n[Test and build Python package/test]   |     raise dj_exc_value.with_traceback(traceback) from exc_value\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: in ensure_connection\n[Test and build Python package/test]   |     self.connect()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:195: in connect\n[Test and build Python package/test]   |     self.connection = self.get_new_connection(conn_params)\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/postgresql/base.py:178: in get_new_connection\n[Test and build Python package/test]   |     connection = Database.connect(**conn_params)\n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | dsn = 'user=test password=test host=localhost port=5432 dbname=test'\n[Test and build Python package/test]   | connection_factory = None, cursor_factory = None\n[Test and build Python package/test]   | kwargs = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | kwasync = {}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         Create a new database connection.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         The connection parameters can be specified as a string:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         or using a set of keyword arguments:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Or as a mix of both. The basic connection parameters are:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         - *dbname*: the database name\n[Test and build Python package/test]   |         - *database*: the database name (only as keyword argument)\n[Test and build Python package/test]   |         - *user*: user name used to authenticate\n[Test and build Python package/test]   |         - *password*: password used to authenticate\n[Test and build Python package/test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Test and build Python package/test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *connection_factory* parameter a different class or connections\n[Test and build Python package/test]   |         factory can be specified. It should be a callable object taking a dsn\n[Test and build Python package/test]   |         argument.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Test and build Python package/test]   |         used by cursor().\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Test and build Python package/test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Any other keyword parameter will be passed to the underlying client\n[Test and build Python package/test]   |         library: the list of supported parameters depends on the library version.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         kwasync = {}\n[Test and build Python package/test]   |         if 'async' in kwargs:\n[Test and build Python package/test]   |             kwasync['async'] = kwargs.pop('async')\n[Test and build Python package/test]   |         if 'async_' in kwargs:\n[Test and build Python package/test]   |             kwasync['async_'] = kwargs.pop('async_')\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Test and build Python package/test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Test and build Python package/test]   | E       django.db.utils.OperationalError: could not connect to server: Connection refused\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (127.0.0.1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | E       could not connect to server: Cannot assign requested address\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (::1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/psycopg2/__init__.py:122: OperationalError\n[Test and build Python package/test]   | ____________________ ERROR at setup of test_resolve_json_id ____________________\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def ensure_connection(self):\n[Test and build Python package/test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[Test and build Python package/test]   |         if self.connection is None:\n[Test and build Python package/test]   |             with self.wrap_database_errors:\n[Test and build Python package/test]   | >               self.connect()\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(self):\n[Test and build Python package/test]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[Test and build Python package/test]   |         # Check for invalid configurations.\n[Test and build Python package/test]   |         self.check_settings()\n[Test and build Python package/test]   |         # In case the previous connection was closed while in an atomic block\n[Test and build Python package/test]   |         self.in_atomic_block = False\n[Test and build Python package/test]   |         self.savepoint_ids = []\n[Test and build Python package/test]   |         self.needs_rollback = False\n[Test and build Python package/test]   |         # Reset parameters defining when to close the connection\n[Test and build Python package/test]   |         max_age = self.settings_dict['CONN_MAX_AGE']\n[Test and build Python package/test]   |         self.close_at = None if max_age is None else time.time() + max_age\n[Test and build Python package/test]   |         self.closed_in_transaction = False\n[Test and build Python package/test]   |         self.errors_occurred = False\n[Test and build Python package/test]   |         # Establish the connection\n[Test and build Python package/test]   |         conn_params = self.get_connection_params()\n[Test and build Python package/test]   | >       self.connection = self.get_new_connection(conn_params)\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:195: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | conn_params = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def get_new_connection(self, conn_params):\n[Test and build Python package/test]   | >       connection = Database.connect(**conn_params)\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/postgresql/base.py:178: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | dsn = 'user=test password=test host=localhost port=5432 dbname=test'\n[Test and build Python package/test]   | connection_factory = None, cursor_factory = None\n[Test and build Python package/test]   | kwargs = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | kwasync = {}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         Create a new database connection.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         The connection parameters can be specified as a string:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         or using a set of keyword arguments:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Or as a mix of both. The basic connection parameters are:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         - *dbname*: the database name\n[Test and build Python package/test]   |         - *database*: the database name (only as keyword argument)\n[Test and build Python package/test]   |         - *user*: user name used to authenticate\n[Test and build Python package/test]   |         - *password*: password used to authenticate\n[Test and build Python package/test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Test and build Python package/test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *connection_factory* parameter a different class or connections\n[Test and build Python package/test]   |         factory can be specified. It should be a callable object taking a dsn\n[Test and build Python package/test]   |         argument.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Test and build Python package/test]   |         used by cursor().\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Test and build Python package/test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Any other keyword parameter will be passed to the underlying client\n[Test and build Python package/test]   |         library: the list of supported parameters depends on the library version.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         kwasync = {}\n[Test and build Python package/test]   |         if 'async' in kwargs:\n[Test and build Python package/test]   |             kwasync['async'] = kwargs.pop('async')\n[Test and build Python package/test]   |         if 'async_' in kwargs:\n[Test and build Python package/test]   |             kwasync['async_'] = kwargs.pop('async_')\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Test and build Python package/test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Test and build Python package/test]   | E       psycopg2.OperationalError: could not connect to server: Connection refused\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (127.0.0.1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | E       could not connect to server: Cannot assign requested address\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (::1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/psycopg2/__init__.py:122: OperationalError\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | The above exception was the direct cause of the following exception:\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | request = <SubRequest '_django_db_marker' for <Function test_resolve_json_id>>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     @pytest.fixture(autouse=True)\n[Test and build Python package/test]   |     def _django_db_marker(request) -> None:\n[Test and build Python package/test]   |         \"\"\"Implement the django_db marker, internal to pytest-django.\"\"\"\n[Test and build Python package/test]   |         marker = request.node.get_closest_marker(\"django_db\")\n[Test and build Python package/test]   |         if marker:\n[Test and build Python package/test]   | >           request.getfixturevalue(\"_django_db_helper\")\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/pytest_django/plugin.py:465: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/pytest_django/fixtures.py:125: in django_db_setup\n[Test and build Python package/test]   |     **setup_databases_args\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/test/utils.py:174: in setup_databases\n[Test and build Python package/test]   |     serialize=connection.settings_dict.get('TEST', {}).get('SERIALIZE', True),\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/creation.py:58: in create_test_db\n[Test and build Python package/test]   |     self._create_test_db(verbosity, autoclobber, keepdb)\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/creation.py:168: in _create_test_db\n[Test and build Python package/test]   |     with self._nodb_connection.cursor() as cursor:\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:256: in cursor\n[Test and build Python package/test]   |     return self._cursor()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:233: in _cursor\n[Test and build Python package/test]   |     self.ensure_connection()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: in ensure_connection\n[Test and build Python package/test]   |     self.connect()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/utils.py:89: in __exit__\n[Test and build Python package/test]   |     raise dj_exc_value.with_traceback(traceback) from exc_value\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: in ensure_connection\n[Test and build Python package/test]   |     self.connect()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:195: in connect\n[Test and build Python package/test]   |     self.connection = self.get_new_connection(conn_params)\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/postgresql/base.py:178: in get_new_connection\n[Test and build Python package/test]   |     connection = Database.connect(**conn_params)\n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | dsn = 'user=test password=test host=localhost port=5432 dbname=test'\n[Test and build Python package/test]   | connection_factory = None, cursor_factory = None\n[Test and build Python package/test]   | kwargs = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | kwasync = {}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         Create a new database connection.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         The connection parameters can be specified as a string:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         or using a set of keyword arguments:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Or as a mix of both. The basic connection parameters are:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         - *dbname*: the database name\n[Test and build Python package/test]   |         - *database*: the database name (only as keyword argument)\n[Test and build Python package/test]   |         - *user*: user name used to authenticate\n[Test and build Python package/test]   |         - *password*: password used to authenticate\n[Test and build Python package/test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Test and build Python package/test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *connection_factory* parameter a different class or connections\n[Test and build Python package/test]   |         factory can be specified. It should be a callable object taking a dsn\n[Test and build Python package/test]   |         argument.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Test and build Python package/test]   |         used by cursor().\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Test and build Python package/test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Any other keyword parameter will be passed to the underlying client\n[Test and build Python package/test]   |         library: the list of supported parameters depends on the library version.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         kwasync = {}\n[Test and build Python package/test]   |         if 'async' in kwargs:\n[Test and build Python package/test]   |             kwasync['async'] = kwargs.pop('async')\n[Test and build Python package/test]   |         if 'async_' in kwargs:\n[Test and build Python package/test]   |             kwasync['async_'] = kwargs.pop('async_')\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Test and build Python package/test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Test and build Python package/test]   | E       django.db.utils.OperationalError: could not connect to server: Connection refused\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (127.0.0.1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | E       could not connect to server: Cannot assign requested address\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (::1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/psycopg2/__init__.py:122: OperationalError\n[Test and build Python package/test]   | _________ ERROR at setup of test_resolve_json_id_multiple_family_name __________\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def ensure_connection(self):\n[Test and build Python package/test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[Test and build Python package/test]   |         if self.connection is None:\n[Test and build Python package/test]   |             with self.wrap_database_errors:\n[Test and build Python package/test]   | >               self.connect()\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(self):\n[Test and build Python package/test]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[Test and build Python package/test]   |         # Check for invalid configurations.\n[Test and build Python package/test]   |         self.check_settings()\n[Test and build Python package/test]   |         # In case the previous connection was closed while in an atomic block\n[Test and build Python package/test]   |         self.in_atomic_block = False\n[Test and build Python package/test]   |         self.savepoint_ids = []\n[Test and build Python package/test]   |         self.needs_rollback = False\n[Test and build Python package/test]   |         # Reset parameters defining when to close the connection\n[Test and build Python package/test]   |         max_age = self.settings_dict['CONN_MAX_AGE']\n[Test and build Python package/test]   |         self.close_at = None if max_age is None else time.time() + max_age\n[Test and build Python package/test]   |         self.closed_in_transaction = False\n[Test and build Python package/test]   |         self.errors_occurred = False\n[Test and build Python package/test]   |         # Establish the connection\n[Test and build Python package/test]   |         conn_params = self.get_connection_params()\n[Test and build Python package/test]   | >       self.connection = self.get_new_connection(conn_params)\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:195: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | conn_params = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def get_new_connection(self, conn_params):\n[Test and build Python package/test]   | >       connection = Database.connect(**conn_params)\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/postgresql/base.py:178: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | dsn = 'user=test password=test host=localhost port=5432 dbname=test'\n[Test and build Python package/test]   | connection_factory = None, cursor_factory = None\n[Test and build Python package/test]   | kwargs = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | kwasync = {}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         Create a new database connection.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         The connection parameters can be specified as a string:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         or using a set of keyword arguments:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Or as a mix of both. The basic connection parameters are:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         - *dbname*: the database name\n[Test and build Python package/test]   |         - *database*: the database name (only as keyword argument)\n[Test and build Python package/test]   |         - *user*: user name used to authenticate\n[Test and build Python package/test]   |         - *password*: password used to authenticate\n[Test and build Python package/test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Test and build Python package/test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *connection_factory* parameter a different class or connections\n[Test and build Python package/test]   |         factory can be specified. It should be a callable object taking a dsn\n[Test and build Python package/test]   |         argument.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Test and build Python package/test]   |         used by cursor().\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Test and build Python package/test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Any other keyword parameter will be passed to the underlying client\n[Test and build Python package/test]   |         library: the list of supported parameters depends on the library version.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         kwasync = {}\n[Test and build Python package/test]   |         if 'async' in kwargs:\n[Test and build Python package/test]   |             kwasync['async'] = kwargs.pop('async')\n[Test and build Python package/test]   |         if 'async_' in kwargs:\n[Test and build Python package/test]   |             kwasync['async_'] = kwargs.pop('async_')\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Test and build Python package/test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Test and build Python package/test]   | E       psycopg2.OperationalError: could not connect to server: Connection refused\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (127.0.0.1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | E       could not connect to server: Cannot assign requested address\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (::1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/psycopg2/__init__.py:122: OperationalError\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | The above exception was the direct cause of the following exception:\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | request = <SubRequest '_django_db_marker' for <Function test_resolve_json_id_multiple_family_name>>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     @pytest.fixture(autouse=True)\n[Test and build Python package/test]   |     def _django_db_marker(request) -> None:\n[Test and build Python package/test]   |         \"\"\"Implement the django_db marker, internal to pytest-django.\"\"\"\n[Test and build Python package/test]   |         marker = request.node.get_closest_marker(\"django_db\")\n[Test and build Python package/test]   |         if marker:\n[Test and build Python package/test]   | >           request.getfixturevalue(\"_django_db_helper\")\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/pytest_django/plugin.py:465: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/pytest_django/fixtures.py:125: in django_db_setup\n[Test and build Python package/test]   |     **setup_databases_args\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/test/utils.py:174: in setup_databases\n[Test and build Python package/test]   |     serialize=connection.settings_dict.get('TEST', {}).get('SERIALIZE', True),\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/creation.py:58: in create_test_db\n[Test and build Python package/test]   |     self._create_test_db(verbosity, autoclobber, keepdb)\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/creation.py:168: in _create_test_db\n[Test and build Python package/test]   |     with self._nodb_connection.cursor() as cursor:\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:256: in cursor\n[Test and build Python package/test]   |     return self._cursor()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:233: in _cursor\n[Test and build Python package/test]   |     self.ensure_connection()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: in ensure_connection\n[Test and build Python package/test]   |     self.connect()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/utils.py:89: in __exit__\n[Test and build Python package/test]   |     raise dj_exc_value.with_traceback(traceback) from exc_value\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: in ensure_connection\n[Test and build Python package/test]   |     self.connect()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:195: in connect\n[Test and build Python package/test]   |     self.connection = self.get_new_connection(conn_params)\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/postgresql/base.py:178: in get_new_connection\n[Test and build Python package/test]   |     connection = Database.connect(**conn_params)\n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | dsn = 'user=test password=test host=localhost port=5432 dbname=test'\n[Test and build Python package/test]   | connection_factory = None, cursor_factory = None\n[Test and build Python package/test]   | kwargs = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | kwasync = {}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         Create a new database connection.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         The connection parameters can be specified as a string:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         or using a set of keyword arguments:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Or as a mix of both. The basic connection parameters are:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         - *dbname*: the database name\n[Test and build Python package/test]   |         - *database*: the database name (only as keyword argument)\n[Test and build Python package/test]   |         - *user*: user name used to authenticate\n[Test and build Python package/test]   |         - *password*: password used to authenticate\n[Test and build Python package/test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Test and build Python package/test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *connection_factory* parameter a different class or connections\n[Test and build Python package/test]   |         factory can be specified. It should be a callable object taking a dsn\n[Test and build Python package/test]   |         argument.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Test and build Python package/test]   |         used by cursor().\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Test and build Python package/test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Any other keyword parameter will be passed to the underlying client\n[Test and build Python package/test]   |         library: the list of supported parameters depends on the library version.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         kwasync = {}\n[Test and build Python package/test]   |         if 'async' in kwargs:\n[Test and build Python package/test]   |             kwasync['async'] = kwargs.pop('async')\n[Test and build Python package/test]   |         if 'async_' in kwargs:\n[Test and build Python package/test]   |             kwasync['async_'] = kwargs.pop('async_')\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Test and build Python package/test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Test and build Python package/test]   | E       django.db.utils.OperationalError: could not connect to server: Connection refused\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (127.0.0.1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | E       could not connect to server: Cannot assign requested address\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (::1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/psycopg2/__init__.py:122: OperationalError\n[Test and build Python package/test]   | _______________________ ERROR at setup of test_full_post _______________________\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def ensure_connection(self):\n[Test and build Python package/test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[Test and build Python package/test]   |         if self.connection is None:\n[Test and build Python package/test]   |             with self.wrap_database_errors:\n[Test and build Python package/test]   | >               self.connect()\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(self):\n[Test and build Python package/test]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[Test and build Python package/test]   |         # Check for invalid configurations.\n[Test and build Python package/test]   |         self.check_settings()\n[Test and build Python package/test]   |         # In case the previous connection was closed while in an atomic block\n[Test and build Python package/test]   |         self.in_atomic_block = False\n[Test and build Python package/test]   |         self.savepoint_ids = []\n[Test and build Python package/test]   |         self.needs_rollback = False\n[Test and build Python package/test]   |         # Reset parameters defining when to close the connection\n[Test and build Python package/test]   |         max_age = self.settings_dict['CONN_MAX_AGE']\n[Test and build Python package/test]   |         self.close_at = None if max_age is None else time.time() + max_age\n[Test and build Python package/test]   |         self.closed_in_transaction = False\n[Test and build Python package/test]   |         self.errors_occurred = False\n[Test and build Python package/test]   |         # Establish the connection\n[Test and build Python package/test]   |         conn_params = self.get_connection_params()\n[Test and build Python package/test]   | >       self.connection = self.get_new_connection(conn_params)\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:195: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | conn_params = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def get_new_connection(self, conn_params):\n[Test and build Python package/test]   | >       connection = Database.connect(**conn_params)\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/postgresql/base.py:178: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | dsn = 'user=test password=test host=localhost port=5432 dbname=test'\n[Test and build Python package/test]   | connection_factory = None, cursor_factory = None\n[Test and build Python package/test]   | kwargs = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | kwasync = {}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         Create a new database connection.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         The connection parameters can be specified as a string:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         or using a set of keyword arguments:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Or as a mix of both. The basic connection parameters are:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         - *dbname*: the database name\n[Test and build Python package/test]   |         - *database*: the database name (only as keyword argument)\n[Test and build Python package/test]   |         - *user*: user name used to authenticate\n[Test and build Python package/test]   |         - *password*: password used to authenticate\n[Test and build Python package/test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Test and build Python package/test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *connection_factory* parameter a different class or connections\n[Test and build Python package/test]   |         factory can be specified. It should be a callable object taking a dsn\n[Test and build Python package/test]   |         argument.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Test and build Python package/test]   |         used by cursor().\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Test and build Python package/test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Any other keyword parameter will be passed to the underlying client\n[Test and build Python package/test]   |         library: the list of supported parameters depends on the library version.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         kwasync = {}\n[Test and build Python package/test]   |         if 'async' in kwargs:\n[Test and build Python package/test]   |             kwasync['async'] = kwargs.pop('async')\n[Test and build Python package/test]   |         if 'async_' in kwargs:\n[Test and build Python package/test]   |             kwasync['async_'] = kwargs.pop('async_')\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Test and build Python package/test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Test and build Python package/test]   | E       psycopg2.OperationalError: could not connect to server: Connection refused\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (127.0.0.1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | E       could not connect to server: Cannot assign requested address\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (::1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/psycopg2/__init__.py:122: OperationalError\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | The above exception was the direct cause of the following exception:\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | request = <SubRequest '_django_db_marker' for <Function test_full_post>>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     @pytest.fixture(autouse=True)\n[Test and build Python package/test]   |     def _django_db_marker(request) -> None:\n[Test and build Python package/test]   |         \"\"\"Implement the django_db marker, internal to pytest-django.\"\"\"\n[Test and build Python package/test]   |         marker = request.node.get_closest_marker(\"django_db\")\n[Test and build Python package/test]   |         if marker:\n[Test and build Python package/test]   | >           request.getfixturevalue(\"_django_db_helper\")\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/pytest_django/plugin.py:465: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/pytest_django/fixtures.py:125: in django_db_setup\n[Test and build Python package/test]   |     **setup_databases_args\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/test/utils.py:174: in setup_databases\n[Test and build Python package/test]   |     serialize=connection.settings_dict.get('TEST', {}).get('SERIALIZE', True),\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/creation.py:58: in create_test_db\n[Test and build Python package/test]   |     self._create_test_db(verbosity, autoclobber, keepdb)\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/creation.py:168: in _create_test_db\n[Test and build Python package/test]   |     with self._nodb_connection.cursor() as cursor:\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:256: in cursor\n[Test and build Python package/test]   |     return self._cursor()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:233: in _cursor\n[Test and build Python package/test]   |     self.ensure_connection()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: in ensure_connection\n[Test and build Python package/test]   |     self.connect()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/utils.py:89: in __exit__\n[Test and build Python package/test]   |     raise dj_exc_value.with_traceback(traceback) from exc_value\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: in ensure_connection\n[Test and build Python package/test]   |     self.connect()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:195: in connect\n[Test and build Python package/test]   |     self.connection = self.get_new_connection(conn_params)\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/postgresql/base.py:178: in get_new_connection\n[Test and build Python package/test]   |     connection = Database.connect(**conn_params)\n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | dsn = 'user=test password=test host=localhost port=5432 dbname=test'\n[Test and build Python package/test]   | connection_factory = None, cursor_factory = None\n[Test and build Python package/test]   | kwargs = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | kwasync = {}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         Create a new database connection.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         The connection parameters can be specified as a string:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         or using a set of keyword arguments:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Or as a mix of both. The basic connection parameters are:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         - *dbname*: the database name\n[Test and build Python package/test]   |         - *database*: the database name (only as keyword argument)\n[Test and build Python package/test]   |         - *user*: user name used to authenticate\n[Test and build Python package/test]   |         - *password*: password used to authenticate\n[Test and build Python package/test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Test and build Python package/test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *connection_factory* parameter a different class or connections\n[Test and build Python package/test]   |         factory can be specified. It should be a callable object taking a dsn\n[Test and build Python package/test]   |         argument.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Test and build Python package/test]   |         used by cursor().\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Test and build Python package/test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Any other keyword parameter will be passed to the underlying client\n[Test and build Python package/test]   |         library: the list of supported parameters depends on the library version.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         kwasync = {}\n[Test and build Python package/test]   |         if 'async' in kwargs:\n[Test and build Python package/test]   |             kwasync['async'] = kwargs.pop('async')\n[Test and build Python package/test]   |         if 'async_' in kwargs:\n[Test and build Python package/test]   |             kwasync['async_'] = kwargs.pop('async_')\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Test and build Python package/test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Test and build Python package/test]   | E       django.db.utils.OperationalError: could not connect to server: Connection refused\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (127.0.0.1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | E       could not connect to server: Cannot assign requested address\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (::1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/psycopg2/__init__.py:122: OperationalError\n[Test and build Python package/test]   | _____________________ ERROR at setup of test_deduplication _____________________\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def ensure_connection(self):\n[Test and build Python package/test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[Test and build Python package/test]   |         if self.connection is None:\n[Test and build Python package/test]   |             with self.wrap_database_errors:\n[Test and build Python package/test]   | >               self.connect()\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(self):\n[Test and build Python package/test]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[Test and build Python package/test]   |         # Check for invalid configurations.\n[Test and build Python package/test]   |         self.check_settings()\n[Test and build Python package/test]   |         # In case the previous connection was closed while in an atomic block\n[Test and build Python package/test]   |         self.in_atomic_block = False\n[Test and build Python package/test]   |         self.savepoint_ids = []\n[Test and build Python package/test]   |         self.needs_rollback = False\n[Test and build Python package/test]   |         # Reset parameters defining when to close the connection\n[Test and build Python package/test]   |         max_age = self.settings_dict['CONN_MAX_AGE']\n[Test and build Python package/test]   |         self.close_at = None if max_age is None else time.time() + max_age\n[Test and build Python package/test]   |         self.closed_in_transaction = False\n[Test and build Python package/test]   |         self.errors_occurred = False\n[Test and build Python package/test]   |         # Establish the connection\n[Test and build Python package/test]   |         conn_params = self.get_connection_params()\n[Test and build Python package/test]   | >       self.connection = self.get_new_connection(conn_params)\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:195: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | conn_params = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def get_new_connection(self, conn_params):\n[Test and build Python package/test]   | >       connection = Database.connect(**conn_params)\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/postgresql/base.py:178: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | dsn = 'user=test password=test host=localhost port=5432 dbname=test'\n[Test and build Python package/test]   | connection_factory = None, cursor_factory = None\n[Test and build Python package/test]   | kwargs = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | kwasync = {}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         Create a new database connection.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         The connection parameters can be specified as a string:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         or using a set of keyword arguments:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Or as a mix of both. The basic connection parameters are:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         - *dbname*: the database name\n[Test and build Python package/test]   |         - *database*: the database name (only as keyword argument)\n[Test and build Python package/test]   |         - *user*: user name used to authenticate\n[Test and build Python package/test]   |         - *password*: password used to authenticate\n[Test and build Python package/test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Test and build Python package/test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *connection_factory* parameter a different class or connections\n[Test and build Python package/test]   |         factory can be specified. It should be a callable object taking a dsn\n[Test and build Python package/test]   |         argument.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Test and build Python package/test]   |         used by cursor().\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Test and build Python package/test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Any other keyword parameter will be passed to the underlying client\n[Test and build Python package/test]   |         library: the list of supported parameters depends on the library version.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         kwasync = {}\n[Test and build Python package/test]   |         if 'async' in kwargs:\n[Test and build Python package/test]   |             kwasync['async'] = kwargs.pop('async')\n[Test and build Python package/test]   |         if 'async_' in kwargs:\n[Test and build Python package/test]   |             kwasync['async_'] = kwargs.pop('async_')\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Test and build Python package/test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Test and build Python package/test]   | E       psycopg2.OperationalError: could not connect to server: Connection refused\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (127.0.0.1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | E       could not connect to server: Cannot assign requested address\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (::1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/psycopg2/__init__.py:122: OperationalError\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | The above exception was the direct cause of the following exception:\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | request = <SubRequest '_django_db_marker' for <Function test_deduplication>>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     @pytest.fixture(autouse=True)\n[Test and build Python package/test]   |     def _django_db_marker(request) -> None:\n[Test and build Python package/test]   |         \"\"\"Implement the django_db marker, internal to pytest-django.\"\"\"\n[Test and build Python package/test]   |         marker = request.node.get_closest_marker(\"django_db\")\n[Test and build Python package/test]   |         if marker:\n[Test and build Python package/test]   | >           request.getfixturevalue(\"_django_db_helper\")\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/pytest_django/plugin.py:465: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/pytest_django/fixtures.py:125: in django_db_setup\n[Test and build Python package/test]   |     **setup_databases_args\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/test/utils.py:174: in setup_databases\n[Test and build Python package/test]   |     serialize=connection.settings_dict.get('TEST', {}).get('SERIALIZE', True),\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/creation.py:58: in create_test_db\n[Test and build Python package/test]   |     self._create_test_db(verbosity, autoclobber, keepdb)\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/creation.py:168: in _create_test_db\n[Test and build Python package/test]   |     with self._nodb_connection.cursor() as cursor:\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:256: in cursor\n[Test and build Python package/test]   |     return self._cursor()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:233: in _cursor\n[Test and build Python package/test]   |     self.ensure_connection()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: in ensure_connection\n[Test and build Python package/test]   |     self.connect()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/utils.py:89: in __exit__\n[Test and build Python package/test]   |     raise dj_exc_value.with_traceback(traceback) from exc_value\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: in ensure_connection\n[Test and build Python package/test]   |     self.connect()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:195: in connect\n[Test and build Python package/test]   |     self.connection = self.get_new_connection(conn_params)\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/postgresql/base.py:178: in get_new_connection\n[Test and build Python package/test]   |     connection = Database.connect(**conn_params)\n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | dsn = 'user=test password=test host=localhost port=5432 dbname=test'\n[Test and build Python package/test]   | connection_factory = None, cursor_factory = None\n[Test and build Python package/test]   | kwargs = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | kwasync = {}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         Create a new database connection.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         The connection parameters can be specified as a string:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         or using a set of keyword arguments:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Or as a mix of both. The basic connection parameters are:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         - *dbname*: the database name\n[Test and build Python package/test]   |         - *database*: the database name (only as keyword argument)\n[Test and build Python package/test]   |         - *user*: user name used to authenticate\n[Test and build Python package/test]   |         - *password*: password used to authenticate\n[Test and build Python package/test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Test and build Python package/test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *connection_factory* parameter a different class or connections\n[Test and build Python package/test]   |         factory can be specified. It should be a callable object taking a dsn\n[Test and build Python package/test]   |         argument.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Test and build Python package/test]   |         used by cursor().\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Test and build Python package/test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Any other keyword parameter will be passed to the underlying client\n[Test and build Python package/test]   |         library: the list of supported parameters depends on the library version.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         kwasync = {}\n[Test and build Python package/test]   |         if 'async' in kwargs:\n[Test and build Python package/test]   |             kwasync['async'] = kwargs.pop('async')\n[Test and build Python package/test]   |         if 'async_' in kwargs:\n[Test and build Python package/test]   |             kwasync['async_'] = kwargs.pop('async_')\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Test and build Python package/test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Test and build Python package/test]   | E       django.db.utils.OperationalError: could not connect to server: Connection refused\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (127.0.0.1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | E       could not connect to server: Cannot assign requested address\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (::1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/psycopg2/__init__.py:122: OperationalError\n[Test and build Python package/test]   | ________________ ERROR at setup of test_resolve_special_json_id ________________\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def ensure_connection(self):\n[Test and build Python package/test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[Test and build Python package/test]   |         if self.connection is None:\n[Test and build Python package/test]   |             with self.wrap_database_errors:\n[Test and build Python package/test]   | >               self.connect()\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(self):\n[Test and build Python package/test]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[Test and build Python package/test]   |         # Check for invalid configurations.\n[Test and build Python package/test]   |         self.check_settings()\n[Test and build Python package/test]   |         # In case the previous connection was closed while in an atomic block\n[Test and build Python package/test]   |         self.in_atomic_block = False\n[Test and build Python package/test]   |         self.savepoint_ids = []\n[Test and build Python package/test]   |         self.needs_rollback = False\n[Test and build Python package/test]   |         # Reset parameters defining when to close the connection\n[Test and build Python package/test]   |         max_age = self.settings_dict['CONN_MAX_AGE']\n[Test and build Python package/test]   |         self.close_at = None if max_age is None else time.time() + max_age\n[Test and build Python package/test]   |         self.closed_in_transaction = False\n[Test and build Python package/test]   |         self.errors_occurred = False\n[Test and build Python package/test]   |         # Establish the connection\n[Test and build Python package/test]   |         conn_params = self.get_connection_params()\n[Test and build Python package/test]   | >       self.connection = self.get_new_connection(conn_params)\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:195: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | conn_params = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def get_new_connection(self, conn_params):\n[Test and build Python package/test]   | >       connection = Database.connect(**conn_params)\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/postgresql/base.py:178: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | dsn = 'user=test password=test host=localhost port=5432 dbname=test'\n[Test and build Python package/test]   | connection_factory = None, cursor_factory = None\n[Test and build Python package/test]   | kwargs = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | kwasync = {}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         Create a new database connection.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         The connection parameters can be specified as a string:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         or using a set of keyword arguments:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Or as a mix of both. The basic connection parameters are:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         - *dbname*: the database name\n[Test and build Python package/test]   |         - *database*: the database name (only as keyword argument)\n[Test and build Python package/test]   |         - *user*: user name used to authenticate\n[Test and build Python package/test]   |         - *password*: password used to authenticate\n[Test and build Python package/test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Test and build Python package/test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *connection_factory* parameter a different class or connections\n[Test and build Python package/test]   |         factory can be specified. It should be a callable object taking a dsn\n[Test and build Python package/test]   |         argument.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Test and build Python package/test]   |         used by cursor().\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Test and build Python package/test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Any other keyword parameter will be passed to the underlying client\n[Test and build Python package/test]   |         library: the list of supported parameters depends on the library version.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         kwasync = {}\n[Test and build Python package/test]   |         if 'async' in kwargs:\n[Test and build Python package/test]   |             kwasync['async'] = kwargs.pop('async')\n[Test and build Python package/test]   |         if 'async_' in kwargs:\n[Test and build Python package/test]   |             kwasync['async_'] = kwargs.pop('async_')\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Test and build Python package/test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Test and build Python package/test]   | E       psycopg2.OperationalError: could not connect to server: Connection refused\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (127.0.0.1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | E       could not connect to server: Cannot assign requested address\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (::1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/psycopg2/__init__.py:122: OperationalError\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | The above exception was the direct cause of the following exception:\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | request = <SubRequest '_django_db_marker' for <Function test_resolve_special_json_id>>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     @pytest.fixture(autouse=True)\n[Test and build Python package/test]   |     def _django_db_marker(request) -> None:\n[Test and build Python package/test]   |         \"\"\"Implement the django_db marker, internal to pytest-django.\"\"\"\n[Test and build Python package/test]   |         marker = request.node.get_closest_marker(\"django_db\")\n[Test and build Python package/test]   |         if marker:\n[Test and build Python package/test]   | >           request.getfixturevalue(\"_django_db_helper\")\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/pytest_django/plugin.py:465: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/pytest_django/fixtures.py:125: in django_db_setup\n[Test and build Python package/test]   |     **setup_databases_args\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/test/utils.py:174: in setup_databases\n[Test and build Python package/test]   |     serialize=connection.settings_dict.get('TEST', {}).get('SERIALIZE', True),\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/creation.py:58: in create_test_db\n[Test and build Python package/test]   |     self._create_test_db(verbosity, autoclobber, keepdb)\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/creation.py:168: in _create_test_db\n[Test and build Python package/test]   |     with self._nodb_connection.cursor() as cursor:\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:256: in cursor\n[Test and build Python package/test]   |     return self._cursor()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:233: in _cursor\n[Test and build Python package/test]   |     self.ensure_connection()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: in ensure_connection\n[Test and build Python package/test]   |     self.connect()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/utils.py:89: in __exit__\n[Test and build Python package/test]   |     raise dj_exc_value.with_traceback(traceback) from exc_value\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: in ensure_connection\n[Test and build Python package/test]   |     self.connect()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:195: in connect\n[Test and build Python package/test]   |     self.connection = self.get_new_connection(conn_params)\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/postgresql/base.py:178: in get_new_connection\n[Test and build Python package/test]   |     connection = Database.connect(**conn_params)\n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | dsn = 'user=test password=test host=localhost port=5432 dbname=test'\n[Test and build Python package/test]   | connection_factory = None, cursor_factory = None\n[Test and build Python package/test]   | kwargs = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | kwasync = {}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         Create a new database connection.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         The connection parameters can be specified as a string:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         or using a set of keyword arguments:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Or as a mix of both. The basic connection parameters are:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         - *dbname*: the database name\n[Test and build Python package/test]   |         - *database*: the database name (only as keyword argument)\n[Test and build Python package/test]   |         - *user*: user name used to authenticate\n[Test and build Python package/test]   |         - *password*: password used to authenticate\n[Test and build Python package/test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Test and build Python package/test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *connection_factory* parameter a different class or connections\n[Test and build Python package/test]   |         factory can be specified. It should be a callable object taking a dsn\n[Test and build Python package/test]   |         argument.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Test and build Python package/test]   |         used by cursor().\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Test and build Python package/test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Any other keyword parameter will be passed to the underlying client\n[Test and build Python package/test]   |         library: the list of supported parameters depends on the library version.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         kwasync = {}\n[Test and build Python package/test]   |         if 'async' in kwargs:\n[Test and build Python package/test]   |             kwasync['async'] = kwargs.pop('async')\n[Test and build Python package/test]   |         if 'async_' in kwargs:\n[Test and build Python package/test]   |             kwasync['async_'] = kwargs.pop('async_')\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Test and build Python package/test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Test and build Python package/test]   | E       django.db.utils.OperationalError: could not connect to server: Connection refused\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (127.0.0.1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | E       could not connect to server: Cannot assign requested address\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (::1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/psycopg2/__init__.py:122: OperationalError\n[Test and build Python package/test]   | ____________________ ERROR at setup of test_full_vote_event ____________________\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def ensure_connection(self):\n[Test and build Python package/test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[Test and build Python package/test]   |         if self.connection is None:\n[Test and build Python package/test]   |             with self.wrap_database_errors:\n[Test and build Python package/test]   | >               self.connect()\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(self):\n[Test and build Python package/test]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[Test and build Python package/test]   |         # Check for invalid configurations.\n[Test and build Python package/test]   |         self.check_settings()\n[Test and build Python package/test]   |         # In case the previous connection was closed while in an atomic block\n[Test and build Python package/test]   |         self.in_atomic_block = False\n[Test and build Python package/test]   |         self.savepoint_ids = []\n[Test and build Python package/test]   |         self.needs_rollback = False\n[Test and build Python package/test]   |         # Reset parameters defining when to close the connection\n[Test and build Python package/test]   |         max_age = self.settings_dict['CONN_MAX_AGE']\n[Test and build Python package/test]   |         self.close_at = None if max_age is None else time.time() + max_age\n[Test and build Python package/test]   |         self.closed_in_transaction = False\n[Test and build Python package/test]   |         self.errors_occurred = False\n[Test and build Python package/test]   |         # Establish the connection\n[Test and build Python package/test]   |         conn_params = self.get_connection_params()\n[Test and build Python package/test]   | >       self.connection = self.get_new_connection(conn_params)\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:195: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | conn_params = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def get_new_connection(self, conn_params):\n[Test and build Python package/test]   | >       connection = Database.connect(**conn_params)\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/postgresql/base.py:178: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | dsn = 'user=test password=test host=localhost port=5432 dbname=test'\n[Test and build Python package/test]   | connection_factory = None, cursor_factory = None\n[Test and build Python package/test]   | kwargs = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | kwasync = {}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         Create a new database connection.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         The connection parameters can be specified as a string:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         or using a set of keyword arguments:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Or as a mix of both. The basic connection parameters are:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         - *dbname*: the database name\n[Test and build Python package/test]   |         - *database*: the database name (only as keyword argument)\n[Test and build Python package/test]   |         - *user*: user name used to authenticate\n[Test and build Python package/test]   |         - *password*: password used to authenticate\n[Test and build Python package/test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Test and build Python package/test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *connection_factory* parameter a different class or connections\n[Test and build Python package/test]   |         factory can be specified. It should be a callable object taking a dsn\n[Test and build Python package/test]   |         argument.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Test and build Python package/test]   |         used by cursor().\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Test and build Python package/test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Any other keyword parameter will be passed to the underlying client\n[Test and build Python package/test]   |         library: the list of supported parameters depends on the library version.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         kwasync = {}\n[Test and build Python package/test]   |         if 'async' in kwargs:\n[Test and build Python package/test]   |             kwasync['async'] = kwargs.pop('async')\n[Test and build Python package/test]   |         if 'async_' in kwargs:\n[Test and build Python package/test]   |             kwasync['async_'] = kwargs.pop('async_')\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Test and build Python package/test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Test and build Python package/test]   | E       psycopg2.OperationalError: could not connect to server: Connection refused\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (127.0.0.1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | E       could not connect to server: Cannot assign requested address\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (::1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/psycopg2/__init__.py:122: OperationalError\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | The above exception was the direct cause of the following exception:\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | request = <SubRequest '_django_db_marker' for <Function test_full_vote_event>>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     @pytest.fixture(autouse=True)\n[Test and build Python package/test]   |     def _django_db_marker(request) -> None:\n[Test and build Python package/test]   |         \"\"\"Implement the django_db marker, internal to pytest-django.\"\"\"\n[Test and build Python package/test]   |         marker = request.node.get_closest_marker(\"django_db\")\n[Test and build Python package/test]   |         if marker:\n[Test and build Python package/test]   | >           request.getfixturevalue(\"_django_db_helper\")\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/pytest_django/plugin.py:465: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/pytest_django/fixtures.py:125: in django_db_setup\n[Test and build Python package/test]   |     **setup_databases_args\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/test/utils.py:174: in setup_databases\n[Test and build Python package/test]   |     serialize=connection.settings_dict.get('TEST', {}).get('SERIALIZE', True),\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/creation.py:58: in create_test_db\n[Test and build Python package/test]   |     self._create_test_db(verbosity, autoclobber, keepdb)\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/creation.py:168: in _create_test_db\n[Test and build Python package/test]   |     with self._nodb_connection.cursor() as cursor:\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:256: in cursor\n[Test and build Python package/test]   |     return self._cursor()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:233: in _cursor\n[Test and build Python package/test]   |     self.ensure_connection()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: in ensure_connection\n[Test and build Python package/test]   |     self.connect()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/utils.py:89: in __exit__\n[Test and build Python package/test]   |     raise dj_exc_value.with_traceback(traceback) from exc_value\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: in ensure_connection\n[Test and build Python package/test]   |     self.connect()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:195: in connect\n[Test and build Python package/test]   |     self.connection = self.get_new_connection(conn_params)\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/postgresql/base.py:178: in get_new_connection\n[Test and build Python package/test]   |     connection = Database.connect(**conn_params)\n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | dsn = 'user=test password=test host=localhost port=5432 dbname=test'\n[Test and build Python package/test]   | connection_factory = None, cursor_factory = None\n[Test and build Python package/test]   | kwargs = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | kwasync = {}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         Create a new database connection.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         The connection parameters can be specified as a string:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         or using a set of keyword arguments:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Or as a mix of both. The basic connection parameters are:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         - *dbname*: the database name\n[Test and build Python package/test]   |         - *database*: the database name (only as keyword argument)\n[Test and build Python package/test]   |         - *user*: user name used to authenticate\n[Test and build Python package/test]   |         - *password*: password used to authenticate\n[Test and build Python package/test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Test and build Python package/test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *connection_factory* parameter a different class or connections\n[Test and build Python package/test]   |         factory can be specified. It should be a callable object taking a dsn\n[Test and build Python package/test]   |         argument.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Test and build Python package/test]   |         used by cursor().\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Test and build Python package/test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Any other keyword parameter will be passed to the underlying client\n[Test and build Python package/test]   |         library: the list of supported parameters depends on the library version.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         kwasync = {}\n[Test and build Python package/test]   |         if 'async' in kwargs:\n[Test and build Python package/test]   |             kwasync['async'] = kwargs.pop('async')\n[Test and build Python package/test]   |         if 'async_' in kwargs:\n[Test and build Python package/test]   |             kwasync['async_'] = kwargs.pop('async_')\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Test and build Python package/test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Test and build Python package/test]   | E       django.db.utils.OperationalError: could not connect to server: Connection refused\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (127.0.0.1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | E       could not connect to server: Cannot assign requested address\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (::1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/psycopg2/__init__.py:122: OperationalError\n[Test and build Python package/test]   | _____________ ERROR at setup of test_vote_event_identifier_dedupe ______________\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def ensure_connection(self):\n[Test and build Python package/test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[Test and build Python package/test]   |         if self.connection is None:\n[Test and build Python package/test]   |             with self.wrap_database_errors:\n[Test and build Python package/test]   | >               self.connect()\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(self):\n[Test and build Python package/test]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[Test and build Python package/test]   |         # Check for invalid configurations.\n[Test and build Python package/test]   |         self.check_settings()\n[Test and build Python package/test]   |         # In case the previous connection was closed while in an atomic block\n[Test and build Python package/test]   |         self.in_atomic_block = False\n[Test and build Python package/test]   |         self.savepoint_ids = []\n[Test and build Python package/test]   |         self.needs_rollback = False\n[Test and build Python package/test]   |         # Reset parameters defining when to close the connection\n[Test and build Python package/test]   |         max_age = self.settings_dict['CONN_MAX_AGE']\n[Test and build Python package/test]   |         self.close_at = None if max_age is None else time.time() + max_age\n[Test and build Python package/test]   |         self.closed_in_transaction = False\n[Test and build Python package/test]   |         self.errors_occurred = False\n[Test and build Python package/test]   |         # Establish the connection\n[Test and build Python package/test]   |         conn_params = self.get_connection_params()\n[Test and build Python package/test]   | >       self.connection = self.get_new_connection(conn_params)\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:195: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | conn_params = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def get_new_connection(self, conn_params):\n[Test and build Python package/test]   | >       connection = Database.connect(**conn_params)\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/postgresql/base.py:178: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | dsn = 'user=test password=test host=localhost port=5432 dbname=test'\n[Test and build Python package/test]   | connection_factory = None, cursor_factory = None\n[Test and build Python package/test]   | kwargs = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | kwasync = {}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         Create a new database connection.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         The connection parameters can be specified as a string:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         or using a set of keyword arguments:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Or as a mix of both. The basic connection parameters are:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         - *dbname*: the database name\n[Test and build Python package/test]   |         - *database*: the database name (only as keyword argument)\n[Test and build Python package/test]   |         - *user*: user name used to authenticate\n[Test and build Python package/test]   |         - *password*: password used to authenticate\n[Test and build Python package/test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Test and build Python package/test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *connection_factory* parameter a different class or connections\n[Test and build Python package/test]   |         factory can be specified. It should be a callable object taking a dsn\n[Test and build Python package/test]   |         argument.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Test and build Python package/test]   |         used by cursor().\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Test and build Python package/test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Any other keyword parameter will be passed to the underlying client\n[Test and build Python package/test]   |         library: the list of supported parameters depends on the library version.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         kwasync = {}\n[Test and build Python package/test]   |         if 'async' in kwargs:\n[Test and build Python package/test]   |             kwasync['async'] = kwargs.pop('async')\n[Test and build Python package/test]   |         if 'async_' in kwargs:\n[Test and build Python package/test]   |             kwasync['async_'] = kwargs.pop('async_')\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Test and build Python package/test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Test and build Python package/test]   | E       psycopg2.OperationalError: could not connect to server: Connection refused\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (127.0.0.1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | E       could not connect to server: Cannot assign requested address\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (::1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/psycopg2/__init__.py:122: OperationalError\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | The above exception was the direct cause of the following exception:\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | request = <SubRequest '_django_db_marker' for <Function test_vote_event_identifier_dedupe>>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     @pytest.fixture(autouse=True)\n[Test and build Python package/test]   |     def _django_db_marker(request) -> None:\n[Test and build Python package/test]   |         \"\"\"Implement the django_db marker, internal to pytest-django.\"\"\"\n[Test and build Python package/test]   |         marker = request.node.get_closest_marker(\"django_db\")\n[Test and build Python package/test]   |         if marker:\n[Test and build Python package/test]   | >           request.getfixturevalue(\"_django_db_helper\")\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/pytest_django/plugin.py:465: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/pytest_django/fixtures.py:125: in django_db_setup\n[Test and build Python package/test]   |     **setup_databases_args\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/test/utils.py:174: in setup_databases\n[Test and build Python package/test]   |     serialize=connection.settings_dict.get('TEST', {}).get('SERIALIZE', True),\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/creation.py:58: in create_test_db\n[Test and build Python package/test]   |     self._create_test_db(verbosity, autoclobber, keepdb)\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/creation.py:168: in _create_test_db\n[Test and build Python package/test]   |     with self._nodb_connection.cursor() as cursor:\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:256: in cursor\n[Test and build Python package/test]   |     return self._cursor()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:233: in _cursor\n[Test and build Python package/test]   |     self.ensure_connection()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: in ensure_connection\n[Test and build Python package/test]   |     self.connect()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/utils.py:89: in __exit__\n[Test and build Python package/test]   |     raise dj_exc_value.with_traceback(traceback) from exc_value\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: in ensure_connection\n[Test and build Python package/test]   |     self.connect()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:195: in connect\n[Test and build Python package/test]   |     self.connection = self.get_new_connection(conn_params)\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/postgresql/base.py:178: in get_new_connection\n[Test and build Python package/test]   |     connection = Database.connect(**conn_params)\n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | dsn = 'user=test password=test host=localhost port=5432 dbname=test'\n[Test and build Python package/test]   | connection_factory = None, cursor_factory = None\n[Test and build Python package/test]   | kwargs = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | kwasync = {}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         Create a new database connection.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         The connection parameters can be specified as a string:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         or using a set of keyword arguments:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Or as a mix of both. The basic connection parameters are:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         - *dbname*: the database name\n[Test and build Python package/test]   |         - *database*: the database name (only as keyword argument)\n[Test and build Python package/test]   |         - *user*: user name used to authenticate\n[Test and build Python package/test]   |         - *password*: password used to authenticate\n[Test and build Python package/test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Test and build Python package/test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *connection_factory* parameter a different class or connections\n[Test and build Python package/test]   |         factory can be specified. It should be a callable object taking a dsn\n[Test and build Python package/test]   |         argument.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Test and build Python package/test]   |         used by cursor().\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Test and build Python package/test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Any other keyword parameter will be passed to the underlying client\n[Test and build Python package/test]   |         library: the list of supported parameters depends on the library version.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         kwasync = {}\n[Test and build Python package/test]   |         if 'async' in kwargs:\n[Test and build Python package/test]   |             kwasync['async'] = kwargs.pop('async')\n[Test and build Python package/test]   |         if 'async_' in kwargs:\n[Test and build Python package/test]   |             kwasync['async_'] = kwargs.pop('async_')\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Test and build Python package/test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Test and build Python package/test]   | E       django.db.utils.OperationalError: could not connect to server: Connection refused\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (127.0.0.1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | E       could not connect to server: Cannot assign requested address\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (::1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/psycopg2/__init__.py:122: OperationalError\n[Test and build Python package/test]   | ___________ ERROR at setup of test_vote_event_pupa_identifier_dedupe ___________\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def ensure_connection(self):\n[Test and build Python package/test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[Test and build Python package/test]   |         if self.connection is None:\n[Test and build Python package/test]   |             with self.wrap_database_errors:\n[Test and build Python package/test]   | >               self.connect()\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(self):\n[Test and build Python package/test]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[Test and build Python package/test]   |         # Check for invalid configurations.\n[Test and build Python package/test]   |         self.check_settings()\n[Test and build Python package/test]   |         # In case the previous connection was closed while in an atomic block\n[Test and build Python package/test]   |         self.in_atomic_block = False\n[Test and build Python package/test]   |         self.savepoint_ids = []\n[Test and build Python package/test]   |         self.needs_rollback = False\n[Test and build Python package/test]   |         # Reset parameters defining when to close the connection\n[Test and build Python package/test]   |         max_age = self.settings_dict['CONN_MAX_AGE']\n[Test and build Python package/test]   |         self.close_at = None if max_age is None else time.time() + max_age\n[Test and build Python package/test]   |         self.closed_in_transaction = False\n[Test and build Python package/test]   |         self.errors_occurred = False\n[Test and build Python package/test]   |         # Establish the connection\n[Test and build Python package/test]   |         conn_params = self.get_connection_params()\n[Test and build Python package/test]   | >       self.connection = self.get_new_connection(conn_params)\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:195: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | conn_params = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def get_new_connection(self, conn_params):\n[Test and build Python package/test]   | >       connection = Database.connect(**conn_params)\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/postgresql/base.py:178: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | dsn = 'user=test password=test host=localhost port=5432 dbname=test'\n[Test and build Python package/test]   | connection_factory = None, cursor_factory = None\n[Test and build Python package/test]   | kwargs = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | kwasync = {}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         Create a new database connection.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         The connection parameters can be specified as a string:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         or using a set of keyword arguments:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Or as a mix of both. The basic connection parameters are:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         - *dbname*: the database name\n[Test and build Python package/test]   |         - *database*: the database name (only as keyword argument)\n[Test and build Python package/test]   |         - *user*: user name used to authenticate\n[Test and build Python package/test]   |         - *password*: password used to authenticate\n[Test and build Python package/test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Test and build Python package/test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *connection_factory* parameter a different class or connections\n[Test and build Python package/test]   |         factory can be specified. It should be a callable object taking a dsn\n[Test and build Python package/test]   |         argument.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Test and build Python package/test]   |         used by cursor().\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Test and build Python package/test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Any other keyword parameter will be passed to the underlying client\n[Test and build Python package/test]   |         library: the list of supported parameters depends on the library version.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         kwasync = {}\n[Test and build Python package/test]   |         if 'async' in kwargs:\n[Test and build Python package/test]   |             kwasync['async'] = kwargs.pop('async')\n[Test and build Python package/test]   |         if 'async_' in kwargs:\n[Test and build Python package/test]   |             kwasync['async_'] = kwargs.pop('async_')\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Test and build Python package/test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Test and build Python package/test]   | E       psycopg2.OperationalError: could not connect to server: Connection refused\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (127.0.0.1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | E       could not connect to server: Cannot assign requested address\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (::1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/psycopg2/__init__.py:122: OperationalError\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | The above exception was the direct cause of the following exception:\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | request = <SubRequest '_django_db_marker' for <Function test_vote_event_pupa_identifier_dedupe>>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     @pytest.fixture(autouse=True)\n[Test and build Python package/test]   |     def _django_db_marker(request) -> None:\n[Test and build Python package/test]   |         \"\"\"Implement the django_db marker, internal to pytest-django.\"\"\"\n[Test and build Python package/test]   |         marker = request.node.get_closest_marker(\"django_db\")\n[Test and build Python package/test]   |         if marker:\n[Test and build Python package/test]   | >           request.getfixturevalue(\"_django_db_helper\")\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/pytest_django/plugin.py:465: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/pytest_django/fixtures.py:125: in django_db_setup\n[Test and build Python package/test]   |     **setup_databases_args\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/test/utils.py:174: in setup_databases\n[Test and build Python package/test]   |     serialize=connection.settings_dict.get('TEST', {}).get('SERIALIZE', True),\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/creation.py:58: in create_test_db\n[Test and build Python package/test]   |     self._create_test_db(verbosity, autoclobber, keepdb)\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/creation.py:168: in _create_test_db\n[Test and build Python package/test]   |     with self._nodb_connection.cursor() as cursor:\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:256: in cursor\n[Test and build Python package/test]   |     return self._cursor()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:233: in _cursor\n[Test and build Python package/test]   |     self.ensure_connection()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: in ensure_connection\n[Test and build Python package/test]   |     self.connect()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/utils.py:89: in __exit__\n[Test and build Python package/test]   |     raise dj_exc_value.with_traceback(traceback) from exc_value\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: in ensure_connection\n[Test and build Python package/test]   |     self.connect()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:195: in connect\n[Test and build Python package/test]   |     self.connection = self.get_new_connection(conn_params)\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/postgresql/base.py:178: in get_new_connection\n[Test and build Python package/test]   |     connection = Database.connect(**conn_params)\n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | dsn = 'user=test password=test host=localhost port=5432 dbname=test'\n[Test and build Python package/test]   | connection_factory = None, cursor_factory = None\n[Test and build Python package/test]   | kwargs = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | kwasync = {}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         Create a new database connection.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         The connection parameters can be specified as a string:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         or using a set of keyword arguments:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Or as a mix of both. The basic connection parameters are:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         - *dbname*: the database name\n[Test and build Python package/test]   |         - *database*: the database name (only as keyword argument)\n[Test and build Python package/test]   |         - *user*: user name used to authenticate\n[Test and build Python package/test]   |         - *password*: password used to authenticate\n[Test and build Python package/test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Test and build Python package/test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *connection_factory* parameter a different class or connections\n[Test and build Python package/test]   |         factory can be specified. It should be a callable object taking a dsn\n[Test and build Python package/test]   |         argument.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Test and build Python package/test]   |         used by cursor().\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Test and build Python package/test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Any other keyword parameter will be passed to the underlying client\n[Test and build Python package/test]   |         library: the list of supported parameters depends on the library version.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         kwasync = {}\n[Test and build Python package/test]   |         if 'async' in kwargs:\n[Test and build Python package/test]   |             kwasync['async'] = kwargs.pop('async')\n[Test and build Python package/test]   |         if 'async_' in kwargs:\n[Test and build Python package/test]   |             kwasync['async_'] = kwargs.pop('async_')\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Test and build Python package/test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Test and build Python package/test]   | E       django.db.utils.OperationalError: could not connect to server: Connection refused\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (127.0.0.1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | E       could not connect to server: Cannot assign requested address\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (::1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/psycopg2/__init__.py:122: OperationalError\n[Test and build Python package/test]   | _______________ ERROR at setup of test_vote_event_bill_id_dedupe _______________\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def ensure_connection(self):\n[Test and build Python package/test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[Test and build Python package/test]   |         if self.connection is None:\n[Test and build Python package/test]   |             with self.wrap_database_errors:\n[Test and build Python package/test]   | >               self.connect()\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(self):\n[Test and build Python package/test]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[Test and build Python package/test]   |         # Check for invalid configurations.\n[Test and build Python package/test]   |         self.check_settings()\n[Test and build Python package/test]   |         # In case the previous connection was closed while in an atomic block\n[Test and build Python package/test]   |         self.in_atomic_block = False\n[Test and build Python package/test]   |         self.savepoint_ids = []\n[Test and build Python package/test]   |         self.needs_rollback = False\n[Test and build Python package/test]   |         # Reset parameters defining when to close the connection\n[Test and build Python package/test]   |         max_age = self.settings_dict['CONN_MAX_AGE']\n[Test and build Python package/test]   |         self.close_at = None if max_age is None else time.time() + max_age\n[Test and build Python package/test]   |         self.closed_in_transaction = False\n[Test and build Python package/test]   |         self.errors_occurred = False\n[Test and build Python package/test]   |         # Establish the connection\n[Test and build Python package/test]   |         conn_params = self.get_connection_params()\n[Test and build Python package/test]   | >       self.connection = self.get_new_connection(conn_params)\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:195: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | conn_params = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def get_new_connection(self, conn_params):\n[Test and build Python package/test]   | >       connection = Database.connect(**conn_params)\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/postgresql/base.py:178: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | dsn = 'user=test password=test host=localhost port=5432 dbname=test'\n[Test and build Python package/test]   | connection_factory = None, cursor_factory = None\n[Test and build Python package/test]   | kwargs = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | kwasync = {}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         Create a new database connection.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         The connection parameters can be specified as a string:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         or using a set of keyword arguments:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Or as a mix of both. The basic connection parameters are:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         - *dbname*: the database name\n[Test and build Python package/test]   |         - *database*: the database name (only as keyword argument)\n[Test and build Python package/test]   |         - *user*: user name used to authenticate\n[Test and build Python package/test]   |         - *password*: password used to authenticate\n[Test and build Python package/test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Test and build Python package/test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *connection_factory* parameter a different class or connections\n[Test and build Python package/test]   |         factory can be specified. It should be a callable object taking a dsn\n[Test and build Python package/test]   |         argument.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Test and build Python package/test]   |         used by cursor().\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Test and build Python package/test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Any other keyword parameter will be passed to the underlying client\n[Test and build Python package/test]   |         library: the list of supported parameters depends on the library version.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         kwasync = {}\n[Test and build Python package/test]   |         if 'async' in kwargs:\n[Test and build Python package/test]   |             kwasync['async'] = kwargs.pop('async')\n[Test and build Python package/test]   |         if 'async_' in kwargs:\n[Test and build Python package/test]   |             kwasync['async_'] = kwargs.pop('async_')\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Test and build Python package/test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Test and build Python package/test]   | E       psycopg2.OperationalError: could not connect to server: Connection refused\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (127.0.0.1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | E       could not connect to server: Cannot assign requested address\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (::1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/psycopg2/__init__.py:122: OperationalError\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | The above exception was the direct cause of the following exception:\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | request = <SubRequest '_django_db_marker' for <Function test_vote_event_bill_id_dedupe>>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     @pytest.fixture(autouse=True)\n[Test and build Python package/test]   |     def _django_db_marker(request) -> None:\n[Test and build Python package/test]   |         \"\"\"Implement the django_db marker, internal to pytest-django.\"\"\"\n[Test and build Python package/test]   |         marker = request.node.get_closest_marker(\"django_db\")\n[Test and build Python package/test]   |         if marker:\n[Test and build Python package/test]   | >           request.getfixturevalue(\"_django_db_helper\")\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/pytest_django/plugin.py:465: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/pytest_django/fixtures.py:125: in django_db_setup\n[Test and build Python package/test]   |     **setup_databases_args\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/test/utils.py:174: in setup_databases\n[Test and build Python package/test]   |     serialize=connection.settings_dict.get('TEST', {}).get('SERIALIZE', True),\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/creation.py:58: in create_test_db\n[Test and build Python package/test]   |     self._create_test_db(verbosity, autoclobber, keepdb)\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/creation.py:168: in _create_test_db\n[Test and build Python package/test]   |     with self._nodb_connection.cursor() as cursor:\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:256: in cursor\n[Test and build Python package/test]   |     return self._cursor()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:233: in _cursor\n[Test and build Python package/test]   |     self.ensure_connection()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: in ensure_connection\n[Test and build Python package/test]   |     self.connect()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/utils.py:89: in __exit__\n[Test and build Python package/test]   |     raise dj_exc_value.with_traceback(traceback) from exc_value\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: in ensure_connection\n[Test and build Python package/test]   |     self.connect()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:195: in connect\n[Test and build Python package/test]   |     self.connection = self.get_new_connection(conn_params)\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/postgresql/base.py:178: in get_new_connection\n[Test and build Python package/test]   |     connection = Database.connect(**conn_params)\n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | dsn = 'user=test password=test host=localhost port=5432 dbname=test'\n[Test and build Python package/test]   | connection_factory = None, cursor_factory = None\n[Test and build Python package/test]   | kwargs = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | kwasync = {}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         Create a new database connection.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         The connection parameters can be specified as a string:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         or using a set of keyword arguments:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Or as a mix of both. The basic connection parameters are:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         - *dbname*: the database name\n[Test and build Python package/test]   |         - *database*: the database name (only as keyword argument)\n[Test and build Python package/test]   |         - *user*: user name used to authenticate\n[Test and build Python package/test]   |         - *password*: password used to authenticate\n[Test and build Python package/test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Test and build Python package/test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *connection_factory* parameter a different class or connections\n[Test and build Python package/test]   |         factory can be specified. It should be a callable object taking a dsn\n[Test and build Python package/test]   |         argument.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Test and build Python package/test]   |         used by cursor().\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Test and build Python package/test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Any other keyword parameter will be passed to the underlying client\n[Test and build Python package/test]   |         library: the list of supported parameters depends on the library version.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         kwasync = {}\n[Test and build Python package/test]   |         if 'async' in kwargs:\n[Test and build Python package/test]   |             kwasync['async'] = kwargs.pop('async')\n[Test and build Python package/test]   |         if 'async_' in kwargs:\n[Test and build Python package/test]   |             kwasync['async_'] = kwargs.pop('async_')\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Test and build Python package/test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Test and build Python package/test]   | E       django.db.utils.OperationalError: could not connect to server: Connection refused\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (127.0.0.1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | E       could not connect to server: Cannot assign requested address\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (::1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/psycopg2/__init__.py:122: OperationalError\n[Test and build Python package/test]   | _______________ ERROR at setup of test_vote_event_bill_clearing ________________\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def ensure_connection(self):\n[Test and build Python package/test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[Test and build Python package/test]   |         if self.connection is None:\n[Test and build Python package/test]   |             with self.wrap_database_errors:\n[Test and build Python package/test]   | >               self.connect()\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(self):\n[Test and build Python package/test]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[Test and build Python package/test]   |         # Check for invalid configurations.\n[Test and build Python package/test]   |         self.check_settings()\n[Test and build Python package/test]   |         # In case the previous connection was closed while in an atomic block\n[Test and build Python package/test]   |         self.in_atomic_block = False\n[Test and build Python package/test]   |         self.savepoint_ids = []\n[Test and build Python package/test]   |         self.needs_rollback = False\n[Test and build Python package/test]   |         # Reset parameters defining when to close the connection\n[Test and build Python package/test]   |         max_age = self.settings_dict['CONN_MAX_AGE']\n[Test and build Python package/test]   |         self.close_at = None if max_age is None else time.time() + max_age\n[Test and build Python package/test]   |         self.closed_in_transaction = False\n[Test and build Python package/test]   |         self.errors_occurred = False\n[Test and build Python package/test]   |         # Establish the connection\n[Test and build Python package/test]   |         conn_params = self.get_connection_params()\n[Test and build Python package/test]   | >       self.connection = self.get_new_connection(conn_params)\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:195: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | conn_params = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def get_new_connection(self, conn_params):\n[Test and build Python package/test]   | >       connection = Database.connect(**conn_params)\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/postgresql/base.py:178: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | dsn = 'user=test password=test host=localhost port=5432 dbname=test'\n[Test and build Python package/test]   | connection_factory = None, cursor_factory = None\n[Test and build Python package/test]   | kwargs = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | kwasync = {}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         Create a new database connection.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         The connection parameters can be specified as a string:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         or using a set of keyword arguments:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Or as a mix of both. The basic connection parameters are:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         - *dbname*: the database name\n[Test and build Python package/test]   |         - *database*: the database name (only as keyword argument)\n[Test and build Python package/test]   |         - *user*: user name used to authenticate\n[Test and build Python package/test]   |         - *password*: password used to authenticate\n[Test and build Python package/test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Test and build Python package/test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *connection_factory* parameter a different class or connections\n[Test and build Python package/test]   |         factory can be specified. It should be a callable object taking a dsn\n[Test and build Python package/test]   |         argument.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Test and build Python package/test]   |         used by cursor().\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Test and build Python package/test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Any other keyword parameter will be passed to the underlying client\n[Test and build Python package/test]   |         library: the list of supported parameters depends on the library version.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         kwasync = {}\n[Test and build Python package/test]   |         if 'async' in kwargs:\n[Test and build Python package/test]   |             kwasync['async'] = kwargs.pop('async')\n[Test and build Python package/test]   |         if 'async_' in kwargs:\n[Test and build Python package/test]   |             kwasync['async_'] = kwargs.pop('async_')\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Test and build Python package/test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Test and build Python package/test]   | E       psycopg2.OperationalError: could not connect to server: Connection refused\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (127.0.0.1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | E       could not connect to server: Cannot assign requested address\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (::1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/psycopg2/__init__.py:122: OperationalError\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | The above exception was the direct cause of the following exception:\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | request = <SubRequest '_django_db_marker' for <Function test_vote_event_bill_clearing>>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     @pytest.fixture(autouse=True)\n[Test and build Python package/test]   |     def _django_db_marker(request) -> None:\n[Test and build Python package/test]   |         \"\"\"Implement the django_db marker, internal to pytest-django.\"\"\"\n[Test and build Python package/test]   |         marker = request.node.get_closest_marker(\"django_db\")\n[Test and build Python package/test]   |         if marker:\n[Test and build Python package/test]   | >           request.getfixturevalue(\"_django_db_helper\")\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/pytest_django/plugin.py:465: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/pytest_django/fixtures.py:125: in django_db_setup\n[Test and build Python package/test]   |     **setup_databases_args\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/test/utils.py:174: in setup_databases\n[Test and build Python package/test]   |     serialize=connection.settings_dict.get('TEST', {}).get('SERIALIZE', True),\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/creation.py:58: in create_test_db\n[Test and build Python package/test]   |     self._create_test_db(verbosity, autoclobber, keepdb)\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/creation.py:168: in _create_test_db\n[Test and build Python package/test]   |     with self._nodb_connection.cursor() as cursor:\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:256: in cursor\n[Test and build Python package/test]   |     return self._cursor()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:233: in _cursor\n[Test and build Python package/test]   |     self.ensure_connection()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: in ensure_connection\n[Test and build Python package/test]   |     self.connect()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/utils.py:89: in __exit__\n[Test and build Python package/test]   |     raise dj_exc_value.with_traceback(traceback) from exc_value\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: in ensure_connection\n[Test and build Python package/test]   |     self.connect()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:195: in connect\n[Test and build Python package/test]   |     self.connection = self.get_new_connection(conn_params)\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/postgresql/base.py:178: in get_new_connection\n[Test and build Python package/test]   |     connection = Database.connect(**conn_params)\n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | dsn = 'user=test password=test host=localhost port=5432 dbname=test'\n[Test and build Python package/test]   | connection_factory = None, cursor_factory = None\n[Test and build Python package/test]   | kwargs = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | kwasync = {}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         Create a new database connection.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         The connection parameters can be specified as a string:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         or using a set of keyword arguments:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Or as a mix of both. The basic connection parameters are:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         - *dbname*: the database name\n[Test and build Python package/test]   |         - *database*: the database name (only as keyword argument)\n[Test and build Python package/test]   |         - *user*: user name used to authenticate\n[Test and build Python package/test]   |         - *password*: password used to authenticate\n[Test and build Python package/test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Test and build Python package/test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *connection_factory* parameter a different class or connections\n[Test and build Python package/test]   |         factory can be specified. It should be a callable object taking a dsn\n[Test and build Python package/test]   |         argument.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Test and build Python package/test]   |         used by cursor().\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Test and build Python package/test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Any other keyword parameter will be passed to the underlying client\n[Test and build Python package/test]   |         library: the list of supported parameters depends on the library version.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         kwasync = {}\n[Test and build Python package/test]   |         if 'async' in kwargs:\n[Test and build Python package/test]   |             kwasync['async'] = kwargs.pop('async')\n[Test and build Python package/test]   |         if 'async_' in kwargs:\n[Test and build Python package/test]   |             kwasync['async_'] = kwargs.pop('async_')\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Test and build Python package/test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Test and build Python package/test]   | E       django.db.utils.OperationalError: could not connect to server: Connection refused\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (127.0.0.1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | E       could not connect to server: Cannot assign requested address\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (::1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/psycopg2/__init__.py:122: OperationalError\n[Test and build Python package/test]   | ________________ ERROR at setup of test_vote_event_bill_actions ________________\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def ensure_connection(self):\n[Test and build Python package/test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[Test and build Python package/test]   |         if self.connection is None:\n[Test and build Python package/test]   |             with self.wrap_database_errors:\n[Test and build Python package/test]   | >               self.connect()\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(self):\n[Test and build Python package/test]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[Test and build Python package/test]   |         # Check for invalid configurations.\n[Test and build Python package/test]   |         self.check_settings()\n[Test and build Python package/test]   |         # In case the previous connection was closed while in an atomic block\n[Test and build Python package/test]   |         self.in_atomic_block = False\n[Test and build Python package/test]   |         self.savepoint_ids = []\n[Test and build Python package/test]   |         self.needs_rollback = False\n[Test and build Python package/test]   |         # Reset parameters defining when to close the connection\n[Test and build Python package/test]   |         max_age = self.settings_dict['CONN_MAX_AGE']\n[Test and build Python package/test]   |         self.close_at = None if max_age is None else time.time() + max_age\n[Test and build Python package/test]   |         self.closed_in_transaction = False\n[Test and build Python package/test]   |         self.errors_occurred = False\n[Test and build Python package/test]   |         # Establish the connection\n[Test and build Python package/test]   |         conn_params = self.get_connection_params()\n[Test and build Python package/test]   | >       self.connection = self.get_new_connection(conn_params)\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:195: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | conn_params = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def get_new_connection(self, conn_params):\n[Test and build Python package/test]   | >       connection = Database.connect(**conn_params)\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/postgresql/base.py:178: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | dsn = 'user=test password=test host=localhost port=5432 dbname=test'\n[Test and build Python package/test]   | connection_factory = None, cursor_factory = None\n[Test and build Python package/test]   | kwargs = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | kwasync = {}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         Create a new database connection.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         The connection parameters can be specified as a string:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         or using a set of keyword arguments:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Or as a mix of both. The basic connection parameters are:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         - *dbname*: the database name\n[Test and build Python package/test]   |         - *database*: the database name (only as keyword argument)\n[Test and build Python package/test]   |         - *user*: user name used to authenticate\n[Test and build Python package/test]   |         - *password*: password used to authenticate\n[Test and build Python package/test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Test and build Python package/test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *connection_factory* parameter a different class or connections\n[Test and build Python package/test]   |         factory can be specified. It should be a callable object taking a dsn\n[Test and build Python package/test]   |         argument.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Test and build Python package/test]   |         used by cursor().\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Test and build Python package/test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Any other keyword parameter will be passed to the underlying client\n[Test and build Python package/test]   |         library: the list of supported parameters depends on the library version.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         kwasync = {}\n[Test and build Python package/test]   |         if 'async' in kwargs:\n[Test and build Python package/test]   |             kwasync['async'] = kwargs.pop('async')\n[Test and build Python package/test]   |         if 'async_' in kwargs:\n[Test and build Python package/test]   |             kwasync['async_'] = kwargs.pop('async_')\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Test and build Python package/test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Test and build Python package/test]   | E       psycopg2.OperationalError: could not connect to server: Connection refused\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (127.0.0.1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | E       could not connect to server: Cannot assign requested address\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (::1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/psycopg2/__init__.py:122: OperationalError\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | The above exception was the direct cause of the following exception:\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | request = <SubRequest '_django_db_marker' for <Function test_vote_event_bill_actions>>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     @pytest.fixture(autouse=True)\n[Test and build Python package/test]   |     def _django_db_marker(request) -> None:\n[Test and build Python package/test]   |         \"\"\"Implement the django_db marker, internal to pytest-django.\"\"\"\n[Test and build Python package/test]   |         marker = request.node.get_closest_marker(\"django_db\")\n[Test and build Python package/test]   |         if marker:\n[Test and build Python package/test]   | >           request.getfixturevalue(\"_django_db_helper\")\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/pytest_django/plugin.py:465: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/pytest_django/fixtures.py:125: in django_db_setup\n[Test and build Python package/test]   |     **setup_databases_args\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/test/utils.py:174: in setup_databases\n[Test and build Python package/test]   |     serialize=connection.settings_dict.get('TEST', {}).get('SERIALIZE', True),\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/creation.py:58: in create_test_db\n[Test and build Python package/test]   |     self._create_test_db(verbosity, autoclobber, keepdb)\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/creation.py:168: in _create_test_db\n[Test and build Python package/test]   |     with self._nodb_connection.cursor() as cursor:\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:256: in cursor\n[Test and build Python package/test]   |     return self._cursor()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:233: in _cursor\n[Test and build Python package/test]   |     self.ensure_connection()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: in ensure_connection\n[Test and build Python package/test]   |     self.connect()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/utils.py:89: in __exit__\n[Test and build Python package/test]   |     raise dj_exc_value.with_traceback(traceback) from exc_value\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: in ensure_connection\n[Test and build Python package/test]   |     self.connect()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:195: in connect\n[Test and build Python package/test]   |     self.connection = self.get_new_connection(conn_params)\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/postgresql/base.py:178: in get_new_connection\n[Test and build Python package/test]   |     connection = Database.connect(**conn_params)\n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | dsn = 'user=test password=test host=localhost port=5432 dbname=test'\n[Test and build Python package/test]   | connection_factory = None, cursor_factory = None\n[Test and build Python package/test]   | kwargs = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | kwasync = {}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         Create a new database connection.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         The connection parameters can be specified as a string:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         or using a set of keyword arguments:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Or as a mix of both. The basic connection parameters are:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         - *dbname*: the database name\n[Test and build Python package/test]   |         - *database*: the database name (only as keyword argument)\n[Test and build Python package/test]   |         - *user*: user name used to authenticate\n[Test and build Python package/test]   |         - *password*: password used to authenticate\n[Test and build Python package/test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Test and build Python package/test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *connection_factory* parameter a different class or connections\n[Test and build Python package/test]   |         factory can be specified. It should be a callable object taking a dsn\n[Test and build Python package/test]   |         argument.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Test and build Python package/test]   |         used by cursor().\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Test and build Python package/test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Any other keyword parameter will be passed to the underlying client\n[Test and build Python package/test]   |         library: the list of supported parameters depends on the library version.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         kwasync = {}\n[Test and build Python package/test]   |         if 'async' in kwargs:\n[Test and build Python package/test]   |             kwasync['async'] = kwargs.pop('async')\n[Test and build Python package/test]   |         if 'async_' in kwargs:\n[Test and build Python package/test]   |             kwasync['async_'] = kwargs.pop('async_')\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Test and build Python package/test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Test and build Python package/test]   | E       django.db.utils.OperationalError: could not connect to server: Connection refused\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (127.0.0.1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | E       could not connect to server: Cannot assign requested address\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (::1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/psycopg2/__init__.py:122: OperationalError\n[Test and build Python package/test]   | ___________ ERROR at setup of test_vote_event_bill_actions_two_stage ___________\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def ensure_connection(self):\n[Test and build Python package/test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[Test and build Python package/test]   |         if self.connection is None:\n[Test and build Python package/test]   |             with self.wrap_database_errors:\n[Test and build Python package/test]   | >               self.connect()\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(self):\n[Test and build Python package/test]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[Test and build Python package/test]   |         # Check for invalid configurations.\n[Test and build Python package/test]   |         self.check_settings()\n[Test and build Python package/test]   |         # In case the previous connection was closed while in an atomic block\n[Test and build Python package/test]   |         self.in_atomic_block = False\n[Test and build Python package/test]   |         self.savepoint_ids = []\n[Test and build Python package/test]   |         self.needs_rollback = False\n[Test and build Python package/test]   |         # Reset parameters defining when to close the connection\n[Test and build Python package/test]   |         max_age = self.settings_dict['CONN_MAX_AGE']\n[Test and build Python package/test]   |         self.close_at = None if max_age is None else time.time() + max_age\n[Test and build Python package/test]   |         self.closed_in_transaction = False\n[Test and build Python package/test]   |         self.errors_occurred = False\n[Test and build Python package/test]   |         # Establish the connection\n[Test and build Python package/test]   |         conn_params = self.get_connection_params()\n[Test and build Python package/test]   | >       self.connection = self.get_new_connection(conn_params)\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:195: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | conn_params = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def get_new_connection(self, conn_params):\n[Test and build Python package/test]   | >       connection = Database.connect(**conn_params)\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/postgresql/base.py:178: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | dsn = 'user=test password=test host=localhost port=5432 dbname=test'\n[Test and build Python package/test]   | connection_factory = None, cursor_factory = None\n[Test and build Python package/test]   | kwargs = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | kwasync = {}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         Create a new database connection.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         The connection parameters can be specified as a string:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         or using a set of keyword arguments:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Or as a mix of both. The basic connection parameters are:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         - *dbname*: the database name\n[Test and build Python package/test]   |         - *database*: the database name (only as keyword argument)\n[Test and build Python package/test]   |         - *user*: user name used to authenticate\n[Test and build Python package/test]   |         - *password*: password used to authenticate\n[Test and build Python package/test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Test and build Python package/test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *connection_factory* parameter a different class or connections\n[Test and build Python package/test]   |         factory can be specified. It should be a callable object taking a dsn\n[Test and build Python package/test]   |         argument.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Test and build Python package/test]   |         used by cursor().\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Test and build Python package/test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Any other keyword parameter will be passed to the underlying client\n[Test and build Python package/test]   |         library: the list of supported parameters depends on the library version.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         kwasync = {}\n[Test and build Python package/test]   |         if 'async' in kwargs:\n[Test and build Python package/test]   |             kwasync['async'] = kwargs.pop('async')\n[Test and build Python package/test]   |         if 'async_' in kwargs:\n[Test and build Python package/test]   |             kwasync['async_'] = kwargs.pop('async_')\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Test and build Python package/test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Test and build Python package/test]   | E       psycopg2.OperationalError: could not connect to server: Connection refused\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (127.0.0.1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | E       could not connect to server: Cannot assign requested address\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (::1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/psycopg2/__init__.py:122: OperationalError\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | The above exception was the direct cause of the following exception:\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | request = <SubRequest '_django_db_marker' for <Function test_vote_event_bill_actions_two_stage>>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     @pytest.fixture(autouse=True)\n[Test and build Python package/test]   |     def _django_db_marker(request) -> None:\n[Test and build Python package/test]   |         \"\"\"Implement the django_db marker, internal to pytest-django.\"\"\"\n[Test and build Python package/test]   |         marker = request.node.get_closest_marker(\"django_db\")\n[Test and build Python package/test]   |         if marker:\n[Test and build Python package/test]   | >           request.getfixturevalue(\"_django_db_helper\")\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/pytest_django/plugin.py:465: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/pytest_django/fixtures.py:125: in django_db_setup\n[Test and build Python package/test]   |     **setup_databases_args\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/test/utils.py:174: in setup_databases\n[Test and build Python package/test]   |     serialize=connection.settings_dict.get('TEST', {}).get('SERIALIZE', True),\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/creation.py:58: in create_test_db\n[Test and build Python package/test]   |     self._create_test_db(verbosity, autoclobber, keepdb)\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/creation.py:168: in _create_test_db\n[Test and build Python package/test]   |     with self._nodb_connection.cursor() as cursor:\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:256: in cursor\n[Test and build Python package/test]   |     return self._cursor()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:233: in _cursor\n[Test and build Python package/test]   |     self.ensure_connection()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: in ensure_connection\n[Test and build Python package/test]   |     self.connect()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/utils.py:89: in __exit__\n[Test and build Python package/test]   |     raise dj_exc_value.with_traceback(traceback) from exc_value\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: in ensure_connection\n[Test and build Python package/test]   |     self.connect()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:195: in connect\n[Test and build Python package/test]   |     self.connection = self.get_new_connection(conn_params)\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/postgresql/base.py:178: in get_new_connection\n[Test and build Python package/test]   |     connection = Database.connect(**conn_params)\n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | dsn = 'user=test password=test host=localhost port=5432 dbname=test'\n[Test and build Python package/test]   | connection_factory = None, cursor_factory = None\n[Test and build Python package/test]   | kwargs = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | kwasync = {}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         Create a new database connection.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         The connection parameters can be specified as a string:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         or using a set of keyword arguments:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Or as a mix of both. The basic connection parameters are:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         - *dbname*: the database name\n[Test and build Python package/test]   |         - *database*: the database name (only as keyword argument)\n[Test and build Python package/test]   |         - *user*: user name used to authenticate\n[Test and build Python package/test]   |         - *password*: password used to authenticate\n[Test and build Python package/test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Test and build Python package/test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *connection_factory* parameter a different class or connections\n[Test and build Python package/test]   |         factory can be specified. It should be a callable object taking a dsn\n[Test and build Python package/test]   |         argument.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Test and build Python package/test]   |         used by cursor().\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Test and build Python package/test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Any other keyword parameter will be passed to the underlying client\n[Test and build Python package/test]   |         library: the list of supported parameters depends on the library version.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         kwasync = {}\n[Test and build Python package/test]   |         if 'async' in kwargs:\n[Test and build Python package/test]   |             kwasync['async'] = kwargs.pop('async')\n[Test and build Python package/test]   |         if 'async_' in kwargs:\n[Test and build Python package/test]   |             kwasync['async_'] = kwargs.pop('async_')\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Test and build Python package/test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Test and build Python package/test]   | E       django.db.utils.OperationalError: could not connect to server: Connection refused\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (127.0.0.1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | E       could not connect to server: Cannot assign requested address\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (::1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/psycopg2/__init__.py:122: OperationalError\n[Test and build Python package/test]   | ____________ ERROR at setup of test_vote_event_bill_actions_errors _____________\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def ensure_connection(self):\n[Test and build Python package/test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[Test and build Python package/test]   |         if self.connection is None:\n[Test and build Python package/test]   |             with self.wrap_database_errors:\n[Test and build Python package/test]   | >               self.connect()\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(self):\n[Test and build Python package/test]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[Test and build Python package/test]   |         # Check for invalid configurations.\n[Test and build Python package/test]   |         self.check_settings()\n[Test and build Python package/test]   |         # In case the previous connection was closed while in an atomic block\n[Test and build Python package/test]   |         self.in_atomic_block = False\n[Test and build Python package/test]   |         self.savepoint_ids = []\n[Test and build Python package/test]   |         self.needs_rollback = False\n[Test and build Python package/test]   |         # Reset parameters defining when to close the connection\n[Test and build Python package/test]   |         max_age = self.settings_dict['CONN_MAX_AGE']\n[Test and build Python package/test]   |         self.close_at = None if max_age is None else time.time() + max_age\n[Test and build Python package/test]   |         self.closed_in_transaction = False\n[Test and build Python package/test]   |         self.errors_occurred = False\n[Test and build Python package/test]   |         # Establish the connection\n[Test and build Python package/test]   |         conn_params = self.get_connection_params()\n[Test and build Python package/test]   | >       self.connection = self.get_new_connection(conn_params)\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:195: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | conn_params = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def get_new_connection(self, conn_params):\n[Test and build Python package/test]   | >       connection = Database.connect(**conn_params)\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/postgresql/base.py:178: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | dsn = 'user=test password=test host=localhost port=5432 dbname=test'\n[Test and build Python package/test]   | connection_factory = None, cursor_factory = None\n[Test and build Python package/test]   | kwargs = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | kwasync = {}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         Create a new database connection.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         The connection parameters can be specified as a string:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         or using a set of keyword arguments:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Or as a mix of both. The basic connection parameters are:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         - *dbname*: the database name\n[Test and build Python package/test]   |         - *database*: the database name (only as keyword argument)\n[Test and build Python package/test]   |         - *user*: user name used to authenticate\n[Test and build Python package/test]   |         - *password*: password used to authenticate\n[Test and build Python package/test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Test and build Python package/test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *connection_factory* parameter a different class or connections\n[Test and build Python package/test]   |         factory can be specified. It should be a callable object taking a dsn\n[Test and build Python package/test]   |         argument.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Test and build Python package/test]   |         used by cursor().\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Test and build Python package/test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Any other keyword parameter will be passed to the underlying client\n[Test and build Python package/test]   |         library: the list of supported parameters depends on the library version.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         kwasync = {}\n[Test and build Python package/test]   |         if 'async' in kwargs:\n[Test and build Python package/test]   |             kwasync['async'] = kwargs.pop('async')\n[Test and build Python package/test]   |         if 'async_' in kwargs:\n[Test and build Python package/test]   |             kwasync['async_'] = kwargs.pop('async_')\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Test and build Python package/test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Test and build Python package/test]   | E       psycopg2.OperationalError: could not connect to server: Connection refused\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (127.0.0.1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | E       could not connect to server: Cannot assign requested address\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (::1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/psycopg2/__init__.py:122: OperationalError\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | The above exception was the direct cause of the following exception:\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | request = <SubRequest '_django_db_marker' for <Function test_vote_event_bill_actions_errors>>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     @pytest.fixture(autouse=True)\n[Test and build Python package/test]   |     def _django_db_marker(request) -> None:\n[Test and build Python package/test]   |         \"\"\"Implement the django_db marker, internal to pytest-django.\"\"\"\n[Test and build Python package/test]   |         marker = request.node.get_closest_marker(\"django_db\")\n[Test and build Python package/test]   |         if marker:\n[Test and build Python package/test]   | >           request.getfixturevalue(\"_django_db_helper\")\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/pytest_django/plugin.py:465: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/pytest_django/fixtures.py:125: in django_db_setup\n[Test and build Python package/test]   |     **setup_databases_args\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/test/utils.py:174: in setup_databases\n[Test and build Python package/test]   |     serialize=connection.settings_dict.get('TEST', {}).get('SERIALIZE', True),\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/creation.py:58: in create_test_db\n[Test and build Python package/test]   |     self._create_test_db(verbosity, autoclobber, keepdb)\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/creation.py:168: in _create_test_db\n[Test and build Python package/test]   |     with self._nodb_connection.cursor() as cursor:\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:256: in cursor\n[Test and build Python package/test]   |     return self._cursor()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:233: in _cursor\n[Test and build Python package/test]   |     self.ensure_connection()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: in ensure_connection\n[Test and build Python package/test]   |     self.connect()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/utils.py:89: in __exit__\n[Test and build Python package/test]   |     raise dj_exc_value.with_traceback(traceback) from exc_value\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: in ensure_connection\n[Test and build Python package/test]   |     self.connect()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:195: in connect\n[Test and build Python package/test]   |     self.connection = self.get_new_connection(conn_params)\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/postgresql/base.py:178: in get_new_connection\n[Test and build Python package/test]   |     connection = Database.connect(**conn_params)\n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | dsn = 'user=test password=test host=localhost port=5432 dbname=test'\n[Test and build Python package/test]   | connection_factory = None, cursor_factory = None\n[Test and build Python package/test]   | kwargs = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | kwasync = {}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         Create a new database connection.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         The connection parameters can be specified as a string:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         or using a set of keyword arguments:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Or as a mix of both. The basic connection parameters are:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         - *dbname*: the database name\n[Test and build Python package/test]   |         - *database*: the database name (only as keyword argument)\n[Test and build Python package/test]   |         - *user*: user name used to authenticate\n[Test and build Python package/test]   |         - *password*: password used to authenticate\n[Test and build Python package/test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Test and build Python package/test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *connection_factory* parameter a different class or connections\n[Test and build Python package/test]   |         factory can be specified. It should be a callable object taking a dsn\n[Test and build Python package/test]   |         argument.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Test and build Python package/test]   |         used by cursor().\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Test and build Python package/test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Any other keyword parameter will be passed to the underlying client\n[Test and build Python package/test]   |         library: the list of supported parameters depends on the library version.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         kwasync = {}\n[Test and build Python package/test]   |         if 'async' in kwargs:\n[Test and build Python package/test]   |             kwasync['async'] = kwargs.pop('async')\n[Test and build Python package/test]   |         if 'async_' in kwargs:\n[Test and build Python package/test]   |             kwasync['async_'] = kwargs.pop('async_')\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Test and build Python package/test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Test and build Python package/test]   | E       django.db.utils.OperationalError: could not connect to server: Connection refused\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (127.0.0.1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | E       could not connect to server: Cannot assign requested address\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (::1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/psycopg2/__init__.py:122: OperationalError\n[Test and build Python package/test]   | ______________________ ERROR at setup of test_fix_bill_id ______________________\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def ensure_connection(self):\n[Test and build Python package/test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[Test and build Python package/test]   |         if self.connection is None:\n[Test and build Python package/test]   |             with self.wrap_database_errors:\n[Test and build Python package/test]   | >               self.connect()\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(self):\n[Test and build Python package/test]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[Test and build Python package/test]   |         # Check for invalid configurations.\n[Test and build Python package/test]   |         self.check_settings()\n[Test and build Python package/test]   |         # In case the previous connection was closed while in an atomic block\n[Test and build Python package/test]   |         self.in_atomic_block = False\n[Test and build Python package/test]   |         self.savepoint_ids = []\n[Test and build Python package/test]   |         self.needs_rollback = False\n[Test and build Python package/test]   |         # Reset parameters defining when to close the connection\n[Test and build Python package/test]   |         max_age = self.settings_dict['CONN_MAX_AGE']\n[Test and build Python package/test]   |         self.close_at = None if max_age is None else time.time() + max_age\n[Test and build Python package/test]   |         self.closed_in_transaction = False\n[Test and build Python package/test]   |         self.errors_occurred = False\n[Test and build Python package/test]   |         # Establish the connection\n[Test and build Python package/test]   |         conn_params = self.get_connection_params()\n[Test and build Python package/test]   | >       self.connection = self.get_new_connection(conn_params)\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:195: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | conn_params = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def get_new_connection(self, conn_params):\n[Test and build Python package/test]   | >       connection = Database.connect(**conn_params)\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/postgresql/base.py:178: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | dsn = 'user=test password=test host=localhost port=5432 dbname=test'\n[Test and build Python package/test]   | connection_factory = None, cursor_factory = None\n[Test and build Python package/test]   | kwargs = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | kwasync = {}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         Create a new database connection.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         The connection parameters can be specified as a string:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         or using a set of keyword arguments:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Or as a mix of both. The basic connection parameters are:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         - *dbname*: the database name\n[Test and build Python package/test]   |         - *database*: the database name (only as keyword argument)\n[Test and build Python package/test]   |         - *user*: user name used to authenticate\n[Test and build Python package/test]   |         - *password*: password used to authenticate\n[Test and build Python package/test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Test and build Python package/test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *connection_factory* parameter a different class or connections\n[Test and build Python package/test]   |         factory can be specified. It should be a callable object taking a dsn\n[Test and build Python package/test]   |         argument.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Test and build Python package/test]   |         used by cursor().\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Test and build Python package/test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Any other keyword parameter will be passed to the underlying client\n[Test and build Python package/test]   |         library: the list of supported parameters depends on the library version.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         kwasync = {}\n[Test and build Python package/test]   |         if 'async' in kwargs:\n[Test and build Python package/test]   |             kwasync['async'] = kwargs.pop('async')\n[Test and build Python package/test]   |         if 'async_' in kwargs:\n[Test and build Python package/test]   |             kwasync['async_'] = kwargs.pop('async_')\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Test and build Python package/test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Test and build Python package/test]   | E       psycopg2.OperationalError: could not connect to server: Connection refused\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (127.0.0.1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | E       could not connect to server: Cannot assign requested address\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (::1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/psycopg2/__init__.py:122: OperationalError\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | The above exception was the direct cause of the following exception:\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | request = <SubRequest '_django_db_marker' for <Function test_fix_bill_id>>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     @pytest.fixture(autouse=True)\n[Test and build Python package/test]   |     def _django_db_marker(request) -> None:\n[Test and build Python package/test]   |         \"\"\"Implement the django_db marker, internal to pytest-django.\"\"\"\n[Test and build Python package/test]   |         marker = request.node.get_closest_marker(\"django_db\")\n[Test and build Python package/test]   |         if marker:\n[Test and build Python package/test]   | >           request.getfixturevalue(\"_django_db_helper\")\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/pytest_django/plugin.py:465: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/pytest_django/fixtures.py:125: in django_db_setup\n[Test and build Python package/test]   |     **setup_databases_args\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/test/utils.py:174: in setup_databases\n[Test and build Python package/test]   |     serialize=connection.settings_dict.get('TEST', {}).get('SERIALIZE', True),\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/creation.py:58: in create_test_db\n[Test and build Python package/test]   |     self._create_test_db(verbosity, autoclobber, keepdb)\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/creation.py:168: in _create_test_db\n[Test and build Python package/test]   |     with self._nodb_connection.cursor() as cursor:\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:256: in cursor\n[Test and build Python package/test]   |     return self._cursor()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:233: in _cursor\n[Test and build Python package/test]   |     self.ensure_connection()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: in ensure_connection\n[Test and build Python package/test]   |     self.connect()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/utils.py:89: in __exit__\n[Test and build Python package/test]   |     raise dj_exc_value.with_traceback(traceback) from exc_value\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: in ensure_connection\n[Test and build Python package/test]   |     self.connect()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:195: in connect\n[Test and build Python package/test]   |     self.connection = self.get_new_connection(conn_params)\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/postgresql/base.py:178: in get_new_connection\n[Test and build Python package/test]   |     connection = Database.connect(**conn_params)\n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | dsn = 'user=test password=test host=localhost port=5432 dbname=test'\n[Test and build Python package/test]   | connection_factory = None, cursor_factory = None\n[Test and build Python package/test]   | kwargs = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | kwasync = {}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         Create a new database connection.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         The connection parameters can be specified as a string:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         or using a set of keyword arguments:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Or as a mix of both. The basic connection parameters are:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         - *dbname*: the database name\n[Test and build Python package/test]   |         - *database*: the database name (only as keyword argument)\n[Test and build Python package/test]   |         - *user*: user name used to authenticate\n[Test and build Python package/test]   |         - *password*: password used to authenticate\n[Test and build Python package/test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Test and build Python package/test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *connection_factory* parameter a different class or connections\n[Test and build Python package/test]   |         factory can be specified. It should be a callable object taking a dsn\n[Test and build Python package/test]   |         argument.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Test and build Python package/test]   |         used by cursor().\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Test and build Python package/test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Any other keyword parameter will be passed to the underlying client\n[Test and build Python package/test]   |         library: the list of supported parameters depends on the library version.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         kwasync = {}\n[Test and build Python package/test]   |         if 'async' in kwargs:\n[Test and build Python package/test]   |             kwasync['async'] = kwargs.pop('async')\n[Test and build Python package/test]   |         if 'async_' in kwargs:\n[Test and build Python package/test]   |             kwasync['async_'] = kwargs.pop('async_')\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Test and build Python package/test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Test and build Python package/test]   | E       django.db.utils.OperationalError: could not connect to server: Connection refused\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (127.0.0.1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | E       could not connect to server: Cannot assign requested address\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (::1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/psycopg2/__init__.py:122: OperationalError\n[Test and build Python package/test]   | _________________ ERROR at setup of test_bills_missing_actions _________________\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def ensure_connection(self):\n[Test and build Python package/test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[Test and build Python package/test]   |         if self.connection is None:\n[Test and build Python package/test]   |             with self.wrap_database_errors:\n[Test and build Python package/test]   | >               self.connect()\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(self):\n[Test and build Python package/test]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[Test and build Python package/test]   |         # Check for invalid configurations.\n[Test and build Python package/test]   |         self.check_settings()\n[Test and build Python package/test]   |         # In case the previous connection was closed while in an atomic block\n[Test and build Python package/test]   |         self.in_atomic_block = False\n[Test and build Python package/test]   |         self.savepoint_ids = []\n[Test and build Python package/test]   |         self.needs_rollback = False\n[Test and build Python package/test]   |         # Reset parameters defining when to close the connection\n[Test and build Python package/test]   |         max_age = self.settings_dict['CONN_MAX_AGE']\n[Test and build Python package/test]   |         self.close_at = None if max_age is None else time.time() + max_age\n[Test and build Python package/test]   |         self.closed_in_transaction = False\n[Test and build Python package/test]   |         self.errors_occurred = False\n[Test and build Python package/test]   |         # Establish the connection\n[Test and build Python package/test]   |         conn_params = self.get_connection_params()\n[Test and build Python package/test]   | >       self.connection = self.get_new_connection(conn_params)\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:195: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | conn_params = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def get_new_connection(self, conn_params):\n[Test and build Python package/test]   | >       connection = Database.connect(**conn_params)\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/postgresql/base.py:178: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | dsn = 'user=test password=test host=localhost port=5432 dbname=test'\n[Test and build Python package/test]   | connection_factory = None, cursor_factory = None\n[Test and build Python package/test]   | kwargs = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | kwasync = {}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         Create a new database connection.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         The connection parameters can be specified as a string:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         or using a set of keyword arguments:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Or as a mix of both. The basic connection parameters are:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         - *dbname*: the database name\n[Test and build Python package/test]   |         - *database*: the database name (only as keyword argument)\n[Test and build Python package/test]   |         - *user*: user name used to authenticate\n[Test and build Python package/test]   |         - *password*: password used to authenticate\n[Test and build Python package/test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Test and build Python package/test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *connection_factory* parameter a different class or connections\n[Test and build Python package/test]   |         factory can be specified. It should be a callable object taking a dsn\n[Test and build Python package/test]   |         argument.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Test and build Python package/test]   |         used by cursor().\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Test and build Python package/test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Any other keyword parameter will be passed to the underlying client\n[Test and build Python package/test]   |         library: the list of supported parameters depends on the library version.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         kwasync = {}\n[Test and build Python package/test]   |         if 'async' in kwargs:\n[Test and build Python package/test]   |             kwasync['async'] = kwargs.pop('async')\n[Test and build Python package/test]   |         if 'async_' in kwargs:\n[Test and build Python package/test]   |             kwasync['async_'] = kwargs.pop('async_')\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Test and build Python package/test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Test and build Python package/test]   | E       psycopg2.OperationalError: could not connect to server: Connection refused\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (127.0.0.1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | E       could not connect to server: Cannot assign requested address\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (::1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/psycopg2/__init__.py:122: OperationalError\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | The above exception was the direct cause of the following exception:\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | request = <SubRequest '_django_db_marker' for <Function test_bills_missing_actions>>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     @pytest.fixture(autouse=True)\n[Test and build Python package/test]   |     def _django_db_marker(request) -> None:\n[Test and build Python package/test]   |         \"\"\"Implement the django_db marker, internal to pytest-django.\"\"\"\n[Test and build Python package/test]   |         marker = request.node.get_closest_marker(\"django_db\")\n[Test and build Python package/test]   |         if marker:\n[Test and build Python package/test]   | >           request.getfixturevalue(\"_django_db_helper\")\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/pytest_django/plugin.py:465: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/pytest_django/fixtures.py:125: in django_db_setup\n[Test and build Python package/test]   |     **setup_databases_args\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/test/utils.py:174: in setup_databases\n[Test and build Python package/test]   |     serialize=connection.settings_dict.get('TEST', {}).get('SERIALIZE', True),\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/creation.py:58: in create_test_db\n[Test and build Python package/test]   |     self._create_test_db(verbosity, autoclobber, keepdb)\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/creation.py:168: in _create_test_db\n[Test and build Python package/test]   |     with self._nodb_connection.cursor() as cursor:\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:256: in cursor\n[Test and build Python package/test]   |     return self._cursor()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:233: in _cursor\n[Test and build Python package/test]   |     self.ensure_connection()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: in ensure_connection\n[Test and build Python package/test]   |     self.connect()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/utils.py:89: in __exit__\n[Test and build Python package/test]   |     raise dj_exc_value.with_traceback(traceback) from exc_value\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: in ensure_connection\n[Test and build Python package/test]   |     self.connect()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:195: in connect\n[Test and build Python package/test]   |     self.connection = self.get_new_connection(conn_params)\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/postgresql/base.py:178: in get_new_connection\n[Test and build Python package/test]   |     connection = Database.connect(**conn_params)\n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | dsn = 'user=test password=test host=localhost port=5432 dbname=test'\n[Test and build Python package/test]   | connection_factory = None, cursor_factory = None\n[Test and build Python package/test]   | kwargs = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | kwasync = {}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         Create a new database connection.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         The connection parameters can be specified as a string:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         or using a set of keyword arguments:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Or as a mix of both. The basic connection parameters are:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         - *dbname*: the database name\n[Test and build Python package/test]   |         - *database*: the database name (only as keyword argument)\n[Test and build Python package/test]   |         - *user*: user name used to authenticate\n[Test and build Python package/test]   |         - *password*: password used to authenticate\n[Test and build Python package/test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Test and build Python package/test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *connection_factory* parameter a different class or connections\n[Test and build Python package/test]   |         factory can be specified. It should be a callable object taking a dsn\n[Test and build Python package/test]   |         argument.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Test and build Python package/test]   |         used by cursor().\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Test and build Python package/test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Any other keyword parameter will be passed to the underlying client\n[Test and build Python package/test]   |         library: the list of supported parameters depends on the library version.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         kwasync = {}\n[Test and build Python package/test]   |         if 'async' in kwargs:\n[Test and build Python package/test]   |             kwasync['async'] = kwargs.pop('async')\n[Test and build Python package/test]   |         if 'async_' in kwargs:\n[Test and build Python package/test]   |             kwasync['async_'] = kwargs.pop('async_')\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Test and build Python package/test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Test and build Python package/test]   | E       django.db.utils.OperationalError: could not connect to server: Connection refused\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (127.0.0.1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | E       could not connect to server: Cannot assign requested address\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (::1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/psycopg2/__init__.py:122: OperationalError\n[Test and build Python package/test]   | ________________ ERROR at setup of test_bills_missing_sponsors _________________\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def ensure_connection(self):\n[Test and build Python package/test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[Test and build Python package/test]   |         if self.connection is None:\n[Test and build Python package/test]   |             with self.wrap_database_errors:\n[Test and build Python package/test]   | >               self.connect()\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(self):\n[Test and build Python package/test]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[Test and build Python package/test]   |         # Check for invalid configurations.\n[Test and build Python package/test]   |         self.check_settings()\n[Test and build Python package/test]   |         # In case the previous connection was closed while in an atomic block\n[Test and build Python package/test]   |         self.in_atomic_block = False\n[Test and build Python package/test]   |         self.savepoint_ids = []\n[Test and build Python package/test]   |         self.needs_rollback = False\n[Test and build Python package/test]   |         # Reset parameters defining when to close the connection\n[Test and build Python package/test]   |         max_age = self.settings_dict['CONN_MAX_AGE']\n[Test and build Python package/test]   |         self.close_at = None if max_age is None else time.time() + max_age\n[Test and build Python package/test]   |         self.closed_in_transaction = False\n[Test and build Python package/test]   |         self.errors_occurred = False\n[Test and build Python package/test]   |         # Establish the connection\n[Test and build Python package/test]   |         conn_params = self.get_connection_params()\n[Test and build Python package/test]   | >       self.connection = self.get_new_connection(conn_params)\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:195: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | conn_params = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def get_new_connection(self, conn_params):\n[Test and build Python package/test]   | >       connection = Database.connect(**conn_params)\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/postgresql/base.py:178: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | dsn = 'user=test password=test host=localhost port=5432 dbname=test'\n[Test and build Python package/test]   | connection_factory = None, cursor_factory = None\n[Test and build Python package/test]   | kwargs = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | kwasync = {}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         Create a new database connection.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         The connection parameters can be specified as a string:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         or using a set of keyword arguments:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Or as a mix of both. The basic connection parameters are:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         - *dbname*: the database name\n[Test and build Python package/test]   |         - *database*: the database name (only as keyword argument)\n[Test and build Python package/test]   |         - *user*: user name used to authenticate\n[Test and build Python package/test]   |         - *password*: password used to authenticate\n[Test and build Python package/test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Test and build Python package/test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *connection_factory* parameter a different class or connections\n[Test and build Python package/test]   |         factory can be specified. It should be a callable object taking a dsn\n[Test and build Python package/test]   |         argument.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Test and build Python package/test]   |         used by cursor().\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Test and build Python package/test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Any other keyword parameter will be passed to the underlying client\n[Test and build Python package/test]   |         library: the list of supported parameters depends on the library version.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         kwasync = {}\n[Test and build Python package/test]   |         if 'async' in kwargs:\n[Test and build Python package/test]   |             kwasync['async'] = kwargs.pop('async')\n[Test and build Python package/test]   |         if 'async_' in kwargs:\n[Test and build Python package/test]   |             kwasync['async_'] = kwargs.pop('async_')\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Test and build Python package/test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Test and build Python package/test]   | E       psycopg2.OperationalError: could not connect to server: Connection refused\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (127.0.0.1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | E       could not connect to server: Cannot assign requested address\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (::1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/psycopg2/__init__.py:122: OperationalError\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | The above exception was the direct cause of the following exception:\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | request = <SubRequest '_django_db_marker' for <Function test_bills_missing_sponsors>>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     @pytest.fixture(autouse=True)\n[Test and build Python package/test]   |     def _django_db_marker(request) -> None:\n[Test and build Python package/test]   |         \"\"\"Implement the django_db marker, internal to pytest-django.\"\"\"\n[Test and build Python package/test]   |         marker = request.node.get_closest_marker(\"django_db\")\n[Test and build Python package/test]   |         if marker:\n[Test and build Python package/test]   | >           request.getfixturevalue(\"_django_db_helper\")\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/pytest_django/plugin.py:465: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/pytest_django/fixtures.py:125: in django_db_setup\n[Test and build Python package/test]   |     **setup_databases_args\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/test/utils.py:174: in setup_databases\n[Test and build Python package/test]   |     serialize=connection.settings_dict.get('TEST', {}).get('SERIALIZE', True),\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/creation.py:58: in create_test_db\n[Test and build Python package/test]   |     self._create_test_db(verbosity, autoclobber, keepdb)\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/creation.py:168: in _create_test_db\n[Test and build Python package/test]   |     with self._nodb_connection.cursor() as cursor:\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:256: in cursor\n[Test and build Python package/test]   |     return self._cursor()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:233: in _cursor\n[Test and build Python package/test]   |     self.ensure_connection()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: in ensure_connection\n[Test and build Python package/test]   |     self.connect()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/utils.py:89: in __exit__\n[Test and build Python package/test]   |     raise dj_exc_value.with_traceback(traceback) from exc_value\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: in ensure_connection\n[Test and build Python package/test]   |     self.connect()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:195: in connect\n[Test and build Python package/test]   |     self.connection = self.get_new_connection(conn_params)\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/postgresql/base.py:178: in get_new_connection\n[Test and build Python package/test]   |     connection = Database.connect(**conn_params)\n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | dsn = 'user=test password=test host=localhost port=5432 dbname=test'\n[Test and build Python package/test]   | connection_factory = None, cursor_factory = None\n[Test and build Python package/test]   | kwargs = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | kwasync = {}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         Create a new database connection.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         The connection parameters can be specified as a string:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         or using a set of keyword arguments:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Or as a mix of both. The basic connection parameters are:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         - *dbname*: the database name\n[Test and build Python package/test]   |         - *database*: the database name (only as keyword argument)\n[Test and build Python package/test]   |         - *user*: user name used to authenticate\n[Test and build Python package/test]   |         - *password*: password used to authenticate\n[Test and build Python package/test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Test and build Python package/test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *connection_factory* parameter a different class or connections\n[Test and build Python package/test]   |         factory can be specified. It should be a callable object taking a dsn\n[Test and build Python package/test]   |         argument.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Test and build Python package/test]   |         used by cursor().\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Test and build Python package/test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Any other keyword parameter will be passed to the underlying client\n[Test and build Python package/test]   |         library: the list of supported parameters depends on the library version.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         kwasync = {}\n[Test and build Python package/test]   |         if 'async' in kwargs:\n[Test and build Python package/test]   |             kwasync['async'] = kwargs.pop('async')\n[Test and build Python package/test]   |         if 'async_' in kwargs:\n[Test and build Python package/test]   |             kwasync['async_'] = kwargs.pop('async_')\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Test and build Python package/test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Test and build Python package/test]   | E       django.db.utils.OperationalError: could not connect to server: Connection refused\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (127.0.0.1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | E       could not connect to server: Cannot assign requested address\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (::1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/psycopg2/__init__.py:122: OperationalError\n[Test and build Python package/test]   | ________________ ERROR at setup of test_bills_missing_versions _________________\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def ensure_connection(self):\n[Test and build Python package/test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[Test and build Python package/test]   |         if self.connection is None:\n[Test and build Python package/test]   |             with self.wrap_database_errors:\n[Test and build Python package/test]   | >               self.connect()\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(self):\n[Test and build Python package/test]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[Test and build Python package/test]   |         # Check for invalid configurations.\n[Test and build Python package/test]   |         self.check_settings()\n[Test and build Python package/test]   |         # In case the previous connection was closed while in an atomic block\n[Test and build Python package/test]   |         self.in_atomic_block = False\n[Test and build Python package/test]   |         self.savepoint_ids = []\n[Test and build Python package/test]   |         self.needs_rollback = False\n[Test and build Python package/test]   |         # Reset parameters defining when to close the connection\n[Test and build Python package/test]   |         max_age = self.settings_dict['CONN_MAX_AGE']\n[Test and build Python package/test]   |         self.close_at = None if max_age is None else time.time() + max_age\n[Test and build Python package/test]   |         self.closed_in_transaction = False\n[Test and build Python package/test]   |         self.errors_occurred = False\n[Test and build Python package/test]   |         # Establish the connection\n[Test and build Python package/test]   |         conn_params = self.get_connection_params()\n[Test and build Python package/test]   | >       self.connection = self.get_new_connection(conn_params)\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:195: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | conn_params = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def get_new_connection(self, conn_params):\n[Test and build Python package/test]   | >       connection = Database.connect(**conn_params)\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/postgresql/base.py:178: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | dsn = 'user=test password=test host=localhost port=5432 dbname=test'\n[Test and build Python package/test]   | connection_factory = None, cursor_factory = None\n[Test and build Python package/test]   | kwargs = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | kwasync = {}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         Create a new database connection.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         The connection parameters can be specified as a string:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         or using a set of keyword arguments:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Or as a mix of both. The basic connection parameters are:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         - *dbname*: the database name\n[Test and build Python package/test]   |         - *database*: the database name (only as keyword argument)\n[Test and build Python package/test]   |         - *user*: user name used to authenticate\n[Test and build Python package/test]   |         - *password*: password used to authenticate\n[Test and build Python package/test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Test and build Python package/test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *connection_factory* parameter a different class or connections\n[Test and build Python package/test]   |         factory can be specified. It should be a callable object taking a dsn\n[Test and build Python package/test]   |         argument.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Test and build Python package/test]   |         used by cursor().\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Test and build Python package/test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Any other keyword parameter will be passed to the underlying client\n[Test and build Python package/test]   |         library: the list of supported parameters depends on the library version.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         kwasync = {}\n[Test and build Python package/test]   |         if 'async' in kwargs:\n[Test and build Python package/test]   |             kwasync['async'] = kwargs.pop('async')\n[Test and build Python package/test]   |         if 'async_' in kwargs:\n[Test and build Python package/test]   |             kwasync['async_'] = kwargs.pop('async_')\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Test and build Python package/test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Test and build Python package/test]   | E       psycopg2.OperationalError: could not connect to server: Connection refused\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (127.0.0.1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | E       could not connect to server: Cannot assign requested address\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (::1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/psycopg2/__init__.py:122: OperationalError\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | The above exception was the direct cause of the following exception:\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | request = <SubRequest '_django_db_marker' for <Function test_bills_missing_versions>>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     @pytest.fixture(autouse=True)\n[Test and build Python package/test]   |     def _django_db_marker(request) -> None:\n[Test and build Python package/test]   |         \"\"\"Implement the django_db marker, internal to pytest-django.\"\"\"\n[Test and build Python package/test]   |         marker = request.node.get_closest_marker(\"django_db\")\n[Test and build Python package/test]   |         if marker:\n[Test and build Python package/test]   | >           request.getfixturevalue(\"_django_db_helper\")\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/pytest_django/plugin.py:465: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/pytest_django/fixtures.py:125: in django_db_setup\n[Test and build Python package/test]   |     **setup_databases_args\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/test/utils.py:174: in setup_databases\n[Test and build Python package/test]   |     serialize=connection.settings_dict.get('TEST', {}).get('SERIALIZE', True),\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/creation.py:58: in create_test_db\n[Test and build Python package/test]   |     self._create_test_db(verbosity, autoclobber, keepdb)\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/creation.py:168: in _create_test_db\n[Test and build Python package/test]   |     with self._nodb_connection.cursor() as cursor:\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:256: in cursor\n[Test and build Python package/test]   |     return self._cursor()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:233: in _cursor\n[Test and build Python package/test]   |     self.ensure_connection()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: in ensure_connection\n[Test and build Python package/test]   |     self.connect()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/utils.py:89: in __exit__\n[Test and build Python package/test]   |     raise dj_exc_value.with_traceback(traceback) from exc_value\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: in ensure_connection\n[Test and build Python package/test]   |     self.connect()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:195: in connect\n[Test and build Python package/test]   |     self.connection = self.get_new_connection(conn_params)\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/postgresql/base.py:178: in get_new_connection\n[Test and build Python package/test]   |     connection = Database.connect(**conn_params)\n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | dsn = 'user=test password=test host=localhost port=5432 dbname=test'\n[Test and build Python package/test]   | connection_factory = None, cursor_factory = None\n[Test and build Python package/test]   | kwargs = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | kwasync = {}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         Create a new database connection.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         The connection parameters can be specified as a string:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         or using a set of keyword arguments:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Or as a mix of both. The basic connection parameters are:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         - *dbname*: the database name\n[Test and build Python package/test]   |         - *database*: the database name (only as keyword argument)\n[Test and build Python package/test]   |         - *user*: user name used to authenticate\n[Test and build Python package/test]   |         - *password*: password used to authenticate\n[Test and build Python package/test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Test and build Python package/test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *connection_factory* parameter a different class or connections\n[Test and build Python package/test]   |         factory can be specified. It should be a callable object taking a dsn\n[Test and build Python package/test]   |         argument.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Test and build Python package/test]   |         used by cursor().\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Test and build Python package/test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Any other keyword parameter will be passed to the underlying client\n[Test and build Python package/test]   |         library: the list of supported parameters depends on the library version.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         kwasync = {}\n[Test and build Python package/test]   |         if 'async' in kwargs:\n[Test and build Python package/test]   |             kwasync['async'] = kwargs.pop('async')\n[Test and build Python package/test]   |         if 'async_' in kwargs:\n[Test and build Python package/test]   |             kwasync['async_'] = kwargs.pop('async_')\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Test and build Python package/test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Test and build Python package/test]   | E       django.db.utils.OperationalError: could not connect to server: Connection refused\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (127.0.0.1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | E       could not connect to server: Cannot assign requested address\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (::1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/psycopg2/__init__.py:122: OperationalError\n[Test and build Python package/test]   | __________________ ERROR at setup of test_votes_missing_bill ___________________\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def ensure_connection(self):\n[Test and build Python package/test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[Test and build Python package/test]   |         if self.connection is None:\n[Test and build Python package/test]   |             with self.wrap_database_errors:\n[Test and build Python package/test]   | >               self.connect()\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(self):\n[Test and build Python package/test]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[Test and build Python package/test]   |         # Check for invalid configurations.\n[Test and build Python package/test]   |         self.check_settings()\n[Test and build Python package/test]   |         # In case the previous connection was closed while in an atomic block\n[Test and build Python package/test]   |         self.in_atomic_block = False\n[Test and build Python package/test]   |         self.savepoint_ids = []\n[Test and build Python package/test]   |         self.needs_rollback = False\n[Test and build Python package/test]   |         # Reset parameters defining when to close the connection\n[Test and build Python package/test]   |         max_age = self.settings_dict['CONN_MAX_AGE']\n[Test and build Python package/test]   |         self.close_at = None if max_age is None else time.time() + max_age\n[Test and build Python package/test]   |         self.closed_in_transaction = False\n[Test and build Python package/test]   |         self.errors_occurred = False\n[Test and build Python package/test]   |         # Establish the connection\n[Test and build Python package/test]   |         conn_params = self.get_connection_params()\n[Test and build Python package/test]   | >       self.connection = self.get_new_connection(conn_params)\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:195: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | conn_params = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def get_new_connection(self, conn_params):\n[Test and build Python package/test]   | >       connection = Database.connect(**conn_params)\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/postgresql/base.py:178: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | dsn = 'user=test password=test host=localhost port=5432 dbname=test'\n[Test and build Python package/test]   | connection_factory = None, cursor_factory = None\n[Test and build Python package/test]   | kwargs = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | kwasync = {}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         Create a new database connection.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         The connection parameters can be specified as a string:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         or using a set of keyword arguments:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Or as a mix of both. The basic connection parameters are:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         - *dbname*: the database name\n[Test and build Python package/test]   |         - *database*: the database name (only as keyword argument)\n[Test and build Python package/test]   |         - *user*: user name used to authenticate\n[Test and build Python package/test]   |         - *password*: password used to authenticate\n[Test and build Python package/test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Test and build Python package/test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *connection_factory* parameter a different class or connections\n[Test and build Python package/test]   |         factory can be specified. It should be a callable object taking a dsn\n[Test and build Python package/test]   |         argument.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Test and build Python package/test]   |         used by cursor().\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Test and build Python package/test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Any other keyword parameter will be passed to the underlying client\n[Test and build Python package/test]   |         library: the list of supported parameters depends on the library version.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         kwasync = {}\n[Test and build Python package/test]   |         if 'async' in kwargs:\n[Test and build Python package/test]   |             kwasync['async'] = kwargs.pop('async')\n[Test and build Python package/test]   |         if 'async_' in kwargs:\n[Test and build Python package/test]   |             kwasync['async_'] = kwargs.pop('async_')\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Test and build Python package/test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Test and build Python package/test]   | E       psycopg2.OperationalError: could not connect to server: Connection refused\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (127.0.0.1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | E       could not connect to server: Cannot assign requested address\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (::1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/psycopg2/__init__.py:122: OperationalError\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | The above exception was the direct cause of the following exception:\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | request = <SubRequest '_django_db_marker' for <Function test_votes_missing_bill>>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     @pytest.fixture(autouse=True)\n[Test and build Python package/test]   |     def _django_db_marker(request) -> None:\n[Test and build Python package/test]   |         \"\"\"Implement the django_db marker, internal to pytest-django.\"\"\"\n[Test and build Python package/test]   |         marker = request.node.get_closest_marker(\"django_db\")\n[Test and build Python package/test]   |         if marker:\n[Test and build Python package/test]   | >           request.getfixturevalue(\"_django_db_helper\")\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/pytest_django/plugin.py:465: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/pytest_django/fixtures.py:125: in django_db_setup\n[Test and build Python package/test]   |     **setup_databases_args\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/test/utils.py:174: in setup_databases\n[Test and build Python package/test]   |     serialize=connection.settings_dict.get('TEST', {}).get('SERIALIZE', True),\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/creation.py:58: in create_test_db\n[Test and build Python package/test]   |     self._create_test_db(verbosity, autoclobber, keepdb)\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/creation.py:168: in _create_test_db\n[Test and build Python package/test]   |     with self._nodb_connection.cursor() as cursor:\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:256: in cursor\n[Test and build Python package/test]   |     return self._cursor()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:233: in _cursor\n[Test and build Python package/test]   |     self.ensure_connection()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: in ensure_connection\n[Test and build Python package/test]   |     self.connect()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/utils.py:89: in __exit__\n[Test and build Python package/test]   |     raise dj_exc_value.with_traceback(traceback) from exc_value\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: in ensure_connection\n[Test and build Python package/test]   |     self.connect()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:195: in connect\n[Test and build Python package/test]   |     self.connection = self.get_new_connection(conn_params)\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/postgresql/base.py:178: in get_new_connection\n[Test and build Python package/test]   |     connection = Database.connect(**conn_params)\n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | dsn = 'user=test password=test host=localhost port=5432 dbname=test'\n[Test and build Python package/test]   | connection_factory = None, cursor_factory = None\n[Test and build Python package/test]   | kwargs = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | kwasync = {}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         Create a new database connection.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         The connection parameters can be specified as a string:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         or using a set of keyword arguments:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Or as a mix of both. The basic connection parameters are:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         - *dbname*: the database name\n[Test and build Python package/test]   |         - *database*: the database name (only as keyword argument)\n[Test and build Python package/test]   |         - *user*: user name used to authenticate\n[Test and build Python package/test]   |         - *password*: password used to authenticate\n[Test and build Python package/test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Test and build Python package/test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *connection_factory* parameter a different class or connections\n[Test and build Python package/test]   |         factory can be specified. It should be a callable object taking a dsn\n[Test and build Python package/test]   |         argument.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Test and build Python package/test]   |         used by cursor().\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Test and build Python package/test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Any other keyword parameter will be passed to the underlying client\n[Test and build Python package/test]   |         library: the list of supported parameters depends on the library version.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         kwasync = {}\n[Test and build Python package/test]   |         if 'async' in kwargs:\n[Test and build Python package/test]   |             kwasync['async'] = kwargs.pop('async')\n[Test and build Python package/test]   |         if 'async_' in kwargs:\n[Test and build Python package/test]   |             kwasync['async_'] = kwargs.pop('async_')\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Test and build Python package/test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Test and build Python package/test]   | E       django.db.utils.OperationalError: could not connect to server: Connection refused\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (127.0.0.1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | E       could not connect to server: Cannot assign requested address\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (::1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/psycopg2/__init__.py:122: OperationalError\n[Test and build Python package/test]   | _________________ ERROR at setup of test_votes_missing_voters __________________\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def ensure_connection(self):\n[Test and build Python package/test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[Test and build Python package/test]   |         if self.connection is None:\n[Test and build Python package/test]   |             with self.wrap_database_errors:\n[Test and build Python package/test]   | >               self.connect()\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(self):\n[Test and build Python package/test]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[Test and build Python package/test]   |         # Check for invalid configurations.\n[Test and build Python package/test]   |         self.check_settings()\n[Test and build Python package/test]   |         # In case the previous connection was closed while in an atomic block\n[Test and build Python package/test]   |         self.in_atomic_block = False\n[Test and build Python package/test]   |         self.savepoint_ids = []\n[Test and build Python package/test]   |         self.needs_rollback = False\n[Test and build Python package/test]   |         # Reset parameters defining when to close the connection\n[Test and build Python package/test]   |         max_age = self.settings_dict['CONN_MAX_AGE']\n[Test and build Python package/test]   |         self.close_at = None if max_age is None else time.time() + max_age\n[Test and build Python package/test]   |         self.closed_in_transaction = False\n[Test and build Python package/test]   |         self.errors_occurred = False\n[Test and build Python package/test]   |         # Establish the connection\n[Test and build Python package/test]   |         conn_params = self.get_connection_params()\n[Test and build Python package/test]   | >       self.connection = self.get_new_connection(conn_params)\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:195: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | conn_params = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def get_new_connection(self, conn_params):\n[Test and build Python package/test]   | >       connection = Database.connect(**conn_params)\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/postgresql/base.py:178: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | dsn = 'user=test password=test host=localhost port=5432 dbname=test'\n[Test and build Python package/test]   | connection_factory = None, cursor_factory = None\n[Test and build Python package/test]   | kwargs = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | kwasync = {}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         Create a new database connection.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         The connection parameters can be specified as a string:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         or using a set of keyword arguments:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Or as a mix of both. The basic connection parameters are:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         - *dbname*: the database name\n[Test and build Python package/test]   |         - *database*: the database name (only as keyword argument)\n[Test and build Python package/test]   |         - *user*: user name used to authenticate\n[Test and build Python package/test]   |         - *password*: password used to authenticate\n[Test and build Python package/test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Test and build Python package/test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *connection_factory* parameter a different class or connections\n[Test and build Python package/test]   |         factory can be specified. It should be a callable object taking a dsn\n[Test and build Python package/test]   |         argument.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Test and build Python package/test]   |         used by cursor().\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Test and build Python package/test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Any other keyword parameter will be passed to the underlying client\n[Test and build Python package/test]   |         library: the list of supported parameters depends on the library version.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         kwasync = {}\n[Test and build Python package/test]   |         if 'async' in kwargs:\n[Test and build Python package/test]   |             kwasync['async'] = kwargs.pop('async')\n[Test and build Python package/test]   |         if 'async_' in kwargs:\n[Test and build Python package/test]   |             kwasync['async_'] = kwargs.pop('async_')\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Test and build Python package/test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Test and build Python package/test]   | E       psycopg2.OperationalError: could not connect to server: Connection refused\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (127.0.0.1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | E       could not connect to server: Cannot assign requested address\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (::1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/psycopg2/__init__.py:122: OperationalError\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | The above exception was the direct cause of the following exception:\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | request = <SubRequest '_django_db_marker' for <Function test_votes_missing_voters>>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     @pytest.fixture(autouse=True)\n[Test and build Python package/test]   |     def _django_db_marker(request) -> None:\n[Test and build Python package/test]   |         \"\"\"Implement the django_db marker, internal to pytest-django.\"\"\"\n[Test and build Python package/test]   |         marker = request.node.get_closest_marker(\"django_db\")\n[Test and build Python package/test]   |         if marker:\n[Test and build Python package/test]   | >           request.getfixturevalue(\"_django_db_helper\")\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/pytest_django/plugin.py:465: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/pytest_django/fixtures.py:125: in django_db_setup\n[Test and build Python package/test]   |     **setup_databases_args\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/test/utils.py:174: in setup_databases\n[Test and build Python package/test]   |     serialize=connection.settings_dict.get('TEST', {}).get('SERIALIZE', True),\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/creation.py:58: in create_test_db\n[Test and build Python package/test]   |     self._create_test_db(verbosity, autoclobber, keepdb)\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/creation.py:168: in _create_test_db\n[Test and build Python package/test]   |     with self._nodb_connection.cursor() as cursor:\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:256: in cursor\n[Test and build Python package/test]   |     return self._cursor()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:233: in _cursor\n[Test and build Python package/test]   |     self.ensure_connection()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: in ensure_connection\n[Test and build Python package/test]   |     self.connect()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/utils.py:89: in __exit__\n[Test and build Python package/test]   |     raise dj_exc_value.with_traceback(traceback) from exc_value\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: in ensure_connection\n[Test and build Python package/test]   |     self.connect()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:195: in connect\n[Test and build Python package/test]   |     self.connection = self.get_new_connection(conn_params)\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/postgresql/base.py:178: in get_new_connection\n[Test and build Python package/test]   |     connection = Database.connect(**conn_params)\n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | dsn = 'user=test password=test host=localhost port=5432 dbname=test'\n[Test and build Python package/test]   | connection_factory = None, cursor_factory = None\n[Test and build Python package/test]   | kwargs = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | kwasync = {}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         Create a new database connection.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         The connection parameters can be specified as a string:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         or using a set of keyword arguments:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Or as a mix of both. The basic connection parameters are:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         - *dbname*: the database name\n[Test and build Python package/test]   |         - *database*: the database name (only as keyword argument)\n[Test and build Python package/test]   |         - *user*: user name used to authenticate\n[Test and build Python package/test]   |         - *password*: password used to authenticate\n[Test and build Python package/test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Test and build Python package/test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *connection_factory* parameter a different class or connections\n[Test and build Python package/test]   |         factory can be specified. It should be a callable object taking a dsn\n[Test and build Python package/test]   |         argument.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Test and build Python package/test]   |         used by cursor().\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Test and build Python package/test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Any other keyword parameter will be passed to the underlying client\n[Test and build Python package/test]   |         library: the list of supported parameters depends on the library version.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         kwasync = {}\n[Test and build Python package/test]   |         if 'async' in kwargs:\n[Test and build Python package/test]   |             kwasync['async'] = kwargs.pop('async')\n[Test and build Python package/test]   |         if 'async_' in kwargs:\n[Test and build Python package/test]   |             kwasync['async_'] = kwargs.pop('async_')\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Test and build Python package/test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Test and build Python package/test]   | E       django.db.utils.OperationalError: could not connect to server: Connection refused\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (127.0.0.1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | E       could not connect to server: Cannot assign requested address\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (::1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/psycopg2/__init__.py:122: OperationalError\n[Test and build Python package/test]   | _________________ ERROR at setup of test_missing_yes_no_counts _________________\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def ensure_connection(self):\n[Test and build Python package/test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[Test and build Python package/test]   |         if self.connection is None:\n[Test and build Python package/test]   |             with self.wrap_database_errors:\n[Test and build Python package/test]   | >               self.connect()\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(self):\n[Test and build Python package/test]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[Test and build Python package/test]   |         # Check for invalid configurations.\n[Test and build Python package/test]   |         self.check_settings()\n[Test and build Python package/test]   |         # In case the previous connection was closed while in an atomic block\n[Test and build Python package/test]   |         self.in_atomic_block = False\n[Test and build Python package/test]   |         self.savepoint_ids = []\n[Test and build Python package/test]   |         self.needs_rollback = False\n[Test and build Python package/test]   |         # Reset parameters defining when to close the connection\n[Test and build Python package/test]   |         max_age = self.settings_dict['CONN_MAX_AGE']\n[Test and build Python package/test]   |         self.close_at = None if max_age is None else time.time() + max_age\n[Test and build Python package/test]   |         self.closed_in_transaction = False\n[Test and build Python package/test]   |         self.errors_occurred = False\n[Test and build Python package/test]   |         # Establish the connection\n[Test and build Python package/test]   |         conn_params = self.get_connection_params()\n[Test and build Python package/test]   | >       self.connection = self.get_new_connection(conn_params)\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:195: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | conn_params = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def get_new_connection(self, conn_params):\n[Test and build Python package/test]   | >       connection = Database.connect(**conn_params)\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/postgresql/base.py:178: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | dsn = 'user=test password=test host=localhost port=5432 dbname=test'\n[Test and build Python package/test]   | connection_factory = None, cursor_factory = None\n[Test and build Python package/test]   | kwargs = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | kwasync = {}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         Create a new database connection.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         The connection parameters can be specified as a string:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         or using a set of keyword arguments:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Or as a mix of both. The basic connection parameters are:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         - *dbname*: the database name\n[Test and build Python package/test]   |         - *database*: the database name (only as keyword argument)\n[Test and build Python package/test]   |         - *user*: user name used to authenticate\n[Test and build Python package/test]   |         - *password*: password used to authenticate\n[Test and build Python package/test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Test and build Python package/test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *connection_factory* parameter a different class or connections\n[Test and build Python package/test]   |         factory can be specified. It should be a callable object taking a dsn\n[Test and build Python package/test]   |         argument.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Test and build Python package/test]   |         used by cursor().\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Test and build Python package/test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Any other keyword parameter will be passed to the underlying client\n[Test and build Python package/test]   |         library: the list of supported parameters depends on the library version.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         kwasync = {}\n[Test and build Python package/test]   |         if 'async' in kwargs:\n[Test and build Python package/test]   |             kwasync['async'] = kwargs.pop('async')\n[Test and build Python package/test]   |         if 'async_' in kwargs:\n[Test and build Python package/test]   |             kwasync['async_'] = kwargs.pop('async_')\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Test and build Python package/test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Test and build Python package/test]   | E       psycopg2.OperationalError: could not connect to server: Connection refused\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (127.0.0.1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | E       could not connect to server: Cannot assign requested address\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (::1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/psycopg2/__init__.py:122: OperationalError\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | The above exception was the direct cause of the following exception:\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | request = <SubRequest '_django_db_marker' for <Function test_missing_yes_no_counts>>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     @pytest.fixture(autouse=True)\n[Test and build Python package/test]   |     def _django_db_marker(request) -> None:\n[Test and build Python package/test]   |         \"\"\"Implement the django_db marker, internal to pytest-django.\"\"\"\n[Test and build Python package/test]   |         marker = request.node.get_closest_marker(\"django_db\")\n[Test and build Python package/test]   |         if marker:\n[Test and build Python package/test]   | >           request.getfixturevalue(\"_django_db_helper\")\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/pytest_django/plugin.py:465: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/pytest_django/fixtures.py:125: in django_db_setup\n[Test and build Python package/test]   |     **setup_databases_args\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/test/utils.py:174: in setup_databases\n[Test and build Python package/test]   |     serialize=connection.settings_dict.get('TEST', {}).get('SERIALIZE', True),\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/creation.py:58: in create_test_db\n[Test and build Python package/test]   |     self._create_test_db(verbosity, autoclobber, keepdb)\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/creation.py:168: in _create_test_db\n[Test and build Python package/test]   |     with self._nodb_connection.cursor() as cursor:\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:256: in cursor\n[Test and build Python package/test]   |     return self._cursor()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:233: in _cursor\n[Test and build Python package/test]   |     self.ensure_connection()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: in ensure_connection\n[Test and build Python package/test]   |     self.connect()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/utils.py:89: in __exit__\n[Test and build Python package/test]   |     raise dj_exc_value.with_traceback(traceback) from exc_value\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: in ensure_connection\n[Test and build Python package/test]   |     self.connect()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:195: in connect\n[Test and build Python package/test]   |     self.connection = self.get_new_connection(conn_params)\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/postgresql/base.py:178: in get_new_connection\n[Test and build Python package/test]   |     connection = Database.connect(**conn_params)\n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | dsn = 'user=test password=test host=localhost port=5432 dbname=test'\n[Test and build Python package/test]   | connection_factory = None, cursor_factory = None\n[Test and build Python package/test]   | kwargs = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | kwasync = {}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         Create a new database connection.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         The connection parameters can be specified as a string:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         or using a set of keyword arguments:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Or as a mix of both. The basic connection parameters are:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         - *dbname*: the database name\n[Test and build Python package/test]   |         - *database*: the database name (only as keyword argument)\n[Test and build Python package/test]   |         - *user*: user name used to authenticate\n[Test and build Python package/test]   |         - *password*: password used to authenticate\n[Test and build Python package/test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Test and build Python package/test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *connection_factory* parameter a different class or connections\n[Test and build Python package/test]   |         factory can be specified. It should be a callable object taking a dsn\n[Test and build Python package/test]   |         argument.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Test and build Python package/test]   |         used by cursor().\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Test and build Python package/test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Any other keyword parameter will be passed to the underlying client\n[Test and build Python package/test]   |         library: the list of supported parameters depends on the library version.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         kwasync = {}\n[Test and build Python package/test]   |         if 'async' in kwargs:\n[Test and build Python package/test]   |             kwasync['async'] = kwargs.pop('async')\n[Test and build Python package/test]   |         if 'async_' in kwargs:\n[Test and build Python package/test]   |             kwasync['async_'] = kwargs.pop('async_')\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Test and build Python package/test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Test and build Python package/test]   | E       django.db.utils.OperationalError: could not connect to server: Connection refused\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (127.0.0.1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | E       could not connect to server: Cannot assign requested address\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (::1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/psycopg2/__init__.py:122: OperationalError\n[Test and build Python package/test]   | _________________ ERROR at setup of test_votes_with_bad_counts _________________\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def ensure_connection(self):\n[Test and build Python package/test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[Test and build Python package/test]   |         if self.connection is None:\n[Test and build Python package/test]   |             with self.wrap_database_errors:\n[Test and build Python package/test]   | >               self.connect()\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(self):\n[Test and build Python package/test]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[Test and build Python package/test]   |         # Check for invalid configurations.\n[Test and build Python package/test]   |         self.check_settings()\n[Test and build Python package/test]   |         # In case the previous connection was closed while in an atomic block\n[Test and build Python package/test]   |         self.in_atomic_block = False\n[Test and build Python package/test]   |         self.savepoint_ids = []\n[Test and build Python package/test]   |         self.needs_rollback = False\n[Test and build Python package/test]   |         # Reset parameters defining when to close the connection\n[Test and build Python package/test]   |         max_age = self.settings_dict['CONN_MAX_AGE']\n[Test and build Python package/test]   |         self.close_at = None if max_age is None else time.time() + max_age\n[Test and build Python package/test]   |         self.closed_in_transaction = False\n[Test and build Python package/test]   |         self.errors_occurred = False\n[Test and build Python package/test]   |         # Establish the connection\n[Test and build Python package/test]   |         conn_params = self.get_connection_params()\n[Test and build Python package/test]   | >       self.connection = self.get_new_connection(conn_params)\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:195: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | conn_params = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def get_new_connection(self, conn_params):\n[Test and build Python package/test]   | >       connection = Database.connect(**conn_params)\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/postgresql/base.py:178: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | dsn = 'user=test password=test host=localhost port=5432 dbname=test'\n[Test and build Python package/test]   | connection_factory = None, cursor_factory = None\n[Test and build Python package/test]   | kwargs = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | kwasync = {}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         Create a new database connection.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         The connection parameters can be specified as a string:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         or using a set of keyword arguments:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Or as a mix of both. The basic connection parameters are:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         - *dbname*: the database name\n[Test and build Python package/test]   |         - *database*: the database name (only as keyword argument)\n[Test and build Python package/test]   |         - *user*: user name used to authenticate\n[Test and build Python package/test]   |         - *password*: password used to authenticate\n[Test and build Python package/test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Test and build Python package/test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *connection_factory* parameter a different class or connections\n[Test and build Python package/test]   |         factory can be specified. It should be a callable object taking a dsn\n[Test and build Python package/test]   |         argument.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Test and build Python package/test]   |         used by cursor().\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Test and build Python package/test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Any other keyword parameter will be passed to the underlying client\n[Test and build Python package/test]   |         library: the list of supported parameters depends on the library version.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         kwasync = {}\n[Test and build Python package/test]   |         if 'async' in kwargs:\n[Test and build Python package/test]   |             kwasync['async'] = kwargs.pop('async')\n[Test and build Python package/test]   |         if 'async_' in kwargs:\n[Test and build Python package/test]   |             kwasync['async_'] = kwargs.pop('async_')\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Test and build Python package/test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Test and build Python package/test]   | E       psycopg2.OperationalError: could not connect to server: Connection refused\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (127.0.0.1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | E       could not connect to server: Cannot assign requested address\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (::1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/psycopg2/__init__.py:122: OperationalError\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | The above exception was the direct cause of the following exception:\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | request = <SubRequest '_django_db_marker' for <Function test_votes_with_bad_counts>>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     @pytest.fixture(autouse=True)\n[Test and build Python package/test]   |     def _django_db_marker(request) -> None:\n[Test and build Python package/test]   |         \"\"\"Implement the django_db marker, internal to pytest-django.\"\"\"\n[Test and build Python package/test]   |         marker = request.node.get_closest_marker(\"django_db\")\n[Test and build Python package/test]   |         if marker:\n[Test and build Python package/test]   | >           request.getfixturevalue(\"_django_db_helper\")\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/pytest_django/plugin.py:465: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/pytest_django/fixtures.py:125: in django_db_setup\n[Test and build Python package/test]   |     **setup_databases_args\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/test/utils.py:174: in setup_databases\n[Test and build Python package/test]   |     serialize=connection.settings_dict.get('TEST', {}).get('SERIALIZE', True),\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/creation.py:58: in create_test_db\n[Test and build Python package/test]   |     self._create_test_db(verbosity, autoclobber, keepdb)\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/creation.py:168: in _create_test_db\n[Test and build Python package/test]   |     with self._nodb_connection.cursor() as cursor:\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:256: in cursor\n[Test and build Python package/test]   |     return self._cursor()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:233: in _cursor\n[Test and build Python package/test]   |     self.ensure_connection()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: in ensure_connection\n[Test and build Python package/test]   |     self.connect()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/utils.py:89: in __exit__\n[Test and build Python package/test]   |     raise dj_exc_value.with_traceback(traceback) from exc_value\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: in ensure_connection\n[Test and build Python package/test]   |     self.connect()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:195: in connect\n[Test and build Python package/test]   |     self.connection = self.get_new_connection(conn_params)\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/postgresql/base.py:178: in get_new_connection\n[Test and build Python package/test]   |     connection = Database.connect(**conn_params)\n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | dsn = 'user=test password=test host=localhost port=5432 dbname=test'\n[Test and build Python package/test]   | connection_factory = None, cursor_factory = None\n[Test and build Python package/test]   | kwargs = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | kwasync = {}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         Create a new database connection.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         The connection parameters can be specified as a string:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         or using a set of keyword arguments:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Or as a mix of both. The basic connection parameters are:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         - *dbname*: the database name\n[Test and build Python package/test]   |         - *database*: the database name (only as keyword argument)\n[Test and build Python package/test]   |         - *user*: user name used to authenticate\n[Test and build Python package/test]   |         - *password*: password used to authenticate\n[Test and build Python package/test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Test and build Python package/test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *connection_factory* parameter a different class or connections\n[Test and build Python package/test]   |         factory can be specified. It should be a callable object taking a dsn\n[Test and build Python package/test]   |         argument.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Test and build Python package/test]   |         used by cursor().\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Test and build Python package/test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Any other keyword parameter will be passed to the underlying client\n[Test and build Python package/test]   |         library: the list of supported parameters depends on the library version.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         kwasync = {}\n[Test and build Python package/test]   |         if 'async' in kwargs:\n[Test and build Python package/test]   |             kwasync['async'] = kwargs.pop('async')\n[Test and build Python package/test]   |         if 'async_' in kwargs:\n[Test and build Python package/test]   |             kwasync['async_'] = kwargs.pop('async_')\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Test and build Python package/test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Test and build Python package/test]   | E       django.db.utils.OperationalError: could not connect to server: Connection refused\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (127.0.0.1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | E       could not connect to server: Cannot assign requested address\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (::1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/psycopg2/__init__.py:122: OperationalError\n[Test and build Python package/test]   | __________________ ERROR at setup of test_unmatched_sponsors ___________________\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def ensure_connection(self):\n[Test and build Python package/test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[Test and build Python package/test]   |         if self.connection is None:\n[Test and build Python package/test]   |             with self.wrap_database_errors:\n[Test and build Python package/test]   | >               self.connect()\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(self):\n[Test and build Python package/test]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[Test and build Python package/test]   |         # Check for invalid configurations.\n[Test and build Python package/test]   |         self.check_settings()\n[Test and build Python package/test]   |         # In case the previous connection was closed while in an atomic block\n[Test and build Python package/test]   |         self.in_atomic_block = False\n[Test and build Python package/test]   |         self.savepoint_ids = []\n[Test and build Python package/test]   |         self.needs_rollback = False\n[Test and build Python package/test]   |         # Reset parameters defining when to close the connection\n[Test and build Python package/test]   |         max_age = self.settings_dict['CONN_MAX_AGE']\n[Test and build Python package/test]   |         self.close_at = None if max_age is None else time.time() + max_age\n[Test and build Python package/test]   |         self.closed_in_transaction = False\n[Test and build Python package/test]   |         self.errors_occurred = False\n[Test and build Python package/test]   |         # Establish the connection\n[Test and build Python package/test]   |         conn_params = self.get_connection_params()\n[Test and build Python package/test]   | >       self.connection = self.get_new_connection(conn_params)\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:195: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | conn_params = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def get_new_connection(self, conn_params):\n[Test and build Python package/test]   | >       connection = Database.connect(**conn_params)\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/postgresql/base.py:178: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | dsn = 'user=test password=test host=localhost port=5432 dbname=test'\n[Test and build Python package/test]   | connection_factory = None, cursor_factory = None\n[Test and build Python package/test]   | kwargs = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | kwasync = {}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         Create a new database connection.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         The connection parameters can be specified as a string:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         or using a set of keyword arguments:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Or as a mix of both. The basic connection parameters are:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         - *dbname*: the database name\n[Test and build Python package/test]   |         - *database*: the database name (only as keyword argument)\n[Test and build Python package/test]   |         - *user*: user name used to authenticate\n[Test and build Python package/test]   |         - *password*: password used to authenticate\n[Test and build Python package/test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Test and build Python package/test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *connection_factory* parameter a different class or connections\n[Test and build Python package/test]   |         factory can be specified. It should be a callable object taking a dsn\n[Test and build Python package/test]   |         argument.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Test and build Python package/test]   |         used by cursor().\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Test and build Python package/test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Any other keyword parameter will be passed to the underlying client\n[Test and build Python package/test]   |         library: the list of supported parameters depends on the library version.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         kwasync = {}\n[Test and build Python package/test]   |         if 'async' in kwargs:\n[Test and build Python package/test]   |             kwasync['async'] = kwargs.pop('async')\n[Test and build Python package/test]   |         if 'async_' in kwargs:\n[Test and build Python package/test]   |             kwasync['async_'] = kwargs.pop('async_')\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Test and build Python package/test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Test and build Python package/test]   | E       psycopg2.OperationalError: could not connect to server: Connection refused\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (127.0.0.1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | E       could not connect to server: Cannot assign requested address\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (::1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/psycopg2/__init__.py:122: OperationalError\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | The above exception was the direct cause of the following exception:\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | request = <SubRequest '_django_db_marker' for <Function test_unmatched_sponsors>>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     @pytest.fixture(autouse=True)\n[Test and build Python package/test]   |     def _django_db_marker(request) -> None:\n[Test and build Python package/test]   |         \"\"\"Implement the django_db marker, internal to pytest-django.\"\"\"\n[Test and build Python package/test]   |         marker = request.node.get_closest_marker(\"django_db\")\n[Test and build Python package/test]   |         if marker:\n[Test and build Python package/test]   | >           request.getfixturevalue(\"_django_db_helper\")\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/pytest_django/plugin.py:465: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/pytest_django/fixtures.py:125: in django_db_setup\n[Test and build Python package/test]   |     **setup_databases_args\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/test/utils.py:174: in setup_databases\n[Test and build Python package/test]   |     serialize=connection.settings_dict.get('TEST', {}).get('SERIALIZE', True),\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/creation.py:58: in create_test_db\n[Test and build Python package/test]   |     self._create_test_db(verbosity, autoclobber, keepdb)\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/creation.py:168: in _create_test_db\n[Test and build Python package/test]   |     with self._nodb_connection.cursor() as cursor:\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:256: in cursor\n[Test and build Python package/test]   |     return self._cursor()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:233: in _cursor\n[Test and build Python package/test]   |     self.ensure_connection()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: in ensure_connection\n[Test and build Python package/test]   |     self.connect()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/utils.py:89: in __exit__\n[Test and build Python package/test]   |     raise dj_exc_value.with_traceback(traceback) from exc_value\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: in ensure_connection\n[Test and build Python package/test]   |     self.connect()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:195: in connect\n[Test and build Python package/test]   |     self.connection = self.get_new_connection(conn_params)\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/postgresql/base.py:178: in get_new_connection\n[Test and build Python package/test]   |     connection = Database.connect(**conn_params)\n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | dsn = 'user=test password=test host=localhost port=5432 dbname=test'\n[Test and build Python package/test]   | connection_factory = None, cursor_factory = None\n[Test and build Python package/test]   | kwargs = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | kwasync = {}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         Create a new database connection.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         The connection parameters can be specified as a string:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         or using a set of keyword arguments:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Or as a mix of both. The basic connection parameters are:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         - *dbname*: the database name\n[Test and build Python package/test]   |         - *database*: the database name (only as keyword argument)\n[Test and build Python package/test]   |         - *user*: user name used to authenticate\n[Test and build Python package/test]   |         - *password*: password used to authenticate\n[Test and build Python package/test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Test and build Python package/test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *connection_factory* parameter a different class or connections\n[Test and build Python package/test]   |         factory can be specified. It should be a callable object taking a dsn\n[Test and build Python package/test]   |         argument.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Test and build Python package/test]   |         used by cursor().\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Test and build Python package/test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Any other keyword parameter will be passed to the underlying client\n[Test and build Python package/test]   |         library: the list of supported parameters depends on the library version.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         kwasync = {}\n[Test and build Python package/test]   |         if 'async' in kwargs:\n[Test and build Python package/test]   |             kwasync['async'] = kwargs.pop('async')\n[Test and build Python package/test]   |         if 'async_' in kwargs:\n[Test and build Python package/test]   |             kwasync['async_'] = kwargs.pop('async_')\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Test and build Python package/test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Test and build Python package/test]   | E       django.db.utils.OperationalError: could not connect to server: Connection refused\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (127.0.0.1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | E       could not connect to server: Cannot assign requested address\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (::1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/psycopg2/__init__.py:122: OperationalError\n[Test and build Python package/test]   | ___________________ ERROR at setup of test_unmatched_voters ____________________\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def ensure_connection(self):\n[Test and build Python package/test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[Test and build Python package/test]   |         if self.connection is None:\n[Test and build Python package/test]   |             with self.wrap_database_errors:\n[Test and build Python package/test]   | >               self.connect()\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(self):\n[Test and build Python package/test]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[Test and build Python package/test]   |         # Check for invalid configurations.\n[Test and build Python package/test]   |         self.check_settings()\n[Test and build Python package/test]   |         # In case the previous connection was closed while in an atomic block\n[Test and build Python package/test]   |         self.in_atomic_block = False\n[Test and build Python package/test]   |         self.savepoint_ids = []\n[Test and build Python package/test]   |         self.needs_rollback = False\n[Test and build Python package/test]   |         # Reset parameters defining when to close the connection\n[Test and build Python package/test]   |         max_age = self.settings_dict['CONN_MAX_AGE']\n[Test and build Python package/test]   |         self.close_at = None if max_age is None else time.time() + max_age\n[Test and build Python package/test]   |         self.closed_in_transaction = False\n[Test and build Python package/test]   |         self.errors_occurred = False\n[Test and build Python package/test]   |         # Establish the connection\n[Test and build Python package/test]   |         conn_params = self.get_connection_params()\n[Test and build Python package/test]   | >       self.connection = self.get_new_connection(conn_params)\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:195: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | self = <django.contrib.gis.db.backends.postgis.base.DatabaseWrapper object at 0x7fd41c1691d0>\n[Test and build Python package/test]   | conn_params = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def get_new_connection(self, conn_params):\n[Test and build Python package/test]   | >       connection = Database.connect(**conn_params)\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/postgresql/base.py:178: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | dsn = 'user=test password=test host=localhost port=5432 dbname=test'\n[Test and build Python package/test]   | connection_factory = None, cursor_factory = None\n[Test and build Python package/test]   | kwargs = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | kwasync = {}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         Create a new database connection.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         The connection parameters can be specified as a string:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         or using a set of keyword arguments:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Or as a mix of both. The basic connection parameters are:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         - *dbname*: the database name\n[Test and build Python package/test]   |         - *database*: the database name (only as keyword argument)\n[Test and build Python package/test]   |         - *user*: user name used to authenticate\n[Test and build Python package/test]   |         - *password*: password used to authenticate\n[Test and build Python package/test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Test and build Python package/test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *connection_factory* parameter a different class or connections\n[Test and build Python package/test]   |         factory can be specified. It should be a callable object taking a dsn\n[Test and build Python package/test]   |         argument.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Test and build Python package/test]   |         used by cursor().\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Test and build Python package/test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Any other keyword parameter will be passed to the underlying client\n[Test and build Python package/test]   |         library: the list of supported parameters depends on the library version.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         kwasync = {}\n[Test and build Python package/test]   |         if 'async' in kwargs:\n[Test and build Python package/test]   |             kwasync['async'] = kwargs.pop('async')\n[Test and build Python package/test]   |         if 'async_' in kwargs:\n[Test and build Python package/test]   |             kwasync['async_'] = kwargs.pop('async_')\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Test and build Python package/test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Test and build Python package/test]   | E       psycopg2.OperationalError: could not connect to server: Connection refused\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (127.0.0.1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | E       could not connect to server: Cannot assign requested address\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (::1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/psycopg2/__init__.py:122: OperationalError\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | The above exception was the direct cause of the following exception:\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | request = <SubRequest '_django_db_marker' for <Function test_unmatched_voters>>\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     @pytest.fixture(autouse=True)\n[Test and build Python package/test]   |     def _django_db_marker(request) -> None:\n[Test and build Python package/test]   |         \"\"\"Implement the django_db marker, internal to pytest-django.\"\"\"\n[Test and build Python package/test]   |         marker = request.node.get_closest_marker(\"django_db\")\n[Test and build Python package/test]   |         if marker:\n[Test and build Python package/test]   | >           request.getfixturevalue(\"_django_db_helper\")\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/pytest_django/plugin.py:465: \n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/pytest_django/fixtures.py:125: in django_db_setup\n[Test and build Python package/test]   |     **setup_databases_args\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/test/utils.py:174: in setup_databases\n[Test and build Python package/test]   |     serialize=connection.settings_dict.get('TEST', {}).get('SERIALIZE', True),\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/creation.py:58: in create_test_db\n[Test and build Python package/test]   |     self._create_test_db(verbosity, autoclobber, keepdb)\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/creation.py:168: in _create_test_db\n[Test and build Python package/test]   |     with self._nodb_connection.cursor() as cursor:\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:256: in cursor\n[Test and build Python package/test]   |     return self._cursor()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:233: in _cursor\n[Test and build Python package/test]   |     self.ensure_connection()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: in ensure_connection\n[Test and build Python package/test]   |     self.connect()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/utils.py:89: in __exit__\n[Test and build Python package/test]   |     raise dj_exc_value.with_traceback(traceback) from exc_value\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:217: in ensure_connection\n[Test and build Python package/test]   |     self.connect()\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/base/base.py:195: in connect\n[Test and build Python package/test]   |     self.connection = self.get_new_connection(conn_params)\n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/postgresql/base.py:178: in get_new_connection\n[Test and build Python package/test]   |     connection = Database.connect(**conn_params)\n[Test and build Python package/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Test and build Python package/test]   | \n[Test and build Python package/test]   | dsn = 'user=test password=test host=localhost port=5432 dbname=test'\n[Test and build Python package/test]   | connection_factory = None, cursor_factory = None\n[Test and build Python package/test]   | kwargs = {'database': 'test', 'host': 'localhost', 'password': 'test', 'port': 5432, ...}\n[Test and build Python package/test]   | kwasync = {}\n[Test and build Python package/test]   | \n[Test and build Python package/test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         Create a new database connection.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         The connection parameters can be specified as a string:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         or using a set of keyword arguments:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Or as a mix of both. The basic connection parameters are:\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         - *dbname*: the database name\n[Test and build Python package/test]   |         - *database*: the database name (only as keyword argument)\n[Test and build Python package/test]   |         - *user*: user name used to authenticate\n[Test and build Python package/test]   |         - *password*: password used to authenticate\n[Test and build Python package/test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Test and build Python package/test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *connection_factory* parameter a different class or connections\n[Test and build Python package/test]   |         factory can be specified. It should be a callable object taking a dsn\n[Test and build Python package/test]   |         argument.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Test and build Python package/test]   |         used by cursor().\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Test and build Python package/test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         Any other keyword parameter will be passed to the underlying client\n[Test and build Python package/test]   |         library: the list of supported parameters depends on the library version.\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         \"\"\"\n[Test and build Python package/test]   |         kwasync = {}\n[Test and build Python package/test]   |         if 'async' in kwargs:\n[Test and build Python package/test]   |             kwasync['async'] = kwargs.pop('async')\n[Test and build Python package/test]   |         if 'async_' in kwargs:\n[Test and build Python package/test]   |             kwasync['async_'] = kwargs.pop('async_')\n[Test and build Python package/test]   |     \n[Test and build Python package/test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Test and build Python package/test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Test and build Python package/test]   | E       django.db.utils.OperationalError: could not connect to server: Connection refused\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (127.0.0.1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | E       could not connect to server: Cannot assign requested address\n[Test and build Python package/test]   | E       \tIs the server running on host \"localhost\" (::1) and accepting\n[Test and build Python package/test]   | E       \tTCP/IP connections on port 5432?\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/psycopg2/__init__.py:122: OperationalError\n[Test and build Python package/test]   | =============================== warnings summary ===============================\n[Test and build Python package/test]   | pupa/tests/clean/test_clean.py::test_get_stale_objects\n[Test and build Python package/test]   |   /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/django/db/backends/postgresql/base.py:270: RuntimeWarning: Normally Django will use a connection to the 'postgres' database to avoid running initialization queries against the production database when it's not needed (for example, when running tests). Django was unable to create a connection to the 'postgres' database and will use the first PostgreSQL database instead.\n[Test and build Python package/test]   |     RuntimeWarning\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | -- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | ---------- coverage: platform linux, python 3.6.14-final-0 -----------\n[Test and build Python package/test]   | Coverage HTML written to dir htmlcov\n[Test and build Python package/test]   | \n[Test and build Python package/test]   | =========================== short test summary info ============================\n[Test and build Python package/test]   | ERROR pupa/tests/clean/test_clean.py::test_get_stale_objects - django.db.util...\n[Test and build Python package/test]   | ERROR pupa/tests/clean/test_clean.py::test_remove_stale_objects - django.db.u...\n[Test and build Python package/test]   | ERROR pupa/tests/clean/test_clean.py::test_clean_command - django.db.utils.Op...\n[Test and build Python package/test]   | ERROR pupa/tests/importers/test_base_importer.py::test_last_seen_updates_on_scrape\n[Test and build Python package/test]   | ERROR pupa/tests/importers/test_base_importer.py::test_deduplication_identical_object\n[Test and build Python package/test]   | ERROR pupa/tests/importers/test_base_importer.py::test_exception_on_identical_objects_in_import_stream\n[Test and build Python package/test]   | ERROR pupa/tests/importers/test_base_importer.py::test_resolve_json_id - djan...\n[Test and build Python package/test]   | ERROR pupa/tests/importers/test_base_importer.py::test_invalid_fields - djang...\n[Test and build Python package/test]   | ERROR pupa/tests/importers/test_base_importer.py::test_invalid_fields_related_item\n[Test and build Python package/test]   | ERROR pupa/tests/importers/test_base_importer.py::test_locked_field - django....\n[Test and build Python package/test]   | ERROR pupa/tests/importers/test_base_importer.py::test_locked_field_subitem\n[Test and build Python package/test]   | ERROR pupa/tests/importers/test_bill_importer.py::test_full_bill - django.db....\n[Test and build Python package/test]   | ERROR pupa/tests/importers/test_bill_importer.py::test_bill_chamber_param - d...\n[Test and build Python package/test]   | ERROR pupa/tests/importers/test_bill_importer.py::test_bill_update - django.d...\n[Test and build Python package/test]   | ERROR pupa/tests/importers/test_bill_importer.py::test_bill_update_because_of_subitem\n[Test and build Python package/test]   | ERROR pupa/tests/importers/test_bill_importer.py::test_bill_update_subsubitem\n[Test and build Python package/test]   | ERROR pupa/tests/importers/test_bill_importer.py::test_bill_sponsor_by_identifier\n[Test and build Python package/test]   | ERROR pupa/tests/importers/test_bill_importer.py::test_bill_sponsor_limit_lookup\n[Test and build Python package/test]   | ERROR pupa/tests/importers/test_bill_importer.py::test_bill_action_extras - d...\n[Test and build Python package/test]   | ERROR pupa/tests/importers/test_bill_importer.py::test_fix_bill_id - django.d...\n[Test and build Python package/test]   | ERROR pupa/tests/importers/test_event_importer.py::test_related_people_event\n[Test and build Python package/test]   | ERROR pupa/tests/importers/test_event_importer.py::test_related_vote_event - ...\n[Test and build Python package/test]   | ERROR pupa/tests/importers/test_event_importer.py::test_related_bill_event - ...\n[Test and build Python package/test]   | ERROR pupa/tests/importers/test_event_importer.py::test_related_committee_event\n[Test and build Python package/test]   | ERROR pupa/tests/importers/test_event_importer.py::test_media_event - django....\n[Test and build Python package/test]   | ERROR pupa/tests/importers/test_event_importer.py::test_media_document - djan...\n[Test and build Python package/test]   | ERROR pupa/tests/importers/test_event_importer.py::test_full_event - django.d...\n[Test and build Python package/test]   | ERROR pupa/tests/importers/test_event_importer.py::test_pupa_identifier_event\n[Test and build Python package/test]   | ERROR pupa/tests/importers/test_event_importer.py::test_top_level_media_event\n[Test and build Python package/test]   | ERROR pupa/tests/importers/test_event_importer.py::test_event_agenda_item - d...\n[Test and build Python package/test]   | ERROR pupa/tests/importers/test_jurisdiction_importer.py::test_jurisdiction_import\n[Test and build Python package/test]   | ERROR pupa/tests/importers/test_jurisdiction_importer.py::test_jurisdiction_update\n[Test and build Python package/test]   | ERROR pupa/tests/importers/test_jurisdiction_importer.py::test_jurisdiction_merge_related\n[Test and build Python package/test]   | ERROR pupa/tests/importers/test_membership_importer.py::test_full_membership\n[Test and build Python package/test]   | ERROR pupa/tests/importers/test_membership_importer.py::test_no_membership_for_person\n[Test and build Python package/test]   | ERROR pupa/tests/importers/test_membership_importer.py::test_no_membership_for_person_including_party\n[Test and build Python package/test]   | ERROR pupa/tests/importers/test_membership_importer.py::test_multiple_orgs_of_same_class\n[Test and build Python package/test]   | ERROR pupa/tests/importers/test_membership_importer.py::test_multiple_posts_class\n[Test and build Python package/test]   | ERROR pupa/tests/importers/test_membership_importer.py::test_unmatched_person\n[Test and build Python package/test]   | ERROR pupa/tests/importers/test_organization_importer.py::test_full_organization\n[Test and build Python package/test]   | ERROR pupa/tests/importers/test_organization_importer.py::test_deduplication_similar_but_different\n[Test and build Python package/test]   | ERROR pupa/tests/importers/test_organization_importer.py::test_deduplication_other_name_exists\n[Test and build Python package/test]   | ERROR pupa/tests/importers/test_organization_importer.py::test_deduplication_other_name_overlaps\n[Test and build Python package/test]   | ERROR pupa/tests/importers/test_organization_importer.py::test_deduplication_error_overlaps\n[Test and build Python package/test]   | ERROR pupa/tests/importers/test_organization_importer.py::test_deduplication_overlap_name_distinct_juris\n[Test and build Python package/test]   | ERROR pupa/tests/importers/test_organization_importer.py::test_deduplication_parties\n[Test and build Python package/test]   | ERROR pupa/tests/importers/test_organization_importer.py::test_deduplication_prevents_identical\n[Test and build Python package/test]   | ERROR pupa/tests/importers/test_organization_importer.py::test_pseudo_ids - d...\n[Test and build Python package/test]   | ERROR pupa/tests/importers/test_organization_importer.py::test_parent_id_resolution\n[Test and build Python package/test]   | ERROR pupa/tests/importers/test_organization_importer.py::test_pseudo_parent_id_resolution\n[Test and build Python package/test]   | ERROR pupa/tests/importers/test_organization_importer.py::test_extras_organization\n[Test and build Python package/test]   | ERROR pupa/tests/importers/test_people_importer.py::test_full_person - django...\n[Test and build Python package/test]   | ERROR pupa/tests/importers/test_people_importer.py::test_deduplication_same_name\n[Test and build Python package/test]   | ERROR pupa/tests/importers/test_people_importer.py::test_deduplication_other_name_exists\n[Test and build Python package/test]   | ERROR pupa/tests/importers/test_people_importer.py::test_deduplication_other_name_overlaps\n[Test and build Python package/test]   | ERROR pupa/tests/importers/test_people_importer.py::test_deduplication_no_name_overlap\n[Test and build Python package/test]   | ERROR pupa/tests/importers/test_people_importer.py::test_deduplication_no_jurisdiction_overlap\n[Test and build Python package/test]   | ERROR pupa/tests/importers/test_people_importer.py::test_multiple_memberships\n[Test and build Python package/test]   | ERROR pupa/tests/importers/test_people_importer.py::test_same_name_people - d...\n[Test and build Python package/test]   | ERROR pupa/tests/importers/test_people_importer.py::test_same_name_people_other_name\n[Test and build Python package/test]   | ERROR pupa/tests/importers/test_people_importer.py::test_same_name_second_import\n[Test and build Python package/test]   | ERROR pupa/tests/importers/test_people_importer.py::test_resolve_json_id - dj...\n[Test and build Python package/test]   | ERROR pupa/tests/importers/test_people_importer.py::test_resolve_json_id_multiple_family_name\n[Test and build Python package/test]   | ERROR pupa/tests/importers/test_post_importer.py::test_full_post - django.db....\n[Test and build Python package/test]   | ERROR pupa/tests/importers/test_post_importer.py::test_deduplication - django...\n[Test and build Python package/test]   | ERROR pupa/tests/importers/test_post_importer.py::test_resolve_special_json_id\n[Test and build Python package/test]   | ERROR pupa/tests/importers/test_vote_event_importer.py::test_full_vote_event\n[Test and build Python package/test]   | ERROR pupa/tests/importers/test_vote_event_importer.py::test_vote_event_identifier_dedupe\n[Test and build Python package/test]   | ERROR pupa/tests/importers/test_vote_event_importer.py::test_vote_event_pupa_identifier_dedupe\n[Test and build Python package/test]   | ERROR pupa/tests/importers/test_vote_event_importer.py::test_vote_event_bill_id_dedupe\n[Test and build Python package/test]   | ERROR pupa/tests/importers/test_vote_event_importer.py::test_vote_event_bill_clearing\n[Test and build Python package/test]   | ERROR pupa/tests/importers/test_vote_event_importer.py::test_vote_event_bill_actions\n[Test and build Python package/test]   | ERROR pupa/tests/importers/test_vote_event_importer.py::test_vote_event_bill_actions_two_stage\n[Test and build Python package/test]   | ERROR pupa/tests/importers/test_vote_event_importer.py::test_vote_event_bill_actions_errors\n[Test and build Python package/test]   | ERROR pupa/tests/importers/test_vote_event_importer.py::test_fix_bill_id - dj...\n[Test and build Python package/test]   | ERROR pupa/tests/reports/test_session_report.py::test_bills_missing_actions\n[Test and build Python package/test]   | ERROR pupa/tests/reports/test_session_report.py::test_bills_missing_sponsors\n[Test and build Python package/test]   | ERROR pupa/tests/reports/test_session_report.py::test_bills_missing_versions\n[Test and build Python package/test]   | ERROR pupa/tests/reports/test_session_report.py::test_votes_missing_bill - dj...\n[Test and build Python package/test]   | ERROR pupa/tests/reports/test_session_report.py::test_votes_missing_voters - ...\n[Test and build Python package/test]   | ERROR pupa/tests/reports/test_session_report.py::test_missing_yes_no_counts\n[Test and build Python package/test]   | ERROR pupa/tests/reports/test_session_report.py::test_votes_with_bad_counts\n[Test and build Python package/test]   | ERROR pupa/tests/reports/test_session_report.py::test_unmatched_sponsors - dj...\n[Test and build Python package/test]   | ERROR pupa/tests/reports/test_session_report.py::test_unmatched_voters - djan...\n[Test and build Python package/test]   | ================== 101 passed, 1 warning, 84 errors in 18.73s ==================\n[Test and build Python package/test]   \u274c  Failure - Main Test with pytest\n[Test and build Python package/test] exitcode '1': failure\n[Test and build Python package/test] \ud83c\udfc1  Job failed\n",
    "actions_stderr": "Error: Job 'test' failed\n"
}